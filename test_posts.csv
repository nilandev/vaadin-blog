"title","slug","excerpt","publish_status","content","display_order","template_type","post_type"
"Most Commonly Used Annotations in Spring Boot","spring-boot-annotations","Spring Boot annotations are a form of metadata that provides data about a program that is not a part of the program itself. Following are some of the most used annotations in spring boot.","LIVE","<p>Spring Boot Annotations&nbsp;are a form of metadata that provides data about a program that is not a part of the program itself. They do not have any direct effect on the operation of the code they annotate. Spring Boot Annotations&nbsp;do not use XML and instead use the convention over configuration principle.&nbsp;</p>
<p>Following are some of the most used Spring annotations in no particular order.</p>
<p><strong>@SpringBootApplication </strong>is Spring’s way of identifying that this application is from Spring Boot. It is also used for spring auto-configuration and component scan for your application. The component scan is used to identify which classes are to be instantiated in the application.</p>
<p><strong>@Component- </strong>It is a generic stereotype for any Spring-managed component or bean. It tells Spring to look for “Components” when it starts up the application. Pretty much @Controllers, @Service, etc that may be found throughout your application.</p>
<p><strong>@Repository </strong>– is a stereotype for the persistence layer.@Service – This stereotype is used to indicate that they’re holding the business logic. @Controller – is a stereotype for the presentation layer for Spring MVC application. </p>
<p></p>
<p>And here is a nice diagram to explain the hierarchy of all these annotations in Spring Framework: </p>
<p></p>
<div class=""wp-block-image""><figure class=""aligncenter size-full is-resized""><img alt="""" class=""wp-image-16554"" loading=""lazy"" sizes=""(max-width: 604px) 100vw, 604px"" src=""/media/uploads/articles/1/Blank-diagram.png"" srcset="""" width=""604"" height=""249""></figure></div>
<p><strong>@Autowire</strong>– This annotation is used to inject the dependencies without creating an object using a new keyword. Please note that it is recommended to use constructor-based injection instead of @Autowire annotation.</p>
<p></p><p><strong>@Bean</strong>– The @Bean annotations are used at the method level and indicate that a method produces a bean that is to be managed by Spring container. For example:</p>
<pre class=""prettyprint lang-java"">@Bean
Public BeanExample beanExample () {
    return new BeanExample();
}
</pre><p></p>
<p><strong>@Configuration</strong> – tells Spring to look for .properties files on your source path. Here, for example, you can define an “application.properties” file to define your data source (database information for Spring to use).</p>
<p><strong>@ControllerAdvice</strong> – This annotation is used to handle exceptions at the global level. We will create a spring boot project step-by-step and handle the exceptions at the global level.</p>
<p><strong>@PostConstruct </strong>– This annotation is executed after injections are committed to the given bean. We will create a spring boot project step-by-step and we will discuss this annotation.</p>
<p><strong>@Value </strong>– This annotation is used to read the property value from the property file. We will create a spring boot project step-by-step and read the property from the property file with this annotation.</p>
<p>This is not an exhaustive list, there are many more annotations you can find in Spring Framework but that is for some other day. We will learn those as we cover each topic.</p>",0,"standard","post"
"Understanding Spring Boot Project Structure","spring-boot-project-structure","In this section we will discuss the project structure and various components of a Spring Boot project.
","LIVE","<p>In the <a href=""/articles/spring-boot/getting-started-with-spring-boot"">previous tutorial</a>, we discussed the basics of Spring Boot and generated a Spring Boot project using the Spring Initializer. In this section, we will discuss the project structure and various components of a Spring Boot project.</p>
<p>
</p>
<h2><span id=""Application_Structure"">Application Structure</span></h2>
<p>Spring Boot is an opinionated framework that makes the development process very easy since we don’t have to choose the versions of different dependencies based on the version of Spring framework, its all taken care of by Spring Boot.</p>
<p>The project structure looks as follows:</p>
<p><img alt="""" class=""alignnone size-large wp-image-16538"" height=""495"" loading=""lazy"" sizes=""(max-width: 1024px) 100vw, 1024px"" src=""/media/uploads/articles/2/project-structure-1024x495.png"" srcset="""" width=""1024""/></p>
<h2><span id=""Main_Application_Class"">Main Application Class</span></h2>
<p>The main application class is the entry point to the application. It is located in a root package above other classes. The main application class is responsible for initializing the Spring application context and starting the Spring application.</p>
<p>The @SpringBootApplication annotation is often placed on your main class, and it implicitly defines a base “search package” for certain items. For example, if you are writing a JPA application, the package of the @SpringBootApplication annotated class is used to search for @Entity items. Using a root package also allows the component scan to apply only to your project.</p>
<pre class=""prettyprint lang-java"">package com.example.hellospringboot;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class HelloSpringBootApplication {

    public static void main(String[] args) {
        SpringApplication.run(HelloSpringBootApplication.class, args);
    }

}
</pre>
<p>A single @SpringBootApplication annotation can be used to enable those three features, that is:</p>
<ul>
<li>@EnableAutoConfiguration: enable Spring Boot’s auto-configuration mechanism</li>
<li>@ComponentScan: enable @Component scan on the package where the application is located</li>
<li>@SpringBootConfiguration: enable registration of extra beans in the context or the import of additional configuration classes.</li>
</ul>
<p>We recommend that you follow Java’s recommended package naming conventions and use a reversed domain name (for example, com.example.project).</p>
<h2><span id=""The_buildgradle_file"">The build.gradle file</span></h2>
<p>The build.gradle must be located at the root of the application as we can see in the above project structure.</p>
<pre class=""prettyprint lang-java"">plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}
</pre>
<h2><span id=""Spring_Boot_Application_Properties"">Spring Boot Application Properties</span></h2>
<p>Various properties can be specified inside your application.properties file, inside your application.yml file, or as command-line switches.</p>
<p>The application.properties file is located in the src/main/resources directory. The properties are defined as key-value pairs. Where the key is the property name and the value is the property value.</p>
<p>For, eg.</p>
<pre class=""prettyprint lang-java"">server.port=8080
server.contextPath=/

spring.activemq.broker-url=tcp://localhost:61616
spring.activemq.user=admin
spring.activemq.password=password

spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1
spring.datasource.password=root
spring.datasource.username=admin
spring.datasource.type=mysql
</pre>
<p>Check out the list of common Spring Boot properties and references to the underlying classes that consume them <a href=""https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">here</a>.</p>
<h2><span id=""Static_Content"">Static Content</span></h2>
<p>In a spring boot web application, static files like HTML, CSS, JavaScript, and images files can be served directly from any of the following classpath locations out of the box. No configuration is required.</p>
<p>Let’s look at the resources folder in the above project structure. This directory, as the name suggests, is dedicated to all the static resources, templates, and property files.</p>
<ul>
<li>resources/static – contains static resources such as CSS, js, and images.</li>
<li>resources/templates – contains server-side templates which are rendered by Spring.</li>
</ul>
<h2><span id=""Templates"">Templates</span></h2>
<p>Spring supports the following template engines by default. Templates are used with we have to build a dynamic website using SpringBoot. These templates can be activated using appropriate SpringBoot starters.</p>
<ul>
<li><strong>FreeMarker</strong> – spring-boot-starter-freemarker</li>
<li><strong>Groovy</strong> – spring-boot-starter-groovy</li>
<li><strong>Thymeleaf</strong> – spring-boot-starter-thymeleaf</li>
<li><strong>Mustache</strong> – spring-boot-starter-mustache</li>
</ul>
<p>All these template engines will resolve their template files from the path src/main/resources/template.</p>
",0,"standard","post"
"Getting Started With Spring Boot","getting-started-with-spring-boot","This tutorial covers the introduction to the Spring Boot framework, the benefits and the Spring Boot starter project.
","LIVE","<p>This tutorial covers the introduction to the Spring Boot framework, the benefits the Spring Framework offers, and the Spring Boot starter project. This tutorial is intended for developers who are new to Spring Boot and want to get started quickly.</p>
<p>
</p>
<h2><span id=""What_is_Java_Spring_Boot"">What is Java Spring Boot?</span></h2>
<p>Spring Boot Framework is a popular, open-source, enterprise-level framework for creating standalone, production-grade applications that run on the Java Virtual Machine (JVM). It requires minimal or zero configuration and is easy to get started. It is a widely popular choice among Java developers for developing microservices and web applications.</p>
<p>It inherits the features like dependency Injection or Inversion of Control (IoC) from the Spring Framework and provides a rich set of features like RESTful web services, transaction management, caching, and more.</p>
<p>Spring Framework also offers built-in support for typical tasks that an application needs to perform, such as data binding, type conversion, validation, exception handling, resource and event management, internationalization, and more.</p>
<p>It integrates with various Java EE technologies such as RMI, AMQP (Advanced Message Queuing Protocol), Java Web Services, and others.</p>
<h2><span id=""Spring_Boot_Features"">Spring Boot Features</span></h2>
<ul>
<li>Autoconfiguration</li>
<li>Embed Tomcat, Jetty (no need to deploy WAR files)</li>
<li>Provides ‘starter’ dependencies to simplify your build configuration</li>
<li>Automatically configure Spring and 3rd party libraries whenever possible</li>
<li>Provide production-ready features such as metrics, health checks, and externalized configuration</li>
<li>Absolutely no code generation and no requirement for XML configuration</li>
</ul>
<p><strong>Autoconfiguration: </strong><span style=""font-size: revert; color: var(--cs-color-primary); font-family: var(--cs-font-base-family), sans-serif; font-style: var(--cs-font-base-style); font-weight: var(--cs-font-base-weight); letter-spacing: var(--cs-font-base-letter-spacing);"">Springboot applications are initialized with pre-set dependencies that you don’t have to configure manually. As Java Spring Boot comes with built-in autoconfiguration capabilities, it automatically configures both the underlying Spring Framework and third-party packages as necessary for your application. This helps you to reduce the errors possibly caused by misconfiguration and make the developers more productive.</span></p>
<h2><span id=""Spring_Boot_vs_Spring_Framework"">Spring Boot vs. Spring Framework</span></h2>
<p>The biggest advantages of using Spring Boot versus Spring Framework alone are ease of use and faster development. However, this comes at the expense of the greater flexibility you get from working directly with Spring Framework.</p>
<p>In practice, unless you need or want to implement a very unique configuration, using Spring Booth is worth the tradeoff. It lets you easily inject extra dependencies into your application if something is not present in the Spring Starter bundle.</p>
<p>And, you still get access to all Spring Framework features, including easy event handling, validation, data binding, type conversion, and built-in security and testing capabilities. Bottom line, Spring Boot can significantly streamline the development process and remove the fuss about the configurations.</p>
<h2><span id=""Spring_Boot_Starters"">Spring Boot Starters</span></h2>
<p>Spring Boot Starters are a set of convenient dependency descriptors which can be easily included in any level of application. These starters work as a bootstrapping process for the Spring-related technologies, we no longer need to worry about the dependencies and they will be automatically managed by Spring Boot Starters.</p>
<p>Spring Boot starters follow a similar naming pattern: <code>spring-boot-starter-XYZ</code>, where XYZ denotes a particular type of application.</p>
<p>E.g. Spring Boot starters:</p>
<ul>
<li><strong>spring-boot-starter-web</strong> – RESTful web services using Spring MVC and embedded Tomcat container.</li>
<li><strong>spring-boot-starter-data-jpa</strong> – Manage relational data from Spring boot</li>
<li><strong>org.springframework.boot:spring-boot-starter-security</strong> – security implementation</li>
<li><strong>org.springframework.boot:spring-boot-starter-activemq</strong> – connect to ActiveMQ server</li>
</ul>
<h2><span id=""Spring_Initializr"">Spring Initializr</span></h2>
<p>Spring Initializr is a web-based tool provided by Pivotal. With the help of Spring Initializr, we can easily generate and download the Spring Boot Project template. Checkout online spring initial tool here <a href=""https://start.spring.io"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://start.spring.io</a></p>
<p><img alt="""" class=""alignnone size-large wp-image-16529"" height=""658"" loading=""lazy"" sizes=""(max-width: 1024px) 100vw, 1024px"" src=""/media/uploads/articles/3/Screenshot-2022-04-16-at-20.38.25-1024x658.png"" srcset="""" width=""1024""/></p>
<h2><span id=""Creating_First_Spring_Boot_Application"">Creating First Spring Boot Application</span></h2>
<p>Now that we understand the basics of Spring Boot, let’s create our first Spring Boot application.</p>
<p>For developing a spring boot application, you need the following <strong>prerequisites</strong>:</p>
<ul>
<li>Java8 must be installed on your machine.</li>
<li>Need an IDE for writing code. I prefer IntelliJ IDEA. You can download a community edition if you don’t have it already.</li>
</ul>
<p>Once the above prerequisites are satisfied, you can start the development process by following the steps below:</p>
<ul>
<li>Navigate to <a href=""https://start.spring.i"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://start.spring.i</a>o.</li>
<li>Select the Maven or Gradle build type and select the language. I’ve selected, Gradle with Java.</li>
<li>Select the Spring boot version. At the time of writing this article, Spring Boot 2.6.6 was the latest release version.</li>
<li>Provide the details like group name. Usually the reverse of your domain. If your domain is example.com, your group name will be <code>com.example</code></li>
<li>The artifact name is the name of the jar without a version. For example, if your artifact name is my-app, then the jar will be my-app-1.0.0.jar.</li>
<li>Provide a name for your application. Let’s call it a “hello-spring-boot” app.</li>
<li>Select the version of Java you want to use. I’ve selected Java 8.</li>
<li>On the right-hand side, you will see the list of dependencies. You can add any of the starter dependencies you want to your project. For eg. in this case, we want to build a web application, so we need to add spring-boot-starter-web.</li>
</ul>
<p>Once the above details are filled in, you can click on the “<strong>Generate</strong>” button. This will download a new Spring Boot project with the configuration you’ve selected. Now, you can extract the zip file and open the project in your IntelliJ IDEA.</p>
<h2><span id=""Build_and_Run_Spring_Boot_Application"">Build and Run Spring Boot Application</span></h2>
<p><strong>For Gradle projects</strong><br/>
For Gradle projects, you can build and run the project by following the steps below:</p>
<p>Build spring boot application into an executable jar</p>
<pre>./gradlew build</pre>
<p>Start/Run spring boot application</p>
<pre>./gradlew bootRun</pre>
<p><strong>For Maven projects</strong><br/>
If you’re using maven based build, you can build and run the project by following the steps below:</p>
<p>Build spring boot application into an executable jar</p>
<pre>./mvnw clean package</pre>
<p>Start/Run spring boot application</p>
<pre>./mvnw spring-boot:run</pre>
<p>When you run your Spring Boot application, you will see a log message like this:</p>
<pre class=""prettyprint lang-java"">    . ____ _ __ _ _
    /\ / ___'_ __ _ _(_)_ __ __ _ \ \ \ 
    ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ 
    \/ ___)| |_)| | | | | || (_| | ) ) ) )
    ' |____| .__|_| |_|_| |_\__, | / / / /
    =========|_|==============|___/=/_/_/_/
    :: Spring Boot :: (v2.6.6)
    
    2022-04-16 17:17:14.805 INFO 25315 --- [ main] c.e.h.HelloSpringBootApplication : Starting HelloSpringBootApplication
    using Java 11.0.11 on BLR-P7111831LP.local with PID 25315
    (/Users/Neel/spring-boot-examples/hello-spring-boot/build/classes/java/main started by
    p7111831 in /Users/Neel/spring-boot-examples/hello-spring-boot)
    2022-04-16 17:17:14.807 INFO 25315 --- [ main] c.e.h.HelloSpringBootApplication : No active profile set, falling back to
    1 default profile: ""default""
    2022-04-16 17:17:15.347 INFO 25315 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with
    port(s): 8080 (http)
    2022-04-16 17:17:15.353 INFO 25315 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat]
    2022-04-16 17:17:15.354 INFO 25315 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine:
    [Apache Tomcat/9.0.60]
    2022-04-16 17:17:15.416 INFO 25315 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded
    WebApplicationContext
    2022-04-16 17:17:15.417 INFO 25315 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext:
    initialization completed in 570 ms
    2022-04-16 17:17:15.681 INFO 25315 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080
    (http) with context path ''
    2022-04-16 17:17:15.692 INFO 25315 --- [ main] c.e.h.HelloSpringBootApplication : Started HelloSpringBootApplication in
    1.148 seconds (JVM running for 1.61)
</pre>
",0,"standard","post"
"How to Change Spring Boot Default Port?","how-to-change-spring-boot-default-port","Spring Boot lets you run the same application more than once on a different port number. The default port used in Spring Boot is 8080.
","LIVE","<p>The Spring Boot framework provides the default embedded server (Tomcat) to run the Spring Boot application. It runs on port 8080. It is possible to change the port in Spring Boot.</p>
<p>If you want to change the default port you have several options. But using <code>application.properties</code> option is recommended to overwrite default values.</p>
<p>To override the default port, we need to specify <code>server.port</code> property in application.properties file.</p>
<h4>Changing Default Port in Spring Boot</h4>
<p>In the <code>application.properties</code> file, we can set a custom port number for the property server.port</p>
<pre><code>server.port = 9090</code></pre>
<p>In the application.yml file, you can find as follows −</p>
<pre><code>server: 
    port: 9090</code></pre>
<h4>Running Spring Boot in Random Port</h4>
<p>In the <code>application.properties</code> file, we can set a random port number for the property <code>server.port</code></p>
<pre><code>server.port = 0</code></pre>
<p>In the <code>application.yml file</code>, you can find it as follows −</p>
<pre><code>server: 
   port: 0
</code></pre>
<p><strong>Note </strong>− If the server.port number is 0 while starting the Spring Boot application, Tomcat uses the random port number based on the availability.</p>
<h4>Using Command-Line Arguments</h4>
<p>We can also set the server port using the java command line argument as follows.</p>
<pre class=""prettyprint lang-java"">java -jar spring-boot-app.jar --server.port=8009</pre>
<p>or by using the equivalent syntax:</p>
<pre class=""prettyprint lang-java"">java -jar -Dserver.port=8009 spring-boot-app.jar</pre>
",0,"standard","post"
"How to Consume REST API in Spring Boot Using RestTemplate?","calling-rest-services-using-resttemplate","RestTemplate is a synchronous HTTP client and is designed to consume REST API calls from Spring boot application.","LIVE","<p>RestTemplate is a synchronous client to make HTTP request from Spring Boot application. It simplifies the process of making HTTP requests and handling the responses by providing a higher-level abstraction.</p>

<p>To consume a REST API using RestTemplate in a Spring Boot application, you need to first add the RestTemplate dependency in your project. If you're using Maven, add the following dependency to your pom.xml file.</p>
<pre class=""prettyprint lang-xml"">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;&nbsp;</pre>

<div class=""cnvs-block-alert cnvs-block-alert-1564564660843 is-style-cnvs-block-alert-danger""><div class=""cnvs-block-alert-inner""><b>Depreciation</b><strong>&nbsp;Notice!!</strong>
<p></p><p>A modern version of the HTTP client called WebClient has been introduced in Spring 5. It is an alternative to RestTemplate. It provides both synchronous and asynchronous API’s to make the REST calls more efficient.</p> <p>If you’re developing a new application or migrating an old one, it is recommended to use <a href=""/articles/what-is-webclient-how-to-use-webclient-in-java-springboot"">WebClient</a> over RestTemplate. RestTemplate will be deprecated in future versions.</p><p></p>
</div>
</div>


<p>RestTemplate provides a variety of methods for making HTTP calls to RESTful APIs. Here are some commonly used methods:</p>

<ul><li><b>getForObject()</b>: This method performs a GET request and returns the response body as an object of the specified type. It's typically used when you expect the response body to be deserialized into a single object.</li></ul>

<pre class=""prettyprint lang-java"">T response = restTemplate.getForObject(url, responseType);
</pre>

<ul><li><b>getForEntity()</b>: Similar to getForObject(), this method performs a GET request and returns the entire response as a ResponseEntity object. It provides access to the response body, headers, and status code.</li></ul>

<pre class=""prettyprint lang-java"">ResponseEntity<t> response = restTemplate.getForEntity(url, responseType);
</t></pre>

<ul><li><b>postForObject()</b>: This method performs a POST request and sends the request body along with the request. It returns the response body as an object of the specified type.</li></ul>
<pre class=""prettyprint lang-java"">T response = restTemplate.postForObject(url, request, responseType);
</pre>

<ul><li><b>postForEntity()</b>: Similar to postForObject(), this method performs a POST request and returns the entire response as a ResponseEntity object.</li></ul>

<pre class=""prettyprint lang-java"">ResponseEntity&lt;T&gt; response = restTemplate.postForEntity(url, request, responseType);
</pre>

<ul><li><b>put()</b>: This method performs a PUT request to update a resource on the server. It sends the request body and returns the response as a ResponseEntity.</li></ul>
<pre class=""prettyprint lang-java"">ResponseEntity&lt;Void&gt; response = restTemplate.put(url, request);
</pre>


<ul><li><b>delete()</b>: This method performs a DELETE request to delete a resource on the server. It does not expect a response body and returns a ResponseEntity.</li></ul>
<pre class=""prettyprint lang-java"">ResponseEntity&lt;Void&gt; response = restTemplate.delete(url);
</pre>

<ul><li><b>exchange()</b>: This method is a more flexible option that allows you to perform any HTTP method (GET, POST, PUT, DELETE, etc.) and provides full control over the request and response. It returns a ResponseEntity object.</li></ul>
<pre class=""prettyprint lang-java"">HttpEntity&lt;RequestType&gt; requestEntity = new HttpEntity&lt;&gt;(request, headers);
ResponseEntity&lt;ResponseType&gt; response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, responseType);
</pre>
<p>These are just a few examples of the methods provided by RestTemplate. RestTemplate also supports methods for handling HTTP headers, handling file uploads, setting query parameters, handling authentication, and more.</p>



<h2 class="""">Consuming the GET API</h2>
<p>In the given example, we are fetching the API response as a JSON String. We need to use ObjectMapper to parse it to the POJO before using it in the application.</p>
<p>getForObject() method is pretty useful when we are getting an unparsable response from the server, and we have no<br>control to get it fixed on the server-side. Here, we can get the response as String, and use a custom parser or use a string replacement function to fix the response before handling it to the parser.</p>
<p>In the course of this tutorial, we will create simple <code>RestTemplate</code> bean in the application.</p>
<pre class=""prettyprint lang-java"">@Service
public class ProductService {

    private static final String POST_API = ""https://fakestoreapi.com/products"";
    private static final String GET_API = ""https://fakestoreapi.com/products/{productId}"";
    private static final String DELETE_API = ""https://fakestoreapi.com/products/{productId}"";

    private final RestTemplate restTemplate;

    public ProductService(RestTemplateBuilder restTemplateBuilder) {
        this.restTemplate = restTemplateBuilder.build();
    }
}
</pre>
<h4>Consuming APIs as String</h4>
<pre class=""prettyprint lang-java"">Map&lt;String, String&gt; params = new HashMap&lt;&gt;();
params.put(""productId"", productId);
String result = restTemplate.getForObject(GET_API, String.class, params);
</pre>
<h4>Consuming APIs response to POJO</h4>
<pre class=""prettyprint lang-java"">Map&lt;String, String&gt; params = new HashMap&lt;&gt;();
params.put(""productId"", productId);

Product result = restTemplate.getForObject(GET_API, Product.class, params);
</pre>
<h4>Using getForEntity() Method</h4>
<pre class=""prettyprint lang-java"">Map&lt;String, String&gt; params = new HashMap&lt;&gt;();
params.put(""productId"", productId);
ResponseEntity&lt;Product&gt; result = restTemplate.getForEntity(GET_API, Product.class, params);

HttpStatus statusCode = result.getStatusCode();
Product product = result.getBody();
</pre>
<h4>Sending HTTP Headers using RestTemplate</h4>
<pre class=""prettyprint lang-java"">HttpHeaders headers = new HttpHeaders();
headers.setAccept(List.of(MediaType.APPLICATION_JSON));
headers.set(""X-API-KEY"", ""YOUR_API_KEY"");
HttpEntity&lt;String&gt; httpEntity = new HttpEntity&lt;&gt;(headers);

Map&lt;String, String&gt; params = new HashMap&lt;&gt;();
params.put(""productId"", productId);

ResponseEntity&lt;Product&gt; result = restTemplate.exchange(GET_API, HttpMethod.GET, httpEntity, 
                    Product.class, params);
return result.getBody();
</pre>
<h2>Consuming the POST API</h2>
<pre class=""prettyprint lang-java"">HttpHeaders headers = new HttpHeaders();
headers.set(""X-API-KEY"", ""YOUR_API_KEY"");
headers.setContentType(MediaType.APPLICATION_JSON);    
HttpEntity&lt;Product&gt; httpEntity = new HttpEntity&lt;&gt;(product, headers);
    
Product createdProduct = restTemplate.postForObject(POST_API, httpEntity, Product.class);
</pre>
<h2>Consuming the PUT API</h2>
<pre class=""prettyprint lang-java"">Map&lt;String, String&gt; params = new HashMap&lt;&gt;();
params.put(""productId"", product.getId());

restTemplate.put(GET_API, product, params);
</pre>
<h2>Consuming the DELETE API</h2>
<pre class=""prettyprint lang-java"">Map&lt;String, String&gt; params = new HashMap&lt;&gt;();
params.put(""productId"", productId);

restTemplate.delete(GET_API, params);
</pre>",0,"standard","post"
"How to Execute Code on Spring Boot Application Startup?","how-to-execute-code-on-spring-boot-application-startup","Spring boot offers multiple options, for executing your code during the application startup. This post covers some of the best practices recommended by the Spring developers.","LIVE","<p id=""a0774b5f-002c-4bd6-9c1e-5aa16a147094"" class="""">Spring boot offers multiple options, for executing your code during the application startup. This post covers some of the ‘out of the box’ practices recommended by the Spring developers. There are mainly 3 options</p><ol type=""1"" id=""5749bf16-a364-4a29-95b7-d4d237896d1a"" class=""numbered-list"" start=""1""><li>Using @PostConstruct annotation</li></ol><ol type=""1"" id=""00806865-596f-40d2-a1ad-c34cd17d2c8f"" class=""numbered-list"" start=""2""><li>Using ApplicationRunner or Command Line Runner Interface</li></ol><ol type=""1"" id=""4454eb84-4d28-4165-86c4-f7b171910203"" class=""numbered-list"" start=""3""><li>Option-3: Using Spring Boot Events</li></ol><p id=""3511a6ba-a733-4593-9f90-0813a491a0df"" class="""">In this article, we will cover all of the available options and look into the best practices dos and don't.</p><p id=""e2e1919f-9554-4080-ae72-226a73705bec"" class="""">Let us begin by creating a simple Spring Boot application.</p><h2 id=""ffae70a0-b3d0-4bfe-8bc7-c3acfd35669e"" class="""">Option-1: @PostConstruct Annotation</h2><p id=""ea472042-59a5-48a1-8993-713e53a0572b"" class="""">The @<strong>PostConstruct</strong> annotation can be used on a method to indicate a spring that, this method should be executed after the bean is initialized. </p><p id=""0b12e8b5-d5ca-4134-b89b-5a63c219438c"" class="""">You can add <code>@PostConstruct</code> annotation in your Spring boot main application class or from a <code>@Component</code> or a <code>@Service</code> class. </p><p id=""5382b565-4810-4dd4-92a0-535749873a0e"" class="""">@PostConstruct is mainly used to complete the initialization of your application. It is part of the Spring Boot Lifecycle.</p><pre id=""0f3ed45a-ed5c-4f3e-bce8-025e1d13cb77"" class=""code""><code>@Slf4j
@SpringBootApplication
public class MyApplication {

    public static void main(String[] args) {
        SpringApplication.run(MyApplication.class, args);
    }

		@PostConstruct
    public void int(){
		     log.info(""MyApplication::init()"");
		}   
}</code></pre><p id=""cff47690-56ef-4b98-89eb-5c87532c9084"" class="""">Please note that I am using the <code>@Slf4j</code> from the <code>Lombok</code> package for logging purposes. </p><p id=""65bb02a1-fe15-4aaf-a99a-c5b582ac723d"" class="""">The @PostConstruct is mainly used to complete the initialization of your application. It is part of the Spring Boot Lifecycle. This can be used to execute code on startup, but it is not as common as the other two options.</p><p id=""06cc32ee-6f1d-49ca-94b4-3a4baf921b40"" class="""">Here is how the logs will be printed:</p><pre id=""93c146a1-eabe-4962-9182-0497522a11eb"" class=""code""><code>INFO 81697 - [main] com.stacktips.MyApplication              : Starting MyApplication using Java 17.0.7 on N-Panigrahy.local with PID 81697
INFO 81697 - [main] com.stacktips.MyApplication              : No active profile set, falling back to 1 default profile: ""default""
INFO 81697 - [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
INFO 81697 - [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
INFO 81697 - [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.65]
INFO 81697 - [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
INFO 81697 - [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 824 ms
INFO 81697 - [main] com.stacktips.MyApplication              : MyApplication::run()
INFO 81697 - [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
INFO 81697 - [main] com.stacktips.MyApplication              : Started MyApplication in 1.457 seconds (JVM running for 1.693)</code></pre><p id=""cebada09-47ca-4041-b76b-b2f5da90fbba"" class="""">If you want to execute some long-running tasks, you should avoid this approach.</p><p id=""1b049a5b-840d-4903-a461-c1730c0711b2"" class="""">Now let's review the second option. </p><h2 id=""d702ea67-a6f7-48b0-b643-9d3a626e8820"" class="""">Option-2: Using ApplicationRunner or Command Line Runner Interface</h2><p id=""fd3855a5-c33e-4ef6-8b92-d28162646403"" class="""">Both <code>ApplicationRunner</code> and <code>CommandLineRunner</code> is the recommended method if you have to execute some code after the initialization of the application. </p><p id=""505926e6-e287-43f4-929e-fa207059ebf1"" class="""">Both the <code>CommandLineRunner</code> and  <code>ApplicationRunner</code> are functional interface that provides a&nbsp;<code>run()</code>&nbsp;method. The run method is called after the Spring application context is initialized. </p><p id=""5524d1dc-992f-464d-a09b-963749ad4e7a"" class="""">Let's see how to implement that.</p><pre id=""99448c0d-70a6-4861-9074-b27a5cb6a44d"" class=""code""><code>@Slf4j
@Component
public class AppRunner1 implements ApplicationRunner {

    @Override
    public void run(ApplicationArguments args) throws Exception {
        log.info(""AppRunner1:run() "");
    }
}</code></pre><p id=""cf47ecfd-0ec6-467f-bec9-d00730bdda8f"" class="""">You could implement the <code>ApplicationRunner</code> in your main class as well, but I would like to separate it into a dedicated class.</p><p id=""29b0e21b-8887-4357-bb11-4744f6c458b0"" class=""""><strong>ApplicationRunner:</strong>&nbsp;This is similar to the&nbsp;<code>CommandLineRunner</code>&nbsp;interface, but it provides an&nbsp;<code>ApplicationArguments</code>&nbsp;object that contains the command-line arguments that were passed to the application. This can be useful if you need to access the command-line arguments in your startup code.</p><p id=""0b993fbe-4391-4b2c-a359-ed6e8bcb5649"" class="""">You could have multiple <code>ApplicationRunner</code> implementations in your code.</p><pre id=""75005680-d276-4db5-ba3d-b73b6ea1ef22"" class=""code""><code>@Slf4j
@Component
public class AppRunner2 implements ApplicationRunner {

    @Override
    public void run(ApplicationArguments args) throws Exception {
        log.info(""AppRunner2:run()"");
    }
}</code></pre><p id=""5eea7c0e-5db3-4524-a5f0-5f0621752776"" class=""""> But where there are multiple runners, spring doesn’t know which order they should execute. if you want to preserve the order of execution for the application runners, you can do that using the &nbsp;<code>@Order(1)</code>&nbsp;annotation.</p><p id=""da13dd66-27ac-4cb9-b2c1-d7fb34c5d275"" class="""">Here is how our logs will be printed now</p><pre id=""13c0aa3c-1304-47f4-942e-e7c537eef951"" class=""code""><code>INFO 81697 - [main] com.stacktips.MyApplication              : Starting MyApplication using Java 17.0.7 on N-Panigrahy.local with PID 81697
INFO 81697 - [main] com.stacktips.MyApplication              : No active profile set, falling back to 1 default profile: ""default""
INFO 81697 - [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
INFO 81697 - [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
INFO 81697 - [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.65]
INFO 81697 - [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
INFO 81697 - [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 824 ms
INFO 81697 - [main] com.stacktips.MyApplication              : MyApplication::run()
INFO 81697 - [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
INFO 81697 - [main] com.stacktips.MyApplication              : Started MyApplication in 1.457 seconds (JVM running for 1.693)
INFO 81697 - [main] com.stacktips.AppRunner2                 : AppRunner2::run()
INFO 81697 - [main] com.stacktips.AppRunner                  : AppRunner::run()</code></pre><h2 id=""f47bb8b4-9998-4d30-b151-251fe5894bdf"" class="""">Option-3: Using Spring Boot Events</h2><p id=""ba5c4675-6b13-4524-9273-aad8d8ff42c9"" class="""">The Spring Boot application provides a number of events that are published during the application lifecycle. We can register a listener for one of these events and execute code in the listener's&nbsp;<code>onApplicationEvent()</code>&nbsp;method. </p><pre id=""2e6dd111-86e0-41a2-8ce5-03511aa5d510"" class=""code""><code>@Slf4j
@Component
public class ApplicationStartEvent {

    @EventListener(ApplicationReadyEvent.class)
    public void onReadyEvent(){
        log.info(""ApplicationStartEvent::onReadyEvent()"");
    }

}</code></pre><p id=""bbd48163-2d7c-4bf4-a353-30ae856fedf9"" class="""">Now if we run all three options together, this is what the output looks like.</p><pre id=""31ddff55-fa06-4112-8e70-3b5399882250"" class=""code""><code>INFO 81697 - [main] com.stacktips.MyApplication              : Starting MyApplication using Java 17.0.7 on N-Panigrahy.local with PID 81697
INFO 81697 - [main] com.stacktips.MyApplication              : No active profile set, falling back to 1 default profile: ""default""
INFO 81697 - [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
INFO 81697 - [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
INFO 81697 - [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.65]
INFO 81697 - [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
INFO 81697 - [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 824 ms
INFO 81697 - [main] com.stacktips.MyApplication              : MyApplication::run()
INFO 81697 - [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
INFO 81697 - [main] com.stacktips.MyApplication              : Started MyApplication in 1.457 seconds (JVM running for 1.693)
INFO 81697 - [main] com.stacktips.AppRunner2                 : AppRunner2::run()
INFO 81697 - [main] com.stacktips.AppRunner                  : AppRunner::run()
INFO 81697 - [main] com.stacktips.ApplicationStartEvent      : ApplicationStartEvent::onReadyEvent()</code></pre>",0,"standard","post"
"How to Configure Swagger2 in Spring Boot Application?","how-to-configure-swagger2-in-spring-boot-application","This tutorial explains how to configure Swagger2 and enable SwaggerUI in Spring Boot application.
","LIVE","<p>When you expose a set of REST API endpoints, documentation of those endpoints is quite essential for the API consumers. Some companies follow the documentation first approach, where the documentation tool such as RAML, or Swagger is used to generate the API specification before proceeding with development.</p>
<p>While some other companies do the documentation as the API endpoints are being developed. This is where the Swagger2 comes into the picture. While there are some downsides to this approach, there are many benefits Swagger has to offer. Every change in the API should be simultaneously described in the reference documentation. Accomplishing this manually is a tedious exercise, so automation of the process makes it easy to maintain the documentation.</p>
<p>
</p>
<h2><span id=""What_is_Swagger"">What is Swagger</span></h2>
<p>Swagger is widely used for visualizing APIs, and Swagger UI provides an online sandbox for frontend developers. A swagger is a tool, a specification, and a complete framework implementation for producing the visual representation of RESTful Web Services.</p>
<p>When Swagger is property configured and annotated in your project, a consumer can understand and interact with the remote service from the Swagger UI with a minimal amount of implementation logic. Thus Swagger removes the guesswork in calling the service.</p>
<h2><span id=""Configure_Swagger2_in_Spring_Boot"">Configure Swagger2 in Spring Boot</span></h2>
<p>For the tutorial, we will use the <code>springfox-boot-starter</code> dependency to enable the Swagger2 in your Spring boot project.</p>
<p>If you’re using maven based project, then add the following dependency into your <code>pom.xml</code> file</p>
<pre class=""prettyprint lang-xml"">&lt;dependency&gt;
   &lt;groupId&gt;io.springfox&lt;/groupId&gt;
   &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;
   &lt;version&gt;3.0.0&lt;/version&gt;
&lt;/dependency&gt;
</pre>
<p>If your using gradle build system, you need to add these into your <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-groovy"">implementation 'io.springfox:springfox-boot-starter:3.0.0'
</pre>
<h2><span id=""Enable_the_Swagger2"">Enable the Swagger2</span></h2>
<p>To enable the Swagger 2 we need to use the <code>@EnableSwagger2</code> annotation. Add the following configuration class to your spring boot project.</p>
<pre class=""prettyprint lang-java"">@Configuration
@EnableSwagger2
public class SwaggerConfig {

    @Bean
    public Docket postsApi() {
        ApiInfo apiInfo = new ApiInfoBuilder()
                .title(""Product API"")
                .description(""Product REST API documentation"")
                .version(""1.0.0"")
                .build();

        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.basePackage(""com.example.kitchensink.api""))
                .paths(PathSelectors.any())
                .build()
                .apiInfo(apiInfo)
                .enable(true);
    }
}
</pre>
<p><strong>Notes: </strong></p>
<ul>
<li>The Springfox library automatically scans all the API resources defined in the application via @Controller components and adds them to the “documentation index”.</li>
<li>A Docket bean is defined and using its select() method we get an instance of ApiSelectorBuilder. ApiSelectorBuilder we configure the endpoints exposed by Swagger.</li>
<li>After the Docket bean is defined, it’s select() method returns an instance of ApiSelectorBuilder, which provides a way to control the endpoints exposed by Swagger.</li>
<li>Using the RequestHandlerSelectors and PathSelectors we configure the predicates for the selection of RequestHandlers.</li>
</ul>
<h2><span id=""Sring_boot_Controller"">Sring boot Controller</span></h2>
<p>Here is how my controller code looks like.</p>
<pre class=""prettyprint lang-java"">@RestController
@RequestMapping(value = ""/api/products/1.0"", produces = {MediaType.APPLICATION_JSON_VALUE})
@RequiredArgsConstructor
public class ProductController {
    private final ProductService stockService;

    @GetMapping(""/products/search"")
    public ResponseEntity&lt;List&lt;Product&gt;&gt; search(
            @RequestParam(defaultValue = ""1"", required = false) int page,
            @RequestParam(defaultValue = ""50"", required = false) int size,
            @RequestParam(required = false) String category) throws IOException {

        return ResponseEntity.ok(stockService.searchProducts(page, size, category));
    }

    @GetMapping(path = ""/products"")
    public ResponseEntity&lt;List&lt;Product&gt;&gt; products() throws IOException {
        return ResponseEntity.ok(stockService.getProducts());
    }

    @GetMapping(path = ""/products/{productId}"")
    public ResponseEntity&lt;Product&gt; productById(@PathVariable String productId) throws IOException {

        return ResponseEntity.ok(stockService.findProductById(productId));
    }

    @PostMapping(path = ""/products"", consumes = {MediaType.APPLICATION_JSON_VALUE})
    public ResponseEntity&lt;Product&gt; createProduct(@Validated @RequestBody ProductDto productDto)
            throws URISyntaxException {

        final Product product = stockService.creteProduct(productDto);
        return ResponseEntity
                .created(new URI(""/api/products/1.0/products/"" + product.getId()))
                .body(product);
    }

    @DeleteMapping(path = ""/products"")
    public ResponseEntity&lt;ResponseType&gt; deleteProduct(@RequestParam long productId) {

        boolean result = stockService.deleteProduct(productId);
        return ResponseEntity.ok(result ? ResponseType.SUCCESS : ResponseType.FAILURE);
    }
}
</pre>
<p>Basically, I have not made any changes to my Controller class. Additional configuration can be done in your controllers, to generate more descriptive documentation. But we will cover that in the next post.</p>
<h2><span id=""Test_the_Swagger_UI"">Test the Swagger UI</span></h2>
<p>That is all needed for now to generate the swagger documentation for your project.</p>
<p>Now that we’ve configured Swagger, the spring boot will expose <code>/v2/api-docs</code> under the hood. Let us run the project and hit <a href=""http://localhost:8080/v2/api-docs"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://localhost:8080/v2/api-docs</a> in your browser to test.</p>
<p>To access Swagger UI for our API documentation, visit<br/>
<a href=""http://localhost:8080/swagger-ui/#"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://localhost:8080/swagger-ui/#</a>.</p>
<p><img alt="""" class=""alignnone size-large wp-image-16533"" height=""619"" loading=""lazy"" sizes=""(max-width: 1024px) 100vw, 1024px"" src=""/media/uploads/articles/7/Swagger-UI-1024x619.png"" srcset="""" width=""1024""/></p>
<h2><span id=""Download_Project_on_Github"">Download Project on Github</span></h2>
<p>Check out the complete source code for this example <a href=""https://github.com/npanigrahy/spring-boot-examples/tree/main/kitchensink-api-swagger2"" rel=""nofollow noopener noreferrer"" target=""_blank"">here on Github. </a></p>
",0,"standard","post"
"How Do I Clone a Specific Git Branch?","how-do-i-clone-a-specific-git-branch","The git clone is a command-line utility which is used to make a local copy of a remote repository. It accesses the repository through a remote URL. 
","LIVE","<p>The git clone is a command-line utility that is used to make a local copy of a remote repository. It accesses the repository through a remote URL. Usually, the original repository is located on a remote server, often from a Git service like GitHub, Bitbucket, or GitLab.</p>
<h5>To clone a repository</h5>
<pre class=""prettyprint"">git clone &lt;remote_repo&gt;</pre>
<p>The above command fetches all the branches and checking out one (default master). That may, for instance, mean that your repository has a 5kB documentation or wiki branch and 5GB data branch. And whenever you want to edit your front page, you may end up cloning 5GB of data.</p>
<h5>To clone a specific branch from repository</h5>
<p>With Git 1.7.10 and later, add –single-branch to prevent fetching of all branches. Example:</p>
<pre class=""prettyprint"">git clone -b feature-001-branch --single-branch &lt;remote_repo&gt;
</pre>
",0,"standard","post"
"Git Diff – Inspecting and Comparing Changes in Git","git-diff-inspecting-and-comparing-changes-in-git","The git diff command helps you see, compare, and understand changes in your project before you can push your code to the server
","LIVE","<p>The git <code>diff</code> command helps you see, compare, and understand changes in your project before you can push your code to the server. It can be used to look at current changes in your working copy, past changes in commits, or even to compare branches.</p>
<p>In this short article, we’ll talk about the most important use cases you need in your daily work.</p>
<h2>Look for what changed since I last committed?</h2>
<p>Running the plain git diff command without any parameters can be pretty helpful: it will show you all of your local changes since you last committed.</p>
<pre class=""prettyprint"">$ git diff
</pre>
<p>When you want to do a git diff but do not care about the full diff and just want to know which files changed</p>
<pre class=""prettyprint"">$ git diff --name-only</pre>
<p>To include some brief information about changed lines</p>
<pre class=""prettyprint"">$ git diff --stat</pre>
<h2>View changes in staging area?</h2>
<p>By adding the <code>--staged</code> option, Git will show which local changes you have already added to Staging Area, via “git add”:</p>
<p># Staged changes in a certain file…</p>
<pre class=""prettyprint"">$ git diff --staged index.html</pre>
<p># Staged changes in all local files…</p>
<pre class=""prettyprint"">$ git diff --staged</pre>
",0,"standard","post"
"How to Delete all Local Branches in Git?","how-to-delete-all-local-branches-in-git","Code snippet to delete all other local branches except master, develop or release/* in your local machine.
","LIVE","<p>When working with a larger team and with a proper Git flow process, the number of local feature branches are grows in your local machine. Not that they do any harm to your project, but they can get quite confusing at times. This little code snippet will be able to delete all other local branches except master, develop or release/*.</p>
<p>Create a file named, <code>deleteLocalGitBranches.sh</code> and add the following code snippet.</p>
<pre class=""prettyprint"">#!/bin/bash
# Move to master branch. Delete all other local branches except master, develop, release/* or project/*

# Move to master branch
git checkout master

# Collect branches
branches=()
eval ""$(git for-each-ref --shell --format='branches+=(%(refname))' refs/heads/)""

for branch in ""${branches[@]}""; do
  old=""refs/heads/""
  branchName=${branch/$old/}
  if [[ ""$branchName"" != ""master"" &amp;&amp; ""$branchName"" != ""develop"" &amp;&amp;  ""$branchName"" != ""release/""* ]]; then
    git branch -D $branchName
  fi
done
</pre>
<p>Now run the shell script</p>
<pre class=""prettyprint"">$ ./deleteLocalGitBranches.sh
</pre>
",0,"standard","post"
"Adding JSONP Support for Spring REST API","spring-rest-and-jsonp-support","In this example, we will learn how to add JSONP support to your Spring REST API. JSONP is a technique used to overcome the cross-domain restrictions imposed by browsers.","LIVE","<h2><span id=""1_What_is_the_Same_Origin_Policy"">What is the Same Origin Policy?</span></h2>
<p><span style=""font-size: 1rem;"">The same-origin policy (SOP) is a browser security feature that restricts how scripts from one origin can interact with resources from another origin.&nbsp;</span><span style=""font-size: 1rem;"">An origin is defined as a combination of the hostname, port number and&nbsp;</span><span style=""font-family: Inter, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif; font-size: 1rem;"">URI scheme.</span></p><p><span style=""font-size: 1rem;"">These security </span>restrictions<span style=""font-size: 1rem;"">&nbsp;are implemented in all modern browsers that disallow the cross-domain web Service calls using Ajax.&nbsp;&nbsp;</span><span style=""font-size: 1rem;"">If you attempt to make cross-origin resources call, the browser will return the following error:</span></p>
<pre style=""color: red;"">XMLHttpRequest cannot load URL.
Origin http://yourwebserver.com is not allowed by Access-Control-Allow-Origin.
Visit the below link for more details on browser security policy: &lt;a
href=""http://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy"" target=""_blank""
rel=""noopener noreferrer""&gt;Same-origin policy.&lt;/a&gt;
</pre>
<p>The solution to the above problem is JSONP.</p>
<h2><span id=""2_What_is_JSONP"">What is JSONP?</span></h2>
<p>JSONP (JSON with Padding) allows you to overcome these cross-domain restrictions and allows data to be retrieved from other different origins.&nbsp;</p>
<h2><span id=""3_Adding_Support_for_JSONP_in_Spring"">Working with JSONP in Spring</span></h2>
<p>Since the Spring version 4.2 release, the JSONP is inbuilt into the Spring framework. In order to enable JSONP support for spring controllers, We need to declare an <code>@ControllerAdvice</code> bean that&nbsp;<span style=""font-size: 1rem;"">extends </span><code>AbstractJsonpResponseBodyAdvice</code><span style=""font-size: 1rem;"">.</span></p>
<p>Add the following class alongside your spring config to support JSONP requests.</p>
<pre class=""prettyprint lang-java"">import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.servlet.mvc.method.annotation.AbstractJsonpResponseBodyAdvice;

@ControllerAdvice 
public class JsonpAdvice extends AbstractJsonpResponseBodyAdvice {
    public JsonpAdvice() {
        super(""callback"");
    }
}
</pre>
<p>With such <code>@ControllerAdvice</code> bean registered, it will be possible to request the JSON web service from another domain using a <code>&lt;script&gt;</code> tag.</p><p>Let us consider the following post resource for our example:</p>
<pre class=""prettyprint lang-java"">public class Post {
  private int id;
  private String title;
  private String excerpt;
  private String body;
}
</pre>
<h2><span id=""4_Spring_Controller"">Spring Controller</span></h2>
<p>We do not have to make any changes to the REST controller methods. For the sake of simplicity and limited scope of this article, we’re skipping the full implementation of <code>getPost()</code>&nbsp;method.</p>
<pre class=""prettyprint lang-java"">@RequestMapping(value = ""/api/1.0/posts/{postId}"", 
                      method = RequestMethod.GET, 
                      produces = MediaType.APPLICATION_JSON_VALUE)
public ResponseEntity getPost(@PathVariable(""postId"") long postId) {
    return new ResponseEntity(postService.getPostById(postId), HttpStatus.OK);
}
</pre>
<p>Now we can access the posts list resources via regular REST call or using JSON API call.</p>
<h2><span id=""5_Testing_Controllers"">Testing Controllers</span></h2>
<p>Accessing REST Resource:</p>
<pre>$ curl -X GET http://localhost:8080/api/1.0/posts/1</pre>
<p><strong>Response:</strong> 200 OK</p>
<pre class=""prettyprint lang-javascript"">{
    ""id"": 1,
    ""title"": ""Hello World!!"",
    ""excerpt"": ""Lorem ipsum dolor sit amet"",
    ""description"": ""Lorem ipsum dolor sit amet, ...""
}
</pre>
<p>Accessing REST Resource using JSONP:</p>
<pre>$ curl -X GET http://localhost:8080/api/1.0/posts/1?callback=postCallback</pre>
<p><strong>Response: </strong><span style=""color: #339966;"">200 OK</span></p>
<pre class=""prettyprint lang-javascript"">postCallback({
    ""id"": 1,
    ""title"": ""Hello World!!"",
    ""excerpt"": ""Lorem ipsum dolor sit amet"",
    ""description"": ""Lorem ipsum dolor sit amet, ...""
})
</pre>
<p>Notice the difference in the results for both cases. When the resource is accessed using JSONP, the response is returned as JSONP payload as a JavaScript method.</p>
<p>If you want to access it from another domain, we can use it as</p>
<pre class=""prettyprint lang-html"">&lt;script src=""http://localhost:8080/api/1.0/posts/1?callback=postCallback"" 
          type=""application/javascript""/&gt;
</pre>",0,"standard","post"
"How to Clear the Local DNS Cache in Mac OS?","how-to-clear-the-local-dns-cache-in-mac-os","You can flush your local DNS cache in Mac OS (up to El Capitan) from your Terminal by&hellip;
","LIVE","<p>You can flush your local DNS cache in Mac OS (up to El Capitan) from your Terminal by usinng followign steps</p>
<p>Go to Applications -&gt; Utilities -&gt; Terminal</p>
<p>Type the following command and press Enter:</p>
<pre><code class=""line-numbers"">dscacheutil -flushcache
</code></pre>
<p>After that type the second command and press Enter:</p>
<pre><code class=""line-numbers"">sudo killall -HUP mDNSResponder
</code></pre>
",0,"standard","post"
"How to Enable GZIP Compression in Spring Boot?","enable-gzip-compression-for-spring-boot-response","HTTP compression is a capability that can be built into web servers and web clients to improve transfer. This post explains how to enable gzip compression in spring boot.","LIVE","<div class=""page-body"">
<p class="""" id=""be67be70-0bd9-4964-9956-8c3da312e6d9"">HTTP compression is a capability that can be built
					into web servers and web clients to improve transfer speed and save bandwidth utilisation. The
					commonly used compression is <strong>GZIP</strong>.</p>
<p class="""" id=""5b4648a4-19a2-4542-b2dd-a1d49b887f13"">By default, the <code>gzip</code> compression is
					disabled in the Spring Boot application. However, we can enable compression using a few property
					changes.</p>
<h2 class="""" id=""3ac993ca-de13-4e64-98f2-3615bc441dab""><span>Enable GZIP Compression</span></h2>
<p class="""" id=""0714afb5-ef55-438e-9830-42d2338b86a9"">Add the following configuration to your Spring
					Boot <a href=""http://application.properties""><code>application.properties</code></a> file to enable
					gzip response compression.</p>
<script crossorigin=""anonymous"" integrity=""sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg=="" referrerpolicy=""no-referrer"" src=""https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js""></script>
<link crossorigin=""anonymous"" href=""https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css"" integrity=""sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ=="" referrerpolicy=""no-referrer"" rel=""stylesheet""/>
<pre class=""code language-java"" id=""ddfc32b0-a7d0-40ed-aac3-5a221ec4abb1"" tabindex=""0""><code class=""language-java""># Enable response compression
server.compression.enabled=true

# Mime types that should be compressed
server.compression.mime-types=text/xml, text/css, text/javascript, application/json</code></pre>
<p class="""" id=""fd281fe6-0659-457e-900b-8a9df5be5e73"">This configuration will enable the gzip
					compression for all responses for the given mime types defined in the property file.</p>
<figure class=""block-color-gray_background callout"" id=""16292622-7ef5-4cf2-94eb-323f4c9c6876"">
<div><span class=""icon"">💡</span></div>
<div>Please note, that the wildcard in mime types is not supported. So we need to
						provide the list of mime types explicitly.</div>
</figure>
<p class="""" id=""1710040a-9661-470c-bf29-00dfe74872a8"">The <code>gzip</code> operation consumes time and
					other server resources. You may enable the compression only when the response size exceeds a
					specific limit. This can be configured using the following property. </p>
<script crossorigin=""anonymous"" integrity=""sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg=="" referrerpolicy=""no-referrer"" src=""https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js""></script>
<link crossorigin=""anonymous"" href=""https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css"" integrity=""sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ=="" referrerpolicy=""no-referrer"" rel=""stylesheet""/>
<pre class=""code language-java"" id=""e50e432d-f733-404d-8dbe-a5a26a75637e"" tabindex=""0""><code class=""language-java""># Minimum response where compression will kick in
server.compression.min-response-size=4096</code></pre>
<h2 class="""" id=""c75ffffa-aa42-4b9d-b83a-c0a1b2efd6cf""><span>Exclude user agents from the
						compression</span></h2>
<p class="""" id=""f2bb55ac-1a52-4f3c-9232-798db7f3ded5"">You can also exclude the specific user agents
					using <code>excluded-user-agents</code> configuration.</p>
<script crossorigin=""anonymous"" integrity=""sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg=="" referrerpolicy=""no-referrer"" src=""https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js""></script>
<link crossorigin=""anonymous"" href=""https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css"" integrity=""sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ=="" referrerpolicy=""no-referrer"" rel=""stylesheet""/>
<pre class=""code language-java"" id=""4e50e88e-e606-4fb8-9da9-dfa2555356d2"" tabindex=""0""><code class=""language-java"">server.compression.excluded-user-agents= Mozilla/5.0</code></pre>
<p class="""" id=""84d4580a-d63c-47f5-80e9-cec92c6d6d0b"">If you are using a YAML-based configuration, all
					the above properties can be written as follows:</p>
<script crossorigin=""anonymous"" integrity=""sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg=="" referrerpolicy=""no-referrer"" src=""https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js""></script>
<link crossorigin=""anonymous"" href=""https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css"" integrity=""sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ=="" referrerpolicy=""no-referrer"" rel=""stylesheet""/>
<pre class=""code language-yaml"" id=""6b4ef38f-bda5-47d4-bb42-c9943e11174d"" tabindex=""0""><code class=""language-yaml"">server:
  compression:
    enabled: true
    mime-types: text/xml, text/css, text/javascript, application/json
    min-response-size: 1024
    excluded-user-agents: Mozilla/5.0</code></pre>
</div>",0,"standard","post"
"Git Commands Cheat Sheet","git-commands-cheat-sheet","A list of some commonly used Git commands to get you going with Git. 1. Configuring Git To&hellip;
","LIVE","<p>A list of some commonly used Git commands to get you going with Git.</p>
<p>
</p>
<h2><span id=""1_Configuring_Git"">1. Configuring Git</span></h2>
<p>To tell Git who you are, run the following two commands:</p>
<pre class=""prettyprint lang-bsh"">$ git config --global user.name ""King Kong""
$ git config --global user.email ""king-kong@gmail.com""
</pre>
<p>Pretty colours for the git outputs in terminal:</p>
<pre class=""prettyprint lang-bsh"">$ git config --global color.ui true
</pre>
<p>Get the list of configurations:</p>
<pre class=""prettyprint lang-bsh"">$ git config --list
</pre>
<h2><span id=""2_Checkout_Remote_Project"">2. Checkout Remote Project</span></h2>
<p>Create a local copy of a remote repository<br/>
git clone ssh://git@github.com/[username]/[repository-name].git</p>
<h2><span id=""3_Adding_Local_Project_to_Git"">3. Adding Local Project to Git</span></h2>
<p>Initialize the local directory as a Git repository.</p>
<pre class=""prettyprint lang-bsh"">$ git init
</pre>
<p>Add the files to your new local repository. This stages them for the first commit.</p>
<pre class=""prettyprint lang-bsh"">$ git add .
</pre>
<p>Or, alternatively, you can add one by one file</p>
<pre class=""prettyprint lang-bsh"">$ git add file1.txt file2.txt
</pre>
<p>To unstage a file:</p>
<pre class=""prettyprint lang-bsh"">$ git reset HEAD file1.txt 
</pre>
<p>Commit the files that you’ve staged in your local repository</p>
<pre class=""prettyprint lang-bsh"">$ git commit -m ""Initial commit""
</pre>
<p>In Terminal, add the URL for the remote repository where your local repository will be pushed. Sets the new remote</p>
<pre class=""prettyprint lang-bsh"">$ git remote add origin [REMOTE REPO URL]
</pre>
<p>Verifies the new remote URL</p>
<pre class=""prettyprint lang-bsh"">$ git remote -v
</pre>
<p>Push the changes in your local repository to GitHub.</p>
<pre class=""prettyprint lang-bsh"">$ git push -u origin master
</pre>
<h2><span id=""4_Git_Difference"">4. Git Difference</span></h2>
<p>To view file diff in git before commit:</p>
<pre class=""prettyprint lang-bsh"">$ git diff 
</pre>
<p>When you want to do a git diff but do not care about the full diff and just want to know which files changed</p>
<pre class=""prettyprint lang-bsh"">$ git diff --name-only
</pre>
<p>To include some brief information about changed lines</p>
<pre class=""prettyprint lang-bsh"">$ git diff --stat
</pre>
<p>The output of –stat is nicely coloured. If you want a more machine-readable output</p>
<pre class=""prettyprint lang-bsh"">$ git diff --numstat
</pre>
<h2><span id=""5_Read_Previous_Git_Commit"">5. Read Previous Git Commit</span></h2>
<p>Show full log of the last commit:</p>
<pre class=""prettyprint lang-bsh"">$ git show
</pre>
<p>Show log of last commit (summary only):</p>
<pre class=""prettyprint lang-bsh"">git log -1
</pre>
<p>If you need just the commit message and nothing else.<br/>
More elegantly – if you want a quick overview of your commits</p>
<pre class=""prettyprint lang-bsh"">$ git log -1 --pretty=%B
</pre>
<p>Show log of last N commit:</p>
<pre class=""prettyprint lang-bsh"">$ git log --oneline -5
</pre>
<h2><span id=""6_Working_with_Git_Branches"">6. Working with Git Branches</span></h2>
<p>View list local branches</p>
<pre class=""prettyprint lang-bsh"">$ git branch
</pre>
<p>View list of all</p>
<pre class=""prettyprint lang-bsh"">$ git branch -a
</pre>
<p>View list of remote branches</p>
<pre class=""prettyprint lang-bsh"">$ git branch -r
</pre>
<h2><span id=""7_Sharing_Updating_Projects"">7. Sharing &amp; Updating Projects</span></h2>
<p>Push a branch to your remote repository</p>
<pre class=""prettyprint lang-bsh"">$ git push origin &lt;branch_name&gt;
</pre>
<p>Push changes to the remote repository (and remember the branch)</p>
<pre class=""prettyprint lang-bsh"">$ git push -u origin &lt;branch_name&gt;
</pre>
<p>Push changes to the remote repository (remembered branch)</p>
<pre class=""prettyprint lang-bsh"">$ git push  
</pre>
<p>Delete a remote branch</p>
<pre class=""prettyprint lang-bsh"">$ git push origin --delete &lt;branch_name&gt;
</pre>
<p>Update local repository to the newest commit</p>
<pre class=""prettyprint lang-bsh"">$ git pull
</pre>
<p>Pull changes from the remote repository</p>
<pre class=""prettyprint lang-bsh"">$ git pull origin &lt;branch_name&gt;
</pre>
<h2><span id=""8_Create_and_Manage_Branches"">8. Create and Manage Branches</span></h2>
<p>If you’re a developer you probably have used it and are familiar with git workflow. Whenever you want to commit a bug or a new feature, you need to create a branch for it, which will be a copy of your master branch. Once your fixes are ready to merge, you typically create a pull request on your new branch. The reason for this is to keep your master branch clean all the time.</p>
<p>Here is the list of some useful commands to help you create and manage a new branch. Please note, before creating a new branch, pull the changes from upstream. Your master needs to be up to date.<br/>
Create a git branch.</p>
<pre class=""prettyprint lang-bsh"">$ git branch &lt;new branch name&gt;
</pre>
<p>Switch to a branch</p>
<pre class=""prettyprint lang-bsh"">$ git checkout &lt;branch name&gt;
</pre>
<p>Create the branch on your local machine and switch in this branch:</p>
<pre class=""prettyprint lang-bsh"">$ git checkout -b &lt;new branch name&gt;
</pre>
<p>Change the working branch:</p>
<pre class=""prettyprint lang-bsh"">$ git checkout &lt;new branch name&gt;
</pre>
<p>Push the branch to remote git:</p>
<pre class=""prettyprint lang-bsh"">$ git push origin &lt;new branch name&gt;
</pre>
<p>When you want to commit something in your branch, be sure to be in your branch. Add -u parameter to set upstream.</p>
<p>You can see all the branches created by using :</p>
<pre class=""prettyprint lang-bsh"">$ git branch
</pre>
<p>Add a new remote for your branch:</p>
<pre class=""prettyprint lang-bsh"">$ git remote add &lt;remote branch name&gt; 
</pre>
<p>Push changes from your commit into your branch :</p>
<pre class=""prettyprint lang-bsh"">$ git push &lt;new branch remote name&gt;  &lt;new branch name&gt;
</pre>
<p>Update your branch when the original branch from the official repository has been updated:</p>
<pre class=""prettyprint lang-bsh"">$ git fetch &lt;remote branch name&gt;
</pre>
<p>Then you need to apply to merge changes if your branch is derivated from develop you need to do:</p>
<pre class=""prettyprint lang-bsh"">$ git merge &lt;name of remote branch&gt;/develop
</pre>
<h2><span id=""9_Delete_Branch"">9. Delete Branch</span></h2>
<p>Delete local branch: -d option stands for –delete</p>
<pre class=""prettyprint lang-bsh"">git branch -d &lt;branch_name&gt;
</pre>
<p>Git local branch force: -D option stands for –delete –force</p>
<pre class=""prettyprint lang-bsh"">git branch -D &lt;branch_name&gt;
</pre>
<p>Delete a remote GIT branch</p>
<pre class=""prettyprint lang-bsh"">git push origin --delete &lt;branch_name&gt;
</pre>
<h2><span id=""10_Git_Stashing"">10. Git Stashing</span></h2>
<p>If you run git status, you can see your dirty state:</p>
<pre class=""prettyprint lang-bsh"">$ git status
</pre>
<p>Now you want to switch branches, but you don’t want to commit what you’ve been working on yet; so you’ll stash the changes. To push a new stash onto your stack, run git stash or git stash save:</p>
<pre class=""prettyprint lang-bsh"">$ git stash

$ git stash save ""Stash message""
</pre>
<p>At this point, you can switch branches and do work elsewhere; your changes are stored on your stack. To see which stashes you’ve stored, you can use git stash list:</p>
<pre class=""prettyprint lang-bsh"">$ git stash list

Outputs:
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert ""added file_size""
stash@{2}: WIP on master: 21d80a5 added number to log
</pre>
<p>In this case, two stashes were done previously, so you have access to three different stashed works. You can reapply the one you just stashed by using the command shown in the help output of the original stash command: git stash apply.</p>
<p>If you want to apply one of the older stashes, you can specify it by naming it, like this: git stash apply stash@{2}. If you don’t specify a stash, Git assumes the most recent stash and tries to apply it:</p>
<pre class=""prettyprint lang-bsh"">$ git stash apply

$ git stash apply stash@{1}
</pre>
<p>Delete a particular stash.</p>
<pre class=""prettyprint lang-bsh"">$ git stash drop

$ git stash drop stash@{0}
</pre>
",0,"standard","post"
"Integrate Apache Tiles3 to Spring Boot Web MVC Application","integrate-tiles3-to-spring-boot","Spring Boot Web MVC configured to produce an executable WAR and ready for fully fledged web application development. In this tutorial, we will see how to use Apache Tiles3 framework in your Spring Boot Web MVC application.
","LIVE","<p>Spring Boot Web MVC configured to produce an executable WAR and ready for fully fledged web application development. In this tutorial, we will see how to use Apache Tiles3 framework in your Spring Boot Web MVC application.</p>
<p>
</p>
<p>Let us start by creating an application based on spring-boot-starter-web. You may use spring initializer to create a basic project template.</p>
<h2><span id=""1_Spring_Boot_Dependencies"">1. Spring Boot Dependencies</span></h2>
<p>Add dependencies to the POM to pull in Tomcat, Jasper and Apache Tiles</p>
<pre class=""prettyprint lang-xml"">&lt;dependency&gt;
    &lt;groupid&gt;org.springframework.boot&lt;/groupid&gt;
    &lt;artifactid&gt;spring-boot-starter-tomcat&lt;/artifactid&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupid&gt;org.apache.tomcat.embed&lt;/groupid&gt;
    &lt;artifactid&gt;tomcat-embed-jasper&lt;/artifactid&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupid&gt;org.apache.tiles&lt;/groupid&gt;
    &lt;artifactid&gt;tiles-jsp&lt;/artifactid&gt;
    &lt;version&gt;3.0.4&lt;/version&gt;
&lt;/dependency&gt;
</pre>
<p>If you’re using Gradle build system, you can add the following dependency to your <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-java"">compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version: '9.0.12'
providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
compile group: 'org.apache.tiles', name: 'tiles-jsp', version: '3.0.8'
</pre>
<p>Change the packaging to WAR in the POM</p>
<pre class=""prettyprint lang-java"">&lt;packaging&gt;war&lt;/packaging&gt; 
</pre>
<p>Or for gradle</p>
<pre class=""prettyprint lang-java"">    
apply plugin: 'war'
</pre>
<h2><span id=""2_Project_Directory_Structure"">2. Project Directory Structure</span></h2>
<p>Create Web application structure the Maven way (tree showing all files):</p>
<pre class=""prettyprint lang-java"">ExampleApp:
    │   pom.xml
    ├───src
    │   ├───main
    │   │   ├───java
    │   │   │   └───com
    │   │   │       └───example
    │   │   │           └───app
    │   │   │               │   ExampleApplication.java
    │   │   │               │   TilesConfig.java
    │   │   │               └───controller
    │   │   │                       HelloWorldController.java
    │   │   ├───resources
    │   │   │       application.properties
    │   │   └───webapp
    │   │       ├───static       
    │   │       └───WEB-INF
    │   │           └───tiles
    │   │               │   tiles.xml
    │   │               ├───layouts
    │   │               │       basic.jsp
    │   │               └───views
    │   │                   │   footer.jsp
    │   │                   │   header.jsp
    │   │                   └───home
    │   │                          greeting.jsp
    │   │                          home.jsp
    │   └───test
    │       
    └───target
</pre>
<h2><span id=""3_Tiles_Configuration_for_Spring_Boot"">3. Tiles Configuration for Spring Boot</span></h2>
<p>Configure tiles by adding a new configuration class – it will be pulled in by classpath scanning:</p>
<pre class=""prettyprint lang-java"">package com.example.app;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.view.tiles3.TilesConfigurer;
import org.springframework.web.servlet.view.tiles3.TilesView;
import org.springframework.web.servlet.view.tiles3.TilesViewResolver;

@Configuration
public class TilesConfig {

    @Bean
    public TilesConfigurer tilesConfigurer() {
        final TilesConfigurer configurer = new TilesConfigurer();
        configurer.setDefinitions(new String[]{""WEB-INF/tiles/tiles.xml""});
        configurer.setCheckRefresh(true);
        return configurer;
    }

    @Bean
    public TilesViewResolver tilesViewResolver() {
        final TilesViewResolver resolver = new TilesViewResolver();
        resolver.setViewClass(TilesView.class);
        return resolver;
    }
}
</pre>
<h2><span id=""4_Tiles_Layout_and_Views_Declaration"">4. Tiles Layout and Views Declaration</span></h2>
<p>Create the tiles configuration file: <code>WEB-INF/tiles/tiles.xml</code></p>
<pre class=""prettyprint lang-java"">&lt;!--?xml version=""1.0"" encoding=""ISO-8859-1"" ?--&gt;

&lt;tiles-definitions&gt;

    &lt;!-- Templates --&gt;      
    &lt;definition name=""layout.basic"" template=""/WEB-INF/tiles/layouts/basic.jsp""&gt;
        &lt;put-attribute name=""title"" value=""Spring Web MVC with Tiles 3""&gt;
        &lt;put-attribute name=""header"" value=""/WEB-INF/tiles/views/header.jsp""&gt;
        &lt;put-attribute name=""body"" value=""""&gt;
        &lt;put-attribute name=""footer"" value=""/WEB-INF/tiles/views/footer.jsp""&gt;
    &lt;/put-attribute&gt;&lt;/put-attribute&gt;&lt;/put-attribute&gt;&lt;/put-attribute&gt;&lt;/definition&gt;
    
    &lt;!-- Pages --&gt;        
    &lt;definition name=""site.home"" extends=""layout.basic""&gt;
        &lt;put-attribute name=""body"" value=""/WEB-INF/tiles/views/home/home.jsp""&gt;
    &lt;/put-attribute&gt;&lt;/definition&gt;
    
    &lt;definition name=""site.greeting"" extends=""layout.basic""&gt;
        &lt;put-attribute name=""body"" value=""/WEB-INF/tiles/views/home/greeting.jsp""&gt;
    &lt;/put-attribute&gt;&lt;/definition&gt;
&lt;/tiles-definitions&gt;
</pre>
<p>Create the tiles themselves</p>
<p><strong>basic.jsp:</strong></p>
<pre class=""prettyprint lang-xml"">&lt;@ taglib uri=""http://tiles.apache.org/tags-tiles"" prefix=""tiles""&gt;
        &lt;title&gt;&lt;tiles:getAsString name=""title""/&gt;&lt;/title&gt;
        &lt;tiles:insertattribute name=""header""&gt;&lt;/tiles:insertattribute&gt;
        &lt;tiles:insertattribute name=""body""&gt;&lt;/tiles:insertattribute&gt;
        &lt;tiles:insertattribute name=""footer""&gt;
&lt;/tiles:insertattribute&gt;
</pre>
<p><strong>header.jsp:</strong></p>
<pre class=""prettyprint lang-xml"">&lt;div class=""header""&gt;Page Header&lt;/div&gt;
</pre>
<p>footer.jsp:</p>
<pre class=""prettyprint lang-xml"">&lt;div class=""footer""&gt;Page Footer&lt;/div&gt;
</pre>
<p><strong>home.jsp:</strong></p>
<pre class=""prettyprint lang-xml"">&lt;div class=""main-contnet""&gt;
     Main page content goes here...
&lt;/div&gt;
</pre>
<p><strong>greeting.jsp:</strong></p>
<pre class=""prettyprint lang-java"">&lt;div&gt;
  Hello ${name}
&lt;/div&gt;
</pre>
<h2><span id=""5_Spring_Boot_Controller"">5. Spring Boot Controller</span></h2>
<p>Add a controller class into a controller directory:</p>
<pre class=""prettyprint lang-java"">package com.example.app.controller;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class HelloWorldController {    

    @RequestMapping(value = ""/home"", method=RequestMethod.GET)
    public String home() {
        return ""site.home"";
    }
    
    @RequestMapping(value = ""/greet/{name}"", method=RequestMethod.GET)
    public ModelAndView greetTwoWays(@PathVariable(value=""name"") final String name, final Model model) {        
        return new ModelAndView(""site.greeting"", ""name"", name);
    }
}
</pre>
<p>Build the project using Maven:</p>
<pre class=""prettyprint lang-java"">mvn clean package
</pre>
<p>When using Gradle:</p>
<pre class=""prettyprint lang-java"">gradle build
</pre>
<p>Now let us test the controller and confirm that Spring MVC has been configured as expected</p>
<pre class=""prettyprint lang-java"">http://localhost:8080/home    
http://localhost:8080/greet/John
</pre>
",0,"standard","post"
"Using H2 In-Memory Database in Spring Boot","using-h2-in-memory-database-in-spring-boot","In the course of this tutorial, we will see how to use the H2 in-memory database to perform the CRUD (create, read, update and delete) operation in Spring Boot.
","LIVE","<p>H2 is an Open Source embedded Java SQL database. It is a fast, in-memory database with a very small footprint of a single jar file (around 1.5-megabyte)  size. Therefore you can easily embed the H2 database into your application for rapid development.</p>
<p>H2 Database also provides a built-in web console to interact with the database. You can use H2 database as an in-memory database, embedded database or network database.</p>
<p>Please note, H2 database is not a full-fledged SQL implementation, it supports only a subset of the SQL standard.</p>
<p>You can find more details about the H2 Database from the <a href=""http://www.h2database.com/html/main.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">official website</a>.</p>
<h2>Why do you care?</h2>
<p>Why do I need an in-memory database? Can I not just connect to MySQL or other real databases?</p>
<p>Well yes, you definitely can. But development java application connecting to a real database involves a lot of overhead. Also, during development, your schema is bound to change as the software evolves.</p>
<p>Also when working on distributed teams, you don’t want your code to fail when someone else in team updates the DB schema. Multiple developers should be able to run the DB tests in parallel.</p>
<p>For such cases, an in-memory database is an ideal solution. An in-memory database is created when an application starts up and destroyed when the application is stopped.</p>
<h2><b>Installing H2 database</b></h2>
<p>If you’re using Maven build tools for your Spring boot application, then you need to add the following package dependency in your <code>pom.xml</code> file.</p>
<pre class=""prettyprint lang-xml"">&lt;dependency&gt;
        &lt;groupid&gt;com.h2database&lt;/groupid&gt;
        &lt;artifactid&gt;h2&lt;/artifactid&gt;
        &lt;version&gt;1.4.197&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</pre>
<p>And, if you are on Gradle, you can include the following package dependency in your build.gradle file.</p>
<pre class=""prettyprint lang-java"">dependencies {
    // Your dependencies
    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('com.h2database:h2')
    //...
}
</pre>
<h2>Accessing H2 Web Console</h2>
<p>As we discussed earlier, H2 database provides a Web console to interact with the database. To enable the console, you need to add the following property to your <code>application.properties</code> file.</p>
<p><b>/src/main/resources/application.properties</b></p>
<pre class=""prettyprint lang-properties""># Enabling H2 Console
spring.h2.console.enabled=true
</pre>
<p>Once you have done the above configurations, you need to restart your Spring boot application. You can launch the H2 database Web console at:</p>
<pre>http://localhost:8080/h2-console.</pre>
<p>Make sure that you use <code>jdbc:h2:mem:testdb</code> as JDBC URL.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-medium wp-image-13562"" height=""383"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/17/Using-H2-In-Memory-Database-in-Spring-Boot-620x383.png"" srcset="""" width=""620""/></a></p>
",0,"standard","post"
"How to Encode and Decode URL in PHP","encode-and-decode-url-in-php","This post explains how to encode and decode URLs using PHP. PHP supports the encoding and decoding of URLs by providing some built-in functions. 
","LIVE","<p>This post explains how to<b> encode and decode </b>URL using PHP. PHP supports encoding and decoding of URL by providing some built-in functions. Encoding is required before sending URL data to query string or to a function which might dynamically work on this URL data. And then, this data will be decoded into its original form, after receiving it in target PHP page or function.</p>
<h2><b>PHP Encode and Decode URL Example</b>:</h2>
<p>First, let us create an HTML file and save it as <code>sample.html</code></p>
<p><b>sample.html </b></p>
<pre class=""prettyprint lang-html""><html>
   <body>
      <div id=""wrapper"">
         <div id=""url_div"">
            <form action=""encode_decode.php"" method=""post"">
               <input name=""url"" placeholder=""Enter URL To Encode"" type=""text""/>
               <input name=""encode_url"" type=""submit"" value=""ENCODE""/>
            </form>
            <form action=""encode_decode.php"" method=""post"">
               <input name=""url"" placeholder=""Enter URL To Decode"" type=""text""/>
               <input name=""decode_url"" type=""submit"" value=""DECODE""/>
            </form>
         </div>
      </div>
   </body>
</html>
</pre>
<p>Let us now, create a PHP file to encode and decode URL.</p>
<p><b>encode_decode.php</b></p>
<pre class=""prettyprint lang-php""><?php
   if(isset($_POST['encode_url']))
   {
    $url = $_POST['url'];
    $encodedUrl = urlencode($url);
    $converted_url=$encodedUrl;
   }   
   
   if(isset($_POST['decode_url']))
   {
    $url = $_POST['url'];
    $decodedUrl = urldecode($url);
    $converted_url=$decodedUrl;
   }
?>
</pre>
<p>Lets see the simple example to encode and decode URL in PHP:</p>
<pre class=""prettyprint lang-php"">$url = ""https://www.example.com/p/selenium.html"";
//encoding URL
$encodedUrl = urlencode($url);
echo $encodedUrl;
//Prints: https%3A%2F%2Fwww.example.com%2Fp%2Fselenium.html

//decoding URL
echo urldecode($encodedUrl);
//Prints: https://www.example.com/p/selenium.html
</pre>
<p>This all about encoding and decoding URL in PHP. Thank you for reading this article, and if you have any problem, have another better useful solution for this article, please write a message in the comment section.</p>
<p>This story was first published at SKPTRICKS. See the original article <a href=""http://feedproxy.google.com/~r/Skptricks/~3/5Ig6l32ZJd8/how-to-encode-and-decode-url-using-php.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">How to Encode and Decode URL Using PHP</a>. Opinions expressed by Stacktips contributors are their own.</p>
",0,"standard","post"
"Default Methods for Interfaces in Java8","default-methods-for-interfaces-in-java8","This example-driven tutorial outlines the usage of default methods for an interface in Java8. The Java Tutorials have been written for JDK 8.
","LIVE","<p>Before Java 8, Java interfaces could only have static constants and abstract methods. The implementation of those abstract methods has to be provided by the class that implements an interface. This means that when you modify an interface, it breaks all the implementation classes.</p>
<p>Therefore, to overcome this issue, Java 8 has introduced the concept of default methods (Also known as Extension Methods) which allow the interfaces to have methods with implementation without affecting the classes that implement the interface.</p>
<p>You can do this by using the <code>default</code> keyword.</p>
<h2>Default Method Java8 Example</h2>
<pre class=""prettyprint lang-java"">interface Vehicle {
    String speedUp(); 
    String slowDown();

    default String alarmOn() {
        return ""Turning the alarm on."";
    }
     
    default String alarmOff() {
        return ""Turning the alarm off."";
    }
}

class Car implements Vehicle {

    private String brand;
        
    public Car(String brand){
        this.brand = brand;
    }

    @Override
    public String speedUp(){
        return ""Speed up!"";
    }

    @Override
    public String slowDown(){
        return ""Slow down!"";
    }

    public String getBrand(){
        return brand;
    }   
}
</pre>
<p>As you can notice above, we do not have to provide the implementation for the <code>alarmOn</code> and <code>alarmOff</code> methods in our <code>Car</code> implementation.</p>
<p>Lastly, let’s define a typical main class and creates an instance of Car to see how the default methods are called:</p>
<pre class=""prettyprint lang-java"">public class VehicleExmaple {

    public static void main(String[] args) {
    Car car = new Car(""Land Rover"");
    System.out.println(car.getBrand());
        System.out.println(car.speedUp());
        System.out.println(car.slowDown());

        //Calling default methods
        System.out.println(car.alarmOn());
        System.out.println(car.alarmOff());
        
    }
}
</pre>
<h2><b>Default Methods Inheritance &amp; Diamond Problem</b></h2>
<p>If your class implements multiple interfaces that define the same default methods, then the code simply won’t compile, as there’s ambiguity caused by multiple interface inheritance (a.k.a the <a href=""https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem"" rel=""nofollow noopener noreferrer"" target=""_blank"">Diamond Problem</a>)</p>
<p>This can be solved by explicitly overriding the default methods in your implementation class.</p>
<pre class=""prettyprint lang-java"">class Car implements Vehicle1, Vehicle2 {

    // Your code goes here..
    @Override
    public String alarmOn() {
        // Your code goes here..      
        //...
        return Vehicle2.super.alarmOn();
    }
     
    @Override
    public String alarmOff() {  
        // Your code goes here..      
        //...
        return Vehicle2.super.alarmOff();

    }
}
</pre>
",0,"standard","post"
"Create and Manage Git Branches from Command Line","create-and-manage-git-branches","List of useful git commands to help you create and manage git branches from your terminal. Be Smart!! Never go away from your terminal.
","LIVE","<p>Whenever you want to commit a bug or a new feature, you need to create a branch for it, which will be a copy of your master branch. Once your fixes are ready to merge, you typically create a pull request on your new branch. The reason for this is to keep your master branch clean all the time.</p>
<p>
</p>
<h2 id=""create-new-branch""><span id=""1_Create_a_New_Git_Branch"">1. Create a New Git Branch</span></h2>
<p>Here is a list of some useful commands to help you create and manage a new branch. Please note, that before creating a new branch, pull the changes from upstream. Your master needs to be up to date.</p>
<p>Create the branch on your local machine and switch to this branch:</p>
<pre class=""prettyprint lang-c"">$ git checkout -b &lt;new branch name&gt;</pre>
<p>Change working branch:</p>
<pre class=""prettyprint lang-c"">$ git checkout &lt;new branch name&gt;</pre>
<p>Push the branch to remote git:</p>
<pre class=""prettyprint lang-c"">$ git push origin &lt;new branch name&gt;</pre>
<p>When you want to commit something in your branch, be sure to be in your branch. Add -u parameter to set-upstream.</p>
<h2 id=""view-git-branches""><span id=""2_View_Git_Branches"">2. View Git Branches</span></h2>
<p>You can see all the local branches by using:</p>
<pre class=""prettyprint lang-c"">$ git branch</pre>
<p>View list of all branches, including remote branches:</p>
<pre class=""prettyprint lang-c"">$ git branch -a</pre>
<p>View list of only remote branches:</p>
<pre class=""prettyprint lang-c"">$ git branch -r</pre>
<h2 id=""push-remote-branches""><span id=""3_Push_Branch_to_Remote"">3. Push Branch to Remote</span></h2>
<p>Add a new remote for your branch:</p>
<pre class=""prettyprint lang-c"">$ git remote add &lt;remote branch name&gt;</pre>
<p>Push changes from your commit into your branch:</p>
<pre class=""prettyprint lang-c"">$ git push &lt;new branch remote name&gt;  &lt;new branch name&gt;</pre>
<p>Update your branch when the original branch from the official repository has been updated:</p>
<pre class=""prettyprint lang-c"">$ git fetch &lt;remote branch name&gt;</pre>
<p>Then you need to apply to merge changes if your branch is derivated from the develop you need to do:</p>
<pre class=""prettyprint lang-c"">$ git merge &lt;name of remote branch&gt;/develop</pre>
<h2 id=""delete-git-branch""><span id=""4_Delete_Git_Branch"">4. Delete Git Branch</span></h2>
<p>Delete local branch: -d option stands for –delete</p>
<pre class=""prettyprint lang-c"">$ git branch -d &lt;branch_name&gt;</pre>
<p>Git local branch force: -D option stands for –delete –force</p>
<pre class=""prettyprint lang-c"">$ git branch -D &lt;branch_name&gt;</pre>
<p>Delete a remote Git branch</p>
<pre class=""prettyprint lang-c"">$ git push origin --delete &lt;branch_name&gt;</pre>
",0,"standard","post"
"Java Method Chaining with Example","method-chaining-in-java","The term method chaining refers to both a design and a convention. Each method returns an object, allowing&hellip;
","LIVE","<p>The term method chaining refers to both a design and a convention. Each method returns an object, allowing the calls to be chained together in a single statement. Chaining is syntactic sugar which eliminates the need for intermediate variables.</p>
<p>A method chain is also known as a train wreck due to the increase in the number of methods that come one after another in the same line that occurs as more methods are chained together even though line breaks are often added between methods.</p>
<p>It applies to classes and methods where:</p>
<ul>
<li>Multiple methods are potentially going to be called on the same object;</li>
<li>The methods in question need no return value.</li>
</ul>
<p>The idea of method chaining is that if the methods need no “useful” return value, then the method can return this</p>
<h3>Method Chaining:</h3>
<pre class=""prettyprint lang-java"">class User {

    private String name;
    private int age;

    // In addition to having the side-effect of setting the attributes in question,
    // the setters return ""this"" (the current Person object) to allow for further chained method calls.
    public User setName(String name) {
        this.name = name;
        return this;
    }
     
    public User setAge(int age) {
        this.age = age;
        return this;
    }
    
    public void getUserDetails() {
        System.out.println(""User name is "" + name + "" and "" + age + "" years old."");
    }
    
    public static void main(String[] args) {
         User user= new User(); 
         user.setName(""skptricks"").setAge(22).getUserDetails();
    }
}
</pre>
<p><b>Output :</b> Username is skptricks and 22 years old.</p>
<h3>Without Method Chaining:</h3>
<pre class=""prettyprint lang-java"">class User {
    
    private String name;
    private int age;

    // In addition to having the side-effect of setting the attributes in question,
    // the setters return ""this"" (the current Person object) to allow for further chained method calls.
    public User setName(String name) {
        this.name = name;
        return this;
    }
     
    public User setAge(int age) {
        this.age = age;
        return this;
    }
    
    public void getUserDetails() {
        System.out.println(""User name is "" + name + "" and "" + age + "" years old."");
    }
    
    public static void main(String[] args) {
         User user= new User(); 
         user.setName(""skptricks"").setAge(22).getUserDetails();
    }
}
</pre>
<p><b>Output :</b> Username is skptricks and 22 years old.</p>
<p>Hope you like this simple example of method chaining. Thank you for reading this article, and if you have any problem, have another better useful solution for this article, please write in the comment section.</p>
<p><em>This story was first published at SKPTRICKS. See the original article <a href=""&lt;a href="" rel=""nofollow noopener noreferrer"" target=""_blank"">Method chaining in Java</a>. Opinions expressed by Stacktips contributors are their own.</em></p>
",0,"standard","post"
"Bean Mapping Frameworks to Convert DTO to Models in Java","java-bean-mapping-frameworks","This post lists the options available to convert DTO to a Model, or one Java object to another using mapping frameworks like ModelMapper, MapStruct, and Dozer.","LIVE","<p id=""a557c4ee-00db-4478-8753-77565c652d0f"" class="""">Applications often consist of similar but different object models, where the data in two models may be similar but the structure and concerns of the models are different. </p><p id=""9f667c77-fc73-4f7c-baf9-ed09d0b24ad1"" class="""">For example, if you are creating a Spring Boot API endpoint for adding <code>Product</code> data into your DB, it is a best practice to hide your internal DB structure and create a DTO object for the API to pass the JSON payload. </p><pre id=""918c98eb-8881-4cd5-865b-cf59171714b0"" class=""code""><code>@PostMapping
public Movie createMovie(@RequestBody MovieDto movieDto){

    // Convert movieDto to the movie model 
    Movie movie = new Movie();
    movie.setTitle(movieDto.getTitle())
    //So on..
			
    return repository.save(movie);
}</code></pre><p id=""75b55364-da65-4c35-9940-c6f68b9b8d1a"" class="""">In the above code snippet, the Movie class is a DB model. The data in the DTO object is pretty much a subset of the <code>Movie</code> model. Here, in this case, we will have to map every single property of the <code>MovieDto</code> object to the <code>Movie</code> object before saving it to the Database. </p><p id=""ea2a7187-cc91-4012-b39f-7551785c97c2"" class="""">Mapping every single property is cumbersome and time taking. </p><p id=""8be7332d-f62f-45b2-81cd-3bbe1899792d"" class="""">This is the reason why we need the object mapping framework to convert one model to another seamlessly. There are several Java mapping frameworks available that can help convert one object type to another in Java. Here are some of the popular mapping frameworks.</p><h2 id=""ab6558ba-0b83-477e-a9de-4defc34d525f"" class="""">Mapping with <strong>Dozer</strong></h2><p id=""fd7fdd34-9254-4e77-bec2-ec3c98ce0137"" class="""">Dozer is a Java Bean-to-Bean mapper that recursively copies data from one object to another. Typically, these Java Beans can be of the same or different complex types.</p><p id=""8cda426e-ae34-4ff5-a2e9-6f5a966a1c9f"" class="""">Dozer supports simple property mapping, complex type mapping, bi-directional mapping, implicit-explicit mapping, as well as recursive mapping. This includes mapping collection attributes that also need mapping at the element level.</p><p id=""f263ac8d-9455-4b2e-8922-1368078dcfc5"" class="""">If you’re using Maven build tools, for using the Dozer framework you need to add the following package dependency</p><pre id=""531f22c9-c877-4376-a423-e2bc0674bc2e"" class=""code code-wrap""><code>&lt;dependency&gt;
    &lt;groupid&gt;com.github.dozermapper&lt;/groupid&gt;
    &lt;artifactid&gt;dozer-core&lt;/artifactid&gt;
    &lt;version&gt;6.4.1&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p id=""a6254187-ec16-4e33-828d-9b41d2724f37"" class="""">If you’re using the Gradle build system, you can include the following package dependency in your <code>build.gradle</code> file.</p><pre id=""7b13b634-ad8d-4ddc-99b0-a950f01fa3e1"" class=""code code-wrap""><code>compile group: 'com.github.dozermapper', name: 'dozer-core', version: '6.4.1'</code></pre><p id=""3837d5c2-319a-4e9d-8efe-cfad6ad203e8"" class="""">Check out the Dozer framework documentation&nbsp;<a target=""_blank"" href=""http://dozer.sourceforge.net/"">here</a>&nbsp;for more details.</p><h2 id=""dca6287a-7d2d-47a0-b53a-c381de845d2a"" class="""">Mapping with <strong>MapStruct</strong></h2><p id=""0d65664f-5549-435f-9948-6a9597ca9b49"" class="""">MapStruct is a code generator that greatly simplifies the implementation of mappings between Java bean types based on the annotation approach. It is a Java annotation processor for generating type-safe bean mapping classes.</p><p id=""7917b6b2-d8b4-4059-a1da-5f88fd6d3c22"" class="""">All you have to do is to define a mapper interface which declares any required mapping methods. During compilation, MapStruct will generate an implementation of this interface. </p><p id=""4f8c2ed0-ea2d-4411-a6cb-df6a40aabda1"" class="""">This implementation uses plain Java method invocations for mapping between source and target objects, i.e. no reflection or similar.</p><p id=""9c11cbb6-0daa-434d-a61a-ba6e35a55bbb"" class="""">This is probably the simplest and quickest option for writing mapping code. It saves time by generating code which is generally tedious and error-prone to write your own.</p><p id=""4272f00f-5029-4f77-a1ad-49caf7d3df17"" class=""""><strong>Installing MapStruct</strong></p><p id=""f1156d96-bf26-4399-98d6-d4655e547532"" class="""">If you’re using Maven build tools, for using the MapStruct framework you need to add the following package dependency</p><pre id=""eb8947fe-8c24-4f2d-9e4e-3757143f2436"" class=""code code-wrap""><code>&lt;properties&gt;
    &lt;org.mapstruct.version&gt;1.3.0.Beta1&lt;/org.mapstruct.version&gt;
&lt;/properties&gt;
...

&lt;dependency&gt;
    &lt;groupid&gt;org.mapstruct&lt;/groupid&gt;
    &lt;artifactid&gt;mapstruct-processor&lt;/artifactid&gt;
    &lt;version&gt;${org.mapstruct.version}&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</code></pre><p id=""c6b343f9-9f17-4164-ba29-0a9d6245b842"" class="""">Optionally, you can add MapStruct your classpath to annotation processor paths as follows.</p><pre id=""0e8867b5-1f8c-4aac-a78b-ac3b4d64bf80"" class=""code""><code>&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupid&gt;org.apache.maven.plugins&lt;/groupid&gt;
            &lt;artifactid&gt;maven-compiler-plugin&lt;/artifactid&gt;
            &lt;version&gt;3.5.1&lt;/version&gt;
            &lt;configuration&gt;
                &lt;source&gt;1.8
                &lt;target&gt;1.8&lt;/target&gt;
                &lt;annotationprocessorpaths&gt;
                    &lt;path&gt;
                        &lt;groupid&gt;org.mapstruct&lt;/groupid&gt;
                        &lt;artifactid&gt;mapstruct-processor&lt;/artifactid&gt;
                        &lt;version&gt;${org.mapstruct.version}&lt;/version&gt;
                    &lt;/path&gt;
                &lt;/annotationprocessorpaths&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;</code></pre><p id=""e91a9256-ecc1-4311-9dbb-bdfeff05c3ff"" class="""">for gradle,</p><pre id=""3e551261-e6c2-4ce7-9ebd-8787cdd123ab"" class=""code code-wrap""><code>...
plugins {
    ...
    id 'net.ltgt.apt' version '0.15'
}

dependencies {
    compile 'org.mapstruct:mapstruct-jdk8:1.2.0.Final'
    apt 'org.mapstruct:mapstruct-processor:1.2.0.Final'
}
...</code></pre><p id=""8501df44-bbe8-4a81-aa1d-3b696648ba48"" class="""">Check out the MapStruct framework documentation&nbsp;<a target=""_blank"" href=""http://mapstruct.org/documentation/dev/reference/html/"">here</a>.</p><h2 id=""addf8b2d-579f-43fc-a7c9-4410275db685"" class=""""><strong>ModelMapper</strong></h2><p id=""b48ccba3-8f6d-4d72-804c-5f817db9e063"" class="""">The ModelMapper is a framework aimed at simplifying the Java object mapping, by automatically determining how one object model maps to another, based on conventions.</p><p id=""e5550fe1-3c4c-4176-a641-81ccb94cf297"" class="""">It analyses your Java object model to intelligently determine how data should be mapped without doing any manual mapping.</p><p id=""cc5116d2-5ddd-4e0f-ac16-bdb349dd2f6e"" class="""">The ModelMapper API is type-safe and refactoring-safe, using the actual code, rather than string references, to map properties and values.</p><p id=""0641e374-b001-417b-961d-446343afa312"" class=""""><strong>Installing ModelMapper</strong></p><p id=""51a5ff8a-8bd2-4f7b-bd37-c236f456aac4"" class="""">If you’re using Maven build tools, for using the ModelMapper framework, you need to add the following package dependency</p><pre id=""3534200c-b94c-453d-a755-48143a05d564"" class=""code code-wrap""><code>&lt;dependency&gt;
    &lt;groupid&gt;org.modelmapper&lt;/groupid&gt;
    &lt;artifactid&gt;modelmapper&lt;/artifactid&gt;
    &lt;version&gt;2.2.0&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p id=""49ea2346-c110-4575-a752-37573354a121"" class="""">for gradle,</p><pre id=""5269e763-41cb-4b6d-988c-8f914a6e78fa"" class=""code code-wrap""><code>dependencies {
    compile('org.modelmapper:modelmapper:2.2.0')
}</code></pre><p id=""b0f5f6f6-10b4-4b85-80fc-5b97231c6851"" class="""">Check out the MapStruct framework documentation&nbsp;<a target=""_blank"" href=""http://modelmapper.org/"">here</a>.</p><h2 id=""fd22226e-c806-41bf-8c0c-e56922e02ec2"" class=""""><strong>JMapper</strong></h2><p id=""76ab1644-452f-4c9d-a2b1-cfc0fe75dad0"" class="""">JMapper is a Java bean-to-bean mapper framework based n the Javassist framework. It allows you the ability to do dynamic mappings, multi-relational mappings, inherited mapping and other features without compromising on performance.</p><p id=""4be27168-9794-4ba9-a89d-f8c30932b751"" class="""">The framework allows you to map beans using annotation, XML or API-based configurations.</p><h3 id=""a428fa47-57f7-4b70-a77b-32b1c5be2807"" class=""""><strong>Installing JMapper</strong></h3><p id=""af11d737-22cd-4eb8-b9c7-760fc392706a"" class="""">If you’re using Maven build tools, for using the ModelMapper framework, you need to add the following package dependency</p><pre id=""029c5996-0b7f-45c5-bb49-bf9179e61d3a"" class=""code code-wrap""><code>&lt;dependency&gt;
    &lt;groupid&gt;com.googlecode.jmapper-framework&lt;/groupid&gt;
    &lt;artifactid&gt;jmapper-core&lt;/artifactid&gt;
    &lt;version&gt;1.6.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><p id=""c74760ea-8e4b-4fa2-9473-a5aa61080ff8"" class="""">for gradle,</p><pre id=""df5af63a-6fcd-4722-bb57-4f2197d9eaf3"" class=""code code-wrap""><code>dependencies {
    compile('com.googlecode.jmapper-framework:jmapper-core:1.6.0')
}</code></pre><p id=""7d5cd8cf-76e1-46f9-be12-a87e8a63bb73"" class="""">Check out the JMapper framework documentation&nbsp;<a target=""_blank"" href=""https://github.com/jmapper-framework/jmapper-core"">here</a>.</p><p id=""3827ae8e-a79c-4d8c-8449-38f0f42f4472"" class="""">
</p>",0,"standard","post"
"Google Chrome Teases Surprise as it Celebrates its 10th Birthday","google-chrome-teases-surprise-as-it-celebrates-its-10th-birthday","As Google Chrome turned 10 the weekend, a tweet from the official Google Chrome account indicated of some&hellip;
","LIVE","<p>As Google Chrome turned 10 the weekend, a tweet from the official Google Chrome account indicated of some surprise chrome feature updates.</p>
<p>Though nothing specified officially yet, we believe that today we might finally see the browser’s long-awaited Material design UI refresh today that was first was first announced way back in July.</p>
<p>In case you missed it,</p>
<blockquote class=""twitter-tweet"" data-dnt=""true"" data-width=""550"">
<p dir=""ltr"" lang=""en"">In case you couldn’t tell…it’s our birthday. Plus, we’ve got a surprise for you this Tuesday. <a href=""https://twitter.com/hashtag/GoogleChrome?src=hash&amp;ref_src=twsrc%5Etfw"" rel=""nofollow noopener noreferrer"" target=""_blank"">#GoogleChrome</a> <a href=""https://t.co/nkEEjFEHCB"" rel=""nofollow noopener noreferrer"" target=""_blank"">pic.twitter.com/nkEEjFEHCB</a></p>
<p>— Chrome (@googlechrome) <a href=""https://twitter.com/googlechrome/status/1035920244454432768?ref_src=twsrc%5Etfw"" rel=""nofollow noopener noreferrer"" target=""_blank"">September 1, 2018</a></p></blockquote>
<p><script async="""" charset=""utf-8"" src=""https://platform.twitter.com/widgets.js""></script></p>
<p>Over the past few months, the company is on the brink of unifying the design language across all products, aimed at bringing consistent user experience across the range of products.</p>
<p>Many Google products including, Gmail, Google Drive, Messages, Contacts and other Android apps are already using the new Material Design user interface. The design refresh for Chrome browser is long overdue.</p>
<p>Read all about Material Design on its official <a href=""https://www.material.io/"" rel=""nofollow noopener noreferrer"" target=""_blank"">site.</a></p>
",0,"standard","post"
"API Gateways and Key Benefits to Consider","api-gateways-and-key-benefits-to-consider","With micro-services gaining more popularity among businesses in recent days, organizations are also finding it arduous to run such types of services. An API gateway can mitigate some of the underlying complexity for deploying services. 
","LIVE","<p>Application program interfaces (API) are sets of routines, protocols, and tools for describing how software applications and components should interact with each other. They are the key driver in today’s economy for integrating with an eco-system much larger than most companies can build on their own.</p>
<p>Today, many ubiquitous digital platform and services (think Twitter, Facebook, Salesforce, Airbnb, PayPal) are made available through APIs.</p>
<p>Imagine we are building an application to help users with their travel plans. We will require weather information to serve our users with some special offers based on specific weather conditions at a specific location. However, as we do not own any weather data, we can request the information from third-party vendors such as OpenWeatherMap or AccuWeather using their public APIs.</p>
<p>Companies release and promote their services as part of larger software development kit (SDK) that includes the APIs and instructions to help developers understand the specifications of how to use them. The API layer abstracts all the underlying platform complexities (i.e. simplifies it) and the value in the data is made available via an easy-to-use readable format.</p>
<p>There are different data formats used for API communication and information exchange. The most notable and industry standard data formats are Plain Text, JSON, XML, CSV, and YAML.</p>
<h2>Why do we need an API Gateway?</h2>
<p>API manager (also referred as API gateway) platforms are used to easily publish, manage and monitor APIs securely in a highly scalable environment. Gateways additionally include features such as the ability to apply security policies and usage policies, collecting and analyzing statistics and other value-adds.</p>
<p>Some of the common features offered by today’s popular API manager platforms are:</p>
<ul>
<li>Allow companies to publish and monitor the API in a secure and scalable environment.</li>
<li>Allow publishers to design, prototype and document APIs in one place. Most of the popular gateways work well with some of the industry standard Open API specifications such as Swagger and RAML.</li>
<li>Offers a clean and pluggable environment to make it easy to switch between production and sandbox environments.</li>
<li>Define common security gateway and authentication protocols for all published APIs.</li>
<li>Monitor and manage traffic for individual users or applications.</li>
<li>Traffic quota management, allows you to define the limits of a free quota and where a premium option kicks in based on the volume of incoming traffic.</li>
<li>Memory management and data caching mechanisms to improve API performance and response times.</li>
<li>API versioning to ensure compatibility between multiple API implementations without any code changes.</li>
<li>Some of the API manager platforms even allow developers to define API mock data using JavaScript or a static response. This helps the API consumer, to develop and test the application without having to wait for the real working APIs.</li>
<li>Define Load balancer reverse proxy and distribution network for splitting application traffic across several servers.</li>
<li>Setup and manage server failover.</li>
</ul>
<p>In response to the growing open API movement, some software giants such as Facebook, Twitter, and Google have taken the initiative to build API management software in-house to serve customer data for third-party App developers.</p>
<p>However, implementing such a complex API Gateway platform with the wide variety of transports, security features, authentication, monitoring and usage reporting, in-house is very expensive for small and medium enterprises. Hence, some of the big players including Amazon, IBM, Microsoft have built a business model around it to serve enterprises with their API gateway needs.</p>
<p>Overall, there are numerous tools available in this space and each claim to be more useful than the other. Some of the most popular choices are WSO2, AWS, Azure, IBM API Management, Akamai, MuleSoft and CA’s API Gateway.</p>
<p>During our initial experiments in this area, WSO2 arose as one of the best choices and satisfied most/all the criteria of our business case need. Here are some of our experiences with the WSO2 API manager.</p>
<ul>
<li>It is completely free, open source and released under an Apache 2.0 license. The enterprise license is very affordable.</li>
<li>Short learning curve to get started.</li>
<li>WSO2 supports OAuth 2.0 security standards with support for quota management and traffic throttling. As we have our own OAuth 2.0 implementation, the integration with the existing system was a straightforward step with standard Java handlers.</li>
<li>It doesn’t include a load balancer out of the box, but it works well with our existing Nginx plus load balancer setup</li>
<li>It didn’t support importing RAML specification directly (when we started our investigation) but we’ve been able to convert all our RAML to Swagger and everything else has been smooth since then.</li>
<li>As we use micro-services based distributed architecture, almost all our services communicate using both synchronous (HTTP based broker-less architecture) and asynchronous (with AMQP message broker) mechanism. WSO2 works nicely with both.</li>
<li>Native support for Google Analytics was a plus.</li>
<li>Amazing service with extended development support.</li>
</ul>
<h2>Summary</h2>
<p>For most micro-services based architectures, it makes great sense to consider using an API Gateway that can act as a single entry point and can provide additional features like authentication, monitoring and, load balancing.</p>
<p>It’s been a year since we switched to WSO2 and migrated over 12+ API’s and I must say, we have not been disappointed. Clearly, WSO2 was the right choice for us, but what works for you?</p>
<p>If you have a personal favorite or have had a negative experience with the gateways I mentioned or with any I neglected to list, please let me know in the comments below!</p>
<div class=""wp-alert""><em>This story was first published at NESS blog. See the original article <a href=""https://www.ness.com/api-gateways-key-benefits-to-consider?utm_source=stacktips.com"" rel=""noopener"">here.</a> Opinions expressed by Stacktips contributors are their own.</em></div>
",0,"standard","post"
"How to Make Youtube Load Faster on Non-Chrome Browsers?","how-to-make-youtube-load-faster-on-non-chrome-browsers","Struggle with Youtube on Firefox? Use this YouTube Classic Firefox extension to rollback to fix this.
","LIVE","<p>Ever since Google has released the new re-designed YouTube, many users reported that it loads quite slow on Firefox and Microsoft Edge browser. Though it might look as Google is throttling the YouTube browsing experience on two of it’s biggest competitor browsers; the issue is more technical than functional.</p>
<p>Confirming this report on his Twitter handle, Firefox engineering team program manager Chris Peterson wrote ”YouTube page load is 5x slower in Firefox and Edge than in Chrome because YouTube’s Polymer redesign relies on the deprecated Shadow DOM v0 API only implemented in Chrome”</p>
<p>https://twitter.com/cpeterso/status/1021626510296285185?s=19</p>
<h2>Firefox</h2>
<p>Along with acknowledging the issue, he also suggested, a temporary fix to get around this problem by restoring YouTube’s faster pre-polymer design using “<a href=""https://t.co/F5uEn3iMLR"" rel=""nofollow noopener noreferrer"" target=""_blank"">YouTube Classic</a>” Firefox extension.</p>
<p>Just click <strong>Add to Firefox</strong>. When you load YouTube, it should be noticeably faster.</p>
<h2>Safari</h2>
<p>For Safari users the process is a little more tedious. You can bring back the old YouTube design back by using the Tampermonkey Safari extension.</p>
<p>Once you download theTampermonkey extension:</p>
<ul>
<li>Click the Downloads button to expand the menu.</li>
<li>Double-click <code>tampermonkey.safariextz.</code></li>
<li>The Extensions preferences pane and prompt will appear asking if you want to trust the extension. Click on Trust, and you’re ready to go.</li>
</ul>
<p>The next time you visit YouTube, it may take a little longer to load the script for the first time. But once the script runs and the design reverts to the old YouTube layout, you should notice a significant increase in page load time.</p>
",0,"standard","post"
"Dynamic UIButton on UIScrollView Swift 3.0","how-to-create-dynamic-uibutton-on-uiscrollview-swift-3-0","The following code snippet shows how to create dynamic UIbutton in UIScrollView using Swift 3.0. Before we begin,&hellip;
","LIVE","<p>The following code snippet shows how to create dynamic UIbutton in UIScrollView using Swift 3.0.</p>
<p>Before we begin, let us create a new project by selecting Single View Application template and provide ProjectName, Team, Organization Name, Organization Identifier, Bundle Identifier details.</p>
<p>Open <code>Main.storyboard</code> file, drag and drop <code>UIScrollview</code> from the object library.<br/>
Add the AutoLayout constraints for UIScrollView by selecting ScrollView and clicking on Add New Alignment Constraints pin and checking Horizontal in Container and Vertically in Container click on Add Constraints.</p>
<p>Create Outlet for the scroll view by opening Assistant <strong>Editor(⌘ + ⌥ + return)</strong> holding control drag and drop form Scrollview to the ViewController.Swift file above viewDidLoad method and name it as mScrollView.</p>
<p>Let us now open ViewController.swift and create a new function by name dynamicButtonCreation. </p>
<p>Initially let’s set isScrollEnabled , isUserInteractionEnabled properties to true and let’s set the number of buttons and number of rows which has to be displayed in our case we have 16 buttons which are displayed in 2 rows. Let’s divide numberOfButtons into 2 and equally spread the buttons in 2 rows as shown in below snippet. let’s create a button programmatically and set the frame, tag values, title and <code>addTarget(Button Action)</code> for each of the buttons as shown below.</p>
<pre class=""prettyprint lang-c"">func dynamicButtonCreation() {
        
        mScrollView.isScrollEnabled = true
        mScrollView.isUserInteractionEnabled = true
        
        let numberOfButtons = 16
        let numberofRows = 2
        
        var count = 0
        var px = 0
        var py = 0
        
        for _ in 1...numberofRows {
            px = 0
            
            if count &lt; numberOfButtons/2 {
                for j in 1...numberOfButtons/2 {
                    count += 1
                    
                    let Button = UIButton()
                    Button.tag = count
                    Button.frame = CGRect(x: px+10, y: py+10, width: 100, height: 45)
                    Button.backgroundColor = UIColor.black
                    Button.setTitle(""Hello \(j) "", for: .normal)
                    Button.addTarget(self, action: #selector(scrollButtonAction), for: .touchUpInside)
                    mScrollView.addSubview(Button)
                    px = px + Int(mScrollView.frame.width)/2 - 30
                }
            }else{
                
                for j in numberOfButtons/2+1...numberOfButtons {
                    count += 1
                    
                    let Button = UIButton()
                    Button.tag = count
                    Button.frame = CGRect(x: px+10, y: py+10, width: 100, height: 45)
                    Button.backgroundColor = UIColor.black
                    Button.setTitle(""Hello \(j) "", for: .normal)
                    Button.addTarget(self, action: #selector(scrollButtonAction), for: .touchUpInside)
                    mScrollView.addSubview(Button)
                    px = px + Int(mScrollView.frame.width)/2 - 30
                }
                
                
            }
            
            py =  Int(mScrollView.frame.height)-70
        }
        
        mScrollView.contentSize = CGSize(width: px, height: py)
        
    }

</pre>
<p>Let’s add the Action method for the buttons created above</p>
<pre>  func scrollButtonAction(sender: UIButton) {
        print(""Hello \(sender.tag) is Selected"")
    }
    
</pre>
<p>At last call <code>dynamicButtonCreation</code> inside <code>ViewDidLoad</code> as show below</p>
<pre>    override func viewDidLoad() {
        super.viewDidLoad()
  
        //Calling dynamicButtonCreation
         self.dynamicButtonCreation()
    }

</pre>
<p>Cheers…! We are done, let’s Build and Run the application to see the dynamic buttons created on the UIScrollView. Find the source below.</p>
<p>[download src=”https://github.com/satish25/DynamicButtons_ScrollView”]</p>
",0,"standard","post"
"WWDC 2017 Highlights: Watch OS, iOS 11, Apple Pay and more","wwdc-2017-highlights-watchos-ios-11-apple-pay-and-more","WWDC 2017, the biggest annual Apple developer conference gave us a bounty of major announcements on new products, software&hellip;
","LIVE","<p>WWDC 2017, the biggest annual Apple developer conference gave us a bounty of major announcements on new products, software updates for this fall. Some of my friends including me felt this it was Apple’s biggest WWDC opener in recent memory – perhaps ever.</p>
<p>From the latest versions of iOS and macOS to a new iPad, updated iMac and MacBook Pros, HomePod and what not. Here are the highlight of the new features in newly announced Watch OS, iOS 11, Apple Pay.</p>
<h2>WatchOS Updates</h2>
<p>Proactive and intelligent watch face with proactive Siri capabilities. Depending on the time of day and activities done by the user at that hour, watch screen changes to display most relevant information.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter wp-image-12775 size-large"" height=""464"" loading=""lazy"" sizes=""(max-width: 900px) 100vw, 900px"" src=""/media/uploads/articles/28/watchOS-4-Siri-Watch-Face-940x485.jpg"" srcset="""" width=""900""/></a></p>
<p>You’ll need to choose the information you want to receive from Siri based on time, location, and your routines. With the Siri watch face on, you can raise your wrist throughout the day to receive dynamic information, such as traffic information if you’re about to leave work and sunset times in the evening.</p>
<p>Apple also announced a couple of fun watch faces, including a “Kaleidoscope” face “Mickey” and “Minnie Mouse” faces, were some of the most popular.</p>
<h2>What’s new in iOS 11?</h2>
<p>As expected, Apple revealed new iOS 11 to developers during the WWDC keynote. While it is still in beta phase, it showed a sneak peek of new features, so developers can start building their app before it is released for public.</p>
<p>Here are the some of the updates for iOS 11 users.</p>
<h3>Customizable Control Center</h3>
<p>One of the awesome features of Android which iPhone users missed for years is the ability to on/off features right from the home page.</p>
<p>For example, if you want to enable your mobile data, in iOS you had to open the Settings app to toggle on or off. Now with the new iOS 11, they can now customize the controls on the notification center.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""iOS11 Control Center"" class=""aligncenter wp-image-12780 size-full"" height=""534"" loading=""lazy"" sizes=""(max-width: 800px) 100vw, 800px"" src=""/media/uploads/articles/28/iOS11-Control-Center.jpg"" srcset="""" width=""800""/></a></p>
<p>New iOS 11 brings brand new and customizable control center. Now can add more shortcuts to the control center by visiting <strong>Settings</strong>-&gt;<strong>Control</strong> center settings.</p>
<p>Uninstalling of unused apps: There is a potion in the settings app, which will automatically uninstall the app which hasn’t been used for a while. Though the document and data for these uninstalled apps will remain in the memory in case the app is again reinstalled.</p>
<h3>New notification center</h3>
<p>The notification center screen UI is refreshed. It will now display all the current notifications for the day and all other older notification will be pushed to the bottom.</p>
<h3>Safari updates</h3>
<p>Safari browser is now faster and sleeker. Users now have an option to block the annoying Auto-Play videos in the browser.</p>
<h3>Password autofill and sharing</h3>
<p>Logging into apps, as Apple notes, is a source of friction for many users. We’re supposed to use complex passwords, change them frequently and not store them in unsecured places — like an Excel spreadsheet or note, for example. But it’s also difficult to remember which passwords we need to gain access to which resources if we don’t write them down somewhere.</p>
<p>Your password can be shared quickly with any device running iOS 11.</p>
<h3>App Store</h3>
<p>The iOS 11 features a redesigned App Store. Now it categorizes games and apps into separate sections. In additions to games and apps section, a new tab called “Today” features to display App of the Day and a Game of the Day. Editor’s picks are also displayed Today section.</p>
<p>As for the individual pages of the apps, Apple has chosen to highlight reviews, placing more emphasis on the Editor’s Choice for instance. A preview of the content can now be seen in multiple videos displayed on the page.</p>
<p>With the revamped App Store, users are now notified whenever developers launch new features for their favorite apps.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""New App Store iOS11"" class=""aligncenter wp-image-12795 size-full"" height=""447"" loading=""lazy"" sizes=""(max-width: 858px) 100vw, 858px"" src=""/media/uploads/articles/28/New-App-Store-iOS11.png"" srcset="""" width=""858""/></a></p>
<h3>Screen recording</h3>
<p>iOS 11 brings screen recording inbuilt with the phone. Now you can record your phone screen while doing other things.  This is amazing especially for developers to record and report bugs.</p>
<h3>One Hand Keyboard</h3>
<p>This is by far one of my favorite updates. Especially for people do a lot of typing in one had while traveling in the tube, it is often very difficult with plus-sized iPhone. Now with iOS 11 one-handed keyboard, you can change the one-handed mode to compress keyboard to the side to make one-handed typing.</p>
<h3>Activity &amp; Workout App</h3>
<ul>
<li>Monthly goals customized for user capabilities. Improved animations on achievements.</li>
<li>Now multiple workouts can be tracked and updates in a single session. ex: walk+cycle+swim.</li>
<li>Tie up with gyms to enable data exchange between recordings in Gym equipment and watch.</li>
</ul>
<h3>Apple Pay</h3>
<p>Introduced person to person payment. This option is available form messages app. Just swipe in from bottom and scroll through the Pay app.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Apple Pay iOS11"" class=""aligncenter wp-image-12787 size-large"" height=""507"" loading=""lazy"" sizes=""(max-width: 900px) 100vw, 900px"" src=""/media/uploads/articles/28/Apple-Pay-iOS11-940x530.jpg"" srcset="""" width=""900""/></a><br/>
The received payment goes to your apple pay account card balance. You can either withdraw to your bank or use the credit for other purchases via Apple Pay.</p>
<h3>Intelligent Driving Mode</h3>
<p>Do Not Disturb While Driving is a fantastic idea, which will understand if you’re connected to a car, and automatically activate it while driving. It blacks out your screen to prevent you seeing useless notifications while driving, and will auto-reply to texts with a message saying you’re in the car.</p>
<h3>File Manager App</h3>
<p>iPhone was very frustrating when it comes to its restricted file management as compared to its rival Android. But with iOS 11, Apple breaks the silence and added a new “File Manager” app to the default system app category.</p>
<p>It also has the ability to browse, manage and merge all data saved by the owner across several cloud-saving platforms.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""File Manager iOS11"" class=""aligncenter wp-image-12804 size-full"" height=""357"" loading=""lazy"" sizes=""(max-width: 680px) 100vw, 680px"" src=""/media/uploads/articles/28/File-Manager-iOS11.jpg"" srcset="""" width=""680""/></a></p>
<p>The app will allow users to organize files — including nested folders — that is locally stored on their devices or those that are saved on their iCloud Drive, Dropbox, Box, Google Drive and more. It also has the ability to gather saved searches, tags and the like from the said file-saving platforms.</p>
<h2>What’s new for Developers?</h2>
<p>Alongside the above visible features, Apple’s annual developer conference added brand new APIs and features for developers to explore.</p>
<ul>
<li>Apple promised the App Store review time will be much faster.</li>
<li>Added ability for phased release. You can now release an update to some, measure effectiveness and server loads and then make it available to a larger group.</li>
<li>Updates Core ML framework. The software that powers Siri and all of Apple Machine learning capabilities.</li>
<li>New APIs including vision – face detection, text, barcode, object tracking capabilities are now exposed for developers</li>
<li>ARKit is added newly to the iOS family. This is indeed thrilling announcement for the Game Developers. Apps can add virtual objects to real environments and modify its properties. E.g A virtual cup’s shadow can be played around with depending on the real object Lamp’s lighting.</li>
<li>Wireless debugging – No need for cables to debug anymore. Isn’t it amazing? ?</li>
<li>Drag and Drop API, to move around cells with all its content(as metadata) within the app as well as between apps.</li>
<li>Main thread API checks for UI, which will be enabled by default. When UI related code is written in the background, Xcode throws errors.</li>
<li>Videos+HTTP live streaming included their updated H.265 compression. Better compression and streaming, lesser storage space.</li>
</ul>
<h3>XCode Updates</h3>
<ul>
<li>Massive update for XCode 9. It is completely re-written from scratch in Swift.</li>
<li>Markdown Editors available</li>
<li>Warnings will be made fully visible in screen, with “FIX-IT” inline</li>
<li>Code structure highlighters</li>
<li>Faster code refactoring, edits at project level made faster, smoother. And many more updates here. I can’t wait to try it out.</li>
</ul>
<h3>Source Control</h3>
<p>Github is now integrated right into Xcode. Github project page will also have a “Clone/Open in Xcode tab”</p>
<p>What do you think about the new iOS 11 updates? We simply love it and can’t wait to try out.</p>
",0,"standard","post"
"Integrate Facebook Login into a React Native iOS App","integrate-facebook-login-into-a-react-native-ios-app","Hey folks, In this article we will show you how to create Facebook Login using React-Native that will&hellip;
","LIVE","<p>Hey folks, In this article we will show you how to create Facebook Login using React-Native that will work for both iOS and Android Platform.</p>
<p>As assume that you have a basic knowledge of React-Native and required Software prerequisites are already available in your development machine. If not, go back to our articles Getting Started with React-Native for iOS and Android and <a href=""/articles/creating-login-screen-in-react-native"" rel=""noopener"" target=""_blank"">Creating Login Screen in React Native</a>.</p>
<h2>Creating new React Native project</h2>
<p>To create a new React Native project, just open your Terminal/iTerm app and run the following command.</p>
<pre class=""preittyprint lang-c"">$ ~ mkdir ReactNativeApp
$ ~ cd ReactNativeApp
$ ReactNativeApp react-native init DemoFBLogin</pre>
<p>Before integrating with Facebook to React app, we have to first create a Facebook app on the <strong><a href=""https://developers.facebook.com/apps"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""https://developers.facebook.com/apps"">Facebook developer console.</a></strong></p>
<p>Click on <strong>Create App</strong> and enter the display name which will be displayed publicly to the user. It is recommended to provide the contact email. While authenticating, if users have any questions they may contact you on this email.</p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12731"" height=""406"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/29/Screen-Shot-2017-06-08-at-9.02.18-PM-620x406.png"" srcset="""" width=""620""/></p>
<p>Once the App is created it will display the Product Setup page.</p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12732"" height=""355"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/29/Screen-Shot-2017-06-08-at-9.03.13-PM-620x355.png"" srcset="""" width=""620""/></p>
<p>Let’s click on <strong>Get Started</strong> with Facebook Login. First let’s start with the iOS platform, so select iOS and download the SDK and unzip the archive to <strong>~/Documents/FacebookSDK</strong>. .</p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12733"" height=""359"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/29/Screen-Shot-2017-06-08-at-9.03.20-PM-620x359.png"" srcset="""" width=""620""/></p>
<p>Now, Install and link the Facebook SDK for React Native packages and dependencies in the terminal and start npm server.</p>
<pre class=""preittyprint lang-c"">$ cd DemoFBLogin
$ DemoFBLogin react-native install react-native-fbsdk
$ DemoFBLogin react-native link react-native-fbsdk
$ DemoFBLogin npm start</pre>
<p><img alt="""" class=""aligncenter size-medium wp-image-12737"" height=""267"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/29/Screen-Shot-2017-06-08-at-10.28.51-PM-620x267.png"" srcset="""" width=""620""/></p>
<p>Open the ios project form the DemoFBLogin/ios folder and drag and drop the <strong>FBSDKLoginKit.framework, FBSDKShareKit.framework, Bots.framework, FBSDKCoreKit.framework</strong> inside your project.</p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12739"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/29/Screen-Shot-2017-06-08-at-10.34.56-PM-620x388.png"" srcset="""" width=""620""/></p>
<p>And make sure you have checked <strong>copy items if needed</strong> and click on <strong>Finish</strong></p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12740"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/29/Screen-Shot-2017-06-08-at-10.35.24-PM-620x388.png"" srcset="""" width=""620""/></p>
<p>Now go to <strong>Link Binary With Libraries</strong> and check all this FBSDKs are linked properly.</p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12741"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/29/Screen-Shot-2017-06-08-at-10.52.19-PM-620x388.png"" srcset="""" width=""620""/></p>
<p>Let’s also set the Framework Search Path of the Facebook SDK which we downloaded and unzip the archive to <strong>~/Documents/FacebookSDK</strong></p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12743"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/29/Screen-Shot-2017-06-08-at-10.58.36-PM-620x388.png"" srcset="""" width=""620""/></p>
<p>Go back to the developer.facebook.com where we created App prior and <strong>Add your Bundle Identifier</strong></p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12747"" height=""360"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/29/Screen-Shot-2017-06-08-at-11.05.23-PM-620x360.png"" srcset="""" width=""620""/></p>
<p>Enable single sign-on, and Configure your info.plist follow the step by step instruction provide in developer.facebook.com.</p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12748"" height=""318"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/29/Screen-Shot-2017-06-08-at-11.05.33-PM-620x318.png"" srcset="""" width=""620""/></p>
<p>Connect App Delegate , Open your Xcode project go to <strong>AppDelegate.m</strong> and <strong>import </strong> and paste the following code inside <strong>didFinishLaunchingWithOptions</strong></p>
<pre class=""prettyprint lang-c"">[[FBSDKApplicationDelegate sharedInstance] application:application
didFinishLaunchingWithOptions:launchOptions];
Declare <strong>OpenUrl:sourceApplicaiton:annotation</strong> method below <strong>didFinishLaunchingWithOptions</strong>
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url
sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {
BOOL handled = [[FBSDKApplicationDelegate sharedInstance] application:application
openURL:url
sourceApplication:sourceApplication
annotation:annotation
];
// Add any custom logic here.
return handled;
}</pre>
<p>In case if you find any error as show below</p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12749"" height=""249"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/29/Screen-Shot-2017-06-09-at-8.13.28-AM-620x249.png"" srcset="""" width=""620""/></p>
<p>That is because we need to do <strong>npm install</strong> in our react-native project folder, open your terminal and navigate to your project folder and type <code>npm install or npm i </code> after installation clean (⇧⌘K) and build (⌘B) that error will go.</p>
<p>Now open the react-native project with VS Code IDE, directly by opening folder via VC Code or open your terminal and navigate to your project folder and code. Go to <strong>Debug editor(⇧⌘D)</strong> and Add Configuration by adding iOS platform.</p>
<p>Open <code>index.ios.js</code> <strong>import FBSDK, { LoginManager } from ‘react-native-fbsdk’</strong> and create a function called <code>_fbAuth</code> i start with <strong>_</strong> to signify that it’s a private method inside this function call <code>logInWithReadPermissions</code> form FB loginManage and handled the success and cancel state snippet looks something like</p>
<pre class=""prettyprint lang-js"">_fbAuth() {
    LoginManager.logInWithReadPermissions(['public_profile']).then(
        function(result) {
            if (result.isCancelled) {
                alert('Login cancelled');
            } else {
                alert('Login success with permissions: ' +
                    result.grantedPermissions.toString());
            }
        },
        function(error) {
            alert('Login fail with error: ' + error);
        }
    );

}</pre>
<p>Remove all the code inside <strong>render()</strong> function except container view and create a button by with saying <strong>Login Via Facebook</strong>, Later let’s assign the <strong>_fbAuth function</strong> for a button. we do this by <strong>onPress</strong> in your opening tag of and supplying the function <code>{this._fbAuth}</code>. Over all code will look something like this:</p>
<pre class=""prettyprint lang-js"">import React, {
    Component
} from 'react';
import {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    TouchableOpacity
} from 'react-native';
import FBSDK, {
    LoginManager
} from 'react-native-fbsdk'

export default class DemoFBLogin extends Component {

    _fbAuth() {
        LoginManager.logInWithReadPermissions(['public_profile']).then(
            function(result) {
                if (result.isCancelled) {
                    alert('Login cancelled');
                } else {
                    alert('Login success with permissions: ' +
                        result.grantedPermissions.toString());
                }
            },
            function(error) {
                alert('Login fail with error: ' + error);
            }
        );

    }
    render() {
        return (
		&lt;View style={styles.container}&gt;
		&lt;TouchableOpacity onPress={this._fbAuth}&gt;
		&lt;Text&gt;Login Via FaceBook&lt;/Text&gt;
		&lt;/TouchableOpacity&gt;
		&lt;/View&gt; 
        );
    }
}
</pre>
<p>Compile and run the project.</p>
<h3>Download Source code</h3>
<p>[download url=”https://github.com/satish25/FaceBook_Login_React-Native.git”]</p>
",0,"standard","post"
"Creating Login Screen in React Native","creating-login-screen-in-react-native","React Native lets you build mobile apps using only JavaScript. It uses the same design as React, letting&hellip;
","LIVE","<p>React Native lets you build mobile apps using only JavaScript. It uses the same design as React, letting you compose a rich mobile UI from declarative components. React Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just put those building blocks together using JavaScript and React.</p>
<p>In this article, we will show you how to create a Login Screen using React-Native that will work for both iOS and Android Platform.</p>
<h3>Software Prerequisites</h3>
<p>This example is developed in MacOS. Before you begin, make sure you have all the software prerequisites are installed on your development machine.</p>
<ul>
<li>You need ‘Homebrew’ package management software to get all other dependency packages. Usually all modern macOS are preinstalled with home-brew. By any chance, if you don’t have it on your machine, install it using following command. Learn more from official Homebrew website <a href=""https://brew.sh/"" rel=""nofollow noopener noreferrer"" target=""_blank"">here</a>.</li>
</ul>
<pre>ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""
</pre>
<ul>
<li>Install node.js if not installed already. To check if it is installed paste the following command in your terminal window.</li>
</ul>
<pre>$ node -v</pre>
<p>If not installed, the following command will install the latest node version.</p>
<pre class=""prettyprint lang-js"">$ brew install node</pre>
<ul>
<li>Now we will install ‘Watchman’. Though it is strictly not required, this will make our development productive. Watchman is a tool by provided by Facebook, used for watching changes in the filesystem.</li>
</ul>
<pre>brew install watchman</pre>
<ul>
<li>Install React Native command line interface</li>
</ul>
<pre>$ npm install -g react-native-cli</pre>
<ul>
<li>Run the following command to cross check React-native version.</li>
</ul>
<pre>$ react-native -v</pre>
<ul>
<li>Check you have the latest SDK of <a href=""https://itunes.apple.com/us/app/xcode/id497799835?mt=12"" rel=""nofollow noopener noreferrer"" target=""_blank"">iOS</a> and <a href=""https://developer.android.com/studio/index.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">Android</a> available in your system.Download and install if you don’t have it already.</li>
<li>Make sure you have installed <a href=""https://code.visualstudio.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Visual Studio Code</a> IDE, and relevant Plugins for React-Naive. Refer our beginners guide for more information on the <a href=""/articles/getting-starteded-with-react-native-ios-android"">Visual Studio Code IDE plugin</a> installation.</li>
</ul>
<h3>Creating new React Native project</h3>
<p>Now, we are ready to go by creating a new project by name DemoLogin via Terminal or <a href=""https://www.iterm2.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">iTerm</a>, where we are using iTerm throughout in this article.</p>
<p>Open Terminal/iTerm</p>
<pre>$ ~ mkdir ReactNativeApp
$ ~ cd ReactNativeApp
$ ReactNativeApp react-native init DemoLogin
$ DemoLogin Code .
</pre>
<p>Command <code>Code .</code> should open the project in VS code, if it’s not opening we need to configure the <em><strong>Path</strong></em> as below:</p>
<ul>
<li>Launch VS Code.</li>
<li>Open the <strong>Command Palette (⇧⌘P)</strong> and type <code>shell command</code> to find the Shell Command: Install ‘code’ command in PATH command.</li>
</ul>
<p><img alt="""" class=""aligncenter size-full wp-image-12655"" height=""100"" loading=""lazy"" src=""/media/uploads/articles/31/mac_shell-command.png"" srcset="""" width=""618""/></p>
<ul>
<li>Restart the terminal for the new <strong><em>$PATH</em></strong> value to take effect. You’ll be able to type <code>code .</code> in any folder to start editing files in that folder.</li>
<li>Open <code>index.ios.js</code> delete all the code inside <code>render</code> function, and also remove the snippet inside the <code>const styles</code>. Anyways we are going to create everything form scratch.</li>
</ul>
<p>Now let’s create a proper folder structure by creating new folder’s of required components, as of now we need a Login component and logo image to display on login screen <code>src</code> -&gt; components -&gt; images and Login as shown below.</p>
<p><img alt="""" class=""aligncenter size-full wp-image-12681"" height=""631"" loading=""lazy"" src=""/media/uploads/articles/31/Screen-Shot-2017-06-04-at-10.04.52-PM-1.png"" srcset="""" width=""275""/></p>
<h3>Creating Login Component</h3>
<p>Let’s create Login Component by creating new file inside Login Folder which we have created and name it as Login.js. Open Login.js and press <strong>Command Palette (⇧⌘P)</strong> and type ‘Change Language Mode’ and press <code>'enter'</code>, next type <code>'JavaScript React'</code></p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12667"" height=""270"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/31/Screen-Shot-2017-06-04-at-10.16.59-PM-620x270.png"" srcset="""" width=""620""/></p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12668"" height=""263"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/31/Screen-Shot-2017-06-04-at-10.17.26-PM-620x263.png"" srcset="""" width=""620""/></p>
<p>And type <code>rnc</code> for creating <em>‘React Native Class Component Template’</em></p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12671"" height=""278"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/31/Screen-Shot-2017-06-04-at-10.22.09-PM-620x278.png"" srcset="""" width=""620""/></p>
<p>Replace <code>'MyClass'</code> with <code>'Login'</code> and save the file.</p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12672"" height=""309"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/31/Screen-Shot-2017-06-04-at-10.32.18-PM-620x309.png"" srcset="""" width=""620""/></p>
<p>Next, Let’s import logo image to the ‘images’ folder which we created initially, You can just right click and Reveal in finder, Copy Paste the logo image. In this article we are using our StackTip logo. the final UI should look similar to the below image:</p>
<p><img alt="""" class=""aligncenter size-full wp-image-12688"" height=""355"" loading=""lazy"" src=""/media/uploads/articles/31/Simulator-Screen-Shot-05-Jun-2017-10.48.58-PM-2.png"" srcset="""" width=""200""/></p>
<p>Let’s start creating UI of the LoginScreen, open <code>'Login.js'</code> inside container view tag let’s add two more view containers and name them as <code>'loginContainer'</code> and <code>'formContainer'</code> and also set the styles as shown below</p>
<pre class=""prettyprint lang-js"">&lt;View style={styles.container}&gt;
        &lt;View style={styles.loginContainer}&gt;
                    &lt;Image resizeMode=""contain"" style={styles.logo} source={require('../../components/images/logo-dark-bg.png')} /&gt;
         &lt;/View&gt;

            &lt;View style={styles.formContainer}&gt;
                   &lt;LoginForm /&gt;
            &lt;/View&gt;
       &lt;/View&gt;

// define your styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#2c3e50',
    },
    loginContainer:{
        alignItems: 'center',
        flexGrow: 1,
        justifyContent: 'center'
    },
    logo: {
        position: 'absolute',
        width: 300,
        height: 100
    }
</pre>
<p>Now go to <code>index.ios.js</code> and import <code>Login</code> below <code>import statement from react-native</code></p>
<pre class=""prettyprint lang-js"">import Login from './src/components/Login/Login';</pre>
<p>And initialise the <code>Login</code> component inside <code>render</code> function, overall it’s should look something like this</p>
<pre class=""prettyprint lang-js"">import React, { Component } from 'react';
import { AppRegistry,StyleSheet,Text ,View} from 'react-native';
//import Login Component 
import Login from './src/components/Login/Login';

export default class DemoLogin extends Component {
  render() {
    return (
     &lt;Login /&gt;
    );
  }
}

AppRegistry.registerComponent('DemoLogin', () =&gt; DemoLogin);
</pre>
<p>Let’s compile and check weather we have zero compilation error and logo image rendering properly as expected. We can compile in two ways one is via iTerm and another via VS Code Editor.</p>
<p>To compile via iTerm paste the following command, make sure your inside project folder.</p>
<pre>react-native run-ios</pre>
<p>To compile via VS Code Editor, open debug editor(⇧⌘D) and select <code>Debug iOS</code> in dropdown and click on run. If it compile successfully you should find something like</p>
<p><img alt="""" class=""aligncenter size-full wp-image-12696"" height=""355"" loading=""lazy"" src=""/media/uploads/articles/31/Simulator-Screen-Shot-06-Jun-2017-8.33.30-AM.png"" srcset="""" width=""200""/></p>
<p>Next let’s create a <code>form component</code> for LoginScreen which contains two textfield(Email and Password) and Login Button. Create new file inside Login folder and name it as <code>LoginForm.js</code> and follow the same steps for creating component which we did for Login Component above and type <code>rnc</code>, replace MyClass with LoginForm.</p>
<p><img alt="""" class=""aligncenter size-medium wp-image-12698"" height=""225"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/31/Screen-Shot-2017-06-06-at-8.56.03-AM-620x225.png"" srcset="""" width=""620""/></p>
<p>Let’s create a TextFiled’s for Email and Password and a LoginButton, we should import <code>TextInput</code> inside and <code>TouchableOpacity</code> for LoginButton inside <code>react-native</code>.</p>
<pre class=""prettyprint lang-js"">import { View, Text, TextInput, TouchableOpacity,StyleSheet} from 'react-native';</pre>
<p>Inside View container tag paste the following snippet, which contains properties for Textfield like keyboardType, returnKeyType, placeholder, placeholderTextColor ,onSubmitEditing, secureTextEntry for secure password. For Login button we can use either react-native Button component or TouchableOpacity, we will use TouchableOpacity in this article.</p>
<pre class=""prettyprint lang-js"">&lt;TextInput style = {styles.input} 
               autoCapitalize=""none"" 
               onSubmitEditing={() =&gt; this.passwordInput.focus()} 
               autoCorrect={false} 
               keyboardType='email-address' 
               returnKeyType=""next"" 
               placeholder='Email or Mobile Num' 
               placeholderTextColor='rgba(225,225,225,0.7)'/&gt;

&lt;TextInput style = {styles.input}   
              returnKeyType=""go"" 
              ref={(input)=&gt; this.passwordInput = input} 
              placeholder='Password' 
              placeholderTextColor='rgba(225,225,225,0.7)' 
              secureTextEntry/&gt;

&lt;TouchableOpacity style={styles.buttonContainer} 
                     onPress={onButtonPress}&gt;
             &lt;Text  style={styles.buttonText}&gt;LOGIN&lt;/Text&gt;
&lt;/TouchableOpacity&gt; 
// define your styles
const styles = StyleSheet.create({
    container: {
     padding: 20
    },
    input:{
        height: 40,
        backgroundColor: 'rgba(225,225,225,0.2)',
        marginBottom: 10,
        padding: 10,
        color: '#fff'
    },
    buttonContainer:{
        backgroundColor: '#2980b6',
        paddingVertical: 15
    },
    buttonText:{
        color: '#fff',
        textAlign: 'center',
        fontWeight: '700'
    }
</pre>
<p>Now we will import this Loginform component in <code>Login.js</code>, open Login.js file and paste the following line above <code>class Login extends Component </code></p>
<pre class=""prettyprint lang-js"">import LoginForm from './LoginForm';</pre>
<p>And initialise Loginform inside view formContainer tag,</p>
<pre class=""prettyprint lang-js""> &lt;View style={styles.formContainer}&gt;
             &lt;LoginForm /&gt;
  &lt;/View&gt;
</pre>
<p>Compile and check everything is working fine as expected, and should look like</p>
<p><img alt="""" class=""aligncenter size-full wp-image-12688"" height=""355"" loading=""lazy"" src=""/media/uploads/articles/31/Simulator-Screen-Shot-05-Jun-2017-10.48.58-PM-2.png"" srcset="""" width=""200""/></p>
<p>One thing we haven’t taken care is when you tap on Email or Password, the keyboard will overlay on the TextField as below</p>
<p><img alt="""" class=""aligncenter size-full wp-image-12703"" height=""355"" loading=""lazy"" src=""/media/uploads/articles/31/Simulator-Screen-Shot-06-Jun-2017-9.27.38-AM.png"" srcset="""" width=""200""/></p>
<p>People who are form iOS background will know the pain to handle this use case in Native UITextfield, this can be achieved easily in react native by <a href=""https://facebook.github.io/react-native/docs/keyboardavoidingview.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">KeyboardAvoidingView</a>. Let’s replace the <code>view</code> tag of container with <code>keyboardavoidingview</code> and set the <code> behaviors as 'Padding'</code> as shown below</p>
<pre class=""prettyprint lang-js"">class Login extends Component {
    render() {
        return (
        &lt;KeyboardAvoidingView behavior=""padding"" style={styles.container}&gt;

                &lt;View style={styles.loginContainer}&gt;
                    &lt;Image resizeMode=""contain"" style={styles.logo} source={require('../../components/images/logo-dark-bg.png')} /&gt;
                  
                   &lt;/View&gt;
               &lt;View style={styles.formContainer}&gt;
                   &lt;LoginForm /&gt;
               &lt;/View&gt;
           &lt;/KeyboardAvoidingView&gt;
        );
    }
}
</pre>
<p>Now compile and check the magic happening on your simulator ?</p>
<p><img alt="""" class=""aligncenter size-full wp-image-12708"" height=""355"" loading=""lazy"" src=""/media/uploads/articles/31/Simulator-Screen-Shot-06-Jun-2017-9.49.15-AM.png"" srcset="""" width=""200""/></p>
<p>if you want to check in Android we need to copy paste the contents form index.ios.js to index.android.js, that’s it…! this will work as champ..!</p>
<p>Cheers we ready with Login module, and can find the source <a href=""https://github.com/satish25/Login_ReactNative.git"" rel=""nofollow noopener noreferrer"" target=""_blank"">here</a></p>
<p>Happy Coding..!</p>
",0,"standard","post"
"Creating Bootstrap4 Fixed NavBar with Shadow on Scroll","creating-bootstrap4-fixed-navbar-with-shadow-on-scroll","In this example, let us create Bootstrap 4 sticky top navigation bar that shows shadow effect when page&hellip;
","LIVE","<p>In this example, let us create Bootstrap 4 sticky top navigation bar that shows shadow effect when page is scrolled. For this, we will be use Bootstrap4 framework CSS and jQuery.</p>
<p><script async="""" src=""//jsfiddle.net/npanigrahy/eh3n4xnn/7/embed/result/""></script></p>
<h3>Load Bootstrap CSS</h3>
<pre class=""prettyprint lang-html"">&lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ"" crossorigin=""anonymous""&gt;
</pre>
<h3>Include Java Scripts</h3>
<pre class=""prettyprint lang-html"">&lt;script 
	src=""https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js"" 	
        integrity=""sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn"" 
	crossorigin=""anonymous""&gt;&lt;/script&gt;
&lt;script
  src=""https://code.jquery.com/jquery-3.2.1.js""
  integrity=""sha256-DZAnKJ/6XZ9si04Hgrsxu/8s717jcIzLy3oi35EouyE=""
  crossorigin=""anonymous""&gt;&lt;/script&gt;
</pre>
<h3>Fixed NabBar in Bootstrap4</h3>
<pre class=""prettyprint lang-html"">&lt;header id=""header"" class=""fixed-top""&gt;
  &lt;div class=""container""&gt;
    &lt;nav class=""navbar navbar-toggleable-md navbar-light"" role=""navigation""&gt;
      &lt;button class=""navbar-toggler navbar-toggler-right hidden-lg-up"" type=""button"" data-toggle=""collapse"" data-target=""#mainNavbarCollapse""&gt;
        &lt;span class=""navbar-toggler-icon""&gt;&lt;/span&gt;
      &lt;/button&gt;

      &lt;a class=""navbar-brand"" href=""/"" title=""Hubble"" rel=""home""&gt;
        &lt;img src=""https://v4-alpha.getbootstrap.com/assets/brand/bootstrap-solid.svg"" height=""35"" alt=""Hubble"" class=""d-inline-block align-top""&gt;
      &lt;/a&gt;

      &lt;div class=""collapse navbar-collapse justify-content-end"" id=""mainNavbarCollapse""&gt;
        &lt;ul class=""navbar-nav my-2 my-lg-0""&gt;
          &lt;li class=""nav-item""&gt;&lt;a class=""nav-link"" href=""/about""&gt;About&lt;/a&gt;&lt;/li&gt;
          &lt;li class=""nav-item""&gt;&lt;a class=""nav-link"" href=""/news""&gt;News&lt;/a&gt;&lt;/li&gt;
          &lt;li class=""nav-item""&gt;&lt;a class=""nav-link"" href=""/jobs""&gt;Jobs&lt;/a&gt;&lt;/li&gt;
          &lt;li class=""nav-item""&gt;&lt;a class=""nav-link"" href=""/news""&gt;Blog&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/nav&gt;
  &lt;/div&gt;
&lt;/header&gt;

&lt;div class=""content bg-white""&gt;
  &lt;div class=""container""&gt;

    &lt;h3&gt;Hello, Bootstrap&lt;/h3&gt;
    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis venenatis felis in magna lacinia bibendum. Vivamus elit mauris, tristique at hendrerit viverra, rhoncus eleifend justo. Duis ultrices aliquet magna adipiscing consequat. Phasellus ac tellus
      quis nulla sollicitudin rhoncus. In pretium scelerisque mauris et molestie. Nullam in ligula nulla. Etiam convallis orci ac sapien scelerisque id vulputate lorem consectetur.&lt;/p&gt;

    &lt;p&gt;Maecenas quam mi, viverra placerat iaculis viverra, accumsan in turpis. Vivamus feugiat, dolor quis accumsan lacinia, nibh velit pulvinar dolor, eget semper urna leo eget tellus. Sed at nulla erat, eget convallis nisl. Maecenas eget orci a lacus auctor
      aliquet in sit amet magna. Aliquam erat volutpat. Donec erat massa, sollicitudin sed pharetra nec, malesuada quis risus.&lt;/p&gt;

    &lt;p&gt;Duis ut libero orci. Nulla ultricies ultrices velit a suscipit. Morbi ac ipsum nunc, quis feugiat enim. Nullam pharetra magna elementum orci hendrerit interdum. Sed dignissim mattis tincidunt. Nullam rhoncus sagittis leo, sit amet viverra metus cursus
      at. Fusce viverra nisi eget nunc semper tempus. Phasellus nisi sapien, vulputate et bibendum vel, eleifend nec nunc. Donec laoreet ante mollis dolor posuere ullamcorper ut id sapien. In sapien eros, sodales eget venenatis pellentesque, volutpat
      id arcu. Proin laoreet ornare tincidunt. Morbi quis rutrum odio. Pellentesque non leo ut orci mollis posuere tristique sit amet turpis. Vestibulum vestibulum dui vel nisl imperdiet eu pretium nulla fermentum. Nunc tortor tortor, malesuada et tempus
      ac, rhoncus eu lacus. Quisque et ullamcorper odio.&lt;/p&gt;

    &lt;p&gt;Vestibulum a lorem in libero sagittis auctor non nec felis. Phasellus purus ligula, ultrices nec tincidunt at, eleifend at metus. Curabitur aliquam, leo quis eleifend dignissim, eros nisl vulputate tortor, id dictum libero enim dapibus magna.&lt;/p&gt;

    &lt;p&gt;Ut ut risus eu augue volutpat ultricies quis at nibh. Donec posuere venenatis lacus, ac consequat est malesuada in. Praesent mattis, orci sed tincidunt semper, est metus suscipit risus, a faucibus sem purus non urna. Donec tincidunt magna vel nulla
      posuere eget accumsan arcu blandit. Suspendisse vestibulum augue sed nisi fermentum nec hendrerit nunc mollis. Nullam sed elit est.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</pre>
<h3>Custom SCSS</h3>
<pre class=""prettyprint lang-css"">body {
  padding-top: 70px;
  background: #fff;
}

.content {
  padding: 20px;
}

#header {
  background: #fff;
  border-bottom: 1px rgba(0, 0, 0, 0.07) solid;
  z-index: 99;
  &amp;.--not-top {
    box-shadow: 0 0 30px rgba(0, 0, 0, 0.1);
  }
}
</pre>
<h3>From JavaScript</h3>
<pre class=""prettyprint lang-js"">//Main navigation scroll spy for shadow
$(window).scroll(function() {
  var y = $(window).scrollTop();
  if (y &gt; 0) {
    $(""#header"").addClass('--not-top');
  } else {
    $(""#header"").removeClass('--not-top');
  }
});
</pre>
",0,"standard","post"
"Getting Started with React-Native for iOS and Android","getting-starteded-with-react-native-ios-android","Hey folks, React-Native is happening Framework for Mobility in recent times due to it’s tremendous success which was&hellip;
","LIVE","<p>Hey folks, <a href=""https://facebook.github.io/react-native/releases/next/"" rel=""nofollow noopener noreferrer"" target=""_blank"">React-Native</a> is happening Framework for Mobility in recent times due to it’s tremendous success which was developed by Facebook. Overall it’s a new way of developing native iOS and Android applications, primarily using a single codebase on <a href=""https://facebook.github.io/react/"" rel=""nofollow noopener noreferrer"" target=""_blank"">React</a> framework for web.</p>
<p>The idea is to write the core application in Javascript and React-Native will compile native iOS and Android applications. Companies like Facebook, Instagram, Netflix, Airbnb use React-Native.</p>
<h2>Advantages of using React-Native</h2>
<ul>
<li>Building native mobile apps using JavaScript and React</li>
<li>No need to recompile every-time to check the changes</li>
<li>Use native code when you need</li>
<li>Maximum code reuse between platforms</li>
<li>Reduces cost of development</li>
<li>Better performance for mobile environment</li>
</ul>
<p>The following tutorials will guide you through developing your first React-Native application for both iOS and Android, React-Native 0.44 is the version used.</p>
<h2>Getting Started</h2>
<p>For setting up the environment, install React-Native and required dependencies i.e home brew, node, watchman, Xcode and Android development environment refer <a href=""https://facebook.github.io/react-native/releases/next/docs/getting-started.html#content"" rel=""nofollow noopener noreferrer"" target=""_blank"">installation link</a>.</p>
<p>There are so many IDEs out there for development and it’s difficult for us to choose the right editor for a particular programming language. While working with React Native, I did some digging and found below IDEs which are suitable for mobile app development:</p>
<ul>
<li>SubLime</li>
<li>Atom</li>
<li>Visual Studio Code</li>
</ul>
<p>I use “Visual Studio Code” in my macOS as IDE of my choice.</p>
<h2>Creating a new React Native app</h2>
<p>Create a new folder in any specific location you wish using terminal with the following command</p>
<pre>$ mkdir ReactProject
$ cd ReactProject
$ ReactProject~ react-native init HelloWorld
</pre>
<p> </p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-medium wp-image-12611"" height=""481"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/33/Creating-React-Native-Application-620x481.png"" srcset="""" width=""620""/></a></p>
<h3>Running your React Native application</h3>
<p>Let’s check if the application created works fine by compiling and building it on either iOS Simulator or Android emulator. There are two ways we can proceed as listed below:<br/>
By React CLI in Terminal using commands.</p>
<h4>By React CLI in Terminal using commands.</h4>
<pre>$ cd HelloWorld</pre>
<p>To run the iOS app, execute following command in your terminal.</p>
<pre>$ HelloWorld~ react-native run-ios</pre>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Running React native iOS"" class=""aligncenter size-full wp-image-12613"" height=""493"" loading=""lazy"" src=""/media/uploads/articles/33/Running-React-native-iOS.png"" srcset="""" width=""300""/></a></p>
<p>To run the Android app, execute following command in your terminal.</p>
<pre>$ HelloWorld~ react-native run-android</pre>
<h4>Using Visual Studio Code IDE</h4>
<p>Let’s import code folder in VS code IDE and make sure you have installed React-Native plugins in Extension Window <strong>(⌘ + ⇧ + x)</strong> before building the app.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-medium wp-image-12614"" height=""445"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/33/Import-React-Native-App-in-VS-620x445.png"" srcset="""" width=""620""/></a></p>
<p>After importing go to Debug window <strong>(⌘ + ⇧ + d)</strong> and select the Environment as React-Native which will create configuration file named <code>launch.json</code>.<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-medium wp-image-12615"" height=""450"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/33/Selecting-Environment-in-VS-Code-IDE-620x450.png"" srcset="""" width=""620""/></a></p>
<p>Finally, we are done with the configuration setup in VS code IDE. Now, select the required platform from the Debug drop-down and click on Run.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-medium wp-image-12616"" height=""448"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/33/Configuration-file-created-by-VS-Code-IDE-620x448.png"" srcset="""" width=""620""/></a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-medium wp-image-12618"" height=""444"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/33/Running-Application-via-VS-Code-IDE-620x444.png"" srcset="""" width=""620""/></a></p>
<h3>Modifying your app</h3>
<p>Now that you have successfully run the app, let’s modify it.</p>
<p>Note: main root file for iOS will be <code>index.ios.js</code> and for Android <code>index.android.js</code> in the project structure.</p>
<p>That’s it! We’ve successfully built and modified the first React Native app.</p>
",0,"standard","post"
"How to Generate Valid RSS Feed for your Laravel Application?","how-to-generate-valid-rss-feed-for-your-laravel-application","Feeds are one of the traditional and most effective ways to distribute your content to the wider audience.&hellip;","LIVE","<p>Feeds are one of the traditional and most effective ways to distribute your content to the wider audience. There are thousands of apps such as Feedly, Apple News, Google Newsstand, that allows people to follow and read your content whenever new content is published.</p>
<p>Feeds allow webmasters to drive traffic to their website. Some of the feed delivery platforms such as Google Feed burner allows you to monetize your feed content by serving ads.</p>
<h2>Generate RSS Feed in Laravel</h2>
<p>According to web standards, there are different feed formats that are widely accepted. RSS and Atom are the most popular ones. Feeds are XML based, however, they differ in specifications.</p>
<p>To make our life easy, we will generate valid RSS and Atom feed using <a href=""https://github.com/RoumenDamianoff/laravel-feed"" rel=""nofollow noopener noreferrer"" target=""_blank"">roumen/feed</a> Laravel open source library. In this article, we assume you have the basic knowledge of Laravel project and have a project handy to integrate.</p>
<h3>Adding roumen/feed via composer</h3>
<p>Laravel project dependencies are maintained using <a href=""/articles/intro-to-laravel-php-framework-and-features"">composer</a>. We can add the roumen/feed dependency library using the following artisan command:</p>
<pre>composer require roumen/feed</pre>
<p>Or add the following to your re composer.json file:</p>
<pre>""roumen/feed"": ""~2.10""</pre>
<p>Please note, after updating composer.json file, run <code>composer install</code> command to add dependency to project.</p>
<p>Now, register for <code>Roumen\Feed\FeedServiceProvider</code> service provider and class alias in your Laravel <code>config/app/php</code> file.</p>
<pre class=""prettyprint lang-php"">&lt;?php
return [
     //...		
    'providers' =&gt; [
        //...
        Roumen\Feed\FeedServiceProvider::class,
    ],

    'aliases' =&gt; [		
	//...
        'Feed'      =&gt; Roumen\Feed\Feed::class,
    ],
];
</pre>
<p>Optionally, if you want to alter the blade layouts, you can publish vendor views using following artisan command.</p>
<pre>artisan vendor:publish --provider=""Roumen\Feed\FeedServiceProvider""</pre>
<h3>Eloquent Models</h3>
<p>This tutorial scope is limited to generating RSS feed, and hence we wont cover the Eloquent Models and database concepts.</p>
<p>The following code snippet of the Post and User model are illustrated just to get the idea of how my data in the database are stored.</p>
<pre class=""prettyprint lang-php"">&lt;?php
namespace App\Models;
use App\User;
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    protected $table = 'posts';
    public $timestamps = TRUE;
    protected $fillable = [
        'id',
        'user_id',
        ""title"",
        'content',
        ""excerpt"",
    ];

    public function user()
    {
        return $this-&gt;belongsTo(User::class);
    }   
}
</pre>
<p>Let us now see how the User model looks like.</p>
<pre class=""prettyprint lang-php"">&lt;?php
namespace App;
use App\Models\Post;

class User extends Authenticatable
{
    protected $table = 'users';
    use Notifiable;	
    protected $fillable = [
        'id',
        'fname',
        'lname',
        'email',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    public function post()
    {
        return $this-&gt;hasMany(Post::class);
    }
}
</pre>
<p>Notice that in the above relationship, we have inverse one to many relationship between Post and User. A user can have multiple posts and a post can be associated to one user.</p>
<h3>Routes for Feed</h3>
<p>Here is how our routes for posts looks like,</p>
<pre class=""prettyprint lang-php"">#Post archive
Route::get('posts/', ['as' =&gt; 'post.archive', 'uses' =&gt; 'PostController@archive']);
#Single
Route::get('post/{id}/{slug?}', ['as' =&gt; 'post.single', 'uses' =&gt; 'PostController@single']);
</pre>
<h3>Feed Configuration</h3>
<p>We would like to have some of the feed configurations inside a config file. Create a new file named <code>feed.php</code> inside <code>/config/</code> directory and add the following snippets.</p>
<pre class=""prettyprint lang-php"">
&lt;?php
return [
    'feed_title' =&gt; ""Stacktips"",
    'feed_description' =&gt; 'Your description',
    'feed_logo' =&gt; 'http://example.com/images/brand/logo.png',
    'use_cache' =&gt; FALSE,
    'cache_key' =&gt; 'laravel-feed-cache-key',
    'cache_duration' =&gt; 3600,
    'max_size' =&gt; 30,
];
</pre>
<p>In this example, we have configured to serve 30 items in our feed. There is no such rule on many items you should serve, but it is recommended to have your feed sleek. I believe between 20-30 is a good number. </p>
<h3>Laravel Routes for Feed</h3>
<p>Let us now define routes for RSS feeds. Here we will define two routes; one for accessing atom feed and other for rss.</p>
<pre class=""prettyprint lang-php"">
# Feeds
Route::get('feed/{type?}', ['as' =&gt; 'feed.atom', 'uses' =&gt; 'Feed\FeedsController@getFeed']);
</pre>
<p>I personally believe in simplicity, so let us define a method <code>getFeed()</code> in controller and abstract most of the business logic into a service class.</p>
<h3>Feed Controller</h3>
<pre class=""prettyprint lang-php"">
&lt;?php

namespace App\Http\Controllers\Web\Feed;

use App\Http\Controllers\Controller;
use App\Services\Feed\FeedBuilder;

class FeedsController extends Controller
{
    private $builder;

    public function __construct(FeedBuilder $builder)
    {
        $this-&gt;builder = $builder;
    }

    //We're making atom default type
    public function getFeed($type = ""atom"")
    {
        if ($type === ""rss"" || $type === ""atom"") {
            return $this-&gt;builder-&gt;render($type);
        }
        
        //If invalid feed requested, redirect home
        return redirect()-&gt;home();
    }
}
</pre>
<p>Notice that, </p>
<ul>
<li>The feed route defines an optional parameter <code>type</code>. This is used to define what type of feed user want to access.</li>
<li>Currently we will support only RSS and Atom, and make Atom the default choice.</li>
<li>If user pass any invalid value for feed type, instead of showing an error page, we will rather redirect to home page.</li>
</ul>
<h3>FeedBuilder Service</h3>
<p>The next part is the real fun is. Here we make use of roumen/feed library APIs to serve the latest content in the feed.</p>
<h3>Feed Controller</h3>
<pre class=""prettyprint lang-php"">&lt;?php
namespace App\Services\Feed;

use Illuminate\Support\Facades\App;
use App\Models\Post;

class FeedBuilder
{
    private $config;

    public function __construct()
    {
        $this-&gt;config = config()-&gt;get('feed');
    }

    public function render($type)
    {
        $feed = App::make(""feed"");		
        if ($this-&gt;config['use_cache']) {
            $feed-&gt;setCache($this-&gt;config['cache_duration'], $this-&gt;config['cache_key']);
        }

        if (!$feed-&gt;isCached()) {
            $posts = $this-&gt;getFeedData();
            $feed-&gt;title = $this-&gt;config['feed_title'];
            $feed-&gt;description = $this-&gt;config['feed_description'];
            $feed-&gt;logo = $this-&gt;config['feed_logo'];
            $feed-&gt;link = url('feed');
            $feed-&gt;setDateFormat('datetime');
            $feed-&gt;lang = 'en';
            $feed-&gt;setShortening(true);
            $feed-&gt;setTextLimit(250); 

            if (!empty($posts)) {
                $feed-&gt;pubdate = $posts[0]-&gt;created_at;
                foreach ($posts as $post) {
                    $link = route('post.single', [""id"" =&gt; $post-&gt;id, ""slug"" =&gt; $post-&gt;slug]);

                    $author = """";
                    if(!empty($post-&gt;user)){
                        $author = $post-&gt;user-&gt;name;
                    }
                    // set item's title, author, url, pubdate, description, content, enclosure (optional)*
                    $feed-&gt;add($post-&gt;title, $author, $link, $post-&gt;created_at, $post-&gt;pitch, $post-&gt;about);
                }
            }
        }

        return $feed-&gt;render($type);
    }

    /**
     * Creating rss feed with our most recent posts. 
     * The size of the feed is defined in feed.php config.
     *
     * @return mixed
     */
    private function getFeedData()
    {
        $maxSize = $this-&gt;config['max_size'];
        $posts = Post::paginate($maxSize)-&gt;with['user'];
        return $posts;
    }
}
</pre>
<p>Notice that, if you have multiple feeds for different contents then, you must have to have different cache keys. </p>
<p>Now visit any of the following URL and test if your feeds are working.</p>
<p>http://localhost:8080/feed<br/>
http://localhost:8080/feed/atom<br/>
http://localhost:8080/feed/rss</p>",0,"standard","post"
"Introduction to Laravel PHP Framework Features and Version History","intro-to-laravel-php-framework-and-features","Welcome to Laravel Starter Guide. This tutorial series is designed to provide you with all the information you&hellip;","LIVE","<p>Welcome to Laravel Starter Guide. This tutorial series is designed to provide you with all the information you need to get started with building a web application using Laravel PHP framework. In this article, you will learn What is Laravel? And why we need to use Laravel framework? and a brief introduction to Laravel version releases.<br/>

<h2><span id=""1_Introduction_to_Laravel_PHP"">1. Introduction to Laravel PHP</span></h2>
<p>Laravel is free, open-source and one of the more popular PHP web framework based on the model–view–controller (MVC) architectural pattern. It is created by Taylor Otwell, intended to reduce the cost of initial development and improve quality of your code by defining industry standard design practices. Using Laravel, you can save hours of development time and reduce thousands of lines of code compared raw PHP.</p>
<p>Since its first release on June 2011, Laravel is has come a long way as the PHP language is evolving. The current Laravel framework version is 5.4.</p>
<h2><span id=""2_Why_use_a_framework_at_all"">2. Why use a framework at all?</span></h2>
<p>PHP is one of the most popular programming languages, powered over 82% of websites around the world. The recent PHP 7 release made this server-side programming language better and more stable than ever. It is used by major players like Facebook, WordPress, Flicker, etc.</p>
<blockquote><p>PHP is used by 82.7% of all the websites whose server-side programming language we know.</p>
<p style=""text-align: right;"">~ W3techs.com</p>
</blockquote>
<p>A framework is not necessary to develop an application in PHP language. The question is, why to use a framework at all? A few benefits of using a framework include:</p>
<div class=""fancy-list"">
<ul>
<li>A framework makes development faster. You just need to focus on your development without having to worry about the some of the key fundamentals.</li>
<li>Most of the PHP frameworks comes handy with an ORM (Object-relational mapping). That means you don’t have to write complex queries for performing CRUD (Create, Read, Update, and Delete) operations.</li>
<li>Frameworks brings industry-standard architectural patterns such as MVC to ensure rapid development and helps to write maintainable code</li>
<li>Frameworks makes your application more scalable</li>
<li>Frameworks are updated constantly with enhancements and patches to protect your site from security threats</li>
<li>Framework helps to organize and manage resources better</li>
<li>Frameworks with large user bases are likely more stable</li>
</ul>
</div>
<p>The above benefits give enough reasons to choose a framework rather than using raw PHP to create your web application. CodeIgniter, Symfony, Laravel, and Yii are some of the popular PHP frameworks available in the market. In this tutorial series, we have chosen Laravel as the framework of our choice. Rest of the tutorial we discuss only Laravel.</p>
<h2><span id=""3_What_is_Composer"">3. What is Composer?</span></h2>
<p>Composer(https://getcomposer.org/) is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.<br/>
Using composer, you can include third party ready-to-use packages and libraries in your Laravel project and manage them all in one place using <code>composer.json</code> file.</p>
<p>The <code>composer.json</code> file is a plane JSON file placed under the project root directory, which defines the metadata for all project package dependencies.</p>
<p>Laravel is packaged with out of the box dependency management Composer and Packagist. Using composer, you can include third party ready-to-use packages and libraries in your Laravel project and manage them all in one place.</p>
<h2><span id=""4_Laravel_Features"">4. Laravel Features</span></h2>
<p>Laravel PHP framework is powered with many out of the box features including view templating, built in authentication, routing, database access, file management, caching, etc. Let us review some of the major features supported by Laravel:</p>
<h4><span id=""41_Database_Access"">4.1. Database Access</span></h4>
<p>Laravel also provides a cutting-edge suite of tools for interacting with databases. Database migrations enable you to easily design and modify a database in a platform-independent way. The migrations can then be run against any of the database types that Laravel supports (MySQL, PostgreSQL, MSSQL, and SQLite) and you won’t have any compatibility issues. Laravel’s Fluent Query Builder abstracts away the differences between different database types. Use it to build and execute robust queries.</p>
<p>Laravel’s ActiveRecord implementation is called Eloquent. Interacting with a database in an object-oriented way is the modern standard. With Eloquent, we can create, retrieve, update, and delete the database records without needing to write a single line of SQL. In addition to this, Eloquent provides powerful relationship management and it can even handle pagination automatically for you.</p>
<h4><span id=""42_Command_Line_Tool"">4.2. Command Line Tool</span></h4>
<p>Laravel also ships with a command-line interface tool called Artisan. With Artisan, a developer can interact with their application to trigger actions such as running database migrations, executing unit tests, and schedule a job. Another beauty of Artisan is that it is completely extensible so that you can add a new command to perform any type of functionality that you’d like.</p>
<h4><span id=""43_Routing"">4.3. Routing</span></h4>
<p>Laravel allows you to organize all your website URLs through routers. If you want to change the link of some website or API, we need to change it at one file and your website should work as expected.</p>
<h4><span id=""44_View_Template_Engine"">4.4. View Template Engine</span></h4>
<p>The Blade templating engine cleans up your views by providing aesthetically pleasing replacements for inline PHP and by including powerful new features.</p>
<h4><span id=""45_Job_Scheduling"">4.5. Job Scheduling</span></h4>
<p>Introduced in Laravel 5.0, is an addition to the Artisan that allows programmatic scheduling of periodically executed tasks. Internally, Scheduler relies on the CRON daemon to run a single Artisan job that, in turn, executes the configured tasks.</p>
<h4><span id=""46_File_System"">4.6. File System</span></h4>
<p>Introduced in Laravel 5.0, is a file system abstraction layer that allows local file systems and cloud-based storage services provided by Amazon S3 and Rackspace Cloud to be used transparently and in the same way.</p>
<h4><span id=""47_Subscription_Billing"">4.7. Subscription &amp; Billing</span></h4>
<p>If you want to develop a website like Newspaper subscription/billing website, Laravel is a perfect solution. Since, Laravel 4.2 it introduced, Cashier, that provides an interface for managing subscription billing services provided by Stripe, such as handling coupons and generating invoices, etc.</p>
<h4><span id=""47_Authentication_Socialite"">4.7. Authentication &amp; Socialite</span></h4>
<p>Laravel is bundled with basic authentication. Basic authentication can be configured to web pages and API easily with few steps. Since version 5.0, Laravel includes as an optional package, provides simplified mechanisms for authentication with different OAuth providers, including Facebook, Twitter, Google, GitHub, and Bitbucket.</p>
<h2><span id=""5_Laravel_Version_History"">5. Laravel Version History</span></h2>
<p>Laravel PHP framework is evolved with a series of frequent updates since its initial beta release on June 2011. Each version powered with new advanced features that make Laravel stand out as the strongest contender to its rival frameworks CodeIgniter, Symfony, Laravel, and Yii.</p>
<p>The following table lists all the major Laravel framework releases in the reverse chronological order.</p>
<table>
<tbody>
<col width=""25%""/>
<col width=""75%""/>
<tr>
<td><b>Version</b></td>
<td><b>Features</b></td>
</tr>
<tr>
<td>Laravel 5.4<br/>
<em>January 24, 2017</em></td>
<td>Added new features like Laravel Dusk, Laravel Mix, Blade Components and Slots, Markdown Emails, Automatic Facades, Route Improvements, Higher Order Messaging for Collections, and many others.</td>
</tr>
<tr>
<td>Laravel 5.3</td></tr></tbody></table></p>
<p><em>August 23, 2016</em>
<td>Improving developer speed by adding additional out of the box improvements for common tasks</td>

<tr>
<td>Laravel 5.1</td></tr></p>
<p><em>June 2015</em>
<td>Added long-term support (LTS)</td></p>
<p>Bug fixes and security patches.

<tr>
<td>Laravel 5</td></tr></p>
<p><em>February 2015</em>
<td>Added support for job Scheduler, Flysystem, assets packaging using Elixir and Socialite package.</td>

<tr>
<td>Laravel 4</td></tr></p>
<p><em>May 2013</em>
<td>A major release with complete rewrite of the Laravel framework. It includes support for message queue, database seeding, built-in support for sending different types of email.</td>

<tr>
<td>Laravel 3</td></tr></p>
<p><em>February 2012</em>
<td>Introduced Artisan command-line interface, built-in support for more database management systems, database migrations, support for handling events, and a packaging system called Bundles.</td>

<tr>
<td>Laravel 2</td></tr></p>
<p><em>September 2011</em>
<td>Fully MVC compliant using Controllers</td></p>
<p>View templating called Blade</p>
<p>Built-in support for the inversion of control

<tr>
<td>Laravel 1</td></tr></p>
<p><em>June 9, 2011</em>
<td>Initial release.</td></p>
<p>Support for authentication, localisation, models, views, sessions, routing and other mechanisms.



<h2><span id=""6_Summary"">6. Summary</span></h2>
<p>That’s an overview of Laravel, version history and rich features the framework is bundled with. The next article, we will see the software prerequisites and installation guide.</p>
</p>",0,"standard","post"
"Convert Speech to Text in Android Application","speech-to-text-in-android","Many of the cool Android features are remained untouched by app developers. For example, Android SDK has the&hellip;","LIVE","<p>Many of the cool Android features are remained untouched by app developers. For example, Android SDK has the capabilities to seamlessly integrate the user speech recognition services to turn speech to into text. Apps like Google Keep, Any.DO uses speech to text conversion feature quite creatively. In today’s world, big players like Google, Microsoft, and Apple are betting big on voice assistance software like Google voice command, Cortana, and Siri. This shows how serious and powerful the feature is.</p>
<p>Android natively provides converting <a href=""/articles/android-texttospeech-example"">Text to Speech</a> and Speech to Text feature, so why not to use it in our app! In this tutorial, we will show you how to integrate Android’s Speech to Text API in your Android app. This simple application will record the user’s voice, convert it into text and display on Android Screen.</p>
<p>As soon as a user say something, Android will recognize his/her voice and convert it into text. It will do it through <a href=""https://developer.android.com/reference/android/speech/RecognizerIntent.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><code>RecognizerIntent</code></a>. You do not require any internet connection to use the voice to text service. It will work in Offline mode.</p>
<p>Without much of a fuss, let us now proceed with the example.</p>
<h3>Pre-requisites:</h3>
<ul>
<li><a href=""/articles/android-studio-features"">Android Studio</a> IDE on your PC or Mac.</li>
<li>This App doesn’t support Emulator. So you need an Android Smartphone or Tablet.</li>
<li>Basic knowledge of Android app lifecycle, knowledge of building UI layouts.</li>
</ul>

<h3>Create New Android Project</h3>
<ol>
<li>Open Android Studio and create a new project <strong>Speech to Text</strong> and company domain application.example.com (We have used our own company domain i.e stacktips.com).</li>
<li>Click Next and choose Min SDK, we have kept the default value. Again Click Next and Choose <strong>Blank Activity</strong>.</li>
<li>Choose the Activity as <strong>MainActivity</strong> and click next.</li>
<li>Leave all other things as default and Click Finish.</li>
</ol>
<p>A new project will be created and gradle will resolve all the dependencies.</p>
<h3>Activity Layout</h3>
<p>Let us add an <a href=""/articles/android-button-example"">ImageButton</a> representing a mic, and a <a href=""/articles/android-textview-example"">TextView</a> to display the converted text in it. The TextView is wrapped inside a <a href=""/articles/android-scrollview-example"">ScrollView</a> for allowing longer scrollable content.</p>
<p><strong>activity_main.xml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/activity_main""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    tools:context=""com.stacktips.speechtotext.MainActivity""&gt;

    &lt;ScrollView
        android:layout_width=""wrap_content""
        android:layout_height=""match_parent""
        android:layout_above=""@+id/btnSpeakContainer""
        android:layout_alignParentTop=""true""
        android:layout_marginBottom=""20dp""
        android:padding=""20dp""&gt;

        &lt;TextView
            android:id=""@+id/voiceInput""
            android:layout_width=""match_parent""
            android:layout_height=""match_parent"" /&gt;
    &lt;/ScrollView&gt;

    &lt;LinearLayout
        android:id=""@+id/btnSpeakContainer""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_alignParentBottom=""true""
        android:background=""#f5f5f5""
        android:gravity=""center_horizontal""
        android:orientation=""vertical""
        android:padding=""20dp""&gt;

        &lt;ImageButton
            android:id=""@+id/btnSpeak""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:background=""@null""
            android:padding=""16dp""
            android:scaleType=""fitCenter""
            android:src=""@mipmap/ic_microphone_2"" /&gt;

        &lt;TextView
            android:id=""@+id/textView""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_below=""@id/btnSpeak""
            android:layout_margin=""10dp""
            android:text=""@string/hint"" /&gt;
    &lt;/LinearLayout&gt;
&lt;/RelativeLayout&gt;

</pre>
<h3>Inside Android Activity</h3>
<p>This is the main part of voice recognition app where we will user <code>RecognizerIntent</code> to convert speech into text. Add following code in MainActivity.java:</p>
<p><strong>MainActivity.java</strong></p>
<pre class=""prettyprint lang-java"">package com.stacktips.speechtotext;

import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.ImageButton;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {

    private static final int REQ_CODE_SPEECH_INPUT = 100;
    private TextView mVoiceInputTv;
    private ImageButton mSpeakBtn;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mVoiceInputTv = (TextView) findViewById(R.id.voiceInput);
        mSpeakBtn = (ImageButton) findViewById(R.id.btnSpeak);
        mSpeakBtn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                startVoiceInput();
            }
        });
    }

    private void startVoiceInput() {
        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());
        intent.putExtra(RecognizerIntent.EXTRA_PROMPT, ""Hello, How can I help you?"");
        try {
            startActivityForResult(intent, REQ_CODE_SPEECH_INPUT);
        } catch (ActivityNotFoundException a) {

        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        switch (requestCode) {
            case REQ_CODE_SPEECH_INPUT: {
                if (resultCode == RESULT_OK &amp;&amp; null != data) {
                    ArrayList&lt;String&gt; result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                    mVoiceInputTv.setText(result.get(0));
                }
                break;
            }

        }
    }
}

</pre>
<p>In the above code, we are triggering an Intent named <code>RecognizerIntent</code> which asks for speech input and then sends it through speech recognizer. It does it through <code>ACTION_RECOGNIZE_SPEECH</code>. If request code is <code>REQ_CODE_SPEECH_INPUT</code> then corresponding text is written in output screen.</p>
<p>Let us now build and run this example.</p>
<p>After you tap the Mic button, second screen will appear that will ask you to speak something. Now if you speak anything, it will be shown on screen.<br></p>",0,"standard","post"
"Google Acquires Fabric to Expand Footprint on App Analytics","google-acquires-fabric-to-expand-footprint-on-app-analytics","Fabric SDK is used over 2.5 billion active mobile installations, and Fabric&#8217;s Crashlytics and Answers kits are recognized as the #1 SDKs for app stability and analytics. 
","LIVE","<p><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-large wp-image-12583"" height=""470"" loading=""lazy"" sizes=""(max-width: 940px) 100vw, 940px"" src=""/media/uploads/articles/40/Google-Fabric-940x470.png"" srcset="""" width=""940""/></a></p>
<p>Twitter Fabric provides number of tools for getting deeper insight of the app. Fabric tool suite includes tools such as Crashlytics, Answers and MoPub to help developers build better apps, understand their users, monetize, and grow their business.</p>
<p>Since its first release in 2014, Fabric community has over 580 thousand registered mobile developers, and Fabric SDK is used over 2.5 billion active mobile installations. Crashlytics and Answers tool kits are recognized as the #1 SDKs for app stability and analytics.</p>
<p>Fabric is now acquired by Google and the team will join the Google’s Developer Products Group, working with the Firebase team.</p>
<blockquote><p>When we look at Fabric, we see it as a great opportunity to bring together two amazing developer platforms, to really have the best of breeds,” said Jason Titus, vice president of Google’s Developer Product Group.</p></blockquote>
<p>Google is batting big on Firebase to make it an unified platform that helps developers to build apps faster without having to worry about some of the underlying complexities. Now with the inclusion of Fabric, Firebase may ditch its own crash reporting tools and will adopt Fabric “Crashlytics” as main tool for reporting app crashes.</p>
<p>This acquisition however will not impact anything for the existing Fabric customers. But we believe, over the time, Google will unify the Fabric integration with Firebase SDK. This means developers do not have to integrate two different SDK’s to get Firebase and Fabric.</p>
<p>The company also mentioned that, the Digits will continue to be maintained by Twitter under its existing terms. For more details, you can visit Google’s official Firebase <a href=""https://firebase.googleblog.com/2017/01/FabricJoinsGoogle17.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">blog post</a>.</p>
",0,"standard","post"
"This Chrome Extension Brings Twitter’s Night Mode to the Desktop","this-chrome-extension-brings-twitters-night-mode-to-the-desktop","Twitter Web Night Mode is a handy must-have for those of you who indulge in late-night Twitter reading. 
","LIVE","<p>Twitter recently introduced much-anticipated ‘night mode’ feature to its official Android and iOS applications. Night mode applies darker hue mobile app screen, to make it easier to read the tweets on low light environment. This feature can be toggled on and off from the Twitter app settings option.</p>
<blockquote class=""twitter-tweet"" data-lang=""en"">
<p dir=""ltr"" lang=""en"">Now on Android! Turn on night mode to Tweet in the dark. ?<a href=""https://t.co/XVpmQeHdAk"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://t.co/XVpmQeHdAk</a> <a href=""https://t.co/vrIDEM22vO"" rel=""nofollow noopener noreferrer"" target=""_blank"">pic.twitter.com/vrIDEM22vO</a></p>
<p>— Twitter (@Twitter) <a href=""https://twitter.com/Twitter/status/757969656493649921"" rel=""nofollow noopener noreferrer"" target=""_blank"">July 26, 2016</a></p></blockquote>
<p><script async="""" charset=""utf-8"" src=""//platform.twitter.com/widgets.js""></script></p>
<p>Now, the Twitter Web – Night Mode, Chrome browser extension brings the same dark theme feature to the web. Please note that this is an unofficial chrome extension developed by tsriram.in.</p>
<p>When “Twitter Web Night Mode” extension was first released, the dark mode was working limited to timeline, profile page, and notifications screens. However, after several updates, now it works for almost all pages including direct messages, search, hashtag search pages etc.</p>
<p>Please note, the dark mode skin is working only for the twitter desktop website, it is still not working for the responsive mobile site. At least, not yet.</p>
<h2>How to use Twitter web night mode extension?</h2>
<p>You can install the extension in any desktop Chrome browser directly from the Chrome Web Store. Follow the simple steps to download and apply night mode.</p>
<div class=""fancy-list"">
<ul>
<li>Go to the Chrome Web Store. Search for Twitter Web Night Mod extension.</li>
<li>Click Add to Chrome.</li>
<li>Click Add to grant the extension access to your data and install the extension.</li>
<li>Once the extension is installed, you will see a little Twitter icon to the top right of the Chrome address bar.</li>
<li>Click on the button to switch the night mode on and click again to back to normal mode.</li>
</ul>
</div>
<p>Twitter Web Night Mode is a handy must-have for those of you who indulge in late-night Twitter reading.</p>
",0,"standard","post"
"Stacktips.com in 2016: A Year in Review","stacktips-com-in-2016-a-year-in-review","Happy New Year 2017! To those of you who’ve made 2016 special: thank you.
","LIVE","<p>Happy New Year 2017! We wish you and your family a very Happy New Year. May the year 2017 bring prosperity and cheers in your life!.</p>
<h3>2016 A Year in Review</h3>
<p>Thank you for your support in 2016, It has been a great year with highs and lows, but we are proud of what the Stacktips community has accomplished in the past year. We’re excited to share our stat and some fun facts about all of our work over the past year.</p>
<div class=""fancy-list"">
<ul>
<li>We hope we’ve helped our readers learning new things form our new tutorials, code snippets and tech news from industry. Over 5<span class=""s1"">.3 million readers were reading us last year on our website alone. </span></li>
<li>We have gained huge support on our social media networks. While we have crossed 14k likes on our <a href=""https://www.facebook.com/stacktips"" rel=""nofollow noopener noreferrer"" target=""_blank"">Facebook page</a>, our <a href=""https://twitter.com/stacktips"" rel=""nofollow noopener noreferrer"" target=""_blank"">Twitter handle</a> growth is very moderate with, only 1100 followers. We are sure, we could have done it better.</li>
<li>We have released our new <a href=""https://play.google.com/store/apps/details?id=com.stacktips.app&amp;hl=en"" rel=""nofollow noopener noreferrer"" target=""_blank"">Android App</a> last November. It is designed to provide fast, uncluttered and ad free reading experience. Since its first release, the download numbers and users engagement is very promising. We now, wish to design an iPhone app for Stacktips in 2017.</li>
<li>Here at Stacktips we say, 2016 was the year of development. We have developed Android app, redesigned site layout with our proprietary theme, we now we are getting ready to sell our first commercial Wordpress theme.</li>
</ul>
</div>
<p>Again, thanks to all of you for making us such a special community. We would love to see you continue your Stacktips Journey into 2017.</p>
",0,"standard","post"
"Should Pocket and Instapaper Worry about Android Chrome’s New Feature?","should-pocket-and-instapaper-worry-about-android-chromes-new-feature","Over the past few years the world of internet and mobile is revolutionized dramatically. Users today expect the&hellip;
","LIVE","<p>Over the past few years the world of internet and mobile is revolutionized dramatically. Users today expect the websites to load faster and accessible even when they are offline. Services such as Pocket and Instapaper answers that problem. They allow users to bookmark a webpage and save the contents on your smartphone and tablets, so you can read it later.</p>
<p>Now, the big daddy Google has joined the club. As an experimental feature, Google released a new feature to download website for offline use for Android Chrome users. This feature is available from Android Chrome version 55 and above. If you have installed the older version of chrome, you can update it from Google Play.</p>
<h2>How to Save Webpages in Android Chrome?</h2>
<ul>
<li>Update Android Chrome browser to at least version 55.</li>
<li>Open the webpage you want to save</li>
<li>After the page is loaded, tap on the options menu (flanked by 3 dots on the top right) and click download button to save page for offline viewing.</li>
</ul>
<p>As the download completes, the website will be marked as available offline as depicted in the above picture. You will be able to download HTML5 videos or audio this way as long as the website has no custom controls or it is a live stream.</p>
<h2 class=""entry-title"">Should Pocket and Instapaper Worry?</h2>
<p>Pocket and Instapaper are the only two serious “Read it later” services available in market. They allow you to save articles and videos from desktop browsers or mobile apps. Once the link is saved, it automatically syncs the content to your phone, tablet, and desktop applications. Both the apps brings tons of distinct feature that makes them unique in market. Along with bookmarking webpage, it also offers smarter way to organize, manage and search your saved links.</p>
<p>Here are of some of the reasons why you should consider using Read it later services over Android Chrome “save for later” feature.</p>
<div class=""fancy-list"">
<ul>
<li>Google Android downloads the entire webpage and render as is for reading offline. However, the read it later services, filter only the website content and makes it more readable by removing ads and other distractive website widgets.</li>
<li>Both Pocket and Instapaper offers smart way of organizing the bookmarked pages into simple lists and allows options to manage similar content into different tags/directories.</li>
<li>You can search contents by keywords</li>
<li>Pocket and Instapaper mobile apps uses native devices features such as text to speech, reading control, night mode, etc.</li>
</ul>
</div>
<p class=""wp-alert"">Also read, <a href=""/articles/mobile-apps-to-bookmark-webpage-and-read-it-later"">Pocket and Instapaper head-to-head comparison</a>.</p>
<p>Currently Google Chrome for Android doesn’t allow any of the above advance features, this means when when your list grows it is difficult to manage and find the content you need. If you’re a regular reader like me, you probably better of being with apps like Pocket or Instapaper, but for those who like to keep installed apps to a minimum, there’s already a way to save webpages for offline viewing built right in to your Android devices.</p>
<p>However, we must understand that, it is just a initial experimental release. We must wait for the days to come and hope that Google gives me enough reason to stick to the Chrome ecosystem.</p>
",0,"standard","post"
"How to use custom CSS in Redux framework option panel","how-to-use-custom-css-in-redux-framework-option-panel","Redux WordPress framework is awesome in its way. It powers developer with an awesome options panel, that you&hellip;
","LIVE","<p>Redux WordPress framework is awesome in its way. It powers developer with an awesome options panel, that you can use for developing themes or plugins without having to worry about complexities of WordPress settings API.</p>
<p>I absolutely love the way the option panel is organized into tabs and sections. However, if you feel you need more customization, you can include your own CSS and customize the option panel look that suits you.</p>
<p>Add the following code snippet to your redux framework <code>options-init.php</code> file to add your custom css to Redux framework options panel.</p>
<pre class=""prettyprint lang-java"">// This is your option name where all the Redux data is stored.
$opt_name = 'my_theme_options';
//...

// Append custom css to redux framework
if (!function_exists('my_theme_redux_custom_css')):
    function my_theme_redux_custom_css()
    {
        wp_register_style('my-redux-custom-css',
            CSS_URI . '/admin/theme-options-custom.css', array('redux-admin-css'),
            THEME_VERSION, 'all');
        wp_enqueue_style('my-redux-custom-css');
    }
endif;
add_action('redux/page/' . $opt_name . '/enqueue', 'my_theme_redux_custom_css');
</pre>
",0,"standard","post"
"How to Add Font Awesome Icons to Redux Options Panel","how-to-add-font-awesome-icons-to-redux-options-panel","Redux WordPress framework includes Elusive Icons by default for your options panel icon needs. Elusive Icons are very limited&hellip;
","LIVE","<p>Redux WordPress framework includes Elusive Icons by default for your options panel icon needs. Elusive Icons are very limited in number. If you not happy with using Elusive Icons or, just want to include another web font (icon) framework such as Font Awesome, you can do that using the following code snippet.</p>
<p>Add the following code snippet to your redux framework <code>options-init.php</code> file. </p>
<pre class=""prettyprint lang-java"">
// This is your option name where all the Redux data is stored.
$opt_name = 'my_theme_options';
//...

function add_font_awesome_icons() {
    // Uncomment this to remove elusive icon from the panel completely
    //wp_deregister_style( 'redux-elusive-icon' );
    //wp_deregister_style( 'redux-elusive-icon-ie7' );
 
    wp_register_style('redux-font-awesome', 
		'//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css',
        array(), time(), 'all'
    );
    wp_enqueue_style( 'redux-font-awesome' );
}

add_action('redux/page/' . $opt_name . '/enqueue', 'add_font_awesome_icons');
</pre>
",0,"standard","post"
"How to Create a New Template in Google Docs","how-to-create-a-new-template-in-google-docs","Google Docs is an shiney example cloud computing software that allow user to create, edit, and store documents&hellip;
","LIVE","<p>Google Docs is an shiney example cloud computing software that allow user to create, edit, and store documents on the internet for free of cost. It is an web based application and hence, you do not require to download or install any software on your computer in order to user it.</p>
<p>You can create a document on the fly by simply login to your Google mail account. All the files created are stored on the cloud server and can be you accessed whenever you need them from the Internet. Documents can be shared among other users, so they can view or edit in real time.</p>
<p>Since it’s initial release on 2007, Google Docs is now used by millions of users on daily basis. Specially it is popular among bloggers, journalist and student community.</p>
<p>Either you’re creating a project report or a piece of white paper, you often need to prepare multiple documents with similar look and feel. And it is very monotonous task. Instead of starting a new document from scratch, you can save tons of time by using templates.</p>
<p>For example, a company defines its own template with organization’s branding and share the template among all co-workers. Other  employees can use that template and produce professional document with unified look.</p>
<p>Please note, as of today Google Doc templates are available for english language only.</p>
<p>This tutorial will show you how to create a new document template in Google Docs.</p>
<h2>Saving Template from Template Gallery</h2>
<p>You can either create a new template from your existing document style or save an existing template from the Google Docs template gallery. To save template from template gallery:</p>
<ul>
<li>First, login to your google account and open Google Docs. Notice that the top section of the page with recommendation to some of the templates.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""create-google-docs-template"" class=""aligncenter size-medium wp-image-12220"" height=""328"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/47/Create-Google-Docs-Template-620x328.png"" srcset="""" width=""620""/></a></p>
<ul>
<li>Click on the “Template Gallery” button to the top right corner. This will take you to template gallery page.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""google-docs-template-gallery"" class=""aligncenter size-medium wp-image-12217"" height=""350"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/47/Google-Docs-Template-Gallery-620x350.png"" srcset="""" width=""620""/></a></p>
<ul>
<li>Click on the template of your selection. This will automatically create a copy in “My Drive.” You can now edit the document and to necessary changes as you like.</li>
</ul>
<h2>Saving Template from Existing Document</h2>
<p>To create an document template from existing document:</p>
<ul>
<li>First, login to your google account if not logged already and open Google Docs.</li>
<li>Click on the “Template Gallery” button to open template gallery page.<br/>
Click on your user name tab. In my case it is “STACKTIPS”</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""upload-template-in-google-docs"" class=""aligncenter size-medium wp-image-12218"" height=""361"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/47/Upload-Template-in-Google-Docs-620x361.png"" srcset="""" width=""620""/></a></p>
<ul>
<li>Now, click submit template. This allows you to browse through your Google Drive and select the existing document.</li>
<li>Browse through the Google Drive directories and Select your template source document. Enter template title and optionally select the category.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""save-template-in-google-docs"" class=""aligncenter size-medium wp-image-12219"" height=""392"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/47/Save-Template-in-Google-Docs-620x392.png"" srcset="""" width=""620""/></a></p>
<ul>
<li>Click on submit. This will automatically create a copy in “My Drive.”</li>
</ul>
",0,"standard","post"
"How to Programmatically Get Application Version in Android?","how-to-programmatically-get-application-version-in-android","Use the following code snippet to, get Android application version from code. The PackageInfo class provides overall information&hellip;
","LIVE","<p>Use the following code snippet to, get Android application version from code. The <code>PackageInfo</code> class provides overall information about the contents of a package. This corresponds to all of the information collected from <code>AndroidManifest.xml</code>.</p>
<pre class=""prettyprint lang-java"">public String getAppVersion() {
        PackageInfo pInfo;
        try {
            pInfo = MyApp.getInstance().getPackageManager().getPackageInfo(MyApp.getInstance().getPackageName(), 0);
            return new StringBuilder(""v"").append(pInfo.versionName)
                    .append("" ("").append(pInfo.versionCode).append("")"").toString();
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        return ""1.0.0"";
    }
</pre>
",0,"standard","post"
"How To Embed a Map into Your Website Using Google Maps","how-to-embed-a-map-into-your-website-using-google-maps","Google Maps is a useful mapping tool that offers real-time location and navigation information. As a website administrator,&hellip;
","LIVE","<p>Google Maps is a useful mapping tool that offers real-time location and navigation information. As a website administrator, you can take advantage of this service and embed embed a map, Street View image, driving directions, or location search into your website.</p>
<p>The most common use of Google Maps on website is on contact page or to display locations on branch. Image you are running a small hotel business or a laundry service, you can embed Google map in your website to help visitors locating you easily.</p>
<p>This tutorial will show you how to embed a map into your website.</p>
<h2>Embed Google Map into Your Website</h2>
<ul>
<li>At first, open Google Maps, search and locate the place or area that you would like to display on your website. In the search result page you will notice the details of the location along with option to Save, Direction and <strong>Share</strong> button.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""embed-google-map-on-website"" class=""aligncenter size-medium wp-image-12187"" height=""379"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/49/Embed-Google-Map-on-Website-620x379.png"" srcset="""" width=""620""/></a></p>
<ul>
<li>Click on the <strong>Share</strong> button. At the top of the box a pops up window will appear. Choose the <strong>Embed map</strong> tab.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""embed-google-map-on-website-02"" class=""aligncenter size-medium wp-image-12186"" height=""429"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/49/Embed-Google-Map-on-Website-02-620x429.png"" srcset="""" width=""620""/></a></p>
<ul>
<li>Select the size that you want, then copy and paste the HTML embed code into the source code of your website:</li>
</ul>
<pre>&lt;iframe src=""https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2483.019572300999!2d-0.12256554865968466!3d51.51285691802522!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x487604cafd44dd8f%3A0xb27771d269b4895!2sTheatre+Royal%2C+Drury+Lane!5e0!3m2!1sen!2suk!4v1480610900782"" 
width=""600"" height=""450"" frameborder=""0"" style=""border:0"" allowfullscreen&gt;&lt;/iframe&gt;
</pre>
<ul>
<li>The embedded map should appear on your website once you save your changes. The output of the above embed code is as follow.</li>
</ul>
<p><iframe allowfullscreen=""allowfullscreen"" frameborder=""0"" height=""450"" loading=""lazy"" src=""https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2483.019572300999!2d-0.12256554865968466!3d51.51285691802522!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x487604cafd44dd8f%3A0xb27771d269b4895!2sTheatre+Royal%2C+Drury+Lane!5e0!3m2!1sen!2suk!4v1480610900782"" style=""border: 0;"" width=""600""></iframe></p>
",0,"standard","post"
"How to Download Netflix Videos for Offline Viewing","how-to-download-netflix-videos-for-offline-viewing","Netflix finally lets you download shows and movies to watch offline.
","LIVE","<p>With the holiday season in full swing, Netflix started rolling out new features to download your favourite programs and movies for offline viewing. Offline videos is arguably one of the the most demanded feature the Netflix users were long awaited for.</p>
<p>Offline video viewing was initially introduced by Netflix competitor product Amazon Prime Video. After the release of offline video feature, Amazon reportedly received 20% higher subscription.</p>
<p>To take advantage of the offline viewing feature on your Android or Apple devices, you need to have an active Netflix Service subscription and updated Netflix Android or iOS apps. Once you have the new version, you can download TV series, movies, including Netflix’s original contents and watch on your free time even without internet.</p>
<h3>What is Netflix?</h3>
<p>Netflix is a subscription-based online video streaming service allows you to watch movies, television shows and special programs whenever you want. Once you signup with Netflix and subscribe any of the monthly pack from Basic, Standard or Premium, you can watch your favorite programs on demand on desktop, mobile, tablet and Smart TV’s.</p>
<h3>How to Download Netflix Videos</h3>
<p>To download Netflix shows and movies to watch offline, you’ll need to first have a compatible phone or tablet running iOS 8 or later or Android 4.4.2 or later, and then ensure that you have the latest version of Netflix app installed. You you have installed the older version of the app, visit app store to update to the latest version.</p>
<p>Then, you’ll need to sign in to your Netflix account and navigate to the <strong>Available for Download</strong> section in the menu located on your device top left corner. There, you’ll find a collection of movies and shows available to download including Netflix Originals.</p>
<p><a href=""http://stacktips.com"" target=""_self""><br/>
</a> <a href=""http://stacktips.com"" target=""_self""><img alt=""Browse Saved Netfix Videos"" class=""aligncenter size-full wp-image-12178"" height=""448"" loading=""lazy"" src=""/media/uploads/articles/50/Browse-Netflix-Videos-Watch-Offline.jpg"" srcset="""" width=""539""/></a></p>
<p>Once you select your favourite video or show for download, select it and then tap the <strong>Download</strong> icon next to the episode you’re after. You will then see a blue progress bar along the bottom of the app. Once downloaded, you’ll see a blue icon next to that episode.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Download Netflix Videos"" class=""aligncenter size-full wp-image-12179"" height=""448"" loading=""lazy"" src=""/media/uploads/articles/50/Download-Netflix-Videos.jpg"" srcset="""" width=""539""/></a></p>
<h3>Watch Saved Videos</h3>
<p>You can find your downloaded shows by navigating to the menu and tapping <strong>My Downloads</strong>. Simply click to watch the program.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Browse Saved Netfix Videos"" class=""aligncenter size-full wp-image-12177"" height=""448"" loading=""lazy"" src=""/media/uploads/articles/50/Browse-Saved-Netfix-Videos.jpg"" srcset="""" width=""539""/></a></p>
",0,"standard","post"
"How to Make Video Calls on WhatsApp","how-to-make-video-calls-on-whatsapp","After a long wait, WhatsApp has finally rolled out video calling feature to all its users. Since the&hellip;
","LIVE","<p>After a long wait, WhatsApp has finally rolled out video calling feature to all its users. Since the update more than one billion users can make video calls across Android, iPhone, and Windows Phone devices.</p>
<p>WhatsApp Messenger is an internationally popular messenger app. This application’s main use is to chat via instant messaging with one other person, or with multiple people. The app also makes it possible for users make VoIP calls, sharing of pictures, music tracks of any format, and even videos.</p>
<p>Wondering how to make video calls on WhatsApp? This simple guide will help you.</p>
<div class=""fancy-list"">
<h3>How to Make Video Calls on WhatsApp</h3>
<ul>
<li>Update your app to the latest version.</li>
<li>Launch WhatsApp and tap the name of the contact with whom you want to initiate a video call. Tap the video button on the screen title.</li>
<li>Once this is done, the app will provide the option to either make a video call or a voice call.</li>
<li>Select the video call option and get talking.</li>
</ul>
</div>
<p>It is worth noting that, the contact you are video calling must have the latest version of WhatsApp installed on their smartphone, otherwise the call won’t be placed.</p>
<p>I have tried making several calls to my family living in India and quite satisfied with the video and audio call quality. Specially if your over Wi-Fi it is flawless and very clear, but it did go down a bit when using mobile data. To conclude the video calling feature in WhatsApp will definitely make the rivalry among similar apps like Skype and fiercer.</p>
<p>What do you think of WhatsApp video calling? Let us know in the comments.</p>
",0,"standard","post"
"Mobile Apps to Bookmark Webpage and Read it Later","mobile-apps-to-bookmark-webpage-and-read-it-later","For bookmarking and offline reading, you only have two serious options: Pocket and Instapaper. In this article we&#8217;ll do head-to-head comparison between  Pocket and Instapaper.
","LIVE","<p>When you are at work or while surfing internet, you may come across some cool stuffs; a piece of interesting news or an article you want to read. Or perhaps you get an email from a friend recommending you to read an interesting article. You would like to bookmark the link to read on your free time rather than distracted from current activity.</p>
<p>Traditionally, people used browser for bookmarking links and access the links from desktop or mobile browsers. All modern browsers including Internet Explorer, Chrome, Safari, Firefox and Opera support this feature. Those strategies still work, but they aren’t pretty. You require internet access to open the bookmarked link and the list is not not so well organized. New in the era of mobile you deserve better.</p>
<p>For bookmarking and offline reading, you only have two serious options: Pocket and Instapaper. In this article we’ll outline the similarities between two services and compare them, head-to-head to see features exclusive to each of them.</p>
<h2>Pocket</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""pocket-read-it-later-app"" class=""aligncenter size-medium wp-image-12132"" height=""355"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/52/pocket-read-it-later-app-620x355.jpg"" srcset="""" width=""620""/></a></p>
<p>Formerly called as “Read It Later” and in 2012 it was renamed to Pocket. Pocket allows you to bookmark content from desktop browser, mobile apps or even directly from popular third party apps (selected apps only). Once the link is saved, it automatically syncs to your phone, tablet, or computer so you can view it at any time, even without an Internet connection. Once you finished reading, you can archive the article to remove it from your main list or mark star to add it to your Favorites.</p>
<p>The saved links in Pocket are organized in a list. You can also customize the list display to an grid view or search content by keyword. Pocket’s customizable tags feature gives you granular control over how your content is organized.</p>
<p>Article full view mode is optimized for distraction-free reading. It stripe out the advertisements, sidebar or any other extra website widgets, so you focus only on the content. You can adjust the reading mode that best suit to your eye by changing the background color, font style, size or night mode.</p>
<h3>Supported Platforms</h3>
<ul>
<li>Pocket’s mobile app are available to download for free on your iPhone, iPad, Android, Windows, Blackberry and Amazon devices.</li>
<li>Standalone desktop apps are available for Windows and Mac.</li>
<li>Browser extensions are available for Firefox, Chrome, Safari, Microsoft Edge and Opera.</li>
</ul>
<h3>Pricing – Freemium</h3>
<p>Pocket’s basic service is free to use, but it also offers premium plan which comes for $4.99 a month or with a discounted price of $44.99 if you buy an yearly subscription.</p>
<p>The Pocket premium unlocks the additional features such as permanent library, advance full-text search, tag suggestions, advance customization for improved reading experience and sponsored ad free experience.</p>
<p>Personally, I feel the free version of Pocket is good enough as long as you’re not bothered to see some sponsored post from Pocket. With free version, you can still take advantage of the same core features.</p>
<h2>Instapaper</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""instapaper-read-it-later-app"" class=""aligncenter size-medium wp-image-12133"" height=""349"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/52/instapaper-read-it-later-app-620x349.jpg"" srcset="""" width=""620""/></a></p>
<p>Instapaper is yet another service that allows you to discover, bookmark, and experience interesting web content. This is one of the most popular service and gives a stiff competition to Pocket.</p>
<p>Instapaper allows you to save articles, videos, and other pages and sync them to across web and mobile devices. Like Pocket, Instapaper allows you to save links directly from mobile apps, using browser extension or even directly from third party apps (selected apps only).</p>
<p>You can organize articles in folders and move to archive when you’re finished reading. The article details view allows you to adjust font size, style and background colors including night reading mode. On mobile devices you can take advantages of Text-to-Speech, so you can just listen.</p>
<h3>Pricing – FREE</h3>
<p>Instapaper is acquired by Pinterest in August 2016. And the good news is, after the acquisition, in November 2016 the company declared making Instapaper Premium available to all Instapaper users, free of charge.</p>
<h3>Supported Platforms</h3>
<ul>
<li>Instapaper Android, iPhone, iPad and Kindle apps are available to download for free from respective app stores.</li>
<li>The official desktop browser extensions are available only for Chrome and Safari. Although there are no official Firefox extensions available, there are couple of unofficial ones that serves the purpose.</li>
</ul>
<h2>Pocket &amp; Instapaper Head-to-Head</h2>
<p>Both Pocket and Instapaper have the same basic feature to bookmark, sync and makes the content available to read them anywhere, with or without an Internet connection. Even so, Pocket and Instapaper differ pretty dramatically. Here are a few of the features that are exclusive to each service:</p>
<div class=""fancy-list"">
<h3>Pocket</h3>
<ul>
<li>Uses tagging system to organize articles</li>
<li>Built-in social network and allows quick direct sharing with other Pocket users.</li>
<li>Instant import of URLs from your clipboard in the mobile apps</li>
<li>Desktop app for Mac and Windows user</li>
<li>Free and premium service for $4.99 month.</li>
</ul>
</div>
<div class=""fancy-list"">
<h3>Instapaper</h3>
<ul>
<li>Articles are organized into folders</li>
<li>Allow your to follow other users and see their recommended articles</li>
<li>Text highlighting and In-line article commenting</li>
<li>Tons of sorting options to find articles quickly</li>
<li>Free</li>
</ul>
</div>
<h2>Final Verdict</h2>
<p>Overall, as an individual and as a blogger, am using Pocket premium for quite some time and I am very happy about this. This is helping me to save the best of the web and read during commute. Specially in London underground lines.</p>
<p>Instapaper simple and equally powerful service. And now that it is free, I think in recent months I will switch back from Pocket.</p>
",0,"standard","post"
"How To Delete Your Netflix Account History","how-to-delete-your-netflix-history","Netflix is a subscription-based online video streaming service allows you to watch movies, television shows and special programs whenever you want. This tutorial will teach you how to remove your Netfix history.
","LIVE","<p>Netflix is a subscription-based online video streaming service allows you to watch movies, television shows and special programs whenever you want. Once you signup with Netflix and subscribe any of the monthly pack from Basic, Standard or Premium, you can watch your favorite programs on demand on desktop, mobile, tablet and Smart TV’s.</p>
<p>Whenever you watch an program, it’s information is stored in your Netflix account history. Based on your history, Netflix suggest similar programs and shows that you may be interested on. And even you can visit history and re-watch the program again.</p>
<p>If the thought of having programs that you’ve previously watched stored by Netflix sounds embarrassing or simply inconvenient for you, you should find comfort in the fact that you can erase your history. This tutorial will teach you how to do so.</p>
<h2>How To Clear Your Netflix Viewing History</h2>
<ul>
<li>First, log in to your Netflix account. Navigate to top-right corner menu and hover over the downward facing arrow beside your username.</li>
<li>Go to <strong>Your Account</strong> &gt; Click <strong>Viewing Activity</strong> under the My Profile section.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""netfix-account-history"" class=""aligncenter size-medium wp-image-12122"" height=""260"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/53/Netfix-account-history-1-620x260.png"" srcset="""" width=""620""/></a></p>
<ul>
<li>Click the <strong>Delete</strong> button (X) located next to the program that you would like to remove from your history.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""netfix-account-acctivity"" class=""aligncenter size-medium wp-image-12114"" height=""222"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/53/Netfix-account-acctivity-620x222.png"" srcset="""" width=""620""/></a></p>
<ul>
<li>For programs with more then one episode, you will be given the option to remove all traces of an entire series from your history by clicking Remove series?.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""netfix-account-acctivity2"" class=""aligncenter size-medium wp-image-12115"" height=""216"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/53/Netfix-account-acctivity2-620x216.png"" srcset="""" width=""620""/></a></p>
",0,"standard","post"
"Perforce Announces Acquisition of ALM Provider Seapine Software","perforce-announces-acquisition-of-alm-provider-seapine-software","To expand the portfolio of productivity and collaboration tools, Perforce Software, a leader in version control and source code management, today announced its acquisition of Seapine Software, a leading provider of application lifecycle management.
","LIVE","<p><b>Minneapolis, MN <span class=""aBn"" data-term=""goog_620645752"" tabindex=""0""><span class=""aQJ"">– </span></span></b><span class=""aBn"" data-term=""goog_620645752"" tabindex=""0""><span class=""aQJ"">To expand its portfolio in p</span></span>roductivity and collaboration tools space, Perforce Software, a leader in version control and source code management, today announced its acquisition of Seapine Software, a leading provider of application lifecycle management (ALM) solutions, based in Mason, Ohio.</p>
<p>This acquisition expands the Perforce portfolio of developer and designer tools beyond enterprise class version management and code review, and provides customers with additional capabilities across the development pipeline. Seapine’s ALM solution accelerates development and delivery cycles through more efficient management of the product development process.</p>
<p>“The Seapine suite of products strongly complements the Perforce portfolio and both companies address many of the same enterprise product development needs including traceability, auditability, and predictability of the development process for high value assets,” says Janet Dryer, Perforce CEO. “The depth and experience the Seapine team has in ALM and building efficiency and quality into the development pipeline is a welcome addition to the Perforce team.”</p>
<p>Seapine’s ALM solutions help companies manage the process of developing high-quality complex products—often in regulated industries, such as life sciences, automotive and financial services.  Seapine’s solution consists of scalable team-based tools for superior requirements management, issue tracking, software configuration management, automated software testing, load testing, and test case management. When used together, these tools provide end-to-end traceability of artifacts, resulting in increased product quality and development predictability.</p>
<p>“We found the technology, teams, and application development expertise at these two companies to be a great fit,” says Rick Riccetti, CEO, Seapine Software. “Our leadership team is excited about the opportunity to expand the capabilities and the reach of the Seapine portfolio with the resources and support of an organization like Perforce.”</p>
<h2>About Perforce</h2>
<p>Enterprises across the globe rely on Perforce to build and deliver complex digital products faster and with higher quality. Perforce is best known for its highly scalable version management and collaboration platform that securely manages change across all digital content – source code, art files, video files, images, libraries – while supporting the developer and build tools your teams need to be productive, such as Git, Visual Studio, Jenkins, Adobe, Maya and many others.</p>
<p>Perforce also offers complete project lifecycle management tools to accelerate a project’s delivery cycle by linking the requirements, test plans, source code, and helpdesk in an integrated platform. Perforce is trusted by the world’s most innovative brands, including NVIDIA, Pixar, Scania, EA, Ubisoft, and VMware. The company has offices in the US, the United Kingdom, Germany, Canada and Australia, and sales partners around the globe. For more information, please visit <a href=""http://www.perforce.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.perforce.com</a></p>
<div class=""wp-alert"">PS: Information contained on this page is provided by an independent third-party content provider. We make no warranties or representations in connection therewith. If you are affiliated with this page and would like it removed please contact <a href=""mailto:editor@stacktips.com"">editor@stacktips.com</a>.</div>
",0,"standard","post"
"WordPress.com vs WordPress.org: Which One to Choose?","wordpress-com-vs-wordpress-org-which-one-to-choose","WordPress is an open source CMS (content management system) website development framework written in PHP. This is probably&hellip;
","LIVE","<p>WordPress is an open source CMS (content management system) website development framework written in PHP. This is probably the easiest, quickest way to develop a shiny new website by keeping the cost low. Either you are a developer or a non-geek, you can quickly build a website and give a fresh look by choosing the theme and plugin of your choice.</p>
<p>Broadly WordPress provides two choices for publishing your website: the fully hosted (WordPress.com), or the self-hosted version (WordPress.org).</p>
<h2>WordPress.com</h2>
<ul>
<li>WordPress.com is the commercial version of WordPress runs on Open Source WordPress platform. It is created by <a href=""http://automattic.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Automattic Inc.</a></li>
<li>WordPress.com helps you to host your own website for free. However, all the free WordPress.com websites will be hosted as a subdomain of WordPress.com domain.</li>
<li>You can upgrade your website to a custom domain by paying only $2.99 per month for the starter plan or $24.99 for a business plan to get full access. With a premium plan, you can avail advance customization features including spam protection and automatic security updates.</li>
<li>WordPress.com is the best fit for you if you’re a non-technical user and do not want to manage your domain yourself.</li>
<li>Provides the limited option for monetization.</li>
</ul>
<h2>WordPress.org</h2>
<ul>
<li>On the other hand, when using WordPress.org you require technical knowledge and you have to take full responsibility to host, manage and update the website yourself.</li>
<li>You can download the WordPress software for free at http://wordpress.org, and install it on your web server host. You have to choose your domain and hosting provider where the WordPress can be installed.</li>
<li>Most of the popular hosting providers support one-click WordPress installer for hassle-free installation. Some of the recommended hosting providers are Bluehost, HostGator, DreamHost and WP Engine. Choose your hosting provider carefully, based on the amount of monthly traffic you expect, the hardware resources you need and obviously based on the best deal around you.</li>
<li>Once the installation is complete, you can download and install free or premium themes and plugins of your choice. A developer with PHP and JavaScript knowledge can design a custom theme that suits your specific business needs.</li>
</ul>
",0,"standard","post"
"How to Use Custom Chrome Tab in Android","how-to-use-custom-chrome-tab-in-android","Chrome Custom Tabs gives apps more control over their web experience and make transitions between native and web&hellip;
","LIVE","<p>Chrome Custom Tabs gives apps more control over their web experience and make transitions between native and web content more seamless without having to resort to a WebView.</p>
<p>Chrome Custom Tabs allow an app to customize how Chrome looks and feels. An app can change things like:</p>
<ul>
<li>Toolbar color</li>
<li>Enter and exit animations</li>
<li>Add custom actions to the Chrome toolbar, overflow menu and bottom toolbar</li>
</ul>
<p>Chrome Custom Tabs also allow the developer to pre-start Chrome and pre-fetch content for faster loading.</p>
<p>To use custom chrome tab in Android, you first need to include the following dependency in your build grade file.</p>
<pre class=""prettyprint lang-java"">compile 'com.android.support:customtabs:23.4.0+'</pre>
<p>Sync the project after adding the dependencies. Now you’re good to go.</p>
<pre class=""prettyprint lang-java"">
 public static void launchChromeTab(Activity activity, String url) {
        CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder();
        builder.setToolbarColor(ContextCompat.getColor(activity, R.color.colorPrimary));
        builder.setSecondaryToolbarColor(ContextCompat.getColor(activity, R.color.colorPrimaryDark));

        // set start and exit animations
        builder.setStartAnimations(activity, R.anim.slide_in_right, R.anim.slide_out_left);
        builder.setExitAnimations(activity, android.R.anim.slide_in_left, android.R.anim.slide_out_right);

        CustomTabsIntent customTabsIntent = builder.build();
        customTabsIntent.launchUrl(activity, Uri.parse(url));
    }
</pre>
",0,"standard","post"
"Creating Popup Dropdown CSS and JavaScript Example","creating-popup-dropdown-css-and-javascript-example","The following code snippet demonstrates, how to create an popup dropdown menu using CSS and JavaScript. In the&hellip;
","LIVE","<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Popup Dropdown CSS and JavaScript"" class=""aligncenter size-full wp-image-11893"" height=""495"" loading=""lazy"" sizes=""(max-width: 841px) 100vw, 841px"" src=""/media/uploads/articles/61/Popup-Dropdown-CSS-and-JavaScript.png"" srcset="""" width=""841""/></a><br/>
The following code snippet demonstrates, how to create an popup dropdown menu using CSS and JavaScript. In the example, we will place three buttons on screen. When user clicks on them, the drop down popup will be displayed.</p>
<p>Also, to make it look bit fancy, we have added animation on button and dropdown component using CSS3 transforms and transitions. Fork or download the source code from Github or see the live example in action by clicking on the “View Demo” button.</p>
[download url=”https://github.com/StackTipsLab/HTML-CSS-JS-Examples” ]
<h3>HTML Code</h3>
<pre class=""prettyprint lang-html"">&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset=""utf-8""&gt;
  &lt;title&gt;Popup Dropdown CSS Example&lt;/title&gt;
  &lt;link href=""https://fonts.googleapis.com/css?family=Roboto:400,500,700"" rel=""stylesheet""&gt;
  &lt;style&gt;
  	/* Your style goes here */ 
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;div class=""buttons-container""&gt;
&lt;h1&gt;Dropdown Menu using CSS and Java Script&lt;/h3&gt;	
  &lt;div class=""dropdown""&gt;
	&lt;a href=""#"" class=""btn""&gt;Centered Dropdown &lt;/a&gt;
    &lt;div class=""outer-list""&gt;
      &lt;ul&gt;
        &lt;li&gt;Red Apples&lt;/li&gt;
        &lt;li&gt;Blood Oranges&lt;/li&gt;
        &lt;li&gt;Gooseberries&lt;/li&gt;
        &lt;li&gt;Red Cranberries&lt;/li&gt;
		&lt;li&gt;Pomegranates&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=""dropdown""&gt;
	&lt;a href=""#"" class=""btn""&gt;Bottom Centered Dropdown &lt;/a&gt;
    &lt;div class=""outer-list bottom""&gt;
      &lt;ul&gt;
        &lt;li&gt;Red Apples&lt;/li&gt;
        &lt;li&gt;Blood Oranges&lt;/li&gt;
        &lt;li&gt;Gooseberries&lt;/li&gt;
        &lt;li&gt;Red Cranberries&lt;/li&gt;
		&lt;li&gt;Pomegranates&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=""dropdown""&gt;
	&lt;a href=""#"" class=""btn""&gt;Top Centered Dropdown &lt;/a&gt;
    &lt;div class=""outer-list top""&gt;
      &lt;ul&gt;
        &lt;li&gt;Red Apples&lt;/li&gt;
        &lt;li&gt;Blood Oranges&lt;/li&gt;
        &lt;li&gt;Gooseberries&lt;/li&gt;
        &lt;li&gt;Red Cranberries&lt;/li&gt;
		&lt;li&gt;Pomegranates&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;  
&lt;/div&gt;

  &lt;script&gt;
	/* Your JavaScript code goes here */   
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>CSS3 Stylesheet</h3>
<pre class=""prettyprint lang-css"">* {
    box-sizing: border-box;
    font-family: 'Roboto', sans-serif;
    font-weight: 400;
  }
 
  body {
    text-align: center;
	margin:0;
	-webkit-font-smoothing: antialiased;
  }
 
  a {
    text-decoration: none;
  }
 
  h1 {
    color: #444;    
    font-weight: 800;
    font-size: 2.5em;
	padding:30px;
  }
 
   .buttons-container {
    padding: 50px;
    background: #ebeff2;
    margin: 0 auto;
    max-width: 1024px;
    display: block;
    height: 100vh;
  }
 
  .btn {
    position: relative;
    display: block;
    text-align: center;
    background: #03A9F4;
    color: #fff;
    padding: 20px 20px;
    margin: 30px 0;
    border-radius: .15em;
    cursor: pointer;
    transition: all 0.35s ease;
    overflow: hidden;
    font-size: 1.2em;
	font-weight: 500;
  }
 
  .btn:after {
    content: '';
    position: absolute;
    bottom: -50%;
    right: -50%;
    z-index: 1;
    overflow: hidden;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.35);
    transition: all 0.35s ease;
  }
 
  .btn:active:after,
  .btn.dropdown-open:after {
    width: 200%;
    height: 200%;
  }
 
  .btn:hover {
    box-shadow: inset 0 0 40px rgba(0, 0, 0, 0.1);
  }
 
  .btn.dropdown-open + .outer-list {
    transform: scale(1);
    opacity: 1;
    visibility: visible;
  }
 
  .dropdown {
    position: relative;
    margin: 0 auto;
    width: 20em;
  }
 
  .dropdown &gt; .outer-list {
    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    transform: scale(0);
    opacity: 0;
    visibility: hidden;
    transition: all 0.35s ease;
  }
 
  .dropdown &gt; .outer-list.top {
    align-items: flex-start;
    transform-origin: 50% 0;
  }
 
  .dropdown &gt; .outer-list.left {
    justify-content: flex-start;
  }
 
  .dropdown &gt; .outer-list.bottom {
    align-items: flex-end;
    transform-origin: 50% 100%;
  }
 
  .dropdown &gt; .outer-list.right {
    justify-content: flex-end;
  }
 
  .dropdown &gt; .outer-list &gt; ul {
    list-style: none;
    padding: 0;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    background: rgba(255, 255, 255, 0.95);
    box-shadow: 0 0 2px 1px rgba(0, 0, 0, 0.1);
    border-radius: .2em;
  }
 
  .dropdown &gt; .outer-list &gt; ul li {
    padding: .25em 3em;
    margin: .25em;
    width: 100%;
    cursor: pointer;
    transition: background 0.35s ease;
	font-weight: 500;
	font-size: 1.2em;
	color:#444;
  }
 
  .dropdown &gt; .outer-list &gt; ul li:hover {
    background: rgba(0, 0, 0, 0.07);
  }  
</pre>
<h3>JavaScript Code</h3>
<pre class=""prettyprint lang-js"">'use strict';
  (function() {
    var _btn = document.querySelectorAll('.btn'),
      _eachBtn = function(callback) {
        Array.prototype.forEach.call(_btn, function(elem) {
          callback.call(this, elem);
        });
      },
      _initListener = function(e) {
        e.preventDefault();
        e.stopPropagation();
        _eachBtn(function(btn) {
          btn.classList.remove('dropdown-open')
        });
        this.classList.toggle('dropdown-open');
      },
      _hideAll = function() {
        _eachBtn(function(btn) {
          btn.classList.remove('dropdown-open');
        });
      };

    _eachBtn(function(btn) {
      btn.addEventListener('touchend', function(e) {
        _initListener.call(this, e);
      });

      btn.addEventListener('click', function(e) {
        _initListener.call(this, e);
      });
    });

    document.addEventListener('touchend', function() {
      _hideAll();
    });

    document.addEventListener('click', function() {
      _hideAll();
    });

  })();
</pre>
",0,"standard","post"
"10 Awesomely Responsive Boxed Website Designs for 2016","10-awesomely-responsive-boxed-website-designs-for-2016","Website design is an industry is evolving! The design trends come and go quite often. However, most of&hellip;
","LIVE","<p>Website design is an industry is evolving! The design trends come and go quite often. However, most of the website follow some of the common patterns for website main navigation, sidebar and footer area.</p>
<p>When thinking of designing your website the most common question that will hit anyone’s mind is the layout. There are two choices for the laying out your website; boxed and fluid. Both the layout has their distinct advantages and disadvantages.</p>
<p>Without getting into this controversial question of which one is better over other, let us see some of the trendy, responsive websites that are using boxed layout.</p>
<h2>1. Boredpanda</h2>
<p>Bored Panda is a leading art, design and photography community for creative people. Our submission platform helps artists and creators turn their stories into must-read viral content. Mission. Fight boredom.</p>
<p><strong>Credit: </strong><a href=""http://boredpanda.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.boredpanda.com</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""bored-panda"" class=""aligncenter size-large wp-image-11821"" height=""1330"" loading=""lazy"" sizes=""(max-width: 851px) 100vw, 851px"" src=""/media/uploads/articles/62/Bored-Panda.png"" srcset="""" width=""851""/></a></p>
<h2>2. Webdesigner Dept</h2>
<p>Webdesigner Depot is one of the most popular blogs about web design trends, tutorials and much more. It’s run by Walter Apai, a web designer from Vancouver.</p>
<p><strong>Credit: </strong><a href=""http://www.webdesignerdepot.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.webdesignerdepot.com</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""webdesignerdepo"" class=""aligncenter size-full wp-image-11828"" height=""1330"" loading=""lazy"" sizes=""(max-width: 851px) 100vw, 851px"" src=""/media/uploads/articles/62/WebDesignerDepo.png"" srcset="""" width=""851""/></a></p>
<h2>3. Android Authority</h2>
<p>Android Authority is an popular website for the latest news, reviews, opinions, videos, giveaways on Android.</p>
<p><strong>Credit: </strong><a href=""http://AndroidAuthority.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.androidauthority.com</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""android-authority"" class=""aligncenter size-full wp-image-11818"" height=""1330"" loading=""lazy"" sizes=""(max-width: 851px) 100vw, 851px"" src=""/media/uploads/articles/62/Android-Authority.png"" srcset="""" width=""851""/></a></p>
<h2>4. Mashable</h2>
<p>Mashable is a global, multi-platform media and entertainment company. Mashable is the go-to source for tech, digital culture and entertainment content for its dedicated and influential audience around the globe.</p>
<p><strong>Credit: </strong><a href=""http://www.mashable.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.mashable.com</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""mashable"" class=""aligncenter size-full wp-image-11824"" height=""1330"" loading=""lazy"" sizes=""(max-width: 851px) 100vw, 851px"" src=""/media/uploads/articles/62/Mashable.png"" srcset="""" width=""851""/></a></p>
<h2>5. The Guardian</h2>
<p>The Guardian Weekly is one of the world’s best-selling international weekly newspapers. The Guardian provides the latest news, sport, business, comment, analysis and reviews.</p>
<p><strong>Credit:</strong> <a href=""http://www.mashable.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.mashable.com</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""the-guardian"" class=""aligncenter wp-image-11826 size-full"" height=""1246"" loading=""lazy"" sizes=""(max-width: 851px) 100vw, 851px"" src=""/media/uploads/articles/62/The-Guardian-e1476807997837.png"" srcset="""" width=""851""/></a></p>
<h2>6. Codrops</h2>
<p>Codrops is a web design and development blog that publishes articles and tutorials about the latest web trends, techniques and new possibilities.</p>
<p><strong>Credit:</strong> <a href=""http://tympanus.net/codrops"" rel=""nofollow noopener noreferrer"" target=""_blank"">tympanus.net/codrops</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""codrops"" class=""aligncenter size-full wp-image-11822"" height=""1330"" loading=""lazy"" sizes=""(max-width: 851px) 100vw, 851px"" src=""/media/uploads/articles/62/Codrops.png"" srcset="""" width=""851""/></a></p>
<h2>7. Thunderbolt</h2>
<p>Thunderbolt is an independent, volunteer-run non profit videogames website.</p>
<p><strong>Credit:</strong> <a href=""http://www.thunderboltgames.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.thunderboltgames.com</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""thunderbolt"" class=""aligncenter size-full wp-image-11827"" height=""1330"" loading=""lazy"" sizes=""(max-width: 851px) 100vw, 851px"" src=""/media/uploads/articles/62/Thunderbolt.png"" srcset="""" width=""851""/></a></p>
<h2>8. Android Police</h2>
<p>Android Police is a blog dedicated to everything related to Android. It provides the latest Android news, sharing tips, tricks, tutorials, videos, and podcasts, reviewing devices, apps, and games, and keeping track of custom ROMs and hacks.</p>
<p>Credit: <a href=""http://www.androidpolice.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.androidpolice.com</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""android-police"" class=""aligncenter size-full wp-image-11819"" height=""1330"" loading=""lazy"" sizes=""(max-width: 851px) 100vw, 851px"" src=""/media/uploads/articles/62/Android-Police.png"" srcset="""" width=""851""/></a></p>
<h2>9. Pregnant Chicken</h2>
<p>This entry is quite different from others. The Pregnant Chicken website helps in keeping pregnancy fun and funny for new and expectant parents.</p>
<p><strong>Credit:</strong> <a href=""http://pregnantchicken.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.pregnantchicken.com</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""pregnant-chicken"" class=""aligncenter size-full wp-image-11825"" height=""1330"" loading=""lazy"" sizes=""(max-width: 851px) 100vw, 851px"" src=""/media/uploads/articles/62/Pregnant-Chicken.png"" srcset="""" width=""851""/></a></p>
<h2>10. I Can Build a Blog</h2>
<p>I Can Build A Blog, is an personal website from Dana. This helps others who are new to blogging and website creation find their way and take the confusion out of the internet!</p>
<p><strong>Credit:</strong> <a href=""http://icanbuildablog.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">icanbuildablog.com</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""icanbuildablog"" class=""aligncenter size-full wp-image-11823"" height=""1330"" loading=""lazy"" sizes=""(max-width: 851px) 100vw, 851px"" src=""/media/uploads/articles/62/ICanBuildABlog.png"" srcset="""" width=""851""/></a></p>
<h2>Conclusion</h2>
<p>And that’s a wrap!</p>
<p>Which blogs from this list do you love the most and are there any others you think deserve a spot on this list? Share your thoughts via the comments section below!</p>
",0,"standard","post"
"WordPress Page Not Found 404 Page Template Sample","wordpress-page-not-found-404-page-template-sample","While you work hard to make sure that every link actually goes to a specific web page on&hellip;
","LIVE","<p>While you work hard to make sure that every link actually goes to a specific web page on your site, there is always a chance that a link clicked will slam dunk and become a famous 404 ERROR PAGE NOT FOUND.</p>
<p>All is not lost. If your visitors encounter an error, why not be a helpful WordPress site administrator and present them with a message more useful than “NOT FOUND”</p>
<h3><a href=""http://stacktips.com"" target=""_self""><img alt=""wordpress-404-error-page-template"" class=""aligncenter size-full wp-image-11747"" height=""535"" loading=""lazy"" sizes=""(max-width: 882px) 100vw, 882px"" src=""/media/uploads/articles/63/WordPRess-404-error-page-template.png"" srcset="""" width=""882""/></a><br/>
404.php</h3>
<pre class=""prettyprint lang-php"">&lt;?php get_header(); ?&gt;

&lt;div id=""content-wrapper""&gt;
    &lt;div class=""container""&gt;

        &lt;main role=""main"" class=""primary no-sidebar""&gt;
            &lt;!-- section --&gt;
            &lt;section id=""content-inner""&gt;

                &lt;!-- article --&gt;
                &lt;article id=""post-404"" class=""post-404""&gt;
                    &lt;div class=""post-404""&gt;
                        &lt;h1 class=""errorCode""&gt;&lt;?php _e('404', THEME_SLUG); ?&gt;&lt;/h1&gt;
                        &lt;h3 class=""errorMsg""&gt;&lt;?php _e('It seems we can&amp;rsquo;t find the page you&amp;rsquo;re looking for.&lt;br&gt; Perhaps searching can help.', THEME_SLUG); ?&gt;&lt;/h3&gt;
                        &lt;?php get_search_form(); ?&gt;
                    &lt;/div&gt;

                &lt;/article&gt;
                &lt;!-- /article --&gt;

            &lt;/section&gt;
            &lt;!-- /section --&gt;
        &lt;/main&gt;

        &lt;?php //get_sidebar(); ?&gt;
    &lt;/div&gt;
    &lt;?php get_footer(); ?&gt;
&lt;/div&gt;
</pre>
",0,"standard","post"
"How to Extract Twitter Username from Url","how-to-extract-twitter-username-from-url","The following PHP code snippet extracts the twitter username from twitter URL using regular expressions. For example, if&hellip;
","LIVE","<p>The following PHP code snippet extracts the twitter username from twitter URL using regular expressions. For example, if you pass the following url, it will output ‘<strong>Stacktips</strong>‘.</p>
<pre>twitter.com/Stacktips</pre>
<p>Snippet:</p>
<pre class=""prettyprint lang-php"">if ( !function_exists( 'get_twitter_id_from_url' ) ){
	function get_twitter_id_from_url($url)
	{	
  	  if (preg_match(""/^https?:\/\/(www\.)?twitter\.com\/(#!\/)?(?&lt;name&gt;[^\/]+)(\/\w+)*$/"", $url, $regs)) {
  	    return $regs['name'];
  	  }
  	  return false;	  
  }
}
</pre>
",0,"standard","post"
"Get Domain Name from URL in PHP Using Regular Expressions","how-to-get-domain-name-from-url-in-php-using-regular-expressions","The following PHP code snippet extracts the domain name from long URL using regular expressions. For example, if&hellip;
","LIVE","<p>The following PHP code snippet extracts the domain name from long URL using regular expressions. For example, if you pass the following url, it will output stacktips.com.</p>
<pre>http://stacktips.com/articles/drupal-vs-wordpress-which-one-to-choose</pre>
<p>Snippet:</p>
<pre class=""prettyprint lang-php"">//Custom method to get domain name from url
function get_domain_from_url($url)
{
  $pieces = parse_url($url);
  $domain = isset($pieces['host']) ? $pieces['host'] : '';
  if (preg_match('/(?P&lt;domain&gt;[a-z0-9][a-z0-9\-]{1,63}\.[a-z\.]{2,6})$/i', $domain, $regs)) {
    return $regs['domain'];
  }
  return '';
}

</pre>
",0,"standard","post"
"Limit Archive Page Content with Read More Link in WordPress","limit-archive-page-content-with-read-more-link-in-wordpress","Most of the classic WordPress blog themes display full content in archive page. If you want to limit&hellip;
","LIVE","<p>Most of the classic WordPress blog themes display full content in archive page. If you want to limit the archive post content with a read more button, then add the following snippet to your theme <code>function.php</code> file.</p>
<p><strong>Example:</strong><br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Limit Archive Page Content and Add Read More Link in WordPress"" class=""aligncenter size-large wp-image-11731"" height=""529"" loading=""lazy"" sizes=""(max-width: 940px) 100vw, 940px"" src=""/media/uploads/articles/66/Limit-Archive-Page-Content-and-Add-Read-More-Link-in-WordPress-940x529.png"" srcset="""" width=""940""/></a></p>
<pre class=""prettyprint lang-php"">
add_filter(""the_content"", ""break_text"");
function break_text($text){
  if(is_front_page() || is_archive() || is_search())
  {
    $length = 400; // limited to 400 characters
    if(strlen($text)&lt;$length+10) return $text; //don't cut if too short
    $break_pos = strpos($text, ' ', $length); //find next space after desired length
    $visible = substr($text, 0, $break_pos);
	$read_more = ""... &lt;br&gt;&lt;center&gt;&lt;a href='"".get_permalink().""' class='wp-btn'&gt;Read more..&lt;/a&gt;&lt;/center&gt;"";
    return balanceTags($visible) . $read_more;
  } else {
    return $text;
  }
}
</pre>
",0,"standard","post"
"How to List All the Categories for Custom Post Type","how-to-list-all-the-categories-for-custom-post-type","If you just want to list the custom post categories (taxonomies), then you can use the get_terms function.&hellip;
","LIVE","<p>If you just want to list the custom post categories (taxonomies), then you can use the get_terms function.</p>
<p>The <code>get_the_terms</code> filter will be called when the cache has the term and will pass the found term along with the array of $taxonomies and array of $args.</p>
<pre class=""prettyprint lang-php"">&lt;?php $taxonomy = 'books'; ?&gt;
&lt;?php $terms = get_the_terms($post_id, $taxonomy);?&gt;
&lt;?php if ($terms &amp;&amp; !is_wp_error($terms)) : ?&gt;
    &lt;div class=""tagcloud""&gt;
        &lt;?php foreach ($terms as $term): ?&gt;
            &lt;a href=""&lt;?php echo get_term_link($term-&gt;slug, $taxonomy) ?&gt;""&gt;&lt;?php echo $term-&gt;name ?&gt;&lt;/a&gt;
        &lt;?php endforeach; ?&gt;
    &lt;/div&gt;
&lt;?php endif;?&gt;
</pre>
",0,"standard","post"
"Getting Started with Designable User Interface iOS 9","designable-user-interface-ios-9","This tutorial is a starter guide to designing cool User interface for iOS Application. In the recent OS updates Apple adds more accessibility&hellip;
","LIVE","<p>This tutorial is a starter guide to designing cool User interface for iOS Application. In the recent OS updates Apple adds more accessibility and API’s for designing Dynamic and Adaptive User Interface in iOS Apps, In this article we are going to cover <strong>Designable User Interface</strong>.</p>
<p>If you’re not familiar with the iOS design practices, Do’s and Don’ts, you can refer it from official <a href=""https://developer.apple.com/design/tips/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Apple design guidelines</a>.</p>
<h2>Designable User Interface</h2>
<p>Before discussing Designable User Interface, hope you are familiar with Layers. If not, no worries you can find it’s description below:</p>
<ul>
<li>Every view has a backing layer that is used to manage visual content.</li>
<li>Layers can also be created independently as stand-alone objects and added as sublayers to other layers in code, much in the same way that you would add subviews.</li>
<li>Working with layers, you can manipulate properties of visual content such as a view to set its foreground and, or background colors, create a border and set its thickness, color, and corner radius, that is, the roundedness of the corners.</li>
<li>You can add and stylize a drop shadow effect, and you can mask the visual content, which is necessary when setting the corner radius to round the corners.</li>
<li>You can adjust a layer’s positioning along the x, y, and z-axes, that is x is horizontal, y is vertical, and z is the front-to-back ordering.</li>
<li>Like any other view, you can apply transform or animate layers.</li>
</ul>
<p>In this tutorial we will take advantage of Layers to create visual content that can be stylized in the storyboard where the changes will be rendered in real time.</p>
<h3>Creating New Project</h3>
<p>Let’s begin by creating a new single-view application project by selecting Create a new Xcode Project from the Xcode menu as show below:</p>
<p><img alt=""Creating a new Xcode Project"" class=""wp-image-11551 size-medium"" height=""361"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/68/Screen-Shot-2016-08-27-at-9.14.20-PM-620x361.png"" srcset="""" title=""Creating a new Xcode Project"" width=""620""/></p>
<p>Select Single View Application from the iOS Application section and click Next.</p>
<p>Enter “Designable User Interfaces” for the product name.</p>
<p>Enter an organization name and identifier, which is typically your website domain in reverse.</p>
<p>Select “Swift” for the language, “iPhone” for devices, and I won’t need core data or any tests, so I’ll leave those check boxes unchecked.</p>
<p><img alt=""Designable User Interface"" class=""wp-image-11626 size-medium"" height=""372"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/68/Screen-Shot-2016-09-10-at-4.15.16-PM-620x372.png"" srcset="""" title=""Designable User Interface"" width=""620""/></p>
<p>Click Next and save your project in the location of your choice.</p>
<h3>Designing User Interface</h3>
<p>We will start with a custom view that fully renders on Interface Builder. We’ll go beyond that and create views that not only render in Interface Builder, but are also designable in Interface Builder. Swift extensions allow you to add new functionality to existing types.</p>
<p>We will take advantage of this, extend the base UIView class and make it designable.</p>
<ul>
<li>From the Menu, select File, New File.</li>
</ul>
<p><img alt=""Create new File"" class=""size-medium wp-image-11629"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/68/Screen-Shot-2016-09-10-at-4.27.40-PM-1-620x388.png"" srcset="""" width=""620""/></p>
<ul>
<li>Select Swift File from the iOS Source section and click Next. Enter UIView+Designable for the file name in the Save As: and click Create.</li>
</ul>
<p><img alt=""Selecting Swift File"" class=""size-medium wp-image-11630"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/68/Screen-Shot-2016-09-10-at-4.27.44-PM-620x388.png"" srcset="""" width=""620""/></p>
<ul>
<li>The Swift File template by default import foundation framework. We want to extend the class from the UIKit framework, so I’ll change the import foundation to import UIKit. latter, I’ll create an extension on UIView.</li>
</ul>
<figure aria-describedby=""caption-attachment-11633"" class=""wp-caption aligncenter"" id=""attachment_11633"" style=""width: 620px""><img alt=""impoting UIKit and writing UIView extension "" class=""size-medium wp-image-11633"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/68/Screen-Shot-2016-09-10-at-4.37.47-PM-620x388.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11633"">impoting UIKit and writing UIView extension</figcaption></figure>
<p>Now let us create a series of properties with the <code>@IBInspectable</code> attribute. Adding this attribute will make the properties inspectable attributes in Interface Builder. Extensions cannot contain storage properties, but they can contain computed ones.</p>
<p>We’ll now add observers to each property so that it can take some action when the property is set. Every view has a backing CA layer. The CA layer has border width and border color properties.</p>
<p>Let us declare an property and getter/setter methods to expose the layer’s borderWidth property. By marking this property with the <code>@IBInspectable</code> attribute, we’re exposing the view’s borderWidth property to Interface Builder.</p>
<pre class=""prettyprint lang-c"">@IBInspectable
var borderWidth: CGFloat{
	get{
		return layer.borderWidth
	}
	set{
		layer.borderWidth = newValue
	}
}
</pre>
<p>Similarly, let us create two inspectable property to expose the view layer’s border color and corner radius.</p>
<pre class=""prettyprint lang-c"">@IBInspectable
var borderColor: UIColor? {
	get{
		return layer.borderColor != nil ? UIColor(CGColor: layer.borderColor!): nil
	}
	set{
		layer.borderColor = newValue?.CGColor
	}
}


@IBInspectable
var cornerRadius: CGFloat{
	get{
		return layer.cornerRadius
	}
	set{
		layer.cornerRadius = newValue
		layer.masksToBounds = newValue != 0
	}
}
</pre>
<p>Notice that, The <code>borderColor</code> property is made optional. The masksToBounds property is set to true if cornerRadius is not zero.</p>
<p>Let’s do one more. How about a way to mask any view as a circle? Because extensions can only include computed properties, not stored ones. Let us make the makeCircular property optional.</p>
<p>In its setter, I’ll use optional binding with a where constraint to conditionally set the cornerRadius if makeCircular is not nil and is true.</p>
<pre class=""prettyprint lang-c"">@IBInspectable
var makeCircle: Bool? {
	get{
		return nil
	}
	set{
		if let makeCircle = newValue where makeCircle {
			cornerRadius = min(bounds.width, bounds.height) / 2.0
		}
	}
}
</pre>
<p>We get the minimum of the width and height of the view’s Bounds property because the view may not be a perfect square. So this will make a rectangular shape as circular as possible.</p>
<p>For all this effort, I would not see any changes to these properties in Interface Builder yet. Why? Because UIView itself is not marked with the @IBDesignagble attribute, and you cannot add that attribute in an extension. So I’ll just create a few designable subclasses of UIView to use it. At the top of the file below <em>import UIKit</em> and above <em>extension</em>, I’ll add a designable image view, UIImageView subclass, and make it designable. same for <code>UIButton</code> and UITextField as show below</p>
<pre class=""prettyprint lang-c"">@IBDesignable class DesignableImageView: UIImageView {}
@IBDesignable class DesigbanbleButton: UIButton {}
@IBDesignable class DesignableTextField: UITextField {}
</pre>
<p>overall <code>UIView+Designable.swift </code>file looks like this</p>
<pre class=""prettyprint lang-c"">import UIKit
@IBDesignable class DesignableImageView: UIImageView {}
@IBDesignable class DesigbanbleButton: UIButton {}
@IBDesignable class DesignableTextField: UITextField {}

extension UIView {

	@IBInspectable
	var borderWidth: CGFloat{
		get{
			return layer.borderWidth
		}
		set{
			layer.borderWidth = newValue
		}
	}
	
	@IBInspectable
	var borderColor: UIColor? {
		get{
			return layer.borderColor != nil ? UIColor(CGColor: layer.borderColor!): nil
		}
		set{
			layer.borderColor = newValue?.CGColor
		}
	}
	
	@IBInspectable
	var cornerRadius: CGFloat{
		get{
			return layer.cornerRadius
		}
		set{
			layer.cornerRadius = newValue
			layer.masksToBounds = newValue != 0
		}
	}
	
	@IBInspectable
	var makeCircle: Bool? {
		get{
			return nil
		}
		set{
			if let makeCircle = newValue where makeCircle{
			cornerRadius = min(bounds.width, bounds.height) / 2.0
		}
	}
	
}
</pre>
<p>We’ve now just taken a big step towards creating a fully designable user interface by creating inspectable and designable views that will render live in Interface Builder. Now we can lay out a user interface in order to put those custom views to work. Before we customize the design using the Inspectable and Designable Views, we should lay out the basic user interface that we can then customize.</p>
<p>This time we will use the Xcode’s Open Quickly dialogue by pressing the keyboard shortcut <em>Command + Shift + O </em>and type story. That should return the Storyboard as the first search result.</p>
<p>Now let us create some Views by dragging them from the Object Library onto the canvas.<br/>
<img alt=""Story Board"" class=""aligncenter size-medium wp-image-11638"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/68/Screen-Shot-2016-09-10-at-5.32.45-PM-620x388.png"" srcset="""" width=""620""/></p>
<p>Select the Image View and click the third button from the left in the bottom right hand corner of the Storyboard Editor, the Pin tool. Set the Width and Height to 200 and click Add 2 Constraints. and also change the Background color form the Attribute inspector.<br/>
<img alt=""setting width and height for imageView"" class=""aligncenter size-medium wp-image-11639"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/68/Screen-Shot-2016-09-10-at-5.35.54-PM-620x388.png"" srcset="""" width=""620""/></p>
<p>Similarly add leading, top, bottom spacing and training constraints for UITextField and UIButton.</p>
<p>Now that we have laid out a UI, now it’s time to use the inspectable and designable views we have created to customize its design. Let us select select the image view and then in the Identity Inspector, set its Class to the DesignableImageView class.<br/>
<img alt=""Setting DesignableImageView in Attribute Inspector"" class=""aligncenter size-medium wp-image-11640"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/68/Screen-Shot-2016-09-10-at-5.47.34-PM-620x388.png"" srcset="""" width=""620""/></p>
<p>Next, in the Attributes inspector, where you will notice the inspectable properties created in the UIView extension, Let us set set the Border Width to 2, border color to black, and corner radius to 100 as shown in the following screenshot:</p>
<p><img alt=""Setting Properties in Attribute inspector"" class=""aligncenter size-medium wp-image-11641"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/68/Screen-Shot-2016-09-10-at-5.50.35-PM-620x388.png"" srcset="""" width=""620""/></p>
<p>Let us do the same thing for Textfield and UIButton. Set there Class to the DesignableTextfield class and DesignableButton class respectively and change the border width to 2, border color to black, and corner radius to 15 for both TextField and Button.</p>
<p><img alt=""Settting All Properties in StoryBoard"" class=""aligncenter size-medium wp-image-11642"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/68/Screen-Shot-2016-09-10-at-5.58.51-PM-620x388.png"" srcset="""" width=""620""/></p>
<p>Cheers..! we are done and now you can run the app and see the results in simulator.</p>
",0,"standard","post"
"Why You Should Use WordPress for Your Website?","why-use-wordpress","WordPress is an open source CMS (content management system) website development framework written in PHP. This is probably&hellip;
","LIVE","<p>WordPress is an open source CMS (content management system) website development framework written in PHP. This is probably the easiest, quickest way to develop a shiny new website by keeping the cost low.</p>
<p>WordPress is not the only publishing platform to enjoy the sweet spot. There are other similar and few popular publishing platforms with lot many features to offer.</p>
<p>In the following section, I’ve called out some of the reasons why you should consider using WordPress:</p>
<ul>
<li><strong>Amazingly extendable:</strong> Addition to the strong and stable core, WordPress is quite extendable. Themes, Plugins, Menu, and Widgets give you the unlimited possibility to do almost everything you want.</li>
<li>Compliance with the <strong>W3C (World Wide Web Consortium</strong>) standards, although this does depend on the theme you’re using.</li>
<li>Ability to post content via e-mail or mobile apps.</li>
<li>Intelligent content formatting via a <strong>WYSIWYG</strong> (WYSIWYG-What You See Is What You Get) editor.</li>
<li>Multi-user and multi-author support for user accounts.</li>
<li>Feature-rich <strong>Media Library</strong> for managing photos and other non-text content through a visual and highly usable interface</li>
<li><strong>Active in development:</strong> The WordPress platform is continuously evolving. Developers are working constantly in refining existing features, bug fixes and introducing new features.</li>
<li><strong>Continuous security patch updates:</strong> Security patches are released constantly to keep your website protected from spanners and hackers.</li>
<li><strong>Larger community base:</strong> Due to its open-source nature, the larger community of developers are developing, troubleshooting, making suggestions, and testing the application.</li>
<li>Built-in automatic syndication feed including both <strong>RSS</strong> and <strong>Atom</strong> format.</li>
<li>Built-in embed functionality through shortcodes. Compatible with all major services including YouTube, Twitter, Facebook, Flickr, and Sound Cloud.</li>
<li>Easy to use and responsive admin panel to manage your WordPress site from all modern devices, operating systems, and web browsers.</li>
</ul>
",0,"standard","post"
"Introduction to WordPress Development: A Definitive Guide","introduction-to-wordpress-development-a-definitive-guide","1. Introduction to WordPress WordPress is an open source CMS (content management system) website development framework written in&hellip;
","LIVE","
<h2><span id=""1_Introduction_to_WordPress"">1. Introduction to WordPress</span></h2>
<p>WordPress is an open source CMS (content management system) website development framework written in PHP. This is probably the easiest, quickest way to develop a shiny new website by keeping the cost low. Either you are a developer or a non-geek, you can quickly build website and give a fresh look by choosing the theme and plugin of your choice.</p>
<p>According to a study by <a href=""https://w3techs.com/technologies/overview/content_management/all"" rel=""nofollow noopener noreferrer"" target=""_blank"">W3Techs</a>, around 26.7% of websites are powered by WordPress; and around 59.3% form the total CMS market share.</p>
<p>WordPress was started as a personal blogging platform built on PHP and MySQL and licensed under the <a href=""http://www.gnu.org/copyleft/gpl.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">GPLv2</a>. WordPress was forked from multi-user multi-blog engine called b2/cafelog. WordPress was originally developed by Matt Mullenweg and Mike Little, and currently maintained and developed by a team of developers that includes Mullenweg.</p>
<p>Since its first public release on May 27, 2003, WordPress is the first choice for small bloggers. However, over the time, it gained maturity to rule the web being a fully-featured content management system. Now WordPress is now a matured and stable product.</p>
<h2><span id=""2_WordPress_Features"">2. WordPress Features</span></h2>
<p>WordPress is free, easy to use, and packed with excellent features. The following is a list of some of the features that come as standard with WordPress installation.</p>
<h3><span id=""21Open_Source_Free_Platform"">2.1. Open Source &amp; Free Platform</span></h3>
<p>WordPress is an Open Source community software. You have the freedom to modify and do whatever you like with WordPress code. You may extend it or modify to use it for commercial projects without any licensing fees.</p>
<h3><span id=""22_Simple_and_Flexible"">2.2. Simple and Flexible</span></h3>
<p>WordPress is simple! Whether you’re a developer or a publisher. It’s one click installation takes care of all under the hood complexities and makes it easy to setup. Simplicity makes it possible for you to get online and get publishing, quickly.</p>
<p>In the later chapters, we will see how to install WordPress manually and using one click installation.</p>
<p>With WordPress, you can create any type of website you want: a personal blog, photo blog, business website, government website, magazine or news website or an online community portal.</p>
<p>If you are on news or media business, you can also build a network of websites using WordPress multisite options.</p>
<h3><span id=""23_Publish_and_Manage_Content"">2.3. Publish and Manage Content</span></h3>
<p>WordPress allows you to edit, publish and manage content easily via Admin Dashboard. You may also publish content from your fingertips by downloading the Android, iOS or Desktop application.</p>
<p>You can create a new Posts and Pages, format them easily, insert media contents, and make it live with the click of a button. Contents can be scheduled for future to publish themselves automatically.</p>
<p>Other publishing tools includes, Draft auto save, post revisions, public or private posts, etc.</p>
<p>Like they say “A picture is worth a thousand words”, which is why, including image or video content into post always catch reader’s attention. Good use of media objects in article is also a driving factor for search engine ranking. WordPress allows users to easily upload media objects using drag and drop uploader. You can insert images, galleries, edit title, captions etc. using inbuilt image editing tools.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Introduction to WordPress Development: A Definitive Guide"" class=""aligncenter size-large wp-image-11975"" height=""562"" loading=""lazy"" sizes=""(max-width: 940px) 100vw, 940px"" src=""/media/uploads/articles/70/Introduction-to-Wordpress-Development-940x562.png"" srcset="""" width=""940""/></a></p>
<h3><span id=""24_Customize_Look_Using_Themes"">2.4. Customize Look Using Themes</span></h3>
<p>WordPress websites can be customized and given a fresh new look by changing the website themes. When you install WordPress, it comes with two default themes.</p>
<p>You can browse and choose themes from WordPress theme directory or purchase a premium theme from third party seller. Themes downloaded from third party seller, can be installed by uploading either with one click upload from WordPress dashboard or via FTP method.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""WordPress Themes"" class=""aligncenter size-large wp-image-11973"" height=""550"" loading=""lazy"" sizes=""(max-width: 940px) 100vw, 940px"" src=""/media/uploads/articles/70/Wordpress-Themes-940x550.png"" srcset="""" width=""940""/></a></p>
<h3><span id=""25_User_Access_Management"">2.5. User &amp; Access Management</span></h3>
<p>WordPress lets you add users with different access levels such as administrator, editor, author, contributor and subscriber. Site Admins manage the site, editors work with content, authors and contributors write that content, and subscribers have a profile that they can manage.</p>
<p>The user role control the level of site management granted to user, including the ability to write, edit or publish content on your site. Users with lower access roles will see limited options in the WordPress Dashboard when they are logged in.</p>
<h3><span id=""26_Built-in_Comments"">2.6. Built-in Comments</span></h3>
<p>Comments are one of the vital part of every blogging platform. Comments on blog invite readers to participate on discussions and that helps in continuous user engagement. WordPress’s inbuilt comment tools give you everything you need to start a discussion, post a reply or moderate any discussion.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""wordpress-comment-form"" class=""aligncenter size-full wp-image-11972"" height=""413"" loading=""lazy"" sizes=""(max-width: 639px) 100vw, 639px"" src=""/media/uploads/articles/70/Wordpress-comment-form.png"" srcset="""" width=""639""/></a></p>
<h3><span id=""27_Multilingual_Support"">2.7. Multilingual Support</span></h3>
<p>WordPress is available in more than 70 languages. Building the website for language other than English, is super easy.</p>
<h3><span id=""28_Import_and_Export_Tools"">2.8. Import and Export Tools</span></h3>
<p>Are you using any other blogging platforms and not happy with? Moving your existing content to WordPress is super quick with WordPress Importer tools. You can move content from blogger, Live Journal, Movable Type, TypePad, Tumblr, and other WordPress website.</p>
<p>If you’re ready to move away from WordPress, you can use the Export Tools to download all your content into single file. However, you still have to separately upload media and attachment files.</p>
<h3><span id=""29_Extend_with_Plugins"">2.9. Extend with Plugins</span></h3>
<p>The features outlined above comes with standard WordPress websites; however, there are literally thousands of plugins that extend what WordPress does, so the actual functionality is nearly limitless.</p>
<h2><span id=""3_WordPress_Codex_Repository"">3. WordPress Codex Repository</span></h2>
<p>The WordPress Codex is the central repository of all the information that the official WordPress team has published to help people work with WordPress.</p>
<p>The <a href=""http://codex.wordpress.org/Main_Page"" rel=""nofollow noopener noreferrer"" target=""_blank"">Codex</a> has some basic tutorials for getting started with WordPress, such as a detailed step-by-step discussion of the installation, and lists of every template actions and hooks.</p>
<p>If you’re an experienced developer, you can access to <a href=""https://developer.wordpress.org/reference"" rel=""nofollow noopener noreferrer"" target=""_blank"">Code API</a> documentation from WordPress Developer reference site.</p>
",0,"standard","post"
"Java String Examples","java-string-examples","1. String Length and Trim Code snippet explains the usage of String class length and trim() method. The&hellip;
","LIVE","
<h2><span id=""1_String_Length_and_Trim"">1. String Length and Trim</span></h2>
<p>Code snippet explains the usage of String class length and trim() method.</p>
<ul>
<li>The <code>length()</code> method returns the length of this string.</li>
<li>The <code>trim()</code> method returns a copy of the string, with leading and trailing whitespace omitted.</li>
</ul>
<pre class=""prettyprint lang-java"">import java.util.Scanner;

public class StringExampleTwo {
    public static void main(String args[]) {
        
        Scanner scanner= new Scanner(System.in);
        System.out.println(""Enter a string with space"");
        
        String s1 = scanner.nextLine();
        System.out.println(""s1 = "" + s1);

        // Display String Length
        System.out.println(""The length of s1 is: "" + s1.length());

        // Removing extra spaces from s1
        String s2 = s1.trim();

        System.out.println(""s2 = "" + s2);
        System.out.println(""The length of s2 is: "" + s2.length());
    }

}
</pre>
<p><strong>Output</strong></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""String length and trim string in java"" class=""alignnone size-medium wp-image-9568"" height=""359"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/71/String-length-and-trim-string-in-java-620x359.png"" srcset="""" width=""620""/></a></p>
<h2><span id=""2_String_Equality_Check"">2. String Equality Check</span></h2>
<p>Sample program to test String Equality in Java using equals to (<span class=""text-highlighted-inline"" style=""background-color: #fffd38;"">) operator and String.equals() method.</span></p>
<pre class=""prettyprint lang-java"">public class StringEqualsTest {
    public static void main(String[] args) {
        String str1 = ""hello"";
        String str2 = str1;
        String str3 = new String(""hellp"");
        String str4 = new String(""hello 2"");
        String str5 = ""hello"";
        
        System.out.println(""Comparison using == : "" + (str1 == str5));
        System.out.println(""Comparison using == : "" + (str1 == str2));
        System.out.println(""Comparison Using equals() method : "" + str1.equals(str2));
        System.out.println(""Comparison using == : "" + (str3 == str4));
        System.out.println(""Comparison Using equals() method : "" + str3.equals(str4));
    }
}
</pre>
<p><strong>Output</strong><br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""How to Test String Equality in Java"" class=""aligncenter size-full wp-image-9515"" height=""437"" loading=""lazy"" sizes=""(max-width: 665px) 100vw, 665px"" src=""/media/uploads/articles/71/How-to-Test-String-Equality-in-Java.png"" srcset="""" width=""665""/></a></p>
<h2><span id=""3_String_Concatenation"">3. String Concatenation</span></h2>
<p>Sample Java program to concatenate two strings using plus (+) concatenation operator.</p>
<pre class=""prettyprint lang-java"">public class StringConcatination {
    public static void main(String args[]) {
        String str1 = ""Hello"";
        String str2 = ""JavaTechig"";

        // Concatenation
        String str3 = str1.concat(str2);

        System.out.println(""str1 = "" + str1);
        System.out.println(""str2 = "" + str2);
        System.out.println(""str3 = "" + str3);

        String str4 = ""Hello"";

        // checking equals
        if (str4.equals(str1)) {
            System.out.println(""str4 is equal to str1"");
        } else {
            System.out.println(""str4 is not equal to str1"");
        }

    }
}
</pre>
<p><strong>Output</strong></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""String Concatenation Test in Java"" class=""aligncenter size-full wp-image-9516"" height=""437"" loading=""lazy"" sizes=""(max-width: 665px) 100vw, 665px"" src=""/media/uploads/articles/71/String-Concatenation-Test-in-Java.png"" srcset="""" width=""665""/></a></p>
<h2><span id=""4_Change_Uppercase_to_Lowercase"">4. Change Uppercase to Lowercase</span></h2>
<p>Quick Java code snippet to change the case of a String in Java. It uses <code>toUpperCase()</code> and <code>toLowerCase()</code> methods present in java.lang.String class to convert the case.</p>
<pre class=""prettyprint lang-java"">public class StringCase {
    public static void main(String args[]) {
        String str = ""This code snippet is brought you by Java Techhig"";

        // toUpperCase() method converts the complete string in upper case
        String strUpper = str.toUpperCase();

        // toLowerCase() method converts the complete string in lower case
        String strLower = str.toLowerCase();

        // printing changed case string
        System.out.println(""Upper Case: "" + strUpper);
        System.out.println(""Lower Case: "" + strLower);
    }
}
</pre>
<p><strong>Output</strong><br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Change Case of a String in Java"" class=""aligncenter size-full wp-image-9518"" height=""437"" loading=""lazy"" sizes=""(max-width: 665px) 100vw, 665px"" src=""/media/uploads/articles/71/Change-Case-of-a-String-in-Java.png"" srcset="""" width=""665""/></a></p>
<h2><span id=""5_Reverse_String"">5. Reverse String</span></h2>
<pre class=""prettyprint lang-java"">import java.util.Scanner;

class ReverseString
{
   public static void main(String args[])
   {
      String original, reverse = """";
      Scanner scanner = new Scanner(System.in);
 
      System.out.println(""Enter a string to reverse"");
      original = scanner.nextLine();
      int length = original.length();
 
      for ( int i = length - 1 ; i &gt;= 0 ; i-- ){
         reverse = reverse + original.charAt(i);
      }
 
      System.out.println(""Reverse of entered string is: ""+reverse);
   }
}
</pre>
<p><strong>Output</strong><br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Reverse String in java"" class=""aligncenter size-full wp-image-9517"" height=""437"" loading=""lazy"" sizes=""(max-width: 665px) 100vw, 665px"" src=""/media/uploads/articles/71/Reverse-String-in-java.png"" srcset="""" width=""665""/></a></p>
<h2><span id=""6_Reverse_String_using_Recursion"">6. Reverse String using Recursion</span></h2>
<pre class=""prettyprint lang-java"">import java.util.Scanner;

public class StringRecursiveReverse {
    public String reverseString(String str) {
        String reverse = """";
        if (str.length() == 1) {
            return str;
        } else {
            reverse += str.charAt(str.length() - 1) + reverseString(str.substring(0, str.length() - 1));
            return reverse;
        }
    }

    public static void main(String args[]) {
        StringRecursiveReverse srr = new StringRecursiveReverse();
        Scanner scanner = new Scanner(System.in);
        System.out.println(""Enter a string to reverse"");
        String original = scanner.nextLine();

        System.out.println(""Result: "" + srr.reverseString(original));
    }
}
</pre>
<p><strong>Output</strong><br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Reverse Java String using recursive method"" class=""aligncenter size-full wp-image-9519"" height=""335"" loading=""lazy"" sizes=""(max-width: 665px) 100vw, 665px"" src=""/media/uploads/articles/71/Reverse-Java-String-using-recursive-method.png"" srcset="""" width=""665""/></a></p>
<h2><span id=""7_Compare_Strings"">7. Compare Strings</span></h2>
<pre class=""prettyprint lang-java"">import java.util.Scanner;

class CompareStrings {
     public static void main(String args[]) {
      String str1, str2;
      Scanner in = new Scanner(System.in);
      System.out.println(""Enter the first string"");
      str1 = in .nextLine();
    
      System.out.println(""Enter the second string"");
      str2 = in .nextLine();
    
      if (str1.compareTo(str2) &gt; 0){
            System.out.println(""First string is greater than second.""); 
      } else if (str1.compareTo(str2) &lt; 0){
            System.out.println(""First string is smaller than second.""); 
      } else{
            System.out.println(""Both strings are equal."");
      }
    }
}
</pre>
",0,"standard","post"
"Getting Started with iOS App Extension Widget","ios-app-extension-widget-tutorial","AppExtension in iOS let you to have addition functionality and contents for your app which is beyond the&hellip;
","LIVE","<p>AppExtension in iOS let you to have addition functionality and contents for your app which is beyond the scope of your application and make it available to users when they are interacting with the other apps.</p>
<p>For example, to let users to catch up on there favorite item in the app to be accessible by getting updates on the same without accessing the app, you can provide a Today widget that displaying favorite item updates in Notification Center. Or, to let users post to your social service from a web browser, you can provide a Share extension.</p>
<p>There Are Several Types of App Extensions which is well explained in this <a href=""https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/"" rel=""nofollow noopener noreferrer"" target=""_blank"">link</a>.</p>
<h2>LifeCycle of AppExtension</h2>
<p>LifeCycle and environment of App and AppExtension are totally different. Activity of the extension fires only after when a user chooses it from an app’s <em>UI</em> or from a <em>presented view controller</em>. An app that enables user to choose an app extension is called a <em>host app</em>.</p>
<p>A <em>host app</em> defines the context provided to the extension and initiate the extension life cycle when it sends a request in response to a user action. An extension typically terminates soon after it completes the request it received from the <em>host app</em>.</p>
<figure aria-describedby=""caption-attachment-11494"" class=""wp-caption aligncenter"" id=""attachment_11494"" style=""width: 620px""><img alt=""The basic life cycle of an app extension"" class=""size-medium wp-image-11494"" height=""272"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/app_extensions_lifecycle_2x-620x272.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11494"">The basic life cycle of an app extension</figcaption></figure>
<p>For example, imagine that a user selects some content in an iOS host app, activates the Share button, and chooses an app extension from the sharing list to help them post that content to a social sharing website.</p>
<p>The host app responds to the user’s choice by issuing to the extension a request that contains the selected content. A generalized version of this situation is pictured in step 1 of above image.</p>
<p>In step 2 of above image, the system instantiates the app extension identified in the host app’s request and sets up a communication channel between them. The extension displays its view within the context of the host app and then uses the items it received in the host app’s request to perform its task (in this example, the extension receives the selected content).</p>
<p>In step 3 of above image, the user performs or cancels the task in the app extension and dismisses it. In response to this action, the extension completes the host app’s request by immediately performing the user’s task or, if necessary, initiating a background process to perform it.</p>
<p>The host app tears down the extension’s view and the user returns to their previous context within the host app. When the extension’s task is finished, whether immediately or later, a result may be returned to the host app.</p>
<p>Shortly after the app extension performs its task (or starts a background session to perform it), the system terminates the extension, as shown in step 4.</p>
<p>Some APIs Are Unavailable to App Extensions</p>
<ul>
<li>Access a <em>sharedApplication</em> object, and so cannot use any of the methods on that object.</li>
<li>Use any API marked in header files with the <em>NS_EXTENSION_UNAVAILABLE</em> macro, or similar unavailability macro, or any API in an unavailable framework.<br/>
For example, in iOS 8.0, the HealthKit framework and EventKit UI framework are unavailable to app extensions.</li>
<li>Access the camera or microphone on an iOS device.</li>
<li>Perform long-running background tasks(An app extension can initiate uploads or downloads using an NSURLSession object, with results of those operations reported to the containing app.)</li>
</ul>
<h2>Creating an Today’s Extension</h2>
<p>As usual we are stating by <em>Creating a new Xcode Project</em>, In the welcome window as shown below.</p>
<figure aria-describedby=""caption-attachment-11551"" class=""wp-caption aligncenter"" id=""attachment_11551"" style=""width: 620px""><img alt=""Creating a new Xcode Project"" class=""size-medium wp-image-11551"" height=""361"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/Screen-Shot-2016-08-27-at-9.14.20-PM-620x361.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11551"">Creating a new Xcode Project</figcaption></figure>
<p>Now Xcode opens a new window and displays a dialog in which you choose a template following these steps iOS &gt; Application &gt; Single View Application &gt; next</p>
<figure aria-describedby=""caption-attachment-11553"" class=""wp-caption aligncenter"" id=""attachment_11553"" style=""width: 620px""><img alt=""Single View Application"" class=""size-medium wp-image-11553"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/Screen-Shot-2016-08-19-at-12.16.26-AM-620x388.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11553"">Single View Application</figcaption></figure>
<p>In the dialog that appears, use the following values to name your app and choose additional options for your project:</p>
<ul>
<li>Product Name: The name of your application. Lets keep it <em>TodaysExtension</em>. Xcode uses the product name you entered to name your project and the app.</li>
<li>Organization Name: The name of your organization or your own name. This is optional, hence you may leave this blank.</li>
<li>Organization Identifier: It is usually the reverse of your primary business domain. For example, if your business domain is stacktips.com then the organization identifier can be com.stacktips.<br/>
Bundle Identifier: This value is automatically generated based on your product name and organization identifier.</li>
<li>Select Swift from the language drop down.</li>
<li>Devices: Select Universal. A Universal app is one that runs on both iPhone and iPad.</li>
<li>Use Core Data: Unselected.</li>
<li>Include Unit Tests: Unselected.</li>
<li>Include UI Tests: Unselected.</li>
<li>Click Next</li>
</ul>
<figure aria-describedby=""caption-attachment-11556"" class=""wp-caption aligncenter"" id=""attachment_11556"" style=""width: 620px""><img alt=""Project Name Dialog "" class=""size-medium wp-image-11556"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/Screen-Shot-2016-08-19-at-12.16.41-AM-620x388.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11556"">Project Name Dialog</figcaption></figure>
<p>Save the project into the desire location :</p>
<figure aria-describedby=""caption-attachment-11384"" class=""wp-caption aligncenter"" id=""attachment_11384"" style=""width: 620px""><img alt=""location to save your project and click Create"" class=""size-medium wp-image-11384"" height=""366"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/Screen-Shot-2016-08-14-at-5.20.53-PM-e1471528405424-620x366.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11384"">location to save your project and click Create</figcaption></figure>
<p>Now it’s time to <em>create AppExtension</em> by creating a new Target : File &gt; New &gt; Target</p>
<figure aria-describedby=""caption-attachment-11559"" class=""wp-caption aligncenter"" id=""attachment_11559"" style=""width: 620px""><img alt=""Creating New Target "" class=""size-medium wp-image-11559"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/Screen-Shot-2016-08-19-at-12.18.40-AM-620x388.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11559"">Creating New Target</figcaption></figure>
<p>Next , Application Extension &gt; Today Extension &gt; Next</p>
<figure aria-describedby=""caption-attachment-11560"" class=""wp-caption aligncenter"" id=""attachment_11560"" style=""width: 620px""><img alt=""Selecting Today's Extension"" class=""size-medium wp-image-11560"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/Screen-Shot-2016-08-19-at-12.18.49-AM-620x388.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11560"">Selecting Today’s Extension</figcaption></figure>
<p>Can set the Project Name as <em>TodaysExtTarget</em></p>
<figure aria-describedby=""caption-attachment-11561"" class=""wp-caption aligncenter"" id=""attachment_11561"" style=""width: 620px""><img alt=""Setting Extension Target Project Name"" class=""size-medium wp-image-11561"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/Screen-Shot-2016-08-19-at-12.19.31-AM-620x388.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11561"">Setting Extension Target Project Name</figcaption></figure>
<p>Activate the Extension scheme as shown below:</p>
<figure aria-describedby=""caption-attachment-11562"" class=""wp-caption aligncenter"" id=""attachment_11562"" style=""width: 620px""><img alt=""Activating Extension Scheme "" class=""size-medium wp-image-11562"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/Screen-Shot-2016-08-19-at-12.19.38-AM-620x388.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11562"">Activating Extension Scheme</figcaption></figure>
<p>Enable the Todays Extension in Simulator by Clicking on <strong>Edit</strong> &gt; <strong>+ Button</strong> &gt; <strong>Done</strong> as show below:</p>
<figure aria-describedby=""caption-attachment-11567"" class=""wp-caption aligncenter"" id=""attachment_11567"" style=""width: 620px""><img alt=""Enabling Today's Extension in Simulator "" class=""size-medium wp-image-11567"" height=""620"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/pjimage-620x620.jpg"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11567"">Enabling Today’s Extension in Simulator</figcaption></figure>
<p>Now , It’s time to Create a new URL Scheme by Selecting Project File &gt; Selecting Target &gt; Info &gt; scroll down and select URL Types &gt; Add Identifier and URL Schemes</p>
<figure aria-describedby=""caption-attachment-11564"" class=""wp-caption aligncenter"" id=""attachment_11564"" style=""width: 620px""><img alt=""Creating URL Scheme"" class=""size-medium wp-image-11564"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/Screen-Shot-2016-08-27-at-10.07.45-PM-620x388.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11564"">Creating URL Scheme</figcaption></figure>
<p>Open <em>Maininterface.storyboard</em> and Drag and drop a Label from Object Library to Storyboard as show below:</p>
<figure aria-describedby=""caption-attachment-11565"" class=""wp-caption aligncenter"" id=""attachment_11565"" style=""width: 620px""><img alt=""Drag and Drop Label from Object Library to StoryBoard"" class=""size-medium wp-image-11565"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/72/Screen-Shot-2016-08-27-at-10.23.34-PM-620x388.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11565"">Drag and Drop Label from Object Library to StoryBoard</figcaption></figure>
<p>Create a Outlet of the Label by Opening Associate Inspector from Storyboard window and <em>control + Drag </em> the Label , In <em>viewDidLoad</em> paste following snippet</p>
<pre class=""prettyprint lang-c"">
 //Use tap gesture on label to launch app
labelText.userInteractionEnabled = true
let tapGesture = UITapGestureRecognizer(target: self, action: #selector(TodayViewController.doLaunchApp))
labelText.addGestureRecognizer(tapGesture)
</pre>
<p>Add <em>doLaunchApp</em> function below the <em>viewDidLoad</em> as show below</p>
<pre class=""prettyprint lang-c"">
func doLaunchApp(){
if let url = NSURL(string: ""TodaysExtTarget://""){
self.extensionContext?.openURL(url, completionHandler: nil)
}
}</pre>
<p>Uff finally we are done with the coding part, Run the app go to <em>HomeScreen(cmd + shift + H)</em> Tap on the Widget and it will take you to your App Initial screen.</p>
<p>You can get the source in the following link.</p>
",0,"standard","post"
"Drupal Vs. WordPress: Which one to Choose?","drupal-vs-wordpress-which-one-to-choose","The popularity of Content Management Systems is growing at a rapid pace. In fact, some of the best&hellip;
","LIVE","<p>The popularity of Content Management Systems is growing at a rapid pace. In fact, some of the best websites on the internet are powered by easy to use and customize CMSs that enables a webmaster to build sites or make changes to them without having to write a single line of code.</p>
<p>If you are planning to build a website and do not have a $3k+ budget, chances are you are recommended to use a CMS.</p>
<p>Well, there are various CMSs available today including Drupal, Joomla, Magento and WordPress, all packed with plenty of features, robust security, ease of use and easy customization.</p>
<p>However, the two Content Management Systems – WordPress and Drupal have gained more popularity than the rest of the CMSs, thanks to their flexible and versatile architectures.</p>
<p>But of course, you cannot use both of them for your next online venture. Then which one to choose?</p>
<p>To answer this question, we have written this article with a thorough comparison between WordPress and Drupal. The comparison is done on the basis of certain common aspects such as ease of use, security, learning curve, cost and customization options.</p>
<p>Let’s get started!</p>
<h3>Ease of use</h3>
<p>Content Management Systems are developed to make the life of a webmaster easier and convenient. Thus ease of use is one of the most important factors to decide which CMS to choose.</p>
<p>If you are familiar with the basics of CSS, WordPress is an ideal choice for you. It is more user-friendly than Drupal and requires no technical and programming knowledge. Moreover, it comes with a WYSIWYG editor that enables you to build sites within minutes.</p>
<p>On the other hand, Drupal is more of a backend content management system that has a steep learning curve and requires you to have basic technical knowledge.</p>
<h3>Customization options</h3>
<p>No matter what type of website you are planning to build, you would certainly want to tweak the basic functionality or look of your website to suit your own business requisites. Thus customization options is another important aspect of deciding on the platform to use.</p>
<p>When it comes to customizing the look and feel of the website, the easiest way is to make use of themes and plugins. With WordPress having a huge database of themes and plugins, it is easy to build a customized website and tweak it to any extent. It offers more than 40,000 free and premium themes and plugins.</p>
<p>Even though Drupal also comes with tons of pre-built themes to choose from, the range and number of themes still lack. Moreover, Drupal makes use of modules instead of plugins which work almost the same way. But the most useful modules are often paid.</p>
<h3>Security</h3>
<p>The online world is full of hackers looking for loopholes to hack into a website for their own benefit. Thus, it becomes imperative for a site to use a platform that offers high security.</p>
<p>While WordPress uses hundreds of different plugins to help the webmaster extend the functionality of the website, it is usually most vulnerable to security threats and breaches. Even though the WordPress’s core software is highly secure, the use of themes and plugins put it at high risk.</p>
<p>On the other hand, Drupal is relatively secure. In fact, it has enterprise-level security and offers comprehensive security reports. Thus it is usually used by a majority of government organizations.</p>
<h3>Cost</h3>
<p>Well, both the Content Management Systems are available for free of cost. WordPress and Drupal are both open source CMS and thus do not charge a penny to use them.</p>
<h3>Final Verdict</h3>
<p>Well, I am leaving it to you to decide which one is the winner. Both have their pros and cons. Where one offers tons of themes and plugins, the other provides the utmost security.</p>
<p>If you want to build a highly secure website, Drupal is an ideal choice. However, if you are planning to build a site that can be easily customized as per your needs, WordPress is your answer.</p>
",0,"standard","post"
"How to Disable Past Dates in Custom Calendar View Android","disable-past-dates-in-custom-calendar-view-android","Since then many people are asking questions like how to use Decorators and how to disable some dates in CustomCalendarView. In this post we will disable all the dates that are past.
","LIVE","<p>Last year, I have published the <strong><a href=""/articles/custom-calendar-view-library-in-android"">CustomCalendarView</a></strong> Open Source Android library. This library makes it easy to add a Calendar to your Android application. </p>
<p>Since then many people are asking questions like how to use Decorators and how to disable some dates in CustomCalendarView. This post answers that.</p>
<p>In this example, we will disable all the dates that are past.</p>
<pre class=""prettyprint lang-java"">
public class CalendarDayDecoratorActivity extends AppCompatActivity {
    private CustomCalendarView calendarView;
    private TextView selectedDateTv;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_calendar_decorator);
        selectedDateTv = (TextView) findViewById(R.id.selected_date);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setDisplayShowHomeEnabled(true);

        //Initialize CustomCalendarView from layout
        calendarView = (CustomCalendarView) findViewById(R.id.calendar_view);

        //Initialize calendar with date
        Calendar currentCalendar = Calendar.getInstance(Locale.getDefault());

        //Show monday as first date of week
        calendarView.setFirstDayOfWeek(Calendar.MONDAY);

        //Show/hide overflow days of a month
        calendarView.setShowOverflowDate(false);

        //call refreshCalendar to update calendar the view
        calendarView.refreshCalendar(currentCalendar);

        //Handling custom calendar events
        calendarView.setCalendarListener(new CalendarListener() {
            @Override
            public void onDateSelected(Date date) {
                if (!CalendarUtils.isPastDay(date)) {
                    SimpleDateFormat df = new SimpleDateFormat(""dd-MM-yyyy"");
                    selectedDateTv.setText(""Selected date is "" + df.format(date));
                } else {
                    selectedDateTv.setText(""Selected date is disabled!"");
                }
            }

            @Override
            public void onMonthChanged(Date date) {
                SimpleDateFormat df = new SimpleDateFormat(""MM-yyyy"");
                Toast.makeText(CalendarDayDecoratorActivity.this, df.format(date), Toast.LENGTH_SHORT).show();
            }
        });


        //adding calendar day decorators
        List&lt;DayDecorator&gt; decorators = new ArrayList&lt;&gt;();
        decorators.add(new DisabledColorDecorator());
        calendarView.setDecorators(decorators);
        calendarView.refreshCalendar(currentCalendar);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // handle arrow click here
        if (item.getItemId() == android.R.id.home) {
            finish(); // close this activity and return to preview activity (if there is any)
        }
        return super.onOptionsItemSelected(item);
    }

    private class DisabledColorDecorator implements DayDecorator {
        @Override
        public void decorate(DayView dayView) {
            if (CalendarUtils.isPastDay(dayView.getDate())) {
                int color = Color.parseColor(""#a9afb9"");
                dayView.setBackgroundColor(color);
            }
        }
    }

}
</pre>
",0,"standard","post"
"Validate Form Using JavaScript Regular Expressions Without jQuery","validate-form-using-javascript-regular-expressions-without-jquery","This code snippet shows how to use JavaScript Regular Expressions to validate a form. You will find many examples&hellip;
","LIVE","<p>This code snippet shows how to use JavaScript Regular Expressions to validate a form. You will find many examples in internet that  uses jQuery or other frameworks to validate the form data but in this example we will use plan JavaScript.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Validate Form Using Javascript Regular Expressions Without jQuery"" class=""aligncenter size-full wp-image-11516"" height=""237"" loading=""lazy"" src=""/media/uploads/articles/75/Validate-Form-Using-Javascript-Regular-Expressions-Without-jQuery.png"" srcset="""" width=""453""/></a></p>
<pre class=""prettyprint lang-html"">&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Form Validation Demo&lt;/title&gt;
	&lt;style&gt;
	.my-form {
	    background: #efefef;
	    padding: 20px;
		width:400px;
		margin: 0 auto;
	}
	
	.error {
	    background: #e05022;
	    padding: 10px;
	    color: #fff;
		display:none;
		border-radius: 2px;
	}
	&lt;/style&gt;
	
    &lt;script type=""text/javascript""&gt;
     // Script here..
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form method=""get"" action=""./register.php"" class=""my-form""&gt;&lt;/
	&lt;p id=""error"" class=""error""&gt;&lt;/p&gt;
    &lt;table style=""width:400px;""&gt;
        &lt;tr&gt;
            &lt;td style=""width: 35%;""&gt;
                Name:
            &lt;/td&gt;
            &lt;td style=""width: 65%;""&gt;
                &lt;input id=""name"" type=""text"" name=""name"" maxlength=""52"" /&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 35%;""&gt;
                Password:
            &lt;/td&gt;
            &lt;td style=""width: 65%;""&gt;
                &lt;input id=""password"" type=""password"" name=""password"" maxlength=""16"" /&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 35%;""&gt;
                Email:
            &lt;/td&gt;
            &lt;td style=""width: 65%;""&gt;
                &lt;input id=""email"" type=""text"" name=""email"" maxlength=""2048"" /&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 35%;""&gt;
                Telephone:
            &lt;/td&gt;
            &lt;td style=""width: 65%;""&gt;
                &lt;input id=""telephone"" type=""text"" name=""email"" maxlength=""16"" /&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td colspan=""2"" style=""width: 100%;""&gt;
                &lt;input type=""submit"" value=""Submit"" onclick=""return ValidateForm()"" /&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Let us now write some JavaScript validation:</p>
<pre class=""prettyprint lang-javascript"">function ValidateForm()
{
    var nameBox = document.getElementById (""name"");
    if (nameBox.value.length == 0) {
        document.getElementById(""error"").innerHTML = ""Error: Enter your full name."";
		document.getElementById(""error"").style.display = 'block';
        return false;
    }

    var pwBox = document.getElementById (""password"");
    if (pwBox.value.length &lt; 6){
        document.getElementById(""error"").innerHTML = ""Error: Password is too short."";
		document.getElementById(""error"").style.display = 'block';
        return false;
    }

    // 6-16 non-white character
    re = /^\S{6,16}$/;
    if (!pwBox.value.match (re)){
         document.getElementById(""error"").innerHTML = ""Error: Invalid password."";
		 document.getElementById(""error"").style.display = 'block';
        return false;
    }

    // Telephone may be empty or only 7-16 digits
    re = /^\d{7,16}$/;
    var telBox = document.getElementById (""telephone"");
    if (telBox.value.length &gt; 0){
        if (!telBox.value.match (re)){
            document.getElementById(""error"").innerHTML = ""Error: Invalid telephone number."";
			document.getElementById(""error"").style.display = 'block';
            return false;
        }
    }

    // regular expression pattern of email
    re = /^\w+([\.\-\+]\w+)*@\w+(\-\w+)*\.\w+(\-\w+)*(\.\w+(\-\w+)*)*$/;
    var emailBox = document.getElementById (""email"");
    if (!emailBox.value.match (re))
    {
        document.getElementById(""error"").innerHTML = ""Error: Invalid email address: "" + emailBox.value;
		document.getElementById(""error"").style.display = 'block';
        return false;
    }
	
	document.getElementById(""error"").style.display = 'none';
    return true;
}
</pre>
",0,"standard","post"
"Creating HelloWorld App in Swift 2.2 Using Xcode 7.3","creating-helloworld-app-in-swift-using-xcode","While learning a new technology or framework, it is a traditional practice for any developer to start with &#8220;Hello&hellip;
","LIVE","<p>While learning a new technology or framework, it is a traditional practice for any developer to start with <strong>“Hello World”</strong> program. Since this is our first step towards learning Swift programming, let us get started with the same.</p>
<p>In Swift we can print “Hello, World” by simply writing the following snippet:</p>
<pre class=""prettyprint lang-c"">Print(""Hello, World"")</pre>
<p>But thats not all. In this tutorial, we will take you through the different steps for creating your first Swift application using Xcode.</p>
<h2>Prerequisites</h2>
<p>Before we begin, we need the following stuffs in place:</p>
<ul>
<li>Mac system running on Mac OS X version 10 or higher.</li>
<li>Xcode installed and running on the machine. If it is not installed, download it free from App Store.</li>
<li>Basic knowledge on Object orient programming like Objective-C and Swift is a bonus.  Though it is not mandatory.</li>
</ul>
<h2>What is Xcode IDE?</h2>
<p>Xcode is it’s an powerful IDE (integrated development environment) provided by Apple. Xcode provides everything you need to kick start with app development. Following are some of the Xcode features.</p>
<ul>
<li>Using Xcode we can build apps for Mac, iOS, and Watch OS.</li>
<li>Xcode IDE is bundled with a rich code editor, debugger, search tool, code refactoring, language syntax highlighting, intelligent code auto complete and many more.</li>
<li>Xcode supports Swift, Objective-C, C and C++, and other languages.</li>
<li>Xcode Storyboard and UI builder brings a drag-and-drop interface using which developers can rapidly build UI for different resolution devices.</li>
</ul>
<p>There are many more features that Xcode supports which are intended for faster development and make developers productive. As you go along you will discover something new.</p>
<h2>Crating New Xcode Project</h2>
<p>Time to get your hands dirty by launching Xcode Straight away, where you land up in the following screen short.</p>
<p><img alt=""Screen Shot 2016-08-14 at 5.00.16 PM"" class=""wp-image-11354 aligncenter"" height=""300"" loading=""lazy"" sizes=""(max-width: 353px) 100vw, 353px"" src=""/media/uploads/articles/76/Screen-Shot-2016-08-14-at-5.00.16-PM-e1471211704331-620x527.png"" srcset="""" width=""353""/></p>
<p>In the welcome window, click <em>“Create a new Xcode project”</em> as shown below</p>
<p><img alt=""Screen Shot 2016-08-14 at 5.00.16 PM"" class=""wp-image-11355 aligncenter"" height=""334"" loading=""lazy"" sizes=""(max-width: 500px) 100vw, 500px"" src=""/media/uploads/articles/76/Screen-Shot-2016-08-14-at-5.00.16-PM-1-e1471211659978-620x414.png"" srcset="""" width=""500""/></p>
<p>Now Xcode opens a new window and displays a dialog in which you choose a template following these steps iOS &gt; Application &gt; Single View Application &gt; next</p>
<figure aria-describedby=""caption-attachment-11356"" class=""wp-caption aligncenter"" id=""attachment_11356"" style=""width: 620px""><img alt=""For Selecting the Application Templets "" class=""wp-image-11356 size-medium"" height=""355"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/76/Screen-Shot-2016-08-14-at-5.09.14-PM-e1471211793841-620x355.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11356"">For Selecting the Application Templets</figcaption></figure>
<p>In the dialog that appears, use the following values to name your app and choose additional options for your project:</p>
<ul>
<li>Product Name: The name of your application. Lets keep it <strong>HelloWorld. </strong>Xcode uses the product name you entered to name your project and the app.</li>
<li>Organization Name: The name of your organization or your own name. This is optional, hence you may leave this blank.</li>
<li>Organization Identifier: It is usually the reverse of your primary business domain. For example, if your business domain is stacktips.com then the organization identifier can be <code>com.stacktips</code>.</li>
<li>Bundle Identifier: This value is automatically generated based on your product name and organization identifier.</li>
<li>Select Swift from the language drop down.</li>
<li>Devices: Select Universal. A Universal app is one that runs on both iPhone and iPad.</li>
<li>Use Core Data: Unselected.</li>
<li>Include Unit Tests: Unselected.</li>
<li>Include UI Tests: Unselected.</li>
<li>Click Next.</li>
</ul>
<figure aria-describedby=""caption-attachment-11382"" class=""wp-caption aligncenter"" id=""attachment_11382"" style=""width: 450px""><img alt=""Choose options for your new project"" class=""wp-image-11382"" height=""269"" loading=""lazy"" sizes=""(max-width: 450px) 100vw, 450px"" src=""/media/uploads/articles/76/Screen-Shot-2016-08-14-at-5.20.42-PM-1-e1471211819681-620x370.png"" srcset="""" width=""450""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11382"">Choose options for your new project</figcaption></figure>
<p>In the dialog that appears, select a location to save your project and click <strong>Create </strong>button.  Once your project is created, Xcode opens your new project in the workspace window.</p>
<figure aria-describedby=""caption-attachment-11385"" class=""wp-caption aligncenter"" id=""attachment_11385"" style=""width: 620px""><img alt=""Xcode opens your new project in the workspace window"" class=""wp-image-11385 size-medium"" height=""364"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/76/Screen-Shot-2016-08-14-at-5.21.02-PM-e1471528383299-620x364.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11385"">Xcode opens your new project in the workspace window</figcaption></figure>
<p>Open <code>Main.storyboard</code> file, drag a button from the object library and drop it on <code>ViewController</code> Scene , change the name of the button by double tapping the button or change in Attributes Inspector <em>Title</em> value as shown below</p>
<figure aria-describedby=""caption-attachment-11393"" class=""wp-caption aligncenter"" id=""attachment_11393"" style=""width: 620px""><img alt=""DragDrop Button form Object Library to Scene "" class=""wp-image-11393 size-medium"" height=""369"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/76/Screen-Shot-2016-08-15-at-12.21.59-AM-e1471528307716-620x369.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11393"">DragDrop Button form Object Library to Scene</figcaption></figure>
<p>Place the button centre of the Scene and add two following constraints <em>“Horizontal in container”</em> and <em>“Vertical in container”</em></p>
<figure aria-describedby=""caption-attachment-11394"" class=""wp-caption aligncenter"" id=""attachment_11394"" style=""width: 620px""><img alt=""Adding Constraints "" class=""wp-image-11394 size-medium"" height=""367"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/76/Screen-Shot-2016-08-15-at-12.22.27-AM-e1471528329599-620x367.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11394"">Adding Constraints</figcaption></figure>
<p>Once done with adding constraints, click on Show assistant editor</p>
<figure aria-describedby=""caption-attachment-11395"" class=""wp-caption aligncenter"" id=""attachment_11395"" style=""width: 620px""><img alt=""Show Assistant Editor "" class=""wp-image-11395 size-medium"" height=""364"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/76/Screen-Shot-2016-08-15-at-12.23.31-AM-e1471528282362-620x364.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11395"">Show Assistant Editor</figcaption></figure>
<p>Now Create Button Action by <em>control + Drag</em> from Button to the ViewController.Swift</p>
<figure aria-describedby=""caption-attachment-11396"" class=""wp-caption aligncenter"" id=""attachment_11396"" style=""width: 620px""><img alt=""Button Action-Target "" class=""wp-image-11396 size-medium"" height=""368"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/76/Screen-Shot-2016-08-15-at-12.24.33-AM-e1471528358998-620x368.png"" srcset="""" width=""620""/><figcaption class=""wp-caption-text"" id=""caption-attachment-11396"">Button Action-Target</figcaption></figure>
<p>Later open <code>ViewController.swift</code> form Project Navigator of the XCode, and place the following code inside the Action-Target method created:</p>
<pre class=""prettyprint lang-c"">let alert = UIAlertController(title: ""StackTips Alert"", message: ""Hello, World"",   preferredStyle: UIAlertControllerStyle.Alert)
alert.addAction(UIAlertAction(title: ""Okay"", style: UIAlertActionStyle.Default, handler: nil))
self.presentViewController(alert, animated: true, completion: nil)
</pre>
<p>Run the application, Click on HelloWorld Button. Bang, you will get the alert saying “Hello, World” you can find the source code in the following<br/>
[download url=”https://github.com/StackTipsLab/Swift-Basic-Tutorials”]
<p>Happy Coding…!</p>
</p>",0,"standard","post"
"How to Use Firebase Crash Reporting in Android","how-to-use-firebase-crash-reporting-in-android","Firebase crash reporting automatically logs the crashes and custom events. In this tutorial we will see how use Firebase Crash Reporting in Android.","LIVE","<p>Firebase Crash Reporting is yet another Firebase feature announced at Google I/O 2016. It enables you to collect the detailed report of errors in your app.</p>
<p>Ones your app is published, it is difficult the understand the reason why the app is crashed. And hence it becomes very difficult to fix them. Crash reporting frameworks log the crashes and grouped into clusters of similar stack traces, and triaged by the severity of impact on your users.</p>
<p>Firebase crash reporting automatically logs the crashes and you may also log custom events to help capture the steps leading up to a crash. </p>
<p>In this tutorial, we will see how to configure and use Firebase Crash Reporting platform in your Android application.</p>
<h2>Configure the Firebase SDK.</h2>
<p>Let us begin with creating a Firebase project in the <a href=""https://console.firebase.google.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">Firebase console</a>. You will be asked to log in with your Google Mail account. Once you logged in, select <strong>Add App</strong> button to create a new project in Firebase Console.</p>
<ol>
<li>Select the <strong>Android platform</strong> to continue with Android Firebase configuration.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Create new project in Firebase console- Select Platform"" class=""aligncenter size-full wp-image-11289"" height=""255"" loading=""lazy"" src=""/media/uploads/articles/77/Create-new-project-in-Firebase-console-Select-Platform.png"" srcset="""" width=""582""></a></p>
<ol start=""2"">
<li>If you have not created any app before, you will be asked to select the <strong>Project Name</strong> and <strong>Country Region</strong>. Provide the details and Continue with the configuration.</li>
<li>Enter your Android app package name. This should be same as defined in your android <code>AndroidMaifest.xml</code> file.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Firebase Android Configuration"" class=""aligncenter size-medium wp-image-11286"" height=""466"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/77/Firebase-Android-Configuration-e1470927322754-620x466.png"" srcset="""" width=""620""></a></p>
<ol start=""4"">
<li>You may provide the debug <code>keystore</code> SHA-1 certificate. However this is optional and hence you may leave it empty.</li>
<li>Select <strong>Add App</strong> button. This will download the <code>google-services.json</code> configuration file for your app. Copy this file into your project’s module folder, typically inside app/ directory.</li>
</ol>
<figure aria-describedby=""caption-attachment-11285"" class=""wp-caption aligncenter"" id=""attachment_11285"" style=""width: 344px""><a href=""http://stacktips.com"" target=""_self""><img alt=""Project Structure"" class=""wp-image-11285 size-full"" height=""420"" loading=""lazy"" src=""/media/uploads/articles/77/Project-Structure.png"" srcset="""" width=""344""></a><figcaption class=""wp-caption-text"" id=""caption-attachment-11285"">Screenshot depicts project structure after adding google-services.json file</figcaption></figure>
<ol start=""7"">
<li>Now, add the required Firebase SDK dependencies to your project. Modify the project level build.gradle (&lt;project&gt;/build.gradle) file and add the google-services.</li>
</ol>
<pre class=""prettyprint lang-java"">buildscript {
  dependencies {
    // Add this line
    classpath 'com.google.gms:google-services:3.0.0'
  }
}
</pre>
<p>And, add the following to app module level <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-java"">apply plugin: 'com.android.application'
android {
   ....
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    ...
    //Add this
    compile 'com.google.firebase:firebase-crash:9.4.0'
}

// Add to the bottom of the file
apply plugin: 'com.google.gms.google-services'
</pre>
<p>After the dependencies are added <strong>Sync</strong> your project with gradle file changes. With this we’re done with the project configuration.</p>
<h2>Reporting Custom Crash</h2>
<p>Firebase Crash Reporting automatically generates reports for fatal errors. However, if you want to report your own exception, you can do it using <code>FirebaseCrash.report(exception)</code> method. For example:</p>
<pre class=""prettyprint lang-java"">Exception exception = new Exception(""Oops! Firebase non-fatal error!"");
FirebaseCrash.report(exception);
</pre>
<p>Optionally, you can report custom logs by calling <code>log()</code> method. </p>
<pre class=""prettyprint lang-java"">FirebaseCrash.log(""Button clicked!"");
</pre>
<p>Please note, it usually takes up to 20 minutes to get your error logs on Firebase console. </p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Firebase Crash Reporting Android"" class=""aligncenter size-large wp-image-11362"" height=""365"" loading=""lazy"" sizes=""(max-width: 810px) 100vw, 810px"" src=""/media/uploads/articles/77/Firebase-Crash-Reporting-Android-940x423.png"" srcset="""" width=""810""></a></p>",0,"standard","post"
"Turn on and off Wi-Fi using Android API","code-snippet-turn-on-and-off-wi-fi-using-android-api","Use the following code snippets to turn on and off wifi on Android devices. Switch toggle = (Switch)&hellip;","LIVE","<p>Use the following code snippets to turn on and off wifi on Android devices.</p><pre class=""prettyprint lang-java"">public void toggleWiFi(boolean status) {
	WifiManager wifiManager = (WifiManager) this.getSystemService(Context.WIFI_SERVICE);
	if (status == true &amp;amp;&amp;amp; !wifiManager.isWifiEnabled()) {
		wifiManager.setWifiEnabled(true);
	} else if (status == false &amp;amp;&amp;amp; wifiManager.isWifiEnabled()) {
		wifiManager.setWifiEnabled(false);
	}
}
</pre>
<p>For changing wifi state, you need the following permissions in your manifest file.</p>
<pre class=""prettyprint lang-xml"">&lt;uses-permission android:name=""android.permission.ACCESS_WIFI_STATE""&gt;&lt;/uses-permission&gt;
&lt;uses-permission android:name=""android.permission.CHANGE_WIFI_STATE""&gt;&lt;/uses-permission&gt;
</pre>",0,"standard","post"
"How to Add Click Listener to Android Switch","how-to-add-click-listener-to-android-switch","A Switch is a two-state toggle switch widget that can select between two options. Add Switch control to&hellip;
","LIVE","<p>A Switch is a two-state toggle switch widget that can select between two options. Add Switch control to your Activity or Fragment layout as follows.</p>
<pre class=""prettyprint lang-xml"">&lt;Switch
        android:id=""@+id/wifi_switch""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentBottom=""true""
        android:layout_marginBottom=""10dp""
        android:background=""@android:color/background_dark""
        android:checked=""false""
        android:text=""Wi-Fi Settings""
        android:textColor=""@android:color/white""
        android:textOff=""OFF""
        android:textOn=""ON"" /&gt;
</pre>
<p>Now you can register switch event using setOnCheckedChangeListener(this) method.</p>
<pre class=""prettyprint lang-java"">Switch toggle = (Switch) findViewById(R.id.wifi_switch);
toggle.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
	public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
		if (isChecked) {
			Toast.makeText(getApplicationContext(), ""Switch on!"", Toast.LENGTH_LONG).show();
		} else {
			Toast.makeText(getApplicationContext(), ""Switch off!"", Toast.LENGTH_LONG).show();
		}
	}
});
</pre>
",0,"standard","post"
"How to Notify Author with Email after Post Is Published in WordPress","how-to-notify-author-with-email-after-post-is-published-in-wordpress","If you have an multi-author Wordpress blog and you allow guest blogging, then your often need require to send an email notification when their post is reviewed and published. The following code snippet will help you to send an email to the post author after post is live. Just add the following to your theme function.php
","LIVE","<p>If you have a multi-author WordPress blog and you allow guest blogging, then your often need to send an email notification after you review and publish their post.</p>
<p>The following code snippet will help you to send an email to the post author after post is live. Just add the following snippets to your theme <code>function.php</code> file.</p>
<pre class=""prettyprint lang-php"">add_action( 'transition_post_status', 'post_published_notification' , 10, 3 );
function post_published_notification($new_status, $old_status, $post ) {
    if ( 'publish' !== $new_status or 'publish' === $old_status)return;
	   
	   $author = $post-&gt;post_author;
	   $name = get_the_author_meta( 'display_name', $author );
	   $email = get_the_author_meta( 'user_email', $author );
	   
	   $post_title = $post-&gt;post_title;
	   $permalink = get_post_permalink($post);

	   $admin_email = get_option('admin_email');
	   $subject = 'Congratulations! Your article has been published!';
	   
	   $headers = ""MIME-Version: 1.0"" . ""\r\n"";
	   $headers .= ""Content-type:text/html;charset=UTF-8"".""\r\n"";
	   $headers .= 'From: Stacktips &lt;'. $admin_email . ""&gt;\r\n"" . 'Reply-To: Stacktips &lt;' . $admin_email . ""&gt;\r\n"";
	   $message = &lt;&lt;&lt;MESSAGE
&lt;html&gt;&lt;body&gt;
&lt;p&gt;Dear {$name}!&lt;/p&gt;
&lt;p&gt;Congratulations! Your article titled &lt;strong&gt;{$post_title}&lt;/strong&gt; has been published on {$site_name}&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
MESSAGE;
	wp_mail($email, $subject, $message, $headers);
}
</pre>
",0,"standard","post"
"How to Disable the Emoji Code in WordPress","how-to-disable-the-emoji-code-in-wordpress","Since version 4.2 release, WordPress natively adds supports Emoji characters. Because if this WordPress loads some extra java&hellip;
","LIVE","<p>Since version 4.2 release, WordPress natively adds supports Emoji characters. Because if this WordPress loads some extra java scripts and CSS files in the header.</p>
<p>If you don’t use Emoji and want to remove them, just add the following code snippets to your theme <code>functions.php</code> file.</p>
<pre class=""prettyprint lang-php"">/**
 * Disable the emoji's
 */
function disable_emojis() {
	remove_action( 'wp_head', 'print_emoji_detection_script', 7 );
	remove_action( 'admin_print_scripts', 'print_emoji_detection_script' );
	remove_action( 'wp_print_styles', 'print_emoji_styles' );
	remove_action( 'admin_print_styles', 'print_emoji_styles' );	
	remove_filter( 'the_content_feed', 'wp_staticize_emoji' );
	remove_filter( 'comment_text_rss', 'wp_staticize_emoji' );	
	remove_filter( 'wp_mail', 'wp_staticize_emoji_for_email' );
	add_filter( 'tiny_mce_plugins', 'disable_emojis_tinymce' );
}
add_action( 'init', 'disable_emojis' );
</pre>
",0,"standard","post"
"How to Integrate Firebase Cloud Messaging for Android","how-to-integrate-firebase-cloud-messaging-for-android","In this tutorial, we will see how to configure and use Firebase Cloud Messaging platform in your Android application.","LIVE","<p>Mobile push notifications are used to send important messages to mobile devices when the user is not actively using your application. App developers use mobile push notifications to do a lot of things; for example, let the user know about a sale or let the user know about sports score updates.</p>
<p>In this tutorial, we will see how to configure and use Firebase Cloud Messaging platform in your Android application.<br>

</p><h2><span id=""1_What_is_Firebase_Cloud_Messaging"">What is Firebase Cloud Messaging?</span></h2>
<p>Firebase Cloud Messaging (FCM) is the new version of GCM. Built on top of the GCM infrastructure, it provides the ability to send messages to multiple platforms beyond Android: iOS and Mobile web.</p>
<ul>
<li>Via Firebase dashboard, anyone (even nontechnical users) can now easily send and schedule messages directly to a segment of users or to a specific device.</li>
<li>Google recommend developers to upgrade to FCM and use it for all new App developments. And they have announced that all the new client-side features will be added to FCM SDKs only.</li>
<li>However, all the existing applications built on GCM will still continue to work.</li>
<li>FCM SDK makes it easy for developers to integrate the cloud messaging. Now you no longer have manually registered your device with GCM server. The FCM SDK will take care of itself.</li>
</ul>
<p>Let us see how to integrate Firebase Cloud Messaging into your Android application.</p>
<h2><span id=""2_Configure_the_Firebase_SDK"">Configure the Firebase SDK.</span></h2>
<p>Let us begin with creating a Firebase project in the <a href=""https://console.firebase.google.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">Firebase console</a>. You will be asked to log in with your Google Mail account. Once you logged in, select <strong>Add App</strong> button to create a new project in Firebase Console.</p>
<ol>
<li>Select the <strong>Android platform</strong> to continue with Android Firebase configuration.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Create new project in Firebase console- Select Platform"" class=""aligncenter size-full wp-image-11289"" height=""255"" loading=""lazy"" src=""/media/uploads/articles/83/Create-new-project-in-Firebase-console-Select-Platform.png"" srcset="""" width=""582""></a></p>
<ol start=""2"">
<li>If you have not created any app before, you will be asked to select the <strong>Project Name</strong> and <strong>Country Region</strong>. Provide the details and Continue with the configuration.</li>
<li>Enter your Android app package name. This should be same as defined in your android <code>AndroidMaifest.xml</code> file.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Firebase Android Configuration"" class=""aligncenter size-medium wp-image-11286"" height=""466"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/83/Firebase-Android-Configuration-e1470927322754-620x466.png"" srcset="""" width=""620""></a></p>
<ol start=""4"">
<li>You may provide the debug <code>keystore</code> SHA-1 certificate. However this is optional and hence you may leave it empty.</li>
<li>Select <strong>Add App</strong> button. This will download the <code>google-services.json</code> configuration file for your app. Copy this file into your project’s module folder, typically inside app/ directory.</li>
</ol>
<figure aria-describedby=""caption-attachment-11285"" class=""wp-caption aligncenter"" id=""attachment_11285"" style=""width: 344px""><a href=""http://stacktips.com"" target=""_self""><img alt=""Project Structure"" class=""wp-image-11285 size-full"" height=""420"" loading=""lazy"" src=""/media/uploads/articles/83/Project-Structure.png"" srcset="""" width=""344""></a><figcaption class=""wp-caption-text"" id=""caption-attachment-11285"">Screenshot depicts project structure after adding google-services.json file</figcaption></figure>
<ol start=""7"">
<li>Now, add the required Firebase SDK dependencies to your project. Modify the project level build.gradle (&lt;project&gt;/build.gradle) file and add the google-services.</li>
</ol>
<pre class=""prettyprint lang-java"">buildscript {
  dependencies {
    // Add this line
    classpath 'com.google.gms:google-services:3.0.0'
  }
}
</pre>
<p>And, add the following to app module level <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-java"">apply plugin: 'com.android.application'
android {
   ....
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    ...
    //Add this
    compile 'com.google.firebase:firebase-messaging:9.4.0'
}

// Add to the bottom of the file
apply plugin: 'com.google.gms.google-services'
</pre>
<p>After the dependencies are added <strong>Sync</strong> your project with Gradle file changes. With this, we’re done with the project configuration.</p>
<h2><span id=""3_Integrating_Firebase_Cloud_Messaging"">Integrating Firebase Cloud Messaging</span></h2>
<p>Before push notification messages are delivered, each device is registered with GCM. The Firebase Cloud Messaging SDK takes care of the registration process. Upon successful registration it calls <code>onTokenRefresh()</code> callback where you can retrieve the token.</p>
<p>You can retrieve the token by extending <code>FirebaseInstanceIdService</code> class.</p>
<pre class=""prettyprint lang-java"">public class FCMInitializationService extends FirebaseInstanceIdService {
    private static final String TAG = ""FCMInitializationService"";

    @Override
    public void onTokenRefresh() {
        String fcmToken = FirebaseInstanceId.getInstance().getToken();

        Log.d(TAG, ""FCM Device Token:"" + fcmToken);
        //Save or send FCM registration token
    }
}
</pre>
<p>Register the <code>FCMInitializationService</code> service in your <code>AndroidManifest.xml</code>:</p>
<pre class=""prettyprint lang-xml"">&lt;service android:name=""com.stacktips.example.FCMInitializationService""&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=""com.google.firebase.INSTANCE_ID_EVENT"" /&gt;
    &lt;/intent-filter&gt;
&lt;/service&gt;
</pre>
<p class=""wp-alert info"">Please note, implementing FCM requires <strong>android.permission.INTERNET</strong> permission. Make sure it is declare in your <strong>AndroidManifest.xml</strong>.</p>
<p>The <code>FirebaseMessagingService</code> class is the base class for communicating with Firebase Messaging. It also provides functionality such as automatically displaying notifications.</p>
<p>The <code>onMessageReceived()</code> method is called when a message is received.</p>
<pre class=""prettyprint lang-java"">public class FCMCallbackService extends FirebaseMessagingService {
    private static final String TAG = ""FCMCallbackService"";

    @Override
    public void onMessageReceived(RemoteMessage remoteMessage) {
        Log.d(TAG, ""From:"" + remoteMessage.getFrom());
        Log.d(TAG, ""Message Body:"" + remoteMessage.getNotification().getBody());
        sendNotification(remoteMessage.getNotification());
    }

    private void sendNotification(RemoteMessage.Notification notification) {
        int color = getResources().getColor(R.color.notification_color);
        Uri defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);

        Intent intent = new Intent(this, MainActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent,
                PendingIntent.FLAG_ONE_SHOT);

        NotificationCompat.Builder builder = new NotificationCompat.Builder(this)
                .setContentTitle(notification.getTitle())
                .setContentText(notification.getBody())
                .setAutoCancel(true)
                .setSmallIcon(R.drawable.ic_offer)
                .setColor(color)
                .setStyle(new NotificationCompat.BigTextStyle().bigText(notification.getBody()))
                .setSound(defaultSoundUri)
                .setContentIntent(pendingIntent);

        NotificationManager notificationManager = (NotificationManager)
                getSystemService(Context.NOTIFICATION_SERVICE);
        notificationManager.notify(0, builder.build());
    }
}
</pre>
<p>Register the <code>FCMCallbackService</code> class in your <code>AndroidManifest.xml</code> file:</p>
<pre class=""prettyprint lang-xml"">&lt;service android:name=""com.stacktips.example.FCMCallbackService""&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=""com.google.firebase.MESSAGING_EVENT"" /&gt;
    &lt;/intent-filter&gt;
&lt;/service&gt;
</pre>
<h2><span id=""4_Publishing_Message_from_Firebase_Console"">Publishing Message from Firebase Console</span></h2>
<p>Let us now visit Firebase Console to test if notifications are working. Open your app in Firebase Console. Click on Notifications tab in the left panel. If visiting this for the first time, click on Send Your First Message.</p>
<p>Enter details and click <strong>Send Message</strong> button.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Send Firebase Notification"" class=""aligncenter size-medium wp-image-11343"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/83/Send-Firebase-Notification-620x388.png"" srcset="""" width=""620""></a></p>
<p>Now, You should receive a notification in your device.</p>
<p><img alt=""Firebase Cloud Messaging for Android Example"" class=""aligncenter wp-image-11344"" height=""327"" loading=""lazy"" sizes=""(max-width: 400px) 100vw, 400px"" src=""/media/uploads/articles/83/Firebase-Cloud-Messaging-for-Android-Example-620x507.png"" srcset="""" width=""400""></p>",0,"standard","post"
"How to Add Subscribers to a List Using MailChimp REST Api V3","how-to-add-subscribers-to-a-list-using-mailchimp-rest-api-v3","MailChimp REST Api V3 exposes methods that allows you to add, manage members of a specific MailChimp list. The following code snippet help you to add a new subscriber to Mailchimp List.
","LIVE","<p>MailChimp REST API V3 exposes methods that allow you to add, manage members of a specific MailChimp list. The following code snippet helps you to add a new subscriber to MailChimp List.</p>
<pre class=""prettyprint lang-php"">&lt;?php
class ST_Newsletter_Plugin {
	public function __construct(){ 
	
	} 
	
	function subscribe($user_id, $user_email){
		//get api_key and list id from admin settings
		$api_key = ""c8d8c17ae54aui8ujnj43343-us9"";
		$list_id = ""2d9e113i8hm"";
		
		require_once('MailChimp.php');
		$mailChimp = new MailChimp($api_key);
		
		$result = $mailChimp-&gt;post(""lists/$list_id/members"", [
			'email_address' =&gt; $user_email,
			'status'=&gt; 'subscribed'
		]);

		if ($mailChimp-&gt;success()) {
		    echo ""success"";
		} else {
		   echo ""fail"";
		}
	}
}

?&gt;
</pre>
<p>You can download “MailChimp.php” from <a href=""https://github.com/drewm/mailchimp-api"" rel=""nofollow noopener noreferrer"" target=""_blank"">GitHub</a>.</p>
",0,"standard","post"
"How to Register & Display Sidebars in WordPress","how-to-register-display-sidebars-in-wordpress","You can register sidebar by calling register_sidebar() method. Just provide a unique name to each sidebar (eg: “Right Sidebar”, “Left Sidebar”). These names are displayed in Wordpress admin dashboard interface.
","LIVE","<h3>Register sidebar</h3>
<p>You can register sidebar by calling register_sidebar() method. Just provide a unique name to each sidebar (eg: “Right Sidebar”, “Left Sidebar”). These names are displayed in WordPress admin dashboard interface.</p>
<pre class=""prettyprint lang-php"">function wpb_widgets_init() {
register_sidebar( array(
		'name' =&gt; __( 'My Sidebar', 'wpb' ),
		'id' =&gt; 'my-custom-sidebar',
		'description' =&gt; __( 'The main sidebar appears on the right on each page except the front page template', 'wpb' ),
		'before_widget' =&gt; '&lt;aside id=""%1$s"" class=""widget %2$s""&gt;',
		'after_widget' =&gt; '&lt;/aside&gt;',
		'before_title' =&gt; '&lt;h4 class=""widget-title""&gt;',
		'after_title' =&gt; '&lt;/h4&gt;',
	) );
}
add_action( 'widgets_init', 'wpb_widgets_init' );
</pre>
<h3>Display sidebar</h3>
<p>To display sidebar in your theme, you can use dynamic_sidebar() method by passing the sidebar id.</p>
<pre class=""prettyprint lang-php"">&lt;?php if ( is_active_sidebar( 'my-custom-sidebar' ) ) : ?&gt;
	&lt;aside id=""sidebar"" class=""sidebar right""&gt;
		&lt;div id=""sidebar"" class=""widget-area"" role=""complementary""&gt;
			&lt;?php dynamic_sidebar( 'my-custom-sidebar' ); ?&gt;
		&lt;/div&gt;
	&lt;/aside&gt;
&lt;?php endif; ?&gt;
</pre>
",0,"standard","post"
"How to Integrate Google Firebase Analytics for Android","integrate-google-firebase-analytics-for-android","After you release your app to market, it is important to study how people use your application to&hellip;","LIVE","After you release your app to market, it is important to study how people use your application to make informed decisions about how to improve and market your app. For this, you can integrate app measurement solutions into your app.
<p>There are many free and premium app measurement solutions out there in the market. Google Analytics, Flurry, Adobe Omniture are the most popular ones. Google recently added Firebase Analytics to the race. The core idea behind all of these tools is to provide insight on app usage and user engagement.</p>
<h2><span id=""1_What_is_Firebase_Analytics"">What is Firebase Analytics?</span></h2>
<p>Firebase Analytics from Google is a free app measurement solution using which you can understand how people use your app and track user engagement.</p>
<ul>
<li>Firebase SDK for mobile platforms, automatically captures a number of events and user properties and also allows you to define your own custom events to measure the things that uniquely matter to your business.</li>
<li>It also allows you to perform custom analysis and do complex analysis by joining multiple data sources.</li>
<li>You can track how your campaigns across organic and paid channels are performing and accordingly define an effective marketing strategy.</li>
</ul>
<p>The detailed insight of your data can be viewed in Firebase console. The dashboard provides detailed insights about your data — from summary data such as active users and demographics to more detailed data such as identifying your most purchased items.</p>
<h2><span id=""2_Integrating_Firebase_Analytics"">Integrating Firebase Analytics</span></h2>
<p>To use Firebase Analytics to your Android project, you need <strong>Android 2.3 (Gingerbread)</strong> or newer and<strong> Google Play Services 9.4.0</strong> or newer. In this example we use<strong> Android Studio 2.2</strong>, <strong>Mximunum SDK version 17</strong>.</p>
<p>Now that we understand what the Firebase Analytics platform can do, let us see how to use Firebase Analytics for your Android application to track application usage. Integrating with Firebase Analytics in Android involves two steps; installing the Firebase SDK and Logging events and/or properties.</p>
<h3><span id=""21_Configure_the_Firebase_SDK"">Configure the Firebase SDK</span></h3>
<p>Let us begin with creating a Firebase project in the <a href=""https://console.firebase.google.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">Firebase console</a>. You will be asked to log in with your Google Mail account. Once you logged in, select <strong>Add App</strong> button to create a new project in Firebase Console.</p>
<ol>
<li>Select the <strong>Android platform</strong> to continue with Android Firebase configuration.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Create new project in Firebase console- Select Platform"" class=""aligncenter size-full wp-image-11289"" height=""255"" loading=""lazy"" src=""/media/uploads/articles/86/Create-new-project-in-Firebase-console-Select-Platform.png"" srcset="""" width=""582""></a></p>
<ol start=""2"">
<li>If you have not created any app before, you will be asked to select the <strong>Project Name</strong> and <strong>Country Region</strong>. Provide the details and Continue with the configuration.</li>
<li>Enter your Android app package name. This should be same as defined in your android <code>AndroidMaifest.xml</code> file.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Firebase Android Configuration"" class=""aligncenter size-medium wp-image-11286"" height=""466"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/86/Firebase-Android-Configuration-e1470927322754-620x466.png"" srcset="""" width=""620""></a></p>
<ol start=""4"">
<li>You may provide the debug <code>keystore</code> SHA-1 certificate. However this is optional and hence you may leave it empty.</li>
<li>Select <strong>Add App</strong> button. This will download the <code>google-services.json</code> configuration file for your app. Copy this file into your project’s module folder, typically inside app/ directory.</li>
</ol>
<figure aria-describedby=""caption-attachment-11285"" class=""wp-caption aligncenter"" id=""attachment_11285"" style=""width: 344px""><a href=""http://stacktips.com"" target=""_self""><img alt=""Project Structure"" class=""wp-image-11285 size-full"" height=""420"" loading=""lazy"" src=""/media/uploads/articles/86/Project-Structure.png"" srcset="""" width=""344""></a><figcaption class=""wp-caption-text"" id=""caption-attachment-11285"">Screenshot depicts project structure after adding google-services.json file</figcaption></figure>
<ol start=""7"">
<li>Now, add the required Firebase SDK dependencies to your project. Modify the project level build.gradle (&lt;project&gt;/build.gradle) file and add the google-services.</li>
</ol>
<pre class=""prettyprint lang-java"">buildscript {
  dependencies {
    // Add this line
    classpath 'com.google.gms:google-services:3.0.0'
  }
}
</pre>
<p>And, add the following to app module level <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-java"">apply plugin: 'com.android.application'
android {
   ....
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    ...
    //Add this
    compile 'com.google.firebase:firebase-core:9.4.0'
}

// Add to the bottom of the file
apply plugin: 'com.google.gms.google-services'
</pre>
<p>After the dependencies are added Sync your project with gradle file changes. With this we’re done with the project configuration. Once the Firebase SDK is configured properly, several events are captured automatically by Firebase. Check out the list of <a href=""https://support.google.com/firebase/answer/6317485"" rel=""nofollow noopener noreferrer"" target=""_blank"">default events</a> tracked by Firebase SDK.</p>
<h3><span id=""22_Tracking_User_Events"">Tracking User Events</span></h3>
<p>Let us first obtain the <code>FirebaseAnalytics</code> <a href=""/articles/singleton-design-pattern-in-java"" target=""_blank"">singleton</a> instance. The <code>FirebaseAnalytics</code> class is the heart of all firebase configuration that provides method for logging events and setting user properties. Currently it provides following methods:</p>
<table id=""pubmethods"">
<tbody>
<tr>
<td>getInstance(Context context)</td>
<td width=""100%"">
<div>
<div>Returns the singleton FirebaseAnalytics interface.</div>
</div>
</td>
</tr>
<tr>
<td>logEvent(String name, Bundle params)</td>
<td width=""100%"">
<div>
<div>Logs an app event.</div>
</div>
</td>
</tr>
<tr>
<td>setAnalyticsCollectionEnabled(boolean enabled)</td>
<td width=""100%"">
<div>
<div>Sets whether analytics collection is enabled for this app on this device.</div>
</div>
</td>
</tr>
<tr>
<td>setMinimumSessionDuration(long milliseconds)</td>
<td width=""100%"">
<div>
<div>Sets the minimum engagement time required before starting a session. The default value is 10000 (10 seconds).</div>
</div>
</td>
</tr>
<tr>
<td>setSessionTimeoutDuration(long milliseconds)</td>
<td width=""100%"">
<div>
<div>Sets the duration of inactivity that terminates the current session. The default value is 1800000 (30 minutes).</div>
</div>
</td>
</tr>
<tr>
<td>setUserId(String id)</td>
<td width=""100%"">
<div>
<div>Sets the user ID property.</div>
</div>
</td>
</tr>
<tr>
<td>setUserProperty(String name, String value)</td>
<td width=""100%"">
<div>
<div>Sets a user property to a given value.</div>
</div>
</td>
</tr>
</tbody>
</table>
<p>You can use the above methods to configure firebase analytics tracker and track custom everts.<br>
</p><p><strong>MainActivity.java</strong></p>
<pre class=""prettyprint lang-java"">public class MainActivity extends AppCompatActivity {

    private FirebaseAnalytics mFirebaseAnalytics;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Obtain the FirebaseAnalytics instance.
        mFirebaseAnalytics = FirebaseAnalytics.getInstance(this);
        mFirebaseAnalytics.setAnalyticsCollectionEnabled(true);
        mFirebaseAnalytics.setMinimumSessionDuration(20000);

        Button subscribeButton = (Button) findViewById(R.id.button1);
        subscribeButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Bundle bundle = new Bundle();
                String id = ""1year"";
                String name = ""Annual membership subscription"";
                bundle.putString(FirebaseAnalytics.Param.ITEM_ID, id);
                bundle.putString(FirebaseAnalytics.Param.ITEM_NAME, name);
                bundle.putString(FirebaseAnalytics.Param.CURRENCY, ""EUR"");
                bundle.putString(FirebaseAnalytics.Param.PRICE, ""299.00"");
                mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle);
            }
        });

    }
}
</pre>
<h3><span id=""23_Tracking_User_Properties"">Tracking User Properties</span></h3>
<p>User properties are attributes you define to describe segments of your user base, such as language preference or geographic location. Firebase automatically logs some of the user properties; such as App version, Device model, Gender, Age, Interests, OS version and New/Established.</p>
<p>You can set up to 25 different Analytics User Properties in your app.</p>
<p class=""wp-alert info"">Note that, the user property names are case-sensitive and that setting two user properties whose names differ only in case results in two distinct user properties being logged.</p>
<pre class=""prettyprint lang-java"">mFirebaseAnalytics.setUserProperty(""favorite_category"", ""Android Tutorials"");
</pre>",0,"standard","post"
"Getting Started with iCloud Storage – iOS Tutorial","getting-started-with-icloud-storage-ios-tutorial","iCloud make use of Apple ID to access their personally content on all their devices wirelessly and automatically,&hellip;
","LIVE","<p>iCloud make use of Apple ID to access their personally content on all their devices wirelessly and automatically, this service is free of cost. iCloud Storage API is available for both iOS and MacOS X platform.  It’s important to note that iCloud applications cannot be tested on the iOS Simulator it should be tested on the two iOS devices.</p>
<p>Every iOS Application run on it’s own sandbox environment which has it’s own restriction. Some of the restriction affect where and how your application store data. Each Application given a directory on the device file’s system. The content of this directory is private to the application and cannot be read by the other applications on the device.</p>
<p>In iOS we make use of Document directory for storing application data. iCloud Storage conceptually extends this model and allows your application to upload your data for its directory to Apple’s server. This data is accessible from other iCloud-compatible devices  on which copies of your applications are running.  Your Application also receives notifications when data is created or updated by other copy of the application. This synchronisation is achieved by a background process that runs on all iCloud compatible devices.</p>
<h2><span id=""1_Setting_up_iCloud_Storage_APIs"">1. Setting up iCloud Storage APIs</span></h2>
<ul>
<li>Enabling iCloud services in App ID on Apples Developer Portal.</li>
<li>Creating relevant provisioning profile.</li>
<li>Enabling relevant entitlements in Xcode project.</li>
</ul>
<h3><span id=""11_Enabling_iCloud_Service_for_App_ID"">1.1. Enabling iCloud Service for App ID</span></h3>
<p>To Create an relevant App ID, log in to Apple developer account at  <a href=""https://developer.apple.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://developer.apple.com</a>. Click the Certificates, Identifiers &amp; Profiles link.</p>
<p><a href=""/articles/getting-started-with-icloud-storage-ios-tutorial/attachment/enabling-icloud-service-in-app-id"" rel=""attachment wp-att-11210""><img alt=""Enabling iCloud service in App ID"" class=""aligncenter wp-image-11210 size-medium"" height=""361"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/87/Enabling-iCloud-service-in-App-ID-e1470690453298-620x361.png"" srcset="""" width=""620""/></a></p>
<p>To create new App ID, click the New App ID button on the top-right side.</p>
<p><a href=""/articles/getting-started-with-icloud-storage-ios-tutorial/attachment/apple-developer-create-new-app-identifier"" rel=""attachment wp-att-11214""><img alt=""Apple Developer- Create new App identifier"" class=""aligncenter wp-image-11214 size-medium"" height=""314"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/87/Apple-Developer-Create-new-App-identifier-620x314.png"" srcset="""" width=""620""/></a></p>
<p>Provide a descriptive name of the new App ID in the Name field and select Team ID in the App ID prefix drop-down. Select the Explicit App ID radio button under the App ID suffix section and provide a unique identifier in the Bundle ID field that ends in the name of the Xcode project you are going to create (or have created).</p>
<p>Typically, you create this identifier by combining the reverse-domain name of your website and the name of your Xcode project. For example, the project created in this lesson is called <code>SwiftDemoiCloudTest</code> and the bundle identifier specified is <code>com..CloudTest</code>. Your browser window should resemble.</p>
<p><a href=""/articles/getting-started-with-icloud-storage-ios-tutorial/attachment/apple-developer-registring-app-indentifier"" rel=""attachment wp-att-11213""><img alt=""Apple Developer- Registring App Indentifier"" class=""aligncenter wp-image-11213 size-medium"" height=""626"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/87/Apple-Developer-Registring-App-Indentifier-620x626.png"" srcset="""" width=""620""/></a></p>
<p>Scroll down to reveal the App Services section and ensure the iCloud checkbox is selected and the Compatible with Xcode 5 option is selected.</p>
<p><a href=""/articles/getting-started-with-icloud-storage-ios-tutorial/attachment/apple-developer-select-icloud-app-services"" rel=""attachment wp-att-11217""><img alt=""Apple Developer- Select iCloud App Services"" class=""aligncenter wp-image-11217 size-medium"" height=""682"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/87/Apple-Developer-Select-iCloud-App-Services-620x682.png"" srcset="""" width=""620""/></a></p>
<p>Click the Continue button to proceed. You will be presented with a registration confirmation summary page that displays App ID and other activated services information. Verify the details and click on Submit to finish the process.</p>
<h3><span id=""12_CreatingRelevant_Provisioning_Profile"">1.2. Creating Relevant Provisioning Profile</span></h3>
<p>To create a provisioning profile for an iCloud-enabled App ID, click the All link (under the Provisioning category) in the menu on the left side of the iOS Provisioning Portal window.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Creating Relevant Provisioning Profile"" class=""aligncenter size-medium wp-image-11272"" height=""423"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/87/Creating-Relevant-Provisioning-Profile-620x423.png"" srcset="""" width=""620""/></a></p>
<p><b></b><b></b>Click the “<strong>New Profile”</strong> button on the top-right corner of the iOS Provisioning Portal window.</p>
<p>You will be asked to choose between a development or distribution provisioning profile. A distribution provisioning profile is used to submit applications to iTunes Connect. For the moment, select the iOS App Development option and click <strong>Continue</strong>.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Type of provisining profile iOS"" class=""aligncenter size-medium wp-image-11273"" height=""411"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/87/Type-of-provisining-profile-iOS-620x411.png"" srcset="""" width=""620""/></a></p>
<p>A development provisioning profile ties together three pieces of information:</p>
<ul>
<li>A single App ID</li>
<li>One or more public keys</li>
<li>A list of test device IDs</li>
</ul>
<p>The next step requires you to select an App ID that will be associated with this provisioning profile. Select the iCloud-enabled App ID you have created and click <strong>Continue</strong>.</p>
<p><a href=""https://stacktips.com"" target=""_self""><img alt=""Select AppId iOS"" class=""aligncenter size-medium wp-image-11274"" height=""414"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/87/Select-AppId-iOS-620x414.png"" srcset="""" width=""620""/></a></p>
<p>Select one or more development certificates that will be included in the profile. You must make sure to sign the app in Xcode using one of the certificates you select here. Select a suitable certificate and click <strong>Continue</strong>.</p>
<p><a href=""https://stacktips.com"" target=""_self""><img alt=""Select Certificate"" class=""aligncenter size-medium wp-image-11275"" height=""443"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/87/Select-Certificate-620x443.png"" srcset="""" width=""620""/></a></p>
<p>Next, you must select one or more devices that will be included in this provisioning profile. The corresponding identifiers for these devices must be registered with your development account. Your app will only be testable on these devices.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Device Selection for Provisioning profile"" class=""aligncenter size-medium wp-image-11276"" height=""438"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/87/Device-Selection-for-Provisioning-profile-620x438.png"" srcset="""" width=""620""/></a></p>
<p>The final step involves providing a suitable name for the profile and clicking the Generate button. When the profile is created, you will be provided an option to download it onto your computer.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Download iOS Provising Profile"" class=""aligncenter size-medium wp-image-11277"" height=""436"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/87/Download-iOS-Provising-Profile-620x436.png"" srcset="""" width=""620""/></a></p>
<p>If you were to now click the All link under the Provisioning section on the left side menu, you should see an entry for the new profile in the list of available profiles. You can also download a provision- ing profile from this list.</p>
<p>Once the profile has been downloaded, simply locate it in the Downloads folder on your Mac and double-click it to install it in Xcode.</p>
<h3><span id=""13_Enabling_Xcode_Project_Entitlements"">1.3. Enabling Xcode Project Entitlements</span></h3>
<p>Create a new project in Xcode using one of the standard iOS application templates. In the Project Options dialog box, make sure you provide the correct value for the Product Name and Organization Identifier fields so as to create the same App ID that was registered on the iOS Provisioning Portal. For instance, the App ID you registered was <code>com.satish.swiftcloud- test</code>, use <code>swifticloudtest</code> for the Product Name field and <code>com.satish</code> for the Company Identifier field.</p>
<p>Applications that use iCloud must be signed with iCloud-specific entitlements. These entitlements ensure that only your applications can access the documents that they create. To enable entitlements, select the project’s root node in the project navigator and the appropriate build target. Ensure the Capabilities tab is selected.</p>
<p>Locate the iCloud node and enable it. You may be asked to provide your iOS developer accounts credentials when you enable the iCloud entitlement. Because this article is about iCloud document storage, ensure the iCloud Documents checkbox is checked.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""nabling Relevant Entitlements in Xcode Project"" class=""aligncenter size-medium wp-image-11278"" height=""369"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/87/nabling-Relevant-Entitlements-in-Xcode-Project-620x369.png"" srcset="""" width=""620""/></a></p>
<h2><span id=""2_Checking_iCould_Service_Availablity"">2. Checking iCould Service Availablity</span></h2>
<p>If your application intends to make use of the iCloud Storage APIs, you must ensure that the service is available to the application. This may not necessarily be the case if, for example, the user has not set up iCloud on the device.</p>
<p>To check for service availability, use the <code>URLForUbiquityContainerIdentifier()</code> method of the <code>NSFileManager</code> class. This method requires one String parameter that specifies a container identifier that your application uses.</p>
<p>If this method succeeds, the return value is an NSURL instance that identifies the container directory. If the method fails, the return value is nil.</p>
<p>If your application uses only one container identifier, or you want to use the main container identifier for the application, pass nil for the parameter. If your application accesses multiple containers, you must call this method for each container identifier to ensure you have access to each container. The following code snippet shows how to use this method for the main container identifier:</p>
<pre class=""prettyprint lang-c"">let folderURL = NSFileManager.defaultManager().URLForUbiquityContainerIdentifier(nil)
if let unwrappedFolderURL = folderURL {
       //cloud access is available
}
else {
      //cloud access is not available.
}
</pre>
<h2><span id=""3_Using_iCloud_DocumentStorage"">3. Using iCloud Document Storage</span></h2>
<p>Any file stored by your application on iCloud must be managed by a file presenter object. A file presenter is an object that implements the NSFilePresenter protocol. Essentially, a file presenter acts as an agent for a file. Before an external source can change the file, the file presenter for the file is notified. When your app wants to change the file, it must lock the file by making its changes through a file coordinator object. A file coordinator object is an instance of the NSFileCoordinator class.</p>
<p>The simplest way to incorporate file presenters and coordinators in your application is to have your data classes (also known as model classes) subclass <code>UIDocument</code>. The UIDocument class implements the methods of the <code>NSFilePresenter</code> protocol and handles all of the file-related management. At the most basic level, you will need to override two UIDocument methods:</p>
<pre class=""prettyprint lang-c"">public func loadFromContents(contents: AnyObject, ofType typeName: String?) throws

public func contentsForType(typeName: String) throws -&gt; AnyObject
</pre>
<p>The <code>loadFromContents(contents, ofType)</code> method is overridden by your <code>UIDocument</code> subclass  and is called when the application needs to read data into its data model.</p>
<p>The first parameter of this method, contents, encapsulates the document data to be read. In the case of at files, contents is an instance of an NSData object. It can also be an NSFileWrapper instance if the data being read corresponds to a file package. The typeName parameter indicates the file type of the document.</p>
<p>If you cannot load the document for some reason, you should throw an exception encapsulating the reason for failure.</p>
<p>The <code>contentsForType()</code> method is also overridden by your UIDocument subclass and is called when the application saves data to a file. This method must return an NSData instance that will be written to the file. If you cannot return an NSData instance for some reason, you throw an exception that encapsulates the reason for failure.</p>
<p>The following code presents a simple UIDocument subclass called <code>SwiftiCloudTest</code>. The example assumes that the application where this class is used has a rather simple data model consist- ing of a single String instance.</p>
<pre class=""prettyprint lang-c"">import UIKit
enum DocumentReadError: ErrorType { 
	case InvalidInput 
} 

enum DocumentWriteError: ErrorType { 
	case NoContentToSave 
}

class SwiftCloudTestDocument: UIDocument { 
	var documentContents:String? 
	override init(fileURL url: NSURL) {
	 	super.init(fileURL: url) 
	} 
	
	override func loadFromContents(contents: AnyObject, ofType typeName: String?) throws { 
		if let castedContents = contents as? NSData { 
			documentContents = NSString(data: castedContents, encoding: NSUTF8StringEncoding) as? String 
		}else { 
			documentContents = nil 
			throw DocumentReadError.InvalidInput
		} 
	}

	override func contentsForType(typeName: String) throws -&gt; AnyObject { 
		if documentContents == nil {
			throw DocumentWriteError.NoContentToSave 
		} 
		return 	documentContents!.dataUsingEncoding(NSUTF8StringEncoding)! 
	} 
}
</pre>
<h3><span id=""31_Creating_a_New_iCloud_Document"">3.1. Creating a New iCloud Document</span></h3>
<p>To create a new document, initialize an instance of your UIDocument subclass by using the <code>init(fileURL url: NSURL)</code> initializer and then call <code>saveToURL(url, saveOperation, completionHandler)</code> on the instance.</p>
<p>The initializer requires a single <code>NSURL</code> parameter that identifies the location where document data is to be written. This URL is usually composed by appending a filename in the Documents subdirectory to the path to an iCloud container. For instance, to create a new document on iCloud called <code>phoneNumber.txt</code>, you could use the following snippet:</p>
<pre class=""prettyprint lang-c"">let containerURL = NSFileManager.defaultManager().URLForUbiquityContainerIdentifier(nil)
let documentDirectoryURL = containerURL!.URLByAppendingPathComponent(""Documents"")
let documentURL = documentDirectoryURL.URLByAppendingPathComponent(""phoneNumber.txt"")
let cloudDocument:SwiftCloudTestDocument = SwiftCloudTestDocument(fileURL: documentURL)
cloudDocument.saveToURL(cloudDocument.fileURL, forSaveOperation: UIDocumentSaveOperation.ForCreating) {
(Bool success) -&gt; Void in if (success) {
	// document was created successfully. 
	}

}
</pre>
<p>The <code>saveToURL(url, saveOperation, completionHandler)</code> method is described below in this article</p>
<h3><span id=""32_Savinga_Document_to_iCloud"">3.2. Saving a Document to iCloud</span></h3>
<p>Once you have an instance of a <code>UIDocument</code> subclass, saving it to iCloud is simply a matter of call- ing the <code>saveToURL(url, saveOperation, completionHandler)</code> method on it. The first parameter to this method is an <code>NSURL</code> instance that contains the target URL. You can compose this URL in the same manner as when you instantiated your UIDocument subclass.</p>
<p>If, however, you want to retrieve the URL corresponding to an existing UIDocument subclass, simply use the fileURL property of the subclass. Thus, if <code>cloudDocument</code> is an instance of a <code>UIDocument</code> subclass, you can retrieve the URL used when it was instantiated using the following code:</p>
<pre class=""prettyprint lang-c"">Let documentURL = cloudDocument.fileURL
</pre>
<p>The second parameter is a constant that is used to indicate whether the document contents are being saved for the first time, or overwritten. It can be either of:</p>
<ul>
<li>UIDocumentSaveOperation.ForCreating</li>
<li>UIDocumentSaveOperation.ForOverwriting</li>
</ul>
<h3><span id=""33_Opening_an_Existing_iCloud_Document"">3.3. Opening an Existing iCloud Document</span></h3>
<p>To open an existing document, allocate and initialize an instance of your UIDocument subclass and call <code>openWithCompletionHandler()</code> on the instance. For example, you could open a le called <code>phoneNumbers.txt</code> from iCloud using the following snippet:</p>
<pre class=""prettyprint lang-c"">let containerURL = NSFileManager.defaultManager().URLForUbiquityContainerIdentifier(nil)
let documentDirectoryURL = containerURL!.URLByAppendingPathComponent(""Documents"")
let documentURL = documentDirectoryURL.URLByAppendingPathComponent(""phoneNumber.txt"")
let cloudDocument:SwiftCloudTestDocument = SwiftCloudTestDocument(fileURL: documentURL)
cloudDocument.openWithCompletionHandler { (BOOL success) -&gt; Void in
if (success) {
    // cloud document opened successfully!

}
}
</pre>
<h3><span id=""34_Searching_for_Documents_on_iCloud"">3.4. Searching for Documents on iCloud</span></h3>
<p>Often, you will need to search iCloud container directories for documents. To do this, you need to create a search query using an NSMetadataQuery instance, set up an appropriate search filter, and execute the query.</p>
<p>Queries have two phases: an initial search phase and a second live-update phase. During the live- update phase, updated results are typically available once every second. The following code snippet builds a search query:</p>
<pre class=""prettyprint lang-c"">let searchQuery:NSMetadataQuery = NSMetadataQuery() searchQuery.searchScopes = [NSMetadataQueryUbiquitousDocumentsScope];
</pre>
<p>The searchScopes property allows you to specify an array of directory strings over which the search should execute. To specify the iCloud container folder as the search target, you provide an Array instance with a single object:</p>
<pre class=""prettyprint lang-c"">NSMetadataQueryUbiquitousDocumentsScope
</pre>
<p>Before you can execute the query, you need to specify a search filter. Search filters are also known as predicates and are instances of the NSPredicate class. The following code snippet creates an NSPredicate instance that filters out a file with a specific name:</p>
<pre class=""prettyprint lang-c"">let documentFileName = ""cloudDocument.txt""
let predicate = NSPredicate(format: ""%K == %@"", argumentArray: [NSMetadataItemFSNameKey, documentFileName])
</pre>
<p>To apply the predicate to the search query, use the predicate property on the NSMetadataQuery instance:</p>
<pre class=""prettyprint lang-c"">searchQuery.predicate = predicate
</pre>
<p>Search queries execute asynchronously. When the query has finished gathering results, your application will receive the NSMetadataQueryDidFinishGatheringNotification notification message. Use the following code snippet to set up a method in your code called <code>queryDidFinish()</code> to be called when this notification is received:</p>
<pre class=""prettyprint lang-c"">NSNotificationCenter.defaultCenter().addObserver(self, selector: ""queryDidFinish:"",
name: NSMetadataQueryDidFinishGatheringNotification , object: searchQuery)
</pre>
<p>Finally, to start the query, call the startQuery method of the <code>NSMetadataQuery</code> instance:</p>
<pre class=""prettyprint lang-c"">searchQuery.startQuery()
</pre>
<p>When you receive the notification message, you can find out the number of results returned by the search by querying the resultCount property of the <code>NSMetadataQuery</code> instance:</p>
<pre class=""prettyprint lang-c"">let numResults = searchQuery.resultCount
</pre>
<p>To retrieve an NSURL instance for each result returned by the search query, you can use a simple for loop:</p>
<pre class=""prettyprint lang-c"">for (var resultIndex = 0; resultIndex &lt; numResults; resultIndex++) {
	let item:NSMetadataItem? = searchQuery.results[resultIndex] as? NSMetadataItem
	if let unwrappedItem = item {
		let url = unwrappedItem.valueForAttribute(NSMetadataItemURLKey)
	}
}
</pre>
<p>If you do not want the search query to continue returning results, use the following code snippet to stop it:</p>
<pre class=""prettyprint lang-c"">searchQuery.disableUpdates()
searchQuery.stopQuery()
</pre>
",0,"standard","post"
"Quick Settings Tile API Example in Android N","quick-settings-tile-api-example-in-android-n","Quick settings are undoubtedly one of the most popular features in Android devices. It provides a convenient way&hellip;","LIVE","<p>Quick settings are undoubtedly one of the most popular features in Android devices. It provides a convenient way to quickly change the device settings or key actions directly from the notification panel.</p>
<p>Like always, Google never disappoints developers. This time, Android N introduced the new Quick Settings Tile API and allow developers to add their own quick setting actions. Now Quick Settings Tile adds more room for additional custom actions and you can swipe left/right to access more settings.</p>
<p class=""wp-alert info"">Please note, Quick Settings tiles are reserved for controls or actions that are either urgently required or frequently used, and should not be used as shortcuts to launching an app.</p>
<p>Android Quick Settings Tiles can only have icons of a single color. It can be tinted to either white or grey. You can handle click, double-click action on the tiles but the long press is restricted only to few system apps.</p>
<h3>Android Quick Settings API Example</h3>
<p>In this tutorial, we will see how to use the Quick Settings Tile API in Android N to register a custom tile action. The sample application will add a custom action to quick settings and when clicked it will launch an activity.</p>
<p>You need the following perquisites to run this code sample.</p>
<ul>
<li>Android Studio version 2.0+</li>
<li>A test device or emulator configuration with Android version 6.0+</li>
</ul>
<p>Adding a tile to quick settings involves two steps. First you need to declareQuick Settings Tile in <code>AndroidManifest.xml</code> file. Add the following code snippets inside <code>&lt;application&gt;</code> element.</p>
<pre class=""prettyprint lang-xml"">&lt;service
    android:name=""com.stacktips.example.MyAppTileService""
    android:icon=""@drawable/tile_icon""
    android:label=""@string/tile_label""
    android:permission=""android.permission.BIND_QUICK_SETTINGS_TILE""&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=""android.service.quicksettings.action.QS_TILE"" /&gt;
    &lt;/intent-filter&gt;
&lt;/service&gt;
</pre>
<p>Let us now extend the <code>TileService</code> class to respond the Tile events and handle click action to launch an activity when user clicking on the Quick Settings Tile. You can optionally override the following methods to perform different actions when the Tile state changes.</p>
<table>
<tbody>
<tr>
<td>onTileAdded()</td>
<td>Called when user adds the tile to the quick settings from the edit interface</td>
</tr>
<tr>
<td>onTileRemoved()</td>
<td>Called when the tile is removed from the quick settings using the edit interface.</td>
</tr>
<tr>
<td>onStartListening()</td>
<td>Called when the tile is brought into the listening state.</td>
</tr>
<tr>
<td>onStopListening()</td>
<td>Called when the tile is brought out of the listening state.</td>
</tr>
<tr>
<td>onClick()</td>
<td>Called when the tile is clicked.</td>
</tr>
</tbody>
</table>
<p><strong>MyAppTileService.java</strong></p>
<pre class=""prettyprint lang-java"">public class MyAppTileService extends TileService {
    @Override
    public void onDestroy() {
        super.onDestroy();
    }

    @Override
    public void onTileAdded() {
        super.onTileAdded();
    }

    @Override
    public void onTileRemoved() {
        super.onTileRemoved();
    }

    @Override
    public void onStartListening() {
        super.onStartListening();
    }

    @Override
    public void onStopListening() {
        super.onStopListening();
    }

    @Override
    public void onClick() {
        super.onClick();
        //Start main activity
        startActivity(new Intent(this, MainActivity.class));
    }
}
</pre>",0,"standard","post"
"Required Experienced Technical Content Writers for Stacktips.com","required-experienced-technical-content-writers-for-stacktips-com","Hello there! Have an interest in tech world? Find yourself spending a large portion of your day reading blogs&hellip;
","LIVE","<p>Hello there! Have an interest in tech world? Find yourself spending a large portion of your day reading blogs and news sites? Maybe it’s time to start writing and share your thoughts for others to read.</p>
<p>Stacktips.com is now looking for experienced and passionate freelance content writers to write tutorials, how-to guides, code snippets on trending topics. The position is paid and you will be working remotely.</p>
<p>We pay writers per article based on the subject matter and quality but not based on a ‘per word’. Along with some extra income, we will help you to boost reputation of your online profile. If you have a website, or blog, you can drive traffic and get more followers on social networks.</p>
<h3>What you’ll get to do</h3>
<ul>
<li>Write news tech posts on IOT, Mobile applications and innovation</li>
<li>Share an Startup story</li>
<li>Produce product comparisons and reviews</li>
<li>Write tutorial series on new technologies or frameworks (Angular JS, NodeJS, Swift, iOS programming, WordPress, etc.)</li>
<li>We are open to new sections that might interest our readers. If you have a topic in mind just let us know.</li>
</ul>
<h3>Requirements:</h3>
<ul>
<li>Must be proficient in the English language (spelling, grammar, diction)</li>
<li>Unique voice and organized writing style</li>
<li>Previous experience writing for blogs, school newspapers, or something similar</li>
<li>Knowledge of WordPress is a bonus</li>
</ul>
<p>To be considered for this role please send us a sample article. Your previous writings if any, will do.</p>
<p>If you meet the above requirement and want to join the team, then email your application to editor[@]stacktips.com.</p>
<p>Cheers<br/>
– The Stacktips Editor</p>
",0,"standard","post"
"Ziltag: Web Plugin that Turns Images Into Conversation","ziltag-web-plugin-that-turns-images-into-conversation","Ziltag is a new, intuitive, and powerful tool for bloggers/editors. The plugin is now in open beta for&hellip;
","LIVE","<p><a href=""https://ziltag.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Ziltag</a> is a new, intuitive, and powerful tool for bloggers/editors. The plugin is now in open beta for all websites. You can get the exclusive plugin script by joining for free at ziltag.com.</p>
<p>As Ziltag’s tagline, “Turn Images into Conversation” suggests, it allows users to tag &amp; write on anything inside images, breaking the  boosting interaction and engagement between bloggers and their readers.</p>
<h2>How It Works?</h2>
<p>Ziltag follows very simple steps while it comes to installation. All you need to do is visit ziltag.com and join for free. Once you follow the steps and enter your website URL, Ziltag will generate a lean one-line script for you. Copy the script and paste in your HTML to install it. (If you are using WordPress, you can download the <a href=""https://github.com/ziltag/ziltag-wp/releases/latest"" rel=""nofollow noopener noreferrer"" target=""_blank"">WordPress Plugin</a> and read the <a href=""https://ziltag.com/dashboard/guide"" rel=""nofollow noopener noreferrer"" target=""_blank"">guide</a>.)</p>
<p>When installed, every image on your website will turn “taggable”, and you can easily add information to something specific appear in the image. For example, a food blogger can add recipes, chef bio, and product link; a craft blogger can add how-tos, material intro, and purchase link; a tech blogger can add tech news, codes, and gadget reviews, all on one image and share to readers. In short, no matter running which kind of blog/website, Ziltag’s users can enrich a single image with more than one story.</p>
<h2>Ziltag Features</h2>
<p>Ziltag web plugin comes with many rich features to help you get more out of your images. It provides plugins for popular CMS platforms including Wordpress, Tumblr and Blogger. If you don’t use any of the above CMS for your website, you can also integrate it easily to your self-hosted websites.</p>
<p>Following are some of the Ziltag feature highlights:</p>
<h3>1. Click and write</h3>
<p>Adding tags on images is very easy and intuitive. When you find something interesting to write in the image, hover on that image and click the Z icon on the top-right corner to bring up the pop-up. Click anywhere on image and start writing. When finished, hit the post button to post your tag.</p>
<p>If you want to include a YouTube video with the tag, you can directly paste the link when you are writing. The video will automatically be fetched and displayed.</p>
<p><a href=""/articles/ziltag-web-plugin-that-turns-images-into-conversation/attachment/ziltag-web-pugin-for-tagging"" rel=""attachment wp-att-11226""><img alt=""Ziltag Web Pugin for Tagging Image"" class=""aligncenter size-medium wp-image-11226"" height=""376"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/90/Ziltag-Web-Pugin-for-Tagging-620x376.png"" srcset="""" width=""620""/></a></p>
<h3>2. One click to get info</h3>
<p>All Ziltag actions start with hovering the cursor on the image. Hover will trigger the Z icon and all tags that have been posted on the image. Click any of the blinking tag to read the content. You can jump from one tag to another just by clicking another tag and start reading.</p>
<p><a href=""/articles/ziltag-web-plugin-that-turns-images-into-conversation/attachment/ziltag-web-pugin-example"" rel=""attachment wp-att-11227""><img alt=""Ziltag Web Pugin Example"" class=""aligncenter size-medium wp-image-11227"" height=""376"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/90/Ziltag-Web-Pugin-Example-620x376.png"" srcset="""" width=""620""/></a></p>
<p>No matter your blog is for food, news, crafts, photography, travel, lifestyle, technology, or just personal journal, you can find a good use of Ziltag on it. The direct communication that occur on the image is a new way for readers to interact with contents on your website.</p>
<h3>3. Join the discussion and be notified</h3>
<p>Everyone can leave a comment for each tag they have read and stay up to date with the discussion. A notification email will be sent when someone else has posted a comment on the thread.</p>
<p><a href=""/articles/ziltag-web-plugin-that-turns-images-into-conversation/attachment/ziltag-web-plugin-discussion"" rel=""attachment wp-att-11225""><img alt=""Ziltag Web Plugin Discussion"" class=""aligncenter wp-image-11225 size-medium"" height=""296"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/90/Ziltag-Web-Plugin-Discussion-e1470601166268-620x296.png"" srcset="""" width=""620""/></a></p>
<p>Contents, including tags and comments, are displayed on a real time manner. Readers can read the most updated version without refreshing the page.</p>
<h3>4. Fast &amp; powerful</h3>
<p>The advanced technology makes loading speed of tags fast and reliable, making reading on Ziltag a smooth and enjoyable experience. As the developer team of Ziltag said, zero load time for each tag has always been their goal.</p>
<h3>5. Easy sharing</h3>
<p>Every tag is shareable. If you find any interesting piece of information and would like to share to your followers on Twitter or friends on Facebook, click the share button and it will share to your selected platform.</p>
<p>Ziltag is a great tool for bloggers/editors because it is fast, easy to use, interesting, reliable, and free! If you need a plugin for your blog to make images interactive, Ziltag is a perfect choice. It is in open beta now so you can give their team your feedbacks to tune the product to fit your need.</p>
<p>Watch the intro video to know how Ziltag it works.<br/>
<iframe allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen="""" frameborder=""0"" height=""675"" loading=""lazy"" src=""https://www.youtube.com/embed/ic2-Ascvte4?feature=oembed"" title=""Introducing Ziltag--web plugin that revitalize your images."" width=""1200""></iframe></p>
<p>Visit ziltag.com to get your plugin or follow <a href=""https://twitter.com/ziltagapp"" rel=""nofollow noopener noreferrer"" target=""_blank"">@ZiltagApp</a> on Twitter.</p>
",0,"standard","post"
"Customize Your WordPress Admin Using Smart Dashboard Extras Plugin","customize-your-wordpress-admin-using-smart-dashboard-extras-plugin","Use Smart Dashboard Extra plugin to customize your WordPress admin dashboard by selectively removing interface elements and add more features.
","LIVE","<p>Use <a href=""https://wordpress.org/plugins/smart-dashboard-extras/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Smart Dashboard Extra plugin</a> to customize your WordPress admin dashboard by selectively removing interface elements and add more features. This Plugin comes handy with set of WordPress hooks, to customize admin interface elements in your WordPress dashboard. This also adds some extra important features that you always wanted to have.</p>
<h3>WordPress Admin Features</h3>
<p>Currently the Smart Dashboard Extra plugin supports following features:</p>
<ul>
<li>It adds the contributors the ability to upload media</li>
<li>Limit contributors and authors to their own post</li>
<li>Notify website administrator when another Administrator logged into WordPress admin dashboard</li>
</ul>
<p><a href=""/articles/customize-your-wordpress-admin-using-smart-dashboard-extras-plugin/attachment/smart-dashboard-admin-settings"" rel=""attachment wp-att-11197""><img alt=""Smart Dashboard Admin Settings"" class=""aligncenter size-medium wp-image-11197"" height=""386"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/92/Smart-Dashboard-Admin-Settings-620x386.png"" srcset="""" width=""620""/></a></p>
<h3>Dashboard Customisations</h3>
<ul>
<li>Remove default WordPress logo from the in the admin bar</li>
<li>Remove “Dashboard” sidebar menu links for non admin users.</li>
<li>Remove contextual \”Help\” links</li>
<li>Remove all dashboard widgets for non admin.</li>
<li>Customize or hide “Thank you for creating with WordPress” in footer</li>
<li>Remove WordPress version in the footer for non admin</li>
</ul>
<p><a href=""/articles/customize-your-wordpress-admin-using-smart-dashboard-extras-plugin/attachment/smart-dashboard-customizations"" rel=""attachment wp-att-11196""><img alt=""Smart Dashboard Customizations"" class=""aligncenter size-medium wp-image-11196"" height=""386"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/92/Smart-Dashboard-Customizations-620x386.png"" srcset="""" width=""620""/></a></p>
<p> </p>
<h3>Install Smart Dashboard Extras WordPress Plugin</h3>
<p>You may install the plugin directly via the built-in WordPress plugin installer or using FTP method. If you use FTP method, you first need to download Plugin form WordPress plugin directory.</p>
<ol>
<li>Once downloaded, Unzip <code>st-smart-dashboard-extras.zip</code> inside the <code>/wp-content/plugins/</code>directory for your site</li>
<li>Activate the plugin through the \’Plugins\’ admin menu in WordPress</li>
<li>Click on the “Smart Dashboard Extra” menu item in your WordPress dashboard to customize the plugin settings.</li>
<li>Select “Remove all WordPress Dashboard Widgets” from Dashboard Customisation settings tab and click “Save Changes” button.</li>
</ol>
",0,"standard","post"
"URL Shortening Services Similar To Google URL Shortener and TinyURL","url-shortening-services-similar-to-google-url-shortener","In this post we will look at some of the best URL Shortening services similar to Google URL Shortener and Tinyurl. The URL Shortening services are gaining traction in the age of twitter and smart messaging.
","LIVE","<p>The URL (Uniform Resource Locator) Shortening services are gaining traction in the age of twitter and smart messaging, when the number of characters really matters. They are used for taking the long URLs and squeezes them into short form to make a link that is easier to share, tweet, or email to friends.</p>
<p>For example, the URL “http://stacktips.com/user/nilan” can be shortened to “http://goo.gl/7367BB”. It is basically a redirect service. When the short URL is opened it will be redirected to the original web link.</p>
<p>There are various reasons why people use URL shortening services. Following are some of them:</p>
<ul>
<li>Regular long URLs are often unpleasing and hard to spell or remember</li>
<li>Due to character limit restrictions for services such as Twitter or SMS</li>
<li>Track link clicks or disguise the original web address.</li>
<li>Developers use the URL shortening services to present long hierarchy of complex URL path or web session related informations.</li>
</ul>
<p>We look at some of the best URL Shortening services that you might consider using while converting your long your short.</p>
<h3>1. Google URL Shortener</h3>
<p>Like any other Google product, the Google URL shortener is one of the free, simple and no nonsense solution. Due to Google’s brand value, it is most trusted and popular among users. To create a shortened URL, just visit the Google URL shortener site at <a href=""http://goo.gl/"" rel=""nofollow noopener noreferrer"" target=""_blank"">goo.gl</a> and paste your long url to generate it’s short form.</p>
<p><a href=""/articles/url-shortening-services-similar-to-google-url-shortener/attachment/google-url-shortener"" rel=""attachment wp-att-11184""><img alt=""Google URL Shortener"" class=""aligncenter size-medium wp-image-11184"" height=""320"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/93/Google-URL-Shortener-620x320.png"" srcset="""" width=""620""/></a></p>
<p>All the short links you generate are private and will not show up for other users. You can login with your Google Account and take advantage of additional features such as;</p>
<ul>
<li>Track the use of your short link</li>
<li>Save the short links to your goo.gl account</li>
<li>Create a unique short URL each time</li>
</ul>
<p>Google URL shortner also provides the <a href=""https://developers.google.com/url-shortener/v1/getting_started"" rel=""nofollow noopener noreferrer"" target=""_blank"">API for developers</a> to integrate its service to your application. It’s REST and JSON based architecture allows you to easily integrate in any programming language, wether you use in PHP, Java or other languages.</p>
<h3>2. bitly</h3>
<p>The bitly is yet another strong contender to goo.gl. It allows you to shorten, share and measure the links. You can customise the the short URLs to fit your brand name and make it easy to memorise and share.</p>
<p>You can use bitly URL shortener directly visiting <a href=""https://bitly.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://bitly.com/</a> or use their mobile app. Download bitly form <a href=""https://play.google.com/store/apps/details?id=com.bitly.app"" rel=""nofollow noopener noreferrer"" target=""_blank"">Google Play</a> or <a href=""https://itunes.apple.com/gb/app/bitly/id525106063?mt=8"" rel=""nofollow noopener noreferrer"" target=""_blank"">Apple App Store</a>.</p>
<p>The enterprise version comes with API support and powerful dashboard with fully integrated Analytics to get a deeper level of understanding on how the links are performing.</p>
<p><iframe allow=""autoplay; fullscreen; picture-in-picture"" allowfullscreen="""" frameborder=""0"" height=""675"" loading=""lazy"" src=""https://player.vimeo.com/video/170191890?h=bd75bdb7a8&amp;dnt=1&amp;app_id=122963"" title=""Why Optimizing the Link is Key to Customer Experience"" width=""1200""></iframe></p>
<div class=""stage-pod stage-pod-light"" id=""tour-integrate""></div>
<h3>3. TinyURL</h3>
<p>TinyURL has been around for some time. It is possibly one of the best known as one of the standard URL shortening services. It allows you to choose custom alias and prepare the short link of your choice. However the alias name is restricted to only to letters, numbers and dashes.</p>
<p>This is very handy for creating memorable short URLs that are easy to communicate, or if you’re quoting them over the phone.</p>
<p>Checkout <a href=""http://tinyurl.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.tinyurl.com</a> for more informations.</p>
<h3>4. add.ly</h3>
<p>The add.ly is used to shorten and share long URL. It provides a smart way to monetize your link by placing inline ads. Every time someone visit your short link, a page with advertisement displayed for few seconds and that enables you to earn money.</p>
<p>Developers can integrate add.ly service to their website or app using their easy-to-use API and generate an AdF.ly link on the fly.</p>
<p>Visit <a href=""http://adf.ly/"" rel=""nofollow noopener noreferrer"" target=""_blank"">add.ly</a> for more informations.</p>
<h3>5. Is.gd</h3>
<p>Is.gd is a another alternative to tinyurl. You can make your links lead to a preview page simply by including a hyphen at the end of the shortened address. This helps visitors check out the safety and reliability of the site before actually going there.</p>
<p>Visit <a class=""hawk-link-parsed"" href=""http://www.is.gd/"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.is.gd</a> for more information.</p>
",0,"standard","post"
"How to Remove all WordPress Widgets in Admin Dashboard","how-to-remove-all-wordpress-widgets-in-admin-dashboard","In this video tutorial, we will see how to remove all widgets from WordPress Dashboard. When you logged into your WordPress dashboard, you will notice several widgets such as Activity Stream, WordPress News, Quick Draft and few others widgets based on user role.
","LIVE","<p>In this video tutorial, we will see how to remove all widgets from your WordPress Dashboard. When you log in to your WordPress website admin dashboard, you will notice several widgets such as Activity Stream, WordPress News, Quick Draft and few others widgets based on user role.</p>
<p>Sometimes Widgets are very useful but, if you want to remove them, then this little hack will help you. You can remove those widgets either by using  our <a href=""https://wordpress.org/plugins/smart-dashboard-extras/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Smart Dashboard Extras</a> WordPress Plugin or you can directly use the PHP code snippet.</p>
<h3>Using Smart Dashboard Extras WordPress Plugin</h3>
<p>You may install the plugin directly via the built-in WordPress plugin installer or using the FTP method. If you use FTP method, you first need to download Plugin form WordPress plugin directory.</p>
<ol>
<li>Once downloaded, Unzip <code>st-smart-dashboard-extras.zip</code> inside the <code>/wp-content/plugins/</code>directory for your site</li>
<li>Activate the plugin through the \’Plugins\’ admin menu in WordPress</li>
<li>Click on the “Smart Dashboard Extra” menu item in your WordPress dashboard to customize the plugin settings.</li>
<li>Select “Remove all WordPress Dashboard Widgets” from Dashboard Customisation settings tab and click “Save Changes” button.</li>
</ol>
<h3>Remove all WordPress Widgets for non Admin</h3>
<p>Or if you’re familiar with php code, you can directly add the following code snippets to your <code>functions.php</code> file.</p>
<pre class=""prettyprint lang-php"">//Remove Dashboard Metabox Widgets for all users except Admin
add_action('wp_dashboard_setup', 'stsd_remove_dashboard_widget' );
function stsd_remove_dashboard_widget() {
	if (!current_user_can('manage_options')){
		global $wp_meta_boxes;
		unset($wp_meta_boxes['dashboard']['side']['core']['dashboard_primary']);
		unset($wp_meta_boxes['dashboard']['side']['core']['dashboard_secondary']);
		unset($wp_meta_boxes['dashboard']['side']['core']['dashboard_quick_press']);
		unset($wp_meta_boxes['dashboard']['normal']['core']['dashboard_incoming_links']);
		unset($wp_meta_boxes['dashboard']['normal']['core']['dashboard_right_now']);
		unset($wp_meta_boxes['dashboard']['normal']['core']['dashboard_plugins']);
		unset($wp_meta_boxes['dashboard']['side']['core']['dashboard_recent_drafts']);
		unset($wp_meta_boxes['dashboard']['normal']['core']['dashboard_recent_comments']);		
		unset($wp_meta_boxes['dashboard']['normal']['core']['dashboard_activity']);
	}
} 
</pre>
<p>The above code snippet, removes all of the default WordPress widgets for users other then administrators.</p>
",0,"standard","post"
"How to Limit Authors and Contributors to their Own Post in WordPress","limit-authors-and-contributors-to-their-own-post-in-wordpress","This little code hack will help you to limit your authors and contributors to their own posts in WordPress admin. Copy and past the following code in you function.php file.
","LIVE","<p>If you running a multi-author site, you will notice that all authors and contributors are able to see the posts from other users. Although they cannot edit or modify, you may not want them to see the posts which are under review or in the draft.</p>
<p>You can do this by installing third-party WordPress plugin such as <a href=""https://wordpress.org/plugins/view-own-posts-media-only/"" rel=""nofollow noopener noreferrer"" target=""_blank"">View Own Post Media Only</a>. But for this little job, I personally do not recommend to use any plugins.</p>
<p>This little code hack will help you to limit your authors and contributors to their own posts in WordPress admin. Copy and past the following code in you function.php file.</p>
<pre class=""prettyprint php"">if (current_user_can('contributor') || current_user_can('author')){
	add_filter('parse_query', 'filter_my_own_posts_query' );
}

function filter_my_own_posts_query( $wp_query ) {
    if ( strpos( $_SERVER[ 'REQUEST_URI' ], '/wp-admin/edit.php' ) !== false ) {
      global $current_user;
      $wp_query-&gt;set( 'author', $current_user-&gt;id );
     }
}
</pre>
",0,"standard","post"
"Best Online Payment Services Alternative to PayPal","best-online-payment-services-alternative-to-paypal","PayPal is is a giant in the online Payment space. PayPal makes it easy to send, receive and even request for money across borders. It is one of the most popular online payment service globally used by most of the merchants and users
","LIVE","<p>PayPal is is a giant in the online Payment space. PayPal makes it easy to send, receive and even request for money across borders. It is one of the most popular online payment service globally used by most of the merchants and users. As a user it is easy to use and for seller it provides API’s for seamless integration.</p>
<p>In my personal experience, while making a online purchase I always hesitate to provide credit card details, unless I personally trust the brand. There are always security concerns. However, if their payment method includes PayPal alternative, I choose PayPal and do the purchase straight away.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img align=""middle"" class=""aligncenter"" src=""/media/uploads/articles/96/Paypal-Payments-1.png"" srcset=""""/></a></p>
<p>Eying at the larger market potential, all other biggies including Google, Apple and Amazon are now entered into the online payments market. As the new services alternative to PayPal are emerging, the Golden crown of PayPal is beginning to slip. New services giving consumer a new way to pay, and compare with other services for better and cheaper offerings.</p>
<h2>PayPal Alternatives</h2>
<p>We look at some of the best online payment services alternatives PayPal that you might consider switching to, or using in conjunction.</p>
<h3><a href=""https://wallet.google.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">1. Google Wallet</a></h3>
<p>Launched in 2011, Google Wallet allows you to send and request money free and instantly from your smartphone. To send or receive money, download the Android or iPhone version of Google Wallet mobile application for free. You can use a debit card or link your bank account to Google Wallet, to cash out money received from others.</p>
<p>You can also able to send money to your friends or family directly through Gmail or phone number. Google’s 24*7 fraud monitoring system and purchase protection definitely deserves +1 compared to PayPal.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img align=""middle"" class=""aligncenter"" src=""/media/uploads/articles/96/Google-Wallet-1.png"" srcset=""""/></a></p>
<p>Checkout official Google Wallet support page to see <a href=""https://support.google.com/payments/answer/6220307?hl=en"" rel=""nofollow noopener noreferrer"" target=""_blank"">list of supported countries</a> where Google Payments is available.</p>
<h3><a href=""https://payments.amazon.co.uk/home"" rel=""nofollow noopener noreferrer"" target=""_blank"">2. Amazon Payments</a></h3>
<p>Amazon Payments is another alternative to PayPal,  from a web giant Amazon. Its payment service suit comes with different packages for different users. Merchants can integrate “Pay with Amazon” feature to simplify the payment process.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img align=""middle"" class=""aligncenter"" src=""/media/uploads/articles/96/Amazon-Payment-1.png"" srcset=""""/></a></p>
<p>Users can pay to any of the Amazon Payment integrated product or service by just login to Amazon account. You do not have to enter the credit card information in the merchant website while making a payment. For making Amazon payments you must have a credit card with U.S. billing address. Like Google Wallet,  Amazon WebPay also allows user to send and receive money.</p>
<h3><a href=""http://www.apple.com/uk/apple-pay/"" rel=""nofollow noopener noreferrer"" target=""_blank"">3. Apple Pay</a></h3>
<p>Apple Pay is yet another convenient, mobile payment and digital wallet service by Apple Inc. It allows users to make fast and secure payments using the iPhone, iPad and AppleWatch devices.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img align=""middle"" class=""aligncenter"" src=""/media/uploads/articles/96/Apple-Pay-1.png"" srcset=""""/></a></p>
<p>Apple Pay is fast, secure and easy to use. You don’t need to any application or enter any credentials while making a payment. Your payments can be authorised with device Touch ID. While phone is locked, just double-click the Home button to unlock your phone and access Wallet to quickly to authorise your purchases.</p>
<h3><a href=""https://www.payoneer.com/home/"" rel=""nofollow noopener noreferrer"" target=""_blank"">4. Payoneer</a></h3>
<p style=""text-align: left;"">Payoneer is a one of popular choice for professionals including freelancers and affiliate marketers for making internal payment transfers. Users can receive funds in different ways. Payoneer offers two different ways to use received funds. Through local bank transfer or global transfers or Payoneer reloadable credit card. Also you have the option to transfer amount to another Payoneer user.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img align=""middle"" class=""aligncenter"" src=""/media/uploads/articles/96/Payoneer-1.png"" srcset=""""/></a></p>
<p>Once you register for Payoneer service, the company will send you a prepaid MasterCard to your doorstep. After your card is activated, you can load money into the card from your local bank or other credit cards.</p>
<p>Payoneer works in more than 200 countries and is capable of processing transactions in around 100 currencies. Payoneer is an excellent solution when it comes to processing international transactions despite the fact that service is not available in some countries such as India</p>
<h3><a href=""http://www.paymate.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">5. PayMate</a></h3>
<p>Paymate is a great way for sellers based in Australia and New Zealand to get money from international buyers from many <a href=""http://www.paymate.com/cms/index.php?option=com_content&amp;view=article&amp;id=91"" rel=""nofollow noopener noreferrer"" target=""_blank"">different countries</a>. Sellers from the Australia and New Zealand can use Paymate on their website or on Ebay Australia for a small <a href=""http://www.paymate.com/cms/index.php/help/faqs/116"" rel=""nofollow noopener noreferrer"" target=""_blank"">fee</a>.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img align=""middle"" class=""aligncenter"" src=""/media/uploads/articles/96/Paymate-1.png"" srcset=""""/></a></p>
<p>There are a few things people are concerned about online shopping, be it their credit card information being at risk, the security of their mobile transaction, or not being able to get a refund if the item they purchased is unsatisfactory.</p>
",0,"standard","post"
"How to Customize YouTubePlayer Controls in Android","how-to-customize-youtubeplayer-controls-in-android","The Android YouTubePlayer allows you to customize the playback control by setting one of the style defined in YouTubePlayer.PlayerStyle enum. You can apply style to YouTubePlayer by calling setPlayerStyle method.","LIVE","<p>The YouTube Android Player allows you to customize the playback control by setting one of the style defined in YouTubePlayer.PlayerStyle enumeration. It currently support three styles <code>DEFAULT</code>, <code>MINIMAL</code> or <code>CHROMELESS</code>;</p>
<ul>
<li><em>YouTubePlayer.PlayerStyle.DEFAULT</em> – The default style, showing all interactive player controls.</li>
<li><em>YouTubePlayer.PlayerStyle.MINIMAL</em> – The minimal style displays only a time bar and play/pause controls.</li>
<li><em>YouTubePlayer.PlayerStyle.CHROMELESS</em> – A style that shows no interactive player controls. When you use CHROMELESS, you need to write your own controls for play, pause or seek operation.</li>
</ul>
<p>You can apply style to YouTubePlayer by calling <code>setPlayerStyle(PlayerStyle style)</code> method.</p>
<pre class=""prettyprint java"">player.setPlayerStyle(PlayerStyle.CHROMELESS);</pre>
<p>In our previous example, we saw How to use <a href=""/articles/youtube-android-player-api-example"">YouTube Android Player API and YouTubePlayerView</a>. In this example, we will customize the YouTubePlayer with custom player controls.</p>

<p><img alt=""Customize YouTubePlayer Controls in Android"" class=""alignnone wp-image-10812"" height=""391"" loading=""lazy"" src=""/media/uploads/articles/97/Customize-YouTubePlayer-Controls-in-Android.png"" srcset="""" width=""450""></p>
<h3><span id=""1_Add_YouTubePlayerView_to_View_Hierarchy""><span id=""41-add-youtubeplayerview-to-view-hierarchy"">Add YouTubePlayerView to View Hierarchy</span></span></h3>
<p>Let us first add the YouTubePlayerView view in your activity or fragment view hierarchy.</p>
<p>activity_custom_player.xml</p>
<pre class=""prettyprint xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    tools:context=""com.stacktips.youtube.MainActivity""&gt;

    &lt;com.google.android.youtube.player.YouTubePlayerView
        android:id=""@+id/youtube_player_view""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:background=""#ebeff2"" /&gt;

&lt;/LinearLayout&gt;
</pre>
<p>Let us now add the player controls right below <code>YouTubePlayerView</code> in <code>activity_custom_player.xml</code> layout.</p>
<pre class=""prettyprint xml"">&lt;LinearLayout
    android:id=""@+id/video_control""
    android:layout_width=""match_parent""
    android:layout_height=""wrap_content""
    android:background=""#444""
    android:gravity=""center_vertical""
    android:orientation=""horizontal""
    android:visibility=""gone""
    android:weightSum=""10""&gt;

    &lt;ImageButton
        android:id=""@+id/play_video""
        android:layout_width=""0dp""
        android:layout_height=""wrap_content""
        android:layout_margin=""5dp""
        android:layout_weight=""1""
        android:background=""@null""
        android:src=""@drawable/ic_play"" /&gt;

    &lt;ImageButton
        android:id=""@+id/pause_video""
        android:layout_width=""0dp""
        android:layout_height=""wrap_content""
        android:layout_margin=""5dp""
        android:layout_weight=""1""
        android:background=""@null""
        android:src=""@drawable/ic_pause"" /&gt;

    &lt;SeekBar
        android:id=""@+id/video_seekbar""
        android:layout_width=""0dp""
        android:layout_height=""wrap_content""
        android:layout_margin=""10dp""
        android:layout_weight=""6""
        android:max=""100""
        android:progress=""0"" /&gt;

    &lt;TextView
        android:id=""@+id/play_time""
        android:layout_width=""0dp""
        android:layout_height=""wrap_content""
        android:layout_margin=""5dp""
        android:layout_weight=""2""
        android:text=""--:--""
        android:textColor=""@android:color/white"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<h3><span id=""2_Add_INTERNET_Permission_in_AndroidManifest"">2. Add INTERNET Permission in AndroidManifest</span></h3>
<p>INTERNET permission is required to play video over internet. Add the following permission in your application <code>AndroidManifest.xml</code> file.</p>
<pre class=""prettyprint xml"">&lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;
</pre>
<h3><span id=""3_Initialize_YouTubePlayerView"">Initialize YouTubePlayerView</span></h3>
<p>When using YouTubePlayerView, your activity needs to extend&nbsp;<code><a href=""https://developers.google.com/youtube/android/player/reference/com/google/android/youtube/player/YouTubeBaseActivity.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">YouTubeBaseActivity</a></code>. Now let us create an Activity that extends&nbsp;YouTubeBaseActivity and&nbsp;initialize the YouTubePlayerView. We will add our own Play, Pause and Seek playback control.</p>
<pre class=""prettyprint java"">public class CustomPlayerControlActivity extends YouTubeBaseActivity 
        implements OnInitializedListener, View.OnClickListener {
    private static final String TAG = ""CustomPlayerControlActivity"";

    public static final String API_KEY = ""AIzaSyBx7v0YOb140fDO732fMx4l87raxezDWFw"";

    //https://www.youtube.com/watch?v=&lt;VIDEO_ID&gt;
    public static final String VIDEO_ID = ""-m3V8w_7vhk"";

    private YouTubePlayer mPlayer;

    private View mPlayButtonLayout;
    private TextView mPlayTimeTextView;

    private Handler mHandler = null;
    private SeekBar mSeekBar;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // attaching layout xml
        setContentView(R.layout.activity_custom_player);

        // Initializing YouTube player view
        YouTubePlayerView youTubePlayerView = (YouTubePlayerView) findViewById(R.id.youtube_player_view);
        youTubePlayerView.initialize(API_KEY, this);

        //Add play button to explicitly play video in YouTubePlayerView
        mPlayButtonLayout = findViewById(R.id.video_control);
        findViewById(R.id.play_video).setOnClickListener(this);
        findViewById(R.id.pause_video).setOnClickListener(this);

        mPlayTimeTextView = (TextView) findViewById(R.id.play_time);
        mSeekBar = (SeekBar) findViewById(R.id.video_seekbar);
        mSeekBar.setOnSeekBarChangeListener(mVideoSeekBarChangeListener);

        mHandler = new Handler();
    }

    @Override
    public void onInitializationFailure(Provider provider, YouTubeInitializationResult result) {
        Toast.makeText(this, ""Failed to initialize."", Toast.LENGTH_LONG).show();
    }

    @Override
    public void onInitializationSuccess(Provider provider, YouTubePlayer player, boolean wasRestored) {
        if (null == player) return;
        mPlayer = player;

        displayCurrentTime();

        // Start buffering
        if (!wasRestored) {
            player.cueVideo(VIDEO_ID);
        }

        player.setPlayerStyle(PlayerStyle.CHROMELESS);
        mPlayButtonLayout.setVisibility(View.VISIBLE);

        // Add listeners to YouTubePlayer instance
        player.setPlayerStateChangeListener(mPlayerStateChangeListener);
        player.setPlaybackEventListener(mPlaybackEventListener);
    }

    PlaybackEventListener mPlaybackEventListener = new PlaybackEventListener() {
        @Override
        public void onBuffering(boolean arg0) {
        }

        @Override
        public void onPaused() {
            mHandler.removeCallbacks(runnable);
        }

        @Override
        public void onPlaying() {
            mHandler.postDelayed(runnable, 100);
            displayCurrentTime();
        }

        @Override
        public void onSeekTo(int arg0) {
            mHandler.postDelayed(runnable, 100);
        }

        @Override
        public void onStopped() {
            mHandler.removeCallbacks(runnable);
        }
    };

    PlayerStateChangeListener mPlayerStateChangeListener = new PlayerStateChangeListener() {
        @Override
        public void onAdStarted() {
        }

        @Override
        public void onError(ErrorReason arg0) {
        }

        @Override
        public void onLoaded(String arg0) {
        }

        @Override
        public void onLoading() {
        }

        @Override
        public void onVideoEnded() {
        }

        @Override
        public void onVideoStarted() {
            displayCurrentTime();
        }
    };

    SeekBar.OnSeekBarChangeListener mVideoSeekBarChangeListener = new SeekBar.OnSeekBarChangeListener() {
        @Override
        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
            long lengthPlayed = (mPlayer.getDurationMillis() * progress) / 100;
            mPlayer.seekToMillis((int) lengthPlayed);
        }

        @Override
        public void onStartTrackingTouch(SeekBar seekBar) {

        }

        @Override
        public void onStopTrackingTouch(SeekBar seekBar) {

        }
    };

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.play_video:
                if (null != mPlayer &amp;&amp; !mPlayer.isPlaying())
                    mPlayer.play();
                break;
            case R.id.pause_video:
                if (null != mPlayer &amp;&amp; mPlayer.isPlaying())
                    mPlayer.pause();
                break;
        }
    }

    private void displayCurrentTime() {
        if (null == mPlayer) return;
        String formattedTime = formatTime(mPlayer.getDurationMillis() - mPlayer.getCurrentTimeMillis());
        mPlayTimeTextView.setText(formattedTime);
    }

    private String formatTime(int millis) {
        int seconds = millis / 1000;
        int minutes = seconds / 60;
        int hours = minutes / 60;

        return (hours == 0 ? ""--:"" : hours + "":"") + String.format(""%02d:%02d"", minutes % 60, seconds % 60);
    }


    private Runnable runnable = new Runnable() {
        @Override
        public void run() {
            displayCurrentTime();
            mHandler.postDelayed(this, 100);
        }
    };
}
</pre>",0,"standard","post"
"How to Configure Google Feedburner Feed for your Blog","how-to-configure-google-feedburner-feed-for-your-blog","If you’re serious about blogging, you must consider setting up Feeds for your blog as a first step when you setting up your blog. This post will show you how to setup and Google Feedburner account for your blog.
","LIVE","<p>Are you a setting up your new blog? Are you curious about making your blog post reachable to thousands of more readers? Then you must consider serving your blog post via feeds.</p>
<p>If you’re serious about blogging, you must consider setting up Feeds for your blog as a first step when you setting up your blog. This post will show you how to setup and Google Feedburner account for your blog.</p>
<h2>What are Feeds?</h2>
<p>Feeds are the are the way to distribute your website content beyond readers on browser. There are thousands of apps such as Feedly, Apple News, Facebook Instant Articles and many more RSS readers applications, that can read your website Feed and present your content to wider audience. Readers can also subscribe feeds via their email and get the content delivered directly to their email whenever new posts are published. This allows you to drive traffic to your website and you can also monetize your feeds.</p>
<p>According to web standards, there are different feed formats that are accepted. However  RSS and Atom are the most popular ones. Each of the different formats have their own specifications. If you’re a technical reader and want to learn more about the feed RSS specifications you can visit</p>
<p><a href=""http://cyber.law.harvard.edu/rss/rss.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">RSS Specification</a><a href=""https://tools.ietf.org/html/rfc4287"" rel=""nofollow noopener noreferrer"" target=""_blank"">Atom Specification</a></p>
<p>Some of the blogging platform such as WordPress, Tumblr, Blogger, etc. comes handy with RSS feed support. Checkout if your website already has an RSS feed.</p>
<p>Tumblr : <a href=""http://stacktips.tumblr.com/rss"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://stacktips.tumblr.com/rss</a><br/>Blogger : <a href=""http://prostacktips.blogspot.co.uk/feeds/posts/default"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://prostacktips.blogspot.co.uk/feeds/posts/default</a><br/>WordPress : <a href=""https://stacktips.wordpress.com/feed/"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://stacktips.wordpress.com/feed/</a><br/>WordPress (Self hosted): <a href=""http://stacktips.com/feed target="">http://stacktips.com/feed</a></p>
<p>All the blogging generates XML feed for your blog, they do not support other Google feedburner features such as email delivery.</p>
<h2>Why Google Feedburner Feed?</h2>
<p>Google Feedburner is one of the Free choice for website owners. This offers following features</p>
<ul>
<li>It’s the free and easy to setup</li>
<li>Offers free email newsletter subscription and delivery for unlimited users.</li>
<li>The email delivery time quick and guaranteed</li>
<li>Allows you to monetize your feeds using Adsense</li>
<li>Option to add Share button and various other tracking options</li>
</ul>
<p>Please note, Google Feedburner is seems to be an dead men’s show. There are no update since 2012. However it is still one of the most popular feed delivery platform widely used by bloggers.</p>
<h2>How to Configure Google Feedburner Feed?</h2>
<p>Visit the <a href=""https://feedburner.google.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">Google Feedburner</a> service page to configure your feed. You will be asked to login with your Google account.</p>
<p>Enter your website feed address in the text field and click “Next”. For example yourdomain.com/feed/</p>
<p><img align=""middle"" alt=""Claim Google Feedburner Feed"" class=""aligncenter"" src=""/media/uploads/articles/98/Claim-Google-Feedburner-Feed.png"" srcset=""""/></p>
<p> </p>
<p>The next step is to enter title and Feed address. Keep the title short and memorable.<br/>Now your feeds are live.</p>
<p><img align=""middle"" alt=""Google Feedburner Feed Title"" class=""aligncenter"" src=""/media/uploads/articles/98/Google-Feedburner-Feed-Title.png"" srcset=""""/></p>
<p> </p>
<p>The other steps are optional. You can Click on the Skip directly to Feed Management.</p>
",0,"standard","post"
"How to Send an Email with Attachment in Android","how-to-send-an-email-with-attachment-in-android","The following code snippet shows to send an email with image attachment in Android using Intent method.
","LIVE","<p>The following code snippet shows to send an email with image attachment in Android using the Intent method.</p>
<pre class=""prettyprint lang-java"">public static void sendEmail(Context context, String subject, String message, String imagePath) {
	Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);
	emailIntent.setType(""plain/text"");
	emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, subject);
	emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, message);
	
	if (imagePath != null &amp;&amp; imagePath.length() &gt; 0) {
		File file = urlToFile(imagePath);
		if (file != null &amp;&amp; file.getAbsolutePath() != null)
			emailIntent.putExtra(Intent.EXTRA_STREAM, file.getAbsolutePath());
	}
	
	context.startActivity(emailIntent);
}
</pre>
",0,"standard","post"
"How to Convert Pixels to Density Independent (DP) Pixels","how-to-convert-pixels-to-density-independent-dp-pixels","The following code snippet shows how to convert device specific pixels to density independent pixels. It returns a float value to represent dp equivalent to px value.
","LIVE","<p>The following code snippet shows how to convert device specific pixels to density independent pixels. It returns a float value to represent dp equivalent to px value</p>
<pre class=""prettyprint lang-java"">public static float convertPixelsToDp(float px, Context context){
    Resources resources = context.getResources();
    DisplayMetrics metrics = resources.getDisplayMetrics();
    float dp = px / (metrics.densityDpi / 160f);
    return dp;
}
</pre>
",0,"standard","post"
"Convert DP Unit to Equivalent Pixels in Android","how-to-convert-dp-unit-to-equivalent-pixels-in-android","The following code snippet shows how to converts dp unit to equivalent pixels, depending on device density. It returns a float value to represent px equivalent to dp depending on device density.
","LIVE","<p>The following code snippet shows how to converts DP unit to equivalent pixels, depending on device density. It returns a float value to represent px equivalent to dp depending on device density.</p>
<pre class=""prettyprint lang-java"">public static float convertDpToPixel(float dp, Context context){
    Resources resources = context.getResources();
    DisplayMetrics metrics = resources.getDisplayMetrics();
    float px = dp * (metrics.densityDpi / 160f);
    return px;
}
</pre>
",0,"standard","post"
"How to Generate Gravtar Image Url from Email in Java","how-to-generate-gravtar-image-url-from-email-in-java","The following code snippet shows how to generate Gravatar URLs from email address. This utility method alows you to pass the size of your email.
","LIVE","<p>The following code snippet shows how to generate Gravatar URLs from email address. This utility method allows you to pass the size of your email.</p>
<pre class=""prettyprint lang-java"">public String getGravatarUrl(String email, int size) {
    if (null == email) return null;

    final String hash = MD5Util.md5Hex(email.toLowerCase());
    final String gravtar = ""http://www.gravatar.com/avatar/%s?s=%s&amp;r=g&amp;d=404"";
    final String gravatarUrl = String.format(gravtar, hash, size);

    try {
        return URLEncoder.encode(gravatarUrl, ""UTF-8"");
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }
    return null;
}
</pre>
",0,"standard","post"
"How to Generate Unique File Name When Saving a File in Java","how-to-generate-unique-file-name-when-saving-a-file-in-java","The following code snippet shows how to get unique file name when saving file in java. It first checks if already a file exist with the specified name, then it appends a number to end.
","LIVE","<p>The following code snippet shows how to get a unique file name when saving the file in java. It first checks if already a file exists with the specified name, then it appends a number to the end.</p>
<pre class=""prettyprint lang-java"">public static File getUniqueFilePath(String parent, String child, String fileName) {
    File dir = new File(parent, child);
    String uniqueName = getUniqueFileName(parent, child, fileName);
    return new File(dir, uniqueName);
}

public static String getUniqueFileName(String parent, String child, String fileName) {
     final File dir = new File(parent, child);
     if (!dir.exists()) {
         dir.mkdirs();
     }

     int num = 0;
     final String ext = getFileExtension(fileName);
     final String name = getFileName(fileName);
     File file = new File(dir, fileName);
     while (file.exists()) {
         num++;
         file = new File(dir, name + ""-"" + num + ext);
     }
     return file.getName();
}

public static String getFileExtension(final String path) {
     if (path != null &amp;&amp; path.lastIndexOf('.') != -1) {
         return path.substring(path.lastIndexOf('.'));
     }
     return null;
}


public static String getFileName(String fileName) {
     return fileName.substring(0, fileName.lastIndexOf('.'));
}
</pre>
",0,"standard","post"
"How to Calculate Image Dimensions in Java","how-to-calculate-image-dimensions-in-java","The following code snippet shows how to calculate image dimension in java by reading the file from specified path.
","LIVE","<p>The following code snippet shows how to calculate image dimension in java by reading the file from specified path.</p>
<pre class=""prettyprint lang-java"">public static Dimension getImageDimension(final File path) {
    if (path == null) return null;

    Dimension result = null;
    String suffix = getFileExtension(path.toString());
    if (suffix.startsWith(""."")) {
        suffix = suffix.substring(1);
    }

    final Iterator<imagereader> iterator = ImageIO.getImageReadersBySuffix(suffix);
    if (iterator.hasNext()) {
        final ImageReader reader = iterator.next();
        try {
            final ImageInputStream stream = new FileImageInputStream(path);
            reader.setInput(stream);
            int width = reader.getWidth(reader.getMinIndex());
            int height = reader.getHeight(reader.getMinIndex());
            result = new Dimension(width, height);
        } catch (IOException e) {
        } finally {
            reader.dispose();
        }
    } else {
        logger.error(""No reader found for given format: "" + suffix);
    }
    return result;
}
</imagereader></pre>
",0,"standard","post"
"Beginners Guide: How to Install a WordPress Theme","beginners-guide-how-to-install-a-wordpress-theme","Are you looking to install a WordPress theme to your site? Follow our beginner&#8217;s guide with step by step instructions on how to install a WordPress theme.
","LIVE","<p>For WordPress websites, developers have covered a lot of ground and have created endless parade of beautiful themes for every niche you can think of: Multipurpose, magazine, eCommerce, portfolio, forums, directories, real estate, events, and more… you name it, and you can be sure to find free or premium (or freemium) themes with special functions built in or bundled just for your specific needs.</p>
<p>Anyone can install and customize the look, feel, and even function of their WordPress website’s front end, thanks to (almost) universally available, apparently countless, highly versatile, and awesome themes. In this post, I’ll walk you through different ways of WordPress theme installation based on their source. For instance, when your theme is:</p>
<h2>Install From the Theme Repository</h2>
<p>This is probably the most simplest method to install a WordPress theme for your site. This method only works if you are trying to install a theme that is available in WordPress.org official theme repository (free themes only). If you installing for a personal blog or looking for free themes, WordPress theme repository is a good starting point.</p>
<ol>
<li>You need to log in to your WordPress admin account. Once you reach the dashboard, click on <strong>Appearance &gt; Themes</strong>. Then click the <strong>Add New</strong> button on the top.</li>
<li>This brings you to a page showing all the themes form different developers. You can sort them by Popular, Featured, or Latest basis. You can also do a search by name, and use the advanced search filter to be specific about features.</li>
<li>Once you have found the theme of your choice, you can preview theme demo before installing by clicking <strong>Preview</strong> button.</li>
<li>When you ready, just click <strong>Install</strong> button to start the installation process. This will automatically download the theme and install it to your WordPress installation.</li>
<li>Once installation is completed, you will notice an “Installation successful” message with three links at the bottom. You can live preview the theme (with your website’s current widget and posted content). If you like how it looks, click on Activate to keep the changes.</li>
</ol>
<h2>Install From External Source</h2>
<p>In this method, you need to download your themes before installing it to your site. You can download free or premium themes from trusted theme providers. There are some of the renewed theme providers including iThemes, ElegantThemes, ThemeForest, StudioPress, etc. This method will work only for self hosted WordPress sites and is not applicable for WordPress.org users.</p>
<p class=""wp-alert info"">Note, If a theme is premium, do not look around for its “free/cracked” versions on the net. The cracked version of theme may work on your site but they can have hidden scripts or virus that can slow down your website.</p>
<p>When your theme is not from the official WordPress theme repository, you can install on your WordPress installation using two methods; Upload via WordPress Admin Dashboard or via FTP account.</p>
<h3>Upload via WordPress Admin Dashboard</h3>
<ul>
<li>You have to download the theme file (.zip compressed) from the source/developer website first. Once you have that, go to your WordPress Admin Dashboard, and click on <strong>Appearance</strong> &gt; <strong>Themes</strong>.</li>
<li>Click <strong>Add New</strong> and on the screen that follows, click <strong>Upload Theme</strong> button at the top.</li>
</ul>
<p><img alt=""Upload Theme to WordPress"" class=""alignnone size-full wp-image-10784"" height=""575"" loading=""lazy"" sizes=""(max-width: 1055px) 100vw, 1055px"" src=""/media/uploads/articles/105/Upload-Theme-to-WordPress.png"" srcset="""" width=""1055""/></p>
<ul>
<li>This brings you to a file upload screen. Choose the theme file you downloaded (.zip compressed – do not extract it) and click ‘Install Now’.</li>
<li>WordPress then begins the installation of your theme. Once it’s done, you’ll receive an ‘Installation successful’ message with three links at the bottom.</li>
</ul>
<p><img alt=""Preview WordPress Theme Installation"" class=""alignnone size-full wp-image-10785"" height=""378"" loading=""lazy"" sizes=""(max-width: 852px) 100vw, 852px"" src=""/media/uploads/articles/105/Preview-WordPress-Theme-Installation.png"" srcset="""" width=""852""/></p>
<ul>
<li>Click on Live Preview to test the theme appearance with your current widgets and posts and/or simply click Activate to keep the changes.</li>
<li>Then you can go to the Customizer or theme control panel (if your theme has it) to make any style changes or customizations in the theme.</li>
</ul>
<h3>Upload Theme via FTP</h3>
<p>This step is more technical than the first method. But it’s always good to learn about manual installation via FTP in case you have file restrictions on your website placed by server.</p>
<ul>
<li>Download compressed zip theme file from the (trusted!) source to your computer.</li>
<li>Unzip the file and extract the components in a new folder on your device. Name this folder after your theme. We will upload this folder to your WordPress installation directory.</li>
<li>Open your FTP client and go to the WordPress website you downloaded the theme for. If you don’t have FTP login credentials, create an FTP user from your domain account cPanel. If you don’t have access, contact directly your web host.</li>
<li>Once on the right website’s directory, go to path: /wp-content/themes/ and move your unzipped theme folder here. Save and exit.</li>
</ul>
<p>Now go back to your WordPress admin, <strong>Appearance &gt; Themes</strong> and check to ensure that the theme you just uploaded has appeared here. If it has, the installation was successful. You can now activate the theme (hover over theme name) to apply it.</p>
<h2>Wrapping up</h2>
<p>That was fun and easy, yeah?</p>
<p>Another professional tip: Before installing themes, run them through the tests on Themecheck.org. to make sure they’re as good as advertised.</p>
",0,"standard","post"
"How to Add an Event to Android Calendar","how-to-add-an-event-to-android-calendar","The following code snippet shows how to add event in Android calendar using intent method.
","LIVE","<p>The following code snippet shows how to add event in Android calendar using intent method.</p>
<pre class=""prettyprint lang-java"">Intent intent = new Intent(Intent.ACTION_INSERT);
intent.setData(CalendarContract.Events.CONTENT_URI)
intent.putExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, eventDate.getTimeInMillis())
intent.putExtra(CalendarContract.EXTRA_EVENT_END_TIME, eventDate.getTimeInMillis() + 60 * 60 * 1000)
intent.putExtra(CalendarContract.Events.TITLE, title)
intent.putExtra(CalendarContract.Events.DESCRIPTION, description)
intent.putExtra(CalendarContract.Events.AVAILABILITY, CalendarContract.Events.AVAILABILITY_BUSY);
context.startActivity(intent);

Toast.makeText(context, ""Event added to calendar, Toast.LENGTH_SHORT).show(); 
</pre>
",0,"standard","post"
"How to Determine Android Screen Size Width and Height","how-to-determine-android-screen-size-width-and-height","The following code snippet shows how to determine the screen size dimensions in width and height of the Android device your application is running on.
","LIVE","<p>The following code snippet shows how to determine the screen size dimensions in width and height of the Android device your application is running on.</p>
<pre class=""prettyprint lang-java"">Display display = mActivity.getWindowManager().getDefaultDisplay();
Point size = new Point();
display.getSize(size);
int width = size.x;
int height = size.y;

Log.e(""Width : "" + width);
Log.e(""Height : "" + height);
</pre>
",0,"standard","post"
"How to Trust All Certificates for HttpURLConnection in Android","how-to-trust-all-certificates-for-httpurlconnection-in-android","The following code snippet will help you to disables the SSL certificate checking for new instances of HttpsURLConnection in Android. You can use this code for testing purpose only and remove when moving to production.
","LIVE","<p>The following code snippet will help you to disables the SSL certificate checking for new instances of HttpsURLConnection in Android.</p>
<p class=""wp-alert warning"">Note: You can use this code for testing purpose only and remove when moving to production. Trusting all certificate in production will expose your box for hackers.</p>
<pre class=""prettyprint lang-java"">public void trustAllCertificates() {
    try {
        TrustManager[] trustAllCerts = new TrustManager[]{
                new X509TrustManager() {
                    public X509Certificate[] getAcceptedIssuers() {
                        X509Certificate[] myTrustedAnchors = new X509Certificate[0];
                        return myTrustedAnchors;
                    }

                    @Override
                    public void checkClientTrusted(X509Certificate[] certs, String authType) {
                    }

                    @Override
                    public void checkServerTrusted(X509Certificate[] certs, String authType) {
                    }
                }
        };

        SSLContext sc = SSLContext.getInstance(""SSL"");
        sc.init(null, trustAllCerts, new SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {
            @Override
            public boolean verify(String arg0, SSLSession arg1) {
                return true;
            }
        });
    } catch (Exception e) {
    }
}
	
</pre>
",0,"standard","post"
"Sample env.rb File for Setting up Android Testing Using Appium and Ruby","sample-env-rb-file-for-setting-up-android-testing-using-appium-and-ruby","This env.rb file provides setup and common functionality across all features. It&#8217;s included first before every test run, and the methods provided here can be used in any of the step definitions used in a test. This is a great place to put shared data like the location of your app, the capabilities you want to test with, and the setup of selenium.
","LIVE","<p>This <code>env.rb</code> file provides setup and common functionality across all features. It’s included first before every test run, and the methods provided here can be used in any of the step definitions used in a test.</p>
<p>This is a great place to put shared data like the location of your app, the capabilities you want to test with, and the setup of selenium.</p>
<pre class=""prettyprint lang-rb"">require 'appium_lib'
require 'cucumber'
require 'require_all'

require_all 'lib'
class AppiumWorld
end

caps = {
  caps: {
    'platformName' =&gt; ENV['PLATFORM'],
    'platformVersion' =&gt; ENV['VERSION'],
    'deviceName' =&gt; ENV['DEVICE'],
    ENV['METHOD'] =&gt; ENV['METHOD'],
    'app' =&gt; ENV['APP_PATH'],
    'newCommandTimeout' =&gt; '200'
  }
}

Appium::Driver.new(caps)
Appium.promote_appium_methods AppiumWorld

World { AppiumWorld.new }

def app
  @app = AppBase.new($driver)
end

Before { $driver.start_driver }
After { $driver.driver_quit }
</pre>
",0,"standard","post"
"How to Include Custom Post in WordPress Author Archive Page","how-to-include-custom-post-in-wordpress-author-archive-page","Is your WordPress theme not showing custom post on Author Archive page? Add the following code snippet to functions.php file. This WordPress hook will include custom post types in WordPress Author archive page.
","LIVE","<p>Is your WordPress theme not showing custom post on Author Archive page? Add the following code snippet to <code>functions.php</code> file. This WordPress hook will include custom post types in WordPress Author archive page.</p>
<pre class=""preityprint php"">//include snippet in author archive template
function custom_archive_query( $query ) {
	if ( is_author() &amp;&amp; $query-&gt;is_main_query()) {
		$query-&gt;set( 'post_type', array( 'post', 'deals' , 'books' ) );
	}
	return $query;
}
add_filter( 'pre_get_posts', 'custom_archive_query' );
</pre>
",0,"standard","post"
"How to Add Google Prettify Syntax Highlighter in WordPress","how-to-add-google-prettify-syntax-highlighter-in-wordpress","Include the following script tag in your to your WordPress theme before  to support Google Prettify Syntax Highlighter.
","LIVE","<p>Include the following script tag in your to your WordPress theme before &lt;/head&gt; to support Google Prettify Syntax Highlighter.</p>
<pre class=""preityprint html"">&lt;script src=""https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js""&gt;&lt;/script&gt;
</pre>
<p>Now notice that the script will load for all pages and Syntax Highlighter will work fine. You can improve this by not loading the script in your homepage or archive page.  To load script only on singles single post, add the following snippets to your theme <code>functions.php</code> file. This will add the hook to <code>&lt;head&gt;&lt;/head&gt;</code>.</p>
<pre class=""preityprint php"">/**
 * Add Google Prettify Syntax Highlighter
 */ 
function custom_gcp_js() {
    if(is_singular(array( 'post', 'deals', 'books'))) {
      echo '&lt;script src=""https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js""&gt;&lt;/script&gt;';
    }
  }
add_action('wp_head', 'custom_gcp_js');
</pre>
",0,"standard","post"
"How to Remove Emoji from WordPress 4.2 Website","how-to-remove-emoji-from-wordpress-4-2-website","How to Remove Emoji from WordPress 4.2+ Website
","LIVE","<p>Emojis are the smileys used on the internet. Emojis are originated from Japan, Emoji have made their way into the unicode character set, iOS, Android, and even on desktop computers.</p>
<p>WordPress version 4.2 introduced emojis (smileys) unicode characters to add native support for Chinese, Japanese, and Korean language character sets. For native support, WordPress loads JavaScript’s and css Emojis files even if you not willing to use them on your website. This could potentially slow down your website.</p>
<p>Add the following code snippet to your theme function.php to remove WordPress emoji support in WordPress version 4.2.</p>
<p class=""wp-alert info"">Emoticons will still work and emojis will still work in browsers which have built in support for them. This plugin simply removes the extra code bloat used to add support for emojis in older browsers.</p>
<pre class=""preityprint php"">/**
 * Disable the emoji's WordPress version 4.2 
 */
function disable_emojis() {
	remove_action( 'wp_head', 'print_emoji_detection_script', 7 );
	remove_action( 'admin_print_scripts', 'print_emoji_detection_script' );
	remove_action( 'wp_print_styles', 'print_emoji_styles' );
	remove_action( 'admin_print_styles', 'print_emoji_styles' );	
	remove_filter( 'the_content_feed', 'wp_staticize_emoji' );
	remove_filter( 'comment_text_rss', 'wp_staticize_emoji' );	
	remove_filter( 'wp_mail', 'wp_staticize_emoji_for_email' );
	add_filter( 'tiny_mce_plugins', 'disable_emojis_tinymce' );
}
add_action( 'init', 'disable_emojis' );
</pre>
",0,"standard","post"
"YouTube Android Player API and YouTubePlayerView Example","youtube-android-player-api-example","The YouTube Player API for Android provides a ready to use a fragment and an embedded view to play YouTube videos. The API provides methods to customize and control the video playback. You can play, pause, or seek video to specific play time","LIVE","<p class="""">The YouTube Player API for Android provides a ready to use a fragment and an embedded view to play YouTube videos. The API provides methods to customize and control the video playback. You can play, pause, or seek video to specific play time. The API also provides the helper functions to support orientation changes as well as transitions to full-screen playback.</p>
<p>This tutorial demonstrates how to use <code>YouTubePlayerView</code> and <code>YouTubePlayerFragement</code> in Android to play YouTube videos.</p>
<p><img alt=""YouTubePlayerView Example"" class=""alignnone wp-image-10715 size-medium"" height=""316"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/113/YouTubePlayerView-Example-620x316.png"" srcset="""" width=""620""></p>
<p class=""wp-alert info"">Note: Users need to run version 4.2.16 of the mobile YouTube app (or higher) to use the YouTube Android Player API.</p>
<p>Integrating YouTube Player API in your Android application involves tharee key steps:</p>
<ol>
<li>Download and Configure YouTube Android Player API in Android Studio</li>
<li>Register your Application in Google Developer Console and obtain Android API key</li>
<li>Integrating YouTube Android Player API in your Android Application</li>
</ol>
<h2>Download YouTube Android Player API</h2>
<p>The YouTube Android Player API is currently not supported via Gradle dependency. You need to download it from the official download source and add it to your project manually.</p>
<p>Download YouTube Player API from <a href=""https://developers.google.com/youtube/android/player/downloads/"" rel=""nofollow noopener noreferrer"" target=""_blank"">developer.google.com</a>.</p>
<p>Once your download is completed, extract the bundle. You will notice several directories including docs, libs, and sample. Now copy <code>YouTubeAndroidPlayerApi.jar </code>file and paste it into your Android Studio project libs directory.</p>
<p>The following image depicts the project structure after YouTubeAndroidPlayerApi.jar is added to the project.</p>
<p><img alt=""YouTube Android Player API Example"" class=""alignnone wp-image-10686 size-full"" height=""575"" loading=""lazy"" sizes=""(max-width: 976px) 100vw, 976px"" src=""/media/uploads/articles/113/YouTube-Android-Player-API-Example.png"" srcset="""" width=""976""></p>
<p>Now that the library is added, just make sure you have the following declaration in your app <code>build.gradle</code> file.</p>
<pre class=""prettyprint java"">dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //... other dependencies
}
</pre>
<p>Now select <strong>Tools &gt; Android &gt; “Sync Project</strong> <strong>with Gradle Files</strong>” option on Android Studio menu to sync project after adding jar file.</p>
<h2>Register in Google Dev Console</h2>
<p>For using Youtube Player API in your Android application, you need to register your application in Google Developers Console and obtain an Android API key.</p>
<p>Please note, the API key is a unique value for your application. Do not disclose this to others.<br>
The following steps explain how to register your application in the Google Developer Console and get your application’s authorization credentials.</p>
<ul>
<li>Visit Google Developers Console. If you’re not logged already, you will be asked to login with your Google Mail account.</li>
<li>Select a project, or create a new one.</li>
<li>In the sidebar on the left, expand APIs &amp; auth. Next, click APIs. In the list of APIs, make sure the status is Enabled for the YouTube Data API v3.</li>
<li>In the sidebar on the left, select Credentials &gt; Add Credential.</li>
</ul>
<p><img alt=""Add Credential Google Developer Console"" class=""alignnone size-full wp-image-10688"" height=""625"" loading=""lazy"" sizes=""(max-width: 929px) 100vw, 929px"" src=""/media/uploads/articles/113/Add-Credential-Google-Developer-Console.png"" srcset="""" width=""929""></p>
<p>&nbsp;</p>
<ul>
<li>Select “Android” and “Public data option and follow the screen instruction to create your API Credentials.</li>
</ul>
<p><img alt=""Add Credential Google Developer Console"" class=""alignnone size-full wp-image-10689"" height=""409"" loading=""lazy"" sizes=""(max-width: 930px) 100vw, 930px"" src=""/media/uploads/articles/113/Add-Credential-Google-Developer-Console2.png"" srcset="""" width=""930""></p>
<p>Now copy your API credentials. You need it from your Android code.</p>
<h2>YouTubePlayerView Android Example</h2>
<p>Now that we are ready with the basic configurations, we can start using the YouTube Player API in our application. The API offers two methods to integrate and play embedded YouTube video in Android; YouTubePlayerView or YouTubePlayerFragment. Let us first see how to integrate YouTubePlayerView.</p>
<p>YouTubePlayerView takes care of Android Configuration Change events. It saves and restore the state of the YouTubePlayer associated with the view as part of the onSaveInstanceState/onRestoreInstanceState.</p>
<h3>Add YouTubePlayerView to View Hierarchy</h3>
<p>Let us first add the YouTubePlayerView view in your activity or fragment view hierarchy.</p>
<pre class=""prettyprint xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
   xmlns:tools=""http://schemas.android.com/tools""
   android:layout_width=""match_parent""
   android:layout_height=""match_parent""
   android:orientation=""vertical""
   tools:context=""com.stacktips.youtube.MainActivity""&gt;

   &lt;com.google.android.youtube.player.YouTubePlayerView
       android:id=""@+id/youtube_player_view""
       android:layout_width=""match_parent""
       android:layout_height=""wrap_content""/&gt;
&lt;/LinearLayout&gt;
</pre>
<h3>Add INTERNET Permission</h3>
<p>INTERNET permission is required to play video over internet. Add the following permission in your application <code>AndroidManifest.xml</code> file.</p>
<pre class=""prettyprint xml"">&lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;
</pre>
<h3>Initialize YouTubePlayerView</h3>
<p>When using YouTubePlayerView, your activity needs to extend <code><a href=""https://developers.google.com/youtube/android/player/reference/com/google/android/youtube/player/YouTubeBaseActivity.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">YouTubeBaseActivity</a></code>. Now let us create an Activity that extends YouTubeBaseActivity and initialize the YouTubePlayerView.</p>
<p>Once the initialization is successful, you will get the <code>onInitializationSuccess()</code> callback with YouTubePlayerView instance. You can add additional listeners to handle the playback control events.</p>
<pre class=""prettyprint java"">public class MainActivity extends YouTubeBaseActivity implements OnInitializedListener {
    public static final String API_KEY = ""YOUR_API_KEY"";

    //https://www.youtube.com/watch?v=&lt;VIDEO_ID&gt;
    public static final String VIDEO_ID = ""-m3V8w_7vhk"";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // attaching layout xml
        setContentView(R.layout.activity_main);

        // Initializing YouTube player view
        YouTubePlayerView youTubePlayerView = (YouTubePlayerView) findViewById(R.id.youtube_player_view);
        youTubePlayerView.initialize(API_KEY, this);
    }

    @Override
    public void onInitializationFailure(Provider provider, YouTubeInitializationResult result) {
        Toast.makeText(this, ""Failed to initialize."", Toast.LENGTH_LONG).show();
    }

    @Override
    public void onInitializationSuccess(Provider provider, YouTubePlayer player, boolean wasRestored) {
if(null== player) return;

        // Start buffering
        if (!wasRestored) {
            player.cueVideo(VIDEO_ID);
        }
    }
}
</pre>
<p>In the above code snippet, we are calling <code>initialize(String, OnInitializedListener)</code> method on YouTubePlayerView to instantiate YouTubePlayer. Ones YouTubePlayer instance is ready, it can be used to to load videos into this YouTubePlayerView. You may now build and run the app now to see the YouTube player in action.</p>
<h3>4.4. Handling YouTubePlayer Events</h3>
<p>You may attach <code>PlaybackEventListener</code> or <code>PlayerStateChangeListener</code> listeners to player instance for error handling or advanced configurations.</p>
<pre class=""prettyprint java"">// Add listeners to YouTubePlayer instance
player.setPlayerStateChangeListener(new PlayerStateChangeListener() {
    @Override 
	public void onAdStarted() { }
    
	@Override 
	public void onError(ErrorReason arg0) { }
    
	@Override
	public void onLoaded(String arg0) { }
    
	@Override
	public void onLoading() { }
    
	@Override 
	public void onVideoEnded() { }
	
    @Override 
	public void onVideoStarted() { }
});


player.setPlaybackEventListener(new PlaybackEventListener() {
    @Override 
	public void onBuffering(boolean arg0) { }
	
    @Override 
	public void onPaused() { }
	
    @Override 
	public void onPlaying() { }
	
    @Override 
	public void onSeekTo(int arg0) { }
	
    @Override 
	public void onStopped() { }
});
</pre>
<h2>5. Customising YouTubePlayer Controls</h2>
<p>The YouTube Android Player allows you to customize the playback control by setting one of the style defined in <code>YouTubePlayer.PlayerStyle</code> enumeration. It currently support three styles <code>DEFAULT</code>, <code>MINIMAL</code> or <code>CHROMELESS</code>;</p>
<ul>
<li><em>YouTubePlayer.PlayerStyle.DEFAULT</em> – The default style, showing all interactive player controls.</li>
<li><em>YouTubePlayer.PlayerStyle.MINIMAL</em> – The minimal style displays only a time bar and play/pause controls.</li>
<li><em>YouTubePlayer.PlayerStyle.CHROMELESS</em> – A style that shows no interactive player controls. When you use CHROMELESS, you need to write your own controls for play, pause or seek operation.</li>
</ul>
<p>You can apply style to YouTubePlayer by calling <code>setPlayerStyle(PlayerStyle style)</code> method.</p>
<pre class=""prettyprint java"">player.setPlayerStyle(PlayerStyle.CHROMELESS);</pre>
<p>Checkout our Part-II tutorial to learn more about <a href=""/articles/how-to-customize-youtubeplayer-controls-in-android"">how to customise YouTubePlayer</a> by adding your own custom playback controls.</p>
<h2>6. YouTubePlayerFragment Example</h2>
<p>Integrating YouTubePlayerFragment is relatively easy. The following section demonstrates how to use YouTubePlayerFragment.</p>
<p>Let us declare the Activity layout where the YouTubePlayerFragment will be added.<br>
<strong>activity_youtube_player_fragment.xml</strong></p>
<pre class=""prettyprint xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;FrameLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:id=""@+id/content""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""&gt;
&lt;/FrameLayout&gt;
</pre>
<p>Now let us create an activity and extend it form <code>YouTubeBaseActivity</code>. We will now create an instance of YouTubePlayerFragment and add the fragment to activity.</p>
<p><strong>YouTubePlayerFragmentActivity.java</strong></p>
<pre class=""prettyprint java"">public class YouTubePlayerFragmentActivity extends YouTubeBaseActivity {
    public static final String API_KEY = ""AIzaSyBx7v0YOb1404fDO7EbfMx4l87raxezDWFw"";

    //https://www.youtube.com/watch?v=&lt;VIDEO_ID&gt;
    public static final String VIDEO_ID = ""-m3V8w_7vhk"";

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_youtube_player_fragment);

        //Initializing and adding YouTubePlayerFragment
        FragmentManager fm = getFragmentManager();
        String tag = YouTubePlayerFragment.class.getSimpleName();
        YouTubePlayerFragment playerFragment = (YouTubePlayerFragment) fm.findFragmentByTag(tag);
        if (playerFragment == null) {
            FragmentTransaction ft = fm.beginTransaction();
            playerFragment = YouTubePlayerFragment.newInstance();
            ft.add(android.R.id.content, playerFragment, tag);
            ft.commit();
        }

        playerFragment.initialize(API_KEY, new YouTubePlayer.OnInitializedListener() {
            @Override
            public void onInitializationSuccess(YouTubePlayer.Provider provider, YouTubePlayer youTubePlayer, boolean b) {
                youTubePlayer.cueVideo(VIDEO_ID);
            }

            @Override
            public void onInitializationFailure(YouTubePlayer.Provider provider, YouTubeInitializationResult youTubeInitializationResult) {
                Toast.makeText(YouTubePlayerFragmentActivity.this, ""Error while initializing YouTubePlayer."", Toast.LENGTH_SHORT).show();
            }
        });
    }
}
</pre>
<p>Notice that, the player initialization process is remains same. You still have to call <code>initialize()</code> method to get your YouTubePlayer instance.</p>",0,"standard","post"
"Google Fonts Website Gets a Fresh New Material Design Look","google-fonts-website-gets-a-new-fresh-material-design-look","Now Google fonts website interface is refreshed with the fresh new material deign look. With the new design, it makes it easy to search a Typography and choose the right typeface of your choice.
","LIVE","<p><span class=""mks_dropcap_letter"">S</span>ince its first release on 2010, Google fonts has been the first choice for web developers. It offers collections of free web fonts (under Apache License and SIL Open Font License) to use on personal and commercial projects.</p>
<p>Now Google fonts website interface is refreshed with the fresh new material design look. With the new design, it makes it easy to search a Typography, choose the right typeface of your choice or to preview typeface before using on your project. The old list view layout is now revamped to grid layout.</p>
<p>Typecast is integrated to the grid layout for better preview purpose. You can now resize, change font weight, size and style right there in the grid. The color fill option in the title allows to change the background color to preview typeface in different contrast background.</p>
<p>Some of the beautiful font inspirations are curated in Featured section. As usual, you can click on plus button(+) to select and download the fonts to desktop or embed the web fonts into your own website.<img alt=""Google Web Fonts- Material Design"" class=""aligncenter wp-image-10564"" height=""575"" loading=""lazy"" src=""/media/uploads/articles/115/Google-Web-Fonts-Material-Design.png"" srcset="""" width=""601""/></p>
<p>Visit <strong><a href=""https://fonts.google.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Google Fonts</a></strong>.</p>
<p> </p>
",0,"standard","post"
"How to Enable Deep Links for App Content in Android","how-to-enable-deep-links-for-app-content-in-android","Enable deep links for App content in Android, you need to fist add intent filters for the relevant activities in your application manifest. The intent filters allow deep linking to the content in any of your activities.
","LIVE","<p>Enable deep links for App content in Android, you need to fist add intent filters for the relevant activities in your application manifest. The intent filters allow deep linking to the content in any of your activities.</p>
<h3>Add Intent Filters for Links</h3>
<p>For example, a user clicks on a website link <code>http://stacktips.com</code> on the browser, that will resolve the link and open the content in installed activity.</p>
<pre class=""prettyprint lang-java"">&lt;activity
    android:name=""com.example.MainActivity""
    android:label=""@string/my_app"" &gt;
    &lt;intent-filter android:label=""@string/my_app""&gt;
	
        &lt;action android:name=""android.intent.action.VIEW"" /&gt;
        &lt;category android:name=""android.intent.category.DEFAULT"" /&gt;
        &lt;category android:name=""android.intent.category.BROWSABLE"" /&gt;
		
        &lt;!-- Accepts URIs that begin with ""http://stacktips.com/articles” --&gt;
        &lt;data android:scheme=""http"" android:host=""stacktips.com"" android:pathPrefix=""/articles"" /&gt;        
    &lt;/intent-filter&gt;
&lt;/activity&gt;
</pre>
<p>Once the above intent filters are added, Android will be able to route any Intent that has matching URIs to your app at runtime.</p>
<h3>Read Data from Incoming Intents</h3>
<p>Once Android system starts the routed activity through an intent filter. You can get the data bundle from Intent to determine what you which activity or fragment to render. Call the <code>getData()</code> and <code>getAction()</code> methods to retrieve the data and action associated with the incoming Intent. You can call these methods at any time during the lifecycle of the activity, but you should generally do so during early callbacks such as <code>onCreate()</code> or <code>onStart()</code>.</p>
<p>The following code snippet shows how to retrieve data from an Intent</p>
<pre class=""prettyprint lang-java"">@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    Intent intent = getIntent();
    String action = intent.getAction();
    Uri data = intent.getData();
}
</pre>
<h3>Test Your Deep Links</h3>
<p>You can use the Android Debug Bridge with the activity manager tool to test that the intent filter URIs you specified for deep linking resolve to the correct app activity. You can run the adb command against a device or an emulator.</p>
<p>The following command tries to view a target app activity that is associated with the specified URI.</p>
<pre class=""prettyprint lang-java"">$ adb shell am start -W -a android.intent.action.VIEW -d http://stacktips.com/articles com.example
</pre>
",0,"standard","post"
"How to Programmatically Take a Screenshot in Android?","how-to-programmatically-take-a-screenshot-in-android","The following code snippet will help you to take a screenshot programmatically in Android. First you need to add the write file permission to save the captured screenshot.
","LIVE","<p>The following code snippet will help you to take a screenshot programmatically in Android. First you need to add the write file permission to save the captured screenshot.</p>
<pre class=""prettyprint lang-xml"">&lt;uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE""/&gt;
</pre>
<p>Add the following Java code to capture the screenshot of running in an Activity.</p>
<pre class=""prettyprint lang-java"">private void captureScreenshot() {
    try {
        // image saving sd card path
        String mPath = Environment.getExternalStorageDirectory().toString() + ""/"" + System.currentTimeMillis() + "".jpg"";

        // create bitmap screen capture
        View view = getWindow().getDecorView().getRootView();
        view.setDrawingCacheEnabled(true);
		
        Bitmap bitmap = Bitmap.createBitmap(view.getDrawingCache());
        view.setDrawingCacheEnabled(false);
		
        File imageFile = new File(mPath);
        FileOutputStream outputStream = new FileOutputStream(imageFile);
		
        int quality = 100;
        bitmap.compress(Bitmap.CompressFormat.JPEG, quality, outputStream);
        outputStream.flush();
        outputStream.close();
		
    } catch (Throwable e) {
        e.printStackTrace();
    }
}
</pre>
",0,"standard","post"
"How to Save Android Application’s  Activity State","how-to-save-android-applications-activity-state","The Activity class provides two methods onSaveInstanceState() and onRestoreInstanceState(), for saving and restoring activity state. The onSaveInstanceState( )&hellip;
","LIVE","<p>The Activity class provides two methods onSaveInstanceState() and onRestoreInstanceState(), for saving and restoring activity state. The onSaveInstanceState( ) method is a callback method that is used to save the application state.</p>
<pre class=""prettyprint lang-java"">@Override
public void onSaveInstanceState(Bundle savedInstanceState) {
  super.onSaveInstanceState(savedInstanceState);
  // Save UI state changes to the savedInstanceState.
  // This bundle will be passed to onCreate if the process is killed and restarted.
  savedInstanceState.putBoolean(""key1"", true);
  savedInstanceState.putDouble(""key2"", 1.9);
  savedInstanceState.putInt(""key3"", 1);
  savedInstanceState.putString(""key4"", ""Welcome back to Android"");
}</pre>
<p>The Bundle is essentially a way of storing a Key value map. And it will get passed in to onCreate() and also onRestoreInstanceState() where you can extract the values as follows.</p>
<pre class=""prettyprint lang-java"">@Override
public void onRestoreInstanceState(Bundle savedInstanceState) {
  super.onRestoreInstanceState(savedInstanceState);
  // Restore UI state from the savedInstanceState.
  // This bundle has also been passed to onCreate.
  boolean myBoolean = savedInstanceState.getBoolean(""key1"");
  double myDouble = savedInstanceState.getDouble(""key2"");
  int myInt = savedInstanceState.getInt(""key3"");
  String myString = savedInstanceState.getString(""key4"");
}
</pre>
",0,"standard","post"
"Bootstrap Navigation Tabs with Dropdown Menu Example","bootstrap-navigation-tabs-with-dropdown-menu-example","&lt;!DOCTYPE html&gt; &lt;html lang=&#8221;en&#8221;&gt; &lt;head&gt; &lt;title&gt;My first Bootstrap page &lt;/title&gt; &lt;meta name=&#8221;viewport&#8221; content=&#8221;width=device-width, initialscale=1&#8243;&gt; &lt;link rel=&#8221;stylesheet&#8221; href=&#8221;http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&#8221;&gt; &lt;script&hellip;
","LIVE","<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt; 
&lt;html lang=""en""&gt;  
&lt;head&gt;    
&lt;title&gt;My first Bootstrap page &lt;/title&gt;    
&lt;meta name=""viewport"" content=""width=device-width, initialscale=1""&gt;
&lt;link rel=""stylesheet"" href=""http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css""&gt; 
&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""JS/bootstrap.min.js""&gt;&lt;/script&gt; 
&lt;/head&gt;
&lt;body&gt;
	&lt;div class=""container""&gt;
	&lt;h2&gt;Tabs-dropdown&lt;/h2&gt;             
	  &lt;ul class=""nav nav-tabs""&gt;
	    &lt;li class=""active""&gt;&lt;a href=""#""&gt;Home&lt;/a&gt;&lt;/li&gt;
	   &lt;li&gt;&lt;a href=""#""&gt;Android&lt;/a&gt;&lt;/li&gt;
	    &lt;li&gt;&lt;a href=""#""&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
	    &lt;li&gt;&lt;a href=""#""&gt;About&lt;/a&gt;&lt;/li&gt;        
		&lt;li class=""dropdown""&gt;
		&lt;a class=""dropdown-toggle"" data-toggle=""dropdown"" href=""#""&gt;
			More &lt;span class=""glyphicon glyphicon-option-vertical""&gt;&lt;/span&gt;&lt;/a&gt;
		&lt;ul class = ""dropdown-menu""&gt;
		&lt;li&gt;&lt;a href=""#""&gt;HTML &lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=""#""&gt;Java Script &lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=""#""&gt;Xamarine &lt;/a&gt;&lt;/li&gt;	
		&lt;/ul&gt;
		&lt;/li&gt;    
	  &lt;/ul&gt;
	&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The output for the above code,<br/>
<img alt=""Bootstrap Navigation Tabs with Dropdown Menu"" class=""alignnone size-full wp-image-10513"" height=""202"" loading=""lazy"" sizes=""(max-width: 674px) 100vw, 674px"" src=""/media/uploads/articles/119/Bootstrap-Navigation-Tabs-with-Dropdown-Menu.png"" srcset="""" width=""674""/></p>
<h2>Badges</h2>
<p>These are indicators to show count of the items you want to highlight. A simple example would be showing the number of unread e-mails or messages. Example, suppose we wanted to display the number of new contents display for each section in our previous example. Add the below code,</p>
<pre class=""prettyprint lang-html"">&lt;li&gt;&lt;a href=""#""&gt;Android &lt;span class=""badge""&gt;5&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
</pre>
<p>The output looks like in following way,</p>
<p><img alt=""Bootstrap Navigation Tabs with Dropdown Menu Badge"" class=""alignnone size-full wp-image-10516"" height=""149"" loading=""lazy"" src=""/media/uploads/articles/119/Bootstrap-Navigation-Tabs-with-Dropdown-Menu-Badge.png"" srcset="""" width=""575""/></p>
",0,"standard","post"
"How to Create Toolbars in Bootstrap3","how-to-create-toolbars-in-bootstrap3","Use the .btn-toolbar class to create the toolbar. We can club a number of button groups together to generate a toolbar. Let’s use the Glyphicons in the buttons (instead of button text).
","LIVE","<p>Use the <code>.btn-toolbar</code> class to create the toolbar. We can club a number of button groups together to generate a toolbar. Let’s use the Glyphicons in the buttons (instead of button text).</p>
<p><img alt=""Bootstrap Toolbar Example"" class=""alignnone size-full wp-image-10505"" height=""119"" loading=""lazy"" src=""/media/uploads/articles/120/Bootstrap-Toolbar-Example.png"" srcset="""" width=""448""/></p>
<pre class=""prettyprint lang-js"">&lt;!DOCTYPE html&gt; 
&lt;html lang=""en""&gt;  
&lt;head&gt;    
&lt;title&gt;My first Bootstrap page &lt;/title&gt;    
&lt;meta name=""viewport"" content=""width=device-width, initialscale=1""&gt;    
&lt;link rel=""stylesheet"" href=""http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css""&gt; 
&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""JS/bootstrap.min.js""&gt;&lt;/script&gt; 
&lt;/head&gt; 
&lt;body&gt;
&lt;div class=""container""&gt;
	&lt;h2&gt;Toolbar&lt;/h2&gt; 
	&lt;div class=""btn-toolbar""&gt;  
	 &lt;div class=""btn-group""&gt;   
	  	&lt;button type=""button"" class=""btn btn-default""&gt;&lt;span class=""glyphicon glyphicon-ok""&gt;&lt;/span&gt;&lt;/button&gt;    
		&lt;button type=""button"" class=""btn btn-default""&gt;&lt;span class=""glyphicon glyphicon-remove""&gt;&lt;/span&gt;&lt;/button&gt;    
		&lt;button type=""button"" class=""btn btn-default""&gt;&lt;span class=""glyphicon glyphicon-print""&gt;&lt;/span&gt;&lt;/button&gt;
	&lt;/div&gt; 
	&lt;div class=""btn-group""&gt;  
		&lt;button type=""button"" class=""btn btn-default""&gt;&lt;span class=""glyphicon glyphicon-align-left""&gt;&lt;/span&gt;&lt;/button&gt;   
		&lt;button type=""button"" class=""btn btn-default""&gt;&lt;span class=""glyphicon glyphicon-align-center""&gt;&lt;/span&gt;&lt;/button&gt;    
		&lt;button type=""button"" class=""btn btn-default""&gt;&lt;span class=""glyphicon glyphicon-align-right""&gt;&lt;/span&gt;&lt;/button&gt;    
		&lt;button type=""button"" class=""btn btn-default""&gt;&lt;span class=""glyphicon glyphicon-align-justify""&gt;&lt;/span&gt;&lt;/button&gt;  
	&lt;/div&gt; 
	 &lt;div class=""btn-group""&gt;    
		&lt;button type=""button"" class=""btn btn-default""&gt;&lt;span class=""glyphicon glyphicon-font""&gt;&lt;/span&gt;&lt;/button&gt;    
	   	&lt;button type=""button"" class=""btn btn-default""&gt;&lt;span class=""glyphicon glyphicon-bold""&gt;&lt;/span&gt;&lt;/button&gt;    
	   	&lt;button type=""button"" class=""btn btn-default""&gt;&lt;span class=""glyphicon glyphicon-italic""&gt;&lt;/span&gt;&lt;/button&gt;  
	  &lt;/div&gt; 
	&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
",0,"standard","post"
"How to Create Button Groups in Bootstrap3","how-to-create-button-groups-in-bootstrap3","Bootstrap allows you to create a series of buttons together in a single button group. Use .btn-group class to create the button group.
","LIVE","<p>Bootstrap allows you to create a series of buttons together in a single button group. Use <code>.btn-group</code> class to create the button group.</p>
<p><img alt=""Button groups in Bootstrap 3"" class=""alignnone size-full wp-image-10500"" height=""66"" loading=""lazy"" src=""/media/uploads/articles/121/Button-groups-in-Bootstrap-3.png"" srcset="""" width=""398""/></p>
<pre class=""prettyprint lang-js"">&lt;!DOCTYPE html&gt; 
&lt;html lang=""en""&gt;  
&lt;head&gt;    
&lt;title&gt;My first Bootstrap page &lt;/title&gt;    
&lt;meta name=""viewport"" content=""width=device-width, initialscale=1""&gt;    
&lt;link href=""CSS/bootstrap.min.css"" rel=""stylesheet""&gt;   
&lt;link href=""CSS/bootstrap-theme.min.css"" rel=""stylesheet""&gt;    
&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""JS/bootstrap.min.js""&gt;&lt;/script&gt; 
&lt;/head&gt; 
&lt;body&gt;
	&lt;div class=""btn-group"" style=""margin:50px""&gt;
	  	&lt;button class=""btn btn-wraning"" type=""button""&gt;Find by name&lt;/button&gt;
	  	&lt;button type=""button"" class=""btn btn-success""&gt;Find by location&lt;/button&gt;  
		&lt;button type=""button"" class=""btn btn-warning""&gt;Find by postcode&lt;/button&gt;  
	&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
",0,"standard","post"
"Bootstrap Jumbotron Example","bootstrap-jumbotron-example","Jumbotron optionally captures the whole viewport and renders the contents inside. A jumbotron is displayed as a grey box with rounded corners.
","LIVE","<p>Jumbotron optionally captures the whole viewport and renders the contents inside. A jumbotron is displayed as a grey box with rounded corners. It also enlarges the font sizes of the text inside it.</p>
<p>Inside a jumbotron you can put nearly any valid HTML, including other Bootstrap elements/classes. Place the jumbotron inside the <code>&lt;div class=""container""&gt;</code> if you want the jumbotron to NOT extend to the edge of the screen.</p>
<p>Jumbotron example,</p>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt; 
&lt;html lang=""en""&gt;  
&lt;head&gt;    
&lt;title&gt;My first Bootstrap page &lt;/title&gt;    
&lt;meta name=""viewport"" content=""width=device-width, initialscale=1""&gt;    
&lt;link href=""CSS/bootstrap.min.css"" rel=""stylesheet""&gt;   
&lt;link href=""CSS/bootstrap-theme.min.css"" rel=""stylesheet""&gt;    
&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""JS/bootstrap.min.js""&gt;&lt;/script&gt; 
 &lt;/head&gt; 
 &lt;body&gt;
&lt;div class=""container"" style=""margin:50px;""&gt;
	&lt;div class=""container""&gt;
	  &lt;div class=""jumbotron"" style=""background:#ebeff2""&gt;
	    &lt;h1 style=""font-size:130px;""&gt;400!&lt;/h1&gt;      
		&lt;h2&gt;Sorry but the page that you looking for does not exist..&lt;/h2&gt;
	    &lt;a href=""/index.html"" class=""btn btn-warning btn-lg""&gt;Go to Home Page&lt;/a&gt;  
	  &lt;/div&gt;
	&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Output,<br/>
<img alt=""Bootstrap Jumbotron Example"" class=""alignnone size-full wp-image-10495"" height=""386"" loading=""lazy"" sizes=""(max-width: 956px) 100vw, 956px"" src=""/media/uploads/articles/122/Bootstrap-Jumbotron-Example.png"" srcset="""" width=""956""/></p>
",0,"standard","post"
"Bootstrap Warning, Info, Success and Error Alerts Example","bootstrap-warning-info-success-and-error-alerts-example","Alerts are used to for information purpose. Bootstrap supports following different styles of contextual alert classes, Alert-info, Alert-success, Alert-danger, Alert-warning
","LIVE","<p>Alerts are used to for information purpose. Bootstrap supports following different styles of contextual alert classes,</p>
<ul>
<li>Alert-info</li>
<li>Alert-success</li>
<li>Alert-danger</li>
<li>Alert-warning</li>
</ul>
<p>Example,<br/>
<img alt=""Bootstrap Alerts Example"" class=""alignnone wp-image-10482 size-full"" height=""299"" loading=""lazy"" sizes=""(max-width: 740px) 100vw, 740px"" src=""/media/uploads/articles/123/Bootstrap-Alerts-Example-e1465825994884.png"" srcset="""" width=""740""/></p>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt; 
&lt;html lang=""en""&gt;  
&lt;head&gt;    
&lt;title&gt;My first Bootstrap page &lt;/title&gt;    
&lt;meta name=""viewport"" content=""width=device-width, initialscale=1""&gt;    
&lt;link href=""CSS/bootstrap.min.css"" rel=""stylesheet""&gt;   
&lt;link href=""CSS/bootstrap-theme.min.css"" rel=""stylesheet""&gt;    
&lt;script type=""text/javascript"" src=""JS/bootstrap.min.js""&gt;&lt;/script&gt; 
 &lt;/head&gt; 
 &lt;body&gt;
&lt;div class=""container""&gt;
	&lt;div class=""container""&gt;
	 &lt;h2&gt;Alerts&lt;/h2&gt;
	 &lt;div class=""alert alert-success""&gt;
	    &lt;strong&gt;Success!&lt;/strong&gt; This alert box indicates a successful action.
	  &lt;/div&gt;
	  &lt;div class=""alert alert-info""&gt;
	    &lt;strong&gt;Info!&lt;/strong&gt; This alert box indicates a neutral informative change or action.
	  &lt;/div&gt;
	  &lt;div class=""alert alert-warning""&gt;
	    &lt;strong&gt;Warning!&lt;/strong&gt; This alert box indicates a warning that might need attention.
	  &lt;/div&gt;
	  &lt;div class=""alert alert-danger""&gt;
	    &lt;strong&gt;Danger!&lt;/strong&gt; This alert box indicates a dangerous action.
	  &lt;/div&gt;
	 &lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<h3></h3>
<h3>Dismissible alerts</h3>
<p>Any alert can be made dismissible by adding an optional <code>.alert-dismissible</code> class and close button. For dismissible alert to work you need to include the jQuery and bootstrap JavaScript plugin. Include the following javascript inside <code>&lt;head&gt;</code> .. <code>&lt;/head&gt;</code> tag.</p>
<pre class=""prettyprint lang-html"">&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""JS/bootstrap.min.js""&gt;&lt;/script&gt;
</pre>
<p>Now to create dismissible alert,</p>
<pre class=""prettyprint lang-html"">&lt;div class=""alert alert-warning alert-dismissible"" &gt;
     &lt;button type=""button"" class=""close"" data-dismiss = ""alert"" aria-label=""Close""&gt;
     &lt;span &gt;&amp;times;&lt;/span&gt;&lt;/button&gt; 
     &lt;strong&gt;Warning!&lt;/strong&gt; This alert box indicates a warning that might need attention.
&lt;/div&gt;
</pre>
<p><img alt=""Bootstrap Dismissible Alerts Example"" class=""alignnone wp-image-10487 size-full"" height=""73"" loading=""lazy"" sizes=""(max-width: 733px) 100vw, 733px"" src=""/media/uploads/articles/123/Bootstrap-Dismissible-Alerts-Example-e1465827048208.png"" srcset="""" width=""733""/></p>
<h3>Animated Alerts</h3>
<p>The .fade and .in classes add a fading effect while closing the alert message.</p>
<pre class=""prettyprint lang-html"">&lt;div class=""alert alert-success fade in""&gt;
     &lt;a href=""#"" class=""close"" data-dismiss=""alert"" aria- label=""close""&gt;&amp;times;&lt;/a&gt;
     &lt;strong&gt;Success!&lt;/strong&gt; This alert box indicates a successful action.
&lt;/div&gt;
</pre>
<h3>Links in alerts</h3>
<p>Use the <code>.alert-link</code> utility class to provide matching colored links within any alert.</p>
<pre class=""prettyprint lang-html"">&lt;div class=""alert alert-warning"" &gt;
    &lt;strong&gt; Warning!&lt;/strong&gt; This alert box indicates a warning that might need attention.
    &lt;a href=""#"" class=""alert-link""&gt;Click here&lt;/a&gt;
&lt;/div&gt;
</pre>
",0,"standard","post"
"Bootstrap CSS Responsive Utility Classes","bootstrap-css-responsive-utility-classes","Bootstrap provides a number of utility classes that are designed to reduce the effort of repetitive declarations in&hellip;
","LIVE","<p>Bootstrap provides a number of utility classes that are designed to reduce the effort of repetitive declarations in CSS and allow quick and easy development.</p>

<h3><span id=""Spacing"">Spacing</span></h3>
<p><code>margin</code> or <code>padding</code> are assigned to an element or a subset of it’s sides with shorthand classes. Includes supports for individual properties, all properties, vertical and horizontal properties.</p>
<h3><span id=""Text_alignment"">Text alignment</span></h3>
<p>You can easily realign the text to components with text alignment classes.<br/>
For example,</p>
<pre class=""prettyprint lang-html"">&lt;p class=""text-left""&gt; Provide your text here to see the left alignment. &lt;/p&gt;
&lt;p class=""text-center""&gt; Provide your text here to see the centre alignment. &lt;/p&gt;
&lt;p class=""text-right""&gt; Provide your text here to see the right alignment. &lt;/p&gt;
</pre>
<p>Text Transform: Transform text in components with text capitalization classes such as<br/>
<code>text-lowercase</code>, <code>text-uppercase</code> and <code>text-capitalize</code>.</p>
<p>For Example</p>
<pre class=""prettyprint lang-html"">&lt;p class=""text-lowercase""&gt;text in lowercase. &lt;/p&gt;
&lt;p class=""text-uppercase""&gt;text in uppercased. &lt;/p&gt;
&lt;p class=""text-capitalize""&gt;text in capitalized. &lt;/p&gt;
</pre>
<p>Contextual colors and backgrounds: Bootstrap provides many different color classes for foreground such as, <code>.text-primary</code>, <code>.text-danger</code>, <code>.text-warning</code>, <code>.text-info</code> , <code>.text-success</code> and <code>text-muted</code>. These can also be applied to links and will darken on hover just like our default link styles.</p>
<p>For Example,</p>
<pre class=""prettyprint lang-html"">&lt;p class=""text-warning""&gt; this text shown as a warning text. &lt;/p&gt;
&lt;p class=""text-danger""&gt; this test shown as a danger text. &lt;/p&gt;
</pre>
<p>Similarly for background you have .bg-primary, .bg-danger, .bg-warning, .bg-info and .bg-success.</p>
<p>For example,<br/>
<code>&lt;div class=""bg-warning""&gt;</code>The background color reflects as warning. &lt;/div&gt;<br/>
<code>&lt;div class=""bg-danger""&gt;</code>The background color reflects danger.&lt;/div&gt;</p>
<h3><span id=""Close_icon"">Close icon</span></h3>
<p>Use a generic close icon for dismissing content like modals and alerts. Be sure to include screen reader text when you can as we’ve done with <code>.sr-only</code>.</p>
<p>For Example,</p>
<pre class=""prettyprint lang-html"">&lt;button type=""button"" class=""close"" aria-label=""Close""&gt;
  &lt;span aria-hidden=""true""&gt;&amp;times;&lt;/span&gt;
  &lt;span class=""sr-only""&gt;Close&lt;/span&gt;
&lt;/button&gt;
</pre>
<p>Float: For horizontal alignment of content, available classes are <code>.pull-left</code> and <code>.pull-right</code>. Float an element to the left or right with a class !important is included to avoid specificity issues.</p>
<p>For Example,</p>
<pre class=""prettyprint lang-html"">&lt;div class=""pull-left""&gt;Float left&lt;/div&gt;
&lt;div class=""pull-right""&gt;Float right&lt;/div&gt;

.pull-left {
  float: left !important;
}
.pull-right {
  float: right !important;
}
</pre>
<p>Center content: Set an element to display: block; and center via margin.</p>
<p>For example,</p>
<pre class=""prettyprint lang-html"">&lt;div class=""center-block""&gt;Centered block&lt;/div&gt;

// Class
.center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
</pre>
<p>Hidden Content: Hide any HTML element with the <code>[hidden]</code> attribute. <code>.hidden</code> class that forced toggled content.<br/>
For example,</p>
<pre class=""prettyprint lang-html"">&lt;input type=""text"" hidden&gt;
</pre>
<p>Furthermore, <code>.invisible</code> can be used to toggle the visibility of an element, meaning its display is not modified and the element can still affect the flow of the document.<br/>
For example,</p>
<pre class=""prettyprint lang-html"">&lt;div class=""invisible""&gt;...&lt;/div&gt;

// Class
.invisible {
  visibility: hidden;
}
</pre>
<h3><span id=""Screen_readers"">Screen readers</span></h3>
<p>Hide an element to all devices other than screen reader with <code>.sr-only</code>. Combine <code>.sr-only</code> with <code>.sr-only-focusable</code> to show the element again when it is focused.</p>
<h3><span id=""Image_replacement"">Image replacement</span></h3>
<p>Utilize the .text-hide class to help replace an element’s text content with a background image.</p>
<pre class=""prettyprint lang-html"">&lt;h1 class=""text-hide""&gt;Hide this heading&lt;/h1&gt;
</pre>
<h3><span id=""Responsive_table"">Responsive table</span></h3>
<p>In order to create responsive tables, you should use the <code>.table-responsive</code> class. This class only affects the display on devices less than 768px, for larger devices there would be no effect. For creating tables, you would use a standard <code>&lt;table&gt;</code> tag; however, along with this we should also use .table class for the element.</p>
<p>For rendering borders around the tables and cells, the class is <code>.table-bordered</code>; and for displaying alternate colored rows you should use <code>.table-striped</code> class. Similarly, for changing colors of the rows while mouse hovering, you would use the .table-hover class.</p>
<h3><span id=""Responsive_embeds"">Responsive embeds</span></h3>
<p>Allow browsers to determine video or slideshow dimensions based on the width of their containing block by creating an intrinsic ratio that will properly scale on any device. Rules are directly applied to <code>&lt;iframe&gt;</code>, <code>&lt;embed&gt;</code>, <code>&lt;video&gt;</code>, and <code>&lt;object&gt;</code> elements; optionally use an explicit descendant class <code>.embed-responsive-item</code> when you want to match the styling for other attributes.<br/>
For Example,</p>
<pre class=""prettyprint lang-html"">&lt;!-- 21:9 aspect ratio --&gt;
&lt;div class=""embed-responsive embed-responsive-21by9""&gt;
  &lt;iframe class=""embed-responsive-item"" src=""...""&gt;&lt;/iframe&gt;
&lt;/div&gt;
</pre>
<p>Aspect ratios can be customised with modifier classes.</p>
",0,"standard","post"
"Vertical, Horizontal and Inline Form Example in Bootstrap","vertical-horizontal-and-inline-form-example-in-bootstrap","Forms are the essential part of any web page or web application. Styling the basic HTML form controls with CSS are often tedious.
","LIVE","
<h3><span id=""1_Bootstrap_Form_Layouts"">1. Bootstrap Form Layouts</span></h3>
<p>Forms are the essential part of any web page or web application. Styling the basic HTML form controls with CSS are often tedious. Bootstrap simplifies this by providing set of predefined classes. Bootstrap provides three types of form layouts:</p>
<ol>
<li>Vertical form layout (default layout)</li>
<li>Horizontal form layout</li>
<li>Inline form layout</li>
</ol>
<p>Bootstrap form controls automatically gets some global styling like, all textual <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code> and <code>&lt;select&gt;</code> elements with class <code>.form-control</code> have a width of 100%. Basic rules for form layouts are as follows;</p>
<ul>
<li>Always use <code>&lt;form role=""form""&gt;</code>, helps improve accessibility for people using screen readers</li>
<li>For optimum spacing wrap labels and form controls in <code>&lt;div class=""form-group""&gt;</code></li>
<li>Add class .form-control to all textual <code>&lt;input&gt;,&lt;textarea&gt;</code> and <code>&lt;select&gt;</code> elements</li>
</ul>
<p>Let’s dive in details to each form layout examples.</p>
<h3><span id=""2_Bootstrap_Vertical_Form_Layout"">2. Bootstrap Vertical Form Layout</span></h3>
<p>This is the default Bootstrap form layout in which the fields are aligned vertically to its parent. Let us create a simple log-in registration form using vertical form layout.</p>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt; 
&lt;html lang=""en""&gt;  
&lt;head&gt;    
&lt;title&gt;My first Bootstrap page &lt;/title&gt;    
&lt;meta name=""viewport"" content=""width=device-width, initialscale=1""&gt;    
&lt;link href=""CSS/bootstrap.min.css"" rel=""stylesheet""&gt;   
&lt;link href=""CSS/bootstrap-theme.min.css"" rel=""stylesheet""&gt;    
&lt;script type=""text/javascript"" src=""JS/bootstrap.min.js""&gt;&lt;/script&gt; 
 &lt;/head&gt; 
 &lt;body&gt;
&lt;div class=""container"" style=""max-width:600px;margin:60px auto;""&gt;
	&lt;form role=""form""&gt;
	   &lt;div class=""form-group""&gt;
	      &lt;label for=""name""&gt;First name&lt;/label&gt;
	      &lt;input type=""name"" class=""form-control"" id=""fname"" placeholder=""Enter name""&gt;
	   &lt;/div&gt;
	   &lt;div class=""form-group""&gt;
	      &lt;label for=""address""&gt;Second name&lt;/label&gt;
	      &lt;input type=""address"" class=""form-control"" id=""sname"" placeholder=""Enter surname""&gt;
	   &lt;/div&gt;
	   &lt;div class=""form-group""&gt;
	      &lt;label for=""email""&gt;Email&lt;/label&gt;
	      &lt;input type=""email"" class=""form-control"" id=""email"" placeholder=""Enter email""&gt;
	   &lt;/div&gt;
	   &lt;div class=""form-group""&gt;
	      &lt;label for=""pwd""&gt;Password&lt;/label&gt;
	      &lt;input type=""password"" class=""form-control"" id=""pwd"" placeholder=""Enter password""&gt;
	   &lt;/div&gt;
	     &lt;button type=""submit"" class=""btn btn-default""&gt;Register&lt;/button&gt;
	&lt;/form&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here the output for the above code,<br/>
<img alt=""Bootstrap Vertical Form Layout Example"" class=""aligncenter wp-image-10456 size-full"" height=""429"" loading=""lazy"" src=""/media/uploads/articles/125/Bootstrap-Vertical-Form-Layout-Example.png"" srcset="""" width=""595""/></p>
<h3><span id=""3_Bootstrap_Horizontal_Form_Layout"">3. Bootstrap Horizontal Form Layout</span></h3>
<p>A horizontal form is different from the Vertical forms layout both in the amount of mark-up, and in the presentation of the form. In this form layout labels are floated to left of the input field. Both Label and Input field appear on the same line. Rules for a horizontal form in addition to the default rules,</p>
<p>All you have to do is to add <code>.form-horizontal</code> class to the <code>&lt;form&gt;</code> element and <code>.control-label</code> class to all <code>&lt;label&gt;</code> element. Use Bootstrap’s predefined grid classes to align labels and form controls.</p>
<pre class=""prettyprint lang-html"">&lt;div class=""container"" style=""max-width:600px;padding:40px 20px;background:#ebeff2""&gt;
	&lt;h3&gt;Signup&lt;/h3&gt;
	&lt;form class=""form-horizontal"" role=""form""&gt;
	   &lt;div class=""form-group""&gt;
	      &lt;label for=""name"" class =""control-label col-sm-3""&gt;First name&lt;/label&gt;
		&lt;div class=""col-sm-8""&gt;
	      &lt;input type=""name"" class=""form-control"" id=""name"" placeholder=""Enter name""&gt;
		&lt;/div&gt;
	    &lt;/div&gt;
	   &lt;div class=""form-group""&gt;
	      &lt;label for=""address"" class =""control-label col-sm-3""&gt;Second name&lt;/label&gt;
		&lt;div class=""col-sm-8""&gt;
	      &lt;input type=""address"" class=""form-control"" id=""address"" placeholder=""Enter address""&gt;
		&lt;/div&gt;
	    &lt;/div&gt;
	   &lt;div class=""form-group""&gt;
	      &lt;label for=""email"" class =""control-label col-sm-3""&gt;Email&lt;/label&gt;
		&lt;div class=""col-sm-8""&gt;
	      &lt;input type=""email"" class=""form-control"" id=""email"" placeholder=""Enter email""&gt;
		&lt;/div&gt;
	    &lt;/div&gt;
	   &lt;div class=""form-group""&gt;
	      &lt;label for=""pwd"" class =""control-label col-sm-3""&gt;Password&lt;/label&gt;
		&lt;div class=""col-sm-8""&gt;
	      &lt;input type=""password"" class=""form-control"" id=""pwd"" placeholder=""Enter password""&gt;
		&lt;/div&gt;
	    &lt;/div&gt;
	   &lt;div class=""col-sm-offset-2 col-sm-8""&gt;
	     &lt;button type=""submit"" class=""btn btn-default""&gt;Register&lt;/button&gt;
	   &lt;/div&gt;
	&lt;/form&gt;
&lt;/div&gt;
</pre>
<p>Here the output for the above code,<br/>
<img alt=""Bootstrap Horizontal Form Layout"" class=""alignnone wp-image-10458 size-full"" height=""319"" loading=""lazy"" src=""/media/uploads/articles/125/Bootstrap-Horizontal-Form-Layout.png"" srcset="""" width=""598""/></p>
<h3><span id=""4_Bootstrap_Inline_Form_Layout"">4. Bootstrap Inline Form Layout</span></h3>
<p>Bootstrap’s Inline form layout can be used to place the form controls side-by-side in a compact layout. In an inline form, all of the elements are in-line, left-aligned, and the labels are alongside. For this, you need to add .form-inline class to &lt;form&gt; element.</p>
<p>Inline bootstrap form layout example;</p>
<pre class=""prettyprint lang-html"">&lt;form class=""form-inline"" role=""form""&gt;
   &lt;div class=""form-group""&gt;
      &lt;label for=""name""&gt;Name&lt;/label&gt;
	  &lt;input type=""name"" class=""form-control"" id=""name"" placeholder=""Enter name""&gt;
   &lt;/div&gt;
   &lt;div class=""form-group""&gt;
      &lt;label for=""email""&gt;Email&lt;/label&gt;
	  &lt;input type=""email"" class=""form-control"" id=""email"" placeholder=""Enter email""&gt;
 &lt;/div&gt;
   &lt;div class=""form-group""&gt;
      &lt;label for=""pwd""&gt;Password&lt;/label&gt;
	  &lt;input type=""password"" class=""form-control"" id=""pwd"" placeholder=""Enter password""&gt;
   &lt;/div&gt;
   &lt;button type=""submit"" class=""btn btn-default""&gt;Register&lt;/button&gt;
&lt;/form&gt;
</pre>
<p>Here the output for the above code,<br/>
<img alt=""Bootstrap Inline Form Layout"" class=""alignnone size-full wp-image-10459"" height=""166"" loading=""lazy"" sizes=""(max-width: 795px) 100vw, 795px"" src=""/media/uploads/articles/125/Bootstrap-Inline-Form-Layout.png"" srcset="""" width=""795""/></p>
<h4><span id=""Did_you_know"">Did you know?</span></h4>
<ul>
<li>The .form-group class is used to encapsulate multiple controls in a group – just as we have done for labels and corresponding text boxes.</li>
<li>The .control-label and .form-control classes are used to style the labels and form elements respectively.</li>
<li>Using the .input-group class you can associate multiple controls in adjacently.</li>
<li>Disabled or read-only state can be used for the controls – Bootstrap will associate necessary styles automatically, however, all the controls must have .form-control class added.</li>
<li>In order to control the sizes you can use .input-lg, .input-sm classes. For controlling the size of a group you can use .form-group-lg or .form-group-sm classes.</li>
<li>In order to control the sizes you can use .input-lg, .input-sm classes. For controlling the size of a group you can use .form-group-lg or  .form-group-sm classes</li>
<li>For showing up any help texts, you can use .help-block class in a separate label. This will show the texts in a new line.</li>
</ul>
",0,"standard","post"
"How to Fetch All Sub Categories of an Selected WordPress Category","fetch-all-sub-categories-of-an-selected-wordpress-category","The following code snippet will fetch all sub categories of selected category. Add the following code snippet to your themes archive.php/category.php page.
","LIVE","<p>The following code snippet will fetch all sub categories of selected category. Add the following code snippet to your themes archive.php/category.php page.</p>
<pre class=""prettyprint lang-php"">&lt;section class=""sub-category""&gt;
	&lt;div class=""container""&gt;
	&lt;?php
		$cur_cat = get_query_var('cat');
		$args=array(
		    'child_of' =&gt; $cur_cat,
		    'hide_empty' =&gt; 0,
		    'orderby' =&gt; 'name',
		    'order' =&gt; 'ASC',
		    'depth' =&gt; '1'
		
		);
		$categories=get_categories($args);
		foreach($categories as $category) {
			echo '&lt;a href=""' . get_category_link( $category-&gt;term_id ) . '"" title=""' . sprintf( __( ""View all posts in %s"" ), $category-&gt;name ) . '"" ' . '&gt;' . $category-&gt;name.'&lt;/a&gt;';  }
	?&gt;
	&lt;div&gt;
&lt;/section&gt;
</pre>
<p>Let us add some styling to it.</p>
<pre class=""prettyprint lang-css"">section.sub-category {
    background: #ECF1F7;
}

.sub-category a {
    background: #1B9CE2;
    padding: 3px 10px;
    color: #fff;
    display: inline-block;
    font-size: 14px;
    text-transform: uppercase;
    font-weight: bold;
    margin: 10px;
    margin-right: 5px;
    border-radius: 3px;
    -webkit-transition: all .3s ease;
}

.sub-category a:hover {
    text-decoration: none;
    background: rgba(25, 128, 183, 0.79);
}
</pre>
",0,"standard","post"
"Integrate Facebook Instant Articles to Your WordPress Website","integrate-facebook-instant-articles-to-your-wordpress-website","Facebook instant articles are shared 30% more as compared to traditional web pages. As it loads 10x times faster, it also drives more clicks. Initially for a limited period, Facebook released this feature for few allowed publishers. Now from April 2016 it open to all publishers.
","LIVE","<p>Not so long ago Facebook announced the instant articles. Since then there has been a lot of hype around this feature and many websites already started adopting to it. With the instant articles features the web masters can now publish any type of article, from daily news to long form features. It can be integrated seamlessly with your current workflow and existing production tools.</p>
<p>According to the recent study, Facebook instant articles are shared 30% more as compared to traditional web pages. As it loads 10x times faster, it also drives more clicks. Initially for a limited period, Facebook released this feature for few allowed publishers. Now from April 2016 it open to all publishers.</p>
<h2>How Facebook Instant Articles Work?</h2>
<p>The first thing you need for instant article to work on your Website is to have an Facebook Page. When a publisher shares an article onto Facebook, it will generate an instant article optimized version rather than a mobile web version. This can be managed from publisher Facebook page. Publishers can also get paid from the ad revenue generated by selling the ad space within Instance articles.</p>
<p>To get started with Facebook instant articles, here are a few steps you need to follow:</p>
<h3>1. Signup for Instant Articles program</h3>
<p>First you need to signup for the program at <a href=""https://instantarticles.fb.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">Instant Articles</a>. You will be asked to select your Facebook page for which you want to activate this service.</p>
<p><img align=""middle"" alt=""Signup for Facebook Instant Article"" class=""aligncenter"" src=""/media/uploads/articles/127/Signup-for-Facebook-Instant-Article.png"" srcset=""""/></p>
<h3>2. Claim Your URL</h3>
<p>Once you signed up, you will be redirected to your Facebook page. Now claim a URL that you would like to use for publishing articles. Before claim your website’s URL, add the following meta tag to your website’s &lt;head&gt; tag in the HTML and then click “Claim URL” button.</p>
<pre>&lt;meta property=""fb:pages"" content=""22885084343345"" /&gt;</pre>
<p>If your claim is successful, you will notice as following.</p>
<p><img align=""middle"" alt=""Facebook Instant Articles- Claim your URL"" class=""aligncenter"" src=""/media/uploads/articles/127/Facebook-Instant-Articles-Claim-your-URL.png"" srcset=""""/></p>
<h3>3. Connect your RSS feed</h3>
<p>You can synchronize your blog with Facebook instant articles via API or an RSS feed. Provide your RSS feed URL and save. Make sure your RSS feed is valid and error free.</p>
<p><img align=""middle"" alt=""Facebook Instant Articles- Submit RSS"" class=""aligncenter"" src=""/media/uploads/articles/127/Facebook-Instant-Articles-Submit-RSS.png"" srcset=""""/></p>
<h2>Integrate Facebook Instant Articles to WordPress Blog</h2>
<p>Facebook has partnered with different CMS vendors including WordPress, Drupal for helping publisher for seamless integration of their website to instant articles. If you’re a WordPress user, you can download and install the official <a href=""https://wordpress.org/plugins/fb-instant-articles"" rel=""nofollow noopener noreferrer"" target=""_blank"">Instant Articles for WP</a> plugin for WordPress plugin directory. Once plugin is activated,</p>
<p><img align=""middle"" alt=""Instant Article for WP WordPress plugin"" class=""aligncenter"" src=""/media/uploads/articles/127/Instant-Article-for-WP-Wordpress-plugin.png"" srcset=""""/></p>
<p> </p>
<p>Provide your Facebook App ID and App Secret to start using the plugin. If you don’t have an Facebook app setup already, you can create a new app.<br/>After you provide your Facebook app id, you will be asked to login to Facebook and authorize your page. Once the authorization is complete your setup is almost ready.<br/>Note, Although you use the WordPress plugin, the signup for the Instant article as described above is need to be completed to get the plugin to work.</p>
<h3>4. Publish Articles for Review</h3>
<p>Once you complete the above configuration, you need to submit at least 10 articles for review. For that, you can open previously published WordPress post in edit mode and save them and send those to Facebook instant articles RSS feed.</p>
<p>This would send the articles for review. It takes 3-4 days to get them approved. Once approved, you can publish the articles automatically. You can enable auto-publishing from the auto feed and you’re done.</p>
",0,"standard","post"
"jQuery 3.0 Final Version is Now Released","jquery-3-0-final-version-is-now-released","Today jQuery 3.0 final version is out! The overarching goals of the release were to create a slimmer,&hellip;
","LIVE","<p>Today jQuery 3.0 final version is out! The overarching goals of the release were to create a slimmer, faster and better version of jQuery with compatibility in mind. New version of jQuery is the continuation of 2.x branch, but with fixes to long overdue issues.</p>
<p>Older version (v1.12 and v2.2) branches will continue to receive critical support; however developers will not get any new features or major revisions.</p>
<p>All of the Internet Explorer browser workarounds are removed and using some of the morden web APIs. Now if you still want to support IE v6-8 version, you may continue to use the latest 1.12 release.</p>
<p>It is recommended that, for any new development developers should use jQuery 3.0 version. For existing projects, transition to 3.0 won’t be a hassel. There are a few breaking changes, hopefully it actually wont affect that many people. Per usual, to assist with upgrading, brand new jQuery 3.0 developer upgrade guide released. You may use the jQuery Migrate 3.0 plugin to identify compatibility issues in your code.</p>
<h3>jQuery 3.0 CDN files:</h3>
<pre class=""prettyprint lang-js"">&lt;script src=""https://code.jquery.com/jquery-3.0.0.js""&gt;&lt;/script&gt;

&lt;!-- Minified version --&gt;
&lt;script src=""https://code.jquery.com/jquery-3.0.0.min.js""&gt;&lt;/script&gt;
</pre>
<h3>You can also get the release from npm:</h3>
<pre>npm install jquery@3.0.0</pre>
<p>In addition, we’ve got the release for jQuery Migrate 3.0. We highly recommend using this to address any issues with breaking changes in jQuery 3.0. You can get those files here:</p>
<pre class=""prettyprint lang-js"">&lt;script src=""https://code.jquery.com/jquery-3.0.0.min.js""&gt;&lt;/script&gt;

&lt;!-- Minified version --&gt;
&lt;script src=""https://code.jquery.com/jquery-migrate-3.0.0.js""&gt;&lt;/script&gt;
</pre>
<p>or</p>
<pre>npm install jquery-migrate@3.0.0</pre>
<p>For more information about upgrading your jQuery 1.x and 2.x pages to jQuery 3.0 with the help of jQuery Migrate, see <a href=""http://blog.jquery.com/2016/05/19/jquery-migrate-1-4-1-released-and-the-path-to-jquery-3-0/"" rel=""nofollow noopener noreferrer"" target=""_blank"">the jQuery Migrate 1.4.1 blog post</a>. You can dig into more details on major new features, improvements, bug fixes and migration check out the new <a href=""//jquery.com/upgrade-guide/3.0/"" rel=""nofollow noopener noreferrer"" target=""_blank"">3.0 Upgrade Guide</a>. A complete list of issues fixed is available on our <a href=""https://github.com/jquery/jquery/issues?q=is%3Aissue+milestone%3A3.0.0"" rel=""nofollow noopener noreferrer"" target=""_blank"">GitHub bug tracker</a>.</p>
",0,"standard","post"
"Restrict EditText Min and Max Value Input Range in Android","restrict-edittext-min-and-max-value-input-range-using-android-inputfilter","Using Android LengthFilter, AllCaps and CustomInputFilter example. This tutorial explains how to restrict min max input range using custom InputFilter. 
","LIVE","<p>EditText in Android is one of the basic UI widget used for user data input. An <code>InputFilter</code> can be attached to an EditText to constrain the changes that can be made to them. For example, you want to allow the maximum of 10 characters to be entered, or you want to allow only uppercase characters.</p>
<p>Android SDK comes handy with set of basic filters such as <code>AllCaps</code> and <code>LengthFilter</code>. However, you can always write your own filter implementation using <code>InputFilter</code> interface.</p>
<p>You can use attach a filter to Editables by calling <code>setFilters()</code> method.</p>
<pre class=""prettyprint lang-java"">//Set Length filter. Restricting to 10 characters only
editText.setFilters(new InputFilter[]{new InputFilter.LengthFilter(MAX_LENGTH)});

//Allowing only upper case characters
editText.setFilters(new InputFilter[]{new InputFilter.AllCaps()});

//Attaching multiple filters
editText.setFilters(new InputFilter[]{new InputFilter.LengthFilter(MAX_LENGTH), new InputFilter.AllCaps()});
</pre>
<h3>Min and Max Value Range Filter Example</h3>
<p>For defining your own custom filter, you need to implements <code>InputFilter</code> interface and override the <code>filter()</code> method.</p>
<ul>
<li>The filter() method is called when the buffer is going to replace the range dStart to dEnd of dest with the new text from the range start to end of the source.</li>
<li>Return the CharSequence that you would like to have placed there instead, including an empty string if appropriate, or null to accept the original replacement.</li>
<li>Be careful to not to reject 0-length replacements, as this is what happens when you delete text.</li>
<li>Also beware that you should not attempt to make any changes to dest from this method; you may only examine it for context.</li>
</ul>
<p>Let us now create a custom filter to define the Min and Max value range. The min max range can be set by setting values to constructor initialization.</p>
<pre class=""prettyprint lang-java"">import android.text.InputFilter;
import android.text.Spanned;

public class CustomRangeInputFilter implements InputFilter {
    private double minValue;
    private double maxValue;

    public CustomRangeInputFilter(double minVal, double maxVal) {
        this.minValue = minVal;
        this.maxValue = maxVal;
    }

    @Override
    public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dStart, int dEnd) {
        try {
            // Remove the string out of destination that is to be replaced
            String newVal = dest.toString().substring(0, dStart) + dest.toString().substring(dEnd, dest.toString().length());
            newVal = newVal.substring(0, dStart) + source.toString() + newVal.substring(dStart, newVal.length());
            double input = Double.parseDouble(newVal);

            if (isInRange(minValue, maxValue, input)) {
                return null;
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
        return """";
    }

    private boolean isInRange(double a, double b, double c) {
        return b &gt; a ? c &gt;= a &amp;&amp; c &lt;= b : c &gt;= b &amp;&amp; c &lt;= a;
    }
}
</pre>
<p>You can use this filter using;</p>
<pre class=""prettyprint lang-java"">//Define Min, Max range value using custom input filter
editText.setFilters(new InputFilter[]{new CustomRangeInputFilter(0f, 10.0f)});
</pre>
<p>Welcome to EditPad.org – your online plain text editor. Enter or paste your text here. To download and save it, click on the button below.</p>
<p> more » Edit Pad – Free Online Text EditorEdit Pad © 2018</p>
",0,"standard","post"
"What is SEO? A Beginners Guide to Search Engine Optimisation","what-is-seo-a-beginners-guide-to-search-engine-optimisation","What is SEO? A Beginners Guide to Search Engine Optimisation to get you started with information you need to get on the road to professional quality Search Engine Optimization, or SEO.
","LIVE","<p>SEO Stands for Search Engine Optimisation. SEO is the process of developing or tweaking your website for the search engine to understand, with the intention to achieve a high rank in search results. Once your website is developed, the most fundamental and essential thing you must worry about is to define your online marketing strategy. SEO is the first thing that you need to do on that regards.</p>
<p>SEO is nothing but of a set of tricks, guidelines and includes a massive amount of rich contents. Contents must unique, contextual containing popular/most searched keywords. As SEO deals mostly with rich text, it sometimes also understood as copywriting.</p>
<h2>What is SEO Optimisation?</h2>
<p>Following are some of the terms that well describes the SEO optimization techniques</p>
<ul class=""space"">
<li>SEO is all about optimising a website for Search Engines</li>
<li>SEO is the process of designing and developing a website to rank well in search engine results.</li>
<li>The intent of SEO is to improve the volume and quality of traffic to a web site from search engines.</li>
<li>SEO is one of online marketing strategy but not the only one.</li>
<li>Building SEO for your website needs the deep understanding of how different search algorithms works, what human visitors might search and what are the essential metadata’s that you must configure to let search engines find your website.</li>
</ul>
<h2>How Search Engine Works ?</h2>
<p>Search engines perform various activities in order to deliver search results. Following are some of the activities that most of the leading search engines including Google and Yahoo do for better results.</p>
<ol>
<li><strong>Crawling</strong> – is the process of fetching all the web pages linked to a website. This task is performed by a software, called a crawler or a spider. Google calls its crawler as <strong>Googlebot</strong>.</li>
<li><strong>Indexing</strong> – is the process of creating an index for all the fetched web pages and keeping them into a giant database from where it can later be retrieved. Essentially, the process of indexing is identifying the words and expressions that best describe the page and assigning the page to particular keywords.</li>
<li><strong>Processing</strong> – When a search request comes, the search engine processes it . i.e. it compares the search string in the search request with the indexed pages in the database.</li>
<li><strong>Relevancy Check</strong> – Since it is likely that more than one pages contain the search string, so the search engine starts calculating the relevancy of each of the pages in its index to the search string.</li>
<li><strong>Retrieving Results</strong> – The last step in search engines activities is retrieving the best-matched results. Basically, it is nothing more than simply displaying them in the browser.</li>
</ol>
<p>Search engines such as Google and Yahoo! often update their relevancy algorithm dozens of times per month. When you see changes in your rankings it is due to an algorithmic shift or something else outside of your control. Although the basic principle of operation of all search engines is the same, the minor differences between their relevancy algorithm lead to major changes in results relevancy.</p>
<h2>What is SEO Copy Writing?</h2>
<p>SEO Copywriting is the technique of writing the viewable rich text content on a web page in such a way that the search engine reads well. It should target specific search terms and keywords. Its purpose is to rank highly in the search engines for the targeted search terms.</p>
<p>As well as the viewable text, SEO Copywriting usually optimizes other on-page elements for the targeted search terms. These include the Title, Description and Keywords tags, headings and alt text.</p>
<p>The idea behind SEO Copywriting is that search engines want genuine content pages and not doorway pages that are created for cheating to gain search engine ranking.</p>
<h2>What is Search Engine Rank?</h2>
<p>When you search any keyword using a search engine then it displays thousands of results found in its database. A page ranking is measured by the position of web pages displayed in the search engine results. If the Search engine is putting your web page on the first position then your web page rank will be number 1 and it will be assumed as with a high rank.</p>
<p>Well, now that we understand what is SEO. Let’s think about how to build your website SEO. There are two ways you can plan to build your website SEO; <strong>On-Page SEO </strong>and<strong> <strong>Off-Page SEO </strong></strong>building. In on page SEO, you need to include good content, good keywords and putting keywords on the right places, giving an appropriate title to every page etc. Off-Page SEO is all about link building. This means you need to increase the number of incoming links from reputed websites or by submitting your site to be indexed by open directories, search engines, link exchange etc.</p>
<p>SEO techniques are broadly classified into two categories; White Hat SEO and Black Hat or spamdexing. Techniques that search engines recommend as part of good design referred to as White Hat SEO, and Techniques that search engines do not approve and attempt to minimize the effect of referred to as Black Hat or spamdexing.</p>
<h2>White Hat SEO</h2>
<p>An SEO tactic, technique or method is considered as White Hat if it follows the followings</p>
<ul>
<li>If it comply to the search engine’s guidelines.</li>
<li>If it does not involves any deception. It ensures that the content a search engine indexes and subsequently ranks is the same content a user will see. It ensures that a Web Page content should have been created for the users and not just for the search engines. It ensures the good quality of the web pagesIt ensures the useful content available on the web pages</li>
<li>Always follow a White Hat SEO tactic and don’t try to fool your site visitors. Be honest and definitely you will get something more.</li>
</ul>
<h3>Black Hat or Spamdexing</h3>
<p>An SEO tactic, technique or method is considered as Black Hat or Spamdexing if it follows the followings</p>
<ul>
<li>Try to improve rankings that are disapproved of by the search engines and/or involve deception. Redirecting users from a page that is built for search engines to one that is more human-friendly. Redirecting users to a page that was different from the page the search engine ranked.</li>
<li>Serving one version of a page to search engine spiders/bots and another version to human visitors. This is called <strong>Cloaking</strong> SEO tactic.</li>
<li>Using Hidden or invisible text or with the page background color, using a tiny font size or hiding them within the HTML code such as “no frame” sections.</li>
<li>Repeating keywords in the Meta tags, and using keywords that are unrelated to the site’s content. This is called <strong>Meta tag stuffing</strong>.</li>
<li>Calculated placement of keywords within a page to raise the keyword count, variety, and density of the page. This is called <strong>Keyword stuffing </strong>.</li>
<li>Creating low-quality web pages that contain very little content but are instead stuffed with very similar keywords and phrases. These pages are called <strong>Doorway or Gateway Pages</strong>Mirror websites by hosting multiple websites all with conceptually similar content but using different URLs.</li>
<li>Creating a rogue copy of a popular website which shows contents similar to the original to a web crawler, but redirects web surfers to unrelated or malicious websites. This is called <strong>Page hijacking</strong>.</li>
</ul>
<p>Always be a way to adopt any of the above Black Hat tactics to improve the rank of your site. Search engines are smart enough to identify all the above proprieties of your site and ultimately you are not going to get anything.</p>
",0,"standard","post"
"How to Include WordPress Custom Post Types to Archive Page","how-to-include-wordpress-custom-post-types-to-archive-page","The default WordPress author archive page template displays only default post types. The custom posts are not included. The following WordPress code snippet will help you to include WordPress custom post types to author archive page.
","LIVE","<p>The default WordPress author archive page template displays only default post types. The custom posts are not included. The following WordPress code snippet will help you to include WordPress custom post types to author archive page.</p>
<p>Add the following snippets to your WordPress theme <code>functions.php</code> file:</p>
<pre class=""prettyprint lang-php"">add_filter( 'pre_get_posts', 'my_get_posts' );
function my_get_posts( $query ) {

	if ( is_author() &amp;&amp; $query-&gt;is_main_query()) {
		$query-&gt;set( 'post_type', array( 'post', 'post_type1', 'post_type2' ) );
	}
	return $query;
}
</pre>
<p>Save the changed <code>functions.php</code> and visit your your WordPress author archive.</p>
",0,"standard","post"
"Facebook Encouraging Developers to Migrate to Facebook SDK v4","facebook-encouraging-developers-migrate-to-new-facebook-sdk-v4","The new version of Facebook SDK v4 was announced last year on Facebook Developer Conference. This version includes a major changes to the Login flow, improved error handling and a massive improvement on reducing the overall size of application using Facebook SDK.
","LIVE","<p>Facebook SDK is widely used almost in every app today. It allows seamless integration of Facebook into Android, iOS and web application. Using this you can login to your app via Facebook, comment, like share and access users informations and many more.</p>
<p>The new version of <strong>Facebook SDK v4</strong> was announced last year on Facebook Developer Conference. This version includes a major changes to the Login flow, improved error handling and a massive improvement on reducing the overall size of application using Facebook SDK.</p>
<p>Since then, for quite some time the company is encouraging developers to make a shift from v3 to v4. And finally, Facebook has now announced that it will no longer support v3 starting <strong>June 1, 2017</strong>. This announcement applies to both Android and iOS versions or Unity(v7) versions. The older apps that implements SDK v3 version will continue to work; however, developers cannot take advantages of the new new features after the June 2017.</p>
<p>Some of the improvements on Facebook SDK v4 includes:</p>
<ul>
<li>The size of SDK is significantly reduced. This results the iOS and Android build size. Now your 10MB apk might get around 6/7.</li>
<li>iOS SDK design overhaul to made it more modular with separate Login and Sharing libraries. Now you only include what you need</li>
<li>Updated Facebook Login UI and simpler programming model that doesn’t require the Facebook app to be installed on the person’s device</li>
<li>Improved sharing functionality including video sharing, hashtags, and mixed multimedia support</li>
<li>iOS and Android automatic error recovery</li>
<li>Facebook Analytics for Apps improvements</li>
<li>tvOS and Android/Fire TV support</li>
</ul>
<p> </p>
",0,"standard","post"
"Reading and Creating Text Files Using jQuery and HTML5 File API","reading-and-creating-text-files-using-jquery-and-html5-file-api","The following code snippet demonstrate how to read and create a text files using the jQuery and HTML5&hellip;
","LIVE","<p>The following code snippet demonstrate how to read and create a text files using the jQuery and HTML5 file API. For the sake of simplicity, in this example I am using Bootstrap CSS framework for building the page.</p>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
    &lt;meta charset=""utf-8""&gt;
    &lt;meta name=""description"" content=""Your HTML, CSS, and JavaScript playground.""&gt;
    &lt;title&gt;HTML, CSS, JS Playground&lt;/title&gt;
	&lt;meta content=""width=device-width, initialscale=1"" name=""viewport""&gt;	
	&lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"" rel=""stylesheet""&gt;
	&lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"" rel=""stylesheet""&gt;
	
	&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"" type=""text/javascript""&gt;&lt;/script&gt;
	&lt;script src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"" type=""text/javascript""&gt;&lt;/script&gt;
	
	&lt;script&gt;
	$(document ).ready(function() {
		//Put your java script here
	});
	&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;div class=""container""&gt;		
		&lt;h1&gt;Reading and Creating Text Files Using the HTML5 File API and jQuery&lt;/h1&gt;
		&lt;div class=""form-group""&gt;			
			&lt;button type=""button"" class=""btn btn-default"" id=""btnOpen""&gt;Open...&lt;/button&gt;
			&lt;button type=""button"" class=""btn btn-default"" id=""btnSave""&gt;Save&lt;/button&gt;
		&lt;/div&gt;		
		&lt;input type=""file"" id=""exampleInputFile"" accept="".txt,.csv,.xml"" class=""hidden""&gt;
		&lt;div class=""form-group""&gt;
		  &lt;textarea class=""form-control"" rows=""15"" id=""exampleTextarea""&gt;&lt;/textarea&gt;		  
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/body&gt;
</pre>
<h3>Reading text file</h3>
<pre class=""prettyprint lang-js"">$('#btnOpen').click(function() {
  if ('FileReader' in window) {
    	$('#exampleInputFile').click();
  } else {
    alert('Your browser does not support the HTML5 FileReader.');
  }
});

$('#exampleInputFile').change(function(event) {
  var fileToLoad = event.target.files[0];

  if (fileToLoad) {
    var reader = new FileReader();
    reader.onload = function(fileLoadedEvent) {
      var textFromFileLoaded = fileLoadedEvent.target.result;
	  console.log(""loaded "" + textFromFileLoaded);
      $('#exampleTextarea').val(textFromFileLoaded);
    };
    reader.readAsText(fileToLoad, 'UTF-8');
}
</pre>
<h3>Creating text file</h3>
<pre class=""prettyprint lang-js"">$('#btnSave').click(function() {
  if ('Blob' in window) {
    var fileName = prompt('Please enter file name to save', 'Untitled.txt');
    if (fileName) {
      var textToWrite = $('#exampleTextarea').val().replace(/n/g, 'rn');
      var textFileAsBlob = new Blob([textToWrite], { type: 'text/plain' });

      if ('msSaveOrOpenBlob' in navigator) {
        navigator.msSaveOrOpenBlob(textFileAsBlob, fileName);
      } else {
        var downloadLink = document.createElement('a');
        downloadLink.download = fileName;
        downloadLink.innerHTML = 'Download File';
		
        if ('webkitURL' in window) {
          // Chrome allows the link to be clicked without actually adding it to the DOM.
          downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        } else {
          // Firefox requires the link to be added to the DOM before it can be clicked.
          downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
          downloadLink.click(function(){
          	document.body.removeChild(event.target);
          }); 
		  
          downloadLink.style.display = 'none';
          document.body.appendChild(downloadLink);
        }
        downloadLink.click();
      }
    }
  } else {
    alert('Your browser does not support the HTML5 Blob.');
  }
});
</pre>
",0,"standard","post"
"DNS Server is not Responding? How to Flush your Computer DNS Cache?","dns-server-is-not-responding-how-do-i-flush-dns-cache-on-my-computer","What is DNS? DNS is an acronym for Domain Name System (also referred to as Domain Name Service).&hellip;
","LIVE","<h3>What is DNS?</h3>
<p>DNS is an acronym for Domain Name System (also referred to as Domain Name Service). When you open a website on your computer, the DNS information of that website is cached in your computer memory. So that when you visit the same website next time, the resource record may be referred from cache.</p>
<p>This may cause problems if the website’s DNS information has changed since you last visited the website. For such instances, you may require to force your computer to flush the DNS cache.</p>
<p>The following commands can be used in different operating system to flush the DNS cache.</p>
<h3>Flush DNS on Windows OS</h3>
<ul>
<li>Click on Start button.</li>
<li>Select Run..</li>
<li>Type “cmd” and press OK button.</li>
<li>You should see the following line: C:\Documents and Settings\User&gt;. Type:</li>
</ul>
<pre>ipconfig /flushdns</pre>
<p>You will see a message containing the following:</p>
<p>“Windows IP Configuration Successfully flushed the DNS Resolver Cache.”<br/>
Type “exit” to close the prompt.</p>
<h3>Flush DNS in Mac OS X</h3>
<ul>
<li>Click on Finder in the dock.</li>
<li>Click on Macintosh HD.</li>
<li>Click on Applications.</li>
<li>Click on Utilities.</li>
<li>Double-click on Terminal.</li>
</ul>
<p>On Mac OSX Leopard or newer versions, you can use the following command to flush the DNS resolver cache:</p>
<pre>dscacheutil -flushcache</pre>
<p>For Mac OSX 10.5.1 or earlier versions, you can use the following command:</p>
<pre>lookupd -flushcache</pre>
<h3>Flush DNS in Linux OS</h3>
<p>In Linux, the <code>nscd</code> daemon manages the DNS cache. To flush the DNS cache, restart the nscd daemon. To restart the nscd daemon, use the following command.</p>
<pre>/etc/init.d/nscd restart</pre>
",0,"standard","post"
"Upload Bitmap Image Using HTTP Multipart in Xamarin Android","upload-bitmap-image-to-server-using-http-multipart-in-xamarin-android","In this post, we will take a look at what are the API&#8217;s Xamarin Android facilitates to support multi part upload. For the sake of simplicity, in this example we will upload an bitmap image to server.
","LIVE","<p>In this post, we will take a look at what are the API’s Xamarin Android facilitates to support multipart upload. For the sake of simplicity, in this example, we will upload a bitmap image to the server.</p>

<p>The Multipart upload is a mechanism that enables you to upload large objects in chunks. In a mobile application context, it is useful when you capture a video or a photo using the device camera and want to upload it to your server.</p>
<p>In a multi-part request, each chunk/parts are separated by a delimiter. A delimiter is also known as a boundary that separates each part of a multi-part message. Each part of the message can define its own standard headers such as Content-Type and content disposition providing the name of the file whose value it contains. The multi-part delimiters and header fields are always 7-bit ASCII in any case.</p>
<p>For more detailed information on multi part content type search for RFC1341(MIME) or visit <a href=""http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://www.w3.org/</a></p>
<h2><span id=""1_Convert_the_Bitmap_to_stream"">1. Convert the Bitmap to stream</span></h2>
<p>Let us first convert the bitmap image into byte array to send it as ByteArrayContent via multi part form upload.</p>
<pre class=""prettyprint lang-cs"">public async Task&lt;String&gt; UploadBitmapAsync(Bitmap bitmap)
{
	//converting bitmap into byte stream
	byte[] bitmapData;
	var stream = new MemoryStream();
	bitmap.Compress(Bitmap.CompressFormat.Jpeg, 0, stream);
	bitmapData = stream.ToArray();
	var fileContent = new ByteArrayContent(bitmapData);
}
</pre>
<p>Notice that the <code>bitmap.Compress()</code> write a compressed version of the bitmap to the specified stream. The second integer argument indicates the compress quality ranging from 0 being low quality and to 100 maximum.</p>
<h2><span id=""2_Add_request_headers"">2. Add request headers</span></h2>
<p>Add the following additional content header such as media content type and content disposition. The <code>""my_uploaded_image.jpg""</code> is the name of image sent to server.</p>
<pre class=""prettyprint lang-cs"">fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse (""application/octet-stream"");
fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue(""form-data"")
{
    Name = ""file"",
    FileName = ""my_uploaded_image.jpg""
};
</pre>
<h2><span id=""3_Add_content_chunks"">3. Add content chunks</span></h2>
<p>Now let us initialize <code>MultipartFormDataContent</code> and add the chunks. The boundary is a random string used as a delimiter to separate each part of the message body.</p>
<pre class=""prettyprint lang-cs"">string boundary = ""---8d0f01e6b3b5dafaaadaada"";
MultipartFormDataContent multipartContent= new MultipartFormDataContent (boundary);
multipartContent.Add (fileContent);
//multipartContent.Add(fileContent2);
//multipartContent.Add(fileContent3);
</pre>
<p>Declare a string constant that represents the web service endpoint to upload the poi image using multi part.</p>
<h2><span id=""4_Upload_Bitmap_using_HttpClient"">4. Upload Bitmap using HttpClient</span></h2>
<p>Let us now proceed to upload the form content to server using HttpClient class PostAsync() method. The following code snippet demonstrates using HttpClient class for posting data to server.</p>
<pre class=""prettyprint lang-cs"">HttpClient httpClient = new HttpClient ();
HttpResponseMessage response = await httpClient.PostAsync (UPLOAD_IMAGE, multipartContent);
if (response.IsSuccessStatusCode) {
      string content = await response.Content.ReadAsStringAsync();
 	return content;
}
return null;
</pre>
<h2><span id=""5_Complete_example_code"">5. Complete example code</span></h2>
<pre class=""prettyprint lang-cs"">private const string UPLOAD_IMAGE = “http://YOUR_SERVER/api/poi/upload”
public async Task&lt;String&gt; UploadBitmapAsync (Bitmap bitmap){
	byte[] bitmapData;
	var stream = new MemoryStream();
	bitmap.Compress(Bitmap.CompressFormat.Jpeg, 0, stream);
	bitmapData = stream.ToArray();
	var fileContent = new ByteArrayContent(bitmapData);

	fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse (""application/octet-stream"");
	fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue(""form-data"")
	{
		Name = ""file"",
		FileName = ""my_uploaded_image.jpg""
	};

	string boundary = ""---8d0f01e6b3b5dafaaadaad"";
	MultipartFormDataContent multipartContent= new MultipartFormDataContent (boundary);
	multipartContent.Add (fileContent);
	
	HttpClient httpClient = new HttpClient ();
	HttpResponseMessage response = await httpClient.PostAsync (UPLOAD_IMAGE, multipartContent);
	if (response.IsSuccessStatusCode) {
		string content = await response.Content.ReadAsStringAsync ();
		return content;
	}
	return null;
}
</pre>
",0,"standard","post"
"How to Speed up your Android Smartphone","how-to-speed-up-your-android-smartphone","Is your Android phone is sluggish? Here are couple of tips that will help to improve the performance and&hellip;
","LIVE","<p>Is your Android phone is sluggish? Here are couple of tips that will help to improve the performance and responsiveness of your Android device.</p>
<h2>1. Uninstall or disable unused apps</h2>
<p>Android phone shipped with many preloaded applications, which you may not be using frequently. Uninstall all the apps that are unused and install the app only as you need them. For easy discovery, you can add your favourite application  to your Google Play wish list.</p>
<p>Each time downloading application form Google Play, will cost you the data. And this is painful, especially if you are in a limited data plan. For such cases, you can take a backup of your application to your device SDCard and delete from the installed application list. You can download “<a href=""https://play.google.com/store/apps/details?id=mobi.infolife.appbackup&amp;hl=en"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>App Backup &amp; Restore</b></a>”. This will help you not to download apps from Google Play each time you need them.</p>
<h2>2. Uninstall additional launchers and themes</h2>
<p>Awesomeness of Android Operating system is, it allows you to customize your phone completely. You can choose your launcher, theme and icon pack. But having many launchers and themes may result slowness to your phone response time.</p>
<p>As a launcher is a way to, access your apps from the list of installed apps. If the launcher is not optimized, then this will disappoint you with your smartphone experience. So be picky while choosing your launcher and theme. Below are the list of my recommended ones</p>
<ul>
<li><a href=""https://play.google.com/store/apps/details?id=com.anddoes.launcher&amp;hl=en"" rel=""nofollow noopener noreferrer"" target=""_blank"">Apex Launcher</a></li>
<li><a href=""https://play.google.com/store/apps/details?id=com.gau.go.launcherex&amp;hl=en"" rel=""nofollow noopener noreferrer"" target=""_blank"">Go Launcher EX</a></li>
<li><a href=""https://play.google.com/store/apps/details?id=com.teslacoilsw.launcher&amp;hl=en"" rel=""nofollow noopener noreferrer"" target=""_blank"">Nova Launcher</a></li>
<li><a href=""https://play.google.com/store/apps/details?id=com.google.android.launcher&amp;hl=en"" rel=""nofollow noopener noreferrer"" target=""_blank"">Google Now Launcher</a></li>
</ul>
<h2>3.<b> Clear browser cache</b></h2>
<p>Most of the browsers are cache enabled. If you have not cleared your browser cache manually, this will consume the memory and can slow down your smartphone. You can delete your browser cache form “History” -&gt; “Clear Browsing Data”.</p>
<p>For clearing cache on Chrome,</p>
<ul>
<li>Click the menu button on Chrome browser. It is placed on your top right corner and then settings.</li>
<li>Scroll down to Privacy Configuration. Should see options to clear History, Cache, Cookies, Form data, passwords, and location access.</li>
<li>Click whichever one you want to clear, (this case Cache) and click okay.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Clear-Your-Browsers-Cache-Android"" class=""alignnone size-full wp-image-10249"" height=""503"" loading=""lazy"" sizes=""(max-width: 670px) 100vw, 670px"" src=""/media/uploads/articles/136/Clear-Your-Browsers-Cache-Android.jpg"" srcset="""" width=""670""/></a></p>
<h2>4. Remove unnecessary widgets and shortcuts</h2>
<p>Android widgets are the useful stuffs, that makes you to reach to the important information without opening the application. They can added to your phone home screen. These widgets are getting refreshed periodically to query the data. For example, If you have an widget for getting the live football score, then it will need to refresh periodically. Which means that the widgets runs on the background. Which will lead to data and memory consumption. Delete all unused application shortcuts and widgets and keep it to minimal to improve your android phone performance.</p>
<h2>5. Limit or disable background data</h2>
<p>Most of the android application uses services to fetch latest information from internet. For example, Facebook app in android takes considerable amount of data even when it is in the background. It is not just Facebook only app, most others do the same. This will result in data cost as well as impact hugely on your battery.</p>
<p>If your phone has Android 4.0 or above you can check your usage via the OS. If your phone is not currently running Android 4.0 or above you’ll want to skip down to the next section where we talk about third-party monitoring tools.</p>
<p>To limit or disable background data usage, navigate to <strong>Settings –&gt; Wireless &amp; Networks –&gt; Data Usage</strong>. You’ll see a screen that looks something like the first screen:</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""limit-or-disable-background-data-usage-Android"" class=""alignnone size-full wp-image-10248"" height=""346"" loading=""lazy"" sizes=""(max-width: 650px) 100vw, 650px"" src=""/media/uploads/articles/136/limit-or-disable-background-data-usage-Android.jpg"" srcset="""" width=""650""/></a><br/>
 </p>
",0,"standard","post"
"How to Display Text Overlay on a Responsive Image in Bootstrap","how-to-display-text-overlay-on-a-responsive-image-in-bootstrap","Displaying text over an image thumbnail is one of the most common pattern used widely by most of the websites. In this tutorial, we will take a look into how to design a responsive grid of images using and display text over each image item.
","LIVE","<p>Displaying text over an image thumbnail is one of the most common pattern used widely by most of the websites. In this tutorial, we will take a look into how to design a responsive grid of images using and display text over each image item.</p>
<p>Bootstrap offers different ways to achieve this result. While some developers prefer to use a carousel with a single item others use CSS tricks. In this example, we will use one of the easy way out.</p>
<div class=""filename"">Complete Source Code</div>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
    &lt;title&gt;Bootstrap image Overlay&lt;/title&gt;
    &lt;meta content=""width=device-width, initialscale=1"" name=""viewport""&gt;
    &lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"" rel=""stylesheet""&gt;
    &lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"" rel=""stylesheet""&gt;
    &lt;script src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.j"" type=""text/javascript""&gt;
    &lt;/script&gt;
    &lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"" type=""text/javascript""&gt;
    &lt;/script&gt;
    &lt;style&gt;
    .caption {
        width:100%;
        bottom: .3rem;
        position: absolute;
        background:#000;
        background: -webkit-linear-gradient(bottom, #000 40%, rgba(0, 0, 0, 0) 100%) repeat scroll 0 0 rgba(0, 0, 0, 0);
        background: -moz-linear-gradient(bottom, #000 40%, rgba(0, 0, 0, 0) 100%) repeat scroll 0 0 rgba(0, 0, 0, 0);
        background: -o-linear-gradient(bottom, #000 40%, rgba(0, 0, 0, 0) 100%) repeat scroll 0 0 rgba(0, 0, 0, 0);
        background: linear-gradient(to top, #000 40%, rgba(0, 0, 0, 0) 100%) repeat scroll 0 0 rgba(0, 0, 0, 0);
    }

    .thumbnail {
        border: 0 none;
        box-shadow: none;
        margin:0;
        padding:0;
    }

    .caption h4 {
        color: #fff;
        -webkit-font-smoothing: antialiased;
    }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=""container"" style=""margin:20px;""&gt;
        &lt;div class="" col-sm-12 row""&gt;
            &lt;div class=""col-sm-4""&gt;
                &lt;div class=""col-sm-12 thumbnail text-center""&gt;
                    &lt;img alt="""" class=""img-responsive"" src=
                    ""http://www.wallpapereast.com/static/images/6801692-lovely-nature-wallpaper.jpg""&gt;

                    &lt;div class=""caption""&gt;
                        &lt;h4&gt;Lorem ipsum dolor sit amet, consectetur&lt;/h4&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class=""col-sm-4""&gt;
                &lt;div class=""col-sm-12 thumbnail text-center""&gt;
                    &lt;img alt="""" class=""img-responsive"" src=
                    ""http://www.wallpapereast.com/static/images/6801692-lovely-nature-wallpaper.jpg""&gt;

                    &lt;div class=""caption""&gt;
                        &lt;h4&gt;Lorem ipsum dolor sit amet, consectetur&lt;/h4&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            
            &lt;div class=""col-sm-4""&gt;
                &lt;div class=""col-sm-12 thumbnail text-center""&gt;
                    &lt;img alt="""" class=""img-responsive"" src=
                    ""http://www.wallpapereast.com/static/images/6801692-lovely-nature-wallpaper.jpg""&gt;

                    &lt;div class=""caption""&gt;
                        &lt;h4&gt;Lorem ipsum dolor sit amet, consectetur&lt;/h4&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
",0,"standard","post"
"7 Commendable HTML5 Frameworks That Augment Responsive Web Design","7-commendable-html5-frameworks-that-augment-responsive-web-design","Not long ago, developing a full-fledged website while ensuring its cross-browser compatibility was considered as one of the&hellip;
","LIVE","<p>Not long ago, developing a full-fledged website while ensuring its cross-browser compatibility was considered as one of the most tedious jobs. However, the evolution of web design frameworks entailed with the latest technology has made the task much efficient and simpler. These frameworks have eradicated the need to manually write the code again and again when needed, as they include predefined codes. They, thus, scrutinize the web development process, and make it easier and faster.</p>
<p>In this mobile age, the significance of a responsive web design cannot be ignored. Since, with this design approach, your websites can proficiently scale to a variety of websites, you can proficiently target a gigantic audience base. Moreover, while ensuring a smooth and flawless performance of your site on any device, it also enhances the visibility of your site on the web.</p>
<p>Fortunately, there are several HTML5 frameworks that buttress the responsive website development. In this post, I have enlisted a few of the most recommended HTML5 frameworks that every web developer or designer must know. Let’s explore them briefly.</p>
<h2>1. Foundation</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""html5 framework foundation"" class=""aligncenter wp-image-9008 size-large"" height=""262"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/138/html5-framework-foundation-940x373.png"" srcset="""" width=""660""/></a>You might have heard about the <a href=""http://foundation.zurb.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">Foundation</a> framework before, as it is one of the most popular responsive framework available out there. It offers a slew of HTML and CSS based design templates for UI components, including buttons, typography, navigation, and more. With this framework, you can easily create even complicated design layouts without delving deep into the creation of a plethora of custom elements. It supports up to 12 column grid that can scale down to fit any size. It is loaded with brilliant features like Off Canvas, Flex, Video, Interchange and a lot more.</p>
<h2>2. Bootstrap</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Bootstrap"" class=""wp-image-9713 size-medium aligncenter"" height=""280"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/138/html5-framework-bootstrap-620x280.png"" srcset="""" width=""620""/></a><br/>
<a href=""http://getbootstrap.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">Bootstrap</a> is an amazing framework that is popular among web professionals for delivering outstanding front end web solutions. It expedites the web development and makes it extremely easy to design the look and feel of a website in a desired way. It is HTML and CSS compliant, and allows one to design intuitive and enticing interfaces with UI components like carousels, forms, typography, navigations, buttons, tabs, and so forth. Most importantly, it supports responsive design, thus you can efficiently create a responsive website.</p>
<h2>3. HTML5 Boilerpoint</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""html5 framework boilerpoint"" class=""aligncenter wp-image-9009 size-large"" height=""262"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/138/html5-framework-boilerpoint-940x373.png"" srcset="""" width=""660""/></a><br/>
HTML5 <a href=""https://html5boilerplate.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">Boilerpoint</a> is a powerful front-end template framework that offers fast and highly adaptable web solutions. It offers a sleek HTML template with an optimized Google Analytics snippet and responsive design. It is based on the HTML5 and CSS technologies. You can deploy this framework and get started with your new projects with ease and a great efficiency.</p>
<h2>4. Skeleton</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""html5 framework skeleton"" class=""aligncenter wp-image-9010 size-large"" height=""262"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/138/html5-framework-skeleton-940x373.png"" srcset="""" width=""660""/></a><br/>
This powerful framework only features an array of standard HTML elements and a grid. For this reason, it makes a great choice for accomplishing the front-end website designing needs of a smaller project or for the projects that don’t require components and features included in any larger frameworks. The framework is extremely lightweight, embracing around 400 lines of code and offers an invaluable solution for developing simple websites for mobile.</p>
<p>Although it is not a UI framework, it is a great tool to get started. You can efficiently start working on this framework, as it hardly requires compilation and installation. Get more info from <a href=""http://getskeleton.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">Skeleton</a> website.</p>
<h2>5. HTML KickStart</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""html5 framework kickstart"" class=""aligncenter wp-image-9011 size-large"" height=""262"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/138/html5-framework-kickstart-940x373.png"" srcset="""" width=""660""/></a><br/>
HTML <a href=""http://www.99lime.com/elements/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Kickstart</a> embraces a set of ultra-lean, high-end UI elements and layout based on the robust technologies, including HTML5, CSS, and jQuery. It has been developed to help you headstart your website development projects with predefined front-end components. With this framework, you can rapidly create your website and integrate elements like slideshows, grid, buttons, and image placeholders, to name a few. Thus, you can develop the requisite app with a great ease.</p>
<h2>6. Web Starter Kit</h2>
<p><a href=""/articles/7-commendable-html5-frameworks-that-augment-responsive-web-design/attachment/html5-framework-webstarter-kit""><img alt=""html5 framework webstarter kit"" class=""aligncenter wp-image-9012 size-large"" height=""262"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/138/html5-framework-webstarter-kit-940x373.png"" srcset="""" width=""660""/></a><br/>
Google Web <a href=""https://developers.google.com/web/tools/starter-kit/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Starter Kit</a> is an assertive boilerplate available for web development. Optimized to deliver prolific performance, this kit allows one to efficiently develop trendy websites that adhere to the Web Fundamentals outlined by Google. This kit makes a great pick for both adroit and novice web developers. The outstanding tools included in this kit helps one to create websites with a great UX.</p>
<p>While offering you a visual style guide and boilerplate style guide, it also allows one to customize the visual appearance and create a fresh and unique web design.</p>
<h2>7. UI Kit</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""html5 framework uikit"" class=""aligncenter wp-image-9013 size-large"" height=""262"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/138/html5-framework-uikit-940x373.png"" srcset="""" width=""660""/></a><br/>
<a href=""http://getuikit.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">UI Kit</a> is yet another lightweight framework that helps one to efficiently design the front-end of a website while keeping mobiles in mind. A whopping number of HTML, CSS and JavaScript based components are included in this framework that facilitates one to quickly create a web interface by efficiently customizing the UI elements as per the requirements. The preprocessor language of this framework is LESS, which can be maintained conveniently.</p>
<p>These are a few of the worthwhile HTML5 frameworks available out there that support responsive web design. All these frameworks deliver a remarkable performance and helps create an incredible interface. Streamline your choice by taking your project needs into account and use the most suitable framework to stay productive while delivering an ultimate design.</p>
<p><em>This article is contributed by Jack Calder. He is a complete professional having a great experience in web application development. He is working as Sr. Web Developer in <a href=""http://www.markupcloud.com/services/psd-to-html"" rel=""nofollow noopener noreferrer"" target=""_blank"">Markupcloud Ltd</a>, A promising company to convert PSD to HTML company having great experience.</em></p>
",0,"standard","post"
"How to Enable USB Debugging and Developer Options in Android 4.2 and Higher","how-to-enable-usb-debugging-and-developer-options-in-android-4-2-and-higher","If you&#8217;re an developer, I am sure the first thing you will do after you buying your brand new Android phone is to enable the developer options&#8230;
","LIVE","<p>If you’re an developer, I am sure the first thing you will do after you buying your brand new Android phone is to enable the developer options. But you will notice that the the developer option is not available beforehand in your device settings for Android 4.2 and higher.</p>
<p>In all earlier versions of Android you can simply hop into the settings menu and go to developer options preference to enable the USB debugging. But in the latest versions of Android, Google has hidden the developer options so that non-develoeprs unintentionally won’t mess up their devices.</p>
<p>Here are the steps to enable the Developer Options on your phone.</p>
<ol>
<li>Go to <strong>Settings</strong> menu on your device.</li>
<li>Go to <strong>About</strong> submenu. In some devices the About submenu will be under <strong>More</strong>/<strong>General</strong> submenu. On some other devices (On HTC devices you will have to goto <strong>Settings</strong> &gt; <strong>About</strong>&gt; <strong>Software Information </strong>&gt; <strong>More</strong>)</li>
<li>Now scroll to <strong>Build Number</strong> and tap it 7 times.</li>
<li>After tapping 7 times you will see an alert saying <strong>You are now a developer </strong>or<strong> Developer mode has been enabled</strong>.</li>
<li>Now if you go to your <strong>Settings</strong> menu, you will see the developer options submenu over there.</li>
<li>Tap on the <strong>Developer</strong> options and then turn on <strong>USB Debugging</strong>.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""USB-Debugging-Android"" class=""alignnone size-large wp-image-10257"" height=""375"" loading=""lazy"" sizes=""(max-width: 900px) 100vw, 900px"" src=""/media/uploads/articles/139/USB-Debugging-Android-940x392.png"" srcset="""" width=""900""/></a><br/>
Bingo! Now you’re a developer. You can now be able to connect your device to your computer and do your development experiment.</p>
",0,"standard","post"
"Bootstrap Grid System Example","bootstrap-grid-system-example","Bootstrap framework offers grid system with extensive use of div element which is dynamically compatible with all devices and screens. 
","LIVE","<p>Bootstrap framework offers grid system with extensive use of div element which is dynamically compatible with all devices and screens. The main advantage of grid systems you get rid of the traditional HTML Tables as far as possible and use fluid div elements.</p>
<!--TOC-->
<p>The basic architecture of the grid system is that the screen is horizontally divided into maximum 12 columns (logically).It means grid system allows up to 12 columns across the page .If you don’t want to use all 12 column individually, you can group the columns together to create wider columns.</p>
<h2>Bootstrap Grid Classes</h2>
<p>The Bootstrap grid system has four classes, they are xs, sm, md and lg. These provided classes are used to create each combination of columns –for each device size. Remember that grid columns should add up to twelve for a row. More than that, columns will stack no matter the viewport.</p>
<p>The following matrix illustrates this:</p>
<table>
<tbody>
<tr>
<td><strong>Class Names</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1</td>
<td>Classes to use to consume one column in the corresponding device size.</td>
</tr>
<tr>
<td>.col-xs-2, .col-sm-2, .col-md-2, .col-lg-2</td>
<td>Classes to use to consume two columns in the corresponding device size.</td>
</tr>
<tr>
<td>.col-xs-3, .col-sm-3, .col-md-3, .col-lg-3</td>
<td>Classes to use to consume three columns in the corresponding device size.</td>
</tr>
<tr>
<td>.col-xs-4, .col-sm-4, .col-md-4, .col-lg-4</td>
<td>Classes to use to consume four columns in the corresponding device size.</td>
</tr>
<tr>
<td>.col-xs-5, .col-sm-5, .col-md-5, .col-lg-5</td>
<td>Classes to use to consume five columns in the corresponding device size.</td>
</tr>
<tr>
<td>.col-xs-6, .col-sm-6, .col-md-6, .col-lg-6</td>
<td>Classes to use to consume six columns in the corresponding device size.</td>
</tr>
<tr>
<td>.col-xs-7, .col-sm-7, .col-md-7, .col-lg-7</td>
<td>Classes to use to consume seven columns in the corresponding device size.</td>
</tr>
<tr>
<td>.col-xs-8, .col-sm-8, .col-md-8, .col-lg-8</td>
<td>Classes to use to consume eight columns in the corresponding device size.</td>
</tr>
<tr>
<td>.col-xs-9, .col-sm-9, .col-md-9, .col-lg-9</td>
<td>Classes to use to consume nine columns in the corresponding device size.</td>
</tr>
<tr>
<td>.col-xs-10, .col-sm-10, .col-md-10, .col-lg-10</td>
<td>Classes to use to consume ten columns in the corresponding device size.</td>
</tr>
<tr>
<td>.col-xs-11, .col-sm-11, .col-md-11, .col-lg-11</td>
<td>Classes to use to consume eleven columns in the corresponding device size.</td>
</tr>
<tr>
<td>.col-xs-12, .col-sm-12, .col-md-12, .col-lg-12</td>
<td>Classes to use to consume twelve columns in the corresponding device size.</td>
</tr>
</tbody>
</table>
<h2>Grid System Rules</h2>
<p>Some Boot strap grid system rules,</p>
<ul>
<li>Rows must be placed within a .container (fixed-width) or .container-fluid (full-width) for proper alignment and padding.</li>
<li>Use Rows to create horizontal groups of columns</li>
<li>Content should be placed within columns, and only columns may be immediate children of rows</li>
<li>Predefined classes like .row and .col-sm-4 are available for quickly making grid layouts.</li>
<li>Columns create gutters (gaps between column content) via padding. That padding is offset in rows for the first and last column via negative margin on .rows</li>
<li>Grid columns are created by specifying the number of 12 available columns you wish to span. For example, three equal columns would use three .col-sm-4</li>
</ul>
<h2>Structure of a Bootstrap Grid</h2>
<p>The following is the basic structure of the Bootstrap grid,</p>
<pre class=""prettyprint lang-html"">&lt;div class=""container""&gt;
  &lt;div class=""row""&gt;
    &lt;div class=""col-*-*""&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=""row""&gt;
    &lt;div class=""col-*-*""&gt;&lt;/div&gt;
    &lt;div class=""col-*-*""&gt;&lt;/div&gt;
    &lt;div class=""col-*-*""&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=""row""&gt;
    ...
  &lt;/div&gt;
&lt;/div&gt;
</pre>
<p>Let’s see with more Examples,</p>
<p><strong>Scenario: 1</strong><br/>
Suppose we want to create three equal columns – irrespective of all device sizes. The code for this is as follows:</p>
<pre class=""prettyprint lang-html"">&lt;div class=""row""&gt;
  &lt;div class=""col-xs-4 col-sm-4 col-md-4 col-lg-4""&gt;   
 Column 1: col-xs-4 col-sm-4 col-md-4 col-lg-4 
 &lt;/div&gt; 
 &lt;div class=""col-xs-4 col-sm-4 col-md-4 col-lg-4""&gt;    
Column 2: col-xs-4 col-sm-4 col-md-4 col-lg-4 
 &lt;/div&gt; 
 &lt;div class=""col-xs-4 col-sm-4 col-md-4 col-lg-4""&gt;  
  Column 3: col-xs-4 col-sm-4 col-md-4 col-lg-4  
&lt;/div&gt; 
&lt;/div&gt;
</pre>
<p>The output of the above code,</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Bootstrap Grid Sample Example1"" class=""alignnone size-medium wp-image-9989"" height=""127"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/140/Bootstrap-Grid-Sample-Example1-620x127.png"" srcset="""" width=""620""/></a></p>
<p>Note: Make sure that the sum always adds up to 12.<br/>
<strong>Scenario: 2</strong><br/>
In the below code we are displaying only first two column in smaller screen and the third column will not be displayed. This is why we mentioned col-xs-6 in two columns, which is sum as 12.</p>
<pre class=""prettyprint lang-html"">&lt;div class=""row""&gt;
&lt;div class=""col-xs-6 col-sm-4 col-md-4 col-lg-4"" style=""background-color:#F0B2D1;""&gt;  
Column 1: display-xs,display-sm,display-md,display-lg 
&lt;/div&gt;
&lt;div class=""col-xs-6 col-sm-4 col-md-4 col-lg-4"" style=""background-color:#E066A3;""&gt;  
Column 2: display-xs,display-sm,display-md,display-lg  
&lt;/div&gt;  
&lt;div class=""hidden-xs col-sm-4 col-md-4 col-lg-4"" style=""background-color:#D11975;""&gt;  
Column 3: hidden-xs,display-sm,display-md,display-lg 
&lt;/div&gt;
</pre>
<p>The output of the above code</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Bootstrap Grid Sample Example2"" class=""alignnone size-large wp-image-9990"" height=""236"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/140/Bootstrap-Grid-Sample-Example2-940x336.png"" srcset="""" width=""660""/></a></p>
<p><strong>Scenario 3:</strong><br/>
In smaller screens we need all the columns to be vertical. In medium screens first two columns should consume more space while in large screens they should be equal. Here is the code,</p>
<pre class=""prettyprint lang-html"">&lt;div class=""row""&gt;
&lt;div class=""col-xs-12 col-sm-5 col-md-5 col-lg-4"" style=""background-color:#F0B2D1;""&gt;  
 Column 1: vertical display-xs,column 1: large area display-sm,column 1: large area display-md,display-lg 
&lt;/div&gt;
&lt;div class=""col-xs-12 col-sm-5 col-md-5 col-lg-4"" style=""background-color:#E066A3;""&gt;  
Column 2: Vertical display-xs,column 2: large area display-sm,column 2: large area display-md,display-lg  
&lt;/div&gt;  
&lt;div class=""col-xs-12 col-sm-2 col-md-2 col-lg-4"" style=""background-color:#D11975;""&gt;  
Column 3: Vertical display-xs,column 3: small area display-sm,column31: small areadisplay-md,display-lg 
&lt;/div&gt; 
&lt;/div&gt;
</pre>
<p>The output of the above code,</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Bootstrap Grid Sample Example3"" class=""alignnone size-large wp-image-9991"" height=""311"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/140/Bootstrap-Grid-Sample-Example3-940x443.png"" srcset="""" width=""660""/></a></p>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
&lt;title&gt;Bootstrap responsive image example - JavaTechig&lt;/title&gt;
&lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"" rel=""stylesheet""&gt;
&lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"" rel=""stylesheet""&gt;
&lt;script type=""text/javascript"" src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js""&gt;&lt;/script&gt;
&lt;/head&gt; 
     &lt;body&gt;
       &lt;div class=""container""&gt;
        &lt;div class=""row""&gt;
        &lt;div class=""col-xs-12 col-sm-5 col-md-5 col-lg-4"" style=""min-height:200px;background-color:#F0B2D1;""&gt;  
          Column 1: vertical display-xs,column 1: large area display-sm,column 1: large area display-md,display-lg 
        &lt;/div&gt;
        &lt;div class=""col-xs-12 col-sm-5 col-md-5 col-lg-4"" style=""min-height:200px;background-color:#E066A3;""&gt;  
        Column 2: Vertical display-xs,column 2: large area display-sm,column 2: large area display-md,display-lg  
        &lt;/div&gt;  
        &lt;div class=""col-xs-12 col-sm-2 col-md-2 col-lg-4"" style=""min-height:200px;background-color:#D11975;""&gt;  
        Column 3: Vertical display-xs,column 3: small area display-sm,column31: small areadisplay-md,display-lg 
		    &lt;/div&gt; 
	     &lt;/div&gt;
      &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>One of the most important points here is that the total size of the columns must always be 12 – if it is less than 12, some space will be left unused, if it is more than 12, the last placeholder will be wrapped in the next line.</p>
<p>As you can see in the above examples, the width (and visibility) of the three columns are being automatically controlled by the classes as per the target device and screen size. Hence, Bootstrap’s grid system enables you to create tabular layouts for all the device sizes quite effortlessly, and without any extra complex CSS/ JavaScript coding.</p>
",0,"standard","post"
"Rendering Responsive Images Using Bootstrap","rendering-responsive-images-using-bootstrap","The .img-responsive bootstrap class provides the ability to control the image rendering as per the available space and screen&hellip;
","LIVE","<p>The <strong>.img-responsive</strong> bootstrap class provides the ability to control the image rendering as per the available space and screen size. Ideally except images, most of the other HTML elements respond to the target device automatically when you include the Bootstrap CSS in your pages. However in case of images, you need to add this class manually.</p>
<p>Following are the &lt;img&gt; classes which can be used to style any image.</p>
<ul>
<li><strong>.img-rounded</strong>: Adds round corners to an image</li>
<li><strong>.img-circle</strong>: Shapes the images to a circle</li>
<li><strong>.img-thumbnail</strong>: Shapes the images to a thumbnail</li>
<li><strong>.img-responsive</strong>: makes an image responsive. The image will scale nicely to the parent element.</li>
</ul>
<p><strong>Example</strong></p>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
&lt;title&gt;Bootstrap responsive image example - JavaTechig&lt;/title&gt;
&lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"" rel=""stylesheet""&gt;
&lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"" rel=""stylesheet""&gt;
&lt;script type=""text/javascript"" src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js""&gt;&lt;/script&gt;
&lt;/head&gt; 
     &lt;body&gt;
       &lt;div class=""container""&gt;
         &lt;div class=""page-header""&gt;&lt;h1&gt;Hello Bootstrap!!&lt;/h1&gt;&lt;/div&gt;
         &lt;div class=""row""&gt;

          &lt;!-- Start content panel --&gt;
           &lt;div class=""col-xs-12 col-sm-12 col-md-12 col-lg-12""&gt;
           
           &lt;ul class=""list-inline""&gt;
              &lt;li&gt;&lt;img src=""images/son.jpg"" class=""img-responsive"" &gt;&lt;/li&gt;
              &lt;li&gt;&lt;img src=""images/son.jpg"" class=""img-responsive"" &gt;&lt;/li&gt;
          &lt;/ul&gt;

		  &lt;ul class = ""list-inline""&gt;
          &lt;li&gt;&lt;img src=""images/temple.jpg"" class=""img-rounded img-responsive""&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=""images/son.jpg"" class=""img-circle img-responsive""&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=""images/rock.jpg"" class=""img-thumbnail img-responsive""&gt;&lt;/li&gt;
		  &lt;/ul&gt;
         &lt;/div&gt; &lt;!-- End row --&gt; 
       &lt;/div&gt; &lt;!-- End container --&gt;

      &lt;!-- Start footer --&gt;
       &lt;div id=""footer""&gt;
         &lt;div class=""container""&gt;
           &lt;div class=""text-muted pull-left""&gt;&lt;a href=""http://stacktips.com"" target=""_blank""&gt;stacktips.com&lt;/a&gt;&lt;/div&gt;
           &lt;div class=""text-muted pull-right""&gt;&lt;a href=""http://twitter.com/npanigrahy"" target=""_blank""&gt;Follow me on twitter&lt;/a&gt;&lt;/div&gt;
         &lt;/div&gt;
       &lt;/div&gt;
       &lt;!-- End footer --&gt;
     &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Output<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Rendering Responsive Images Using Bootstrap"" class=""alignnone size-full wp-image-9982"" height=""705"" loading=""lazy"" sizes=""(max-width: 1062px) 100vw, 1062px"" src=""/media/uploads/articles/141/Rendering-Responsive-Images-Using-Bootstrap.png"" srcset="""" width=""1062""/></a></p>
",0,"standard","post"
"Configure POJOs with Java Collection Attributes in Spring","configure-pojos-with-java-collection-attributes-in-spring","In Spring java collection types can be configured using set of built-in XML tags such as , , and 
. In this example, we will discuss how to configure the the List collection.
","LIVE","<p>Java POJO can contain simple primitive data types or collections. Like the primitive types, the Spring IoC container can instantiate POJOs with Java collection attributes. Java provides different types of collection types including set, list, map, etc. All of the collection types have their specific characteristics.</p>
<p>In Spring all these collection types can be configured using a set of built-in XML tags such as <list>, <set>, and </set></list></p>
<map>. In this example, we will discuss how to configure the List collection. However, the same concept will apply to other collection types.
<p>Let us first declare the following POJOs.</p>
<p><strong>User.java</strong></p>
<pre class=""prettyprint lang-java"">
public class User {
    private String name;
    private String email;
    private List<car> cars;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public List<car> getCars() {
        return cars;
    }

    public void setCars(List<car> cars) {
        this.cars = cars;
    }

    @Override
    public String toString() {
        return ""Name="" + name + "" , Email="" + email + "" , Car="" + cars.toString();
    }
}
</car></car></car></pre>
<p><strong>Car.java</strong></p>
<pre class=""prettyprint lang-java"">public class Car {
    private String model;
    private double price;

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    @Override
    public String toString() {
        return model + "" "" + price;
    }
}
</pre>
<p>As you can notice, a user can own a list of Cars. Let us now configure the bean inside <code>beans.xml</code> file.</p>
<p>To define a property of the interface <code>java.util.List</code> in the bean configuration, you specify a <list> tag that contains the elements. The elements allowed inside the <code><list></list></code> tag can be a simple constant value specified by <code><value></value></code>.</list></p>
<div class=""filename"">beans.xml</div>
<pre class=""prettyprint lang-xml""><bean class=""com.stacktips.spring.collection.User"" id=""userBean"">
    <property name=""name"" value=""Nilanchala""></property>
    <property name=""email"" value=""test@example.com""></property>
    <property name=""cars"">
        <list>
            <bean class=""com.stacktips.spring.collection.Car"">
                <property name=""model"" value=""Volkswagen Polo""></property>
                <property name=""price"" value=""5000""></property>
            </bean>

            <bean class=""com.stacktips.spring.collection.Car"">
                <property name=""model"" value=""Volkswagen Vento""></property>
                <property name=""price"" value=""9000""></property>
            </bean>
            <null></null>
        </list>
    </property>
</bean>
</pre>
<p>Now from the main class you can test the above configuration as follows.</p>
<div class=""filename"">Main.java</div>
<pre class=""prettyprint lang-java"">public class Main {
    public static void main(String[] args) throws Exception {
        ApplicationContext context = new GenericXmlApplicationContext(""beans.xml"");
        User user = (User) context.getBean(""userBean"");
        System.out.println(user.toString());
    }
}
</pre>
<p>If you want to configure the list by referring to other beans, you can do it using <code><ref></ref></code> element.</p>
<pre class=""prettyprint lang-xml""><bean class=""com.stacktips.spring.collection.User"" id=""userBean"">
    <property name=""name"" value=""Nilanchala""></property>
    <property name=""email"" value=""test@example.com""></property>
    <property name=""cars"">
        <list>
            <ref bean=""myCarBean1""></ref>
            <ref bean=""myCarBean2""></ref>
        </list>
    </property>
</bean> 
</pre>
</map>",0,"standard","post"
"Query Database Using JdbcTemplate in Spring","query-database-using-jdbctemplate-in-spring","In this tutorial, we will focus on how to query data database. A JDBC query operation involves the following tasks.","LIVE","<p>In our <a href=""http://www.stacktips.com/articles/java-spring-jdbc-using-jdbctemplate-example"">previous tutorial</a>, we have discussed how to use JdbcTemplate to access the MySQL database and perform insert and delete operation. In this tutorial, we will focus on how to query data database using the following approaches.</p>
<p>The JdbcTemplate class provides different overloaded <code>query()</code> methods to control the overall query process. A JDBC query operation involves the following tasks.</p>
<ul>
<li>Obtain a database connection from the data source.</li>
<li>Create a PreparedStatement and Bind the parameters</li>
<li>Execute the PreparedStatement object.</li>
<li>Iterate the returned result set to extract data from the result set.</li>
<li>Clean up the statement object and connection.</li>
</ul>
<h2><span id=""10_Using_RowCallbackHandler"">1.0. Using RowCallbackHandler</span></h2>
<p>The <code>RowCallbackHandler</code> is the is the primary interface that allows you to process the current row of the result set. One of the query() methods iterates the result set for you and calls your RowCallbackHandler for each row. So, the <code>processRow()</code> method will be called once for each row of the returned result set.</p>
<p>The following code snippet depicts how to query the database using RowCallbackHandler interface.</p>
<pre class=""prettyprint lang-java"">public Car selectCar(int id) {
	final String sql = ""select * from cars where id = ?"";
	final Car car = new Car();
	RowCallbackHandler callback = new RowCallbackHandler() {

		public void processRow(ResultSet rs) throws SQLException {
			car.setId(rs.getInt(""id""));
			car.setModel(rs.getString(""model""));
			car.setPrice(rs.getDouble(""price""));
		}
	};
	
	jdbcTemplate.query(sql, callback, id);
	return car;
}
</pre>
<h2><span id=""20_Using_RowMapper"">2.0. Using RowMapper</span></h2>
<p>The <code>RowMapper&lt;T&gt;</code> interface is more general than <code>RowCallbackHandler</code>. It maps a single row of the result set to a custom object. So this can be applied to a single row result set as well as a multiple row result set. In the <code>mapRow()</code> method of this interface, you have to construct the object that represents a row and return it as the methods return value.</p>
<pre class=""prettyprint lang-java"">public Car selectCar(int id) {
	final String sql = ""select * from cars where id = ?"";
	return jdbcTemplate.queryForObject(sql, new RowMapper&lt;Car&gt;() {

		public Car mapRow(ResultSet rs, int rowNum) throws SQLException {
			final Car car = new Car();
			car.setId(rs.getInt(""id""));
			car.setModel(rs.getString(""model""));
			car.setPrice(rs.getDouble(""price""));
			return car;
		}

	}, id);
}
</pre>
<p>Although the above code works well, spring offers class <code>BeanPropertyRowMapper</code> for your convenience. The BeanPropertyRowMapper class automatically maps a row to a new instance of the specified class.</p>
<p>This method requires that the resultant class should have a default constructor. It does exactly the same thing as what we have done in the above code snippet. It first instantiates the class using Java reflection and then maps each column value to a property by matching their names.</p>
<h2><span id=""30_Using_BeanPropertyRowMapper"">3.0. Using BeanPropertyRowMapper</span></h2>
<p>The following code snippet depicts how to use <code>BeanPropertyRowMapper</code> implementation to query form database.</p>
<pre class=""prettyprint lang-java"">public Car selectCar(int id) {
	final String sql = ""select * from cars where id = ?"";
	return jdbcTemplate.queryForObject(sql, BeanPropertyRowMapper.newInstance(Car.class), id);
}
</pre>
<h2><span id=""40_Querying_for_Multiple_Rows"">4.0. Querying for Multiple Rows</span></h2>
<p>Now that we understand how to query single record, we can now have a look at querying list of cars from the database. This can be achieved using the <code>queryForList()</code> method by passing the SQL statement. The returned result will be a list of maps. Each map stores a row of the result set with the column names as the keys.</p>
<pre class=""prettyprint lang-java"">public List&lt;Car&gt; getAllCars() {
	final String sql = ""select * from cars"";
	final List&lt;Car&gt; vehicles = new ArrayList&lt;Car&gt;();
	final List&lt;Map&lt;String, Object&gt;&gt; rows = jdbcTemplate.queryForList(sql);

	for (Map&lt;String, Object&gt; row : rows) {
		Car car = new Car();
		car.setId((Integer) row.get(""id""));
		car.setModel((String) row.get(""model""));
		car.setPrice((Double) row.get(""price""));
		vehicles.add(car);
	}
	return vehicles;
}</pre>",0,"standard","post"
"Batch Update Operation Using Spring JdbcTemplate","batch-update-operation-using-spring-jdbctemplate","In our previous example, we have discussed how to use JdbcTemplate to access the MySQL database and perform insert and delete operation. In this tutorial, we will focus on how to insert list of cars into database.
","LIVE","<p>In the previous example, we have discussed how to use <a href=""/articles/java-spring-jdbc-using-jdbctemplate-example"">JdbcTemplate to access the MySQL database</a> and perform insert and delete operation. In this tutorial, we will focus on how to insert a list of cars into the database.</p>
<p>For inserting the batch of cars, you need to call <code>insert()</code> method multiple times, the update will be very slow as the SQL statement will be compiled repeatedly. Instead, we can add a new method <code>insertCars()</code> in CarsDao for inserting a batch of Cars.</p>
<h2>Batch Operation Using Spring JdbcTemplate</h2>
<p>The <code>JdbcTemplate</code> class offers the <code>batchUpdate()</code> template method for batch update operations. It requires two arguments, a SQL statement and a <code>BatchPreparedStatementSetter</code> object. Using <code>batchUpdate()</code> method, the SQL statement is compiled only ones and executed multiple times.</p>
<p>The following snippet shows how to perform batch insert operation using JdbcTemplate.</p>
<pre class=""prettyprint lang-java"">public void insertCars(final List<car> cars) {
    final String inserQuery = ""insert into cars (id, model, price) values (?, ?, ?) "";
    jdbcTemplate.batchUpdate(inserQuery, 
                new BatchPreparedStatementSetter() {
        public void setValues(PreparedStatement ps, int i) throws SQLException {
            Car car = cars.get(i);
            ps.setInt(1, car.getId());
            ps.setString(2, car.getModel());
            ps.setDouble(3, car.getPrice());
        }

        public int getBatchSize() {
            return cars.size();
        }
    });
}
</car></pre>
<p>Let us now write the main class and test the above code.</p>
<pre class=""prettyprint lang-java"">
public class Main {
    public static void main(String[] args) {
        ApplicationContext appContext = new GenericXmlApplicationContext(""beans.xml"");
        ICarsDao dao = appContext.getBean(""carsDao"", ICarsDao.class);
        
        //Batch update statement
        List<car> cars = new ArrayList<car>();
        for (int i = 1; i &lt;= 20; i++) {
            Car car = new Car(i, ""Mercedes-Benz"" + i, 1*300);
            cars.add(car);
        }
        dao.insertCars(cars);
    }
}</car></car></pre>
",0,"standard","post"
"Spring Constructor Injection Using constructor-arg","spring-constructor-injection-using-constructor-arg","In our previous example, we have seen how to create POJO Instances from the IoC Container. In this tutorial, we will examine how to create a POJO instance or bean in the Spring IoC container by invoking its constructor.
","LIVE","<p>In our previous example, we have seen how to create <a href=""/articles/create-and-manage-pojos-with-spring-ioc-container"">POJO Instances from the IoC Container</a>. In this tutorial, we will examine how to create a POJO instance or bean in the Spring IoC container by invoking its constructor.</p>
<p>Creating bean instance by invoking constructor is the common and direct way of creating beans. It is similar to creating the class instance using the new operator. All you have to do is to define a POJO class with a constructor and use the <code><constructor-arg></constructor-arg></code> configuration.</p>
<p>In this example, I will use the following POJO class to demonstrate how to create POJOs by invoking the constructor.</p>
<pre class=""prettyprint lang-java"">public class Car {
    private String model;
    private double price;

    public Car() { }

    public Car(String model, double price) {
        this.model = model;
        this.price = price;
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}
</pre>
<p>To define the above Car bean in the Spring IoC container, you can add the following code snippet to <code>bean.xml</code> configuration file.</p>
<pre class=""prettyprint lang-xml""><bean class=""com.javatechig.spring.bean.Car"" id=""carBean"">
    <constructor-arg value=""Volkswagen""></constructor-arg>
    <constructor-arg value=""500""></constructor-arg>
</bean>
</pre>
<ul>
<li>Note that, if more then one <code><constructor-arg></constructor-arg></code> elements is specified, Spring invokes the most appropriate constructor that matches your arguments.</li>
<li>Use Spring’s <constructor-arg> element to define constructor arguments, then for each <property> element Spring injects the value through the setter method.</property></constructor-arg></li>
<li>If no <constructor-arg> is specified to the bean configuration, the default constructor with no arguments is invoked.</constructor-arg></li>
<li>You can specify the type and index attributes or the name attribute for the <constructor-arg> element to avoid constructor ambiguity.</constructor-arg></li>
</ul>
<p>You can write the following Main class to test your Cars bean initialization by retrieving the bean instance from the Spring IoC container:</p>
<pre class=""prettyprint lang-java"">public class Main {
    public static void main(String[] args) throws Exception {
        ApplicationContext context = new GenericXmlApplicationContext(""beans.xml"");
        Car car = (Car) context.getBean(""carBean"");
        System.out.println(car.toString());
    }
}

</pre>
",0,"standard","post"
"Bootstrap Responsive Classes for Building Adaptive Layouts","bootstrap-responsive-classes-for-building-adaptive-layouts","In morden web development, the main concern of a developer is to build the application that works on various form&hellip;
","LIVE","<p>In morden web development, the main concern of a developer is to build the application that works on various form factors, including standard browsers, mobile tablet, tv, etc. True responsive design is fluid, using CSS3 media queries to respond to any screen sizes. With the use of this CSS3 module, you can create a flexible grid where text can wrap and images can shrink to adjust along with your browser.  For designers, this is similar to adjusting a text box in Photoshop and having the copy adjust to fill the height and width of the box.</p>
<p>Bootstrap makes it easier to build responsive mobile optimized website with the minimal effort using set of css classes.</p>
<h2>Bootstrap size classes</h2>
<p>Bootstrap provides four different markers for controlling and mentioning element and device size. Following table depicts the bootstrap size classes in detail.</p>
<table>
<tbody>
<tr>
<td><strong>Marker name</strong></td>
<td><strong>Screen size</strong></td>
<td><strong>class name</strong></td>
</tr>
<tr>
<td>xs</td>
<td>This will render the element with extra small size. Extra small devices, such as phones with &lt; 768px width.</td>
<td>.hidden-xs</td>
</tr>
<tr>
<td>sm</td>
<td>This will render the element with small size. This is the default size. Phablets and tablets with width ≥ 768px and &lt; 992px</td>
<td>.hidden-sm</td>
</tr>
<tr>
<td>md</td>
<td>This will render the element with large size. Desktops with width ≥ 992px and &lt;1200px</td>
<td>.hidden-md</td>
</tr>
<tr>
<td>lg</td>
<td>This will render the element with large size. Big desktop monitors and TVs with ≥ 1200px width</td>
<td>.hidden-lg</td>
</tr>
</tbody>
</table>
<h5>Classification of classes associated with marker name</h5>
<p><strong>.hidden-xs :</strong> A div marked with this class in your HTML code result in hiding the div element in all extra small devices (devices with &lt; 768px width) ,where as displayed in all other devices. For example, if you mention the div class as <code>&lt;div class=""hidden-xs""&gt;</code>, this div will be not be displayed in extra small devices, and will be displayed in all other devices</p>
<p>Similarly the other classes such as,</p>
<ul>
<li><strong>.hidden-sm :</strong> A div marked with this class in your HTML code result in hiding the div element in all small devices (devices with width ≥ 768px and &lt; 992px) ,where as displayed in all other devices.</li>
<li><strong>.hidden-dm</strong>: A div marked with this class in your HTML code result in hiding the div element in all small devices (devices with width ≥ 992px and &lt; 1200px), where as displayed in all other devices.</li>
<li><strong>.hidden-lg:</strong> A div marked with this class in your HTML code result in hiding the div element in all small devices (devices with width ≥ 1200px), where as displayed in all other devices.</li>
</ul>
<p>Similarly for the display purpose we have the following classes,</p>
<ul>
<li><strong> .Visible-xs/</strong> .visible-xs-block, .visiblexs-inline, .visible-xsinline-block : visble in extra small devices</li>
<li><strong>.Visible-sm/</strong> .visiblesm-block, .visiblesm-inline, .visible-sminline-block : visble in small devices</li>
<li><strong>.Visible-md /</strong> .visiblemd-block, .visiblemd-inline, .visible-mdinline-block: visble in medium devices ,default display.</li>
<li><strong>.Visible-lg</strong>/ .visible-lg-block, .visiblelg-inline, .visible-lginline-block : visble in large devices</li>
</ul>
<p>For example, if you want your DIV element should only be visible in large devices (devices with width ≥1200px) and not in smaller devices, then you just use the class .visible-lg-block</p>
<p>Let’s see the above mentioned classes with a simple example,</p>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt; 
&lt;html lang=""en""&gt;
  &lt;head&gt;
    &lt;title&gt;My first Bootstrap page &lt;/title&gt;
    &lt;meta name=""viewport"" content=""width=device-width, initialscale=1""&gt;
    &lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"" rel=""stylesheet""&gt;
    &lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"" rel=""stylesheet""&gt;
    &lt;script type=""text/javascript"" src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js""&gt;&lt;/script&gt; 
    &lt;script type=""text/javascript"" src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js""&gt;&lt;/script&gt;
    &lt;style&gt;
      div {
      background-color: #F2F2F2;
      }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class=""container"" style=""padding: 40px;""&gt;
    &lt;div class=""row visible-on""&gt;
      &lt;div class=""col-xs-6 col-sm-3"" style=""background-color: #EDDEF1; border:1px solid #666; height:70px;""&gt;
        &lt;span class=""hidden-xs"" style=""""&gt;Extra small hidden class&lt;/span&gt;
        &lt;span class=""visible-xs-inline"" style=""color:red;""&gt;Visible on x-small&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=""col-xs-6 col-sm-3"" style=""background-color: #EDDEF1; border:1px solid #666; height:70px;""&gt;
        &lt;span class=""hidden-sm"" &gt;Small hidden class&lt;/span&gt;
        &lt;span class=""visible-sm-inline"" style=""color:red;""&gt;Visible on small&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=""clearfix visible-xs""&gt;&lt;/div&gt;
      &lt;div class=""col-xs-6 col-sm-3"" style=""background-color: #EDDEF1; border:1px solid #666; height:70px;""&gt;
        &lt;span class=""hidden-md"" style=""color:blue;""&gt;Medium hidden class&lt;/span&gt;
        &lt;span class=""visible-md-inline""style=""color:red;""&gt;Visible on medium&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=""col-xs-6 col-sm-3"" style=""background-color: #EDDEF1; border:1px solid #666; height:70px;""&gt;
        &lt;span class=""hidden-lg"" style=""color:blue;""&gt;Large hidden class&lt;/span&gt;
        &lt;span class=""visible-lg-inline"" style=""color:red;""&gt; Visible on large&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Output of the above code is<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Creating Responsive Layouts Using Bootstrap CSS"" class=""alignnone size-full wp-image-9953"" height=""301"" loading=""lazy"" sizes=""(max-width: 1206px) 100vw, 1206px"" src=""/media/uploads/articles/146/Creating-Responsive-Layouts-Using-Bootstrap-CSS.png"" srcset="""" width=""1206""/></a></p>
<p>Output on small screen device<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Creating Responsive Layouts Using Bootstrap CSS 2"" class=""alignnone size-full wp-image-9952"" height=""372"" loading=""lazy"" src=""/media/uploads/articles/146/Creating-Responsive-Layouts-Using-Bootstrap-CSS-2.png"" srcset="""" width=""504""/></a></p>
",0,"standard","post"
"Java Spring JDBC Using JdbcTemplate Example","java-spring-jdbc-using-jdbctemplate-example","There are various data access technologies to perform persistence operations in Java enterprise applications. Spring JdbcTemplate is a class that takes care of all the boilerplate code required for creating a database connection and closing the resources.
","LIVE","<p>There are various data access technologies to perform persistence operations in Java enterprise applications. JDBC is among the most popular one. This tutorial explains how to initialize a database and access data using Spring JDBC.<br/>

<p>Spring offers two ways connect to a database. Data source or the <code>DriverManager</code>. The DriverManager is the legacy approach and data source is newer one. It is recommended to use the new DataSource facility to connect to databases and other resources.</p>
<p>DataSource facility has several advantages over DriverManager facility like DataSource increases portability, enables connection pooling and distributed transactions, the DriverManager does not allow such techniques.</p>
<p>Here in this example, we are using data source to communicate with MySQL database. We will create the <code>Cars</code> table with the following attributes.</p>
<pre class=""prettyprint lang-sql"">CREATE TABLE `Cars` (
  `id` int(11) NOT NULL,
  `model` varchar(45) DEFAULT NULL,
  `price` double(10,2) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
</pre>
<h2><span id=""1_ConfiguringBean"">1. Configuring Bean</span></h2>
<p>The corresponding Java bean class for the above Cars table will look like the following code:</p>
<pre class=""prettyprint lang-java"">public class Car {
    private int id;
    private String model;
    private double price;

    public Car() { }

    public Car(int id, String model, double price) {
        this.id = id;
        this.model = model;
        this.price = price;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}
</pre>
<p>Now, let us configure the Car bean declaration to <code>beans.xml</code> file for Spring IoC to locate, initialize and manage to Car bean instance.</p>
<pre class=""prettyprint lang-xml""><bean class=""com.javatechig.spring.bean.Car"" id=""carBean""></bean>
</pre>
<h2><span id=""2_Configuring_data_source_object"">2. Configuring data source object</span></h2>
<p>As discussed above, we will be using Spring data source approach to connect to MySQL database. For this you need to add the <code>BasicDataSource</code> bean configuration to your <code>bean.xml</code> file.</p>
<pre class=""prettyprint lang-xml""><bean class=""org.apache.commons.dbcp.BasicDataSource"" id=""dataSource"">
    <property name=""driverClassName"" value=""com.mysql.jdbc.Driver""></property>
    <property name=""url"" value=""jdbc:mysql://localhost/SpringDemo""></property>
    <property name=""username"" value=""root""></property>
    <property name=""password"" value=""admin""></property>
</bean>
</pre>
<p>Notice that in the above bean configuration the <code>localhost</code> indicated the location of MySQL database. Currently it is located on my development machine. Don’t forget to change the username and password of your own, if you configured differently while installing your MySQL server.</p>
<h2><span id=""3_Understanding_Spring_JdbcTemplate"">3. Understanding Spring JdbcTemplate</span></h2>
<p>Spring JdbcTemplate is a class that takes care of all the boilerplate code required for creating a database connection and closing the resources. It makes our life a lot easier by saving the effort and development time. Add the following bean declaration to initialize the JdbcTemplate instance.</p>
<pre class=""prettyprint lang-java""><bean class=""org.springframework.jdbc.core.JdbcTemplate"" id=""jdbcTemplate"">
    <property name=""dataSource"" ref=""dataSource""></property>
</bean>

<bean class=""com.javatechig.spring.bean.CarsDao"" id=""carsDao"">
    <property name=""jdbcTemplate"" ref=""jdbcTemplate""></property>
</bean>
</pre>
<p>Notice that we are injecting the datasource bean instance defined above to initialize the JdbcTemplate bean.</p>
<h2><span id=""4_Executing_SQL_statements"">4. Executing SQL statements</span></h2>
<p>Spring JdbcTemplate exposes many helpful methods for performing CRUD operations on database. Following are most common methods that we use from JdbcTemplate.</p>
<ul>
<li><strong>execute(String sql)</strong> – Issue a single SQL execute, typically a DDL statement.</li>
<li><strong>queryForList(String sql, Object[] args)</strong> – Query given SQL to create a prepared statement from SQL and a list of arguments to bind to the query, expecting a result list.</li>
<li><strong>update(String sql)</strong> – Issue a single SQL update operation (such as an insert, update or delete statement).</li>
</ul>
<p>Now lets bring our JdbcTemplate to action. We will use the JdbcTemplate bean in our DAO class or any class that will communicate with our database. Let us create a DAO interface with the following methods:</p>
<pre class=""prettyprint lang-java"">public interface ICarsDao {
    int insertCar(Car car);
    void deleteCar(int id);
}
</pre>
<p>Now let us implement ICarDao interface and provide the logic to insert and delete a user form database.</p>
<pre class=""prettyprint lang-java"">public class CarsDao implements ICarsDao {
    private JdbcTemplate jdbcTemplate;

    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public int insertCar(Car car) {
        String inserQuery = ""insert into cars (id, model, price) values (?, ?, ?) "";
        Object[] params = new Object[] { car.getId(), car.getModel(), car.getPrice() };
        int[] types = new int[] { Types.INTEGER, Types.VARCHAR, Types.INTEGER };

        return jdbcTemplate.update(inserQuery, params, types);
    }

    public void deleteCar(int model) {
        String delQuery = ""delete from cars where id = ?"";
        int count = jdbcTemplate.update(delQuery, new Object[] { model });
        if (count != 0)
            System.out.println(""Car deleted successfully."");
        else
            System.out.println(""Car with given id as it doesn't exist"");
    }
    
}
</pre>
<p>Now that we are ready with the DAO implementation, let us test those methods. Create a Java class TestMain.java and add the following code snippets</p>
<pre class=""prettyprint lang-java"">public class Main {
    public static void main(String[] args) {

        ApplicationContext appContext = new GenericXmlApplicationContext(""beans.xml"");
        ICarsDao dao = appContext.getBean(""carsDao"", ICarsDao.class);
        Car car = new Car(1, ""Volkswgen"", 300);
        dao.insertCar(car);

        System.out.println(""User inserted with id= "" + 2);
        dao.deleteCar(3);
    }
}
</pre>
<p>If all your configurations are fine, you should be able to insert and delete data from Cars table.</p>
</p>",0,"standard","post"
"Introduction to Spring JDBC","introduction-to-spring-jdbc","There are various data access technologies to perform persistence operations in Java enterprise applications. JDBC is among the most popular one. Spring provides data access operations performed with JDBC..
","LIVE","<p>There are various data access technologies to perform persistence operations in Java enterprise applications. JDBC is among the most popular one. Spring provides data access operations performed with JDBC using three main approaches:</p>
<ol>
<li><strong>Using Template Method pattern</strong> based utility classes, namely JdbcTemplate and NamedParameterJdbcTemplate, to perform JDBC operations more easily by removing repetitive data access code blocks in the application, properly handling resource cleanups, and so on.</li>
<li><strong>Using database</strong> meta data to simplify queries using classes such as SimpleJdbcInsert and SimpleJdbcCall. That way you need to provide only a table or stored procedure name and a map of parameters corresponding to column names to perform an SQL operation.</li>
<li><strong>Using MappingSqlQuery</strong>, SqlUpdate, and StoredProcedure classes to represent database operations as reusable Java objects so that you can use them over and over again by providing only different query parameters each time.</li>
</ol>
<p>To start working with JDBC from Spring application, you first need to obtain the data- base connection. Spring offers two ways to obtain database connections within the JDBC API. <code>Data source</code> or the <code>DriverManager</code>.</p>
<p>The DriverManager is the legacy approach and DataSource is newer one. It is recommended to use the new DataSource facility to connect to databases and other resources. DataSource facility has several advantages over DriverManager facility like DataSource increases portability, enables connection pooling and distributed transactions, the DriverManager does not allow such techniques.</p>
<p>If you’re using Maven project configuration, you need to add the following Spring dependencies elements into your <code>pom.xml</code>:</p>
<h4>Maven dependency</h4>
<pre class=""prettyprint lang-xml""><dependency>
    <groupid>org.springframework</groupid>
    <artifactid>spring-jdbc</artifactid>
    <version>4.2.1.RELEASE</version>
</dependency>

<dependency>
    <groupid>commons-dbcp</groupid>
    <artifactid>commons-dbcp</artifactid>
    <version>1.4</version>
</dependency>
</pre>
<h4>Gradle dependency</h4>
<pre class=""prettyprint lang-java"">'org.springframework:spring-jdbc:4.2.1.RELEASE'
'commons-dbcp:commons-dbcp:1.4'
</pre>
<p>The core class of Spring’s JDBC support is <code>JdbcTemplate</code>. It simplifies the use of JDBC and helps to avoid common errors. JdbcTemplate can be used to execute SQL queries or insert, update, and delete statements. It executes core JDBC work flow, initiating iteration over ResultSets and catching JDBC exceptions and translating them to the generic, more informative DataAccessException hierarchy defined by Spring. Application code only needs to provide SQL and ResultSet processing logic if necessary.</p>
<p>Now that we understood the basics of Spring JDBC, in the next post we will continue with creating our first Spring JDBC application.</p>
",0,"standard","post"
"Creating Your First Bootstrap Example","creating-your-first-bootstrap-example","In our previous tutorials, we have covered the overview of bootstrap framework and the structure of the framework. Let us now proceed to create a working bootstrap example. 
","LIVE","<p>In our previous tutorials, we have covered the <a href=""http://stacktips.com/bootstrap/getting-started-with-bootstrap"">overview of bootstrap framework</a> and the structure of the framework. Let us now proceed to create a working bootstrap example.</p>
<p>For building bootstrap application, you need to download the required bootstrap framework files. You may visit getting started with Bootstrap, to know more on how to download and link the bootstrap framework to your HTML page.</p>
<p>The following section describes the basic structure of a bootstrap page.</p>
<ul>
<li>HTML file must be marked as <code>HTML5</code> doctype, i.e</li>
</ul>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt;
 &lt;html lang=""en""&gt;
  ...
 &lt;/html&gt;
</pre>
<ul>
<li>You must include meta <code>viewport</code> tag in the head section ,</li>
</ul>
<pre class=""prettyprint lang-html"">&lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;</pre>
<ul>
<li>You have to include the Bootstrap <code>CSS</code> and <code>JS</code> files, as follows</li>
</ul>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt; 
&lt;html lang=""en""&gt;  
 &lt;head&gt;    
    &lt;title&gt;My first Bootstrap page &lt;/title&gt;    
    &lt;meta name=""viewport"" content=""width=device-width, initialscale=1""&gt;    
    &lt;link href=""CSS/bootstrap.min.css"" rel=""stylesheet""&gt;   
    &lt;link href=""CSS/bootstrap-theme.min.css"" rel=""stylesheet""&gt;    
    &lt;script type=""text/javascript"" src=""JS/bootstrap.min.js""/&gt;
    &lt;script type=""text/javascript"" src=""JS/jquery.min.js""/&gt;
&lt;/head&gt; 
</pre>
<ul>
<li><strong>Body section:</strong> All of your HTML body section must be kept inside div element with class attached as <code>container</code> or <code>container-fluid</code>.</li>
</ul>
<pre class=""prettyprint lang-html"">&lt;body&gt;    
   &lt;div class=""container""&gt;
     ...  
   &lt;/div&gt; 
&lt;/body&gt;
</pre>
<p>The container class renders the page with a fixed width in middle of the browser where as the container-fluid renders the page with the full browser width. So if you want to let the page fill the whole screen, change <code>.container</code> to <code>.container-fluid</code>.</p>
<h4>Complete example</h4>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt; 
&lt;html lang=""en""&gt;
   &lt;head&gt;
      &lt;title&gt;My first Bootstrap page &lt;/title&gt;
      &lt;meta name=""viewport"" content=""width=device-width, initialscale=1""&gt;
      &lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"" rel=""stylesheet""&gt;
      &lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"" rel=""stylesheet""&gt;
      &lt;script type=""text/javascript"" src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.j""&gt;&lt;/script&gt; 
      &lt;script type=""text/javascript"" src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js""&gt;&lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;div class=""conainer"" style=""margin:20px;""&gt;
         &lt;div class=""page-header""&gt;
            &lt;h1&gt; 
               &lt;span class=""glyphicon glyphiconhome""&gt;&lt;/span&gt;&amp;nbsp; Welcome to the Bootstrap framework
            &lt;/h1&gt;
         &lt;/div&gt;
         &lt;div class=""row""&gt;
            &lt;!--Column display with the xs-12&amp;sm-12 : for mobile , md-8&amp;lg-8 : for tablet and desctop --&gt; 
            &lt;div class=""col-xs-12 col-sm-12 col-md-8 col-lg-8""&gt;
               &lt;div class=""panel panel-warning"" style=""height:200px;"" &gt;
                  &lt;div class=""panel-heading""&gt;Content panel&lt;/div&gt;
                  &lt;div class=""panel-body""&gt;...&lt;/div&gt;
               &lt;/div&gt;
            &lt;/div&gt;

            &lt;!--Column display with the xs-12&amp;sm-12 : for mobile , md-4&amp;lg-4 : for tablet and desctop --&gt; 
            &lt;div class=""col-xs-12 col-sm-12 col-md-4 col-lg-4""&gt;
               &lt;div class=""panel panel-info"" style=""height:200px;""&gt;
                  &lt;div class=""panel-heading""&gt;Right sidebar&lt;/div&gt;
                  &lt;div class=""panel-body""&gt;...&lt;/div&gt;
               &lt;/div&gt;
            &lt;/div&gt;
            

         &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=""footer""&gt;
         &lt;div class=""container""&gt;
            &lt;div class=""text-muted pull-left""&gt;
               &lt;a href=""http://stacktips.com/bootstrap"" target=""_blank""&gt;Bootstrap Tutorials&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=""text-muted pull-right""&gt;&lt;a href=""http://stacktips.com""&gt;http://stacktips.com&lt;/a&gt;
            &lt;/div&gt;
         &lt;/div&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>In the above example we have started creating a web page using the elementary classes of Bootstrap. Note that the HTML file must be marked as HTML5 doctype. Here we created the base structure of an application. The above HTML code produce the following output.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Creating first bootstrap page"" class=""alignnone size-full wp-image-9929"" height=""488"" loading=""lazy"" sizes=""(max-width: 1043px) 100vw, 1043px"" src=""/media/uploads/articles/149/Creating-first-bootstrap-page.png"" srcset="""" width=""1043""/></a></p>
<p>You can try seeing the same in mobile view. You can visibly notice that the two blocks will be automatically adjusted and rendered in a vertical pattern.</p>
",0,"standard","post"
"JDXA Object Relational Mapping (ORM) Solution for Android","jdxa-object-relational-mapping-orm-for-android","JDXA is a simple, non-intrusive and flexible Object Relational Mapping (ORM) product that can significantly simplify and accelerate development of Android apps.","LIVE","<p><strong>JDXA is a simple, non-intrusive and flexible Object Relational Mapping (ORM) product that can significantly simplify and accelerate development of Android apps. </strong></p>
<p>JDXA solution improves mobile app developer’s productivity and fills an important gap in Google’s Android development platform. Based on some well thought-out <a href=""http://softwaretree.com/2015/KISSPrinciples.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">KISS Principles</a>, JDXA dramatically decreases development time by presenting a more intuitive object-oriented view of on-device relational data, eliminating the need to write and maintain endless lines of complex low-level SQL code.</p>
<p>JDXA provides powerful and easy-to-use ORM functionality in a small footprint, resulting in the following benefits:</p>
<ul>
<li>Improved developer productivity</li>
<li>Fewer maintenance hassles and associated costs</li>
<li>Reduced development risks</li>
<li>Apps that are flexible and easier to evolve, giving developers a competitive advantage</li>
<li>Accelerated time-to-market and revenue</li>
<li>Higher customer satisfaction</li>
</ul>
<p>JDXA easily supports inheritance, one-to-one, one-to-many, and many-to-many relationships and offers a POJO (Plain Old Java Objects) friendly non-intrusive programming model, which does not require you to change your Java classes in any way.</p>
<ul>
<li>No need to subclass your domain classes from any base class</li>
<li>No need to clutter your source code with annotations</li>
<li>No need for DAO classes</li>
<li>No source code generation</li>
<li>No pre-processing or post-processing of your code</li>
</ul>
<p>The SDK comes with comprehensive documentation and many illustrative sample example. You may learn more about JDXA by visiting Software Tree’s <a href=""http://www.softwaretree.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">website</a>.</p>",0,"standard","post"
"OpenSource Custom ListView ScrollView Libraries in Android","opensource-custom-listview-scrollview-implementation-libraries-in-android","# Custom ListView ScrollView Implementation &#8211; Android 1 Pinned section listview Easy to use ListView with pinned sections&hellip;
","LIVE","<table class=""reference"" width=""100%"">
<tbody>
<tr>
<td width=""34""><strong>#</strong></td>
<td width=""319""><strong>Custom ListView ScrollView Implementation – Android</strong></td>
</tr>
<tr>
<td width=""34""><strong>1</strong></td>
<td width=""319""><strong>Pinned section listview</strong>
<p>Easy to use ListView with pinned sections for Android.<br/>
<a href=""https://github.com/beworker/pinned-section-listview"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/beworker/pinned-section-listview</a></p></td>
</tr>
<tr>
<td width=""34""><strong>2</strong></td>
<td width=""319""><strong>PullToRefresh-ListView</strong>
<p>A generic, customizable, open source Android ListView implementation that has ‘Pull to Refresh’ functionality.<br/>
<a href=""https://github.com/erikwt/PullToRefresh-ListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/erikwt/PullToRefresh-ListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>3</strong></td>
<td width=""319""><strong>FlabbyListView</strong>
<p>Android library to display a ListView whose cells are not rigid but flabby and react to ListView scroll.<br/>
<a href=""https://github.com/jpardogo/FlabbyListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/jpardogo/FlabbyListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>4</strong></td>
<td width=""319""><strong>XListView-Android</strong>
<p>ListView supports pull refresh and pull up to load more feature.<br/>
<a href=""https://github.com/Maxwin-z/XListView-Android"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/Maxwin-z/XListView-Android</a></p></td>
</tr>
<tr>
<td width=""34""><strong>5</strong></td>
<td width=""319""><strong>PinterestListView</strong>
<p>Pinterest style ListView for Android<br/>
<a href=""https://github.com/vladexologija/PinterestListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/vladexologija/PinterestListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>6</strong></td>
<td width=""319""><strong>Android-pulltorefresh-and-loadmore</strong>
<p>Android custom list view, with interaction pattern load more and pull to refresh to load data dynamically<br/>
<a href=""https://github.com/shontauro/android-pulltorefresh-and-loadmore"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/shontauro/android-pulltorefresh-and-loadmore</a></p></td>
</tr>
<tr>
<td width=""34""><strong>7</strong></td>
<td width=""319""><strong>PinnedHeaderListView</strong>
<p>A ListView with pinned section headers for Android<br/>
<a href=""https://github.com/JimiSmith/PinnedHeaderListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/JimiSmith/PinnedHeaderListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>8</strong></td>
<td width=""319""><strong>ParallaxScroll</strong>
<p>Parallax ScrollView and ListView for Android<br/>
<a href=""https://github.com/nirhart/ParallaxScroll"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/nirhart/ParallaxScroll</a></p></td>
</tr>
<tr>
<td width=""34""><strong>9</strong></td>
<td width=""319""><strong>Android-HorizontalListView</strong>
<p>HorizontalListView is an Android ListView widget which scrolls in a horizontal manner (in contrast with the SDK-provided ListView which scrolls vertically).<br/>
<a href=""https://github.com/MeetMe/Android-HorizontalListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/MeetMe/Android-HorizontalListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>10</strong></td>
<td width=""319""><strong>LinearListView</strong>
<p>Android library that allows you to bind a LinearLayout with a ListAdapter.<br/>
<a href=""https://github.com/frankiesardo/LinearListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/frankiesardo/LinearListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>11</strong></td>
<td width=""319""><strong>ParallaxListView</strong>
<p>An Android ListView Demo with a parallax effect header like Path.<br/>
<a href=""https://github.com/Gnod/ParallaxListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/Gnod/ParallaxListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>12</strong></td>
<td width=""319""><strong>PagedHeadListView</strong>
<p>Android boosted ListView supporting paginated header with a new material page indicator.<br/>
<a href=""https://github.com/JorgeCastilloPrz/PagedHeadListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/JorgeCastilloPrz/PagedHeadListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>13</strong></td>
<td width=""319""><strong>PullZoomView</strong>
<p>An Android custom ListView and ScrollView with pull to zoom-in.<br/>
<a href=""https://github.com/Frank-Zhu/PullZoomView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/Frank-Zhu/PullZoomView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>14</strong></td>
<td width=""319""><strong>HeaderListView</strong>
<p>Android ListView with sticky headers<br/>
<a href=""https://github.com/applidium/HeaderListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/applidium/HeaderListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>15</strong></td>
<td width=""319""><strong>ListviewFilter</strong>
<p>Awesome Listview filter functionality in Android.<br/>
<a href=""https://github.com/bhavyahmehta/ListviewFilter"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/bhavyahmehta/ListviewFilter</a></p></td>
</tr>
<tr>
<td width=""34""><strong>16</strong></td>
<td width=""319""><strong>android-accordion-view</strong>
<p>Simple ListView based Android AccordionView<br/>
<a href=""https://github.com/hamsterready/android-accordion-view"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/hamsterready/android-accordion-view</a></p></td>
</tr>
<tr>
<td width=""34""><strong>17</strong></td>
<td width=""319""><strong>DragNDropList</strong>
<p>An easy to use Drag &amp; Drop List for Android. Direct replacement of the android ListView.<br/>
<a href=""https://github.com/terlici/DragNDropList"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/terlici/DragNDropList</a></p></td>
</tr>
<tr>
<td width=""34""><strong>18</strong></td>
<td width=""319""><strong>QuickReturn</strong>
<p>Android ListView that implements the QuickReturn UI pattern. Written from scratch with focus on performance.<br/>
<a href=""https://github.com/felipecsl/QuickReturn"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/felipecsl/QuickReturn</a></p></td>
</tr>
<tr>
<td width=""34""><strong>19</strong></td>
<td width=""319""><strong>ZrcListView</strong>
<p>一个顺滑又漂亮的Android下拉刷新与加载更多列表组件。<br/>
<a href=""https://github.com/zarics/ZrcListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/zarics/ZrcListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>20</strong></td>
<td width=""319""><strong>android-swipelistview</strong>
<p>An Android List View implementation with support for drawable cells and many other swipe related features<br/>
<a href=""https://github.com/47deg/android-swipelistview"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/47deg/android-swipelistview</a></p></td>
</tr>
<tr>
<td width=""34""><strong>21</strong></td>
<td width=""319""><strong>android-pulltorefresh</strong>
<p>This project aims to provide a reusable pull to refresh widget for Android.<br/>
<a href=""https://github.com/johannilsson/android-pulltorefresh"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/johannilsson/android-pulltorefresh</a></p></td>
</tr>
<tr>
<td width=""34""><strong>22</strong></td>
<td width=""319""><strong>StickyListHeaders</strong>
<p>An android library for section headers that stick to the top<br/>
<a href=""https://github.com/emilsjolander/StickyListHeaders"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/emilsjolander/StickyListHeaders</a></p></td>
</tr>
<tr>
<td width=""34""><strong>23</strong></td>
<td width=""319""><strong>LazyList</strong>
<p>Lazy load of images in Android<br/>
<a href=""https://github.com/thest1/LazyList"" rel=""nofollow noopener noreferrer"" target=""_blank"">https:/github.com/thest1/LazyList</a></p></td>
</tr>
<tr>
<td width=""34""><strong>24</strong></td>
<td width=""319""><strong>Floating Group Expandable ListView</strong>
<p>An open source Android library that provides a floating group view at the top of the ExpandableListView<br/>
<a href=""https://github.com/diegocarloslima/FloatingGroupExpandableListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/diegocarloslima/FloatingGroupExpandableListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>25</strong></td>
<td width=""319""><strong>PullSeparateListView</strong>
<p>到顶部或底部时拉动，item分离效果<br/>
<a href=""https://github.com/chiemy/PullSeparateListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/chiemy/PullSeparateListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>26</strong></td>
<td width=""319""><strong>Android-SlideExpandableListView</strong>
<p>A better ExpandableListView, with animated expandable views for each list item<br/>
<a href=""https://github.com/tjerkw/Android-SlideExpandableListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/tjerkw/Android-SlideExpandableListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>27</strong></td>
<td width=""319""><strong>HorizontalVariableListView</strong>
<p>Horizontal list view for Android which allows variable items widths<br/>
<a href=""https://github.com/sephiroth74/HorizontalVariableListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/sephiroth74/HorizontalVariableListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>28</strong></td>
<td width=""319""><strong>ListBuddies</strong>
<p>Android library to achieve in an easy way, the behaviour of the home page in the Expedia app, with a pair of auto-scroll circular parallax ListViews.<br/>
<a href=""https://github.com/jpardogo/ListBuddies"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/jpardogo/ListBuddies</a></p></td>
</tr>
<tr>
<td width=""34""><strong>29</strong></td>
<td width=""319""><strong>Android-Tiling-ScrollView</strong>
<p>A tiling scrollview to display large picture (similar to iOS “CATiledLayer”)<br/>
<a href=""https://github.com/ened/Android-Tiling-ScrollView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/ened/Android-Tiling-ScrollView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>30</strong></td>
<td width=""319""><strong>PullScrollView</strong>
<p>1.仿照新浪微博Android客户端个人中心的ScrollView，下拉背景伸缩回弹效果。 2.ScrollView仿IOS回弹效果。<br/>
<a href=""https://github.com/MarkMjw/PullScrollView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/MarkMjw/PullScrollView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>31</strong></td>
<td width=""319""><strong>Discrollview</strong>
<p>Scroll + discover = DiscrollView<br/>
<a href=""https://github.com/flavienlaurent/discrollview"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/flavienlaurent/discrollview</a></p></td>
</tr>
<tr>
<td width=""34""><strong>32</strong></td>
<td width=""319""><strong>StickyScrollViewItems</strong>
<p>A small android library for tagging views inside a ScrollView as “sticky” making them stick to the top of the scroll container until a new sticky view comes and takes it’s place<br/>
<a href=""https://github.com/emilsjolander/StickyScrollViewItems"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/emilsjolander/StickyScrollViewItems</a></p></td>
</tr>
<tr>
<td width=""34""><strong>33</strong></td>
<td width=""319""><strong>SwipeMenuListView</strong>
<p>SwipeMenuListView<br/>
<a href=""https://github.com/baoyongzhang/SwipeMenuListView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/baoyongzhang/SwipeMenuListView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>34</strong></td>
<td width=""319""><strong>Android-ObservableScrollView</strong>
<p>Android library to observe scroll events on scrollable views.<br/>
<a href=""https://github.com/ksoichiro/Android-ObservableScrollView"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/ksoichiro/Android-ObservableScrollView</a></p></td>
</tr>
<tr>
<td width=""34""><strong>35</strong></td>
<td width=""319""><strong>Pull-to-Refresh.Rentals-Android</strong>
<p>This project aims to provide a simple and customizable pull to refresh implementation. Made in Yalantis<br/>
<a href=""https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android</a></p></td>
</tr>
<tr>
<td width=""34""><strong>36</strong></td>
<td width=""319""><strong>StikkyHeader</strong>
<p>This is a very simple library for Android that allows you to stick an header to a scrollable view and easly apply animation to it<br/>
<a href=""https://github.com/carlonzo/StikkyHeader"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/carlonzo/StikkyHeader</a></p></td>
</tr>
<tr>
<td width=""34""><strong>37</strong></td>
<td width=""319""><strong>Quickscroll</strong>
<p>Bringing extended scrolling features to Android’s native ListView and ExpandableListView.<br/>
<a href=""https://github.com/andraskindler/quickscroll"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://github.com/andraskindler/quickscroll</a></p></td>
</tr>
</tbody>
</table>
",0,"standard","post"
"Getting Started with Bootstrap","getting-started-with-bootstrap","To work with Bootstrap you need to include bootstrap.min.css and bootstrap.min.js files to your HTML page. This can be done in two ways. Either you can download a copy of Bootstrap framework and host the required files on your web server or directly use the Bootstrap’s CDN files.
","LIVE","<p>In our previous example, we have discussed bootstrap features and what makes the CSS framework widely popular. Now let us get our hands on the next step to build our first bootstrap application. For building bootstrap application, first you need to download the required bootstrap framework files.</p>
<p>To work with Bootstrap you need to include <code>bootstrap.min.css</code> and <code>bootstrap.min.js</code> files to your HTML page. This can be done in two ways. Either you can download a copy of Bootstrap framework and host the required files on your web server or directly use the Bootstrap’s CDN files.</p>
<p>I personally prefer to use the bootstrap CDN, as the CDN copies are always up to date.</p>
<h2>Linking Bootstrap from CDN</h2>
<p>The folks over at MaxCDN graciously provide CDN support for Bootstrap’s CSS and JavaScript. Just use these Bootstrap CDN links.</p>
<pre class=""prettyprint lang-html"">&lt;link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css""&gt;
&lt;link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css""&gt;
&lt;script src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js""&gt;&lt;/script&gt;
</pre>
<h2>Downloading Bootstrap Bundle</h2>
<p>There are two versions available for download, compiled Bootstrap and Bootstrap source files. You can download Bootstrap files from <a href=""http://getbootstrap.com/getting-started/"" rel=""nofollow noopener noreferrer"" target=""_blank"">here</a>.</p>
<p>Compiled download contain compiled and minified version of CSS and JavaScript files as well as icons in font format for faster and easier web development, while the source contain original source files for all CSS and JavaScript, along with a local copy of the docs. The compiled bootstrap files are optimized for performance and easy to use. To start with, you can start downloading the compiled Bootstrap copy.</p>
<h4>Get the precompiled bundle</h4>
<p>Download the <a href=""https://github.com/twbs/bootstrap/releases/download/v3.3.5/bootstrap-3.3.5-dist.zip"" rel=""nofollow noopener noreferrer"" target=""_blank"">precompiled bootstrap bundle</a> from here.<br/>
This will download the compiled and minified <code>bootstrap-x.x.1dist.zip</code> file, which contains all the packaged CSS, JavaScript, and Font files. A precompiled and distributable bundle comes with three folders. The following is the snapshot of the folders and their contents.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Precompiled bootstrap bundle"" class=""alignnone wp-image-9880 size-full"" height=""333"" loading=""lazy"" sizes=""(max-width: 883px) 100vw, 883px"" src=""/media/uploads/articles/152/Precompiled-bootstrap-bundle.png"" srcset="""" width=""883""/></a></p>
<h4>Get the full source code:</h4>
<p>Download the bootstrap <a href=""https://github.com/twbs/bootstrap/archive/v3.3.5.zip"" rel=""nofollow noopener noreferrer"" target=""_blank"">complete source code</a> bundle from here.<br/>
This will download the full source code bundle of Bootstrap. You have to install and compile the source code before actually using this. Here are the files and folders that come with the source code bundle.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Bootstrap complete source bundle"" class=""alignnone size-full wp-image-9884"" height=""556"" loading=""lazy"" sizes=""(max-width: 918px) 100vw, 918px"" src=""/media/uploads/articles/152/Bootstrap-complete-source-bundle.png"" srcset="""" width=""918""/></a></p>
<p>In case of a downloaded local copy of Bootstrap, we include the following files to your HTML HEAD section.</p>
<pre class=""prettyprint lang-html"">&lt;link rel=""stylesheet"" href=""bootstrap.min.css""&gt; 
&lt;link rel=""stylesheet"" href=""bootstrap-theme.min.css""&gt; 
&lt;script type=""text/javascript"" src=""bootstrap.min.js""&gt;&lt;/script&gt; 
&lt;script type=""text/javascript"" src=""jquery.min.js""&gt;&lt;/script&gt;
</pre>
",0,"standard","post"
"How to Customize POJO Initialization and Destruction in Spring Core","how-to-customize-pojo-initialization-and-destruction-in-spring-core","Spring POJOs are initialized and managed by Spring IoC Container. Sometimes, you may need perform some initialization code before a POJO is used.
","LIVE","<p>Spring POJOs are initialized and managed by Spring IoC Container. Sometimes, you may need perform some initialization code before a POJO is used. A typical example is to open a database or network connection. Similarly you may want to perform the corresponding destruction tasks at the end of their life cycle. Therefore, sometimes it is necessary to customize bean initialization and destruction in the Spring IoC container.</p>
<p>The POJO life cycle tasks can be created using callback methods. A typical life cycle of a bean can be explained as follows:</p>
<ol>
<li>Create the bean instance either by a constructor injection or by a factory method.</li>
<li>Set the values and bean references to the bean properties.</li>
<li>Call the bean initialization callback methods.</li>
<li>The bean is ready to be used.</li>
<li>When the container is shut down, call the bean destruction callback methods are called.</li>
</ol>
<p>Spring initialization and destruction callback methods can be configured by setting the values for <code>init-method</code> and <code>destroy-method</code> attributes in the bean declaration. You need to specify the callback method names as follows.</p>
<pre class=""prettyprint lang-xml""><bean class=""com.javatechig.spring.bean.Pizza"" destroy-method=""onDestroy"" id=""pizza"" init-method=""onStart"">
    <property name=""name"" value=""Italian Pizza""></property>
    <property name=""price"" value=""5.0""></property>
</bean>
</pre>
<p>Notice that in the above code snippet, we have specified <code>onStart</code> and <code>onDestroy</code> callback methods to control POJO initialization and destruction. Here is how, you can configure the callback methods to your POJO class.</p>
<pre class=""prettyprint lang-java"">public class Pizza {
    private String name;
    private double price;
    
    public Pizza() { }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public void onStart() throws IOException {
        System.out.println(""Inside onStart"");
    }

    public void onDestroy() throws IOException {
        System.out.println(""Inside onDestroy"");
    }
}</pre>
",0,"standard","post"
"Spring Internationalization or i18n Locales Using Properties Files","spring-internationalization-or-i18n-locales-using-properties-files","The string message for different locale are stored in separate properties files. These properties files are also called as resource bundles. Spring application context can resolve text messages for target locales by keys.
","LIVE","<p>Most commercial websites are targeted for global users. This means that you need to make your application to support different languages. Spring provides built in support for localizing strings used across application.</p>
<p>The string message for different locale are stored in separate properties files. These properties files are also called as resource bundles. Spring application context can resolve text messages for target locales by keys. By convention the Java resource bundle files are named as <code><filename>_<language_code>_<country_code>.properties</country_code></language_code></filename></code>.</p>
<p>Spring uses the <code>MessageSource</code> interface to resolve the resource bundles. The ApplicationContext interface extends MessageSource interface so that all application contexts are able to resolve text messages. An application context delegates the message resolution to a bean with the name <code>messageSource</code>. <code>ResourceBundleMessageSource</code> is the most common MessageSource implementation that resolves messages from resource bundles for different locales.</p>
<p>Create a properties file containing your static strings in your default locale i.e English. In our example we will create <code>message.properties</code> file.</p>
<p><strong>message.properties</strong></p>
<pre class=""prettyprint lang-java"">message.hello = Hello
message.welcome = {0}. {1} {2} welcome to stacktips.com.
</pre>
<p>Next thing we will do is to add translated strings in a separate file. By convention the file names are append the name of the file with an “underscore” sign followed by the locale code of the language you are translating it to.</p>
<p>In this example, we will crate the French translation of the above strings. Create a new file named <code>message_fr.properties</code> and paste the following strings.</p>
<p><strong>message_fr.properties</strong></p>
<pre class=""prettyprint lang-java"">message.hello = Bonjour
message.welcome = {0}. {1} {2} Bienvenue a stacktips.com.
</pre>
<p>Please note that, I have used Google translator to translate the above messages in to French version.</p>
<p>Now we need to tell Spring to handle the localization by using the above two files. This can be done by adding the <code>ResourceBundleMessageSource</code> bean in <code>beans.xml</code> declaration.</p>
<pre class=""prettyprint lang-xml""><bean class=""org.springframework.context.support.ResourceBundleMessageSource"" id=""messageSource"">
    <property name=""basename"" value=""message""></property>
    <property name=""defaultEncoding"" value=""UTF-8""></property>
</bean>
</pre>
<p>Notice that in the above bean configuration, the basename is used to tell the Spring IoC controller, which file to look for for resolving the localized string.</p>
<p>Now, let us load the strings form different files based on the selected locale.</p>
<pre class=""prettyprint lang-java"">public class Main {
    public static void main(String[] args) throws Exception {
        ApplicationContext context = new GenericXmlApplicationContext(""beans.xml"");

        String helloEn = context.getMessage(""message.hello"", null, Locale.ENGLISH);
        String welcomeEn = context.getMessage(""message.welcome"", new String[] { ""Mrs"", ""Sally"", ""Peterson"" }, Locale.ENGLISH);
        System.out.println(helloEn +  welcomeEn);

        String helloFr = context.getMessage(""message.hello"", null, Locale.FRENCH);
        String welcomeFr = context.getMessage(""message.welcome"", new String[] { ""Mr"", ""Sally"", ""Peterson"" }, Locale.FRENCH);
        System.out.println(helloFr  + welcomeFr);
    }
}</pre>
",0,"standard","post"
"Introduction to Bootstrap and Basic Building Blocks","introduction-to-bootstrap-and-basic-building-blocks","Bootstrap is predominantly based on CSS3. CSS3 has a major shift with comparison to CSS1 &#038; CC2 and is currently the latest version. It has come up with a number of powerful capabilities and boosted the mobile-first philosophy of the technology.
","LIVE","<p>Bootstrap is predominantly based on CSS3. CSS3 has a major shift with comparison to CSS1 &amp; CC2 and is currently the latest version. It has come up with a number of powerful capabilities and boosted the mobile-first philosophy of the technology. Some of the very crucial inclusions are Media queries, Selectors, Cascading and Inheritance, Template layouts, Namespaces, MathML, Flexible and Grid layouts, Transformations and Transitions, and so on.</p>
<p>Designing and building the website that would properly render in almost all the devices irrespective of the device size, browser, screen size, and so on widely known as Responsive web design.</p>
<p>Bootstrap, frontend frameworks which will help you design and develop a Responsive Web application in a much optimized and efficient way.</p>
<ul>
<li>Bootstrap is a frontend framework for faster and easier web development in today’s fiercely competitive world of mobile.</li>
<li>It uses HTML,CSS and JavaScript</li>
<li>Twitter released Bootstrap as an open source in August 2010.</li>
<li>Although there are few similar frameworks available in market, Bootstrap is most popular and widely used one.</li>
</ul>
<h2>Why and Where to use Bootstrap?</h2>
<p>Following are some of the points where bootstrap is the key to use,</p>
<ul>
<li><strong>Responsive design</strong>: Responsive Web Design means designing and building your website that would properly render in almost all the devices irrespective of the device size, browser, screen size, and so on.</li>
<li><strong>Automatic browser support:</strong> The ability of a Web browser to effectively display the HTML code and execute the scripts on Web pages.So thatall current browsers will render the page the same.</li>
<li><strong>The mobile-first approach</strong>: The technique of creating mobile websites first and then progressively enhancing them to create the desktop version. It goes parallel with the term Progressive Enhancement, which means you are designing your website bottom-up (mobile, tablet and desktop).</li>
<li><strong>Easy adaption:</strong> This is similar to the progressive enhancement technique, where the focus goes to the user rather than the browser.</li>
</ul>
<h2>Basic Building blocks of Bootstrap</h2>
<p>As we mentioned earlier the overall structure of Bootstrap contains, CSS, Components and JavaScript.</p>
<ul>
<li>Bootstrap comes with fundamental HTML element styled, global CSS classes, Classes for advanced grid patterns. It also includes lots of enhanced and extended CSS classes.</li>
<li>Bootstrap offers rich set of reusable and built-in components such as breadcrumbs, progressbar, alerts and navigation bars. These components are technically custom CSS classes specially crafted for specific purposes.</li>
<li>Bootstrap framework comes with a number of ready to use JavaScript plug-ins. So, when you need to create pop-up windows, carousels or tooltips and so on, you just use one of the pre-packaged JavaScript plug-ins.</li>
</ul>
<p> </p>
[box style=”0″]
<p><strong>Did you know?</strong><br/>
The Bootstrap JS plug-in are built on top of JQuery; hence the code you would write in JS in Bootstrap will be based on JQuery. Bootstrap also provides the feature and flexibility of customization where you can deploy your own branding and themes, instead of using the bootstrap default ones.</p>
[/box]
",0,"standard","post"
"How to Initialize Bean by Reading Data from .properties File in Spring","how-to-initialize-bean-by-reading-data-from-properties-file-in-spring","In our previous tutorial, we have seen how to create and manage POJOs With Spring IoC container using XML configuration and @Configuration and @Bean Annotations. In this example, we will examine how to initialize spring POJO by reading data from external resources such as property file.
","LIVE","<p>In our previous tutorial, we have seen how to create and manage POJOs With Spring IoC container using XML configuration and <code>@Configuration</code> and <code>@Bean</code> Annotations. In this example, we will examine how to initialize spring POJO by reading data from external resources such as property file.</p>
<p>In regular Java applications, you need to write your own code to read file, but Spring offers the the <code>PropertySourcesPlaceholderConfigurer</code> class that facilitates to load the contents of external file.</p>
<p>In this example, we will initialize the POJO by reading the data from a .properties file. Let us first create a bean class <code>Car.java</code> with two properties name and model.</p>
<pre class=""prettyprint lang-java"">public class Car {
    private String model;
    private double price;

    public Car() { }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}
</pre>
<p>Let us assume you have a series of values in a properties file you want to access and initialize the bean properties. Create a property file named <code>car.properties</code> with the following data.</p>
<pre class=""prettyprint lang-xml"">car.model=Volkswagen Polo
car.price=5000.00
</pre>
<p>To make the contents of the car.properties file accessible to set up other beans, you can use the <code>PropertySourcesPlaceholderConfigurer</code> class read its value. Add the following configuration to your <code>beans.xml</code> file.</p>
<pre class=""prettyprint lang-xml""><bean class=""org.springframework.context.support.PropertySourcesPlaceholderConfigurer"" id=""carProperty"">
    <property name=""location"">
        <value>classpath:car.properties</value>
    </property>
</bean>
</pre>
<p>Notice that in the above code snippet, the location property for the bean is defined with <code>classpath:car.properties</code>. The classpath: prefix tells Spring to look for the car.properties file in the Java class path.</p>
<p>The above configuration is enough, but this can throw an exception if the file is not found. This can be avoided using <code>ignoreResourceNotFound</code> and <code>ignoreUnresolvablePlaceholders</code> properties as follows.</p>
<pre class=""prettyprint lang-xml""><bean class=""org.springframework.context.support.PropertySourcesPlaceholderConfigurer"" id=""carProperty"">
    <property name=""location"">
        <value>classpath:car.properties</value>
    </property>
    <property name=""ignoreResourceNotFound"" value=""true""></property>
    <property name=""ignoreUnresolvablePlaceholders"" value=""true""></property>
</bean>
</pre>
<p>After declaring the <code>PropertySourcesPlaceholderConfigurer</code> bean, you can access the values of the <code>car.properties</code> file as follows.</p>
<pre class=""prettyprint lang-xml""><bean class=""com.javatechig.spring.bean3.Car"" id=""carDetailsBean"">
    <property name=""model"" value=""${car.model:0}""></property>
    <property name=""price"" value=""${car.price:0.00}""></property>
</bean>
</pre>
<p>The syntax to read the values form the file is <code>${yy:default_value}</code>. If value for a key is is found in the properties file, the corresponding value is assigned to the bean property. Otherwise it loads the default value.</p>
<p>Now you can initialize the bean and test the code as follows.</p>
<pre class=""prettyprint lang-java"">public class Main {

    public static void main(String[] args) throws Exception {
        ApplicationContext context = new GenericXmlApplicationContext(""beans.xml"");
        Car car = (Car) context.getBean(""carDetailsBean"");
        System.out.println(car.getModel()); // Volkswagen Polo
        System.out.println(car.getPrice()); // 5000
    }
}
</pre>
",0,"standard","post"
"Spring Bean Scope Using XML Configuration and @Scope Annotation","how-to-set-bean-scope-using-xml-configuration-and-scope-annotation","When you declare a POJO instance or bean in the configuration file, you are actually defining a template for bean creation, not an actual bean instance.
","LIVE","<p>When you declare a POJO instance or bean in the configuration file, you are actually defining a template for bean creation, not an actual bean instance. The actual bean instance is created when the <code>getBean()</code> method is called. While bean is instantiated by the Spring IoC, the framework decides the scope of the instance.</p>
<p>Following are the different bean instance scopes supported in Spring.</p>
<ul>
<li><strong>singleton</strong> – Creates at most one bean instance per Spring IoC container</li>
<li><strong>prototype</strong> – Creates a new instance each requested</li>
<li><strong>request</strong> – Creates a single bean instance per HTTP request;</li>
<li><strong>session</strong> – Creates a single bean instance per HTTP session;</li>
<li><strong>global session-</strong> Creates a single bean instance per global HTTP session</li>
</ul>
<p>You can set the bean scope using the <code><bean></bean></code> element scope attribute. The default scope fro bean is set to Singleton. This means that only one instance of bean can be created in the IoC container and the same instance can be shared across.</p>
<p>The following code snippet shows how to define the bean scope using XML configuration.</p>
<pre class=""prettyprint lang-xml""><bean class=""com.javatechig.spring.bean.Crayon"" id=""crayon"" scope=""prototype"">
      <property name=""name"" value=""Dancing Crayon""></property>
      <property name=""price"" value=""30""></property>
</bean>
</pre>
<p>You can also specifying bean scope from Java code using <code>@Scope</code> annotation as follows:</p>
<pre class=""prettyprint lang-java"">@Configuration
public class MyBeanConfig {
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON)
    public Crayon crayonToy() {
        return new Crayon(""Yellow crayon"", 50);

    }
}
</pre>
",0,"standard","post"
"Spring Bean Configuration using @Configuration and @Bean Annotations","bean-configuration-using-configuration-and-bean-annotations","In this tutorial we will examine how to configuring the Spring POJO for the Spring IoC container using @Configuration and @Bean annotation.
","LIVE","<p>In our previous tutorial, we have declared and configured Spring bean classes using XML configuration file. If you want to reduce the number of XML configuration files, you can do so by configuring the Spring POJO for the Spring IoC container using <code>@Configuration</code> and <code>@Bean</code> annotation.</p>
<h2>@Configuration &amp; @Bean Annotations</h2>
<p>Annotating a class with the @Configuration indicates that the class can be used by the Spring IoC container as a source of bean definitions.</p>
<p>The @Bean annotation tells Spring that a method annotated with @Bean will return an object that should be registered as a bean in the Spring application context.</p>
<p>Let us examine how to use the @Configuration and @Bean annotation to configure the following bean class.</p>
<pre class=""prettyprint lang-java"">public class Toy {
    private String name;
    private double price;

    public Toy() { }
    public Toy(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}
</pre>
<p>The above bean class can be configured using the following XML configuration.</p>
<pre class=""prettyprint lang-xml""><beans>
   <bean class=""com.javatechig.spring.bean.Toy"" id=""crayonToy""></bean>
</beans>
</pre>
<p>The following code snippet shows the simplest form of bean declaration using @Configuration and @Bean annotation.</p>
<pre class=""prettyprint lang-java"">@Configuration
public class MyBeanConfig {

    @Bean
    public Toy crayonToy() {
        return new Toy();
    }
}
</pre>
<p>Here the method name annotated with @Bean works as bean ID and it creates and returns actual bean instance. Your configuration class can have declaration for more than one @Bean.</p>
<p>Once your configuration classes are defined, you can load &amp; provide them to Spring container using <code>AnnotationConfigApplicationContext</code> class.</p>
<pre class=""prettyprint lang-java"">AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
context.register(MyBeanConfig.class);
context.refresh();

Crayon myService = context.getBean(Crayon.class);
</pre>
",0,"standard","post"
"Create and Manage POJOs with Spring IoC Container","create-and-manage-pojos-with-spring-ioc-container","In this tutorial, we will examine how to design a POJO class and configure POJO instance values for the Spring IoC container in an XML file. Next, instantiate the Spring IoC container to access to the POJO instance values defined in an XML file.
","LIVE","<p>In this tutorial, we will examine how to design and configure POJO instance values for the Spring IoC container in an XML file. Next, instantiate the Spring IoC container to access to the POJO instance values defined in an XML file.</p>

<p>For the sake of simplicity, in this example we will declare a class NameGenerator which will generate full name from initial, firstname and surname.</p>
<p>Let us first began with creating a new eclipse Maven project.</p>
<h2><span id=""1Add_the_required_dependencies"">1. Add the required dependencies</span></h2>
<p>Add the following Maven depandencies to your project pom.xml file.</p>
<pre class=""prettyprint lang-xml""><project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemalocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelversion>4.0.0</modelversion>
    <groupid>com.javatechig</groupid>
    <artifactid>SpringBeanExample</artifactid>
    <version>0.0.1-SNAPSHOT</version>

    <properties>
        <org.springframework.version>4.0.2.RELEASE</org.springframework.version>
        <apache.tiles>3.0.3</apache.tiles>
        <spring.security.version>3.2.3.RELEASE</spring.security.version>
    </properties>

    <dependencies>
        <dependency>
            <groupid>org.springframework</groupid>
            <artifactid>spring-core</artifactid>
            <version>${org.springframework.version}</version>
        </dependency>

        <dependency>
            <groupid>org.springframework</groupid>
            <artifactid>spring-beans</artifactid>
            <version>${org.springframework.version}</version>
        </dependency>

        <dependency>
            <groupid>org.springframework</groupid>
            <artifactid>spring-context</artifactid>
            <version>${org.springframework.version}</version>
        </dependency>
    </dependencies>
</project>
</pre>
<h2><span id=""2_Create_the_POJO_Class"">2. Create the POJO Class</span></h2>
<p>Let us create a NameGenerator class that has three properties— prefix, firstName, and surName.</p>
<pre class=""prettyprint lang-java"">public class NameGenerator {
    private String firstName;
    private String surName;
    private String initial;

    public NameGenerator() {}

    public NameGenerator(String initial, String firstName, String surName) {
        this.firstName = firstName;
        this.surName = surName;
        this.initial = initial;
    }

    public String getFullName() {
        return initial + "" "" + firstName + "" "" + surName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getSurName() {
        return surName;
    }

    public void setSurName(String surName) {
        this.surName = surName;
    }

    public String getInitial() {
        return initial;
    }

    public void setInitial(String initial) {
        this.initial = initial;
    }
}
</pre>
<p>Notice that, in the above code snippet the NameGenerator class has a method <code>getFullName(),</code> that is used to generate the fullname.</p>
<p>The NameGenerator class can be instantiated by using standard Java constructorn call. When you use the Spring IoC container to initialize POJOs, if you use the standard Java constructor the mechanism is called constructor injection, where as if you use setter methods the mechanism is called setter injection.</p>
<h2><span id=""3_Create_a_XML_Configuration_for_your_POJO"">3. Create a XML Configuration for your POJO</span></h2>
<p>To define instances of a POJO class in the Spring IoC container, you have to create an XML configuration and initialize the properties.</p>
<p>Create a new xml file named <code>bean.xml</code> under the root of the project classpath for easier testing with in an IDE. The following code snippet explains how to configure bean in Spring.</p>
<pre class=""prettyprint lang-xml""><beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemalocation=""http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd"">

    <bean class=""com.javatechig.spring.bean.NameGenerator"" name=""nameGenerator"">
        <property name=""initial"">
            <value>Mr.</value>
        </property>
        <property name=""firstName"">
            <value>Steve</value>
        </property>
        <property name=""surName"">
            <value>Peterson</value>
        </property>
    </bean>
</beans>
</pre>
<p><strong>Notes:</strong></p>
<ul>
<li>Spring XML configuration file can have any name, in this example we have created beans.xml.</li>
<li>Each POJO instances must have a unique name or id per context. The id will be used to to uniquly identify the beans.</li>
<li>The value for class attribute should contain a fully qualified POJO class name so the Spring IoC container can instantiate it.</li>
<li>If you want to configure the bean property via setter injection, you use the <code><property></property></code> element and specify the property name in its name attribute. A requires that the underlying POJO class contain a corresponding setter method.</li>
<li>The Spring bean properties can be initialized via constructor injection by declaring them in the <code><constructor-arg></constructor-arg></code> elements.</li>
</ul>
<p>The following example shows how to use the constructor-arg element to initialize bean via constructor injection.</p>
<pre class=""prettyprint lang-xml""><bean class=""com.javatechig.spring.bean.NameGenerator"" name=""nameGenerator"">
        <constructor-arg>
            <value>Mr.</value> 
        </constructor-arg>
        <constructor-arg>
            <value>Steve</value> 
        </constructor-arg>
        <constructor-arg>
            <value>Peterson</value> 
        </constructor-arg>
</bean>
</pre>
<p>Note that the constructor arguments are order based, so you have to be careful about the order while declaring in <code>bean.xml</code> file.</p>
<p>Although a bean’s name can be defined by the name attribute of the element, the preferred way of identifying a bean is through the standard XML id attribute. In this way, if your text editor is XML-aware, it can help to validate each bean’s uniqueness at design time.</p>
<h2><span id=""4_Instantiate_the_Spring_IoC_Container"">4. Instantiate the Spring IoC Container</span></h2>
<p>To create bean instances, we first need to instantiate the Spring IoC container by reading the XML configuration files (in our case <code>beans.xml</code>). Once IoC container is initialized, you can get the bean instances from the IoC container using bean name or id.</p>
<p>Spring provides two types of IoC container implementations.</p>
<ul>
<li>Using bean factory (BeanFactory class)</li>
<li>Using application context (ApplicationContext interface)</li>
</ul>
<p>The application context provides some of the advance features than the bean factory. We recommend using the application context for every application unless it is intended. The <code>ApplicationContext</code> is an interface, so will use <code>GenericXmlApplicationContext</code> class which is an implementation of ApplicationContext interface.</p>
<p>The following code snippet shows how to load the XML configuration file from the classpath.</p>
<pre class=""prettyprint lang-java"">ApplicationContext context = new GenericXmlApplicationContext(""beans.xml"");</pre>
<p>Once the application context is instantiated, we can get the POJO instance and access the properties.</p>
<h2><span id=""5_Get_Bean_Instance_from_the_IoC_Container"">5. Get Bean Instance from the IoC Container</span></h2>
<p>To get the bean instance, you need to call the <code>getBean()</code> method by pasing unique bean name.<br/>
Let us create a new class with a main method so that we can instantiate the bean and call the <code>getFullName()</code> method.</p>
<pre class=""prettyprint lang-java"">import org.springframework.context.ApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;

public class Main {
    public static void main(String[] args) {
        ApplicationContext context = new GenericXmlApplicationContext(""beans.xml"");
        NameGenerator generator = (NameGenerator) context.getBean(""nameGenerator"");
        System.out.println(generator.getFullName());
    }
}</pre>
<p><strong>Output:</strong></p>
<p>The application will initialize the bean and print the full name on console.</p>
",0,"standard","post"
"Apache Cordova Windows Version 4.1.0 is is Now Out","apache-cordova-windows-version-4-1-0-is-is-now-out","The newer version of Apache Cordova for Windows version 4.1.0 is released. As per official Cordova release note,&hellip;
","LIVE","<p>The newer version of Apache Cordova for Windows version 4.1.0 is released. As per official Cordova release note, this version will be the default Windows version after next Cordova -cli release.</p>
<p>This release adds compatibility to Microsoft Windows 10 RTM version and supports the new web platform enhancements that it included, such as hosted apps and a new version of WinJS. It also supports the new .NET Native compilation model for Cordova plugins that include a native or .NET component.</p>
<p>Along with the above new feature enhancements, it also includes numerous bug fixes and stability improvements, including platform dependency problems and the ability to perform a Cordova prepare for Windows while running on a Mac.</p>
<p>Now you can use the console.log statement to see the log messages including the runtime exceptions from your app console. This is certainly will help in quick diagnostics as a result it will speedup the development process.</p>
<p>We will take a deep dive into the new version and will update with more details.</p>
",0,"standard","post"
"How Spring Controller Request Mapping works in Spring MVC","how-spring-controller-request-mapping-works-in-spring-mvc","In this tutorial, we will discuss how Spring controller request mapping works in Spring MVC and different type of request mapping  mechanisms.","LIVE","<p>In the <a href=""/articles/introduction-to-spring-mvc-and-dispatcher-servlet"">previous tutorial</a>, we have discussed the role of a Dispatcher Servlet and the steps required to create a Spring MVC application. In this tutorial, we will discuss different type of request mapping to Spring controllers.</p>
<p>Dispatcher Servlet is used to handle all incoming requests and route them through Spring. When <code>DispatcherServlet</code> receives a web request, it determines which controllers should handle the incoming request.</p>
<p>It first scans for all classes that are declared with the <code>@Controller</code> annotation. The dispatching process depends on the various <code>@RequestMapping</code> annotations declared in a controller class and its handler methods. There are three levels of request mapping can be defined in Spring controller.</p>
<!--TOC-->
<h3 class="""">Handler Level mapping</h3>
<p>The simplest strategy for using @RequestMapping annotations is to decorate the handler methods directly. In this method, you need to declare mapping for each handler method with the @RequestMapping annotation containing a URL pattern. If a handler’s @RequestMapping annotation matches the request URL, DispatcherServlet it dispatches the request to this handler for it to process the request.</p>
<p>Following are the different mapping types supported.</p>
<ul>
<li><strong>By path</strong><br>
@RequestMapping(“path”)</li>
<li><strong>By HTTP method</strong><br>
@RequestMapping(“path”, method=RequestMethod.GET). Other Http methods such as&nbsp;POST, PUT, DELETE, OPTIONS, and TRACE are also supported.</li>
<li><strong>By query parameter</strong><br>
@RequestMapping(“path”, method=RequestMethod.GET, params=”param1”)</li>
<li><strong>By the presence of request header</strong><br>
@RequestMapping(“path”, header=”content-type=text/*”)</li>
</ul>
<p>The request mapping for methods can be&nbsp;defined as follows:</p>
<pre class=""prettyprint lang-java"">@Controller
public class Employee {

    @RequestMapping(""/employee/add"")
    public ModelAndView add(
            @RequestParam(value = ""firstName"") String firstName,
            @RequestParam(value = ""surName"") String surName) {
        //....
        //....
        return null;
    }
    
    @RequestMapping(value={""/employee/remove"",""/employee/delete""})
    public ModelAndView delete(
            @RequestParam(value = ""uuid"") String uuid) {
        //....
        //....
        return null;
    }   
}</pre>
<p>In the above code snippet, the controller <code>add()</code> method is declared with <code>@RequestMapping(""/employee/add"")</code>. If the incoming request path to matches is,<code>/employee/add</code> then the add() handler method will be invoked to process the request.</p>
<p>Handler mappings match URLs according to their paths relative to the context path (i.e., the path where the web application is deployed) and the servlet path (i.e., the path mapped to DispatcherServlet).</p>
<h3 class="""">Mapping at Controller Class level</h3>
<p>The @RequestMapping annotation can also be used to decorate a controller class. This is helpful to take the control at the top level and filter the incoming requests. If the incoming request matches the pattern defined in the controller class, then it searches the controller methods mappings.</p>
<p>The following code snippet describes how to define Spring @RequestMapping at the controller class level.</p>
<pre class=""prettyprint lang-java"">@Controller
@RequestMapping(""/employee/*"")
public class Employee {

    @RequestMapping(""add"")
    public ModelAndView add(
            @RequestParam(value = ""firstName"") String firstName,
            @RequestParam(value = ""surName"") String surName) {
        //....
        //....
        return null;
    }
    
    @RequestMapping(value={""remove"",""delete""})
    public ModelAndView delete(
            @RequestParam(value = ""uuid"") String uuid) {
        //....
        //....
        
        return null;
    }   
}</pre>
<p>Notice that, we have used the wildcard (*) for the @RequestMapping annotation for broader URL matching.</p>
<h3 class="""">Mapping Request Type</h3>
<p>The <code>@RequestMapping</code> annotation handles all types of incoming HTTP request including GET, POST, PUT, DELETE, PATCH etc. By default, it’s assumed all incoming requests to URLs are of the HTTP GET kind. To differentiate the mapping by HTTP request type, we need to explicitly specify the HTTP request method in the @RequestMapping declaration.</p>
<p>The following code snippet describes how to declare Spring mappings by HTTP request methods.</p>
<pre class=""prettyprint lang-java"">@Controller
@RequestMapping(""/employee/*"")
public class Employee {

    @RequestMapping(value = { ""remove"", ""delete"" }, method = { RequestMethod.POST,  RequestMethod.DELETE })
        public ModelAndView delete(@RequestParam(value = ""uuid"") String uuid) {
            // ....
            // ....
    
            return null;
        }
}</pre>",0,"standard","post"
"Creating Spring MVC HelloWorld Using Maven in Eclipse Tomcat","creating-spring-mvc-helloworld-using-maven-in-eclipse-tomcat","In the course of this tutorial, we will learn how to create your first Spring MVC application using eclipse IDE using Maven build type.","LIVE","<p>In the course of this tutorial, we will learn how to create your first Spring MVC application using eclipse IDE using Maven build type.</p>

<h2><span id=""1_Prerequisites"">Prerequisites</span></h2>
<ul>
<li>Java version 1.7</li>
<li>Latest Spring STS</li>
<li>Apache Tomcat 7.0.x</li>
</ul>
<p>This tutorial assumes that, you have downloaded and installed the above mentioned softwares on your computer. If you have not installed Java on your development machine, you can follow the official oracle documentation for the installation for your configuration.</p>
<p>Without spending any further time, let us jump straight into creating the project in eclipse.</p>
<h2><span id=""1_Create_a_Maven_Project"">Create a Maven Project</span></h2>
<ul>
<li><strong>File</strong> -&gt; <strong>New</strong> -&gt; <strong>Other</strong>… It will open the eclipse select wizard.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Create Maven Spring project"" class=""alignnone size-full wp-image-9778"" height=""500"" loading=""lazy"" src=""https://media.stacktips.com/media/uploads/articles/163/Introduction-to-Spring-MVC-and-Dispatcher-Servlet-620x398.png"" srcset="""" ></a></p>
<ul>
<li>Select <strong>Maven</strong> -&gt; <strong>Maven Project</strong> and click <strong>Next</strong>.</li>
<li>Again click <strong>Next</strong> on New Maven Project dialog.</li>
<li>Select an Archetype either by filtering <strong>webapp</strong> or selecting from the available artifacts and click <strong>Next</strong>.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Create new eclipse maven project"" class=""alignnone size-full wp-image-9779"" height=""539"" loading=""lazy"" src=""/media/uploads/articles/162/Create-new-eclipse-maven-project.png"" srcset="""" width=""617""></a></p>
<ul>
<li>Provide the details for Group Id and Artifact Id and click <strong>Finish</strong>. As a general practice, the group id is your company domain name (i.e. com.javatechig) and artifact id is the name of your application.</li>
<li>This will create a basic Maven project template in eclipse.</li>
</ul>
<h2><span id=""3_Create_a_Server_Instance"">Create a Server Instance</span></h2>
<p>In this example we will be using <strong>Apache</strong>&nbsp;<strong>Tomcat</strong> application server for deploying our Spring MVC application. Now let us add a server instance on eclipse.</p>
<ul>
<li><strong>File</strong> -&gt; <strong>New</strong> -&gt; <strong>Other</strong>… It will open the eclipse select wizard.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Add Tomcat Server Eclipse"" class=""alignnone size-full wp-image-9777"" height=""634"" loading=""lazy"" src=""/media/uploads/articles/162/Add-Tomcat-Server-Eclipse.png"" srcset="""" width=""524""></a></p>
<ul>
<li>Select Server -&gt; Server and click <strong>Next</strong>.</li>
<li>Select Apache -&gt; <strong>Tomcat v7.0 Server</strong> and click <strong>Next</strong>. In this example, we will be using Apache Tomcat version 7.0. However, the similar steps will work for other tomcat versions.</li>
<li>Browse and select the <strong>Apache Tomcat v7.0</strong> server installation directory and click <strong>Finish</strong>.</li>
</ul>
<h2><span id=""4_Update_Project_Build_Path"">4. Update Project Build Path</span></h2>
<p>You might notice a error on your project. This is&nbsp;due to the project&nbsp;Build path problem. To fix this you need to right click on project -&gt; <strong>Properties</strong> to open project Java Build Path settings.</p>
<p>Select <strong>Libraries</strong> tab and click on <strong>Add Library</strong>…-&gt; <strong>Server Runtime</strong> -&gt; <strong>Apache Tomcat</strong> -&gt; <strong>Finish</strong>.</p>
<h2><span id=""5_Configure_Spring_Dependency"">5. Configure Spring Dependency</span></h2>
<p>Before we develop Spring MVC web application, we need to configure the project by adding the required Maven dependencies. Add the following Maven dependencies into your <code>pom.xml</code> file.</p>
<h5><span id=""pomxml"">pom.xml</span></h5>
<pre class=""prettyprint lang-xml""><project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemalocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
    <modelversion>4.0.0</modelversion>
    <groupid>com.javatechig</groupid>
    <artifactid>HelloMVC</artifactid>
    <packaging>war</packaging>
    <version>0.0.1-SNAPSHOT</version>
    <name>HelloMVC Maven Webapp</name>
    <url>http://maven.apache.org</url>

    <!--Spring library version -->
    <properties>
        <spring.version>4.2.1.RELEASE</spring.version>
    </properties>

    <dependencies>

        <!-- Spring dependencies -->
        <dependency>
            <groupid>org.springframework</groupid>
            <artifactid>spring-core</artifactid>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupid>org.springframework</groupid>
            <artifactid>spring-webmvc</artifactid>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupid>org.springframework</groupid>
            <artifactid>spring-web</artifactid>
            <version>${spring.version}</version>
        </dependency>
        <!--End Spring dependencies -->

        <dependency>
            <groupid>junit</groupid>
            <artifactid>junit</artifactid>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <finalname>HelloMVC</finalname>
    </build>
</project>
</pre>
<p>With this the basic Spring project configuration is complete. Your project structure should look like as the following screenshot.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Spring MVC Eclipse Maven Project Structure"" class=""alignnone size-full wp-image-9780"" height=""550"" loading=""lazy"" src=""/media/uploads/articles/162/Spring-MVC-Eclipse-Maven-Project-Structure.png"" srcset="""" width=""356""></a></p>
<p>The following steps will take you through the rest of the steps to create and deploy Spring MVC HelloWorld app.</p>
<h2><span id=""6_Configure_Dispatcher_Servlet"">6. Configure Dispatcher Servlet</span></h2>
<p>The <code>DispatcherServlet</code> must be configured as normal in<code> web.xml</code> to bootstrap a Spring WebApplicationContext. Edit the default <code>web.xml</code> file and add the following.</p>
<h5><span id=""webxml"">web.xml</span></h5>
<pre class=""prettyprint lang-xml"">
<web-app>
    <display-name>Archetype Created Web Application</display-name>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/dispatcher-servlet.xml</param-value>
    </context-param>

    <listener>
        <listener-class>
            org.springframework.web.context.ContextLoaderListener
        </listener-class>
    </listener>

    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
</pre>
<h2 class=""title""><span id=""7_Mapping_Requests"">7. Mapping Requests</span></h2>
<p>Create an xml file <code>dispatcher-servlet.xml</code> under the same directory of <code>web.xml</code>.</p>
<h5><span id=""dispatcher-servletxml"">dispatcher-servlet.xml</span></h5>
<pre class=""prettyprint lang-java""><beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:context=""http://www.springframework.org/schema/context"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemalocation=""
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd"">

    <context:component-scan base-package=""com.javatechig.controller""></context:component-scan>

    <bean class=""org.springframework.web.servlet.view.InternalResourceViewResolver"">
        <property name=""prefix"">
            <value>/WEB-INF/views/</value>
        </property>
        <property name=""suffix"">
            <value>.jsp</value>
        </property>
    </bean>
</beans>
</pre>
<p>In the above xml file, base-package specifies the package of the controllers. prefix specifies the directory of views, and it is set to be <code>/WEB-INF/views/</code>, which means views directory should be created under WEB-INF. suffix specifies the file extension of views. For example, given a view <code>hello</code>, the view will be located as <code>/WEB-INF/views/hello.jsp</code>.</p>
<h2><span id=""8_Create_Controller_class"">8. Create Controller class</span></h2>
<p>Create the HelloWorldController under src/main/java/ directory.</p>
<h5><span id=""HelloWorldControllerjava"">HelloWorldController.java</span></h5>
<pre class=""prettyprint lang-java"">package com.javatechig.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class HelloWorldController {

    @RequestMapping(""/hello"")
    public ModelAndView welcomeMessage(
            @RequestParam(value = ""name"", required = false) String name) {
        // Name of your jsp file as parameter
        ModelAndView view = new ModelAndView(""hello"");
        view.addObject(""name"", name);
        return view;
    }
}
</pre>
<p>In the code above, @RequestMapping annotation maps web requests onto specific handler classes and/or handler methods, in this case, welcomeMessage(). It provides a consistent style between Servlet environments, with the semantics adapting to the concrete environment.</p>
<p>RequestParam indicates that a method parameter should be bound to a web request parameter. In this case, we also make it not required and give it a default value. The ModelAndView(“hello”) determines that hello is the target view.</p>
<h2><span id=""9_Working_with_Views"">9. Working with Views</span></h2>
<p>Edit the default index.jsp and add the following code snippets.</p>
<h5><span id=""indexjsp"">index.jsp</span></h5>
<pre class=""prettyprint lang-html"">    <h2><span id=""Hello_World"">Hello World</span></h2>
    <h3><span id=""Click_here""><a href=""hello?name=Sally"" rel=""nofollow noopener noreferrer"" target=""_blank"">Click here...</a></span></h3>


</pre>
<p>Add a JSP files <code>hello.jsp</code> file under <code>/WEB-INF/views/</code> directory.</p>
<h5><span id=""hellojsp"">hello.jsp</span></h5>
<pre class=""prettyprint lang-html"">&lt;%@ page language=""java"" contentType=""text/html; charset=UTF-8""
    pageEncoding=""ISO-8859-1""%&gt;





Spring 4 MVC
&lt;%@ page isELIgnored=""false""%&gt;


    <h2><span id=""Hello_name_Welcome_to_Spring_MVC"">Hello, ${name}. Welcome to Spring MVC!</span></h2>


</pre>
<p>Now we are done with our first HelloWorld example. To deploy it on Tomcat application server, Right click on the project -&gt; select <strong>Run as</strong>. Choose <strong>Tomcat server</strong>, select <strong>Next</strong> and <strong>Finish</strong>. It will deploy the project and to see the output visit http://localhost:8080/HelloMVC on your browser. you will see the following output on your browser.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Spring MVC HelloWorld usign Eclipse Maven2"" class=""alignnone size-full wp-image-9775"" height=""376"" loading=""lazy"" src=""/media/uploads/articles/162/Spring-MVC-HelloWorld-usign-Eclipse-Maven2.png"" srcset="""" width=""600""></a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Spring MVC HelloWorld usign Eclipse Maven"" class=""alignnone size-medium wp-image-9776"" height=""376"" loading=""lazy"" src=""/media/uploads/articles/162/Spring-MVC-HelloWorld-usign-Eclipse-Maven.png"" srcset="""" width=""600""></a></p>",0,"standard","post"
"Introduction to Spring MVC and Dispatcher Servlet","introduction-to-spring-mvc-and-dispatcher-servlet","Spring is a model-view-controller (MVC) framework for Java web application. Spring is build on the powerful Spring IoC container and makes extensive use of the container features to simplify the project configuration.","LIVE","<p>Spring is a <strong>model-view-controller</strong> (MVC) framework for Java web application. Spring is build on the powerful Spring IoC container and makes extensive use of the container features to simplify the project configuration.</p>
<h2>Model View Controller</h2>
<p>The Model-view-controller (MVC) is a common design pattern used to decouple business logic from UIs. Models are responsible for encapsulating application data for views. Views should only be responsible to present data, without any business logic.</p>
<p>Controllers are responsible for receiving requests from users and invoking back-end services for business processing. After processing, back-end services may return some data for views to present.</p>
<p>Controllers collect this data and prepare models for views to present. The core idea of the MVC pattern is to separate business logic from UIs to allow them to change independently without affecting each other.</p>
<p>In a Spring MVC application, models usually consist of domain objects that are processed by the service layer and persisted by the persistence layer. Views are usually JSP templates written with Java Standard Tag Library (JSTL).</p>
<h2>Why use Spring MVC?</h2>
<p>Following are some of the distinct advantages of Spring MVC architecture.</p>
<ul>
<li>Spring is capable of convention over configuration. For most purposes you only have to define one Servlet in <code>web.xml</code></li>
<li>Similar to Ruby on Rails or other popular web frameworks that work with dynamic languages</li>
<li>Normal business objects can be used to back to front end view forms</li>
<li>No need to duplicate objects just to implement an MVC’s command object interface</li>
<li>Can by used to map .json, .xml, .atom, etc to the same business logic code in one controller and simply output the type of data requested</li>
<li>Enforces good software engineering principles</li>
</ul>
<h2>How it works?</h2>
<p>The central component of Spring MVC is a Spring controller. A controller is the only servlet you need to configure in a Java web deployment descriptor <code>web.xml</code> file.</p>
<p>A Spring MVC controller is otherwise called as front controller generally referred to a single servlet called Dispatcher Servlet. The front controller manages the entire request handling process and every web request must go through it.</p>
<p>When a web request is sent to a Spring MVC application, a controller first receives the request. Then it organizes the different components configured in Spring’s web application context or annotations present in the controller itself, all needed to handle the request.</p>
<p>The following images depicts the Spring MVC architecture and flow of request handling in Spring MVC.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Introduction to Spring MVC and Dispatcher Servlet"" class=""alignnone size-medium wp-image-9767"" height=""398"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/uploads/articles/163/Introduction-to-Spring-MVC-and-Dispatcher-Servlet-620x398.png"" srcset="""" width=""620""></a></p>
<h2>Role of a Dispatcher Servlet</h2>
<ul>
<li>Dispatcher Servlet is used to handle all incoming requests and route them through Spring</li>
<li>Uses customizable logic to determine which controllers should handle which incoming requests</li>
<li>Forwards all responses to through view handlers to determine the correct views to route responses to</li>
<li>Exposes all beans defined in Spring to controllers for dependency injection</li>
</ul>
<p>A controller class in Spring 4.0 should be marked with the <code>@Controller</code> annotation. A Spring controller class need shouldn’t extend framework-specific base class or implement a framework-specific interface.</p>
<p>A Controller class defines a specific handler method to handle each request. When a Controller class receives a request, it looks for the appropriate handler mapping methods. The mapping is defined using the <code>@RequestMapping</code> annotation.</p>
<p>For example in the following code syntax, the <code>showMessage()</code> handler will handle the request comes form <code>/hello</code> endpoint.</p>
<pre class=""prettyprint lang-java"">@RequestMapping(""/hello"")
public ModelAndView showMessage(
        @RequestParam(value = ""name"", required = false, defaultValue = ""World"") String name) {

    ModelAndView modelView = new ModelAndView(""helloworld"");
    modelView.addObject(""message"", ""Welcome to Spring MVC"");
    modelView.addObject(""name"", name);
    return modelView;
}
</pre>
<p>When controller class picks the appropriate handler method, it then invokes the handler method’s backend logic with the request. After a handler method has finish processing the request, it returns the instance of ModelAndView class. The ModelAndView instance represents a view.</p>
<p>In the course of this tutorial, we have explained the basic flow of how Spring MVC works and the role of Dispatcher Servlet.</p>",0,"standard","post"
"How to Create Bitmap Blur Effect in Android Using RenderScript","how-to-create-bitmap-blur-effect-in-android-using-renderscript","Android RenderScript framework API can be used for performing computationally intensive tasks at high performance. In this tutorial we will take a look into how to create Bitmap blur effect in using Android RenderScript.
","LIVE","<p>Android <code>RenderScript</code> framework API can be used for performing computationally intensive tasks at high performance. RenderScript was primarily developed to use with data-parallel computation, although serial computationally intensive workloads can benefit as well. The RenderScript runtime will parallelize work across all processors available on a device, such as multi-core CPUs, GPUs, or DSPs, allowing you to focus on expressing algorithms rather than scheduling work or load balancing.</p>
<p>RenderScript is especially useful for applications performing image processing, computational photography, or computer vision. There are two ways we can access the Android RenderScript framework APIs:</p>
<ul>
<li>Directly using <code>android.renderscript</code> API classes. These classes are available from Android 3.0 (API level 11) and higher.</li>
<li>Alternatively, you can use <code>android.support.v8.renderscript</code> support package classes. The support library classes are available for devices running Android 2.2 (API level 8) and higher.</li>
</ul>
<h2>How to use RenderScript</h2>
<p>In order to use the Support Library RenderScript APIs, you must have Android SDK Tools revision 22.2 or higher and SDK Build-tools revision 18.1.0 or higher.</p>
<p>After you have the above two minimum development tools, you need to update the settings for the Android build process to include the RenderScript APIs. In Android Studio project add the following configurations to project <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-java"">defaultConfig {
    applicationId ""com.javatechig""
    minSdkVersion 14
    targetSdkVersion 23
    versionCode 1
    versionName ""1.0""

    // Add the following two lines
   <strong> renderscriptTargetApi 18
    renderscriptSupportModeEnabled true</strong>
}
</pre>
<p>The following code snippets can be used create a bitmap blur effect in Android using RenderScript API.</p>
<pre class=""prettyprint lang-java"">//Set the radius of the Blur. Supported range 0 &lt; radius &lt;= 25
private static final float BLUR_RADIUS = 25f;

public Bitmap blur(Bitmap image) {
    if (null == image) return null;

    Bitmap outputBitmap = Bitmap.createBitmap(image);
    final RenderScript renderScript = RenderScript.create(this);
    Allocation tmpIn = Allocation.createFromBitmap(renderScript, image);
    Allocation tmpOut = Allocation.createFromBitmap(renderScript, outputBitmap);

    //Intrinsic Gausian blur filter
    ScriptIntrinsicBlur theIntrinsic = ScriptIntrinsicBlur.create(renderScript, Element.U8_4(renderScript));
    theIntrinsic.setRadius(BLUR_RADIUS);
    theIntrinsic.setInput(tmpIn);
    theIntrinsic.forEach(tmpOut);
    tmpOut.copyTo(outputBitmap);
    return outputBitmap;
}
</pre>
<p>You can use the above code snippet to blur an ImageView as follows.</p>
<pre class=""prettyprint lang-java"">ImageView imageView = (ImageView) findViewById(R.id.imageView);
Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.nature);
Bitmap blurredBitmap = blur(bitmap);
imageView.setImageBitmap(blurredBitmap);
</pre>
<h4>Result:</h4>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Bitmap Blur Effect In Android Using RenderScript"" class=""alignnone wp-image-9759"" height=""600"" loading=""lazy"" sizes=""(max-width: 400px) 100vw, 400px"" src=""/media/uploads/articles/164/Bitmap-Blur-Effect-In-Android-Using-RenderScript-620x930.png"" srcset="""" width=""400""/></a></p>
",0,"standard","post"
"Best Mobile App Frameworks That Use JavaScript, HTML & CSS","best-mobile-app-frameworks-that-use-javascript-html-css","A broad range of frameworks make all these requisites possible and this post consisting some top-graded frameworks is a perfect way to choose the best &#038; cross-platform mobile framework in the fastest manner.
","LIVE","<p>The elevating appetite of consumers for the mobile applications plays a substantial role and compels the developers to build cutting-edge apps incorporated with interactive &amp; unique features. On an average, a mobile user employs mobile apps for 2 hours 42 minutes that is about 86% usage of the mobile devices. According to the <strong>comScore</strong> research report, 47% Internet traffic out of total 55% usage came via these apps last year in the U.S and rest 8% came through the mobile browsers.</p>
<p>This is why, the use of frameworks for experimenting came in the limelight amidst developers to develop multifarious unique, power-packed, and feature-rich apps.</p>
<p>The massive numbers of consumers are switching swiftly towards mobile devices to accomplish manifold requisites that generate far-reaching scope of standard web languages such as HTML, JavaScript, and CSS. These sought-after languages diminish the curb related to the native app development by letting you play with their exemplary attributes freely.</p>
<p>The frameworks based on these prominent languages have unveiled gigantic ways for the professional developers to create foremost mobile apps precisely loaded with a plethora of significant libraries.</p>
<p>One lucrative advantage to use these helpful web frameworks is cross-platform portability using tools such as PhoneGap. PhoneGap is an ideal package compiler to achieve this need effectively. Installation and port of applications on the vast array of platforms is quite simpler via PhoneGap.</p>
<p>A broad range of frameworks make all these requisites possible and this post consisting some top-graded frameworks is a perfect way to choose the best &amp; cross-platform mobile framework in the fastest manner. Let’s delve into them with thorough detail.</p>
<h2>1. Ionic</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Iconic Framework"" class=""alignnone wp-image-9698 size-large"" height=""377"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/165/Iconic-Framework-940x537.png"" srcset="""" width=""660""/></a></p>
<p>Ionic, a dependable framework is a perfect choice for those, who are highly concerned with the overall performance of app. Built with SAS, this dependable HTML5 powered mobile framework is integrated with a myriad of UI components to create user-friendly apps in an effective manner.</p>
<p>Focusing on performance, it never demands third-party JS library and works seamlessly with Angular.js to give breath to the interactive apps. Having a well-crafted set of font icons and reusable HTML classes, it is popularly used to build the outstanding mobile UI.</p>
<h2>2. Ratchet</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Ratchet HTML Framework"" class=""alignnone size-large wp-image-9699"" height=""374"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/165/Ratchet-HTML-Framework-940x532.png"" srcset="""" width=""660""/></a></p>
<p>Being a prominent framework, Ratchet comprises the bundle of UI components, reusable HTML classes and JS plugins to get the developers started working for simple mobile application creation. It came into highlight by Twitter to develop engaging app prototype. Initially used like an internal tool, Ratchet was publicly released in the form of open source project.</p>
<p>The version 2.0 of this framework is packed with proprietary collection of font icon named Ratcheticon as well as 2 pre-defined UI themes suitable for Android and iOS platforms.</p>
<h2>3. jQuery Mobile</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""jQueery Framework"" class=""alignnone size-large wp-image-9700"" height=""377"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/165/jQueery-Framework-940x537.png"" srcset="""" width=""660""/></a></p>
<p>It is a robust and touch-optimized framework built with HTML5 to create cross-platform mobile apps. This exclusively reliable source caters incredible experience with stunning support for almost all the platforms. It owns a handy assortment of remarkable user interfaces optimized acutely to fulfill varied needs regarding mobile devices.</p>
<h2>4. Lungo</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Lungo Framework"" class=""alignnone size-large wp-image-9701"" height=""377"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/165/Lungo-Framework-940x537.png"" srcset="""" width=""660""/></a></p>
<p>This lightweight framework is quite robust and aesthetically crafted with default styles. Based on programming languages called HTML, CSS, &amp; JavaScript, Lungo supports Blackberry, iOS, Firefox OS, and Android platforms. It brings with exceptional events such as double-tap, swipe &amp; tap. Beside this, you can take advantage from its numerous JavaScript API that are helpful to control app functioning.</p>
<h2>5. Sencha Touch</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Sencha Touch Framework"" class=""alignnone size-large wp-image-9705"" height=""345"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/165/Sencha-Touch-Framework-940x491.png"" srcset="""" width=""660""/></a></p>
<p>Another well-noted framework, Sencha Touch is powered by CSS3 &amp; HTML5 that makes it the exceptionally reliable framework to develop feature-rich mobile apps. Surrounded with a broad range of animations, components and APIs, this framework provides an ability to perform it on multiple popular mobile platforms and browsers without any obstacle. In addition, it is compatible with PhoneGap &amp; Cordova that allow you to compile the desired application and then submit successfully to the App Stores of respective platform. Gaining strength to build hybrid apps, this framework is easy-to-use packed with multifarious components for eye-catching app creation. It also offers a wide number of themes that have the ability to render look and feel of your app just like native.</p>
<h2>6. Jo Mobile</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""JO Mobile HTML5 Framework"" class=""alignnone size-medium wp-image-9702"" height=""415"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/165/JO-Mobile-HTML5-Framework-620x415.png"" srcset="""" width=""620""/></a></p>
<p>Jo provides compatibility with different mobile platforms such as Chrome &amp; Tizen OS and brings a starter which has been built aesthetically with CSS3. It caters an ease to the web developers with pleasurable experience in order to grab and get started with the styling of their mobile apps. You can use it furthermore either with Cordova or PhoneGap to make your app accessible on all mobile platforms.</p>
<h2>7. Kendo UI</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""KendoUI HTML5 Framework"" class=""alignnone size-large wp-image-9703"" height=""376"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/165/KendoUI-HTML5-Framework-940x536.png"" srcset="""" width=""660""/></a></p>
<p>Kendo UI framework holds almost everything that is essential to create web and mobile apps powered by JavaScript &amp; HTML5. It is featured with more than 70 jQuery rooted UI widgets, offline data solutions, AngularJS integration, Bootstrap support, mobile controls, etc. All these are the strength of this mobile app framework that brings it in the list of 10 top-notch &amp; cross-platform frameworks.</p>
<h2>7. Cordova</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Apache Codova Famework"" class=""alignnone wp-image-9704 size-large"" height=""376"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/165/Apache-Codova-Famework-940x536.png"" srcset="""" width=""660""/></a></p>
<p>Apache Cordova is packed with a cluster of device APIs and helpful for the app developers to access any native function like accelerometer or camera through JavaScript. Frameworks (jQuery Mobile, Sencha Touch and Dojo Mobile) lauded it as an ideal solution for the mobile app professionals to develop the smartphone app using CSS, HTML &amp; JavaScript.</p>
<h2>8. us Framework</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Famous JavaScript Engine"" class=""alignnone size-large wp-image-9706"" height=""378"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/165/Famous-JavaScript-Engine-940x539.png"" srcset="""" width=""660""/></a></p>
<p>This new but powerful mobile framework guarantees to get rid of issues related to HTML5 performance that we usually experience while using the mobile apps on the mobile devices. Through lightweight JS engine, which is just 64k, it handles performance issues thoroughly. Features comprised in Famo.us look like Sencha and Phonegap that make it a challenging competitor in the mobile app development industry. It can also be used like beta tester by signing up in www.famo.us.</p>
<h2>9. jQT</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""jQT HTML Framework"" class=""alignnone size-large wp-image-9697"" height=""377"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/165/jQT-HTML-Framework-940x537.png"" srcset="""" width=""660""/></a></p>
<p>This Zepto plugin was originally designed &amp; developed especially for the Webkit browsers, which also offers you many features to develop customizable and extensible mobile apps. Theme presented in jQT framework enables you to perform alteration via 3D transition and SAAS/Compass. Developers may also extend it with required functionality to get optimal outcome.</p>
<h2>Final Words!</h2>
<p>We end up this collection here with 10 topmost frameworks that are approached globally by the developers for building mobile apps based on CSS, JavaScript, and HTML programming languages. Choose any one suitable to your specifications from the list and create the desired mobile apps.</p>
",0,"standard","post"
"How to validate user Gravatar for specific email id","how-to-validate-user-gravatar-for-specific-email-id","The following PHP snippet can be used to determine if Gravatar is available for specified email. It returns TRUE for valid gravatar otherwise it returns false.
","LIVE","<p>Gravatar is one of the most common service used widely on WordPress blogging platform. Gravatar is used for providing globally unique avatar for a specific email. During advance WordPress development, you may want to check if Gravatar is available for a users email, to display image or avatar from alternative source.</p>
<p>The following PHP snippet can be used to determine if Gravatar is available for specified email. It returns TRUE for valid gravatar otherwise it returns false.</p>
<pre class=""prettyprint lang-php"">function validateGravatar($email) {
	$hash = md5(strtolower(trim($email)));
	$uri = 'http://www.gravatar.com/avatar/' . $hash . '?d=404';
	$headers = @get_headers($uri);
	if (!preg_match(""|200|"", $headers[0])) {
		$has_valid_avatar = FALSE;
	} else {
		$has_valid_avatar = TRUE;
	}
	return $has_valid_avatar;
}
</pre>
",0,"standard","post"
"How to filter posts from WordPress home page archive","how-to-filter-posts-from-wordpress-home-page-archive","Add the following snippet to your WordPress theme functions.php file to exclude the posts from selected category to appear on Wordpress home page archive.
","LIVE","<p>The landing page of most of the news or personal blogging sites usually display the recent posts achieve of the blog unless the front page is set to a static html page. Your blog might have many different categories, but could be annoying to users who just want to show the recent posts from specific categories to appear on home page recent posts. The following code snippet will help you to do that.</p>
<p>Add the following snippet to your WordPress theme <code>functions.php</code> file to exclude the posts from selected category to appear on WordPress home page archive.</p>
<pre class=""prettyprint lang-php"">//filter homepage categories
add_action('pre_get_posts', 'ad_filter_categories');
function ad_filter_categories($query) {
    if ($query-&gt;is_main_query() &amp;&amp; is_home()) {
        $query-&gt;set('category_name','slug1, slug2, slug3');
    }
}
</pre>
",0,"standard","post"
"Custom Calendar View Library in Android","custom-calendar-view-library-in-android","The CustomCalendarView provides an easy and customizable option to create a Calendar. It displays the days of a month in a grid layout and allows navigating between months.","LIVE","<p>The <strong>CustomCalendarView</strong> is an open source library that provides ability to create a calendar view in Android. It displays the days of a month in a grid layout and allows navigating between months and is <span>highly customizable.</span></p>
<h2><span id=""1_Custom_Calendar_View_Features"">Custom Calendar View Features</span></h2>
<p>Currently it allows the following features:</p>
<ul>
<li>Next and previous month navigation</li>
<li>Allow various customization including background color for day, week and title</li>
<li>Set custom typeface using setCustomTypeFace() method.</li>
<li>Show hide next previous month overflow days</li>
<li>Set custom day options for start day of week. By default it is set to <code>Calendar.SUNDAY</code></li>
<li>Unlimited customizations for day of the month using custom Decorators.</li>
<li>Allow you to handle event when user changes month and day selection.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Custom Calendar View Android"" class=""alignnone size-full wp-image-9664"" height=""514"" loading=""lazy"" sizes=""(max-width: 963px) 100vw, 963px"" src=""/media/uploads/articles/168/Custom-Calendar-View-Android.png"" srcset="""" width=""963""/></a></p>
<h2><span id=""2_Library_Compatibility"">Library Compatibility</span></h2>
<p>This library is compatible from API 14.</p>
<h2><span id=""3_AddCustomCalendarView_Library"">Add CustomCalendarView Library</span></h2>
<p>To use the <strong>CustomCalendarView </strong>in your application, you first need to add the library to your application. You can do this by either from Gradle, Maven or by directly downloading the source code form <a href=""https://github.com/npanigrahy/Custom-Calendar-View"" rel=""nofollow noopener noreferrer"" target=""_blank"">GitHub</a>.</p>
<h4><span id=""Gradle"">Gradle</span></h4>
<p class=""p1""><span class=""s1""><b>Step 1.</b> Add the JitPack repository to your build file</span></p>
<p>Step-1 Add it in your build.gradle at the end of repositories:</p>
<pre class=""prettyprint lang-java"">repositories {
    maven { url ""https://jitpack.io"" }
}</pre>
<p>Step-2 Add the dependency in the form</p>
<pre class=""prettyprint lang-java"">dependencies {
    compile 'com.github.npanigrahy:Custom-Calendar-View:v1.1'
}</pre>
<h4><span id=""Maven"">Maven</span></h4>
<pre class=""prettyprint lang-xml"">&lt;repository&gt;
     &lt;id&gt;jitpack.io&lt;/id&gt;
     &lt;url&gt;https://jitpack.io&lt;/url&gt;
&lt;/repository&gt;
</pre>
<p>Step 2. Add the dependency in the form</p>
<pre class=""prettyprint lang-xml"">&lt;dependency&gt;
     &lt;groupId&gt;com.github.npanigrahy&lt;/groupId&gt;
     &lt;artifactId&gt;Custom-Calendar-View&lt;/artifactId&gt;
     &lt;version&gt;v1.1&lt;/version&gt;
&lt;/dependency&gt;
</pre>
<h4><span id=""Sbt"">Sbt</span></h4>
<p>Step-1 Add it in your build.sbt at the end of resolvers:</p>
<pre class=""prettyprint lang-java"">resolvers += ""jitpack"" at ""https://jitpack.io""</pre>
<p>Step-2 Add the dependency in the form</p>
<pre class=""prettyprint lang-java"">libraryDependencies += ""com.github.npanigrahy"" % ""Custom-Calendar-View"" % ""v1.1""</pre>
<h2><span id=""4_UsingCustomCalendarView_Library"">Using CustomCalendarView Library</span></h2>
<p>The GitHub project source includes a sample application, that is used for demonstrating the various features currently supported by this library. Once the library is added to your project, you can include the CustomCalendarView into your activity/fragment layout using the following code snippets.</p>
<pre class=""prettyprint lang-xml"">&lt;com.stacktips.view.CustomCalendarView
	android:id=""@+id/calendar_view""
	android:layout_width=""match_parent""
	android:layout_height=""wrap_content""
	android:background=""@color/off_white""&gt;
&lt;/com.stacktips.view.CustomCalendarView&gt;
</pre>
<p>The above code snippet will show the simple Calendar View with default design. Now, you can use the following attributes, to customize the appearance of calendar.</p>
<pre class=""prettyprint lang-xml"">&lt;com.stacktips.view.CustomCalendarView
	android:id=""@+id/calendar_view""
	android:layout_width=""match_parent""
	android:layout_height=""wrap_content""
	android:background=""@color/off_white""
	app:calendarBackgroundColor=""@color/off_white""
	app:calendarTitleTextColor=""@color/black""
	app:currentDayOfMonthColor=""@color/blue""
	app:dayOfMonthTextColor=""@color/black""
	app:dayOfWeekTextColor=""@color/black""
	app:disabledDayBackgroundColor=""@color/off_white""
	app:disabledDayTextColor=""@color/grey""
	app:selectedDayBackgroundColor=""@color/blue""
	app:titleLayoutBackgroundColor=""@color/white""
	app:weekLayoutBackgroundColor=""@color/white""&gt;
&lt;/com.stacktips.view.CustomCalendarView&gt;
</pre>
<p>Let us now, initialize the calendar view to control the various other appearance and behavior of calendar using the following methods.</p>
<pre class=""prettyprint lang-java"">//Initialize CustomCalendarView from layout
calendarView = (CustomCalendarView) findViewById(R.id.calendar_view);

//Initialize calendar with date
Calendar currentCalendar = Calendar.getInstance(Locale.getDefault());

//Show Monday as first date of week
calendarView.setFirstDayOfWeek(Calendar.MONDAY);

//Show/hide overflow days of a month
calendarView.setShowOverflowDate(false);

//call refreshCalendar to update calendar the view
calendarView.refreshCalendar(currentCalendar);

//Handling custom calendar events
calendarView.setCalendarListener(new CalendarListener() {
    @Override
    public void onDateSelected(Date date) {
        SimpleDateFormat df = new SimpleDateFormat(""dd-MM-yyyy"");
        Toast.makeText(MainActivity.this, df.format(date), Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onMonthChanged(Date date) {
        SimpleDateFormat df = new SimpleDateFormat(""MM-yyyy"");
        Toast.makeText(MainActivity.this, df.format(date), Toast.LENGTH_SHORT).show();
    }
});
</pre>
<h2><span id=""5_Using_Custom_TypeFace"">Using Custom TypeFace</span></h2>
<pre class=""prettyprint lang-java"">//Setting custom font
final Typeface typeface = Typeface.createFromAsset(getAssets(), ""fonts/Arch_Rival_Bold.ttf"");
if (null != typeface) {
    calendarView.setCustomTypeface(typeface);
    calendarView.refreshCalendar(currentCalendar);
}
</pre>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Custom Calendar View Library in Android Custom Font"" class=""alignnone size-thumbnail wp-image-9652"" height=""507"" loading=""lazy"" src=""/media/uploads/articles/168/Custom-Calendar-View-Library-in-Android-Custom-Font-300x507.png"" srcset="""" width=""300""/></a></p>
<h2><span id=""6_Using_Day_Decorators"">Using Day Decorators</span></h2>
<p><strong>Example2:</strong> How to Disable Past Dates in CustomCalendarView <a href=""/articles/disable-past-dates-in-custom-calendar-view-android"">using Decorators</a>.</p>
<pre class=""prettyprint lang-java"">//adding calendar day decorators
List decorators = new ArrayList&lt;&gt;();
decorators.add(new ColorDecorator());
calendarView.setDecorators(decorators);
calendarView.refreshCalendar(currentCalendar);
</pre>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Custom Calendar View Library in Android Decorator"" class=""alignnone wp-image-9653 size-thumbnail"" height=""507"" loading=""lazy"" src=""/media/uploads/articles/168/Custom-Calendar-View-Library-in-Android-Decorator-300x507.png"" srcset="""" width=""300""/></a></p>
<p><em>If you enjoy this library, don’t forget to like our <a href=""http://facebook.com/stacktips"" rel=""nofollow noopener noreferrer"" target=""_blank"">Facebook</a> page or follow us on twitter <a href=""http://twitter.com/stacktips"" rel=""nofollow noopener noreferrer"" target=""_blank"">@Stacktips</a>.</em></p>",0,"standard","post"
"Android Wear Now Officially Adds Support to iPhone Devices","android-wear-now-officially-adds-support-to-iphone-devices","Google has officially announced that Android Wear devices will soon be compatible with iOS devices..
","LIVE","<p>For most iPhone users it was never been affordable to buy a Apple Watch. For those users, Google brings a good news. Google has officially announced that Android Wear devices will soon be compatible with iOS devices.</p>
<p>Android Wear can now work with the iPhone 5, 5s, 6, or 6 Plus running iOS 8.2 or higher. With a compatible Android Wear watch, iOS device users can receive notifications and access to Google Now cards, use the Google fit to track fitness and more.</p>
<p>Currently the Android wear for iOS works with LG Urbane watch. However, Google announced that all future Android Wear watches, such as the upcoming Huawei Watch, second-generation Motorola Moto 360 and the ASUS ZenWatch 2 will come with iOS support out of the box.</p>
",0,"standard","post"
"Google Play Services 8.1 Update Brings Support for Android Pay","google-play-services-8-1-update-brings-support-for-android-pay","The Google Play Services version 8.1 update brings the Android Pay support for Android Pay. Those who have&hellip;
","LIVE","<p>The Google Play Services version 8.1 update brings the Android Pay support for Android Pay. Those who have updated the application noticed that there is a new option under the “Tap and pay” option, which allow the users to choose between the Android Pay and Google Wallet. According to some recent rumors, many people think using Android pay they can use the contact-less payment service, which is true.</p>
<p>However, this feature has not been enabled by Google, which means that you can’t use the Android Pay yet. In case you’ve selected the Android Pay option for payment, then you’ve noticed that there is no application for this service and when you’ve returned to the Settings app, the Android Pay was gone.</p>
<h2>Android Pay: What Is This?</h2>
<p>In case you didn’t hear yet about Google’s upcoming Android Pay yet, then you’re a bit behind with the news. The Android Pay feature is the new NFC payments solution that Google will come with. It was firstly announced during the Google I/O 2015 event and according to Google, it will allow you to pay for everything by simply tapping your phone on the POS system.</p>
<h2>Google Wallet</h2>
<p>Google Wallet allows you to do this, but it was a bit different. For example, Android Pay is not another application and instead its functionality was built into the Android OS. The Android Pay feature supports fingerprint readers and other security measures.</p>
<h2>Android Pay</h2>
<p>Android pay is Google’s answer to Apple Pay, which is live and kicking for a few months already. The Android Pay feature is going to be released soon for Android devices and once it will be available, we’re pretty sure that the mobile device owners that have the NFC feature, will ditch the Google Wallet for the new payment service.</p>
",0,"standard","post"
"Samsung Devices That Will Receive Android 6.0 Marshmallow Update","samsung-devices-that-will-receive-android-6-0-marshmallow-update","Android 6.0 Marshmallow developer version is released and the official version for user is expected during mid September&hellip;
","LIVE","<p>Android 6.0 Marshmallow developer version is released and the official version for user is expected during mid September 2015. As usual it will first be released to the Google Nexus devices and later the update will be available to other flagship devices over OTA.</p>
<p>Samsung is committed to improve the update time to keep is as short as possible. Last Android update was delivered 3 months after the Android 5.0 Lollipop official release. This time we hope it will even come down and users will get the taste of Marshmallow sooner.</p>
<p>Now, a list has been leaked which shows all possible Samsung Galaxy devices that will be getting a taste of Android 6.0 Marshmallow, of course with Samsung’s TouchWiz skin on top. The first Samsung phones that will be updated to Android 6.0 are obviously the Samsung Galaxy S6 and S6 Edge, Note 5 and S6 Edge+ since they are all Samsung’s current flagship phones.</p>
<p>Other devices that make the list include the Galaxy Note 4, Note 4 Duos, Note Edge, S6 Duos, Galaxy Alpha and Galaxy Tab A. The Samsung Galaxy S5 does not make the list, but there is a high chance that the old flagship will also get Android 6.0, since there is no reason from Samsung not to do so. It has the capable hardware to run Android 6.0 Marshmallow, since the difference from Android 5.0 is small.</p>
",0,"standard","post"
"How to Customize Android Keyboard Actions and Other Hacks","android-keyboard-hacks-hide-keyboard-and-customize-actions","This post explains the various code hacks used for controlling the appearance and behavior of the Android keyboard. Hacks include hide Keyboard, customize keyboard actions and setting input type.
","LIVE","<p>Most of the form-based applications often need to customize the default behavior of the Android soft keyboard.  Often it is required to control the type of keyboard you want to present the user for data input, or customize the appearance of keyboard <strong>“Enter”</strong> key action.</p>
<p>Over the course of this tutorial, we will explain the various code hacks used to control the appearance and behavior of Android soft keyboard. This tutorial covers the following topics:</p>

<p>Let us first began with controlling the type keyboard to display while editing the form data.</p>
<h2><span id=""Set_TextView_input_type"">Set TextView input type</span></h2>
<p>There are different types of keyboard designed for user convenience. For example, if for entering a number you must display the numerical keyboard. This can be controlled by <code>InputType</code> property of <code>TextView</code>. The InputType controls aspects such as the type of data allowed to enter in a text field. Generally, you can select a single value, though some can be combined together as indicated.</p>
<p>It is important to note that, setting <code>InputType</code> property attribute to anything besides <code>none</code> implies that the text is editable.</p>
<p>Some of the most used input type constants includes, <code>none</code>, <code>text</code>, <code>textCapCharacters</code>, <code>textCapWords</code>, <code>textCapSentences</code>, <code>textAutoCorrect</code>, <code>textAutoComplete</code>, <code>textMultiLine</code>, <code>textImeMultiLine</code>, <code>textUri</code>, <code>textEmailAddress</code>, <code>textPassword</code>, <code>textWebEditText</code>, <code>textPhonetic</code>, <code>textWebEmailAddress</code>, <code>number</code>, <code>phone</code>, <code>datetime</code>, <code>date</code>, and <code>time</code>.</p>
<p>You can set the inputType property in the layout declaration as follows:</p>
<pre class=""prettyprint lang-xml"">&lt;EditText
   android:id=""@+id/text1""
   android:layout_width=""fill_parent""
   android:layout_height=""wrap_content""
   android:imeOptions=""actionSearch""
   android:singleLine=""true""
   android:inputType=""number"" /&gt;
</pre>
<h2><span id=""Hide_the_soft_keyboard"">Hide the soft keyboard</span></h2>
<p>The following code snippet will help you to hide or dismiss the soft keyboard from the screen and take the input focus out form the editable view.</p>
<pre class=""prettyprint lang-java"">InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
</pre>
<p>The <code>hideSoftInputFromWindow()</code> takes an <code>IBinder</code>  window token as a parameter. This can be retrieved from any View object currently attached to the window via <code>View.getWindowToken()</code>.</p>
<h2><span id=""Customize_the_input_method"">Customize the input method</span></h2>
<p>Now that we understand the different keyboard types based on the TextView <code>inputType</code> property let us customize the appearance of keyboard <strong>“Enter”</strong> action.</p>
<p>When the keyboard is visible on screen, the text on the Enter key typically indicates its action based on the order of focusable items in the view. While unspecified, the keyboard by default display a <strong>“Next”</strong> action if there are more focusable views to move to, otherwise it shows <strong>“Done”</strong> action if the last item is currently focused on. In the case of a multiline field, this action is a line return.</p>
<p>This can be customized using <code>android:imeOptions</code> value in the TextView XML declaration. The <code>android:imeOptions</code> attribute access the following possible values:</p>
<ul>
<li><strong>actionUnspecified: </strong>This property displays action of the device’s choice  Action event is IME_NULL. This is the default keyboard action.</li>
<li><strong>actionGo:</strong> This displays Go as the Enter key.  Action event is <strong>IME_ACTION_GO</strong></li>
<li><strong>actionSearch:</strong> Displays a search icon as the Enter key  Action event is <strong>IME_ACTION_SEARCH</strong></li>
<li><strong>actionSend:</strong> Displays Send as the Enter key. Action event is <strong>IME_ACTION_SEND</strong></li>
<li><strong>actionNext:</strong> Displays Next as the Enter key. Action event is <strong>IME_ACTION_NEXT</strong></li>
<li><strong>actionDone:</strong> Displays Done as the Enter key. Action event is <strong>IME_ACTION_DONE</strong></li>
</ul>
<p>All the above set of action event constants are defined in <code>EditorInfo</code> class.</p>
<p>Let us look at the following example layout with two editable text fields. The first EditText will display the search icon for the Enter key, and the second will display Go. The resulting output may vary depending on current keyboard installed on the device.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical""&gt;

    &lt;EditText
        android:id=""@+id/text1""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:imeOptions=""actionSearch""
        android:singleLine=""true"" /&gt;

    &lt;EditText
        android:id=""@+id/text2""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:imeOptions=""actionGo""
        android:singleLine=""true"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<p>Note that, the custom editor options apply only to the appearance of soft input methods. Changing this value will not affect the events that get generated when the user presses on a physical hardware keyboard button.</p>
<h2><span id=""Adding_Custom_Action"">Adding Custom Action</span></h2>
<p>Customizing what happens when the user presses the <strong>Enter</strong> key can be just as important as adjusting its appearance. For overriding the default behavior we need to attach an <code>OnEditorActionListener</code> to <code>EditText</code> instance.</p>
<p>The following code snippet shows how to create a custom action for EditTexts.</p>
<pre class=""prettyprint lang-java"">public class MainActivity extends Activity implements OnEditorActionListener {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //Add the listener to the views
        EditText editText1 = (EditText) findViewById(R.id.text1);
        editText1.setOnEditorActionListener(this);

        EditText editText2 = (EditText) findViewById(R.id.text2);
        editText2.setOnEditorActionListener(this);
    }

    @Override
    public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
        if (actionId == EditorInfo.IME_ACTION_SEARCH) {
            //Handle search key click
            return true;
        }
        if (actionId == EditorInfo.IME_ACTION_GO) {
            //Handle go key click
            return true;
        }
        return false;
    }
}
</pre>
<p>The boolean return value of <code>onEditorAction()</code> tells the system whether you are consuming the event or it should be passed on to the next possible responder if any. It is important for you to return true when you handle the event yourself, so no other processing occurs. You can return false when you are not handling the event so your application does not steal key events from the rest of the system.<br/>
Welcome to EditPad.org – your online plain text editor. Enter or paste your text here. To download and save it, click on the button below.<br/>
2</p>
<p> more » Edit Pad – Free Online Text EditorEdit Pad © 2018</p>
",0,"standard","post"
"How to Get Device Information in Android","how-to-get-device-information-in-android","The following code snippet will get the device detailed information in Android.
","LIVE","<p>The following code snippet will get the device detailed information in Android.</p>
<pre class=""prettyprint lang-java"">public class DashboardActivity extends Activity { 

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        String  details =  ""VERSION.RELEASE : ""+Build.VERSION.RELEASE
            +""nVERSION.INCREMENTAL : ""+Build.VERSION.INCREMENTAL
            +""nVERSION.SDK.NUMBER : ""+Build.VERSION.SDK_INT
            +""nBOARD : ""+Build.BOARD
            +""nBOOTLOADER : ""+Build.BOOTLOADER
            +""nBRAND : ""+Build.BRAND
            +""nCPU_ABI : ""+Build.CPU_ABI
            +""nCPU_ABI2 : ""+Build.CPU_ABI2
            +""nDISPLAY : ""+Build.DISPLAY
            +""nFINGERPRINT : ""+Build.FINGERPRINT
            +""nHARDWARE : ""+Build.HARDWARE
            +""nHOST : ""+Build.HOST
            +""nID : ""+Build.ID
            +""nMANUFACTURER : ""+Build.MANUFACTURER
            +""nMODEL : ""+Build.MODEL
            +""nPRODUCT : ""+Build.PRODUCT
            +""nSERIAL : ""+Build.SERIAL
            +""nTAGS : ""+Build.TAGS
            +""nTIME : ""+Build.TIME
            +""nTYPE : ""+Build.TYPE
            +""nUNKNOWN : ""+Build.UNKNOWN
            +""nUSER : ""+Build.USER;

           TextView textView = new TextView();

           textView.setText(details);
           setContentView(textView);
        }
}

</pre>
",0,"standard","post"
"How to Create Custom Layout in Android by Extending ViewGroup Class","how-to-create-custom-layout-in-android-by-extending-viewgroup-class","A ViewGroup in Android a special view that can contain other Views. A ViewGroup can contain one or multiple child.This post will help you to deal with creating a custom Layout manager class TagLayout that will be used to display the list of tags as shown in the following screenshot.","LIVE","<h2><span id=""1_Introduction_to_ViewGroup"">Introduction to ViewGroup</span></h2>
<p>A <code>ViewGroup</code> in Android a special view that can contain other Views. A ViewGroup can contain one or multiple child. All other standard layout managers such as <a href=""http://stacktips.com/android/android-linearlayout-example"">LinearLayout</a>, <a href=""http://stacktips.com/android/android-framelayout-example"">FrameLayout</a>, <a href=""http://stacktips.com/android/android-relativelayout-example"">RelativeLayout</a> are specialized sub classes of ViewGroup class that layout their child in specific format. For example, LinearLayout layout its child one adjacent to other either vertically or horizontally.</p>
<p>Sometimes, due to the specific nature of the requirement, the standard layout managers are not enough. You need to extend the ViewGroup class to create your own custom layout manager.</p>
<p>This post will help you to deal with creating a custom Layout manager class TagLayout that will be used to display the list of tags as shown in the following screenshot.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Create Custom Layout in Android by Extending ViewGroup Class"" class=""alignnone wp-image-9552 size-thumbnail"" height=""533"" loading=""lazy"" src=""/media/uploads/articles/174/Create-Custom-Layout-in-Android-by-Extending-ViewGroup-Class-300x533.png"" srcset="""" width=""300""></a></p>
<p>You have to perform the following steps while creating a custom Layout manager.</p>
<ol>
<li>Extend your class from <code>ViewGroup</code> class.</li>
<li>You must override the <code>onLayout()</code> method. This method is used to place child views.</li>
<li>Override <code>onMeasure()</code> method. The onMeasure() method will be used to for parent to determine the size of the view group based on calculating the child view size.</li>
<li>The onMeasure() and onLayout() method, will contain the logic to organize the child views with in parent layout.</li>
</ol>
<p>You can measure each of the child view height and width by calling <code>getMeasuredWidth()</code> and <code>getMeasuredHeight()</code> methods.</p>
<h2><span id=""2_Creating_Custom_ViewGroup"">Creating Custom ViewGroup</span></h2>
<pre class=""prettyprint lang-java"">public class TagLayout extends ViewGroup {
    int deviceWidth;

    public TagLayout(Context context) {
        this(context, null, 0);
    }

    public TagLayout(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public TagLayout(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init(context);
    }

    private void init(Context context) {
        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
        Point deviceDisplay = new Point();
        display.getSize(deviceDisplay);
        deviceWidth = deviceDisplay.x;
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        final int count = getChildCount();
        int curWidth, curHeight, curLeft, curTop, maxHeight;

        //get the available size of child view
        final int childLeft = this.getPaddingLeft();
        final int childTop = this.getPaddingTop();
        final int childRight = this.getMeasuredWidth() - this.getPaddingRight();
        final int childBottom = this.getMeasuredHeight() - this.getPaddingBottom();
        final int childWidth = childRight - childLeft;
        final int childHeight = childBottom - childTop;

        maxHeight = 0;
        curLeft = childLeft;
        curTop = childTop;

        for (int i = 0; i &lt; count; i++) {
            View child = getChildAt(i);

            if (child.getVisibility() == GONE)
                return;

            //Get the maximum size of the child
            child.measure(MeasureSpec.makeMeasureSpec(childWidth, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.AT_MOST));
            curWidth = child.getMeasuredWidth();
            curHeight = child.getMeasuredHeight();
            //wrap is reach to the end
            if (curLeft + curWidth &gt;= childRight) {
                curLeft = childLeft;
                curTop += maxHeight;
                maxHeight = 0;
            }
            //do the layout
            child.layout(curLeft, curTop, curLeft + curWidth, curTop + curHeight);
            //store the max height
            if (maxHeight &lt; curHeight)
                maxHeight = curHeight;
            curLeft += curWidth;
        }
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int count = getChildCount();
        // Measurement will ultimately be computing these values.
        int maxHeight = 0;
        int maxWidth = 0;
        int childState = 0;
        int mLeftWidth = 0;
        int rowCount = 0;

        // Iterate through all children, measuring them and computing our dimensions
        // from their size.
        for (int i = 0; i &lt; count; i++) {
            final View child = getChildAt(i);

            if (child.getVisibility() == GONE)
                continue;

            // Measure the child.
            measureChild(child, widthMeasureSpec, heightMeasureSpec);
            maxWidth += Math.max(maxWidth, child.getMeasuredWidth());
            mLeftWidth += child.getMeasuredWidth();

            if ((mLeftWidth / deviceWidth) &gt; rowCount) {
                maxHeight += child.getMeasuredHeight();
                rowCount++;
            } else {
                maxHeight = Math.max(maxHeight, child.getMeasuredHeight());
            }
            childState = combineMeasuredStates(childState, child.getMeasuredState());
        }

        // Check against our minimum height and width
        maxHeight = Math.max(maxHeight, getSuggestedMinimumHeight());
        maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());

        // Report our final dimensions.
        setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),
                resolveSizeAndState(maxHeight, heightMeasureSpec, childState &lt;&lt; MEASURED_HEIGHT_STATE_SHIFT));
    }
}
</pre>
<h2><span id=""3_Add_Custom_ViewGroup_on_Activity_Layout"">Add Custom ViewGroup to Activity Layout</span></h2>
<p>Now that we are ready with the view group, let us add it to the activity layout.</p>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""&gt;

    &lt;com.javatechig.taglayout.TagLayout
        android:id=""@+id/tagLayout""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:background=""#ffff00""/&gt;

&lt;/RelativeLayout&gt;
</pre>
<h2><span id=""4_Define_Child_View_Layout"">Define Child View Layout</span></h2>
<p>You may have notice from the layout above, we will create custom layout for view group child. In this case the tag item.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""wrap_content""
    android:layout_height=""wrap_content""&gt;

    &lt;TextView
        android:id=""@+id/tagTextView""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_margin=""5dp""
        android:background=""#a000""
        android:padding=""10dp""
        android:textColor=""#fff"" /&gt;

&lt;/LinearLayout&gt;
</pre>
<h2><span id=""5_Adding_Child_View_to_Custom_ViewGroup"">Adding Child View to Custom ViewGroup</span></h2>
<p>Here is what it goes in my activity. For the sake of simplicity, I am inflating 20 child views from inside for loop. You may have some complex logic to get the data from some other source.</p>
<pre class=""prettyprint lang-java"">import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        TagLayout tagLayout = (TagLayout) findViewById(R.id.tagLayout);
        LayoutInflater layoutInflater = getLayoutInflater();
        String tag;
        for (int i = 0; i &lt;= 20; i++) {
            tag = ""#tag"" + i;
            View tagView = layoutInflater.inflate(R.layout.tag_layout, null, false);

            TextView tagTextView = (TextView) tagView.findViewById(R.id.tagTextView);
            tagTextView.setText(tag);
            tagLayout.addView(tagView);
        }
    }
}
</pre>https://github.com/javatechig/TagLayout-ViewGroup",0,"standard","post"
"How to Monitor TextView Changes in Android","how-to-monitor-textview-changes-in-android","In this tutorial we will see how to monitor the text changes in Android TextView or EditText. Some form based applications needs to continuously monitor for the text changes to perform the front end form validations. This can be achieved by implementing the android.text.TextWatcher interface.
","LIVE","<p>In this tutorial, we will see how to monitor the text changes in Android TextView or EditText.</p>
<p>Some form based applications needs to continuously monitor for the text changes to perform the front end form validations. This can be achieved by implementing the <code>android.text.TextWatcher</code> interface. The TextWatcher interface provides the following three callback methods, that are called while the textview is being updated.</p>
<pre class=""prettyprint lang-java"">public void beforeTextChanged(CharSequence s, int start, int count, int after);
public void onTextChanged(CharSequence s, int start, int before, int count);
public void afterTextChanged(Editable s);
</pre>
<p>The <code>beforeTextChanged()</code> and <code>onTextChanged()</code> methods are provided mainly as notifications, as shouldn’t make changes to the CharSequence in either of these methods. If you are attempting to intercept the text entered into the view, changes may be made when <code>afterTextChanged()</code> is called.</p>
<p>First, you need to register a TextWatcher instance with a TextView, call the <code>textView.addTextChangedListener()</code> method. Notice from the syntax that more than one TextWatcher can be registered with a TextView. Now that we understand the methods to be used, let us examine the sample for the usage.</p>
<h5>Count Characters on TextView Changes</h5>
<p>A simple use of TextWatcher is to create a live character counter that follows an EditText as the user types or deletes information.</p>
<pre class=""prettyprint lang-java"">public class MyActivity extends Activity implements TextWatcher {
	private EditText text;
	private int textCount;
	private static final String TAG = ""MyActivity"";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		//Create an EditText widget and add the watcher
		editText = new EditText(this);
		editText.addTextChangedListener(this);
		setContentView(editText);
	}

	/* TextWatcher Implementation Methods */
	@Override
	public void beforeTextChanged(CharSequence s, int start, int count, int after) {
	    
	}

	@Override
	public void onTextChanged(CharSequence s, int start, int before, int count) {
		textCount = editText.getText().length();
		setTitle(String.valueOf(textCount));
		Log.e(TAG, String.valueOf(textCount))
	}

	@Override
	public void afterTextChanged(Editable s) {
	    
	}
}
</pre>
<p>Because our needs do not include modifying the text being inserted, we can read the count from <code>onTextChanged()</code>, which happens as soon as the text change occurs. The other methods are unused and left empty.</p>
",0,"standard","post"
"How to create a background service in Android","how-to-create-a-background-service-in-android","To create a background service, first you need to add the service into your manifest file.  Then, create a class that extends service.  Finally, in your activity start the service.
","LIVE","<p>To create a background service, first you need to add the service into your manifest file.  Then, create a class that extends service.  Finally, in your activity start the service.</p>
<p>1. First add the following service declaration in your application manifest file.</p>
<pre class=""prettyprint lang-xml"">&lt;service android:enabled=""true"" android:name="".MyService""&gt;
&lt;/service&gt;
</pre>
<p>2. Create a new class MyService that extends Service class.</p>
<pre class=""prettyprint lang-java"">public class MyService extends Service {
  @Override
  public void onCreate() {
  }
 
  @Override
  public void onStart(Intent intent, int startId) {
    //do something
  }
 
  @Override
  public IBinder onBind(Intent intent) {
    return null;
  }
}
</pre>
<p>3. To start the service and stop the service:</p>
<pre class=""prettyprint lang-java""> 
public class MyActivity extends Activity {
  @Override
  public void onCreate() {
    …
    startService(new Intent(this, MyService.class);
  }
 
  @Override
  public void onStop() {
    …
    stopService(new Intent(this, MyService.class));
  }
}</pre>
",0,"standard","post"
"How to access accelerometer in Android","how-to-access-accelerometer-in-android","The following code snippet will help you with the basic understanding of how to set up the Android accelerometer and get values from it. To use the accelerometer (or any sensor in general) your class should implement the SensorEventListener interface.
","LIVE","<p>The following code snippet will help you with the basic understanding of how to set up the Android accelerometer and get values from it.</p>
<p>To use the accelerometer (or any sensor in general) your class should implement the <code>SensorEventListener</code> interface, or you could do anonymous inner classes for them. To access the accelerometer you will need to get the <code>SystemManager</code> from the system and get a sensors list from that.</p>
<pre class=""prettyprint lang-java"">myManager = (SensorManager)getSystemService(Context.SENSOR_SERVICE);
// this will return a list of Sensor
sensors = myManager.getSensorList(Sensor.TYPE_ACCELEROMETER);
</pre>
<p>From the sensors list then select the first element, this should be the accelerometer sensor.<br/>
The parameter of the event listener is a SensorEvent. From this event you can access the x, y, and z values of the accelerometer and do with them what you want.</p>
<pre class=""prettyprint lang-java"">calculateSomething(event.values[0], event.values[1], event.values[2]);
</pre>
",0,"standard","post"
"How to add zoom controls to Android MapView","how-to-add-zoom-controls-to-android-mapview","The following code snippet shows how to add zoom controls to Android MapView. We can achieve this by calling setBuiltInZoomControls(boolean) method.
","LIVE","<p>The following code snippet shows how to add zoom controls to Android MapView. We can achieve this by calling <code>setBuiltInZoomControls(boolean)</code> method.</p>
<pre class=""prettyprint lang-java"">MapView map = (MapView)findViewById(R.id.mapview);
map.setBuiltInZoomControls(true);
</pre>
<p>The above code snippet will add the zoom controls to the bottom-center of the <code>MapView</code>. The zoom controls only show up when you touch the screen, so you have to make sure that the map is clickable.</p>
<pre class=""prettyprint lang-java"">&lt;com.google.android.maps.MapView
       android:layout_width=""fill_parent""
       android:layout_height=""fill_parent""
       android:id=""@+id/mapview""
       android:clickable=""true""
       android:apiKey=""your key""&gt;
&lt;/com.google.android.maps.MapView&gt;
</pre>
",0,"standard","post"
"Upload image to a web service using HttpURLConnection","upload-image-to-a-web-service-using-httpurlconnection","The following code snippet can be used to upload an image to web service in Android. After getting a Bitmap object from the camera or other source, you can compress the create an HttpURLConnection and attach the image to the request body.
","LIVE","<p>The following code snippet can be used to upload an image to web service in Android. After getting a Bitmap object from the camera or other source, you can compress the create an HttpURLConnection and attach the image to the request body.</p>
<pre class=""prettyprint lang-java"">try {
	URL url = new URL(SERVER_POST_URL);
	HttpURLConnection c = (HttpURLConnection) url.openConnection();
	c.setDoInput(true);
	c.setRequestMethod(""POST"");
	c.setDoOutput(true);
	c.connect();

	OutputStream output = c.getOutputStream();
	bitmap.compress(CompressFormat.JPEG, 50, output);
	output.close();

	Scanner result = new Scanner(c.getInputStream());
	String response = result.nextLine();
	Log.e(""ImageUploader"", ""Error uploading image: "" + response);

	result.close();
} catch (IOException e) {
		Log.e(""ImageUploader"", ""Error uploading image"", e);
}</pre>
",0,"standard","post"
"Mac OS X Window Screenshot Hacks","mac-os-x-window-screenshot-hacks","Mac OS provides an handy way of taking any window screenshot by using two commands; Command + Shift + 4 or Command + Shift + 4 + Spacebar. The following section in this post will guide you througn some of the tricks you can use for your convinience while capturing the window screenshot in Mac.
","LIVE","<p>Mac OS provides an handy way of taking any window screenshot by using two commands; <strong>Command + Shift + 4</strong> or <strong>Command + Shift + 4 + Spacebar</strong>. The fist command allows you to drag the portion of screen you willing to capture the screenshot. The Command + Shift + 4 in combination of Spacebar, captures the screenshot of complete selected window.</p>
<p>This post will guide you througn some of the tricks you can use for your convinience while capturing the window screenshot in Mac.</p>
<h2>Change Screenshot Save Location</h2>
<p>By defaly all the screenshots captured in Mac are saved as a transparent PNG file on Desktop. You can change the location to your desired folder using the following commands.</p>
<pre>$ defaults write com.apple.screencapture location /Users/Neel/Pictures/screenshots</pre>
<p>In the above command, I have selected screenshots folder inside Pictures directory. You can replace with your own desired location. For this command to take the immediately effect you need to restart the system UI by using the following commands.</p>
<pre>$ killall SystemUIServer</pre>
<h2>Remove Window Drop Shadow</h2>
<p>The Command + Shift + 4 in combination of Spacebar, captures the screenshot of complete selected window. By defauly all the window screenshots includes drop shadow beneath the window. The following screenshot depicts a screenshow taken with shadow.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Mac OS X Screenshot With Shadow"" class=""aligncenter size-full wp-image-9491"" height=""549"" loading=""lazy"" sizes=""(max-width: 777px) 100vw, 777px"" src=""/media/uploads/articles/180/Mac-OS-X-Screenshot-With-Shadow.png"" srcset="""" width=""777""/></a></p>
<p>Shadow may be usesful at times but sometimes it causes real inconvenience. You can remove the window shadow by calling the following commands.</p>
<pre>$ defaults write com.apple.screencapture disable-shadow -bool true</pre>
<p>For this command to take the immediately effect you need to restart the system UI by using the following commands.</p>
<pre>$ killall SystemUIServer</pre>
<p>Now your window screenshot will not have any shadow.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Mac OS X Screenshot No Shadow"" class=""aligncenter size-full wp-image-9490"" height=""437"" loading=""lazy"" sizes=""(max-width: 665px) 100vw, 665px"" src=""/media/uploads/articles/180/Mac-OS-X-Screenshot-No-Shadow.png"" srcset="""" width=""665""/></a></p>
<p>If you willing to revert back the shadow background for window screenshot, you can use the following command.</p>
<pre>$ defaults write com.apple.screencapture disable-shadow -bool false</pre>
",0,"standard","post"
"Performing Stress Test in Android Using  Monkey Application Exerciser","performing-stress-test-in-android-using-monkey-application-exerciser","The Monkey is a tool you run on your device to generate a random system level userr events. It generates the specified number of events without any user interaction. This is generally helpful for performing stress test. This tool generates the random events from set of commands and collect the crashes or memory reports.
","LIVE","<p>A Monkey is a tool you run on your device to generate a random system level user events. It generates the specified number of events without any user interaction. This is generally helpful for performing the stress test. This tool generates the random events from a set of commands and collects the crashes or memory reports.</p>
<p>Note that this tool is not used for automation testing. This only helps to find the crashes that may not appear during regular use of the application.</p>
<p>This tool uses an Android Device Bridge ADB toolkit. To run this command you need to provide the application package name and a total number of random events that you want to generate. The following command shows how to start monkey tool.</p>
<pre>$ adb shell monkey -p com.javatechig.myapp 5000</pre>
<p>When you run this test, you can watch your device or emulator. You will notice random events on UI elements are being generated. When the application crashes, it will stop the exerciser and prints the report on the terminal window. The following screenshot depicts a crash report while testing my application.<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Performing Stress Test in Android Using  Monkey Application Exerciser"" class=""aligncenter size-full wp-image-9480"" height=""455"" loading=""lazy"" sizes=""(max-width: 820px) 100vw, 820px"" src=""/media/uploads/articles/181/Performing-Stress-Test-in-Android-Using-Monkey-Application-Exerciser.png"" srcset="""" width=""820""/></a></p>
<p>There are a variety of ways to control the behavior of Monkey tool by passing different arguments. Let us go through some of the important ones.</p>
<p>You can see a complete list of all options by typing:</p>
<pre>$ adb shell monkey --help</pre>
<p>You must have noticed in the previous command, when the Monkey starts, it always starts the default application of the package specified. However, in some cases, your application may depend on some other third party apps such as device native camera to capture the photo or integrating with Google Maps. For such cases, an event that launches something external will be dropped by default by Monkey tool.</p>
<p>This behavior can be controlled by providing an additional package -p argument to the Monkey command.</p>
<pre>$ adb shell monkey -p com.javatechig.myapp -p com.google.map 5000</pre>
<p>Now let us run the Monkey tool more intelligently by controlling the type of events that are triggered. For example, if you want to ensure that 30 percent of the events are touch events, you need to specify the –pct-touch argument as follows.</p>
<pre>$ adb shell monkey --pct-touch 30 -p com.javatechig.myapp 5000</pre>
",0,"standard","post"
"Installing Google Play Services in Genymotion Emulator","installing-google-play-services-in-genymotion-emulator","The Genymotion for Android is considered to be an fastest Android emulator alternative for testing Android applications. By default Genymotion doesnt directly include the Google Play Services. This post explains the instructions for installing Google Play Services in the Genymotion emulator.
","LIVE","<p>The Genymotion for Android is considered to be an fastest Android emulator alternative for testing Android applications. By default Genymotion doesnt directly include the Google Play Services. This means that some of the Android features such as Google Map, require Google play service cannot be tested on the Genymotion emulator.</p>
<p>However, it allows you to install the required Google Play Services by yourself. This post explains the instructions for installing Google Play Services in the Genymotion emulator.</p>
<ol>
<li>It is assumed you already have the Genymotion emulator installed and have download one or more of the supported device images.</li>
<li>Start the Genymotion Virtual device you have configured. In this post, I have configured Google Nexus6 Android version 5.0.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Genymotion Emulator Manager"" class=""aligncenter size-full wp-image-9446"" height=""624"" loading=""lazy"" sizes=""(max-width: 802px) 100vw, 802px"" src=""/media/uploads/articles/182/Genymotion-Emulator-Manager.png"" srcset="""" width=""802""/></a></p>
<ol start=""3"">
<li>Download the appropriate version of Google Play Services .zip file from <a href=""http://www.teamandroid.com/gapps/"" rel=""nofollow noopener noreferrer"" target=""_blank"">www.teamandroid.com/gapps/</a>. Make sure to download the Google Play Services version same as your virtual device Android version.</li>
<li>Drag the .zip file onto the running virtual device and drop it to install the component, here we show it on Mac OS X, but the same mechanism is used in Windows. Notice that, a dialog will appear and show as file transfer in progress, then another dialog will appear and ask that do you want to flash it on the emulator.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Installing Google Play Services in Genymotion Emulator"" class=""aligncenter size-full wp-image-9448"" height=""175"" loading=""lazy"" src=""/media/uploads/articles/182/Installing-Google-Play-Services-in-Genymotion-Emulator.png"" srcset="""" width=""422""/></a></p>
<ol start=""3"">
<li>Click OK and reboot the virtual device.</li>
<li>Reboot the virtual device and notice that Google Apps will be in the emulator. Now you can run applications that depend on Google Play Service API.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Google Play Services installed in Genymotion Emulator"" class=""aligncenter wp-image-9447 size-thumbnail"" height=""502"" loading=""lazy"" src=""/media/uploads/articles/182/Google-Play-Services-installed-in-Genymotion-Emulator-300x502.png"" srcset="""" width=""300""/></a></p>
<p><strong>Note: </strong>Google Apps Services may crash frequently and stopped working. This means you may need to upgrade al required Google Apos from Play Store.</p>
",0,"standard","post"
"AlertDialog and DialogFragment Example  in Xamarin Android","alertdialog-and-dialogfragment-example-in-xamarin-android","This example explains how to create AlertDialog and DialogFragment  in Xamarin Android. Android supports several different ways to create a dialog such as AlertDialog and FragmentDialog.
","LIVE","<p>Dialog is like any other window that pops up in front of current window, used to show some short message, taking user input or to ask user decisions. Unlike <code>Toast</code>, a dialog is generally used where user attention is mandate. Android supports several different ways to create a dialog such as <code>AlertDialog</code> and <code>FragmentDialog</code>. In this example we will cover all the aspect of AlertDialog and DialogFragment.</p>

<h2><span id=""1_Using_AlertDialog_in_XamarinAndroid"">1. Using AlertDialog in Xamarin.Android</span></h2>
<p><code>AlertDialog</code> is the subclass of <code>Dialog</code> that can display one, two or three buttons. If you only want to display a String in this dialog box, use the <code>SetMessage()</code> method.</p>
<p>The following code snippet can be used to create a simple AlertDialog with two buttons Delete and Cancel.</p>
<pre class=""prettyprint lang-cs"">//set alert for executing the task
AlertDialog.Builder alert = new AlertDialog.Builder (this);
alert.SetTitle (""Confirm delete"");
alert.SetMessage (""Lorem ipsum dolor sit amet, consectetuer adipiscing elit."");
alert.SetPositiveButton (""Delete"", (senderAlert, args) =&gt; {
	Toast.MakeText(this ,""Deleted!"" , ToastLength.Short).Show();
});

alert.SetNegativeButton (""Cancel"", (senderAlert, args) =&gt; {
	Toast.MakeText(this ,""Cancelled!"" , ToastLength.Short).Show();
});

Dialog dialog = alert.Create();
dialog.Show();
</pre>
<p>The above code snippet will produce the output as shown in the following screenshot.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""AlertDialog in Xamarin Android"" class=""wp-image-9420 size-thumbnail aligncenter"" height=""533"" loading=""lazy"" src=""/media/uploads/articles/183/AlertDialog-in-Xamarin-Android-300x533.png"" srcset="""" width=""300""/></a></p>
<h2><span id=""2_Using_DialogFragment_in_XamarinAndroid"">2. Using DialogFragment in Xamarin.Android</span></h2>
<p>Since the release of <strong>Android 3.0 (API level 11)</strong>, fragment can show as a dialog and called as <code>DialogFragment</code>. If you’re supporting older android versions, you can make use of fragment-compatibility support library.</p>
<p>To create a dialog fragment, we will be using DialogFragment class. This class is derived from the Fragment and behaves much like a fragment with all available fragment life cycle methods. Android recemends to use DialogFragment over AlerDialog.</p>
<p>You need to perfrom the following steps to create a DialogFragment</p>
<ul>
<li>Create a new class that extends from DialogFragment class.</li>
<li>Like regular Fragments, override <code>OnCreateView()</code> callback to attach the dialog layout.</li>
<li>Alternatively, you can override <code>OnCreateDialog()</code> method and return a Dialog instance. This method is used to port your old AlertDialog code without much of modification.</li>
</ul>
<p>In this example, we will see both OnCreateView() and OnCreateDialog() callback.</p>
<h2><span id=""3Dialog_fragment_using_OnCreateDialog"">3. Dialog fragment using OnCreateDialog()</span></h2>
<p>The following code snipept shows how to create dialog by overriding OnCreateDialog() method.</p>
<pre class=""prettyprint lang-cs"">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Util;
using Android.Views;
using Android.Widget;

namespace DialogExample
{
	public class DialogFragment2 : DialogFragment
	{
		public static DialogFragment2 NewInstance(Bundle bundle){
			DialogFragment2 fragment = new DialogFragment2 ();
			fragment.Arguments = bundle;
			return fragment;
		}

		public override Dialog OnCreateDialog (Bundle savedInstanceState)
		{
			AlertDialog.Builder alert = new AlertDialog.Builder (Activity);
			alert.SetTitle (""Confirm delete"");
			alert.SetMessage (""Lorem ipsum dolor sit amet, consectetuer adipiscing elit."");
			alert.SetPositiveButton (""Delete"", (senderAlert, args) =&gt; {
				Toast.MakeText(Activity ,""Deleted!"" , ToastLength.Short).Show();
			});

			alert.SetNegativeButton (""Cancel"", (senderAlert, args) =&gt; {
				Toast.MakeText(Activity ,""Cancelled!"" , ToastLength.Short).Show();
			});

			return alert.Create();
		}
	}
}
</pre>
<h2><span id=""4Dialog_fragment_using_OnCreateView"">4. Dialog fragment using OnCreateView()</span></h2>
<p>DialogFragment is like any other fragment, the same lifecycle rules are applied. Now we have to override onCreateView method to attach the layout to view hierarchy and construct the dialog fragment.</p>
<p>Let us first define the layout for your fragment. In this example, I have used two TextViews and Button. My layout looks as follows:</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:orientation=""vertical""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:padding=""10dp""&gt;
    &lt;TextView
        android:text=""Lorem ipsum""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/textView1"" /&gt;
    &lt;TextView
        android:text=""Lorem ipsum dolor sit amet, consectetuer adipiscing elit....""
        android:textAppearance=""?android:attr/textAppearanceSmall""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/textView2""
        android:layout_marginTop=""10dp"" /&gt;
    &lt;Button
        android:text=""Close""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/CloseButton""
        android:layout_marginTop=""10dp"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<p>Now let us inflate the layout from OnCreateView() method. My DialogFragment class looks as follows:</p>
<pre class=""prettyprint lang-cs"">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Util;
using Android.Views;
using Android.Widget;

namespace DialogExample
{
	public class DialogFragment1 : DialogFragment
	{
		public static DialogFragment1 NewInstance(Bundle bundle){
			DialogFragment1 fragment = new DialogFragment1 ();
			fragment.Arguments = bundle;
			return fragment;
		}

		public override View OnCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
		{
			// Use this to return your custom view for this Fragment
			View view =  inflater.Inflate(Resource.Layout.DialogFragment1Layout, container, false);
			Button button = view.FindViewById&lt;Button&gt; (Resource.Id.CloseButton);
			button.Click += delegate {
				Dismiss();
				Toast.MakeText(Activity ,""Dialog fragment dismissed!"" , ToastLength.Short).Show();
			};

			return view;
		}
	}
}
</pre>
<p>The above code snippet will produce the output as shown in the following screenshot.<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""DialogFragment in Xamarin Android"" class=""size-thumbnail wp-image-9421 aligncenter"" height=""533"" loading=""lazy"" src=""/media/uploads/articles/183/DialogFragment-in-Xamarin-Android-300x533.png"" srcset="""" width=""300""/></a></p>
<h2><span id=""5_Adding_DialogFragment"">5. Adding DialogFragment</span></h2>
<p>We are pretty much done!. Add the following code snippet in your Activity to instantiate and display the dialog;</p>
<pre class=""prettyprint lang-cs"">FragmentTransaction ft = FragmentManager.BeginTransaction();
//Remove fragment else it will crash as it is already added to backstack
Fragment prev = FragmentManager.FindFragmentByTag(""dialog"");
if (prev != null) {
	ft.Remove(prev);
}

ft.AddToBackStack(null);

// Create and show the dialog.
DialogFragment1 newFragment = DialogFragment1.NewInstance(null);

//Add fragment
newFragment.Show(ft, ""dialog"");
</pre>
<p>The above code snippet will produce the output as shown in the following screenshot.<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""AlertDialog in Xamarin Android"" class=""aligncenter size-thumbnail wp-image-9420"" height=""533"" loading=""lazy"" src=""/media/uploads/articles/183/AlertDialog-in-Xamarin-Android-300x533.png"" srcset="""" width=""300""/></a></p>
",0,"standard","post"
"Android CardView Example","android-cardview-example","The recent release of Android support library (v7:21.0.+) has introduced two new user interface widget: RecyclerView and CardView&hellip;","LIVE","<p>The recent release of Android support library <code>(v7:21.0.+)</code> has introduced two new user interface widget: <code>RecyclerView</code> and <code>CardView</code> that helps in building rich Android apps.</p>
<p>The <code>RecyclerView</code> is more advanced and flexible and efficient version of ListView. RecyclerView ViewGroup is a container for larger data set of views that can be recycled and scrolled very efficiently. </p><p>RecyclerView can be used for larger datasets to be rendered on the UI like a list. RecyclerView provides maximum flexibility to design a different kind of views. </p><p>C<span style=""font-size: 1rem;"">lick here to read more about </span><a href=""/articles/android-recyclerview-example"" style=""background-color: rgb(255, 255, 255); font-size: 1rem;"">Android RecyclerView</a><span style=""font-size: 1rem;""> example.</span></p>
<p>In the other hand the <code>CardView</code> widget, is an extension of existing FrameLayout class. This helps to wrap other UI elements as Google style cards. CardView widgets can have shadows and rounded corners. The following image shows example Google card design used Google Now application.<br>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Google Now Cards"" class=""aligncenter size-full wp-image-9343"" height=""375"" loading=""lazy"" sizes=""(max-width: 635px) 100vw, 635px"" src=""/media/uploads/articles/184/Googe-Now-Cards.jpg"" srcset="""" width=""635""></a></p>
<h3 class="""">Add CardView Support Library</h3>
<p>Android SDK doesn’t includes the CardView class, and hence for using CardView in your project you need to add the following dependency in your <code>build.graddle</code> file.</p>
<pre class=""prettyprint lang-java"">dependencies {
   compile 'com.android.support:cardview-v7:21.0.+'
}
</pre>
<h3 class="""">Declare CardView Layout</h3>
<p>Now that we have added the build dependencies to project, let us go ahead to declare the CardView layout. In this example, we will add an ImageView and two TextViews as shown in the following screenshot.</p>
<pre class=""prettyprint lang-xml"">&lt;android.support.v7.widget.CardView xmlns:android=""http://schemas.android.com/apk/res/android""
    android:id=""@+id/card_view""
    android:layout_width=""match_parent""
    android:layout_height=""380dp""
    android:layout_margin=""8dp""&gt;

    &lt;RelativeLayout
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""&gt;

        &lt;ImageView
            android:id=""@+id/thumbnail""
            android:layout_width=""match_parent""
            android:layout_height=""250dp""
            android:layout_alignParentTop=""true""
            android:scaleType=""centerCrop""
            android:src=""@drawable/wallpaper"" /&gt;

        &lt;TextView
            android:id=""@+id/title""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_below=""@+id/thumbnail""
            android:maxLines=""3""
            android:padding=""8dp""
            android:text=""@string/title""
            android:textColor=""#222""
            android:textStyle=""bold""
            android:textSize=""22dp"" /&gt;

        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_below=""@+id/title""
            android:maxLines=""3""
            android:padding=""8dp""
            android:text=""@string/description""
            android:textColor=""#666""
            android:textSize=""14dp"" /&gt;

    &lt;/RelativeLayout&gt;
&lt;/android.support.v7.widget.CardView&gt;</pre>
<p>The output of the above code is as follows<br>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Android CardVeiw Example"" class=""aligncenter wp-image-9340 size-thumbnail"" height=""329"" loading=""lazy"" src=""/media/uploads/articles/184/Android-CardVeiw-Example-e1435760917628-300x329.png"" srcset="""" width=""300""></a></p>
<h3 class="""">Customize CardView Appearance</h3>
<p>The CardView layout declaration is pretty straight forward.&nbsp;<span style=""font-size: 1rem;"">CardView widget allows you to control the background color, shadow, corner radius etc.</span></p><p>For using the custom attributes in XML, you need to add the following namespace declaration to your layout parent.</p>
<pre class=""prettyprint lang-xml"">&lt;android.support.v7.widget.CardView 
    xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    xmlns:cardView=""http://schemas.android.com/apk/res-auto""
	... &gt;

		... 
		....
&lt;/android.support.v7.widget.CardView&gt;
</pre>
<p>Now let us use the following <code>CardView</code> properties to customize the appearance of the CardView</p>
<ul>
<li>To set the corner radius in your layouts, use the <code>cardView:cardCornerRadius</code> attribute. To set the corner radius in your code, use the <code>cardView.setRadius</code> method.</li>
<li>To set the background color of a card, use the <code>cardView:cardBackgroundColor</code> attribute.</li>
</ul>",0,"standard","post"
"Using Custom Activity Transition in GridView Image Gallery","using-custom-activity-transition-in-gridview-image-gallery","In this example, we will see how to create custom window animation that makes sense to user. We will extend our previous GridView example, to create custom bitmap scale animation when user clicks on a thumbnail in GridView.","LIVE","<p>In this example, we will see how to create custom window animation that makes sense to the user. We will extend our previous <a href=""/article/download-and-display-image-in-android-gridview"">GridView example,</a> to create custom bitmap scale animation when user clicks on a thumbnail in GridView.</p>
<p>Let us now take a look at the following demo. Notice that when we click on the thumbnail on GridView, it opens the sub-activity that displays an <code>ImageView</code> and <code>TextView</code>. The thumbnail image gets zoomed up and scales to full view in details activity. When the user clicks the back button to return to <code>GridView</code>, it again scales down to the original position.</p>
<p><iframe allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen="""" frameborder=""0"" height=""675"" loading=""lazy"" src=""https://www.youtube.com/embed/smIWHeXZmFU?feature=oembed"" title=""Cusotm Activity Transition Example - Demo"" width=""1200""></iframe></p>
<p>To achieve this kind of animation, we need to follow the following steps</p>
<ul>
<li>Override the default window animation with our own custom animation for both enter and exit transitions.</li>
<li>When user clicks on a GridView item, capture the details of thumbnail such as top and left distance, width, height, title and the url of the image to display. Package all the details and pass the extra information to <code>DetailsActivity</code>.</li>
<li>Launch activity transparently so that we see the thumbnail gets zoomed. We can control the background alpha animation to set the image background.</li>
<li>Write your own enter and exit transition on DetailsActivity.</li>
</ul>
<h2>1. Capture and send the thumbnail details</h2>
<p>Let us implement mGridView.setOnItemClickListener to handle click event on GridView. When user clicks on any grid items, get the image thumbnail at that position. Extract the information such as position, width and height and pass to DetailsActivity <code>intent</code> bundle.</p>
<pre class=""prettyprint lang-java"">mGridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    public void onItemClick(AdapterView&lt;?&gt; parent, View v, int position, long id) {
        GridItem item = (GridItem) parent.getItemAtPosition(position);
        ImageView imageView = (ImageView) v.findViewById(R.id.grid_item_image);

        Intent intent = new Intent(GridViewActivity.this, DetailsActivity.class);
        int[] screenLocation = new int[2];
        imageView.getLocationOnScreen(screenLocation);

        //Pass the image title and url to DetailsActivity
        intent.putExtra(""left"", screenLocation[0]).
                putExtra(""top"", screenLocation[1]).
                putExtra(""width"", imageView.getWidth()).
                putExtra(""height"", imageView.getHeight()).
                putExtra(""title"", item.getTitle()).
                putExtra(""image"", item.getImage());

        startActivity(intent);
    }
});
</pre>
<h2>2. Read bundle data passed form intent</h2>
<p>This is straight forward. Just read all the bundle data passed form GridView activity.</p>
<pre class=""prettyprint lang-java"">//retrieves the thumbnail data
Bundle bundle = getIntent().getExtras();
thumbnailTop = bundle.getInt(""top"");
thumbnailLeft = bundle.getInt(""left"");
thumbnailWidth = bundle.getInt(""width"");
thumbnailHeight = bundle.getInt(""height"");

String title = bundle.getString(""title"");
String image = bundle.getString(""image"");
</pre>
<h2>3. Make DetailsActivity window transparent</h2>
<p>Make the DetailsActivity background as transparent by adding the <code>android:windowBackground</code> color as transparent. This can be done using custom themes to your activity.</p>
<pre class=""prettyprint lang-xml"">&lt;style name=""Transparent"" parent=""AppTheme""&gt;
        &lt;item name=""android:windowNoTitle""&gt;true&lt;/item&gt;
        &lt;item name=""android:windowIsTranslucent""&gt;true&lt;/item&gt;
        &lt;item name=""android:windowBackground""&gt;@android:color/transparent&lt;/item&gt;
&lt;/style&gt;
</pre>
<p>Now, set the above theme to your activity in AndroidManifest.xml file.</p>
<pre class=""prettyprint lang-xml"">&lt;activity android:name="".DetailsActivity""
            android:theme=""@style/Transparent"" /&gt;
</pre>
<h2>4. Set color drawable to main background</h2>
<p>We have made the activity default background as transparent. Now let us set the main parent view background as follows.</p>
<pre class=""prettyprint lang-java"">//Set the background color to black
 frameLayout = (FrameLayout) findViewById(R.id.main_background);
colorDrawable = new ColorDrawable(Color.BLACK);
frameLayout.setBackground(colorDrawable);
</pre>
<h2>5. Implement .addOnPreDrawListener</h2>
<p>Register <code>ViewTreeObserver.addOnPreDrawListener</code> callback in DetailsActivity. This callback will be invoked when the view tree is about to be drawn. This is the best place to run our window enter animation.</p>
<pre class=""prettyprint lang-java"">// Only run the animation if we're coming from the parent activity, not if
// we're recreated automatically by the window manager (e.g., device rotation)
if (savedInstanceState == null) {
    ViewTreeObserver observer = imageView.getViewTreeObserver();
    observer.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {

        @Override
        public boolean onPreDraw() {
            imageView.getViewTreeObserver().removeOnPreDrawListener(this);

            int[] screenLocation = new int[2];
            imageView.getLocationOnScreen(screenLocation);
            mLeftDelta = thumbnailLeft - screenLocation[0];
            mTopDelta = thumbnailTop - screenLocation[1];

            // Scale factors to make the large version the same size as the thumbnail
            mWidthScale = (float) thumbnailWidth / imageView.getWidth();
            mHeightScale = (float) thumbnailHeight / imageView.getHeight();

            enterAnimation();
            return true;
        }
    });
}
</pre>
<h2>6. Create custom enter and exit animation</h2>
<p>The enter animation scales the picture in from its previous thumbnail size/location. In parallel, the background of the activity is fading in.</p>
<pre class=""prettyprint lang-java"">public void enterAnimation() {
    imageView.setPivotX(0);
    imageView.setPivotY(0);
    imageView.setScaleX(mWidthScale);
    imageView.setScaleY(mHeightScale);
    imageView.setTranslationX(mLeftDelta);
    imageView.setTranslationY(mTopDelta);

    // interpolator where the rate of change starts out quickly and then decelerates.
    TimeInterpolator sDecelerator = new DecelerateInterpolator();

    // Animate scale and translation to go from thumbnail to full size
    imageView.animate().setDuration(ANIM_DURATION).scaleX(1).scaleY(1).
            translationX(0).translationY(0).setInterpolator(sDecelerator);

    // Fade in the black background
    ObjectAnimator bgAnim = ObjectAnimator.ofInt(colorDrawable, ""alpha"", 0, 255);
    bgAnim.setDuration(ANIM_DURATION);
    bgAnim.start();
}
</pre>
<p>The exit animation is basically a reverse of the enter animation. This Animate image back to thumbnail size/location as relieved from bundle. The endAction param, indicates the action gets run after the animation completes.</p>
<pre class=""prettyprint lang-java"">public void exitAnimation(final Runnable endAction) {
    TimeInterpolator sInterpolator = new AccelerateInterpolator();
    imageView.animate().setDuration(ANIM_DURATION).scaleX(mWidthScale).scaleY(mHeightScale).
        translationX(mLeftDelta).translationY(mTopDelta)
        .setInterpolator(sInterpolator).withEndAction(endAction);

    // Fade out background
    ObjectAnimator bgAnim = ObjectAnimator.ofInt(colorDrawable, ""alpha"", 0);
    bgAnim.setDuration(ANIM_DURATION);
    bgAnim.start();
}
</pre>
<h2>7. Override onBackPressed() method</h2>
<p>Override <code>onBackPressed()</code> method to run our exit animation first, then exiting the activity when it is complete.</p>
<pre class=""prettyprint lang-java"">@Override
public void onBackPressed() {
    exitAnimation(new Runnable() {
        public void run() {
            finish();
        }
    });
}
</pre>
<h2>8. Download Complete Source</h2>
[download url=”https://github.com/javatechig/Android-GridView-Advance-Tutorial”]",0,"standard","post"
"Download and Display Image in Android GridView","download-and-display-image-in-android-gridview","This example is an improved version of my previous example Android GridView Example. Instead of using static images&hellip;","LIVE","<p>This example is an improved version of my previous example <a href=""http://stacktips.com/articles/android-gridview-example-building-image-gallery-in-android"">Android GridView Example</a>. 

Instead of using static images to display the grid items, let’s make this example more realistic by downloading the data in real-time from the server and render the grid items. The following video depicts the output of this example.</p>

<p><iframe allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen="""" frameborder=""0"" height=""675"" loading=""lazy"" src=""https://www.youtube.com/embed/fIX4SnBLaZg?feature=oembed"" title=""Android GridView Example - Demo"" width=""1200""></iframe></p>
<p>Without wasting much time, let us jump straight into what it takes to build this kind of GridView. You need to follow the following steps to complete this example.</p>

<h2><span id=""1_Add_GridView_in_Activity_Layout"">1. Add GridView in Activity Layout</span></h2>
<p>First, create a new android project. For this example, I prefer to use <strong>Android Studio</strong>. Create a new layout file to your project <code>res/layout</code> folder and name it as <code>activity_grid_view.xml</code>. And add the following code blocks.</p>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""#f0f0f0""&gt;

    &lt;GridView
        android:id=""@+id/gridView""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""5dp""
        android:columnWidth=""100dp""
        android:drawSelectorOnTop=""true""
        android:gravity=""center""
        android:numColumns=""auto_fit""
        android:stretchMode=""columnWidth""
        android:verticalSpacing=""5dp""
        android:focusable=""true""
        android:clickable=""true""/&gt;

    &lt;ProgressBar
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:id=""@+id/progressBar""
        android:layout_centerInParent=""true""
        android:visibility=""gone""/&gt;
&lt;/RelativeLayout&gt;
</pre>
<p>The above layout is pretty straight forward. We have declared an <code>GridView</code> and a <code>ProgressBar</code> in activity layout. The progress bar will be displayed when the data is being downloaded.</p>
<h2><span id=""2_Declare_GridView_Item_Layout"">2. Declare GridView Item Layout</span></h2>
<p>Let us now add another file named <code>grid_item_layout.xml</code> to <code>res/layout</code> folder. This layout will be used by custom grid adapter for laying out individual grid item. For the sake of simplicity, we are adding an <code>ImageView</code> and a <code>TextView</code>.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""wrap_content""
    android:layout_height=""wrap_content""
    android:layout_marginTop=""5dp""
    android:background=""@drawable/grid_color_selector""
    android:orientation=""vertical""
    android:padding=""5dp""&gt;

    &lt;ImageView
        android:id=""@+id/grid_item_image""
        android:layout_width=""100dp""
        android:layout_height=""100dp""
        android:scaleType=""centerCrop""/&gt;

    &lt;TextView
        android:id=""@+id/grid_item_title""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_marginTop=""5dp""
        android:gravity=""center""
        android:maxLines=""2""
        android:ellipsize=""marquee""
        android:textSize=""12sp"" /&gt;

&lt;/LinearLayout&gt;
</pre>
<h2><span id=""3_Adding_Internet_Permission"">3. Adding Internet Permission</span></h2>
<p>You might be aware that, Android application must declare all the permissions that are required for application. As we need to download the data form server, we need to add the <code>INTERNET</code> permission. Add the following line to <code>AndroidManifest.xml</code> file.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    package=""com.javatechig.gridviewexample""&gt;

    <strong>&lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;</strong>

    &lt;application
        android:allowBackup=""true""
        android:icon=""@mipmap/ic_launcher""
        android:label=""@string/app_name""
        android:theme=""@style/AppTheme""&gt;
        &lt;activity
            android:name="".GridViewActivity""
            android:label=""@string/app_name""&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""android.intent.action.MAIN"" /&gt;

                &lt;category android:name=""android.intent.category.LAUNCHER"" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;

        &lt;activity android:name="".DetailsActivity"" /&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</pre>
<p>Notice that we have also declared all the activities used in the application.</p>
<h2><span id=""4_Adding_Picasso_Image_Downloading_Library"">4. Adding Picasso Image Downloading Library</span></h2>
<p>Android open source developer community brings some of the interesting libraries that can be integrated easily to Android applications. They serves a great deal of purpose and saves lot of time. Here in this example, I am talking about <strong><code>Picasso</code></strong> image loading library. We will add Picasso library for downloading and caching of images. Visit here to learn more about how to use Picasso library in Android.</p>
<p>You can add the Picasso library by adding the following dependency to the build.gradle file.</p>
<pre class=""prettyprint lang-java"">dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
    <strong>compile 'com.squareup.picasso:picasso:2.5.2'</strong>
}
</pre>
<h2><span id=""5_Create_a_GridView_Custom_Adapter"">5. Create a GridView Custom Adapter</span></h2>
<p>A grid view is an adapter view. It requires an adapter to render the collection of data items. Add a new class named <code>GridViewAdapter.java</code> to your project and add the following code snippets.</p>
<pre class=""prettyprint lang-java"">package com.javatechig.gridviewexample;

import java.util.ArrayList;
import android.app.Activity;
import android.content.Context;
import android.text.Html;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;
import com.squareup.picasso.Picasso;

public class GridViewAdapter extends ArrayAdapter&lt;GridItem&gt; {

    private Context mContext;
    private int layoutResourceId;
    private ArrayList&lt;GridItem&gt; mGridData = new ArrayList&lt;GridItem&gt;();

    public GridViewAdapter(Context mContext, int layoutResourceId, ArrayList&lt;GridItem&gt; mGridData) {
        super(mContext, layoutResourceId, mGridData);
        this.layoutResourceId = layoutResourceId;
        this.mContext = mContext;
        this.mGridData = mGridData;
    }


    /**
     * Updates grid data and refresh grid items.
     * @param mGridData
     */
    public void setGridData(ArrayList&lt;GridItem&gt; mGridData) {
        this.mGridData = mGridData;
        notifyDataSetChanged();
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View row = convertView;
        ViewHolder holder;

        if (row == null) {
            LayoutInflater inflater = ((Activity) mContext).getLayoutInflater();
            row = inflater.inflate(layoutResourceId, parent, false);
            holder = new ViewHolder();
            holder.titleTextView = (TextView) row.findViewById(R.id.grid_item_title);
            holder.imageView = (ImageView) row.findViewById(R.id.grid_item_image);
            row.setTag(holder);
        } else {
            holder = (ViewHolder) row.getTag();
        }

        GridItem item = mGridData.get(position);
        holder.titleTextView.setText(Html.fromHtml(item.getTitle()));

        <strong>Picasso.with(mContext).load(item.getImage()).into(holder.imageView);</strong>
        return row;
    }

    static class ViewHolder {
        TextView titleTextView;
        ImageView imageView;
    }
}
</pre>
<p>Notice the following in the above code snippets,</p>
<ul>
<li>The <code>setGridData()</code> method updates the data display on GridView.</li>
<li>The <code>Picasso.with().load()</code> method is used to download the image from url and display on image view.</li>
<li>The GridViewAdapter class constructor requires the id of the grid item layout and the list of data to operate on.</li>
<li>You might be surprised, where is the <code>GridItem</code> class came from. Its not a magic, we need to add <code>GridItem.java</code> class to our project.  The GridItem class looks as follows.</li>
</ul>
<h2><span id=""6_Download_Data_and_Hook_it_to_Activity"">6. Download Data and Hook it to Activity</span></h2>
<p>Now we will be heading towards hooking the adapter to GridView and make it functional. Create a new Java class and name it as <code>GridViewActivity.java</code> and perform the following steps.</p>
<ul>
<li>Override the <code>onCreate()</code> method and set the layout by calling <code>setContentView()</code> method</li>
<li>Initialize the GridView and ProgressBar component by using their declared layout id.</li>
<li>Initialize the <code>CustomGridView</code> adapter by passing the grid row layout id and the list of <code>GridItem</code> objects.</li>
<li>Use AsyncTask to download data from server, once download is successful read the stream JSON response.</li>
<li>Parse the JSON string into the list of GridItem objects. Once downloading and parsing is completed, in <code>onPostExecute()</code> callback update the UI elements.</li>
</ul>
<p>The following code does all the above steps as described. Add the following code to GridViewActivity class.</p>
<pre class=""prettyprint lang-java"">import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.GridView;
import android.widget.ProgressBar;
import android.widget.Toast;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class GridViewActivity extends ActionBarActivity {
    private static final String TAG = GridViewActivity.class.getSimpleName();
    private GridView mGridView;
    private ProgressBar mProgressBar;
    private GridViewAdapter mGridAdapter;
    private ArrayList&lt;GridItem&gt; mGridData;
    private String FEED_URL = ""http://stacktips.com/?json=get_recent_posts&amp;count=45"";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_gridview);

        mGridView = (GridView) findViewById(R.id.gridView);
        mProgressBar = (ProgressBar) findViewById(R.id.progressBar);

        //Initialize with empty data
        mGridData = new ArrayList&lt;&gt;();
        mGridAdapter = new GridViewAdapter(this, R.layout.grid_item_layout, mGridData);
        mGridView.setAdapter(mGridAdapter);

        //Start download
        new AsyncHttpTask().execute(FEED_URL);
        mProgressBar.setVisibility(View.VISIBLE);
    }

    //Downloading data asynchronously
    public class AsyncHttpTask extends AsyncTask&lt;String, Void, Integer&gt; {

        @Override
        protected Integer doInBackground(String... params) {
            Integer result = 0;
            try {
                // Create Apache HttpClient
                HttpClient httpclient = new DefaultHttpClient();
                HttpResponse httpResponse = httpclient.execute(new HttpGet(params[0]));
                int statusCode = httpResponse.getStatusLine().getStatusCode();

                // 200 represents HTTP OK
                if (statusCode == 200) {
                    String response = streamToString(httpResponse.getEntity().getContent());
                    parseResult(response);
                    result = 1; // Successful
                } else {
                    result = 0; //""Failed
                }
            } catch (Exception e) {
                Log.d(TAG, e.getLocalizedMessage());
            }
            return result;
        }

        @Override
        protected void onPostExecute(Integer result) {
            // Download complete. Let us update UI
            if (result == 1) {
                mGridAdapter.setGridData(mGridData);
            } else {
                Toast.makeText(GridViewActivity.this, ""Failed to fetch data!"", Toast.LENGTH_SHORT).show();
            }
            mProgressBar.setVisibility(View.GONE);
        }
    }

    String streamToString(InputStream stream) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream));
        String line;
        String result = """";
        while ((line = bufferedReader.readLine()) != null) {
            result += line;
        }

        // Close stream
        if (null != stream) {
            stream.close();
        }
        return result;
    }

    /**
     * Parsing the feed results and get the list
     * @param result
     */
    private void parseResult(String result) {
        try {
            JSONObject response = new JSONObject(result);
            JSONArray posts = response.optJSONArray(""posts"");
            GridItem item;
            for (int i = 0; i &lt; posts.length(); i++) {
                JSONObject post = posts.optJSONObject(i);
                String title = post.optString(""title"");
                item = new GridItem();
                item.setTitle(title);
                JSONArray attachments = post.getJSONArray(""attachments"");
                if (null != attachments &amp;&amp; attachments.length() &gt; 0) {
                    JSONObject attachment = attachments.getJSONObject(0);
                    if (attachment != null)
                        item.setImage(attachment.getString(""url""));
                }
                mGridData.add(item);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
}
</pre>
<p>At this point you will be able to run the app and notice that the app will download the data from the server and display on GridView.</p>
<h2><span id=""7_Handle_GridView_Click_Event"">7. Handle GridView Click Event</span></h2>
<p>Right now GridView is not responding to user clicks. Let us make it more functional by adding the following code.</p>
<pre class=""prettyprint lang-java"">mGridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
public void onItemClick(AdapterView&lt;?&gt; parent, View v, int position, long id) {

		//Get item at position
		GridItem item = (GridItem) parent.getItemAtPosition(position);

		//Pass the image title and url to DetailsActivity
                Intent intent = new Intent(GridViewActivity.this, DetailsActivity.class);
                intent.putExtra(""title"", item.getTitle());
                intent.putExtra(""image"", item.getImage());

		//Start details activity
		startActivity(intent);
	}
});
</pre>
<p>When user clicks on a grid item, we will start another activity that displays the full screen image. You can start one activity form another by calling <code>startActivity()</code> method.</p>
<p>We need to pass the details of the item such as title, and image url for displaying it on <code>DetailsActivity</code>.</p>
<h2><span id=""8_Create_Details_Activity_Layout"">8. Create Details Activity Layout</span></h2>
<p>Add a new layout file to res/layout directory, name it as <code>activity_details_view.xml</code> and add the following code snippets.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;FrameLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""#000""
    android:orientation=""vertical""&gt;

    &lt;ImageView
        android:id=""@+id/grid_item_image""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:layout_gravity=""center""
        android:scaleType=""fitCenter"" /&gt;

    &lt;TextView
        android:id=""@+id/title""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_gravity=""bottom""
        android:background=""#00000c""
        android:padding=""10dp""
        android:textColor=""#fff""
        android:textSize=""20dp"" /&gt;
&lt;/FrameLayout&gt;
</pre>
<h2><span id=""9_Completing_the_Details_Activity"">9. Completing the Details Activity</span></h2>
<p>The <code>DetailsActivity</code> retrieves the details passed from <code>GridViewActivity</code> and renders the details on screen. Create a new class named DetailsActivity and add the following code snippets.</p>
<pre class=""prettyprint lang-java"">package com.javatechig.gridviewexample;

import android.os.Bundle;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.text.Html;
import android.widget.ImageView;
import android.widget.TextView;
import com.squareup.picasso.Picasso;

public class DetailsActivity extends ActionBarActivity {
    private TextView titleTextView;
    private ImageView imageView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_details_view);

        ActionBar actionBar = getSupportActionBar();
        actionBar.hide();

        String title = getIntent().getStringExtra(""title"");
        String image = getIntent().getStringExtra(""image"");
        titleTextView = (TextView) findViewById(R.id.title);
        imageView = (ImageView) findViewById(R.id.grid_item_image);
        titleTextView.setText(Html.fromHtml(title));

        Picasso.with(this).load(image).into(imageView);
    }
}
</pre>
<h2><span id=""10_Download_Complete_Example"">10. Download Complete Example</span></h2>
[download url=”https://github.com/javatechig/Android-GridView-Advance-Tutorial”]
<h2><span id=""11_Custom_Activity_Transition_in_GridView"">11. Custom Activity Transition in GridView</span></h2>
<p>Continue reading in our <a href=""http://stacktips.com/android/using-custom-activity-transition-in-gridview-image-gallery"">next tutorial.</a></p>",0,"standard","post"
"ListView Header Parallax with Sticky View in Android","listview-header-parallax-with-sticky-view-in-android","A quick Android example with code snippet to demonstrate ListView parallax effect with sticky header. In our previous tutorial, we saw Creating ListView Header Parallax Animation, now in this example we will go little further and make the list header parallax animation with an view stick to top when list is scrolled.
","LIVE","<p>A quick Android example with code snippet to demonstrate <code><a href=""/articles/android-listview-tutorial"">ListView</a></code> parallax effect with sticky header. In our previous tutorial, we saw<a href=""/articles/how-to-create-listview-header-with-parallax-effect-in-android""> Creating ListView Header Parallax Animation</a>, now in this example we will go little further and make the list header parallax animation with an view stick to top when list is scrolled.<br/>
You need to follow the following steps as described below to create the list view parallax effect.</p>

<p>The output of this example in the following attached video.</p>
<p><iframe allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen="""" frameborder=""0"" height=""675"" loading=""lazy"" src=""https://www.youtube.com/embed/eyWDkwVnYxo?feature=oembed"" title=""Parallax ListView Sticky Header View - Demo"" width=""1200""></iframe></p>
<h2><span id=""1_Declare_Activity_Layout"">1. Declare Activity Layout</span></h2>
<p>To begin with let us start declaring your activity layout. It is a bit tricky. Let us take an frame layout that hosts the hero image, sticky view and a ListView.</p>
<pre class=""prettyprint lang-xml"">&lt;FrameLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""&gt;

    &lt;ImageView
        android:id=""@+id/heroImageView""
        android:layout_width=""match_parent""
        android:layout_height=""250dp""
        android:background=""@drawable/wallpaper""
        android:scaleType=""fitCenter"" /&gt;

    &lt;ListView
        android:id=""@+id/listView""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:divider=""#9E9E9E""
        android:dividerHeight=""1dp""
        android:scrollbars=""none""&gt;&lt;/ListView&gt;

    &lt;TextView
        android:id=""@+id/stickyView""
        android:layout_width=""match_parent""
        android:layout_height=""50dp""
        android:background=""#222""
        android:gravity=""center_vertical""
        android:paddingLeft=""10dp""
        android:text=""Heading1""
        android:textColor=""#fff""
        android:textSize=""20sp""
        android:textStyle=""bold"" /&gt;
&lt;/FrameLayout&gt;
</pre>
<p>The following screenshot depicts how out activity layout is defined.<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""How to Create ListView Parallax Effect with Sticky Header in Android"" class=""aligncenter wp-image-9261 size-full"" height=""528"" loading=""lazy"" sizes=""(max-width: 1041px) 100vw, 1041px"" src=""/media/uploads/articles/187/How-to-Create-ListView-Parallax-Effect-with-Sticky-Header-in-Android.png"" srcset="""" width=""1041""/></a></p>
<h2><span id=""2_Declare_List_Header_Layout"">2. Declare List Header Layout</span></h2>
<p>Now declare the layout for list header. In this example, I have declared an <a href=""/articles/android-imageview-example"">ImageView</a> inside <a href=""/articles/android-framelayout-example"">FrameLayout</a>. The header view is declared as follows.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""&gt;

    &lt;Space
        android:layout_width=""match_parent""
        android:layout_height=""250dp"" /&gt;

    &lt;Space
        android:id=""@+id/stickyViewPlaceholder""
        android:layout_width=""match_parent""
        android:layout_height=""50dp"" /&gt;

&lt;/LinearLayout&gt;</pre>
<p>Notice that in the above header layout,</p>
<ul>
<li>We have declared <code>Space</code> objects. Android Space widget is subclass of View, used to occupy invisible, transparent space on the screen. You cannot apply any style, such as color, background etc.</li>
<li>The height of both Space objects are same as the height of hero image and sticky widget as declared in your activity layout.</li>
<li>These two invisible views will be useful to calculate the view position and will help to create the parallel effect.</li>
</ul>
<h2><span id=""3_Declare_List_Row_Layout"">3. Declare List Row Layout</span></h2>
<p>Declare another layout for your list view row. In this example, for sake of simplicity I have declared a simple <code>TextView</code>. You may design fancy list of your choice by declaring your own custom adapter.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;TextView xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""wrap_content""
    android:background=""#FAFAFA""
    android:gravity=""center_vertical""
    android:text=""List Item""
    android:padding=""8dp""
    android:minHeight=""40dp""
    android:textColor=""#222""/&gt;
</pre>
<h2><span id=""4_Handle_ListView_Scroll_Events"">4. Handle ListView Scroll Events</span></h2>
<p>Following step will guide you with the necessary things required in your activity to create list view, add list header and implement parallax effect.</p>
<ul>
<li>Implement <code>setOnScrollListener</code> for your list view to handle the user scroll event.</li>
<li>Calculate the position of the sticky header view according to the position of the first item in the ListView.</li>
<li>When the first item is already reached to top, you don’t need to re-position the sticky header view.</li>
<li>Set the hero image to scroll half of the amount that of ListView</li>
</ul>
<pre class=""prettyprint lang-java"">import android.content.Context;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AbsListView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.List;

/**
 * &lt;p/&gt;
 * Calculate the position of the sticky header view according to the
 * position of the first item in the ListView. When the first item is already
 * reached to top, you don't need to position the sticky header view.
 *
 * @author Nilanchala
 */
public class MainActivity extends ActionBarActivity {

    private TextView stickyView;
    private ListView listView;
    private View heroImageView;

    private View stickyViewSpacer;

    private int MAX_ROWS = 20;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        /* Initialise list view, hero image, and sticky view */
        listView = (ListView) findViewById(R.id.listView);
        heroImageView = findViewById(R.id.heroImageView);
        stickyView = (TextView) findViewById(R.id.stickyView);

        /* Inflate list header layout */
        LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View listHeader = inflater.inflate(R.layout.list_header, null);
        stickyViewSpacer = listHeader.findViewById(R.id.stickyViewPlaceholder);

        /* Add list view header */
        listView.addHeaderView(listHeader);

        /* Handle list View scroll events */
        listView.setOnScrollListener(new AbsListView.OnScrollListener() {

            @Override
            public void onScrollStateChanged(AbsListView view, int scrollState) {
            }

            @Override
            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {

                /* Check if the first item is already reached to top.*/
                if (listView.getFirstVisiblePosition() == 0) {
                    View firstChild = listView.getChildAt(0);
                    int topY = 0;
                    if (firstChild != null) {
                        topY = firstChild.getTop();
                    }

                    int heroTopY = stickyViewSpacer.getTop();
                    stickyView.setY(Math.max(0, heroTopY + topY));

                    /* Set the image to scroll half of the amount that of ListView */
                    heroImageView.setY(topY * 0.5f);
                }
            }
        });


        /* Populate the ListView with sample data */
        List&lt;String&gt; modelList = new ArrayList&lt;&gt;();
        for (int i = 0; i &lt; MAX_ROWS; i++) {
            modelList.add(""List item "" + i);
        }

        ArrayAdapter adapter = new ArrayAdapter(this, R.layout.list_row, modelList);
        listView.setAdapter(adapter);
    }
}
</pre>
<h2><span id=""5_Download_Complete_Source_Code"">5. Download Complete Source Code</span></h2>
[download url=”https://github.com/javatechig/Android-Parallax-ListView-Sticky” source=”GitHub”]
",0,"standard","post"
"ListView Header Parallax in Android","listview-header-parallax-in-android","A quick Android example with code snippet to demonstrate ListView header with parallax effect. You need to follow&hellip;","LIVE","<p>A quick Android example with code snippet to demonstrate <code><a href=""http://stacktips.com/android/android-listview-tutorial"">ListView</a></code> header with parallax effect. You need to follow few steps as described below to create the list view parallax effect.<br>

</p><p>The output of this example in the following attached video.</p>
<p><iframe allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen="""" frameborder=""0"" height=""675"" loading=""lazy"" src=""https://www.youtube.com/embed/rcDWjRdYaSM?feature=oembed"" title=""ListView Header with Parallax Effect in Android - Demo"" width=""1200""></iframe></p>
<h2><span id=""1_Declare_Activity_Layout"">Declare Activity Layout</span></h2>
<p>To begin with let us start declaring a simple layout for our example activity. We are adding just a simple ListView that covers the total width of screen.</p>
<pre class=""prettyprint lang-xml"">&lt;ListView xmlns:android=""http://schemas.android.com/apk/res/android""
    android:id=""@+id/list""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:dividerHeight=""1dp""
    android:divider=""#9E9E9E""/&gt;
</pre>
<h2><span id=""2_Declare_List_Header_Layout"">Declare List Header Layout</span></h2>
<p>Now declare the layout for list header. In this example, I have declared an <a href=""/articles/android-imageview-example"">ImageView</a> inside <a href=""/articles/android-framelayout-example"">FrameLayout</a>.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;FrameLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""250dp""
    android:orientation=""vertical""&gt;

    &lt;ImageView
        android:id=""@+id/listHeaderImage""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:scaleType=""centerCrop""
        android:src=""@drawable/wallpaper"" /&gt;
&lt;/FrameLayout&gt;
</pre>
<h2><span id=""3_Declare_List_Row_Layout"">3. Declare List Row Layout</span></h2>
<p>Declare another layout for your list view row. In this example, for sake of simplicity I have declared a simple <code>TextView</code>. You may design fancy list of your choice by declaring your own custom adapter.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;TextView xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""wrap_content""
    android:background=""#FAFAFA""
    android:gravity=""center_vertical""
    android:text=""List Item""
    android:padding=""8dp""
    android:minHeight=""40dp""
    android:textColor=""#222""/&gt;
</pre>
<h2><span id=""4_Handle_ListView_Scroll_Events"">4. Handle ListView Scroll Events</span></h2>
<p>Following step will guide you with the necessary things required in your activity to create list view, add list header and implement parallax effect.</p>
<ul>
<li>Let us now create an activity and set the layout by calling <code>setContentView()</code> method inside <code>onCreate()</code> lifecycle callback.</li>
<li>Initialize list view and create an array adapter, which will be used for the list view.</li>
<li>Inflate list header layout and set to list view by calling <code>listView.addHeaderView()</code> method.</li>
<li>Handle user scroll events for list view and change the position Y of list header.</li>
<li>For handling the user scroll event, you need to implement <code>AbsListView.OnScrollListener</code> interface to your activity or fragment class and override the <code>onScrollStateChanged</code> and <code>onScroll</code> method. The onScroll method will be called when user scrolls the list view up or downwards.</li>
</ul>
<pre class=""prettyprint lang-java"">package com.javatechig.parallaxlistview;

import android.graphics.Rect;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import java.util.ArrayList;
import java.util.List;

public class MainActivity extends ActionBarActivity implements AbsListView.OnScrollListener {

    private static final int MAX_ROWS = 50;
    private int lastTopValue = 0;

    private List&lt;String&gt; modelList = new ArrayList&lt;&gt;();
    private ListView listView;
    private ImageView backgroundImage;
    private ArrayAdapter adapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        listView = (ListView) findViewById(R.id.list);

        for (int i = 0; i &lt; MAX_ROWS; i++) {
            modelList.add(""List item "" + i);
        }

        adapter = new ArrayAdapter(this, R.layout.list_row, modelList);
        listView.setAdapter(adapter);

        // inflate custom header and attach it to the list
        LayoutInflater inflater = getLayoutInflater();
        ViewGroup header = (ViewGroup) inflater.inflate(R.layout.custom_header, listView, false);
        listView.addHeaderView(header, null, false);

        // we take the background image and button reference from the header
        backgroundImage = (ImageView) header.findViewById(R.id.listHeaderImage);
        listView.setOnScrollListener(this);
    }

    @Override
    public void onScrollStateChanged(AbsListView view, int scrollState) {

    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
        Rect rect = new Rect();
        backgroundImage.getLocalVisibleRect(rect);
        if (lastTopValue != rect.top) {
            lastTopValue = rect.top;
            backgroundImage.setY((float) (rect.top / 2.0));
        }
    }
}
</pre>
<h2><span id=""5_Download_Complete_Source_Code"">Download Complete Source Code</span></h2>https://github.com/javatechig/Parallax-List-View-Header
<p></p>",0,"standard","post"
"Linear / Sequential Search Example in Java","linear-or-sequential-search-in-java","Quick Java code snippet to show Linear / Sequential Search.
","LIVE","<p>Quick Java code snippet to show Linear / Sequential Search.</p>
<pre class=""prettyprint lang-java"">import java.util.Scanner;

public class LinearSearchExample {

	public static void main(String args[]) {
		int i, totalCount, search, inputArray[];

		Scanner scanner = new Scanner(System.in);

		System.out.println(""Enter number of elements"");
		totalCount = scanner.nextInt();
		inputArray = new int[totalCount];

		System.out.println(""Enter "" + totalCount + "" integers"");

		for (i = 0; i &lt; totalCount; i++) {
			inputArray[i] = scanner.nextInt();
		}

		System.out.println(""Enter value to find"");
		search = scanner.nextInt();

		for (i = 0; i &lt; totalCount; i++) {
			// Element found
			if (inputArray[i] == search) {
				System.out.println(search + "" is present at location ""
						+ (i + 1) + ""."");
				break;
			}
		}

		// Element not in the input array
		if (i == totalCount) {
			System.out.println(search + "" is not present in array."");
		}
	}
}
</pre>
<h2>Output</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Linear : Sequential Search Example in Java"" class=""aligncenter size-full wp-image-9514"" height=""437"" loading=""lazy"" sizes=""(max-width: 665px) 100vw, 665px"" src=""/media/uploads/articles/189/Linear-Sequential-Search-Example-in-Java1.png"" srcset="""" width=""665""/></a></p>
",0,"standard","post"
"Sort Array Ascending or Descending using Comparator in Java","sort-objects-in-java-using-comparator","Quick Java code snippet to sort Array ascending or descending using comparator in Java.","LIVE","<p>Quick Java code snippet to sort Array ascending or descending using comparator in Java.</p>
<pre class=""prettyprint lang-java"">import java.util.Arrays;
import java.util.Comparator;

public class SortFruitObject {

	public static void main(String args[]) {
		Fruit pineappale = new Fruit(""Pineapple"", ""Pineapple description"", 70);
		Fruit apple = new Fruit(""Apple"", ""Apple description"", 100);
		Fruit orange = new Fruit(""Orange"", ""Orange description"", 80);
		Fruit banana = new Fruit(""Banana"", ""Banana description"", 90);

		Fruit[] fruits = new Fruit[4];
		fruits[0] = pineappale;
		fruits[1] = apple;
		fruits[2] = orange;
		fruits[3] = banana;

		Arrays.sort(fruits, FruitNameComparator);
		System.out.println(""Sort by Fruit Name"");
		for (Fruit temp : fruits) {
			System.out.println(temp.toString());
		}
		
		System.out.println(""======================="");		
		Arrays.sort(fruits, fruitQuantityComparator);
		System.out.println(""Sort by Fruit Quantity"");
		for (Fruit temp : fruits) {
			System.out.println(temp.toString());
		}
	}

	public static Comparator&lt;Fruit&gt; FruitNameComparator = new Comparator&lt;Fruit&gt;() {
		public int compare(Fruit fruit1, Fruit fruit2) {
			String fruitName1 = fruit1.getFruitName().toUpperCase();
			String fruitName2 = fruit2.getFruitName().toUpperCase();

			// ascending order
			return fruitName1.compareTo(fruitName2);

			// descending order
			// return fruitName2.compareTo(fruitName1);
		}

	};

	public static Comparator&lt;Fruit&gt; fruitQuantityComparator = new Comparator&lt;Fruit&gt;() {
		public int compare(Fruit fruit1, Fruit fruit2) {

			// ascending order
			return fruit2.getQuantity() - fruit1.getQuantity();

			// descending order
			// return fruit1.getQuantity() - fruit2.getQuantity()
		}

	};
}

class Fruit {
	private String fruitName;
	private String fruitDesc;
	private int quantity;

	public Fruit(String fruitName, String fruitDesc, int quantity) {
		super();
		this.fruitName = fruitName;
		this.fruitDesc = fruitDesc;
		this.quantity = quantity;
	}

	public String getFruitName() {
		return fruitName;
	}

	public void setFruitName(String fruitName) {
		this.fruitName = fruitName;
	}

	public String getFruitDesc() {
		return fruitDesc;
	}

	public void setFruitDesc(String fruitDesc) {
		this.fruitDesc = fruitDesc;
	}

	public int getQuantity() {
		return quantity;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}
	
	@Override
	public String toString() {
		return ""Name="" + getFruitName() + "", Quantity="" + getQuantity();
	}
}
</pre>
<p><strong>Output</strong><br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""sort Array ascending or descending using comparator in Java."" class=""aligncenter size-full wp-image-9520"" height=""420"" loading=""lazy"" sizes=""(max-width: 665px) 100vw, 665px"" src=""/media/uploads/articles/190/sort-Array-ascending-or-descending-using-comparator-in-Java..png"" srcset="""" width=""665""/></a></p>",0,"standard","post"
"Insertion sort example in Java","insertion-sort-example-in-java","Code snippet to sort array using insertion sort algorithm in java.
","LIVE","<p>Code snippet to sort array using insertion sort algorithm in java.</p>
<pre class=""prettyprint lang-java"">public class InsertionSortExample {
	static int step = 1;

	public static void main(String[] args) {

		int[] array = { 17, 21, 191, 3, 23, 45, 34, 9, 1 };

		int n = array.length;
		for (int j = 1; j &lt; n; j++) {
			int key = array[j];
			int i = j - 1;
			while ((i &gt; -1) &amp;&amp; (array[i] &gt; key)) {
				array[i + 1] = array[i];
				i--;
			}
			array[i + 1] = key;
			printNumbers(array);
			
			System.out.println(""n"");
		}
	}

	private static void printNumbers(int[] input) {
		System.out.println(""--- step "" + step + "" ----"");
		step++;

		for (int i = 0; i &lt; input.length; i++) {
			System.out.print(input[i] + "", "");
		}
	}
}
</pre>
<p><strong>Output</strong><br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Insertion sort example in Java"" class=""alignnone size-medium wp-image-9567"" height=""359"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/191/Insertion-sort-example-in-Java-620x359.png"" srcset="""" width=""620""/></a></p>
",0,"standard","post"
"Include Custom Post Types in Your WordPress RSS Feed","how-to-include-wordpress-custom-post-types-to-your-site-rss-feed","What are the Feeds? Feeds are the are the way to distribute your website content beyond readers on&hellip;
","LIVE","<h3>What are the Feeds?</h3>
<p>Feeds are the are the way to distribute your website content beyond readers on Browser. There are thousands of apps such as Feedly, Apple News, Facebook Instant Articles and many more RSS readers applications, that can read your website Feed and present your content to the wider audience.</p>
<p>Readers can also subscribe feeds via their email and get the content delivered directly to their email whenever new posts are published. This allows you to drive traffic to your website and you can also monetize your feeds.</p>
<h3>WordPress Built-in Feeds</h3>
<p>WordPress supports various conventional feed types such as RDF/RSS 1.0, RSS 2.0 and Atom feed out of the box. You don’t need to write any code to enable for your site.</p>
<p>However, it is enabled by default only for the default post types. If your website is using custom post type, you need to ask WordPress to include the custom post type into RSS feed.</p>
<p>The following code snippet will help you to include WordPress custom post types to your website RSS feed.</p>
<p>Add the following snippets to your WordPress theme <code>functions.php</code> file:</p>
<pre class=""prettyprint lang-php"">// Add links to rss feed 
function add_to_custom_feed($qv) {
	if (isset($qv['feed']) &amp;&amp; !isset($qv['post_type']))
		$qv['post_type'] = array('post', 'books', 'events');
	return $qv;
}
add_filter('request', 'add_to_custom_feed');
</pre>
<div></div>
<div>Now save the changes in <code>functions.php</code> file and visit your WordPress site RSS feed URL.</div>
<div></div>
<div>For example, my site URL is http://feeds.feedburner.com/stacktips. Notice that now your RSS Feed will now have the posts from custom post types.</div>
",0,"standard","post"
"Show Posts from Specific Categories to Appear on WordPress HomePage","show-posts-from-specific-categories-to-appear-on-wordpress-homepage","Quick WordPress code snippet to show only the the posts from specific categories to appear on home page recent posts.
","LIVE","<p>Quick WordPress code snippet to show only the posts from specific categories to appear on homepage recent posts. The landing page of most of the news or personal blogging sites usually display the recent posts achieve of the blog unless the front page is set to a static HTML page.</p>
<p>Your blog might have many different categories, but could be annoying to users who just want to show the recent posts from specific categories to appear on homepage recent posts. The following code snippet will help you to do that.</p>
<p>Add the following snippets to your WordPress theme <code>functions.php</code> file:</p>
<pre class=""prettyprint lang-php"">function filter_home_post_categories($query) {
    if ($query-&gt;is_main_query() &amp;&amp; is_home()) {
        $query-&gt;set('category_name','cat_slug1, cat_slug2, cat_slug3');
    }
}
add_action('pre_get_posts', 'filter_home_post_categories');
</pre>
<p>Save the changed and<code>functions.php</code> file and visit your WordPress site home page. Notice that you will see only the posts from the categories as specified in the above function.</p>
",0,"standard","post"
"Key Features of AngularJS That Makes The Future of Web Development","key-features-of-angularjs-that-makes-it-the-future-of-web-development","AngularJS is the high-end open-source web application framework that offers a route of fulfilling influential things. This innovative web software is providing some of the very attractive features not only to web developers, but also to designers. It is becoming one of the integral parts of the industry for scribbling responsive, dignified and productive web software.
","LIVE","<p>In today’s technological scenario, all scales of businesses are looking to expand their dimensions by using cutting-edge technologies. Web application development is among them which have offered an effective and influential route to uplift the business sector. The main purpose of the web application is to impart the potential knowledge and information within minutes to the web users.</p>
<p>AngularJS is the high-end open-source web application framework that offers a route of fulfilling influential things. This innovative web software is providing some of the very attractive features not only to web developers, but also to designers. It is becoming one of the integral parts of the industry for scribbling responsive, dignified and productive web software.</p>
<p>A new-age web software was introduced with an aim to create Single Page Application that can provide elegant and swift user experience to the web users and potential customers.</p>
<h2>When was AngularJS developed?</h2>
<p>AngularJS is a JavaScript framework, which is maintained by Google. It was developed in the year of 2009 by Google engineers Misko Hevery and Adam Aborns. But in 2012, AngularJS has established its significant place among the developers, who have integrated to create a large society of potential users. And today, this web application framework is considered as the future of web development.</p>
<p>Through this blog, we will highlight some of major reasons that why AnjularJS has the potential to become one of the adaptive web development toolkits in the next coming years.</p>
<h3>1. Offers Extensibility</h3>
<p>AngularJS is quickly startup as it don’t have determined conclusion about conversions. In fact, it is considered as a web application development toolbox rather than a framework. This web software is designed to create single page applications with flexibility. It accepts and uses HTML to cater user-centric quality content through two-way data binding. As a developer, you can easily get started in and connect to other technologies. This makes Angular the most extensible tool for the businesses.</p>
<h3>2. Scalable and Dynamic</h3>
<p>Developed to serve the developers and designers by providing them the platform where they can put user integrated aspects on a page first and then allowing engineers to add the logic. This web software has the potential to easily detach the processes of website design and development into well-classified elements. In addition, it allows you to manage swift changes during the development of a single page application. Angular is most suitable for cross-platform distribution. It means that it develops scalable applications that can be used in various devices.</p>
<h3>3. Provides Proficiency</h3>
<p>AngularJS is one of the most exemplary web application tools that have the ability to develop the new-age applications and user experiences such as single-page applications. As the browsers and Smartphone devices are becoming more powerful and thus, it becomes necessary to develop more proficient applications.</p>
<h3>4. Develops Next Generation Applications</h3>
<p>With AngularJS, a developer can develop highly-efficient and sophisticated applications that can compete in the coming future. The desktop browsers like Chrome, Opera, and Firefox are getting more advanced while, on the other side, Chrome on Android, Windows Phone, and IOS6+ are becoming more and more powerful. But, with the support of AngularJS, you can build standard and flexible applications specifically for them.</p>
<h3>5. Offers Long-lasting Feature</h3>
<p>This web application tool is new into the industry but, has the potential to address problems and hurdles during the development of single page applications. AngularJS tool has rooted its place in the industry and still looking to introduce more advanced versions on TypeScript and JavaScript extensions. In fact, many of the popular brands are adopting the AngularJS. It is not only benefitting to YouTube and DoubleClick, but also enhancing the world reckoned companies like HBO, NASA, Sony, Nike, MSNBC and many more.</p>
<p>And more..</p>
<p>https://www.youtube.com/watch?v=u2okVLCrqgE</p>
<h2>Conclusion</h2>
<p>AngularJS has emerged as one of the powerful web application tools that have boosted web design and development solutions. It develops the single page application to deliver excellent user experiences. AngularJS’s flexibility, proficiency, and dynamism make it unique and standard from other web development tools. In fact, in the coming years, this framework will attain robust platform in the industry. This blog has given you the significant reasons that why AngularJS is the future of web development.</p>
<p><strong>Written by:</strong> Lucy Barret<br/>
Lucy Barret is a Sr. WordPress Developer at WPGeeks Ltd, a company that provides <a href=""http://www.hirewpgeeks.com/services/custom-wordpress-development/"" rel=""nofollow noopener noreferrer"" target=""_blank"">WordPress customization</a> services in a convenient manner. She is a passionate writer and loves to share wordpress relates tutorials.</p>
",0,"standard","post"
"LinearLayout Manager Tutorial in Xamarin Android","linearlayout-manager-tutorial-in-xamarin-android","A LinearLayout manager is a most basic type of layout manager, that organizes its child views either horizontally or&hellip;
","LIVE","<p>A <code>LinearLayout</code> manager is a most basic type of layout manager, that organizes its child views either <code>horizontally</code> or <code>vertically</code> based on the value provided in android:orientation property.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android"" 
	android:orientation=""horizontal"" 
	android:layout_width=""fill_parent"" 
	android:layout_height=""wrap_content""&gt; 
	&lt;!-- add children here--&gt; 
&lt;/LinearLayout&gt; 
</pre>
<p>Notice in the above code snippet, the orientation property access two possible values such as <code>vertical</code> or <code>horizontal</code>. This defines the whether the views to be organized vertically or horizontally. We had enough talk about linear layouts; let us move a bit towards the practical implementation of it. To began with let us design a login page layout as shown in the screenshot below. <a href=""http://stacktips.com"" target=""_self""><img alt=""Linear Layout Manager Android"" class=""aligncenter size-full wp-image-9093"" height=""335"" loading=""lazy"" src=""/media/uploads/articles/195/Linear-Layout-Manager-Android.png"" srcset="""" width=""286""/></a> We would add two edit text for the user to enter the username and password and two buttons for Login and Register action. <strong>ActivityMain.axml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:orientation=""vertical""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""&gt;

    &lt;EditText
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/password""
        android:padding=""10dp""
        android:hint=""@string/username_hint"" /&gt;
    
    &lt;EditText
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/password""
        android:padding=""10dp""
        android:hint=""@string/password_hint"" /&gt;
    &lt;Button
        android:id=""@+id/submit""
        android:layout_width=""200dp""
        android:layout_height=""wrap_content""
        android:padding=""10dp""
        android:text=""@string/login"" /&gt;
    &lt;Button
        android:id=""@+id/register""
        android:layout_width=""200dp ""
        android:layout_height=""wrap_content""
        android:padding=""10dp""
        android:text=""@string/register"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<p>As you see in the above layout XML;</p>
<ol>
<li>Linear Layout has two properties as <code>layout_height</code> and <code>layout_width</code>. In android each layout manager/view must supply these two properties to define the height and width of the view in view hierarchy.</li>
<li><code>wrap_ontent</code> – Wraps with the maximum allowed (Parent’s) width or height</li>
<li><code>fill_parent</code> or match_parent –fits the view size to the available size of its parent</li>
<li>If you want to specify a static height or width for any view you can supply values in dp. For example in the above snippet, both the submit and register button has a static width of 200dp.</li>
<li><code>DP</code> – Density independent Pixels, based on physical density of the screen.</li>
</ol>
<h1>Understanding the weight and gravity</h1>
<p>Apart from the orientation attribute, the <code>weight</code> and gravity attribute can affect size and position of child views in a LinearLayout manager.</p>
<h2>android:weight</h2>
<p>You use weight to assign size importance to a control relative to the other controls in the container. Suppose a container has three controls: one has a weight of 1, whereas the others have a weight of 0. In this case, the control whose weight equals 1 will consume the empty space in the container.</p>
<h2>android:gravity</h2>
<p>Gravity is used to specify the alignment of view. For example, if you want to align a TextView’s text to the right, you would set its gravity to right. There are quite a few possible values for gravity, including left, center, right, top, bottom, center_vertical, clip_horizontal, and others.</p>
<p>The above screenshot shows that the Login and Register button is aligned one below other. It would be nicer, if we can align both the buttons horizontally and distribute equal space to each (as shown in the following screenshot).</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""LinearLayout Manager Gravity Weight Xamarin"" class=""aligncenter size-full wp-image-9094"" height=""290"" loading=""lazy"" sizes=""(max-width: 290px) 100vw, 290px"" src=""/media/uploads/articles/195/LinearLayout-Manager-Gravity-Weight-Xamarin.png"" srcset="""" width=""290""/></a></p>
<p>To do so, we have to add another LinearLayout with horizontal orientation and add both the buttons to it. The following code blocks can be used to achieve the result as shown in the above screenshot.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:orientation=""vertical""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""&gt;
    &lt;EditText
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/password""
        android:hint=""@string/username_hint"" /&gt;
    &lt;EditText
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/password""
        android:hint=""@string/password_hint"" /&gt;
    &lt;LinearLayout
        android:orientation=""horizontal""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""&gt;
        &lt;Button
            android:id=""@+id/submit""
            android:layout_width=""200dp""
            android:layout_height=""wrap_content""
            android:padding=""10dp""
            android:text=""@string/login"" /&gt;
        &lt;Button
            android:id=""@+id/register""
            android:layout_width=""200dp""
            android:layout_height=""wrap_content""
            android:padding=""10dp""
            android:text=""@string/register""
            android:layout_weight=""1"" /&gt;
    &lt;/LinearLayout&gt;
&lt;/LinearLayout&gt;
</pre>
<h2>android:gravity vs. android:layout_gravity</h2>
<p>Note that Android defines two similar gravity attributes: <code>android:gravity</code> and <code>android:layout_gravity</code>. Here’s the difference: android:gravity is a setting used by the view, whereas android:layout_gravity is used by the container.</p>
",0,"standard","post"
"A Quick Introduction to View, ViewGroups and Layout Managers in Xamarin Android","a-quick-introduction-to-view-viewgroups-and-layout-managers-in-xamarin-android","Views and ViewGroups Everything that you see in an Android app is a View; buttons, labels, text boxes,&hellip;
","LIVE","<h1>Views and ViewGroups</h1>
<p>Everything that you see in an Android app is a View; buttons, labels, text boxes, and radio buttons are all examples of Views. Views are organized in a hierarchy using various types of ViewGroups. A ViewGroup is a special kind of View which is used to arrange (layout) other Views on the screen.</p>
<h2>User Interface Widgets</h2>
<p>Android provides a comprehensive set of user interface widgets that can be used to build a rich user experience. All of these widgets are subtypes of  View and can be organized into sophisticated layouts using various types of ViewGroups. All of the user interface widgets can be found in the  android.widget package within the Application Framework.</p>
<p>Some of the common UI widgets includes;</p>
<ul>
<li>TextView</li>
<li>EditText</li>
<li>Radio Buttons and Radio button group</li>
<li>CheckBox</li>
<li>Adapter views such as <a href=""/articles/listview-example-in-xamarin-android"">List View</a>, GridView</li>
<li><a href=""/articles/xamarin-android-webview-tutorial"">WebView</a></li>
<li>Spinners, etc.</li>
</ul>
<h1>Declarative Versus Programmatic View Creation</h1>
<p>Views and ViewGroups can be created using two different methods, programmatically or declaratively. When using a programmatic approach,  a developer makes API calls to create and position each individual View on screen. When using a declarative approach, a developer creates XML layout files that specify how Views should be arranged. Visual layout designer embedded to Xamarin Studio and Visual Studio IDE provides extensive support for creating the layout using drag and drop approach. In case of XML declaration, you need to remember each element and property to control the view/layout behavior.</p>
<p>The declarative method enjoys several advantages stated as follows:</p>
<ul>
<li>Provides better separation of the visual design of an application from the processing logic</li>
<li>Allows multiple layouts to be created to support multiple devices or device configurations with a single code base</li>
<li>Development tools, such as Android Studio, Android plugin for Eclipse and Xamarin Studio Android designer, allow you to view the user interface as you build it, without needing to compile and execute your application after each change</li>
</ul>
<p>While most developers prefer the declarative method of view creation, in practice, some combination of programmatic and declarative methods are often required.</p>
<h1>Xamarin Android Layout Managers</h1>
<p>Xamarin.Android offers a collection of view group classes that acts as container for views. These containers are refereed as layout managers. Each of the layout managers can contain one more child views and provides a specific strategy to manage the size and position of its children. For example, the Linear Layout class places its children either horizontally or vertically, one view adjacent to the other.</p>
<p>Following table lists the different types of layout managers available in Xamarin android.</p>
<table class=""reference"">
<tbody>
<tr>
<th><strong>Layout Manager</strong></th>
<th><strong>Description</strong></th>
</tr>
<tr>
<td><a href=""/articles/linearlayout-manager-tutorial-in-xamarin-android"">Linear Layout</a></td>
<td>Position its child views either horizontally or vertically</td>
</tr>
<tr>
<td>Relative Layout</td>
<td>Position its child view relative to others child or parent.</td>
</tr>
<tr>
<td>Table Layout</td>
<td>Position its child on tabular form</td>
</tr>
<tr>
<td>Frame Layout</td>
<td>Allows to change content dynamically</td>
</tr>
<tr>
<td>Grid Layout</td>
<td>Position child views in a grid format</td>
</tr>
<tr>
<td>Absolute Layout (Deprecated)</td>
<td>Allows absolute positioning of child. This layout manager is deprecated and strictly not recommended to use for your app.</td>
</tr>
</tbody>
</table>
<p>All the above layout managers are derived from the View class; therefore all the layout managers can be nested one inside of one another. You can also create a custom layout by extending ViewGroup classes for specific requirements for your project.</p>
",0,"standard","post"
"Xamarin Mobile Application Development for Android – Second Edition Announced","xamarin-mobile-application-development-for-android-second-edition-announced","Book titled &#8220;Xamarin Mobile Application Development for Android&#8221; &#8211; Second Edition is announced and is available to pre-order. This book is&hellip;
","LIVE","<p>Book titled <strong>“Xamarin Mobile Application Development for Android”</strong> – Second Edition is announced and is available to pre-order. This book is expected to be published in <time datetime=""2015-09-30"">September 2015.</time></p>
<p>If you are a C# developer who wants to develop Android apps and enhance your existing skill set, then this book is ideal for you. Good working knowledge of C#, .NET, and object-oriented software development is assumed.</p>
<p>For preorder visit <a href=""https://www.packtpub.com/application-development/xamarin-mobile-application-development-android-second-edition"" rel=""nofollow noopener noreferrer"" target=""_blank"">packtpub.com</a></p>
<p>Technology trends come and go, but few have generated the excitement, momentum, or long-term impact that mobile computing has. Mobile computing impacts people’s lives at work and at home on a daily basis. Many companies and individual developers are looking to become a part of the movement but are unsure how to best utilize their existing skills and assets. The Xamarin suite of products provides new opportunities to those who already have a significant investment in C# development skills and .NET code bases, and would like to enter into this new, exciting world.</p>
<p>This example-oriented guide provides a practical approach to quickly learn the fundamentals of Android app development using C# and Xamarin.Android. It will lead you through building an Android app step-by-step with steadily increasing complexity.</p>
<p>Beginning with an overview of the Android and Xamarin platforms to provide you with a solid understanding of the underlying platform, we gradually walk through building and testing a Points of Interest Android app using C# and the Xamarin.Android product. You will learn to create ListView and add detail view to your Android application. You will handle application behaviors on orientation changes, before learning the different techniques to manage resources and layouts to support multiple screen sizes. You will then access a SQLite database in a cross-platform way and add location features to your application. Finally, you will add camera integration to your application and deploy your app to the various Android app stores.<br/>
<a href=""https://www.amazon.co.uk/Xamarin-Mobile-Application-Development-Android/dp/1785280376"" rel=""nofollow noopener noreferrer"" target=""_blank""><img alt=""Xamarin Mobile Application Development for Android - Second Edition"" class=""alignright wp-image-10328"" height=""250"" loading=""lazy"" src=""/media/uploads/articles/197/Xamarin-Mobile-Application-Development-for-Android-Second-Edition.jpg"" srcset="""" width=""203""/></a></p>
<h2>About This Book</h2>
<div class=""book-info-about-text"">
<ul>
<li>Build and test multi-view Android applications using Xamarin.Android</li>
<li>Work with device capabilities such as location sensors and the camera</li>
<li>A progressive, hands-on guide to develop stunning Android applications using Xamarin</li>
</ul>
</div>
<h2>What You Will Learn</h2>
<div class=""book-info-will-learn-text"">
<ul>
<li>Build a multi-view, orientation-aware Android application with navigation</li>
<li>Lay out content using the LinearLayout, RelativeLayout, and TableLayout layout managers</li>
<li>Use a ListView (AdapterView) and Adapter to build a view that is populated from server data</li>
<li>Consume REST web service to perform GET, UPDATE, DELETE operation</li>
<li>Use Android SQLite for data persistence and caching</li>
<li>Capture the current location of a device, determine the street address, and integrate with the map app</li>
<li>Test, debug, and deploy an Android app</li>
</ul>
</div>
",0,"standard","post"
"7 Tips for Mobile App Project Management","7-tips-for-mobile-app-project-management","It&#8217;s safe to say that mobile app development is just as complex a process as any other IT&hellip;
","LIVE","<p><span class=""drop-cap"">I</span>t’s safe to say that mobile app development is just as complex a process as any other IT project. That’s why strategies used in projects aimed at developing mobile apps are to a large extent similar to those used by managers in other fields. Here are practical tips for making sure you pass the 7 following steps of app development smoothly and efficiently.</p>
<h3>1. Define your objectives</h3>
<p>Every project requires a vision – your role as manger is to define it and communicate it to your team. It’s important that you have a deep understanding of your objectives – only then will you be able to organize and manage the project to match specified requirements. Once you set key details, you’ll be able to start developing your project timeline and establish a provisional budget.</p>
<h3>2. Make a plan</h3>
<p>As a manger, you’ll be the one responsible for the execution of the project. Create a thorough plan and stick to it. Assign roles to developers on the basis of their expertise. Your overall plan should suggest your chosen devices, interaction points, number of screens, typical usage patterns and many other characteristics of your mobile app.</p>
<h3>3. Go visual</h3>
<p>Before you set out to the development process itself, it’s important to know what you’re aiming for. That’s the moment for the UI experts to step in and design the visual style of your app. They’ll make sure that your app offers an engaging user experience and incorporates intuitive call-to-action items to help the app make profit.</p>
<p>Expect a selection of storyboards and mockups to make it your way. They’ll give you an idea about an interface design together with screen wire frames to show you how the app will look like and function.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""storyboard02"" class=""aligncenter wp-image-8969 size-large"" height=""412"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/198/storyboard02-e1433239564359-940x587.png"" srcset="""" width=""660""/></a></p>
<p style=""text-align: left;""><small>Photo credit : ewelinawoloszyn[dot]com</small></p>
<h2>4. The development phase</h2>
<p>This is the key moment in making your app come to life – all the features and functions modeled in previous stages will now become real. Keep tabs on the work of developers as they launch into iterative coding sessions and choose the best algorithms to ensure the app’s great performance. It’s a good idea to have a general developer overlooking the process and reporting directly to you – he’ll make sure that the coding is clean, robust and efficient.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""The development phase"" class=""aligncenter size-full wp-image-8972"" height=""248"" loading=""lazy"" src=""/media/uploads/articles/198/The-development-phase.png"" srcset="""" width=""618""/></a></p>
<h3>5. Testing</h3>
<p>Once the app is ready, it’s time to test it. Even if it takes additional time on your schedule, don’t complain about it. Testing is that crucial moment when the app is ran on various devices, browsers and platforms to check whether it works smoothly, doesn’t contain any glitches and looks just like you planned.</p>
<h3>6. Deploying the app</h3>
<p>Once you’re done testing your app, you’re ready to deploy it. Choose your marketplace carefully – perhaps you’ll need to redefine your marketing strategy once the app is ready and running. Remember that there are many options for deployment apart from iTunes or Google Play store.</p>
<h3>7. Don’t forget about maintenance</h3>
<p>Once the app is out there and gaining popularity, make sure not to lose sight of it. Read reviews carefully and see whether users point to particular features of the app that negatively impact their experience.</p>
<p>After the first round of user testing, you’ll be able to make valuable corrections and release the app once more in a new version. That’s something your marketing team will appreciate as well, as they can build momentum until the very launch of the updated app and leverage the interest for their purposes.</p>
<p>Project management for building mobile apps is much clearer if you approach it in this step by step manner. Follow tips included above and you’ll be on your way to developing great apps in effective time frames.</p>
<p><strong>Post by</strong>: Monique Rivers</p>
<p><em>Monique Rivers is a tech blogger at <a href=""https://ninefold.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Ninefold</a>. She’s also interested in digital marketing and photography. Ninefold offers powerful and easy to use cloud hosting infrastructure.</em></p>
",0,"standard","post"
"Android M – Feature Highlights in the Next Major Android Release","android-m-feature-highlights-in-the-next-major-android-release","Welcome Android M! Android M is the upcoming android version announced that adds up to the count of&hellip;
","LIVE","<p>Welcome Android M! Android M is the upcoming android version announced that adds up to the count of Android operating system. It is not so long ago, Android Lollipop was released, its successor Android M developer preview is revealed in Google I/O 2015. Whether it’s related to designing an app’s layout or an entire user interface; Android versions have always been released with innovative trends that have been well embraced by the Android app development community.</p>
[box style=”0″]
<p><strong>Release date :</strong>  Android M Developer Preview available today for Nexus 5, 6, 7, 9 and Player. Final version is due to launch in Q3, 2015.</p>
[/box]
<p>While some of the features were being asked for a while are improved and some of them are completely new. Here are the features highlight of the Android M preview release.</p>

<p>Let us have a look into each of the features in details and what it means to developers.</p>
<h2><span id=""1_Improved_App_permissions"">1. Improved App permissions</span></h2>
<p>So far all of the Android operating system asks user to accept or reject all permission used by application before app is being installed. User was forced to access each of the permissions for installing the app. For example, lets say an application is accessing both contacts and GPS features, but I would like to allow permission for GPS only and decided not to allow contact to be accessed. This was not possible.</p>
<p>Android M finally simplifies app permissions by a great extent! You don’t have to agree to permissions you don’t need anymore. Android M allows you to selectively turn off permissions for specific features, restricting apps from using them. You can choose your permissions and see which apps have access to it.</p>
<p>This is good news for app developers as well as its faster to get users up and running compared to the previous permission model and allow a seamless app install process.</p>
<h2><span id=""2_Seamless_Web_Experience"">2. Seamless Web Experience</span></h2>
<p>Web today is pushing its priority towards mobile as more and more users prefer to browse that way. Android M keeps their experience in mind and provides a better way to improve that very experience.</p>
<p>Custom chrome tabs is one of the recent announcement from Android M. This allows you to open links from within your app into a ‘Custom Chrome Tab’ that overlays your app screen seamlessly with a transition. The Custom Chrome Tab, adapts to match the look and feel of your app so that you can comfortably browse its content.</p>
<h2><span id=""3_Deep_App_Linking"">3. Deep App Linking</span></h2>
<p>verify linksApp linking is now made possible with Android M. Links can now be provided in the app via Intents in the Manifest file.</p>
<p>This allows content to be more trusted and verifiable making the user aware of the content before actually tapping on it!</p>
<h2><span id=""4_Android_Pay"">4. Android Pay</span></h2>
<p>Android Pay Say goodbye to your wallet! Your phone’s going to take care of your payments from now on thanks to Android M! Android Pay was made with three things in mind: simplicity, security and choice. The payment method is very easy to use and can instantly help you make payments from your phone. This means lesser digging your wallet for those notes, and more of paying quick (like a boss).</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Android pay"" class=""alignright wp-image-9865"" height=""250"" loading=""lazy"" src=""/media/uploads/articles/199/Android-pay.png"" srcset="""" width=""250""/></a></p>
<p>The payment process itself is entirely secure in Android M. Being an open source platform, security is one of the highest concerns and Google hasn’t forgotten this.</p>
<p>Virtual Account Number :  A virtual account number is used the entire time to process the payment. This means that your actual card number is not known or used in the transaction itself.</p>
<p>Android Pay provides users the flexibility and choice in choosing their payment methods. You can hook up any supportive banking app to Android Pay, existing credit or debit cards as well. They’re even working with mobile carries such as Sprint, Verizon and T-Mobile. It works with any devices having NFC support.</p>
<h2><span id=""5_Inbuilt_Fingerprint_Support"">5. Inbuilt Fingerprint Support</span></h2>
<p><img alt=""Fingerpring scan"" class=""alignright wp-image-9867"" height=""250"" loading=""lazy"" src=""/media/uploads/articles/199/Fingerpring-scan.png"" srcset="""" width=""250""/>Honestly, I would’ve flipped, hadn’t Google announced this. We’ve already seen Apple do this on their iPhones putting it to creative uses and its about time Google did with Android too.</p>
<p>Your fingerprint can now be used to process payments, make purchases on the Play Store and even unlock your device!</p>
<p>Any developer could use it within their apps to authenticate either a payment or process using the fingerprint APIs.</p>
<h2><span id=""6_Power_and_Charging"">6. Power and Charging</span></h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Faster charging"" class=""alignright wp-image-9868"" height=""222"" loading=""lazy"" src=""/media/uploads/articles/199/Faster-charging.png"" srcset="""" width=""250""/></a></p>
<p>Smartphones always faced the problem of not holding enough charge, and if you’re a mobile data user, you’d probably be tagging along a power brick all the time!</p>
<p>With more features being added in, the gravity of power management went higher. Android M kept this in mind and came up with a solution for it.</p>
<p><strong>Say hello to Doze!</strong></p>
<p>Doze is your smart(er) power management solution in Android M. While the device is asleep it manages power smartly, putting the device on a standby mode, while still handling the high priority messages and notifications you receive.</p>
<p>During a test, Android M Developer Preview was capable of lasting x2 times longer than the same device running Android Lollipop.</p>
<h2><span id=""7_Other_Features_and_Highlights"">7. Other Features and Highlights</span></h2>
<p>So thats M. While those were definitely the highlights, Android M Developer Preview still had a few aces up its sleeve for the reveal. Smaller, yet significant.</p>
<h4><span id=""New_USB_Type-C_Standard"">New USB Type-C Standard</span></h4>
<p>We’ve seen this in Apple’s new MacBook and we’ve all talked a lot about how not many support it. Google is really pushing this forward with Android M for it to be the new standard.</p>
<p>The new USB type allows for much faster charging of devices. Almost 3-5 times faster! You could either charge using the port, or use the phone itself as a charger for other supporting devices. Here comes my favourite feature: The USB pin is finally flippable!</p>
<h4><span id=""Improved_Word_Selection"">Improved Word Selection</span></h4>
<p>Android M finally understood our need to copy paste certain text by letting us do just that, easier, faster and above all, more intuitively. Copying and selecting parts of texts is no longer frustrating and it also provides a hovering Tooltip letting us to select actions such as copy and paste.</p>
<h4><span id=""Easier_Sharing"">Easier Sharing</span></h4>
<p>While Android did promote sharing of content/ media across apps, it really was downright annoying to do so. For instance, I often share on WhatsApp to my circle of friends. Me having to scroll all the way down to choose WhatsApp, isn’t always the easiest thing to do.</p>
<p>Android M gives users easier sharing by providing options to share from apps which you use the most and with which you share more. It now shows you app suggestions accordingly. Neat!</p>
<h4><span id=""Simplified_Volume_Controls"">Simplified Volume Controls</span></h4>
<p>I don’t know what’s up with Android Lollipop’s volume controls. I mean Material Design was great, I loved it. Was a delight to use, but man those volume controls.</p>
<p>Cheers to the fact that Android M got that straight with simplified volume controls that are easier to use and actually make more sense compared to Lollipop!</p>
",0,"standard","post"
"SharedPreferences Example in Xamarin Android","shared-preferences-example-in-xamarin-android","Shared preferences are persistence key/value data pairs, used to store primitive data pairs such as bool, float, int, string and long. The data saved into android preference are persisted across different user sessions and is private to the application it is created. Any other application cannot access to it.
","LIVE","<p>Shared preferences are persistence key/value data pairs, used to store primitive data pairs such as bool, float, int, string and long. The data saved into android preference are persisted across different user sessions and is private to the application it is created. Any other application cannot access it.</p>
<p>For using shared preference to saving data pairs, you need first get an instance of <code>ISharedPreferences</code> interface. A shared preference can be specific to an activity or made global to all activities in the application. If you want to create a single preference file specific to an activity you can use <code>Activity.GetPreferences</code> to initialize ISharedPreferences interface. For getting the application level preference, you can call <code>GetSharedPreferences</code> method passing the preference name and mode of operation.</p>
<pre class=""prettyprint lang-cs"">ISharedPreferences prefs = Application.Context.GetSharedPreferences (""PREF_NAME"", FileCreationMode.Private);</pre>
<p>Now let us call <code>Edit()</code> to get an instance of <code>ISharedPreferencesEditor</code>. This batches all of the changes made to value in shred preferences and saves only when there is a call to <code>Commit()</code> or <code>Apply()</code> is made.</p>
<pre class=""prettyprint lang-cs"">ISharedPreferencesEditor editor = prefs.Edit();
editor.PutInt(""your_key1"" ,10);
editor.PutString(""your_key2"", ""Xamarin Example"");
editor.Apply();
</pre>
<p>To read values from shared preferences, we can use methods such as <code>GetString()</code>, <code>GetInt()</code>, <code>GetFloat()</code> etc. by providing proper key. The following snippets retrieves the values stored in the above step.</p>
<pre class=""prettyprint lang-cs"">var value1 = prefs.GetInt (""your_key1"", 0);
var value2 = prefs.GetString (""your_key2"", null);
</pre>
",0,"standard","post"
"Google has Recently Released Beta Version of a Publisher Plugin for WordPress","google-has-recently-released-beta-version-of-a-publisher-plugin-for-wordpress","Google publisher plugin connects your self hosted WordPress website with Google AdSense publisher console. This gives direct access&hellip;
","LIVE","<p>Google publisher plugin connects your self hosted WordPress website with Google AdSense publisher console. This gives direct access to monazite your website property without leaving your WordPress admin console.</p>
<p>What you can do with the Google Publisher plugin?</p>
<ul>
<li>The plugin integrates with your Google AdSense account. This means now you don’t need to worry about any other third party plugin for manual code placemat into your website. It is now made handy to place code and monetise your ad space efficiently.</li>
<li>It also supports Google webmaster tools. The webmaster tool provides the detailed report about your page visibility on Google. The plugin allows you to verify your site on Webmaster Tools with just one click.</li>
</ul>
<p>To install and use this plugin into your WordPress installation, you need to have the following minimum configurations</p>
<p>PHP version: minimum 5.2.0</p>
<p>WordPress: minimum 3.0</p>
",0,"standard","post"
"Our Apologies for Server Downtime This Evening","our-apologies-for-server-downtime-this-evening","Dear Readers, Some of you may have noticed that out site JavaTechig experienced an extended downtime this evening&hellip;
","LIVE","<p>Dear Readers,</p>
<p>Some of you may have noticed that out site JavaTechig experienced an extended downtime this evening for about two hours. It stopped our reader to access the site or saw a little weird error notice. Unfortunately, we had a key server crash during our routine maintenance, and it took much longer for us to restore the services back in action. The good news is that everything on the site is back in action and working properly now.  If you are still experiencing any issues, please let us know and we’ll look into them ASAP. </p>
<p>We sincerely apologize for any inconvenience caused during the downtime. We will be more cautioned and will do the required infrastructure modifications to avoid such undesirable downtime in the future, or to minimize to very least. </p>
<p>So sorry again for the inconvenience.  We hope you’re all enjoying the site otherwise.</p>
<p>Thank you!</p>
",0,"standard","post"
"Android Dialog Fragment Example","android-dialog-fragment-example","Dialog is like any other window that pops up in front of current window, used to show some short message, taking user input or to accept users decision. Unlike Toast, a dialog is generally used where user attention is mandate.","LIVE","<h2><span id=""1_Introduction"">Dialogs in Android</span></h2>
<p>The dialog is like any other window that pops up in front of the current window, used to show some short message, taking user input or to accept users decision. Unlike Toast, a dialog is generally used where user attention is mandated. </p><p>Android supports several different ways to create a dialog such as <code>AlertDialog</code> and <code>FragmentDialog</code>. This example will widely cover all the aspect of DialogFragment.</p>
<p>Since the release of Android 3.0 (API level 11), the fragment can show as a dialog and call as <code>DialogFragment</code>. If you’re supporting older android versions, you can make use of fragment-compatibility support library.</p>
<p>To create a dialog fragment, we will be using <code>android.app.DialogFragment</code> class. This class is derived from the Fragment and behaves much like a fragment with all available fragment lifecycle methods.</p>
<p>In the following sections, you learn how to use dialog fragment to show a simple alert dialog from activity.</p>
<h2><span id=""2_Creating_dialog_fragment"">Creating Dialog Fragment</span></h2>
<p>First step towards creating dialog fragment is to create a new class and extend it from DialogFragment. In the following code snippet, I am creating a new class named <code>MyDialogFragment</code>.</p>
<pre class=""prettyprint lang-java"">public class MyDialogFragment extends DialogFragment {

}</pre>
<p>As a DialogFragment is much like any other fragment, the same lifecycle rules are applied. Now we have to override <code>onCreateView</code> or <code>onCreateDialog</code> method to provide the view hierarchy and construct the dialog fragment.</p>
<pre class=""prettyprint lang-java"">public class MyDialogFragment extends DialogFragment {
    
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_sample_dialog, container, false);
        getDialog().setTitle(""Simple Dialog"");
        return rootView;
    }
}</pre>
<p>In the above code, the <code>onCreateView()</code> method is expected to return the instance of view that represent the view hierarchy for your dialog. The instance of layout inflater can be used to inflate the layout for the fragment. ViewGroup represents the parent view where the fragment to be attached, and the Bundle param is the saved bundle data if available to restore the fragment to previous state.</p>
<h2><span id=""3_Defining_dialog_fragment_layout"">Defining Dialog Fragment Layout</span></h2>
<p>Notice that, we are using <code>fragment_sample_dialog</code> layout form <code>onCreateView()</code> method, which is not declared anywhere. Let us create a simple layout that displays an ImageView and TextView as shown in the following screenshot.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:gravity=""center""
    android:padding=""10dp""
    android:orientation=""vertical""&gt;

    &lt;ImageView
        android:id=""@+id/image""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:src=""@drawable/image"" /&gt;

    &lt;TextView
        android:id=""@+id/title""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Lorem ipsum dolor sit amet...""
        android:textSize=""20dp"" /&gt;

    &lt;Button
        android:id=""@+id/dismiss""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:text=""Dismiss"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<h2><span id=""4_Displaying_dialog_fragment"">Displaying Dialog Fragment</span></h2>
<p>We are pretty much done with creating dialog fragment. Put the following code snippet in Activity to show the dialog when user clicks on the button.</p>
<pre class=""prettyprint lang-java"">FragmentManager fm = getFragmentManager();
MyDialogFragment dialogFragment = new MyDialogFragment ();
dialogFragment.show(fm, ""Sample Fragment"");
</pre>
<p>At this point we can run the application and it will produce the output as shown in the following screenshot.<br>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Android DialogFragment Example"" class=""aligncenter size-full wp-image-8811"" height=""465"" loading=""lazy"" sizes=""(max-width: 800px) 100vw, 800px"" src=""/media/uploads/articles/203/Android-DialogFragment-Example.png"" srcset="""" width=""800""></a></p>
<h2><span id=""5_Dismiss_dialog_fragment"">Dismiss Dialog Fragment</span></h2>
<p>Dialog fragment can be dismissed by calling <code>dismiss()</code> method from <code>MyDialogFragment</code> class. Place the following code snippet in MyDialogFragment <code>onCreateView()</code> method before return statement to dismiss the dialog when user clicks on Dismiss button.</p>
<pre class=""prettyprint lang-java"">Button dismiss = (Button) rootView.findViewById(R.id.dismiss);
dismiss.setOnClickListener(new View.OnClickListener() {

    @Override
    public void onClick(View v) {
          dismiss();
    }
});
</pre>
<p>The fragment dialog dismiss() method dismiss the dialog by removes the fragment from fragment manager, and then commit the fragment transaction.</p>
<h2><span id=""6_Dialog_Fragment_using_onCreateDialog"">Dialog Fragment using onCreateDialog()</span></h2>
<p>There are two approaches to attach view group hierarchy to a dialog. Either we can override <code>onCreateView()</code> method and inflate layout as we have done in the step, or alternatively we can override <code>onCreateDialog()</code> method and supply a dialog instance. The following code hows how to create dialog fragment using onCreateDialog method.</p>
<pre class=""prettyprint lang-java"">@Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
    builder.setTitle(""Simple Dialog"");
    builder.setMessage(""Some message here"");

    builder.setPositiveButton(""Ok"", new DialogInterface.OnClickListener() {
        @Override
        public void onClick(DialogInterface dialog, int which) {
            dismiss();
        }
    });

    builder.setNegativeButton(""Cancel"", new DialogInterface.OnClickListener() {
        @Override
        public void onClick(DialogInterface dialog, int which) {
            dismiss();
        }
    });

    return builder.create();
}</pre>",0,"standard","post"
"Android Developer Days 2015 Waits You","android-developer-days-2015-waits-you","Preparations for Android Developer Days 2015 continue. In addition to talks made by experts on their fields, there will be many workshops like Android 101, Cardboard, Android Wear. There will also be a hackathon that will last 24 hours.
","LIVE","<p>Preparations for Android Developer Days 2015 continue. In addition to talks made by experts on their fields, there will be many workshops like Android 101, Cardboard, Android Wear. There will also be a hackathon that will last 24 hours.</p>
<p>Android Developer Days is going to take place in <strong>METU Cultural and Convention Center, Ankara, Turkey on May 11/12 2015</strong>. It is again free and open to everyone. We are again open to add new organizers to conference. Let’s be together and grow this community event together. Please keep in mind, a retweet is also a support for this event and community.</p>
<p>Here is the <a href=""http://www.androiddeveloperday.com/2015/register/"" rel=""nofollow noopener noreferrer"" target=""_blank"">registration page</a> of ADD 2015, you can register for free.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Android Developer Days"" class=""aligncenter size-full wp-image-8754"" height=""518"" loading=""lazy"" sizes=""(max-width: 920px) 100vw, 920px"" src=""/media/uploads/articles/204/Android-Developer-Days.jpg"" srcset="""" width=""920""/></a></p>
<h2>Share Your Knowledge and Experience in ADD</h2>
<p>Developer events are great places for meeting other developers. You can learn many things from other developers. And also you can share your knowledge and experience with other developers. You can inspire many people with your talk. If you don’t want to miss this opportunity, you can apply and become a speaker at Android Developer Days. Here is the <a href=""http://goo.gl/forms/QLDW6s9gzn"" rel=""nofollow noopener noreferrer"" target=""_blank"">Android Developer Days Call For Papers Form </a>. You can submit any subject including the subjects <a href=""http://www.androiddeveloperdays.com/2015/blog/share-your-knowledge-and-experience-in-add/"" rel=""nofollow noopener noreferrer"" target=""_blank"">here</a>. Deadline for Call For Papers is <strong>1st April 2015</strong>. Don’t be late, For attendees, register for free on <a href=""http://www.androiddeveloperdays.com/2015/blog/share-your-knowledge-and-experience-in-add/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Registration Web Page </a>.</p>
<h2>Featured Speakers are Announced</h2>
<p>You can listen and ask questions to the experts directly. It is will be a great opportunity to contact them directly.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""ADD Featured Speakers"" class=""aligncenter size-full wp-image-8755"" height=""246"" loading=""lazy"" sizes=""(max-width: 938px) 100vw, 938px"" src=""/media/uploads/articles/204/ADD-Featured-Speakers.png"" srcset="""" width=""938""/></a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""ADD Speakers"" class=""aligncenter size-full wp-image-8756"" height=""550"" loading=""lazy"" sizes=""(max-width: 893px) 100vw, 893px"" src=""/media/uploads/articles/204/ADW-Speakers.png"" srcset="""" width=""893""/></a></p>
",0,"standard","post"
"How to Add an Event to Device Calendar in Android","how-to-add-event-to-calendar-in-android","In this post, we will learn how to add an event to your device calendar. Android allows us to invoke activities from other application using intent. Here in this example, we will be using the appropriate intent to invoke the default calendar application, and pre-filled with event details. User must must confirm to add the event, or can change, edit any of the details associated with a particular events.
","LIVE","<p>In this post, we will learn how to add an event to your device calendar in android.</p>
<p>Android allows us to invoke activities from other application using intent. Here in this example, we will be using the appropriate intent to invoke the default calendar application, and pre-filled with event details. The user must confirm to add the event, or can change, edit any of the details associated with particular events.</p>
<p>Use the following code snippet to invoke the default calendar event.</p>
<pre class=""prettyprint lang-java"">Intent intent = new Intent(Intent.ACTION_INSERT_OR_EDIT);
intent.setType(""vnd.android.cursor.item/event"");
startActivity(intent);
</pre>
<p>The above snippet will invoke the calendar application with empty fields and allow user to enter the event details before adding. However, you can pre-fill the event details by passing the details in the form of intent extras. The Extras values describes the event details, such as event start time, event end time, event title, event description, etc.</p>
<p>The following two class are important to understanding for adding the events.</p>
<ol>
<li><code>CalendarContract</code> : Defines the data model of calendar and event related information. This data is stored in a number of tables, listed below.</li>
<li><code>CalendarContract.Events</code>: This table holds the event-specific information. Each row in this table has the information for a single event—for example, event title, location, start time, end time, and so on. The event can occur one-time or can recur multiple times. Attendees, reminders, and extended properties are stored in separate tables. They each have an EVENT_ID that references the _ID in the Events table.</li>
</ol>
<p>The following code bundle can be used to pass the information to calendar intent.</p>
<pre class=""prettyprint lang-cs"">intent.putExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, startTime);
intent.putExtra(CalendarContract.EXTRA_EVENT_END_TIME,endTime);
intent.putExtra(CalendarContract.EXTRA_EVENT_ALL_DAY, true);
intent.putExtra(Events.TITLE, ""Neel Birthday"");
intent.putExtra(Events.DESCRIPTION, ""This is a sample description"");
intent.putExtra(Events.EVENT_LOCATION, ""My Guest House"");
intent.putExtra(Events.RRULE, ""FREQ=YEARLY"");
</pre>
<p>Most of the statements except the RRULE are self explanatory. The RRULE defines the repeat frequency for the events and follows the standard iCalendar recurrence rule format (see <a href=""http://www.kanzaki.com/docs/ical/rrule.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">RFC 5544</a> for details).</p>
<p>The output of the above code is as follows.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""How to add event to calendar in Android"" class=""aligncenter size-full wp-image-8749"" height=""650"" loading=""lazy"" sizes=""(max-width: 920px) 100vw, 920px"" src=""/media/uploads/articles/205/How-to-add-event-to-calendar-in-Android.png"" srcset="""" width=""920""/></a></p>
[download url=”https://github.com/javatechig/Add-Calendar-Event-Android”]
",0,"standard","post"
"8 Surefire Tips For Your Mobile App Success","8-surefire-tips-for-your-mobile-app-success","Be it Java or any other platform, Android or other OS’s,mobile app development is everywhere and a popular&hellip;
","LIVE","<p>Be it Java or any other platform, Android or other OS’s,mobile app development is everywhere and a popular revenue source for developers. Yet, only a fraction of them taste success. Whether it’s an app for commercial use or an enterprise rollout,the goal of any app is to get user acceptance and adoption.Irrespective of the platform, there are a few basic pointers that are common. With that in mind, we’ve put together some tips to make your app concept as fool proof as possible because it is just too easy to go unnoticed.</p>
<h2>Get Your ResearchHatOn!</h2>
<p>You think your app idea is awesome. It could truly be, yet, double-checking the app storeand a simple Google search will save you a lot of time (and money). Knowing what’s out there only helps refine and avoid pitfalls or failure.</p>
<p>From our experience, the “research phase” of your app plan should be your first priority. You should conduct thorough research of the mobile app landscape, in particular, looking to seeif your app idea is unique or not. Also, if your idea already has been developed and is in the market. If it does exist, don’t be discouraged. This may actually be a positive. Look at existing apps and see how your idea could build features that help your app stand apart. At times, a few little enhancements or integrations can do wonders and rocket your app to unexpected levels. The bottom line: Research, research, research!</p>
<h2>Take The Platform Quiz Early</h2>
<p>This is probably the easiest one: Which platform should you develop on? Well, there are only two platforms to compare – Apple &amp; Android. Currently, there are more Android phones being sold than Apple. But, stats aren’t everything. For your app, think about the user type/the market and then what device that user is most likely to use. Align your solution with respect to the potential device; meaning to target one device at one given point of time. Once it clicks, you could proceed on to the other platform better prepared and more confidence.</p>
<h2>Make Sure Your App AddsValue</h2>
<p>By now you should have an idea of why your app is unique/how it helps and adds value to users. It’s no secret that the app market is thriving, owing to the thousands of available apps, hence it is imperative to offer something extra (a.k.a add value to the users). One of the best ways is to reward the users each time they use your app – it could be anything, such as offering discounts for in –app purchase oroffering more informative content, special offers and so on.</p>
<h2>Have A Great App Design</h2>
<p>First impressions are extremely important for apps – in order for your app to succeed, it has to look/feel great. The look and the feel of your app is going to influence adoption of your app and if will be successful. Make sure the images, graphics and the pictures are high resolution and the color definitions are crystal clear irrespective of the OS and the device.</p>
<h2>Make Sure The FunctionalityIs Pretty Perfect</h2>
<p>If a user downloads your app, it should work. Period. It should work effortlessly across devices. Make sure yourigorously test all the functionalities, ensuring that everything works perfectly on all possible devices. Leave no functionality untested, as one error may lead to another and a slight delay or malfunction makes the app crash.</p>
<h2>Make Sure It’s User Friendly</h2>
<p>Never forget: Appsaremade for the user and haveto beeasy/intuitiveto use.Keep the interface grounded and simple as not all users willbe tech-savvy or have the patience to explore your app. No clutter, no distortion, no irrelevant content, no delays or unnecessary add-ons for your app.</p>
<h2>Give The User APart To Play</h2>
<p>Yes, personalization is loved by all! It is undoubtedly the clear winner. If your app can do that, you’ll get user adoption much quicker.The personalization touches don’t have to be big ones. The personalization can be in the form of changing colors, backgrounds and much more. But remember to draw the line at the right user-levels and abilities – you don’t want users to have too much control of the app. Too much control can be overwhelming and, well, bad to maintain control.</p>
<h2>Cater To The New Age Audience</h2>
<p>Keeping up with the user’s pace of adapting to technology may seem tough, yet it definitely is an essential in order to remain relevant. Deliver off-line capabilities to lend resourcefulness and reliability and your user will keep coming back to you. Non-dependence from network connectivity is a huge liberation.</p>
<p>This is an age of social networking, if your app can help connect your user to the social networks, that’s great. This is a boon as integrating on social networks increases app-sharing and increases visibility to amazing levels.</p>
<p>These are just a few tips and with the app industry still growing, the possibilities are endless.</p>
<p>Happy App-ing!</p>
<p><strong>Post by</strong>: Mathumunisamy</p>
<p><em>Mathumunisamy is the Digital Marketing Lead at <a href=""http://innoppl.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Innoppl.</a> He is passionate about digital marketing trends, tools and techniques, mobile app and the web development industry.</em></p>
",0,"standard","post"
"Serializing .NET object using JSON.NET and ContractResolver example","serializing-net-using-json-net-and-contractresolver-example","JSON.NET is one of the popular, advanced and high-performance JSON framework for .NET. Here in this example we will look at following use cases for serializing .NET object into JSON String.
","LIVE","<p>JSON.NET is one of the popular, advanced and high-performance JSON framework for .NET. Here in this example, we will look at following use cases for serializing the .NET object into JSON String.</p>

<h1><span id=""1_Declaring_entity_class"">1. Declaring entity class</span></h1>
<p>Before we begin with the example, let us take declare the entity class to be serialized. For the sake of simplicity, this example uses a simple entity class Employee with the following attributes.</p>
<pre class=""prettyprint lang-cs"">public class Employee
{
	public int EmpId { get; set; }
	public string Name { get; set; }
	public double Salary { get; set; }
	public string Department { get; set; }
	public bool IsSingle { get; set; }
}
</pre>
<h1><span id=""2_Serializing_NET_object_using_JSONNET"">2. Serializing .NET object using JSON.NET</span></h1>
<p>JSON.NET presents easy method of serializing .NET object into JSON string. All you have to do is include <code>Newtonsoft.Json</code> namespace and call <code>JsonConvert.SerializeObject</code> by passing the object for serialization.</p>
<pre class=""prettyprint lang-cs"">public static void Main (string[] args)
{
	//Creating a new emplyoee entity object
	Employee e = new Employee ();
	e.EmpId = 1001;
	e.Name= ""Nilanchala"";
	e.IsSingle = true;
	e.Department=""Engineering"";

	string json = JsonConvert.SerializeObject(e);
	Console.WriteLine(json);
}
</pre>
<p>The output of the above code is depicted in the following screenshot</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Serializing .NET object using JSON.NET"" class=""size-full wp-image-8529 aligncenter"" height=""141"" loading=""lazy"" sizes=""(max-width: 702px) 100vw, 702px"" src=""/media/uploads/articles/207/Serializing-.NET-object-using-JSON.NET_.png"" srcset="""" width=""702""/></a></p>
<h1><span id=""3_Serialize_and_indent_JSON_using_JSONNET"">3. Serialize and indent JSON using JSON.NET</span></h1>
<p>As you can see in the screenshot above, the JSON object is not readable. It can be formatted with indent using the <code>Formatting.Indented</code> parameter.</p>
<pre class=""prettyprint lang-cs"">string json = JsonConvert.SerializeObject(e, Formatting.Indented);
Console.WriteLine(json);
</pre>
<p>Output of the above code snippet is as shown in the screenshot below</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Serialize and Indent using JSON.NET"" class=""aligncenter wp-image-8531 size-full"" height=""185"" loading=""lazy"" sizes=""(max-width: 701px) 100vw, 701px"" src=""/media/uploads/articles/207/Serialize-and-Indent-using-JSON.NET_.png"" srcset="""" width=""701""/></a></p>
<h1><span id=""4_Skip_attributes_using_annotation_in_JSONNET"">4. Skip attributes using annotation in JSON.NET</span></h1>
<p>Notice that in the above two steps, we are serializing all of the attributes of the entity class. But in realtime, you may have to skip some of the attributes while converting .NET object into JSON string. The following two sections will show you how to achieve it.</p>
<p>There are two ways to achieve this. The simplest way is to do it by using annotation. All you have to do is to add some of the annotation fields to your entity class. In this method you don’t need to do any changes to the code for serialization.</p>
<pre class=""prettyprint lang-cs"">[JsonObject(MemberSerialization.OptIn)]
public class Employee
{
	[JsonProperty]
	public int EmpId { get; set; }
	[JsonProperty]
	public string Name { get; set; }
	[JsonProperty]
	public double Salary { get; set; }
	[JsonProperty]
	public string Department { get; set; }

	//Do not serialize this
	public bool IsSingle { get; set; }
}</pre>
<p>As you can notice, we are skipping IsSingle attribute for deserializing. The following screenshot depicts the output.<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Skip attributes using annotation while serializing in JSON.NET"" class=""aligncenter size-full wp-image-8537"" height=""168"" loading=""lazy"" sizes=""(max-width: 702px) 100vw, 702px"" src=""/media/uploads/articles/207/Skip-attributes-using-annotation-while-serializing-in-JSON.NET_.png"" srcset="""" width=""702""/></a></p>
<h1><span id=""5_Skip_attributes_using_ContractResolver"">5. Skip attributes using ContractResolver</span></h1>
<p>The above step is sweet easy step to skip the attributes. However, you can still do the same without changing your entity class and using ContentResolver.</p>
<p>Extend your DefaultContractResolver class and override <code>CreateProperties()</code> method. Notice that CreateProperties() method returns of <code>JsonProperty</code> to be serialized.</p>
<pre class=""prettyprint lang-cs"">public class SkipKeysContractResolver : DefaultContractResolver
{
	private IList&lt;string&gt; attributesList = null;
	public SkipKeysContractResolver(IList&lt;string&gt; propertiesToSerialize)
	{
		attributesList = propertiesToSerialize;
	}

	protected override IList&lt;JsonProperty&gt; CreateProperties(Type type, MemberSerialization memberSerialization)
	{
		IList&lt;JsonProperty&gt; properties = base.CreateProperties(type, memberSerialization);
		return properties.Where(p =&gt; attributesList.Contains(p.PropertyName)).ToList();
	}
}</pre>
<p>Now use the following code</p>
<pre class=""prettyprint lang-cs"">//List properties to be seriliazed 
List&lt;string&gt; propertiesToSerialize = new List&lt;string&gt;(new string[] {""EmpId"", ""Name"", ""Salary"", ""Department"" });

// Create a contract resolver
SkipKeysContractResolver contractResolver = new SkipKeysContractResolver(propertiesToSerialize);
var settings = new JsonSerializerSettings ();
settings.ContractResolver = contractResolver;
string json = JsonConvert.SerializeObject(e, Formatting.Indented, settings);
Console.WriteLine(json);</pre>
<p>The output of the above code is the same as the above screenshot.</p>
<h1><span id=""6_Lowercase_all_keys_using_ContractResolver"">6. Lowercase all keys using ContractResolver</span></h1>
<p>JSON.NET serializes the .NET objects into JSON by maintaining the case of each attribute. The following code snippet will help you to change all the keys to upper case or lower case.</p>
<pre class=""prettyprint lang-cs"">public class LowercaseContractResolver : DefaultContractResolver
{
	protected override string ResolvePropertyName(string key)
	{
		return key.ToLower();
	}
}
</pre>
<p>Now instantiate LowercaseContractResolver and add it to JsonSerializerSettings.</p>
<pre class=""prettyprint lang-cs"">var settings = new JsonSerializerSettings();
settings.ContractResolver = new LowercaseContractResolver();
string json = JsonConvert.SerializeObject(e, Formatting.Indented, settings);
Console.WriteLine(json);</pre>
<p>Output of the above code is depicted below<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Lowercase all keys in serializing JSON.NET"" class=""aligncenter size-full wp-image-8540"" height=""177"" loading=""lazy"" sizes=""(max-width: 708px) 100vw, 708px"" src=""/media/uploads/articles/207/Lowercase-all-keys-in-serializing-JSON.NET_.png"" srcset="""" width=""708""/></a></p>
",0,"standard","post"
"Consuming REST Web Service and Deserializing Response Using Json.NET in Xamarin Android","consuming-rest-web-service-in-xamarin-android","Consuming data from web services is the most common task and very integral part to most of the full-fledged mobile application. In this tutorial we will take a look into various key concepts and steps for consuming web service methods from Xamarin Android application.
","LIVE","<p>Consuming data from web services is the most common task and very integral part to most of the full-fledged mobile application. In this tutorial we will take a look into various key concepts and steps for consuming web service methods from Xamarin Android application. This tutorial explains the following key concepts.</p>

<h1><span id=""1_Understanding_web_service_basics"">1. Understanding web service basics</span></h1>
<p>Web services are the server side applications that are meant to serve data or logic to various client applications. REST and SOAP are the industry standard web service architecture widely used. The data shared to client can be of various media formats, it can be plain text data, XML, JSON, audio, video or other supporting formats.</p>
<p>Android application doesn’t care of which language the web service is developed in. All you need to know is the specification of the API Application Programming Interface). The specification includes, request method such as (GET, POST, PUT, DELETE), header metadata such as accept-type, content-type, etc.</p>
<p>In this example, we will be consuming the following API to fetch list of latest posts from JavaTechig.</p>
<p><strong>URL Endpoint:</strong> <a href=""http://stacktips.com/api/get_category_posts/?dev=1&amp;slug=android"" target=""_blank"">http://stacktips.com/api/get_category_posts/?dev=1&amp;slug=android</a><br/>
<strong>Request Method:</strong> GET<br/>
<strong>Accept-Type:</strong> “application/json”<br/>
<strong>Response: </strong><br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""JSON Feed Response"" class=""aligncenter size-large wp-image-5736"" height=""588"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/208/JSON-Feed-Response-940x838.png"" srcset="""" width=""660""/></a></p>
<h1><span id=""2_Declare_entity_class"">2. Declare entity class</span></h1>
<p>Now that we have fair understanding of the structure of response, lets us go ahead with declaring an entity class that holds the repose received. Notice that the response is quite big and structure looks complex.</p>
<p>From the above response, we will use only the list of recent posts from the above response and ignore the other data. Let us create an entity class “Post” with the following attributes.</p>
<pre class=""prettyprint lang-cs"">public class Post
{
     public int Id { get; set;}
     public string Url { get; set; }
     public string Title { get; set; }
}</pre>
<h1><span id=""3_Asynchronous_programming_withasync_await"">3. Asynchronous programming with async await</span></h1>
<p>Downloading data from server is a long running task, and hence we must create a new thread to perform such operations. We can make use of <code>System.Threading</code> namespace classes to create a new thread or simply use <code>async</code>, <code>await</code> keywords. The async and await are two keywords introduced since .NET 4.5 helps programmers to execute code asynchronously without writing your own thread. All you have to do is to define async keyword in your method declaration and use await keyword for any long running tasks.</p>
<pre class=""prettyprint lang-cs"">public async void DownloadDataAsync() {
	string url = ""http://stacktips.com/api/get_category_posts/?dev=1&amp;slug=android""
	
	var httpClient = new HttpClient();
	Task&lt;string&gt; downloadTask = httpClient.GetStringAsync(url);
	string content = await downloadTask;	
	Console.Out.WriteLine(""Response: \r\n {0}"", content);
}</pre>
<h1><span id=""4_Deserializing_response_using_JsonNET"">4. Deserializing response using Json.NET</span></h1>
<p>So far we have downloaded data from server and printing the JSON response on console. Now let us de-serialize the JSON response into Post list collection. In this example, I am using <strong>Json.NET</strong> component for parsing JSON data. You can add it to your project it from Xamarin component store.</p>
<p>Once you have added Json.NET component to your solution, add the following code snippet to <code>DownloadDataAsync()</code> method.</p>
<pre class=""prettyprint lang-cs"">// de-serializing json response into list
var posts = new List &lt;Post&gt; ();
JObject jsonResponse = JObject.Parse (content);
IList&lt;JToken&gt; results = jsonResponse [""posts""].ToList ();
foreach (JToken token in results) {
	PointOfInterest poi = JsonConvert.DeserializeObject&lt;Post&gt; (token.ToString ());
	posts.Add (poi);
}

// Write your logic here to display posts list on ui
</pre>
<p>In this example, we are not writing any code to explain the user interface and hence, I have just a comment. You can follow <a href=""http://stacktips.com/xamarin/listview-example-in-xamarin-android"" target=""_blank"" title=""ListView Example in Xamarin.Android"">Xamarin Android ListView Example</a> to learn more about creating list UI.</p>
<h1><span id=""5_Adding_INTERNET_permission"">5. Adding INTERNET permission</span></h1>
<p>Downloading data from server requires special permission to be granted in <code>AndroidManifest.xml</code>. Open AndroidManifest.xml and add the following code before <code>&lt;application&gt;</code> element.</p>
<pre class=""prettyprint lang-xml"">&lt;uses-permission android:name=""android.permission.INTERNET""/&gt;</pre>
",0,"standard","post"
"Android TextWatcher Example","android-textwatcher-example","In this tutorial we will show you how to use TextWatcher in Android with example. TextWatcher is used to keep watch on the EditText content while user inputs the data. It allows you to keep track on each character when entered on EditText.
","LIVE","<p>In this tutorial, we will show you how to use TextWatcher in Android for an example.</p>
<p><code>TextWatcher</code> is used to keep watch on the <a href=""http://stacktips.com/android/edittext-validation-in-android-example"" title=""Edittext Validation in Android Example"">EditText</a> content while user inputs the data. It allows you to keep track on each character when entered on EditText.</p>
<p>A Text Watcher is really helpful for scenarios like login/register screen validation. As an when user is entering the data, you can keep an eye on user input and notify early instead of waiting until user press submit button manually. Another great real-time example is Google search; it shows the user the real-time search suggestion while user entering data.</p>
<p>Implementing Text watcher is quite easy, you have to call <code>addTextChangedListener()</code> method and pass the reference to TextWatcher instance. You can override the following TextWatcher class method to take various actions when the content of EditText changes.</p>
<ol>
<li><code>afterTextChanged (Editable s) - </code>This method is called when the text has been changed. Because any changes you make will cause this method to be called again recursively, you have to be watchful about performing operations here, otherwise, it might lead to infinite loop.</li>
<li><code>beforeTextChanged (CharSequence s, int start, int count, int after) - </code>This method is called to notify you that, within s, the count characters beginning at the start are about to be replaced by new text with long after. It is an error to attempt to make changes to s from this callback.</li>
<li><code>onTextChanged (CharSequence s, int start, int before, int count) - </code>This method is called to notify you that, within s, the count characters beginning at the start have just replaced old text that had long before. It is an error to attempt to make changes to s from this callback.</li>
</ol>
<h1>Android TextWatcher Example</h1>
<p>Lets us jump straight into the TextWatcher example in android. In this tutorial, we will create a simple EditField for entering a password, and the text watcher will show the same password in another TextView.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical""
    android:padding=""10dp""&gt;

    &lt;TextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:paddingBottom=""10dp""
        android:text=""Enter your password and see the magic!!""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:textStyle=""bold"" /&gt;

    &lt;EditText
        android:id=""@+id/password""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:hint=""Password""
        android:inputType=""textPassword""
        android:padding=""12dp""&gt;

        &lt;requestFocus /&gt;
    &lt;/EditText&gt;

    &lt;TextView
        android:id=""@+id/passwordHint""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_below=""@+id/password""
        android:background=""#ffd33a26""
        android:padding=""5dp""
        android:text=""* Not Entered""
        android:textColor=""#fff"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<h1>Using TextWatcher in Activity</h1>
<pre class=""prettyprint lang-java"">import android.app.Activity;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

public class MainActivity extends Activity {
    private EditText passwordEditText;
    private TextView textView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        /* Initializing views */
        passwordEditText = (EditText) findViewById(R.id.password);
        textView = (TextView) findViewById(R.id.passwordHint);
        textView.setVisibility(View.GONE);

        /* Set Text Watcher listener */
        passwordEditText.addTextChangedListener(passwordWatcher);
    }

    private final TextWatcher passwordWatcher = new TextWatcher() {
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

        }

        public void onTextChanged(CharSequence s, int start, int before, int count) {
            textView.setVisibility(View.VISIBLE);
        }

        public void afterTextChanged(Editable s) {
            if (s.length() == 0) {
                textView.setVisibility(View.GONE);
            } else{
                textView.setText(""You have entered : "" + passwordEditText.getText());
            }
        }
    };
}
</pre>
<h1>Output</h1>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Android TextWatcher Example"" class=""aligncenter size-medium wp-image-8308"" height=""579"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/209/Android-TextWatcher-Example-620x579.png"" srcset="""" width=""620""/></a></p>
",0,"standard","post"
"Introduction to JSON","introduction-to-json-basics","JSON (JavaScript Object Notation) is one of the most popular and widely accepted data exchange format originally specified by Douglas Crockford. JSON is widely accepted in the softwares that includes client-server architecture for exchanging data between client and server.
","LIVE","<p>JSON (<em>JavaScript Object Notation</em>) is text-based, lightweight, language-independent data interchange format. It is one of the most popular and widely accepted data exchange formats on the Web.<br/>


Although the abbreviation starts with JavaScript, JSON is not a language with any language literals it just a specification for notation of data.</p>
<p>It is often misunderstood as a replacement of XML.<br/>
JSON defines a set of formatting rules for the portable representation of structured data.</p>
<h2><span id=""How_it_is_compared_with_XML"">How it is compared with XML?</span></h2>
<p>Before JSON was popular, XML was considered to be the chosen data interchange format for most of the cases. XML is heavyweight, it consumes more of network bandwidth in comparison to JSON.</p>
<p>XML data is considerably complex for parsing. It requires an XML DOM implementation on the client-side that would accept the XML response and convert into client program understandable format. It is often time-consuming to implement parsers on the client-side and it requires the XML DOM to be loaded into memory while parsing it.</p>
<p>The following example shows Employees data in XML format;</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;employees&gt;
   &lt;employe&gt;
      &lt;name&gt;Alex&lt;/first&gt;
      &lt;id&gt;19&lt;/id&gt;
      &lt;details&gt;
      	&lt;location&gt;London&lt;/location&gt;
         &lt;dob&gt;15 May 1962&lt;/dob&gt;
         &lt;sex&gt;Male&lt;/sex&gt;
      &lt;/details&gt;
   &lt;/employe&gt;
   &lt;employe&gt;
      &lt;name&gt;Mark&lt;/first&gt;
      &lt;id&gt;19&lt;/id&gt;
      &lt;details&gt;
      	&lt;location&gt;Berlin&lt;/location&gt;
         &lt;dob&gt;15 May 1968&lt;/dob&gt;
         &lt;sex&gt;Male&lt;/sex&gt;
      &lt;/details&gt;
   &lt;/employe&gt;
&lt;/employees&gt;
</pre>
<p>The above XML data can be represented in JSON format as follows:</p>
<pre class=""prettyprint lang-json"">{
  ""employees"": [
    {
      ""name"": ""Alex"",
      ""id"": ""19"",
      ""details"": {
        ""location"": ""London"",
        ""dob"": ""15 May 1962"",
        ""sex"": ""Male""
      }
    },
    {
      ""name"": ""Mark"",
      ""id"": ""19"",
      ""details"": {
        ""location"": ""Berlin"",
        ""dob"": ""15 May 1968"",
        ""sex"": ""Male""
      }
    }
  ]
}
</pre>
<p>Notice that the size of the XML document is comparatively larger to its representation in JSON. This result significant impact for larger size documents when used with real-time applications.</p>
<p>Thus, JSON becomes one of the most preferred media formats for data exchange between client and server.</p>
<h2><span id=""JSON_Syntax"">JSON Syntax</span></h2>
<p>JSON defines only two data structures: Objects and Arrays. An object is a collection of name-value pairs, and an array is a list of values.</p>
<p>JSON defines six value types: String, Number, Object, Array, Boolean and null. JSON has the following syntax:</p>
<ul>
<li>Objects are enclosed in braces ({})</li>
<li>Name-value pairs are separated by a comma (,)</li>
<li>The name and value in a pair are separated by a colon (:).</li>
<li>Names in an object are strings, whereas values may be of any of the six value types, including another array or an object.</li>
<li>Arrays are enclosed in brackets ([]), and their values are separated by a comma (,). Each value in an array may be of a different type, including another array or an object.</li>
</ul>
<p>In the above JSON example, you will notice that the value for the name “employees” is an array whose elements are two objects.</p>
<h2><span id=""Uses_of_JSON"">Uses of JSON</span></h2>
<p>JSON is often used as a data interchange format to serialize and deserialize data in applications that communicate with each other over the Internet. Because of its open standard, it is well suited for many different programming languages.</p>
<p>RESTful web services use JSON extensively as the format for the data in requests and responses. The HTTP header used to indicate that the content of a request or a response is JSON data is</p>
<pre>Content-Type: application/json</pre>
<h2><span id=""JSON_Processing_in_JavaScript"">JSON Processing in JavaScript</span></h2>
<h3><span id=""JSONparse"">JSON.parse()</span></h3>
<p>When receiving data from a web server, the data is always a string. We can parse the data to an JavaScript object using <code>JSON.parse()</code> method.</p>
<pre class=""prettyprint lang-javascript"">var jsonString = '{""employees"":[{""name"":""Alex"",""id"":""19"",""details"":{""location"":""London"",""dob"":""15 May 1962"",""sex"":""Male""}},{""name"":""Mark"",""id"":""19"",""details"":{""location"":""Berlin"",""dob"":""15 May 1968"",""sex"":""Male""}}]}';

var jsonObject = JSON.parse(jsonString);
console.log(jsonObject.employees[0].name);
console.log(jsonObject.employees[0].id);
console.log(jsonObject.employees[0].details.location);
</pre>
<p>The <code>JSON.parse()</code> method accepts the second argument <code>reviver</code>, to perform a transformation on the resulting object before it is returned.</p>
<h3><span id=""JSONstringify"">JSON.stringify()</span></h3>
<p>The JSON.stringify() method converts a JavaScript object to a JSON string representation. It can optionally use a replacer function to replace values using custom logic.</p>
<pre class=""prettyprint lang-javascript"">var resultString = JSON.stringify(jsonObject);
console.log(resultString);
</pre>
",0,"standard","post"
"Android ScrollView Example","android-scrollview-example","In this tutorial we will show you, how to use Android ScrollView component and create a simple example using various ScrollView properties. ScrollView is a special kind of layout, designed to hold view larger than its actual size. When the Views size goes beyond the ScrollView size, it automatically adds scroll bars and can be scrolled vertically.
","LIVE","<p>In this tutorial, we will show you, how to use Android ScrollView component and create a simple example using various ScrollView properties.</p>
<p>Most Android application will likely to have the contents that’s doesn’t fit the screen. Think a bit about displaying the news details, the contents are dynamic and can grow beyond your screen size. If we design our screen layout using standard layout managers like <a href=""http://stacktips.com/android/android-linearlayout-example"" title=""Android LinearLayout Example"">LinearLayout</a>,  <a href=""http://stacktips.com/android/android-relativelayout-example"" title=""Android RelativeLayout Example"">RelativeLayout</a>, <a href=""http://stacktips.com/android/android-framelayout-example"" title=""Android FrameLayout Example"">FrameLayout</a> or <a href=""http://stacktips.com/android/android-table-layout-example"" title=""Android Table Layout Example"">TableLayout</a>; when the content grows, and data goes beyond screen size, and user won’t be able scroll and  view the content.</p>
<p><strong>ScrollView</strong> is a special kind of layout, designed to hold view larger than its actual size. When the Views size goes beyond the ScrollView size, it automatically adds scroll bars and can be scrolled vertically.</p>
<ol>
<li>ScrollView can hold only one direct child. This means that, if you have complex layout with more view controls, you must enclose them inside another standard layout like <a href=""http://stacktips.com/android/android-linearlayout-example"" title=""Android LinearLayout Example"">LinearLayout</a>, <a href=""http://stacktips.com/android/android-table-layout-example"" title=""Android Table Layout Example"">TableLayout</a> or <a href=""http://stacktips.com/android/android-relativelayout-example"" title=""Android RelativeLayout Example"">RelativeLayout</a>.</li>
<li>You can specify <code>layout_height</code> and <code>layout_width</code> to adjust height and width of screen.</li>
<li>Scrollview is ideal for screens where scrolling is required, but it is an overhead when scroll view is used to render a larger list of data. Android provides specialized adapter views like <a href=""http://stacktips.com/android/android-listview-tutorial"" title=""Android ListView Example"">ListView</a>, <a href=""http://stacktips.com/android/android-gridview-example-building-image-gallery-in-android"" title=""Android Gridview Example- Building Image Gallery in android"">GridView</a> and <a href=""http://stacktips.com/android/android-recyclerview-example"" title=""Android RecyclerView Example"">Recycler View</a> (Introduced in Android Lollipop) are recommended for long lists.</li>
<li>You should never use a ScrollView with a ListView or GridView, because they both takes care of their own vertical scrolling.</li>
<li>ScrollView only supports vertical scrolling. Use <code>HorizontalScrollView</code> for horizontal scrolling.</li>
<li>The <code>android:fillViewport</code> property defines whether the scrollview should stretch its content to fill the viewport. You can set the same property by calling <code>setFillViewport(boolean)</code> method.</li>
</ol>
<h1>Android ScrollView Example</h1>
<p>Let us create an example that displays the layout as shown in the below screenshot. Notice that the blue like indicates the outline of textView2 is gone beyond the scren.</p>
<p><strong><a href=""http://stacktips.com"" target=""_self""><img alt=""Android ScrollView Example"" class=""aligncenter wp-image-8262 size-full"" height=""654"" loading=""lazy"" sizes=""(max-width: 969px) 100vw, 969px"" src=""/media/uploads/articles/211/Android-ScrollView-Example.png"" srcset="""" width=""969""/></a></strong></p>
<h1>Scrollbar Layout</h1>
<pre class=""prettyprint lang-xml"">&lt;ScrollView xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:orientation=""vertical""
    android:padding=""10dp""
    android:fillViewport=""false""&gt;

    &lt;LinearLayout
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:orientation=""vertical""&gt;
        &lt;ImageView
            android:id=""@+id/imageView""
            android:layout_width=""wrap_content""
            android:layout_height=""200dp""
            android:scaleType=""centerCrop""
            android:src=""@drawable/image"" /&gt;

        &lt;Button
            android:id=""@+id/button""
            android:layout_width=""match_parent""
            android:layout_height=""wrap_content""
            android:text=""KNOW MORE"" /&gt;

        &lt;TextView
            android:id=""@+id/textView""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:text=""@string/title""
            android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

        &lt;TextView
            android:id=""@+id/textView2""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:text=""@string/description""
            android:textAppearance=""?android:attr/textAppearanceSmall"" /&gt;
    &lt;/LinearLayout&gt;
&lt;/ScrollView&gt;
</pre>
",0,"standard","post"
"Creating WordPress Custom Post for Event Listings","creating-wordpress-custom-post-for-event-listings","In the course of this tutorial, we will take a drive into building custom event calendar post type. Having an events calendar on your website is a way to publish all event specific information. Instead of tying your events to the post or page types, It is wise to create a custom post type &#8220;events&#8221; for all event listings.
","LIVE","<p>Of all the amazing virtues of WordPress, its amazing scalability stands right up there. A standard WordPress setup can be integrated with the most versatile and powerful features that give a website’s complete rein in the hands of the webmasters. The custom post types are among such customizations that go a long way in extending a website’s inbuilt features beyond their specifications.</p>
<h2>Why Custom Post Types?</h2>
<p>The default WordPress CMS supports two types of post types, i.e. post or a page. Which means you are quite limited while publishing the dynamically changing content such as events, reviews etc.</p>
<p>So, you would need custom post type when you need a content structure on your website that facilitates posting very specific information about, let’s say, events, or images or for that matter, any other dynamic information.</p>
<p>Let’s say your business is selling mobile phones. You would require a CMS system that enables you to add new phone types, reviews, and other details specific to each phone. The default WordPress CMS is limited to provide such customization over your data. This is quite possible with custom post types, you can create a custom post type called “Phones” that allows you to include a specific content type for phones, without mixing it up with posts and pages.</p>
<p>In the course of this tutorial, we will take a drive into building custom event calendar post type. Having an events calendar on your website is a way to publish all event specific information. Instead of tying your events to the post or page types, It is wise to create a custom post type “events” for all event listings.</p>
<p>Let’s first begin by creating a post type by the name of the event, and this post type will occupy its own section in the admin panel:</p>
<h2>Create a Custom Post Type In WordPress</h2>
<p>The following code snippet is used for a typical custom post type setup in WordPress. Now paste the following code snippet in your functions.php file, at the tail-end of the file, but before the closing PHP tag.</p>
<pre class=""prettyprint lang-php"">add_action('init', 'events_init');

function events_init() {
	$args = array(
	'labels' =&gt; array(
	'name' =&gt; __('Events'),
	'singular_name' =&gt; __('Event'),
 ),

	'public' =&gt; true,
	'rewrite' =&gt; array(""slug"" =&gt; ""events""),
	'supports' =&gt; array('thumbnail','editor','title','custom-fields')
);

	register_post_type( 'events' , $args );
}
</pre>
<h3>How it works:</h3>
<ol>
<li>Creating custom post type needs some alterations to the core theme files of your WordPress setup. More precisely, we need to edit the functions.php file by adding the above code snippets.</li>
<li>This code is basically instantiating certain properties and charting out rules for how URLs are managed and what are the features that the post-type is supporting.</li>
<li>Once the above code is pasted in your <code>functions.php</code> file, you can reload the dashboard’s page and now, the event section will appear on the sidebar. The following screenshot depicts the same</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Custom Event Post Type WordPress"" class=""aligncenter wp-image-8173"" height=""273"" loading=""lazy"" sizes=""(max-width: 482px) 100vw, 482px"" src=""/media/uploads/articles/212/Custom-Event-Post-Type-Wordpress-620x351.png"" srcset="""" width=""482""/></a></p>
<h2>Create a New Event</h2>
<p>Now, we can proceed with adding some events custom post types. A custom field by the name of ‘date’ can be created.</p>
<p>Let it be absolutely clear that the date we mention here should be specified through the custom fields otherwise, the default date will be taken, which happens to be the date at which the post is published. Also, make the necessary changes in the permalinks section of your admin panel since your theme needs to reconstruct the Permalink structure to accommodate the new custom post type.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Create New Event Type"" class=""aligncenter size-full wp-image-8188"" height=""353"" loading=""lazy"" src=""/media/uploads/articles/212/Create-New-Event-Type.jpg"" srcset="""" width=""580""/></a></p>
<h2>Create Events Listings Page</h2>
<p>In the previous step, we have added events to our website and the next step is to create a page for listing these events. For this, we need to create a new page template that can be further added to the standard menu items of our theme.</p>
<p>To begin with, this, let us copy the <code>page.php</code> file of our theme, and rename it to <code>custom-events-template.php</code>.</p>
<p>Now, open this file and add the following code at the very beginning (basically, this code will intimate your WordPress setup that the template you are adding is exclusive and it will also select it from the drop-down list:</p>
<pre class=""prettyprint lang-php"">&lt;?php
/**
* Template Name: Events Page
*/
?&gt;</pre>
<p>Next, find the line that’s similar to this:</p>
<pre class=""prettyprint lang-php"">&lt;?php if (have_posts()) : while (have_posts()) : the_post(); ?&gt;</pre>
<p>and just before it, add this:</p>
<pre class=""prettyprint lang-php"">&lt;?php query_posts( 'post_type=events'); ?&gt;</pre>
<p>We have basically created a new query and put attributes on to it that make it our new event post type.</p>
<p>In order to use this new template, we will create a new page by any preferred name and then select the template from the page attributes box. Once the post is published, it will display the events list archive.</p>
<p>Now, let’s make another custom change via which the events can be displayed in the order of the date they are happening on, instead of the data on which the event got published. For the same, we can get our query replaced by the following code:</p>
<pre class=""prettyprint lang-php"">&lt;?php query_posts ( ' post_type=events&amp;meta_key=date&amp;orderby=meta_value&amp;order=ASC'); ?&gt;</pre>
<p>It will also serve us well if we can get the date displayed within the post itself. For this, we can add the following code after the <code>the_content();</code> function in our template:</p>
<pre class=""prettyprint lang-php"">&lt;?php
$date = get_post_meta($post-&gt;ID, 'date', true);
if ($date){
  echo 'This event will be held on: '.$date;
}
?&gt;</pre>
<p>The following screenshot shows, how the events page will look like. Notice that the events are sorted by date order</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Events List WordPress"" class=""aligncenter size-full wp-image-8187"" height=""339"" loading=""lazy"" src=""/media/uploads/articles/212/Events-List-Wordpress.jpg"" srcset="""" width=""580""/></a></p>
<p>So, that’s how easy the whole exercise is. You can enrich your WordPress features and take them beyond their default specifications with some minor tweaks to your theme files. Hope you find the above tutorial useful and if you have anything to add, do let us know in the comments below.</p>
",0,"standard","post"
"Xamarin Android WebView Tutorial","xamarin-android-webview-tutorial","In the course of this tutorial, we will take a look into using WebView in Xamarin.Android. This tutorial loads simple webpage on WebView and using WebViewClient.WebView is an android UI component that displays webpages.","LIVE","<p>In the course of this tutorial, we will take a look into using WebView in Xamarin.Android. This tutorial loads simple webpage on <code>WebView</code> and using <code>WebViewClient</code>.</p>
<h2>Introduction to WebView</h2>
<ol>
<li>WebView is an android UI component that displays webpages. It can either display a remote webpage or can also load static HTML data.</li>
<li>This encompasses the functionality of a browser that can be integrated to application. Most of the android applications like WordPress, Flipboard, fiddly; Google Reader, etc. are integrated with WebView in order to display certain piece of online contents.</li>
<li>It uses the WebKit rendering engine to display web pages and includes methods to navigate forward and backward through a history, zoom in and out, and perform text searches and more.</li>
<li>The implementation of WebView is quite simple like any other views, all you have to do is declare the WebView layout on your Activity or Fragment, instantiate and load the data on WebView.</li>
</ol>
<p>Following section of the tutorial, will drive you with step by step approach to create a simple WebView with different configuration params and load stacktips.com home page.</p>
<h2>Declare WebView Layout</h2>
<p>As discussed,&nbsp;let us&nbsp;create a simple WebView layout that covers the full screen&nbsp;space.</p>
<pre class=""prettyprint lang-xml"">
&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:orientation=""vertical""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""&gt;

    &lt;WebView
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:id=""@+id/webView"" /&gt;

&lt;/LinearLayout&gt;
</pre>
<h2>Load Static HTML Data on WebView</h2>
<p>Following activity class snippet will show you how to initialize WebView instance and load static Html string onto it.</p>
<pre class=""prettyprint lang-cs"">
[Activity (Label = ""WebViewExample"", MainLauncher = true, Icon = ""@drawable/icon"")]
public class MainActivity : Activity
{
	protected override void OnCreate (Bundle bundle)
	{
		base.OnCreate (bundle);

		// Set our view from the ""main"" layout resource
		SetContentView (Resource.Layout.Main);

		// Get WebView from the layout resource,
		// and load html text data on it
		WebView mWebView = FindViewById&lt;WebView&gt;(Resource.Id.webView);

		string customHtml = ""&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, WebView&lt;/h1&gt;"" +
			""&lt;h1&gt;Heading 1&lt;/h1&gt;&lt;h2&gt;Heading 2&lt;/h2&gt;&lt;h3&gt;Heading 3&lt;/h3&gt;"" +
			""&lt;p&gt;This is a sample paragraph.&lt;/p&gt;"" +
			""&lt;/body&gt;&lt;/html&gt;"";
		mWebView.LoadData(customHtml, ""text/html"", ""UTF-8"");
	}
}
</pre>
<h3>How it works?</h3>
<ol>
<li>Like any other view controller, let us first instantiate WebView in your Activity by calling FindViewById() method. This requires you to import <code>Android.Webkit</code> package.</li>
<li>Call <code>LoadData() </code>method that accepts your static Html string, mime type and the encoding format.</li>
</ol>
<p>The output of the above code is below</p>
<p><a href=""#""><img alt=""Load Static HTML Data on WebView"" class=""aligncenter wp-image-8106 size-thumbnail"" height=""294"" loading=""lazy"" src=""/media/uploads/articles/213/Load-Static-HTML-Data-on-WebView-300x294.png"" srcset="""" width=""300""></a></p>
<h2>Load Remote URL on WebView</h2>
<ol>
<li>The default behavior of Android is to open device browser, when links are clicked. But as our WebView should work like a embedded browser, we must override to always open the links in the WebView instead redirecting it to the default browser.</li>
<li>We can do this using android <code>WebViewClient</code>. WebViewClient helps to monitor events in a WebView. We have to override the <code>shouldOverrideUrlLoading()</code> method. This method allows performing your own action when a particular URL is selected. Once we are ready with the WebViewClient, we can set the WebViewClient of your WebView using the <code>setWebViewClient()</code> method.</li>
<li>The WebViewClient class has some other useful methods such as <code>OnPageStarted()</code>, <code>OnPageFinished()</code> and <code>OnReceivedError()</code> that helps you to show loading progress of WebView content, or handle error.</li>
</ol>
<p>Checkout my Android tutorial that explains <a href=""http://stacktips.com/android/progressbar-while-loading-webview"" title=""ProgressBar while Loading WebView in Android"">How to show loading progress in Android WebView</a>. Bear with me, this tutorial&nbsp;is written in Java. You need to take the pain to make it compatible for&nbsp;C#.</p>
<p>Now let us go back to our example, and take a look into how our activity class looks like.</p>
<pre class=""prettyprint lang-cs"">[Activity (Label = ""WebViewExample"", MainLauncher = true, Icon = ""@drawable/icon"")]
public class MainActivity : Activity
{
	protected override void OnCreate (Bundle bundle)
	{
		base.OnCreate (bundle);

		// Set our view from the ""main"" layout resource
		SetContentView (Resource.Layout.Main);

		WebView mWebView = FindViewById&lt;WebView&gt;(Resource.Id.webView);
		mWebView.Settings.JavaScriptEnabled = true;

		mWebView.SetWebViewClient (new MyWebViewClient());

		//Load url to be randered on WebView
		mWebView.LoadUrl(""http://www.stacktips.com"");
	}

	public class MyWebViewClient : WebViewClient
	{
	  public override bool ShouldOverrideUrlLoading (WebView view, string url)
		{
			view.LoadUrl (url);
			return true;
		}

		public override void OnPageStarted (WebView view, string url, Android.Graphics.Bitmap favicon)
		{
			base.OnPageStarted (view, url, favicon);
		}

		public override void OnPageFinished (WebView view, string url)
		{
			base.OnPageFinished (view, url);
		}

		public override void OnReceivedError (WebView view, ClientError errorCode, string description, string failingUrl)
		{
			base.OnReceivedError (view, errorCode, description, failingUrl);
		}
	}
}
</pre>
<p>Output of the above code is shown below<br>
<img alt=""Load Remote URL on WebView"" class=""aligncenter size-thumbnail wp-image-8111"" height=""416"" loading=""lazy"" src=""/media/uploads/articles/213/Load-Remote-URL-on-WebView-300x416.png"" srcset="""" width=""300""></p>",0,"standard","post"
"Android LinearLayout Example","android-linearlayout-example","The LinearLayout is the most basic layout manager provided by Android. The LinearLayout organizes the child views either horizontally or vertically based on the specified  orientation property. The value for orientation property can be either horizontal or vertical.
","LIVE","<p>The LinearLayout is the most basic layout manager provided by Android. The LinearLayout organizes the child views either horizontally or vertically based on the specified orientation property. The value for orientation property can be either <code>horizontal</code> or <code>vertical</code>.</p>
<p>Here is how the LinearLayout declaration looks like in Android layout</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""     
       android:orientation=""horizontal""     
       android:layout_width=""fill_parent""  
       android:layout_height=""wrap_content""&gt;

&lt;!-- add children here--&gt; 

&lt;/LinearLayout&gt;

</pre>
<p>Notice that in the above code snippets, we have specified orientation as horizontal, this aligns all its child layout/views horizontally.</p>
<p>All of the layout managers can be nested. This means that you can put a RelativeLayout or FrameLayout as a child to LinearLayout.</p>
<p>For example, if you want to create a layout as shown in the picture below, you need to construct a vertical layout manager that contained horizontal layout managers, where each row owns its own horizontal layout.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""LinearLayout Example"" class=""aligncenter size-full wp-image-8014"" height=""250"" loading=""lazy"" src=""/media/uploads/articles/214/LinearLayout-Example.png"" srcset="""" width=""353""/></a></p>
<p><strong>Example</strong></p>
<pre class=""prettyprint lang-java"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""&gt;

    &lt;LinearLayout
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:orientation=""horizontal""
        android:padding=""5dp""&gt;

        &lt;TextView
            android:id=""@+id/textView""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:text=""Label1""
            android:textAppearance=""?android:attr/textAppearanceMedium"" /&gt;

        &lt;EditText
            android:id=""@+id/editText""
            android:layout_width=""match_parent""
            android:layout_height=""wrap_content""
            android:text=""Edit text1"" /&gt;

    &lt;/LinearLayout&gt;

    &lt;LinearLayout
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:orientation=""horizontal""
        android:padding=""5dp""&gt;

        &lt;TextView
            android:id=""@+id/textView1""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:text=""Label2""
            android:textAppearance=""?android:attr/textAppearanceMedium"" /&gt;

        &lt;EditText
            android:id=""@+id/editText1""
            android:layout_width=""match_parent""
            android:layout_height=""wrap_content""
            android:text=""Edit text2"" /&gt;

    &lt;/LinearLayout&gt;

&lt;/LinearLayout&gt;
</pre>
<h3>Understanding Weight</h3>
<p>The weight property is used to assign a size importance of child views in a container. For example, if you want to place two buttons distributed horizontally by occupying each half of the screen width, you can define <code>layout_weight</code> as 0.5 for each of the buttons inside LinearLayout. Following screenshot depicts the views distributed<br/>
equally using weight property.</p>
<p><a href=""http://stacktips.com/android/android-linearlayout-example/attachment/linearlayout-weight-property"" rel=""attachment wp-att-8015""><img alt=""LinearLayout Weight Property"" class=""aligncenter size-full wp-image-8015"" height=""280"" loading=""lazy"" src=""/media/uploads/articles/214/LinearLayout-Weight-Property.png"" srcset="""" width=""355""/></a><br/>
<strong>Example</strong></p>
<p>Following code snippets implements the same as shown in the above image.</p>
<pre class=""prettyprint lang-java"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:layout_marginTop=""10dp""
    android:orientation=""horizontal""&gt;

    &lt;Button
        android:id=""@+id/button""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_weight=""0.5""
        android:text=""Button1"" /&gt;

    &lt;Button
        android:id=""@+id/button2""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_weight=""0.5""
        android:text=""Button2"" /&gt;

&lt;/LinearLayout&gt;
</pre>
<h3>Key Points</h3>
<ul>
<li>If a LinearLayout is set to vertical orientation and contains a number of views than the screen space, it will not be scrollable by default. You have to explicitly put the LinearLayout inside a <code>ScrollView</code>.</li>
<li>you must be careful about over-using the LinearLayout. If your application design demands the nesting of multiple LinearLayouts, you may want to consider using a RelativeLayout instead.</li>
</ul>
",0,"standard","post"
"Android TextView Example","android-textview-example","In this tutorial, we will take a look into the Android TextView widget and various TextView properties. TextView is used to display text on an Android screen. TextView is like a dummy label and doesn't allow editing text input.","LIVE","<p>In the course of this tutorial, we will take a look into Android TextView widget and various TextView properties.</p>
<p>TextView is one of the most fundamental Android user interface widget, which is used to display text on an Android screen. TextView is like a dummy label, doesn’t allow to edit text input.</p>
<p>Following are some of the most used TextView properties.</p>
<table>
<tbody>
<tr>
<th><b>Attribute Name</b></th>
<th><b>Related Method</b></th>
<th><b>Description</b></th>
</tr>
<tr>
<td>android:autoLink</td>
<td>setAutoLinkMask(int)</td>
<td>Automatically convert the links such as web url or email.</td>
</tr>
<tr>
<td>android:autoText</td>
<td>setKeyListener(KeyListener)</td>
<td>Auto spelling correction for text.</td>
</tr>
<tr>
<td>android:ellipsize</td>
<td>setEllipsize(TextUtils.TruncateAt)</td>
<td>If the width required by text is longer than the View itself, it ellipsized text.</td>
</tr>
<tr>
<td>android:ems</td>
<td>setEms(int)</td>
<td>Makes the TextView be exactly this many ems wide.</td>
</tr>
<tr>
<td>android:gravity</td>
<td>setGravity(int)</td>
<td>Specifies how to align the text by the view’s x- and/or y-axis when the text is smaller than the view.</td>
</tr>
<tr>
<td>android:lineSpacingMultiplier</td>
<td>setLineSpacing(float,float)</td>
</tr>
<tr>
<td>android:lines</td>
<td>setLines(int)</td>
<td>Makes the TextView be exactly this many lines tall.</td>
</tr>
<tr>
<td>android:maxLines</td>
<td>setMaxLines(int)</td>
<td>Makes the TextView be at most this many lines tall.</td>
</tr>
<tr>
<td>android:minLines</td>
<td>setMinLines(int)</td>
<td>Makes the TextView be at least this many lines tall.</td>
</tr>
<tr>
<td>android:minWidth</td>
<td>setMinWidth(int)</td>
<td>Makes the TextView be at least this many pixels wide.</td>
</tr>
<tr>
<td>android:shadowColor</td>
<td>setShadowLayer(float, float, float,int)</td>
<td>Place a blurred shadow of text underneath the text, drawn with the specified color.</td>
</tr>
<tr>
<td>android:shadowDx</td>
<td>setShadowLayer(float, float, float, int)</td>
<td>Horizontal offset of the text shadow.</td>
</tr>
<tr>
<td>android:shadowDy</td>
<td>setShadowLayer(float, float, float, int)</td>
<td>Vertical offset of the text shadow.</td>
</tr>
<tr>
<td>android:shadowRadius</td>
<td>setShadowLayer(float, float, float, int)</td>
<td>Blur radius of the text shadow.</td>
</tr>
<tr>
<td>android:text</td>
<td>setText(CharSequence, TextView.BufferType)</td>
<td>Text to display.</td>
</tr>
<tr>
<td>android:textAllCaps</td>
<td>setAllCaps(boolean)</td>
<td>Present the text in ALL CAPS.</td>
</tr>
<tr>
<td>android:textAppearance</td>
<td></td>
<td>Base text color, typeface, size, and style.</td>
</tr>
<tr>
<td>android:textColor</td>
<td>setTextColor(int)</td>
<td>Text color.</td>
</tr>
<tr>
<td>android:textSize</td>
<td>setTextSize(int, float)</td>
<td>Size of the text.</td>
</tr>
<tr>
<td>android:typeface</td>
<td>setTypeface(Typeface)</td>
<td>Typeface (normal, sans, serif, monospace) for the text.</td>
</tr>
</tbody>
</table>
<p>For all TextView properties and attributes follow official <a href=""http://developer.android.com/reference/android/widget/TextView.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">TextView documentation</a>.</p>
<p><span>Also refer the following tutorials to learn more on Android TextView</span><br/></p>
<p><a href=""http://stacktips.com/android/how-to-apply-shadow-effect-on-android-textview"">How to apply shadow effect on Android TextView</a><br/>
<a href=""http://stacktips.com/android/using-external-fonts-in-android-view"" title=""Using External Fonts in Android View"">How to use external fonts in Android TextView</a><br/>
<a href=""http://stacktips.com/android/display-html-in-android-textview"" title=""How to Display HTML in Android TextView"">How to Display HTML in Android TextView</a></p>
<h2 class="""">TextView Example</h2>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:layout_marginTop=""10dp""
    android:orientation=""vertical""
    android:padding=""10dp""&gt;


    &lt;TextView
        android:id=""@+id/textView1""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_marginBottom=""10dp""
        android:gravity=""center_horizontal""
        android:text=""stacktips.com""
        android:textAllCaps=""true""
        android:textColor=""#86AD33""
        android:textSize=""25dp""
        android:textStyle=""bold"" /&gt;


    &lt;TextView
        android:id=""@+id/textView2""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center_horizontal""
        android:layout_marginBottom=""20dp""
        android:ellipsize=""end""
        android:letterSpacing=""1.5""
        android:maxLines=""2""
        android:text=""Free programming tutorials on Java, Android development, Xamarin, Java Design Pattern, Data Structure Algorithm and examples on related technologies.""
        android:textAppearance=""?android:attr/textAppearanceMedium"" /&gt;

    &lt;TextView
        android:id=""@+id/textView3""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center_horizontal""
        android:autoLink=""email|web""
        android:lineSpacingMultiplier=""1.5""
        android:text=""Have questions about stacktips.com or just want to chat? Contact us at javatechig@gmail.com"" /&gt;

&lt;/LinearLayout&gt;
</pre>",0,"standard","post"
"Android Lollipop Swipe to Refresh Example","android-lollipop-swipe-to-refresh-example","The Swipe to refresh layout is used to indicate  user while the content of a screen is being updated. It was earlier introduced in Android 4.4 Kitkat, and was named as SwipeRefreshLayout. Visually it was represented just below ActionBar.
","LIVE","<p>In the course of this tutorial, we will take a look into the new Swipe to refresh layout introduced in material design.</p>
<p>Android Lollipop is baked with some of the finest looking user interface widgets and UI design guidelines, and what they call it as Material Design. Some of the widgets are fine-tuned while some new of them are added to the SDK.</p>
<p>The Swipe to refresh layout is used to indicate user while the content of a screen is being updated. The Swipe to refresh layout was earlier introduced in Android 4.4 Kitkat and was named as <code>SwipeRefreshLayout</code>. Visually it was represented just below ActionBar.</p>
<p>Since Android Lollipop, the visual representation of the swipe to refresh layout has been changed drastically. It appears as a circular refresh animation, horizontally centered and appears right below the <a href=""http://stacktips.com/android/android-lollipop-toolbar-example"" target=""_blank"" title=""Android Lollipop Toolbar Example"">Toolbar</a>. Check out official documentation for <a href=""http://www.google.co.uk/design/spec/patterns/swipe-to-refresh.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">Swipe to refresh</a> layout in Android Lollipop.</p>
<h1>Swipe to Refresh Layout Example</h1>
<p>In this example, we will create the sample application that downloads the data from a server feed, and displays on a ListView. It also allows the user the ability to swipe down and request for updated data from the server. </p>
<p>The output of this example is as the following video.</p>
<p><iframe allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen="""" frameborder=""0"" height=""675"" loading=""lazy"" src=""https://www.youtube.com/embed/y9RdvzelGbQ?feature=oembed"" title=""Android Lollipop Swipe to Refresh Example - Demo"" width=""1200""></iframe><br/>
Now without wasting much of time, lets us move straight into its implementation. To implement Swipe to refresh layout, you will need the v4 support library. You can include the v4 support library to your project by adding below dependency in <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-java"">dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile ""com.android.support:appcompat-v7:21.0.+""
}
</pre>
<p>Secondly, let us define the swipe to refresh layout and list view to show the feed response. Create a new layout file inside res/layout folder, name it as activity_main.xml and paste the below code snippets.</p>
<h3>activity_main.xml</h3>
<pre class=""prettyprint lang-xml"">&lt;android.support.v4.widget.SwipeRefreshLayout 
    xmlns:android=""http://schemas.android.com/apk/res/android""
    android:id=""@+id/swipeRefreshLayout""
    android:layout_width=""match_parent""
    android:layout_height=""wrap_content""&gt;

    &lt;ListView
        android:id=""@+id/listView""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""&gt;&lt;/ListView&gt;
&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;
</pre>
<h2>How it works</h2>
<ul>
<li>The ListView is placed as a child view to SwipeRefreshLayout.</li>
<li>This allows user the ability to show the loading spinner when user swipes the ListView edge. All the functionality of displaying loading bar is encapsulated inside <code>SwipeRefreshLayout</code> class.</li>
<li>When user swipes down, the <code>OnRefreshListener</code> events gets fired. You can handle this event to write the logic for downloading or refreshing data.</li>
<li>Note that, once data is downloaded, user has to manually call <code>setRefreshing(false)</code> to hide the refresh spinner.</li>
</ul>
<p>Let us now initialize the SwipeRefreshLayout and ListView from activity and write the logic to download data from server.</p>
<p>In this example we are downloading data form server and parsing JSON response before we rendering it on the ListView. Please refer <a href=""http://stacktips.com/android/android-networking-tutorial"" title=""Android Networking Tutorial"">Android Networking Tutorial</a> for understanding more on this code.</p>
<h3>MainActivity.java</h3>
<pre class=""prettyprint lang-java"">public class MainActivity extends ActionBarActivity {

    private ListView mListView = null;
    private ArrayAdapter mAdapter = null;
    private SwipeRefreshLayout mSwipeRefreshLayout = null;

    private String[] feedList = null;
    private String feedUrl = ""http://stacktips.com/api/get_category_posts/?dev=1&amp;slug=android"";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);

        mListView = (ListView) findViewById(R.id.listView);

        //Start Downloading data
        new DownloadFilesTask().execute(feedUrl);

        //Initialize swipe to refresh view
        mSwipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.swipeRefreshLayout);
        mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                //Refreshing data on server
                new DownloadFilesTask().execute(feedUrl);
            }
        });
    }


    private void updateList() {
        ArrayAdapter mAdapter = new ArrayAdapter(MainActivity.this, android.R.layout.simple_list_item_1, feedList);
        mListView.setAdapter(mAdapter);

        if (mSwipeRefreshLayout.isRefreshing()) {
            mSwipeRefreshLayout.setRefreshing(false);
        }
    }


    private class DownloadFilesTask extends AsyncTask&lt;String, Void, Void&gt; {

        @Override
        protected void onProgressUpdate(Void... values) {
        }

        @Override
        protected void onPostExecute(Void result) {
            if (null != feedList) {
                updateList();
            }
        }

        @Override
        protected Void doInBackground(String... params) {
            // getting JSON string from URL
            JSONObject json = getJSONFromUrl(params[0]);

            //parsing json data
            parseJson(json);
            return null;
        }
    }

    public JSONObject getJSONFromUrl(String url) {
        InputStream is = null;
        JSONObject jObj = null;
        String json = null;

        try {
            DefaultHttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(url);

            HttpResponse httpResponse = httpClient.execute(httpPost);
            HttpEntity httpEntity = httpResponse.getEntity();
            is = httpEntity.getContent();

            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""iso-8859-1""), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + ""\n"");
            }
            is.close();
            json = sb.toString();

            jObj = new JSONObject(json);

        } catch (Exception e) {
            Log.e(""Error"", ""Error parsing data "" + e.toString());
        }
        return jObj;
    }


    public void parseJson(JSONObject json) {
        try {
            if (json.getString(""status"").equalsIgnoreCase(""ok"")) {
                JSONArray posts = json.getJSONArray(""posts"");

                feedList = new String[posts.length()];
                for (int i = 0; i &lt; posts.length(); i++) {
                    JSONObject post = (JSONObject) posts.getJSONObject(i);
                    feedList[i] = post.getString(""title"");
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
}
</pre>
[download url=”https://github.com/npanigrahy/Android-Lollipop-Swipe-to-Refresh”]
",0,"standard","post"
"Android RelativeLayout Example","android-relativelayout-example","Over the course of this tutorial, we will take a look into Android RelativeLayout and its properties. RelativeLayout is one among the most used layout after LinearLayout. It allows its child views to position relative to each other or relative to the container or another container. For example, if we have to build a complex layout as shown in the image below, this can be achieved  with ease by using RelativeLayout.
","LIVE","<p>The TableLayout layout is an extension of LinearLayout. As the name indicates, TableLayout is used to display child View elements in rows and columns.</p>
<p>The concept of TableLayout works something similar to an HTML table. If you can recall the HTML table, TableLayout can be explained as &lt;table&gt; tag and TableRow is like a &lt;tr&gt; element. You can use any view as table cell element.</p>
<p>Let us create a TableView layout to display a list of Android version releases. Each row contains three cells that represent version code, version name, and API level. We are trying to achieve the same as the screenshot shown below.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""TableLayout Android Example"" class=""aligncenter size-full wp-image-8021"" height=""254"" loading=""lazy"" src=""/media/uploads/articles/217/TableLayout-Android-Example.png"" srcset="""" width=""351""/></a></p>
<h1>Example</h1>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;TableLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:layout_marginTop=""10dp""&gt;

    &lt;TableRow
        android:background=""#607D8B""
        android:padding=""5dp""&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""Version"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""Version Name"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""API Level"" /&gt;
    &lt;/TableRow&gt;

    &lt;TableRow
        android:background=""#ECEFF1""
        android:padding=""5dp""&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""5.0"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""Android Lollipop"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""21"" /&gt;
    &lt;/TableRow&gt;

    &lt;TableRow
        android:background=""#ECEFF1""
        android:padding=""5dp""&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""4.4"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""Android Kitkat"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""19"" /&gt;
    &lt;/TableRow&gt;
    &lt;TableRow
        android:background=""#ECEFF1""
        android:padding=""5dp""&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""4.3"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""Android Jelly Bean"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""18"" /&gt;
    &lt;/TableRow&gt;
&lt;/TableLayout&gt;</pre>
<p>Now that we have declared the TableLayout layout, let is load this layout in the Activity <code>onCreate()</code> method</p>
<pre class=""prettyprint lang-java"">@Override
protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
}
</pre>
<p>The <code>SetContentView(int)</code> method loads the layout file for the Activity, specified by the layout resource Id.</p>
",0,"standard","post"
"Android Table Layout Example","android-table-layout-example","The TableLayout layout is an extension of LinearLayout. As the name indicates, TableLayout is used to display child View elements in rows and columns. The concept of TableLayout works something similar to an HTML table. If you can recall the HTML table, TableLayout can be explained as 
 tag and TableRow is like a 
 element. You can use any view as table cell element.
","LIVE","<p>The TableLayout layout is an extension of LinearLayout. As the name indicates, TableLayout is used to display child View elements in rows and columns.</p>
<p>The concept of TableLayout works something similar to an HTML table. If you can recall the HTML table, TableLayout can be explained as &lt;table&gt; tag and TableRow is like a &lt;tr&gt; element. You can use any view as table cell element.</p>
<p>Let us create a TableView layout to display list of Android version releases. Each row contains three cells that represents version code, version name and API level. We are trying to achieve the same as the screenshot shown below.</p>
<p> </p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""TableLayout Android Example"" class=""aligncenter size-full wp-image-8021"" height=""254"" loading=""lazy"" src=""/media/uploads/articles/218/TableLayout-Android-Example.png"" srcset="""" width=""351""/></a></p>
<h1>Example</h1>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;TableLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:layout_marginTop=""10dp""&gt;

    &lt;TableRow
        android:background=""#607D8B""
        android:padding=""5dp""&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""Version"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""Version Name"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""API Level"" /&gt;
    &lt;/TableRow&gt;

    &lt;TableRow
        android:background=""#ECEFF1""
        android:padding=""5dp""&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""5.0"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""Android Lollipop"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""21"" /&gt;
    &lt;/TableRow&gt;

    &lt;TableRow
        android:background=""#ECEFF1""
        android:padding=""5dp""&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""4.4"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""Android Kitkat"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""19"" /&gt;
    &lt;/TableRow&gt;
    &lt;TableRow
        android:background=""#ECEFF1""
        android:padding=""5dp""&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""4.3"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""Android Jelly Bean"" /&gt;
        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""18"" /&gt;
    &lt;/TableRow&gt;
&lt;/TableLayout&gt;</pre>
<p>Now that we have declared the TableLayout layout, let is load this layout in the Activity <code>onCreate()</code> method</p>
<pre class=""prettyprint lang-java"">@Override
protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
}
</pre>
<p>The <code>SetContentView(int)</code> method loads the layout file for the Activity, specified by the layout resource Id.</p>
",0,"standard","post"
"Android FrameLayout Example","android-framelayout-example","Over the course of this tutorial, we will take a look into Android FrameLayout and creating layout through xml and from code programmatically.
FrameLayout is one of the useful layout provided by android system, which allows User Interface widgets to be overlapped with each other.","LIVE","<p>In this tutorial, we will take a look into Android FrameLayout and creating layout through XML and from code programmatically.</p>
<p>FrameLayout is one of the useful layout provided by the Android system, which allows User Interface widgets to be overlapped with each other.</p>
<p>The Linear Layout and RelativeLayout places the views adjacent to each other but, if you have to develop something as shown in the screenshot below,  where the TextViews are placed on top of an ImageView. It is quite impossible to achieve using LinearLayout or RelativeLayout.</p>
<p>In FrameLayout, all the child views added are placed like a stack. The most recently added are shown on top. This means that developers must pay attention to the order of widgets while adding them to the layout.</p>
<h2 class="""">Creating FrameLayout in XML</h2>
<ul>
</ul><p>Open Android Studio and Create a new project. In this example, I have used <code>MyApplication</code> as the name of my application.</p><p>Add a new file called <code>activity_main.xml</code> and add the following code. To compile this code, you need to add a image with named image.jpg.</p><ul>
</ul><ul>
</ul>
<pre class=""prettyprint lang-xml"">&lt;FrameLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""&gt;

    &lt;ImageView
        android:id=""@+id/imageView1""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:scaleType=""centerCrop""
        android:src=""@drawable/photo"" /&gt;

    &lt;TextView
        android:id=""@+id/textView1""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center_horizontal""
        android:layout_marginTop=""20dp""
        android:background=""#00000c""
        android:padding=""10dp""
        android:text=""Fanny Hands Lane, London""
        android:textColor=""#fafafa""
        android:textSize=""22sp"" /&gt;

    &lt;TextView
        android:id=""@+id/textView2""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""right|bottom""
        android:layout_marginLeft=""5dp""
        android:background=""#AA000000""
        android:padding=""10dp""
        android:text=""26/Jan/2014""
        android:textColor=""#FFFFFF""
        android:textSize=""18sp"" /&gt;

&lt;/FrameLayout&gt;
</pre>
<ul>
</ul><p>We are almost done! All you have to do is now set the layout to your activity. you can do that by calling <code>setContentView(layoutID)</code> method inside onCreate(). Your activity code should look something similar to the following code snippets.</p><ul>
</ul>
<pre class=""prettyprint lang-java"">//Your activity class
public class MainActivity extends Activity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}
</pre>
<ul>
</ul><p>Compile and run The output of the code will look same as the screenshot below.</p><ul>
</ul>
<p><a href=""http://stacktips.com/android/android-framelayout-example/attachment/frame-layout-android-example"" rel=""attachment wp-att-8005""></a></p>
<h2 class="""">Creating FrameLayout Programmatically</h2>
<p>Android operating system provides list of API’s to create FrameLayout programmatically. Although most developers prefers to have layout as xml, but certain situations you might require view to be created programmatically. The following code snippet will show you how to achieve the same result as shown in the image above, from code.</p>
<p>Just add the following code to your activity <code>onCreate()</code> method.</p>
<pre class=""prettyprint lang-java"">@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    //Initializing imageView
    ImageView imageView = new ImageView(this);
    imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
    imageView.setImageResource(R.drawable.photo);
    imageView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 
    			LayoutParams.MATCH_PARENT));

    TextView textView1 = new TextView(this);
    textView1.setText(""Fanny Hands Lane, London"");
    textView1.setTextSize(22);
    textView1.setGravity(Gravity.CENTER_HORIZONTAL);
    textView1.setTextColor(Color.parseColor(""#fcfcfc""));
    textView1.setBackgroundColor((Color.parseColor(""#00000c"")));
    textView1.setPadding(10,10,10,10);
	LayoutParams lp1 = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 
				Gravity.CENTER_HORIZONTAL);
    lp1.setMargins(0,20,0,0);
    textView1.setLayoutParams(lp1);

    TextView textView2 = new TextView(this);
    textView2.setTextSize(18);
    textView2.setGravity(Gravity.RIGHT|Gravity.BOTTOM);
    textView2.setText(""26/Jan/2014"");
    textView2.setTextColor(Color.WHITE);
    textView2.setPadding(10,10,10,10);
    textView2.setBackgroundColor(Color.BLACK);
    LayoutParams lp2 = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 
    			Gravity.BOTTOM|Gravity.RIGHT);
    textView2.setLayoutParams(lp2);

    //Initializing frame layout
    FrameLayout framelayout = new FrameLayout(this);
    framelayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 
    			LayoutParams.MATCH_PARENT));

    //Adding views to FrameLayout
    framelayout.addView(imageView);
    framelayout.addView(textView1);
    framelayout.addView(textView2);

     setContentView(framelayout);
}
</pre>
<h3>Key Points</h3>
<ol>
<li>The visibility of all child views added to FrameLayout, can be controlled programmatically by using <code>setVisiblity()</code> method.</li>
<li><code>LayoutParams</code> are used by views to tell their parents how they want to be laid out. The base LayoutParams class just describes how big the view wants to be for both width and height.</li>
<li>The order in which the views are added to FrameLayout is important. Views may be hidden beneath, if we some other view added on top of it.</li>
</ol>",0,"standard","post"
"Android Lollipop Toolbar Example","android-lollipop-toolbar-example","Toolbar is a complete replacement to Android ActionBar. It provides greater control to customize its appearance unlike old ActionBar. Using Toolbar, application developer can now, show multiple toolbars on the screen, spanning only part of the width, etc.
","LIVE","<h2>Introduction</h2>
<p>Android’s new operating system named Android Lollipop is highly focused on rich user experience and what they called it as material design. In this example, we will take a look at the new Actionbar replacement called Toolbar.</p>
<h2>What is Toolbar?</h2>
<p>The toolbar is a complete replacement to Android ActionBar. It provides greater control to customize its appearance, unlike old ActionBar. Using the Toolbar, the application developer can now, show multiple toolbars on the screen, spanning only part of the width, etc.</p>
<figure aria-describedby=""caption-attachment-7985"" class=""wp-caption aligncenter"" id=""attachment_7985"" style=""width: 620px""><a href=""http://stacktips.com"" target=""_self""><img alt=""Android Toolbar Example"" class=""size-medium wp-image-7985"" height=""331"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/220/Android-Toolbar-Example-620x331.png"" srcset="""" width=""620""/></a><figcaption class=""wp-caption-text"" id=""caption-attachment-7985"">Screenshot showing simple toolbar in android tablet and phone.</figcaption></figure>
<p>It is introduced in Android Lollipop, API level 21 release, and hence it is available to use, out of the box for the application that is targeted to 21 and above. However, as always Google provides fully supported Toolbar features to lower android os devices via AppCompact support library. In AppCompat, Toolbar is implemented in the <code>android.support.v7.widget.Toolbar</code> class.</p>
<p>A Toolbar can be used in two ways.</p>
<ol>
<li>Use a Toolbar as an replacement to ActionBar. In this you can still continued to use the ActionBar features such as menus, selections, etc.</li>
<li>Use a standalone Toolbar, where ever you want to place in your application.</li>
</ol>
<h2>Using Toolbar as ActionBar</h2>
<p>Following are simple steps you need to follow for implementing Toolbar as ActionBar replacement.</p>
<p>First of all, you need to disable ActionBar. To do this, you need to extend your application theme from <code>Theme.AppCompat.NoActionBar</code> or if you are already using <code>Theme.AppCompact</code> theme, then just add below lines of code snippet</p>
<pre class='""prettyprint'>&lt;!-- Base application theme. --&gt;
    &lt;style name=""AppTheme"" parent=""Theme.AppCompat""&gt;
        &lt;item name=""android:windowNoTitle""&gt;true&lt;/item&gt;
        &lt;item name=""windowActionBar""&gt;false&lt;/item&gt;
    &lt;/style&gt;
</pre>
<p>Secondly, add the App Compact V7 support support library. In this example, I am using Android Studio as the development IDE. You can add the V7 support library dependency to your application build.gradle file.</p>
<pre class='""prettyprint'>dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile ""com.android.support:appcompat-v7:21.0.+""
}
</pre>
<p>Now you need to add Toolbar to your Activity layout. Find the code snippet below for simple Toolbar Layout.</p>
<pre class='""prettyprint'>&lt;android.support.v7.widget.Toolbar
        android:id=""@+id/toolbar""
        android:minHeight=""?attr/actionBarSize""
        android:background=""#2196F3""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""&gt;
    &lt;/android.support.v7.widget.Toolbar&gt;
</pre>
<p>Apply the theme to Activity. Here in this step you need to apply the theme which we have created in step-1 to your activity. This can be done, by using <code>android:theme</code> attribute in your application AndroidManifest.xml.</p>
<pre class='""prettyprint'>&lt;activity
            android:name=""com.javatechig.sample.MyActivity""
            android:label=""@string/app_name""
            android:theme=""@style/AppTheme"" &gt;
&lt;/activity&gt;
</pre>
<p>Now you are almost ready. You just need to instantiate the Toolbar and add it to your activity by using <code>setSupportActionBar(Toolbar)</code> method.</p>
<pre class='""prettyprint'>import android.support.v7.app.ActionBarActivity;
import android.support.v7.widget.Toolbar;

public class MyActivity extends ActionBarActivity{

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_my);

        // Set a toolbar to replace the action bar.
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
	}
}
</pre>
",0,"standard","post"
"How to Implement Color Picker in WordPress?","how-to-implement-color-picker-in-wordpress","WordPress has been offering a great platform to its users. It&#8217;s a clean and easy-to-use back end always&hellip;
","LIVE","<p>WordPress has been offering a great platform to its users. It’s a clean and easy-to-use back end always kept it on top in the list of CMSs. The simple reason behind WordPress popularity is the ease it provides to manage the website in your own way. Also, you will be amazed to see the customization options that WordPress offers.</p>
<p>Most of the WordPress website owners often prefer adding custom features to add personal touches to their dashboard. For users, who spend a substantial amount of time in the admin area, changing colors can bring a refreshing experience to the way they work.</p>
<p>Changing colors for different admin areas like the posts categories, front-end background etc., isn’t a new concept. Of course, you can do so by simply adding a custom CSS field. But, let’s face it! Not all of us are good at CSS. Fortunately, WordPress 3.5 introduced a new “Color Picker”, making it easy for you to change the color scheme with just a click of a button.</p>
<p>This post is about using a color picker to implement the option for changing the background color (in the form of CSS3 gradients) of your posts on the front end.</p>
<h2>How to Create a Custom MetaBox With Color Picker?</h2>
<p>In the course of this tutorial, we will take a look into step by step approach to implement color picker in a meta box. Follow the steps given below and add the following code snippets to your functions files that will add meta box in your WordPress post screen with color picker field.</p>
<h3>Step 1 – Register Custom Metabox</h3>
<pre class=""prettyprint lang-php"">function wdm_add_meta_box() {
	add_meta_box('wdm_sectionid', 'Post Background', 'wdm_meta_box_callback', 'post');
}</pre>
<p>This code will register our custom meta box. It contains a default WordPress function: add_meta_box() that takes some parameters to tell WordPress about the meta box:</p>
<ol>
<li>wdm_sectionid: HTML ‘id’ attribute of the edit screen</li>
<li>Post Background: Title of the edit screen</li>
<li>wdm_meta_box_callback: This is a function that prints out the HTML for the edit screen.</li>
<li>post: This argument determines that the meta box will appear on your post editor screen. You can use replace it with ‘page’ if you want to use the meta box on the page screen.</li>
</ol>
<h3>Step 2 – Creating Custom Metabox</h3>
<pre class=""prettyprint lang-php"">add_action( 'add_meta_boxes', 'wdm_add_meta_box' );

function wdm_meta_box_callback( $post ) {
	wp_nonce_field( 'wdm_meta_box', 'wdm_meta_box_nonce' );
	$color = get_post_meta( $post-&gt;ID, 'post_bg', true );
	&lt;div class=""custom_meta_box""&gt;
	&lt;p&gt;
	&lt;label&gt;Select Post Background Color: &lt;/label&gt;
	&lt;input class=""color-field"" type=""text"" name=""post_bg"" value=""&lt;?php echo '#'.$color; ?&gt;""/&gt;
	&lt;/p&gt;
	&lt;div class=""clear""&gt;&lt;/div&gt; 
	&lt;/div&gt; 
}</pre>
<p>This part of the code will create a custom function wdm_meta_box_callback( $post ) that helps to generate the output of the metabox. And the add_action( ‘add_meta_boxes’, ‘wdm_add_meta_box’ ) function is a WordPress action hook that tells WordPress to add metabox.</p>
<h3>Step 3 – Saving Metabox Values</h3>
<pre class=""prettyprint lang-php"">function wdm_save_meta_box_data( $post_id ) {
	if ( !isset( $_POST['wdm_meta_box_nonce'] ) ) {
		return;
	}

	if ( !wp_verify_nonce( $_POST['wdm_meta_box_nonce'], 'wdm_meta_box' ) ) {
		return;
	}
	if ( defined( 'DOING_AUTOSAVE' ) &amp;&amp; DOING_AUTOSAVE ) {
		return;
	}
	if ( !current_user_can( 'edit_post', $post_id ) ) {
		return;
	}
	
	$post_bg = ( isset( $_POST['post_bg'] ) ? sanitize_html_class( $_POST['post_bg'] ) : '' );
	update_post_meta( $post_id, 'post_bg', $post_bg );
}
add_action( 'save_post', 'wdm_save_meta_box_data' );</pre>
<p>The wdm_save_meta_box_data($posy_id) function is used to save the metabox value to WordPress database.</p>
<p>For doing so, it requires ‘post id’ that save that meta box field value on the particular post meta session in the database. The add_action (‘save_post’, ‘wdm_save_meta_box_data’ ) is a hook that tells WordPress to save the post with meta value.</p>
<p>Now that you’ve come to know how the code works, you would like to see the outcome. The above code generates the input filed with the name “Post background color”, as you can see in the below screenshot.</p>
<h2>How to Use Color Picker?</h2>
<p>Although the meta box with the color picker is created, you still can’t use the color picker. In order to use it, copy and paste the below code in your theme’s functions.php file:</p>
<pre class=""prettyprint lang-php"">function wpse_80236_Colorpicker(){
	wp_enqueue_style( 'wp-color-picker');
	//
	wp_enqueue_script( 'wp-color-picker');
}
add_action('admin_enqueue_scripts', 'wpse_80236_Colorpicker');</pre>
<p><strong>Note</strong>: As we had discussed previously, Color Picker API was introduced with WordPress version 3.5, and so if you want to use this function then make sure that your website is running on WordPress version 3.5 or later.</p>
<p>Next, paste the below script code inside your wdm_meta_box_callback( $post ) function to generate the metabox.</p>
<pre class=""prettyprint lang-php"">&lt;script&gt;
(function( $ ) {
	// Add Color Picker to all inputs that have 'color-field' class
	$(function() {
	$('.color-field').wpColorPicker();
	});
})( jQuery );
&lt;/script&gt;
</pre>
<p>Once this script is executed, the “Color Picker” will be visible in your WordPress website admin panel.</p>
<p>If you need to get color code ID’s, simply add the following line of code in your functions.php file.</p>
<pre class=""prettyprint lang-php"">$post_background = get_post_meta( get_the_ID(), 'post_bg', true );
echo $post_background // here is your color code
</pre>
<p>That’s it! The color picker will be implemented into your meta box in your website backend. You can add the color picker to any other area in your admin panel following the same approach as we had discussed above.</p>
",0,"standard","post"
"15 Mobile App Design & UX/UI Trends 2015","15-mobile-app-design-uxui-trends-2015","The mobile app design &amp; UX/UI have gone through various evolutions. Every year has taught us new things&hellip;
","LIVE","<p>The mobile app design &amp; UX/UI have gone through various evolutions. Every year has taught us new things about the best features that should be implemented in the application and interface design. In the same way, the year 2014 has given lots of ideas that will set up trends in Mobile app design and UX/UI in 2015 and most of the designers &amp; developers are not aware of these trending tactics. Therefore, this blog showcases some of the major trends in mobile app design &amp; UX/UI that can help programmers to code the best app and generate the best revenue.</p>
<p>Let’s have a glance over major trends in application design &amp; UX/ UI in 2015.</p>
<h2>1. Flat Interface Design</h2>
<p>Designers should implement “Flat” design, as it gives a clean and simple structure to the interface. Moreover, it will also optimize the user experience because the users can easily access the features that they require.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Flat Design Interface"" class=""aligncenter wp-image-7835 size-medium"" height=""367"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/222/Flat-Design-Interface-620x367.png"" srcset="""" width=""620""/></a></p>
<h2>2. Design To Grab Attention At A First Sight</h2>
<p>Remember that do not waste application searcher’s time. Your application’s design should be powerful enough to impress the audience at a first sight. The audience should easily understand what your mobile application can do and know how to use it effectively.</p>
<h2>3. Design Layered Interface</h2>
<p>Besides implementing the clean design, it will be good to deploy the layered interface. This will give 3D like experience to the smartphones users and also make the user experience awesome. For implementing the multilayer interface, you should use active widgets at the front and the nonactive at the back.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Layered App Design"" class=""aligncenter wp-image-7838 size-medium"" height=""349"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/222/Layered-App-Design-620x349.png"" srcset="""" width=""620""/></a></p>
<h2>4. Integrate Social Media</h2>
<p>Today, social media, like Google+, Twitter and Facebook have got millions of users. By integrating these social networking websites in the mobile apps, you can enhance the functionality of your mobile app. With the social media, the users can give a challenge to their friends or other people who are in their networks. Moreover, it will also ease the way for marketing because the users can directly “Like”, “Share” and give “+1” to your app.</p>
<h2>5. Add Social Media Login Feature</h2>
<p>Most of the mobile web applications come with complex and time-consuming log in form that frustrates the users. Therefore, while downloading the mobile application, most of the users change their mind &amp; uninstall the app. The best solution to this is, integrate social media login facility. As millions of people have their account on social media websites, they only need to use their social media login data to access the mobile application.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Social Login Page"" class=""aligncenter size-medium wp-image-7935"" height=""355"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/222/Social-Login-Page-620x355.png"" srcset="""" width=""620""/></a></p>
<h2>6. Divide Elements/Widget With Space</h2>
<p>To make the content cleaner and simpler, it will be better not to include lines for separating the elements or widgets in the contents. The spacing makes the content understandable for the users and they can easily use the app.</p>
<h2>7. Implement Simple Color Schemes</h2>
<p>Deploy the simple color schemes in the application design. The simplicity in interface color makes the apps more interactive because it optimizes the “Flat” design, owing to this, users can easily access the features and use the particular function.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""App Color Palette"" class=""aligncenter wp-image-7839 size-medium"" height=""319"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/222/App-Color-Palette-620x319.png"" srcset="""" width=""620""/></a></p>
<h2>8. Deploy Targeted Gestures For Different Audience</h2>
<p>While designing an application, it is imperative that you create the design according to the audience. Try to implement the gesture features in the application, this will enable the users to access the mobile app in a smarter way.</p>
<h2>9. Code Thumb-Focused Interaction In App</h2>
<p>Nowadays, most of the people like to use &amp; hold the mobile phone by one hand and prefer thumb to interact with the app.  Therefore, you should code your app in such a way so that it possesses simple gesture that means thumb-oriented gesture and multiple fingers gesture (when not required). This thing will surely improve the usage of your application.</p>
<h2>10. Design Icon With Fill &amp; Stroke</h2>
<p>Use Fill and Stroke technique to create an icon for your app as this makes it easy for the users to identify the active and inactive section of the application. Hence, the user experience will also be improved.</p>
<h2>11. Embed Blur Effects In Interface</h2>
<p>Implementing the blur effects in the layered interface gives a clean, awesome and simple look to the application. This is one of the best ways to enhance the user experience because here the user can easily recognize which elements of the application are working.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""App with Blur Effects In Interface"" class=""aligncenter size-medium wp-image-7842"" height=""366"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/222/App-with-Blur-Effects-In-Interface-620x366.jpg"" srcset="""" width=""620""/></a></p>
<h2>12. Integrate Swipe Gesture Feature</h2>
<p>The swipe gesture in application reduces the number of steps in executing the mobile application. With swipe gesture, the user can navigate to different menus, run call to actions and trigger different actions, such as share, like or delete. It will also make gesture easy and the smartphone users can access the features of your application at a faster speed.</p>
<h2>13. Considerate About Users Privacy</h2>
<p>You should implement the standard security model in the application. Most of the developers integrate the features that can access the media files, contact information and other data of the smartphones. That gives birth to the tension in the mind of smartphones users. Therefore, you should mention that why are you using that information, so that users can easily trust. Besides this, you should also implement the option of not being traced.</p>
<h2>14. Code Effective Animation</h2>
<p>The animation feature can improve the user experience. But, it should be kept in mind that you code the animation in such a way that it does not affect the loading time of the application. Do not add lots of unimportant elements in the application as this will affect the application performance badly.</p>
<h2>15. In Apps Events/ Seasonal Features</h2>
<p>Integrate the push notification features in your application, so that the users can easily update their applications without facing any hassle of downloading and installing. This will also help you promote the offer in different festive seasons.</p>
<p>Use all these tips while designing &amp; developing the mobile application. These things are helpful to you in the development of mobile app effectively. Do you have any confusion regarding this blog or want to share view regarding application designing. Please write to us by using the comment section given below.</p>
",0,"standard","post"
"Strategy Design Pattern in Java","strategy-design-pattern-in-java","The Strategy design pattern belongs to the behavioral family of pattern that deals with change the behavior of a class by changing the internal algorithm at runtime without modifying the class itself. This allows extensibility and loose coupling of objects.
","LIVE","<p>The Strategy design pattern belongs to the behavioral family of pattern that deals with the change of the behavior of a class by changing the internal algorithm at runtime without modifying the class itself. This allows extensibility and loose coupling of objects. The definition of State Design Pattern as per the  original Gang of Four book is;</p>
<p class=""definition"">“Defines a set of encapsulated algorithms that can be swapped to carry out a specific behavior.”</p>
<h3>Use cases</h3>
<p>A data compression software like WinZip, provides different algorithms to perform gip, gzip, tar, jar, 7zip format. At runtime, the client chooses which type of algorithm to be performed.</p>
<p>Email client like outlook supports various email types such as plain text and HTML type. It allows the client to choose the email format.</p>
<h3>How does Strategy Pattern Works?</h3>
<p>The Strategy pattern is simple yet popular design pattern mostly works together with State pattern. Following are the steps involved to create strategy design pattern:</p>
<ol>
<li>Implement a Strategy interface for your strategy objects. This interface defines the strategy object behavior.</li>
<li>Implement Concrete Strategy classes that implement the Strategy interface defined in the above step.</li>
<li>Create a Context class and maintain the reference to strategy object. Create a setter and getter method to allow access to a strategy object.</li>
</ol>
<h3>Strategy Design Pattern Example</h3>
<p>Let us take the example of a program that performs various number sorting algorithm such as Insertion sort, Selection Sort, Merge Sort etc. It allows the client to choose which type of sorting he would like to perform.</p>
<p>The above use case can be represented in the following class diagram</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Strategy Design Pattern Java"" class=""aligncenter size-full wp-image-7714"" height=""342"" loading=""lazy"" src=""/media/uploads/articles/223/Strategy-Design-Pattern-Java.png"" srcset="""" width=""609""/></a></p>
<p><strong>SortingStrategy.java</strong></p>
<pre class=""prettyprint lang-java"">public interface SortingStrategy {

	public void sort(int[] numbers);

}</pre>
<p><strong>SelectionSort.java</strong></p>
<pre class=""prettyprint lang-java"">public class SelectionSort implements SortingStrategy {

	@Override
	public void sort(int[] numbers) {
		System.out.println(""Selection Sort!"");

		int i, j, first, temp;
		for (i = numbers.length - 1; i &gt; 0; i--) {
			first = 0;
			for (j = 1; j &lt;= i; j++) {
				if (numbers[j] &gt; numbers[first])
					first = j;
			}
			temp = numbers[first];
			numbers[first] = numbers[i];
			numbers[i] = temp;
		}
		
		System.out.println(Arrays.toString(numbers));
	}
}
</pre>
<p><strong>InsertionSort.java</strong></p>
<pre class=""prettyprint lang-java"">public class InsertionSort implements SortingStrategy {

	@Override
	public void sort(int[] numbers) {
		System.out.println(""Insertion Sort!"");

		for (int i = 1; i &lt; numbers.length; i++) {
			int temp = numbers[i];
			int j;
			for (j = i - 1; (j &gt;= 0) &amp;&amp; (numbers[j] &gt; temp); j--) {
				numbers[j + 1] = numbers[j];
			}
			numbers[j + 1] = temp;
		}

		System.out.println(Arrays.toString(numbers));
	}
}
</pre>
<pre class=""prettyprint lang-java"">public class SortingContext {
	
	private SortingStrategy strategy;
	
	public void setSortingMethod(SortingStrategy strategy) {
		this.strategy = strategy;
	}
	
	public SortingStrategy getStrategy() {
		return strategy;
	}
	
	public void sortNumbers(int[] numbers){
		strategy.sort(numbers);
	}
}
</pre>
<p><strong>TestMain.java</strong></p>
<p>Here is how client using strategy pattern</p>
<pre class=""prettyprint lang-java"">public class TestMain {

	public static void main(String[] args) {
		
		int numbers[] = {20, 50, 15, 6, 80};
		
		SortingContext context = new SortingContext();
		context.setSortingMethod(new InsertionSort());
		context.sortNumbers(numbers);
		
		System.out.println(""***********"");
		context.setSortingMethod(new SelectionSort());
		context.sortNumbers(numbers);
		
	}
}
</pre>
<p><strong>Output</strong></p>
<pre class=""prettyprint"">Insertion Sort!
[6, 15, 20, 50, 80]
***********
Selection Sort!
[6, 15, 20, 50, 80]

</pre>
",0,"standard","post"
"State Design Pattern in Java","state-design-pattern-in-java","Over the course of this article, we will examine State design pattern in java with help of realtime examples. The State design pattern belongs to the behavioral family of pattern that deals with the runtime object behavior based on the current state. The definition of State Design Pattern as per the original Gang of Four book is; &#8220;Allows an object to alter its behavior when its internal state changes. The object will appear to change its class&#8221;.
","LIVE","<p>Over the course of this article, we will examine State design pattern in java with help of real-time examples.</p>
<p>The State design pattern belongs to the behavioral family of pattern that deals with the runtime object behavior based on the current state. The definition of State Design Pattern as per the original Gang of Four book is; “Allows an object to alter its behavior when its internal state changes. The object will appear to change its class”.</p>
<p>How does state pattern works:</p>
<ul>
<li>Define an object that represents various states that an object can be. Remember state machine.</li>
<li>Define a context object, whose behavior varies as its state object changes.</li>
</ul>
<h3>Use cases</h3>
<p>State pattern is one of the heavily used patterns in game development. The game character can be in different states such as healthy, surviving and dead. When the character is healthy, it allows the user to fires at enemies with different weapons. When surviving state its health gets critical, and when its health reaches to 0, the character is said to be in the dead state where the game is over.</p>
<p>Let us implement this use case without using the State design pattern. It can be achieved by using set of if else conditional checks, as shown in the following code snippets.</p>
<h3>Player.java</h3>
<p>The Player class defines the different actions a player can perform.</p>
<pre class=""prettyprint lang-java"">public class Player {

	public void attack() {
		System.out.println(""Attack"");
	}

	public void fireBumb() {
		System.out.println(""Fire Bomb"");
	}

	public void fireGunblade() {
		System.out.println(""Fire Gunblade"");
	}

	public void fireLaserPistol() {
		System.out.println(""Laser Pistols"");
	}

	public void firePistol() {
		System.out.println(""Fire Pistol"");
	}

	public void survive() {
		System.out.println(""Surviving!"");
	}

	public void dead() {
		System.out.println(""Dead! Game Over"");
	}

}
</pre>
<p>Now let us define our game context class which defines the different actions conditionally depends on the state of the player.</p>
<h3>GameContext.java</h3>
<pre class=""prettyprint lang-java"">public class GameContext {

	private Player player = new Player();

	public void gameAction(String state) {
		if (state == ""healthy"") {
			player.attack();
			player.fireBumb();
			player.fireGunblade();
			player.fireLaserPistol();
		} else if (state == ""survival"") {
			player.survive();
			player.firePistol();
		} else if (state == ""dead"") {
			player.dead();
		}
	}
}
</pre>
<p>In the above code snippet, the gameAction method contains too many conditional blocks for performing the different game action based on the state of the player. This is a real problem of code maintainability. this can be avoided using the State design pattern.</p>
<h1>State Design Pattern Example</h1>
<p>Before we begin with the state design pattern, let us have a look into the class design.<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""State Design Pattern Java"" class=""aligncenter size-full wp-image-7693"" height=""449"" loading=""lazy"" sizes=""(max-width: 843px) 100vw, 843px"" src=""/media/uploads/articles/224/State-Design-Pattern-Java.png"" srcset="""" width=""843""/></a>1. Define an interface named PlayerState that defines an action method. The access() method takes the instance of Player class. This is required to perform the player action.</p>
<pre class=""prettyprint lang-java"">public interface PlayerState {	
	void action(Player p);
}
</pre>
<p>2. Define three different classes that represent the different states. In this example, I have named them as, <code>HealthyState</code><code>, SurvivalState</code><code>DeadState</code>. All three classes implement the <code>PlayerState</code>interface and provides the specific <code>action()</code> method implementation.</p>
<pre class=""prettyprint lang-java"">public class HealthyState implements PlayerState {

	@Override
	public void action(Player p) {
		p.attack();
		p.fireBumb();
		p.fireGunblade();
		p.fireLaserPistol();
	}
}

public class SurvivalState implements PlayerState {

	@Override
	public void action(Player p) {
		p.survive();
		p.firePistol();
	}
}

public class DeadState implements PlayerState {

	@Override
	public void action(Player p) {
		p.dead();
	}
}</pre>
<p>3. The <code>GameContxt</code> class contains two <code>setState()</code> method composition. Now we will remove all of the code to conditional logic.</p>
<pre class=""prettyprint lang-java"">public class GameContext {
	
	private PlayerState state = null;
	private Player player = new Player();

	public void setState(PlayerState state) {
		this.state = state;
	}

	public void gameAction() {
		state.action(player);
	}
}
</pre>
<p>4. That’s All! Let us test our code using below class.</p>
<pre class=""prettyprint lang-java"">public class GameTest {

	public static void main(String[] args) {

		GameContext context = new GameContext();

		context.setState(new HealthyState());
		context.gameAction();
		System.out.println(""*****"");

		context.setState(new SurvivalState());
		context.gameAction();
		System.out.println(""*****"");

		context.setState(new DeadState());
		context.gameAction();
		System.out.println(""*****"");

	}
}
</pre>
<h3>Output</h3>
<pre class=""prettyprint"">Attack
Fire Bomb
Fire Gunblade
Laser Pistols
*****
Surviving!
Fire Pistol
*****
Dead! Game Over
*****
</pre>
",0,"standard","post"
"ObjectAid UML Class Diagrams Generation Plugin for Eclipse","objectaid-uml-class-diagrams-generation-plugin-for-eclipse","The ObjectAid UML Explorer is a freemium and lightweight tool that helps to visualize and generate Class and&hellip;","LIVE","<p>The ObjectAid UML Explorer is a freemium and lightweight tool that helps to visualize and generate class and sequence diagrams straight from your Java code.</p>
<p>It is a plugin for the Eclipse integrated development environment (IDE) that generates class diagrams from Java code. It allows software developers to quickly and easily visualize the structure of their Java classes, including their relationships and dependencies, without having to manually draw diagrams.
</p>
<p>The plugin supports many UML (Unified Modeling Language) diagram types and can be used to generate class diagrams, sequence diagrams, use case diagrams, and others.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""ObjectAid UML Explorer"" class=""aligncenter size-medium wp-image-7486"" height=""396"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/225/ObjectAid-UML-Explorer-620x396.jpg"" srcset="""" width=""620""/></a></p>
<h1>Features</h1>
<p>Following are some of the ObjectAid features</p>
<ol>
<li>Provides an drag and drop canvas within eclipse IDE to that allows dragging java classes to generate class and sequence diagrams.</li>
<li>Save diagrams in different standard image formats and print straight from IDE</li>
<li>Realtime diagram update. When there is a change code class structure, it reflects the changes in realtime</li>
<li>Open and explore the class hierarchy and relationships</li>
<li>The licensed version of ObjectAid support much more than the free version. It support additional features like, reverse engineer relationships.</li>
<li>SVG and PDF export</li>
</ol>
<h1>How to Install ObjectAid</h1>
<p>Open Eclipse and drag the below Install button into your workspace. Alternatively, you can manually install from the update site by following the steps outlined below.</p>
<p><a class=""drag"" href=""http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=495"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""Drag to your running Eclipse workspace to install ObjectAid UML Explorer""><img alt=""Drag to your running Eclipse workspace to install ObjectAid UML Explorer"" src=""http://marketplace.eclipse.org/sites/all/themes/solstice/_themes/solstice_marketplace/public/images/btn-install.png""/></a></p>
<ol>
<li>Open Eclipse and go to Help &gt; Install New Software</li>
<li>Click on add to add a new repository and enter name ObjectAid UML Explorer</li>
<li>Enter location url as <code>http://www.objectaid.net/update</code></li>
<li>And now proceed with the on screen instructions for installation. Note that it will ask you to restart Eclipse to complete the instruction.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""ObjectAid Eclipse Installation"" class=""aligncenter size-medium wp-image-7491"" height=""466"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/225/ObjectAid-Eclipse-Installation-620x466.png"" srcset="""" width=""620""/></a></p>
<h1>Creating Class Diagram in ObjectAid</h1>
<ol>
<li>To create a new UML class diagram, just click on File | New | Other. Select ObjectAid UML diagram from the opened wizard. Select Class or Sequence diagram you want to create.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Create New ObjectAid Diagram"" class=""aligncenter size-full wp-image-7490"" height=""501"" loading=""lazy"" src=""/media/uploads/articles/225/Create-New-ObjectAid-Diagram.png"" srcset="""" width=""526""/></a></p>
<ol start=""2"">
<li>This step will provide a canvas for the diagram. Now just drop compiled java classes into the canvas and it will generate the diagram.</li>
<li>Right click on the canvas to see various available options.</li>
</ol>",0,"standard","post"
"Template Method Design Pattern in Java","template-method-design-pattern-in-java","Over the course of this article, we will examine the Template  Method design pattern in java with help&hellip;
","LIVE","<p>Over the course of this article, we will examine the Template  Method design pattern in java with help of real-time examples.</p>
<p>The template method design pattern belongs to the behavioral family of patterns that defines the steps for an algorithm and allows the subclass to provide the implementation for one or more steps. This design pattern helps in maximizing the code reusability.</p>
<h3>How does the Template Method Works?</h3>
<ol type=""i"">
<li>Define an abstract base class with some fully qualified method containing common implementation logic</li>
<li>Declare the abstract methods for subclasses to override specific behaviors</li>
<li>Declare a <strong>Template method</strong> in a superclass that holds the core algorithm implementation steps</li>
<li>Derived classes can override placeholder methods</li>
<li>Derived classes can override implemented methods</li>
</ol>
<h3>Use Case</h3>
<p>Let us take the example of a Pizza Store. The making of a Pizza includes the steps such as selection of bread, add ingredient, heating, add toppings and add cheese. All these steps are in sequential order. Let us implement this use case in Template Method design representation.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Template Method Design Pattern Example"" class=""aligncenter size-medium wp-image-7471"" height=""406"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/226/Template-Method-Design-Pattern-Example-620x406.png"" srcset="""" width=""620""/></a></p>
<p>The above use case is represented in the following class diagram.</p>
<ol type=""i"">
<li>We have declared an abstract base class for all <code>Pizza</code> implementation. The Pizza store currently serves two variants of pizzas; <code>SweetCornPizza</code> and <code>MexicanPizza</code>. Both classes extends Pizza class.</li>
<li>Pizza class contains the <code>chooseBread()</code>, <code>addIngredients()</code> abstract methods. Each of the Pizza implementation will override them to provide specific implementation logic.</li>
<li>The <code>heating()</code>, <code>addTopinngs()</code> and <code>addCheese()</code> methods are common for all Pizza types and hence their implementation is commonly provided in Pizza super class.</li>
<li>Pizza superclass defines <code>preparePizza()</code> template method that controls the order that all other methods are called.</li>
<li>Note that preparePizza() method is declared as final, because we don’t want client to override/change the pizza preperation  steps.</li>
</ol>
<p>That’s all! We are ready with the Template Method design. Lets us have a glance at the code snippet below.</p>
<h4>Pizza.java</h4>
<pre class=""prettyprint lang-java"">public abstract class Pizza {
	public abstract void chooseBread();
	public abstract void addIngredients();

	public void heating() {
		System.out.println(""Heating for 10 minutes!"");
	}

	public void addTopinngs() {
		System.out.println(""Adding Topinngs!"");
	}

	public void addCheese() {
		System.out.println(""Adding Cheese!"");
	}

	// Template method
	public final void preparePizza() {
		chooseBread();
		addIngredients();
		heating();
		addCheese();
		addTopinngs();
	}
}</pre>
<h4>SweetCornPizza.java</h4>
<pre class=""prettyprint lang-java"">public class SweetCornPizza extends Pizza {
	@Override
	public void chooseBread() {
		System.out.println(""Choosing SweetCorn Pizza Bread!"");
	}

	@Override
	public void addIngredients() {
		System.out.println(""Adding SweetCorn Pizza Ingredients!"");
	}
}
</pre>
<h4>MexicanPizza.java</h4>
<pre class=""prettyprint lang-java"">public class MexicanPizza extends Pizza {
	@Override
	public void chooseBread() {
		System.out.println(""Choosing Mexican Pizza Bread!"");
	}

	@Override
	public void addIngredients() {
		System.out.println(""Adding Mexican Pizza Ingredients!"");
	}
}
</pre>
<h4>TestMain.java</h4>
<pre class=""prettyprint lang-java"">public class TestMain {
	public static void main(String[] args) {		
		SweetCornPizza pizza1 = new SweetCornPizza();
		pizza1.preparePizza();
		
		System.out.println(""**********"");
		
		MexicanPizza pizza2 = new MexicanPizza();
		pizza2.preparePizza();
	}
}
</pre>
<h4>Output</h4>
<pre class=""prettyprint"">Adding SweetCorn Pizza Ingredients!
Heating for 10 minutes!
Adding Cheese!
Adding Toppings!
************
Choosing Mexican Pizza Bread!
Adding Mexican Pizza Ingredients!
Heating for 10 minutes!
Adding Cheese!
Adding Toppings!
</pre>
<h3>Did you know?</h3>
<ol>
<li>The Template method should be declares as final to avoid its subclass overriding its implementation logic.</li>
<li>The template method in a super class follows the <a href=""http://en.wikipedia.org/wiki/Hollywood_principle"" rel=""nofollow noopener noreferrer"" target=""_blank"">Hollywood principle</a>, <i>Don’t call us, we’ll call you.</i> This refers to the fact that instead of calling the base class methods in the subclasses, the methods from the subclass are called form super class template method.</li>
</ol>
<h3>Problem – 1</h3>
<p>So far our pizza store works great. But now based on the customer demand the Pizza store is willing to introduce two new pizza types DoubleCheesePizza and NoCheesePizza.</p>
<p>In Order to support Double Cheese Pizza, we can override the addCheese() method in DoubleCheesePizza class and provide double cheese specific implementation here.</p>
<h4>DoubleCheesePizza.java</h4>
<pre class=""prettyprint lang-java"">public class DoubleCheesePizza extends Pizza {
	@Override
	public void chooseBread() {
		System.out.println(""Choosing DoubleCheese Pizza Bread!"");
	}

	@Override
	public void addIngredients() {
		System.out.println(""Adding DoubleCheese Pizza Ingredients!"");
	}
	
	@Override
	public void addCheese() {
		System.out.println(""Adding Double Cheese!"");
	}
}
</pre>
<p>However, for No cheese pizza the current design will fail to support. We have to introduce hook methods to achieve the same.</p>
<ol>
<li>Add <code>isCheese()</code> method in Pizza class that execute <code>addCheese()</code> method conditionally.</li>
<li>Change the following code in <code>preparePizza()</code> method.</li>
</ol>
<pre class=""prettyprint lang-java"">public boolean isCheese(){
	return true;
}

// Template method
public final void preparePizza() {
	chooseBread();
	addIngredients();
	heating();
		
	if(isCheese()){
	    addCheese();	
	}
	addTopinngs();
}</pre>
<h4>NoCheesePizza.java</h4>
<pre class=""prettyprint lang-java"">public class NoCheesePizza extends Pizza {
	@Override
	public void chooseBread() {
		System.out.println(""Choosing SweetCorn Pizza Bread!"");
	}

	@Override
	public void addIngredients() {
		System.out.println(""Adding SweetCorn Pizza Ingredients!"");
	}
	
	@Override
	public boolean isCheese() {
		return false;
	}
}
</pre>
",0,"standard","post"
"Unleashing Agile Development Tools Amended For Better Performance","unleashing-agile-development-tools-amended-for-better-performance","The Agile development is in the vogue nowadays, this is why, not only the software developers but, various businesses are also seeking a quickly iterative and better approach. Let&#8217;s have a look at some of the top-notched development tools that facilitate rapid project management in a proficient way.
","LIVE","<p>The Agile development is in the vogue nowadays, this is why, not only the software developers but, various businesses are also seeking a quickly iterative and better approach.</p>
<p>However, adopting this change is not as easy as said, but luckily there are several agile development tools that can help attain success in an efficient and effective fashion. Moreover, with the rising demands of the businesses, these tools have been further refined and upgraded to ensure surefire results.</p>
<p>Let’s have a look at some of the top-notched development tools that facilitate rapid project management in a proficient way.</p>
<h2>Atlassian Jira</h2>
<p><img alt=""Atalasian JIRA"" class=""size-full wp-image-7445 aligncenter"" height=""116"" loading=""lazy"" src=""/media/uploads/articles/227/Atalasian-JIRA.png"" srcset="""" width=""300""/></p>
<p>Popular for efficiently analyzing the product development, the <a href=""https://www.atlassian.com/software/jira"" rel=""nofollow noopener noreferrer"" target=""_blank"">Atlassian Jira</a> tool offers a great way to help teams keep their work well organized and instantly resolve the issues with an absolute approach. Teams can assign the task and follow the desired activity by implementing this tool. Moreover the add-on, jira Agile offers additional features that add to agile development, and these include team functions visualization, fast-running backlogs development and more.</p>
<p>Jira has been eventually improved version by version and the latest of all three is the Jira 6.3 version. Here are the features of its each version.</p>
<ul class=""space"">
<li><b>6.1 Version –</b> It included an HTML5 editor and branch workflow functionalities that enabled teams to efficiently perform their job while implementing smaller branches.</li>
<li><b>6.2 Version –</b> Offers a dashboard by bringing all the relics associated with development under a common place.</li>
<li><b>6.3 Version –</b> This is the current version that has been incorporated with better project-tracking features for improved performance.</li>
</ul>
<p>The latest portfolio of Jira allows users to review the work status for a project and teams at a glance.</p>
<h2>LeanKit</h2>
<p><img alt=""Leankit"" class=""size-full wp-image-7446 aligncenter"" height=""90"" loading=""lazy"" src=""/media/uploads/articles/227/Leankit.png"" srcset="""" width=""300""/></p>
<p>The <a href=""http://leankit.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">LeanKit</a> maps the organization processes on a whiteboard that implements the cloud-based services. By using this tool, teams can visualize how the workload is distributed among several members and allow them to fetch the older data associated with the projects.<a href=""http://stacktips.com"" target=""_self""><br/>
</a></p>
<p>To deliver more refined data details, the tool has been recently enhanced with more reporting methods and sign-on functionalities. In fact, tools that help manage an enterprise project portfolio for an enterprise have also been incorporated in the LeanKit. This is just the beginning, this tool has been designed with the scope of betterment to the large extent that can be integrated to meet the futuristic business demands as and when desired.</p>
<h2>Planbox</h2>
<p><img alt=""Planbox"" class=""aligncenter size-full wp-image-7448"" height=""80"" loading=""lazy"" src=""/media/uploads/articles/227/Planbox.png"" srcset="""" width=""350""/></p>
<p>With a tool like <a href=""https://www.planbox.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Planbox</a>, you can easily keep a track of all the processes running on your project through the dynamic customer feedbacks and burndown charts generated by this tool. This management tool has been recently improved further to deliver a remarkable performance with an enhanced dashboard and better reporting. However, it is also expected to soon come up with more powerful and resourceful features like time tracking tool and capability to allow users fetch the desirable data implemented in the Planbox.</p>
<h2>Axosoft</h2>
<p><img alt=""Axosoft"" class=""aligncenter size-full wp-image-7449"" height=""80"" loading=""lazy"" src=""/media/uploads/articles/227/Axosoft.png"" srcset="""" width=""300""/></p>
<p>The previous version of this tool was popular as <a href=""http://www.axosoft.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Axosoft</a> OnTime Scrum. The suite of this tool basically includes four major modules including Hesk Desk, Wiki, Bug Tracker and Scrum. It is based on HTML5 and designed to facilitate teams with burndown charts, and efficient time tracking and bug fixing functions via a user-friendly dashboard. These features will certainly help teams to conveniently and instantly manage sprints, backlogs and releases.</p>
<p>This proficient tool has been further updated with new and advanced capabilities like SMS notifications for better team management. The integrated daily Scrum feature represents the status bar corresponding to work accomplished by a team. You can also observe some more amendments in the latest version of the tool, like drag and drop features, cut and paste feature, a more enhanced dashboard and a lot more.</p>
<h2>Microsoft Visual Studio Team Foundation Server</h2>
<p><a href=""http://stacktips.com"" target=""_self""><br/>
</a> <a href=""http://stacktips.com"" target=""_self""><br/>
</a> <a href=""http://stacktips.com"" target=""_self""><img alt=""Microsoft Visual Studio Team Foundation Server"" class=""aligncenter size-full wp-image-7447"" height=""80"" loading=""lazy"" src=""/media/uploads/articles/227/Microsoft-Visual-Studio-Team-Foundation-Server-.png"" srcset="""" width=""374""/></a></p>
<p>The <a href=""http://www.visualstudio.com/en-us/products/tfs-overview-vs.aspx"" rel=""nofollow noopener noreferrer"" target=""_blank"">Team Foundation Server</a> (TFS) is basically a tool that helps manage the lifecycle of an application that is developed in the Visual Studio. In the very recently upgraded version of this tool you can find a better text editor, work elements that can help deliver an enhanced performance. The amended Kanban board of the TFS enables users to track a greater number of items.<a href=""http://stacktips.com"" target=""_self""><br/>
</a></p>
<p>Moreover, to ensure security the stakeholder license has also been incorporated in the server itself, as it helps keep shuffling server access. Its latest version Update 4 has even enabled the stakeholders with a complete access permissions (including, read, write and create) to the work elements, while prohibiting the access to code and tests.</p>
<p>These augmentations epitomize how the development tools are enhanced to support the rising need of agile development in businesses. You can also reap the benefits of these resourceful tools and improve your business productivity which embellishing your project quality.</p>
",0,"standard","post"
"How to Change Default WordPress Avatar","how-to-change-default-wordpress-avatar","Gravatar is a globally recognized avatar service, being used in most of the WordPress blog today. If you&hellip;
","LIVE","<p>Gravatar is a globally recognized avatar service, being used in most of the WordPress blog today. If you are using gravatar service you just need to register and map your personalized image avatar to your email id once. Gravatar identifies your post and automatically, your avatar will appear on the blog.</p>
<p>Gravatar is built into WordPress and it is used in the author bio section. If a user email address is not registered with Gravatar, WordPress allows you to pick some of the boring default images to show as the default avatar. Sometimes, “Mystery Person” looks quite boring on a fancy looking website.</p>
<p>In this example, we will take a look into how to customize the avatar and add a default image of your choice.</p>
<h2>Step-1 Upload New Gravatar Image</h2>
<p>Upload the image that you want to show as your avatar to themes image folder. The theme folder can be found in the following path. Here in this example my file name is default-avatar.png and uploaded to the following location.</p>
<pre>wp-content/themes/twentyeleven/images/default-avatar.png</pre>
<h2>Step-2 Adding WordPress Hook</h2>
<p>Once you have uploaded your image in the above step, you need to write the below code that works as WordPress hook to add a new default avatar image. Paste the below code in your <code>functions.php</code> file located in your themes folder.</p>
<pre class=""prettyprint lang-php"">/** Add a new default avatar **/
add_filter( 'avatar_defaults', 'add_gravatar' );

function add_gravatar ($avatar_defaults) {
       $myavatar = get_bloginfo('template_directory') . '/images/default-avatar.png';
       $avatar_defaults[$myavatar] = ""MY Gravatar"";
       return $avatar_defaults;
}
</pre>
<h2>Step-3 Change Default Avatar Settings</h2>
<p>Now you are almost done. Just visit <strong>Settings -&gt; Discussions -&gt; Default Avatar</strong> section in your WordPress admin dashboard, and you will find your newly added avatar image listed as shown in the image below.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Change Gravatar Image WordPress"" class=""aligncenter size-medium wp-image-7464"" height=""344"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/228/Change-Gravatar-Image-Wordpress-620x344.png"" srcset="""" width=""620""/></a></p>
<p>That’s all. Now you will see your newly created avatar in author bio and other section as per your theme layout.</p>
",0,"standard","post"
"Architexa UML Modeling Tool Suite for Eclipse","architexa-uml-modeling-tool-suite-for-eclipse","Architexa is yet another smarter eclipse tool that allows you to build diagrams quickly from your code. It provides easy to use and powerful user interface that lets you create code diagrams that make sense. Currently Architexa support most common diagrams including, class and sequence diagram. Architexa is designed to be code centric around your need.
","LIVE","<p>Architexa is yet another smarter eclipse tool that allows you to build diagrams quickly from your code. It provides easy to use and powerful user interface that lets you create code diagrams that make sense. Currently Architexa support most common diagrams including, class and sequence diagram. Architexa is designed to be code centric around your need.</p>
<h1>Architexa Features</h1>
<p>The Architexa tool suite helps developers with the following features</p>
<ol class=""space"">
<li>Make sense of your code with quick visualizations of key components</li>
<li>Take advantage of powerful interactive exploration of the diagrams</li>
<li>Document code architecture and share discussions with team members</li>
<li>Powerful Class, Sequence, and Layered Diagram Generation and Editing</li>
<li>Collaboration by Sharing Diagrams, Annotating, and Commenting</li>
<li>Sophisticated real-time code analysis.</li>
</ol>
<p><strong>Layered Diagrams</strong></p>
<ul>
<li>View high level code organization</li>
<li>Examine code dependencies</li>
<li>Detect code cycles quickly</li>
</ul>
<p><strong>Class Diagrams</strong></p>
<ul>
<li>View comprehensive architecture</li>
<li>Understand class interctions</li>
<li>Conquer open tabs</li>
</ul>
<p><strong>Sequence Diagrams</strong></p>
<ul>
<li>Examine nitty-gritty code details</li>
<li>Understand detailed logic flow</li>
<li>Debug easily</li>
</ul>
<p><strong>IDE Integration</strong></p>
<ul>
<li>Real-time code analysis</li>
<li>Linked exploration</li>
<li>Open diagrams from any Eclipse view</li>
</ul>
<p><strong>Collaboration</strong></p>
<ul>
<li>Effortless sharing</li>
<li>Create groups to share with</li>
<li>Share by email</li>
</ul>
<p><strong>Documentation</strong></p>
<ul>
<li>Add JavaDoc comments to diagrams</li>
<li>See related diagrams</li>
<li>Track changes to diagrams</li>
</ul>
<h1>Installing Architexa</h1>
<p>Open eclipse and drag the below Install button into workspace.</p>
<p><a class=""drag"" href=""http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=5677"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""Drag to your running Eclipse workspace to install Architexa for Eclipse 3.x""><img alt=""Drag to your running Eclipse workspace to install Architexa for Eclipse 3.x"" src=""http://marketplace.eclipse.org/sites/all/themes/solstice/_themes/solstice_marketplace/public/images/btn-install.png""/></a></p>
",0,"standard","post"
"Brief introduction to Software Design Patterns","brief-introduction-to-design-patterns","What are Design Patterns? Patterns exist everywhere in the world. In culinary, art, medicine, law, mathematics, music, dancing&hellip;
","LIVE","<h3>What are Design Patterns?</h3>
<p>Patterns exist everywhere in the world. In culinary, art, medicine, law, mathematics, music, dancing and the list goes on. Generally, a pattern is identified as a recurring arrangement created to solve some generalized problem. It is simply a solution outline, but not the solution itself. In more formal words, a pattern is a generalized outline of a reusable solution to a recurring problem.</p>
<blockquote><p>A software design pattern is a general reusable solution to a commonly occurring problem within a given context in software design.<br/>
— Wikipedia</p></blockquote>
<p>In software development,  design patterns are the well-described solution to some of the common recurring problems you may face while designing your software. Design patterns are the concepts that outline the solution approach but not the solution itself and hence they are platform and language independent.</p>
<p>There are many design patterns identified and available today. It is almost impossible for an individual to know about each and every design pattern present. However, a developer with knowledge of the Foundational design patterns known as GOF (Gang-Of-Four) will make him efficient on his day to day job.</p>
<h3>Why Design Patterns?</h3>
<p>Some of the benefits of using design patterns are:</p>
<ul>
<li>Design patterns are already defined and provide an industry standard approach to solve the recurring problem, so it saves time.</li>
<li>Using design pattern promotes re-usability that leads to more robust and highly maintainable code.</li>
<li>Since design patterns are already defined, it makes out code easy to understand and debug. It leads to faster development and new members of the team understand it easily.</li>
</ul>
<h3>Characteristics of a Good Design</h3>
<p>While designing your application, you should be conscious of various software design characteristics. A great design would have all the characteristic.</p>
<p>However, it is practically not possible, as sometimes one pattern contradicts to other, so you have to make a hit a middle ground and choose one over other.</p>
<p>Following are some of the characteristics for a good software design:</p>
<h4>Ease of maintenance</h4>
<p>The software is always highly unstable. It is expected to undergo maintenance and changes in the feature. The design should be self-explanatory and easy to understand for other programmers.</p>
<h4>Minimal complexity</h4>
<p>Simplicity is the soul of efficiency (– Austin Freeman).</p>
<p>Design for simplicity. A complex design is often difficult to extend, maintain and understand. There are factors like many interconnections and relations, non-trivial algorithm, behaviors or rules, etc. causes the complexity in design.</p>
<h4>Loose coupling</h4>
<p>All components in your design should be loosely coupled to the maximum extent possible.  This will make the system modularized and each component can be tested separately before it is integrated into a  larger system.</p>
<p>You should be able to change a piece of the system without affecting another. If there is a defect in one component in your software, then it won’t bug much to the other components. This can be done with the basic <span class=""ILfuVd yZ8quc"">Object-Oriented Programming Principles (OOP)</span> like encapsulation, information hiding, and abstractions.</p>
<h4>Portability</h4>
<p><i>Portability</i> is a characteristic attributed to a computer program when it can work on another environment other than the one in which it was created without requiring major rework.</p>
<h4>Stratification and reusability</h4>
<p>Design patterns encourage design reuse. Design software component, that can be easily used in other system or software.</p>
<p>For example, if you look at the android design (Image below), it provides multiple layers of abstractions. Each component is independent of other and provides a great level of reusability.</p>
<h4>Standard techniques</h4>
<p>Don’t hate things, because you don’t know or you don’t like them. Before designing your software evaluate and use the industry suggested patterns that are appropriate for your requirements.</p>
<h2>Foundational (Gang-of-Four) Design Patterns</h2>
<p>Gang-Of-Four also called as foundation patterns are the 23 basic design patterns that provide a solution to commonly recurring problems in software design. They are categorized into three major categories; Creational, Structural and Behavioral pattern based on behavior and characteristics.</p>
<h3>1. Creational design patterns</h3>
<p>This category provides patterns to resolve the problems of object creation in flexible ways. These will eliminate the difficulties in object instantiation and enables enable greater levels of reuse in evolving systems.</p>
<table>
<tbody>
<tr>
<td>Abstract Factory</td>
<td>Provides an interface for creating families of related or dependent objects without specifying their concrete classes.</td>
</tr>
<tr>
<td><a href=""/articles/builder-design-pattern-java"" title=""Builder Design Pattern In Java"">Builder</a></td>
<td>Separates the construction of a complex object from its representation so that the same construction process can create different representations.</td>
</tr>
<tr>
<td><a href=""http://stacktips.com/java/design-patterns/factory-method-design-pattern-java"" title=""Factory Method design pattern in Java"">Factory Method</a></td>
<td>Provides a way to use an instance as an object factory. The factory can return an instance of one of several possible classes in a class hierarchy, depending on the data provided to it.</td>
</tr>
<tr>
<td><a href=""http://stacktips.com/java/design-patterns/prototype-design-pattern-java"" title=""Prototype Design Pattern In Java"">Prototype</a></td>
<td>Prototype is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects. In a simpler term, using prototype pattern, we will create new instances through cloning existing instances.</td>
</tr>
<tr>
<td><a href=""http://stacktips.com/java/design-patterns/singleton-design-pattern-in-java"" title=""Singleton Design Pattern in Java"">Singleton</a></td>
<td>Singleton pattern ensures at most one instance of a particular class is ever created in your application.</td>
</tr>
</tbody>
</table>
<h3>2. Structural design patterns</h3>
<p>This category provides patterns to resolve the problems of object structure and composition. These will help to identify a simple way to realize relationships between entities.</p>
<table>
<tbody>
<tr>
<td><a href=""http://stacktips.com/java/design-patterns/adapter-design-pattern-in-java"" title=""Adapter Design Pattern In Java"">Adapter</a></td>
<td>Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.</td>
</tr>
<tr>
<td>Bridge</td>
<td>Decouple an abstraction from its implementation so that the two can vary independently.</td>
</tr>
<tr>
<td>Composite</td>
<td>Compose objects into a tree structure to represent part-whole hierarchies. Composite lets client treat individual objects and compositions of objects uniformly.</td>
</tr>
<tr>
<td>Decorator</td>
<td>Allows for the dynamic wrapping of objects in order to modify their existing responsibilities and behaviors.</td>
</tr>
<tr>
<td>Facade</td>
<td>Provide a unified interface to a set of interfaces in a subsystem. Façade defines a higher-level interface that makes the subsystem easier to use.</td>
</tr>
<tr>
<td>Flyweight</td>
<td>Facilitates the reuse of many fine-grained objects, making the utilization of large numbers of objects more efficient.</td>
</tr>
<tr>
<td>Proxy</td>
<td>Allows for object-level access control by acting as a pass-through entity or a placeholder object.</td>
</tr>
</tbody>
</table>
<h3>3. Behavioral design patterns<span style=""text-decoration: underline;""><strong><br/>
</strong></span></h3>
<p>This category provides patterns to resolve the problems of common communication patterns between objects. These will use to manage algorithms, relationships, and responsibilities between objects.</p>
<table>
<tbody>
<tr>
<td>Chain of Responsibility</td>
<td>Gives more than one object an opportunity to handle a request by linking receiving objects together.</td>
</tr>
<tr>
<td>Command</td>
<td>Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.</td>
</tr>
<tr>
<td>Interpreter</td>
<td>Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.</td>
</tr>
<tr>
<td>Iterator</td>
<td>Provides a way to access the elements of an aggregate object without exposing its underlying representation.</td>
</tr>
<tr>
<td>Mediator</td>
<td>Allows loose coupling by encapsulating the way disparate sets of objects interact and communicate with each other. Allows for the actions of each object set to vary independently of one another.</td>
</tr>
<tr>
<td>Memento</td>
<td>Captures and externalizes an object’s internal state so that it can be restored later, all without violating encapsulation.</td>
</tr>
<tr>
<td><a href=""http://stacktips.com/java/design-patterns/observer-design-pattern-java"" title=""Observer Design Pattern In Java"">Observer</a></td>
<td>Observer design pattern defines One-to-Many dependency between objects in which one object changes state, all its dependents are notified.</td>
</tr>
<tr>
<td><a href=""http://stacktips.com/design-patterns/state-design-pattern-in-java"" rel=""noopener"" title=""State Design Pattern in Java"">State</a></td>
<td>Allows an object to alter its behavior when its internal state changes. The object will appear to change its class.</td>
</tr>
<tr>
<td>Strategy</td>
<td>Defines a set of encapsulated algorithms that can be swapped to carry out a specific behavior.</td>
</tr>
<tr>
<td><a href=""http://stacktips.com/design-patterns/template-method-design-pattern-in-java"" rel=""noopener"" title=""Template Method Design Pattern in Java"">Template Method</a></td>
<td>Defines the steps for an algorithm and allows a subclass to provide an implementation for one or more steps.</td>
</tr>
<tr>
<td>Visitor</td>
<td>Allows for one or more operation to be applied to a set of objects at runtime, decoupling the operations from the object structure.</td>
</tr>
</tbody>
</table>
",0,"standard","post"
"Stepping Into My First Java Program “Hello World!”","stepping-into-my-first-java-program-hello-world","Before begin writing your first Java program, you need to have your development environment ready. For writing and&hellip;","LIVE","<p>Before begin writing your first Java program, you need to have your development environment ready. For writing and executing Java program, you need the latest version of Java SDK installed installed and configured on your machine;</p>
<p>Now, let us create an example class that simply prints “Hello World!” on standard output terminal.</p>
<pre class=""prettyprint lang-cs"">/* My first java program prints “Hello World!” */
class HelloWorldApp {  
    public static void main(String[] args) { 
       //Prints string hello world 
        System.out.println(""Hello World!"");  
    }  
}</pre>
<p>The “Hello World!” application consists of three primary components:</p>
<ol>
<li>Source code comments</li>
<li>The HelloWorldApp class definition</li>
<li>The main method</li>
</ol>
<h3 class="""">Source Code Comments</h3>
<p>Comments are ignored by the compiler but are useful for readability purpose. The Java programming language supports three kinds of comments such as, single line, multiline and documentation type comments.</p>
<ul>
<li><strong>// text</strong> – The compiler ignores everything from // to the end of the line.</li>
<li><strong>/* text */</strong> – This indicates multiline comments. The compiler ignores everything from /* to */.</li>
<li><strong>/** documentation */</strong> – This indicates a documentation comment (doc comment, for short). The compiler ignores this kind of comment, just like it ignores comments that use /* and */.</li>
</ul>
<p>The following bold text defines the comments of the “Hello World!” application:</p>
<pre class=""prettyprint lang-cs"">/* My first java program prints “Hello World!” */
class HelloWorldApp {  
    public static void main(String[] args) { 
        <strong>//Prints string hello world</strong> 
        System.out.println(""Hello World!"");  
    }  
}</pre>
<h3 class="""">The HelloWorldApp Class Definition</h3>
<p>The following bold text begins the class definition block for the “Hello World!” application:</p>
<pre class=""prettyprint lang-cs"">/* My first java program prints “Hello World!” */
<strong>class</strong> <strong>HelloWorldApp</strong> {  
    public static void main(String[] args) { 
        //Prints string hello world 
        System.out.println(""Hello World!"");  
    }  
}</pre>
<p>As shown above, the most basic form of a class definition is <code>class &lt;Class Name&gt;</code> followed by curly braces. The keyword <code>class</code> begins the class definition for a class named name, and the code for each class appears between the opening and closing curly braces marked in bold above.</p>
<h3 class="""">The main Method</h3>
<p>The following bold text begins the definition of the main method:</p>
<pre class=""prettyprint lang-cs"">/* My first java program prints “Hello World!” */
class HelloWorldApp {  
   <strong> public static void main(String[] args) {</strong> 
       //Prints string hello world 
        System.out.println(""Hello World!"");  
    }  
}</pre>",0,"standard","post"
"JSON Feed Reader Application in Xamarin Android","json-feed-reader-application-in-xamarin-android","This is an sample JSON feed reader application developed in Xamarin.Android platform.  This app will fetch the recent posts&hellip;
","LIVE","<p><a href=""http://stacktips.com"" target=""_self""><img alt=""JSON Feed Reader Application in Xamarin.Android"" class=""aligncenter size-full wp-image-7225"" height=""699"" loading=""lazy"" sizes=""(max-width: 1203px) 100vw, 1203px"" src=""/media/uploads/articles/232/JSON-Feed-Reader-Application-in-Xamarin.Android.png"" srcset="""" width=""1203""/></a>This is an sample JSON feed reader application developed in Xamarin.Android platform.  This app will fetch the recent posts from stacktips.com and display list of posts along with post title, thumbnail, description on screen.</p>
<p>Features</p>
<ol>
<li>Download latest data asynchronously from server</li>
<li>Display feeds title, thumbnail on list view</li>
<li>Download and cache images using <a href=""http://components.xamarin.com/gettingstarted/urlimageviewhelper"" rel=""nofollow noopener noreferrer"" target=""_blank"">UrlImageViewHelper </a>component</li>
<li>Allow user to read feed details</li>
</ol>
<p>All the source code used in this example, are open source. You may grab a copy of the project source code from the download link provided.</p>
<p> </p>
<p style=""text-align: center;""><a class=""ss-button"" href=""https://github.com/npanigrahy/Xamarin.Android-Examples/tree/master/JsonFeedParser"" rel=""nofollow noopener noreferrer"" target=""_blank"">Browse Code</a>    <a class=""ss-button"" href=""https://github.com/npanigrahy/Xamarin.Android-Examples/archive/master.zip"" rel=""nofollow noopener noreferrer"" target=""_blank"">Download Zip</a></p>
",0,"standard","post"
"iOS App Permissions – What Makes Them Better Than Android ?","ios-app-permissions-what-makes-them-better-than-android","Apple and Google have been making continuous efforts towards ensuring complete privacy towards user data and device security&hellip;
","LIVE","<p>Apple and Google have been making continuous efforts towards ensuring complete privacy towards user data and device security while downloading mobile apps. Both platform vendors, always engaged in scrutinizing what their apps are doing on their devices and also with the data that has been shared by the users.</p>
<p>With app permissions being a key area of concern,  both platforms are facing a stiff competition from each other. In the context of this post, we’ll be taking a closer look at the reasons that make iOS app permissions better as compared to Android app permissions.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""ios vs android app permissions"" class=""aligncenter size-full wp-image-7150"" height=""936"" loading=""lazy"" sizes=""(max-width: 1637px) 100vw, 1637px"" src=""/media/uploads/articles/233/ios-vs-android-app-permissions.png"" srcset="""" width=""1637""/></a></p>
<h3>Why shouldn’t you ignore app permissions?</h3>
<p>Considering the ever-growing demand, every renowned iPhone app development company is laying emphasis on making users acquainted with the importance of paying attention to the app permissions Irrespective of whether you’re installing an iOS or Android app, it is recommended not to ignore the app permissions. You should make sure to get familiar with everything that the respective app(s) is/are expecting you to share. Whether it’s your contacts list, your photos, videos or audios; ensure that your privacy isn’t being breached via installation of the chosen app(s).</p>
<p>Mobile app should seek user’s permission for getting an access to the device’s camera, internet and a variety of other resources. Mere ignore of app permissions can make you fall prey to unexpected extortion and frauds. There are several fraudsters out there who’re waiting to grab opportunities of gaining access to your private details like your credit card number, your name, address etc. For example, Fakedefender came up as a fake anti-virus application that promised to show security alerts to the app user, in addition to cleaning up his/her smartphone after making a purchase via the application.</p>
<h3>Android app permissions- Why are they inferior?</h3>
<p>A wide community of Geeks, who still believes that, the way android seeks permissions is way better as compared to the iOS. Well, this nothing other then a complete myth. Android system seeks users permission while app is being installed. But iOS allows you to go ahead with an installation, and seeks permission when user is using the feature that requires specific permission. Isn’t looks more practical ?</p>
<p>Although the all-new Android 4.3 comes with a default settings menu for managing app permissions, this menu is typically hidden and never easily accessible to users. As an app user, you additionally need to pay attention in managing the permissions from device settings, post app installation. This makes android app experience more frustrating.</p>
<h3>iOS app permissions- features that make app more user-friendly</h3>
<p>Android asks user to accept or reject all permission used by application before app is being installed. But in iOS, If you choose to install an iOS app with internet access permission, then during installation process, you’re not granting any special permission(s) to your app like an access to your contact list, GPS, gallery etc.</p>
<p>Whenever user uses a specific feature that requires feature specific permissions like accessing Contacts, Reminders, Bluetooth, Calendars, Facebook account, Twitter account etc., it seeks individual permissions for the same. In this way, you’ll be able to gain a detailed insight and reasons behind each specific app permission. This will save you from every possible infringement and any attacks by scammers.</p>
<h3>Android’s ‘use It or leave It’ vs Apple’s ‘use It as you like It’</h3>
<p>While Android users can either choose to allow all app permissions during installation or just not use the app; the iOS users can accept some permissions and deny the others, while still continuing to use the application. Quite dissimilar to Android  app permission system, iOS app permission system allows users to manage and gather a deep understanding of the criteria that needs to be followed for accepting/rejecting an app permission.</p>
<h3>Conclusion</h3>
<p>Often unheard, but iOS app permissions are indeed much more logical as compared to the low-end Android app permissions. In iOS, your decision of installing a particular app is surrounded by a number of unique factors and not just the conventional ones, as are applicable during installation of Android apps.</p>
",0,"standard","post"
"ListView Example in Xamarin.Android","listview-example-in-xamarin-android","This post will walk you through crating a custom ListView in Xamarin.Android using list adapter. ListView is one&hellip;
","LIVE","<p>This post will walk you through crating a custom ListView in Xamarin.Android using list adapter.</p>
<p>ListView is one of the most common UI pattern, used extensively to display collection of data elements in rows. Android ListView is a view group that displays a list of scrollable items.</p>
<p>The list items are automatically inserted to the list using an Adapter that pulls content from a source such as an array. Find out more about android <code>ListView</code> and <code>ListAdapters</code> from Android ListView Tutorial.</p>
<p>Following are the steps involved in using ListView in your application</p>
<ol class=""space"">
<li class=""space"">Declare ListView layout</li>
<li class=""space"">Declare list row layout</li>
<li class=""space"">Define ListView Adapter</li>
<li class=""space"">Setting ListView Adapter</li>
<li class=""space"">Handle list click event</li>
</ol>
<h1>1. Declare ListView layout</h1>
<p>Before using list in your application, you first need to declare its layout inside your activity or fragment. For the sake of simplicity, in the below code snippet, we have declared ListView inside activity layout file.</p>
<h4>ListActivity.axml</h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:orientation=""vertical""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""&gt;
    &lt;ListView
        android:minWidth=""25px""
        android:minHeight=""25px""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:id=""@+id/ListView"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<p>The property <code>android:id=""@+id/IntentoryList""</code> in the above code snippet is the id assigned to ListView. This id will be used to initialize this from activity cs file.</p>
<h1>2. Declare list row layout</h1>
<p>In the above step we have declared ListView layout. Now it is the time to define the layout for list row item. This layout will be used by list adapter.</p>
<h4>ListItemRow.axml</h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:minHeight=""50dp""
    android:orientation=""horizontal""&gt;
    &lt;ImageView
        android:id=""@+id/Thumbnail""
        android:layout_width=""70dp""
        android:layout_height=""70dp""
        android:paddingLeft=""10dp""
        android:layout_alignParentLeft=""true""
        android:layout_centerVertical=""true""
        android:src=""@drawable/Placeholder"" /&gt;
    &lt;TextView
        android:id=""@+id/Title""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_toRightOf=""@id/Thumbnail""
        android:lineSpacingExtra=""3dp""
        android:paddingLeft=""10dp""
        android:paddingTop=""5dp""
        android:textColor=""#ffffff""
        android:textStyle=""bold""
        android:typeface=""sans"" /&gt;
    &lt;TextView
        android:id=""@+id/Description""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_below=""@+id/Title""
        android:layout_toRightOf=""@id/Thumbnail""
        android:paddingLeft=""10dp""
        android:paddingTop=""5dp""
        android:textColor=""#fff""
        android:textSize=""11sp"" /&gt;
&lt;/RelativeLayout&gt;
</pre>
<h1>3. Define ListView Adapter</h1>
<p>Adapter is a tricky part while creating ListView. BaseAdapter is a common Adapter that can be used in both ListView, GridView or Spinners. An adapter takes list of data objects as input, and each object in the list is mapped to a list row. Adapter also inflates the layout to be rendered for each row items.</p>
<p>In our example, <code>CusotmListAdapter</code> takes list of Post objects. The structure of Post class as described below.</p>
<pre class=""prettyprint lang-cs"">public class Post
{
	public string url { get; set; }
	public string title { get; set; }
	public string description { get; set; }
}
</pre>
<p>The post class contains three fields; a url, title and a description. In this example we will not cover much on how to get the data source, you may hardcode or write some logic to download data form server. Now lets move to our list adapter implementation.</p>
<pre class=""prettyprint lang-cs"">public class CusotmListAdapter : BaseAdapter&lt;Post&gt;
{
	Activity context;
	List&lt;Post&gt; list;

	public CusotmListAdapter (Activity _context, List&lt;Post&gt; _list)
		:base()
	{
		this.context = _context;
		this.list = _list;
	}

	public override int Count {
		get { return list.Count; }
	}

	public override long GetItemId (int position)
	{
		return position;
	}

	public override Post this[int index] {
		get { return list [index]; }
	}

	public override View GetView (int position, View convertView, ViewGroup parent)
	{
		View view = convertView; 

		// re-use an existing view, if one is available
		// otherwise create a new one
		if (view == null)
			view = context.LayoutInflater.Inflate (Resource.Layout.ListRowLayout, parent, false);

		Post item = this [position];
		view.FindViewById&lt;TextView&gt; (Resource.Id.Title).Text = item.title;
		view.FindViewById&lt;TextView&gt;(Resource.Id.Description).Text = item.description;

		using (var imageView = view.FindViewById&lt;ImageView&gt; (Resource.Id.Thumbnail)) {
			string url = Android.Text.Html.FromHtml (item.thumbnail).ToString ();

			//Download and display image
			Koush.UrlImageViewHelper.SetUrlDrawable (imageView, 
				url, Resource.Drawable.Placeholder);
		}
		return view;
	}
}
</pre>
<ol class=""space"">
<li>You must override the Count, GetItemId and GetView method in your BaseAdapter class implementation. The <code>Count</code> method indicates the total number of rows in the list, <code>GetItemId</code> represent a unique id for reach item in the list. <code>GetView</code> inflates layout for each list row and render on the screen.</li>
<li>In this example, we have used <a href=""http://components.xamarin.com/gettingstarted/urlimageviewhelper"" rel=""nofollow noopener noreferrer"" target=""_blank"">UrlImageViewHelper</a> component. You may download the same form component store and add to your project.</li>
</ol>
<h1>4. Setting ListView Adapter</h1>
<p>Once your list adapter is ready, then you are almost done with your ListView implementation. Now all you need to do is to instantiate the adapter and setting to ListView.</p>
<pre class=""prettyprint lang-cs"">//Initializing listview
listView = FindViewById (Resource.Id.feedList);
listView.ItemClick += OnListItemClick;
listView.Adapter = new CusotmListAdapter(this, listData);
</pre>
<p>You can handle ListView click event by adding <code>ItemClick</code> callback.</p>
<pre class=""prettyprint lang-cs"">void OnListItemClick(object sender, AdapterView.ItemClickEventArgs e) {
	Post item = result.posts.ElementAt (e.Position);
	// Do whatever you like here
}
</pre>
",0,"standard","post"
"Using SQLite.NET ORM in Xamarin Application","using-sqlite-net-orm-in-xamarin-application","ORM stands for Object Relational Mapping. SQLite.NET ORM is an light weight and open source library that allows&hellip;
","LIVE","<p>ORM stands for Object Relational Mapping. SQLite.NET ORM is an light weight and open source library that allows .NET and Mono application to store data in SQLite database. This is available as a free component in Xamarin component store. SQLite.NET supports for Android, iOS and Windows platform, and hence the database operation logic can shared across platforms. Some of the key features of SQLite.NET ORM includes</p>
<ol>
<li>Easy to ingrate component available to use in existing Xamarin project</li>
<li>It is an light weight thin wrapper, and is efficient without performance trade-off</li>
<li>Support simple CURD operations and support for simple, complex SQL quires</li>
</ol>
<h1>How to use SQLite.NET?</h1>
<p>There are two approaches to integrate SQLite.NET ORM in Xamarin application</p>
<h3>Downloading from Github</h3>
<p>SQLite.NET is a very thin library with single file. You can download <code>SQLite.cs</code> file from <a href=""https://github.com/praeclarum/sqlite-net/blob/master/src/SQLite.cs"" rel=""nofollow noopener noreferrer"" target=""_blank"">Github</a> and add into your application. SQLite.NET library binds directly to the native device SQLite database engine on each platform.</p>
<h3>Adding from component store</h3>
<p>SQLite.NET is listed free Xamarin Component Store and available for both iOS and Android platform. To include this into your Xamarin Studio project, you can , either double-click on the Components folder in the solution pad, or and right click to select Component Manager.</p>
<p>You will notice that the component manager will be loaded with already downloaded components and you can open Component store from the window. Accessing component manager requires log in to your Xamarin account. Once logged, you can browse through available components and add them to project.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""SQLite.NET-ORM-in-Xamarin-Component-Store"" class=""aligncenter size-full wp-image-7061"" height=""490"" loading=""lazy"" sizes=""(max-width: 1021px) 100vw, 1021px"" src=""/media/uploads/articles/235/SQLite.NET-ORM-in-Xamarin-Component-Store.png"" srcset="""" width=""1021""/></a></p>
<h1>SQLite.NET Example</h1>
<p>Once the component is added to your Xamarin project, you are good to use this library to write SQL operations.</p>
<h2>Creating a database</h2>
<p>Before you can store data into SQLite, you first need to create a database, if not created already. Create a blank database or open existing by passing the file path the SQLiteConnection class constructor.</p>
<pre class=""prettyprint lang-cs"">private string DbName = ""Intentory_DB.db"";
string path = System.Environment.GetFolderPath (System.Environment.SpecialFolder.Personal);
SQLiteConnection dbConn = new SQLiteConnection (System.IO.Path.Combine (path, DbName));
</pre>
<ol>
<li>Depending on what platform you are targeting the file location will be different. For iOS and Android you can use Environment class as shown in the above code snippet, to construct a valid path</li>
<li>The <code>new SQLiteConnection</code> opens the database file, if the file under mentioned path is already available, else it will create a new database.</li>
<li>Once your database connection is opened, you can execute the following methods to command different database operations.</li>
</ol>
<h2>Creating a table</h2>
<p>In this example, we will be storing items to Inventory table. Below is the structure of Inventory class. As you can see in the code snippet below, we have declared different SQL attributes to Inventory class model.</p>
<pre class=""prettyprint lang-cs"">class Inventory
{
	[PrimaryKey, AutoIncrement]
	public int Id { get; set; }

	[NotNull]
	public int ItemCode { get; set;}

	public String Name{ get; set;}
	public String Category { get; set;}
	public double Price{ get; set;}
	public bool StockAvailable { get; set;}
}
</pre>
<p>Once you have your model ready, you can invoke the below methods to create table, if not exist already.</p>
<pre class=""prettyprint lang-cs"">dbConn.CreateTable ();</pre>
<h2>Insert into database</h2>
<pre class=""prettyprint lang-cs"">//Creating inventory object for storing into db
Inventory newInventory = new Inventory ();
newInventory.ItemCode = Convert.ToInt32(ItemCode.Text);
newInventory.Name = ItemName.Text;
newInventory.Category = ItemCategory.Text;
newInventory.Price = Convert.ToDouble(ItemPrice.Text);
newInventory.StockAvailable = IsStockAvailable.Checked;

//Inserting record into database
dbConn.Insert (newInventory);</pre>
<h2>Retrieve data from database</h2>
<p>Use the following syntax to retrieve all the records from database</p>
<pre>IEnumerable&lt;Inventory&gt; table = dbConn.Table&lt;Inventory&gt; ();
foreach (Inventory s in table) {
	Console.WriteLine (s.ItemCode + "" "" + s.Name);
}
</pre>
<p>To retrieve object by primary key, you can use following code syntax.</p>
<pre class=""prettyprint lang-cs"">//3 is primary key
var item = db.Get&lt;Inventory&gt;(3);</pre>
<h2>Update record into database</h2>
<pre class=""prettyprint lang-cs"">//Inserting record into database
dbConn.Update (item);</pre>
<h2>Delete from database</h2>
<pre class=""prettyprint lang-cs"">dbConn.Delete (item);</pre>
",0,"standard","post"
"Data Storage Options in Xamarin","data-storage-options-in-xamarin","Most of the commercial mobile application uses local storage for large data processing and to improve efficiency. While&hellip;
","LIVE","<p>Most of the commercial mobile application uses local storage for large data processing and to improve efficiency. While mobile applications are limited with memory and processing, the way you store, manage and process on data it is always been very tricky. Think a bit, before jumping straight into designing a database for your application.</p>
<p>Both Android and iOS platform provides different mechanism to deal with data storage. You must understand each of the option to choose one over other. Following are some of the available data storage mechanisms for mobile mobile platforms like Android and iOS.</p>
<h2>1. Key Value Preferences</h2>
<p>Preferences are most used way to store simple data of key value pair. They are local to your application, you will loose the data once the application is deleted from device. This option of data storage is preferred for storing application rationalization information. In Android it is named as shared preferences and in iOS it is called NSUserDefaults. Additionally iOS users can take advantage of iCloud technology for data backup and synchronization in multiple devices.</p>
<p>Here is the link to <a href=""http://stacktips.com/xamarin/sharedpreferences-example-in-xamarin-android"">Shared preference in Xamarin.Android example</a> , that might intrest you.</p>
<h2>2. Text Files / Serialized Data Files</h2>
<p>Text file is most easiest and convenient way to sore data such content downloaded from server. You may use different data encryption mechanism for ensuring the data security.</p>
<p>Objects can be serialized and persisted as XML or JSON on the file-system. The .NET framework includes libraries that make serializing and de-serializing objects easy. Use appropriate names to organize data files.</p>
<h2>3. Database</h2>
<p>SQLite is an Open-Source embedded SQL database engine built available on both iOS and Android platforms. SQLite provides relational database management structure for storing user defined records in the form of tables. SQLite is light weight when it comes to resource usage and it doesn’t need to have any server setup like other RDBMS systems. It is an cross platform and self-contained database. Database storage is suited to lists of data with many properties.</p>
<p>Following are some of the advantages of using SQL database engine</p>
<ol>
<li>SQL databases structured and efficient for storing data</li>
<li>Allows simple and complex queries, that helps to extract specific data</li>
<li>Query results can be sorted</li>
<li>Query results can be aggregated</li>
<li>Similar to other RDBMS, which helps developers to utilize existing knowledge in database design</li>
<li>Allow application to pre-package with database</li>
</ol>
<p>You may take advantage of the ready to use ORM (Object Relational Mapping) such as SQLite.NET components from Xamarin Component store for quick integration for SQLite storage. Here is the link to S<a href=""http://stacktips.com/xamarin/using-sqlite-net-orm-in-xamarin-application"" title=""Using SQLite.NET ORM in Xamarin Application"">QLite.NET components integration example</a>, that might intrest you.</p>
<h2>4. Image files</h2>
<p>As mobile devices are limited with memory, it is highly recommended not to use database for storing large size images. Images must be stored into device file-system and only the mapping file name can be stored into database. If you’re dealing with many images in your application, it is a good practice to have image caching logic in place.</p>
",0,"standard","post"
"Xamarin Learning Resources","xamarin-learning-resources","Xamarin is a San Francisco, California based software company which provides commercial software development tools that leverage the&hellip;
","LIVE","<p>Xamarin is a San Francisco, California based software company which provides commercial software development tools that leverage the Mono open source project in order to allow you to develop applications for Android, iOS, and OS X using C# and the .NET framework.</p>
<p>Find links to Xamarin learning resources and some of the popular Xamarin development books. If you want to list down your blog or book on this page then please comment below.</p>
<h3>Xamarin Learning Resources</h3>
<p>Below are some of the Xamarin learning web portals, provides examples, source code and step by step guide for developers to learn Xamarin from scratch.</p>
<h4 style=""text-decoration: underline;"">API Documentation</h4>
<p><a href=""http://iosapi.xamarin.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""iOS Xamarin API documentation"">1. iOS API Documentation</a><br/>
<a href=""http://androidapi.xamarin.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">2. Android API Documentation</a><br/>
<a href=""http://macapi.xamarin.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">3. Mac API Documentation</a><br/>
<a href=""http://developer.xamarin.com/guides/testcloud/apis"" rel=""nofollow noopener noreferrer"" target=""_blank"">4. TestCloud Documentation</a></p>
<h4 style=""text-decoration: underline;"">Xamarin Tutorials</h4>
<p><a href=""http://developer.xamarin.com/guides/ios/getting_started/"" rel=""nofollow noopener noreferrer"" target=""_blank"">1. Xamarin Developer Website</a><br/>
<a href=""http://blogs.msdn.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">2. Microsoft MSDN Site</a><br/>
<a href=""http://xamarinappdev.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""XamarinAppDev.com"">3. XamarinAppDev.com</a><br/>
<a href=""https://github.com/MvvmCross/MvvmCross/wiki"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""MvvmCross Github"">2. MvvmCross Github</a></p>
<h3>Xamarin Development Books</h3>
<hr/>
<div class=""pk-col-md-1"">
<a href=""http://stacktips.com"" target=""_self""></a><a href=""http://stacktips.com"" target=""_self""><img alt=""Xamarin+Mobile+Application+Development+for+Android+second"" class=""alignnone wp-image-10057 size-thumbnail"" height=""356"" loading=""lazy"" src=""/media/uploads/articles/237/Xamarin-Mobile-Application-Development-for-Android-second-300x356.jpg"" srcset="""" width=""300""/></a><a href=""http://stacktips.com"" target=""_self""><br/>
</a><br/>
</div>
<div class=""pk-col-md-1"">
<h3>Xamarin Mobile Application Development for Android – Second Edition</h3>
<h2>About This Book</h2>
<ul>
<li>Build and test multi-view Android applications using Xamarin.Android</li>
<li>Work with device capabilities such as location sensors and the camera</li>
<li>A progressive, hands-on guide to develop stunning Android applications using Xamarin</li>
</ul>
<h2>Who This Book Is For</h2>
<p>If you are a C# developer who wants to develop Android apps and enhance your existing skill set, then this book is ideal for you. Good working knowledge of C#, .NET, and object-oriented software development is assumed.</p>
<h2>What You Will Learn</h2>
<ul>
<li>Build a multi-view, orientation-aware Android application with navigation</li>
<li>Lay out content using the LinearLayout, RelativeLayout, and TableLayout layout managers</li>
<li>Use a ListView (AdapterView) and Adapter to build a view that is populated from server data</li>
<li>Consume REST web service to perform GET, UPDATE, DELETE operation</li>
<li>Use Android SQLite for data persistence and caching</li>
<li>Capture the current location of a device, determine the street address, and integrate with the map app</li>
<li>Test, debug, and deploy an Android app</li>
</ul>
<p><a href=""http://www.amazon.com/Xamarin-Mobile-Application-Development-Android-ebook/dp/B00YSIM3UU/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1449238693&amp;sr=1-1&amp;keywords=Xamarin+Mobile+Application+Development+for+Android+second"" rel=""nofollow noopener noreferrer"" target=""_blank"">Download this book from Amazon</a></p>
</div>
<hr/>
<div class=""pk-col-md-1"">
<a href=""http://stacktips.com"" target=""_self""><img alt=""Xamarin form"" class=""aligncenter size-full wp-image-7001"" height=""366"" loading=""lazy"" src=""/media/uploads/articles/237/Xamarin-Forms.png"" srcset="""" width=""300""/></a><br/>
</div>
<div class=""pk-col-md-1"">
<h3>Creating Mobile Apps with Xamarin.Forms</h3>
<p>The preview edition contains six chapters:</p>
<ul>
<li>How does Xamarin.Forms fit in?</li>
<li>Pages, layouts, and views</li>
<li>Building an app: Infrastructure</li>
<li>Building an app: Architecture</li>
<li>Principles of presentation</li>
<li>The interactive interface</li>
</ul>
<p>This is only the beginning – the completed book will cover all aspects of Xamarin.Forms from the various layout and styling options to extending functionality using native APIs. Preview edition is now available for <a href=""http://developer.xamarin.com/guides/cross-platform/xamarin-forms/creating-mobile-apps-xamarin-forms/#Download_Now"" rel=""nofollow noopener noreferrer"" target=""_blank"">download</a>.</p>
</div>
<hr/>
<div class=""pk-col-md-1"">
<a href=""http://stacktips.com"" target=""_self""><img alt=""Xamarin Mobile Application Development for iOS"" class=""aligncenter size-full wp-image-7010"" height=""258"" loading=""lazy"" src=""/media/uploads/articles/237/Xamarin-Mobile-Application-Development-for-iOS.jpg"" srcset="""" width=""201""/></a><br/>
</div>
<div class=""pk-col-md-1"">
<h3>Xamarin Mobile Application Development for iOS</h3>
<p>The book begins by discussing the installation of the IDE (for both PC and Mac) as well as how to set up your PC so it can be used to develop for iOS. From there, successive chapters cover the user interface, views, view controllers, customisation of controls, animation, events and event handling, getting the most from your app using threading, creating your own settings system, the internal database system and LINQ, sending texts, making calls, taking photos, videos, and audio recordings as well as using the mapping system. The book culminates by showing you how to test your app using testflight and finally how to release your app on the Apple Store. It is an all-encompassing book that leaves nothing out.</p>
<p><a href=""http://www.amazon.in/Xamarin-Mobile-Application-Development-iOS/dp/935110477X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1418369348&amp;sr=1-1&amp;keywords=xamarin"" rel=""nofollow noopener noreferrer"" target=""_blank"">Download this book from Amazon</a><br/>
</p></div>
",0,"standard","post"
"Asynchronous Image Loading in Xamarin Android","asynchronous-image-loading-xamarin-android","This tutorial explains how to download image asynchronously in Xamarin.Android. In this example, we will downloading image using&hellip;
","LIVE","<p>This tutorial explains how to download image asynchronously in Xamarin.Android. In this example, we will downloading image using <code>System.Net.WebClient</code> and while downloading, the application will show a loading progress indicator.</p>
<p><strong>System.Net.WebClient</strong> class provides ability to send and download data from remote location. Check out class reference from <a href=""http://msdn.microsoft.com/en-us/library/system.net.webclient(v=vs.110).aspx"" rel=""nofollow noopener noreferrer"" target=""_blank"">Official MSDN </a> API documentation.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Asynchronous Image Loading in Xamarin Android"" class=""aligncenter size-full wp-image-6962"" height=""619"" loading=""lazy"" sizes=""(max-width: 1007px) 100vw, 1007px"" src=""/media/uploads/articles/238/Asynchronous-Image-Loading-in-Xamarin-Android.png"" srcset="""" width=""1007""/></a></p>
<p>Let us create a layout as shown in the image above</p>
<h3>Main.axml</h3>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:minWidth=""25px""
    android:minHeight=""25px""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:gravity=""center_horizontal""
    android:orientation=""vertical""&gt;

    &lt;Button
        android:text=""Download Image""
        android:id=""@+id/downloadButton""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content"" /&gt;
    
    &lt;LinearLayout
        android:minWidth=""25px""
        android:minHeight=""25px""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:orientation=""horizontal""
        android:id=""@+id/progressLayout""
        android:gravity=""center""&gt;

        &lt;ProgressBar
            android:layout_width=""wrap_content""
            android:layout_height=""match_parent""
            android:id=""@+id/progressBar1"" /&gt;
        &lt;TextView
            android:text=""Loading..""
            android:layout_width=""wrap_content""
            android:layout_height=""match_parent""
            android:id=""@+id/textView1""
            android:gravity=""center"" /&gt;
    &lt;/LinearLayout&gt;

    &lt;ImageView
        android:src=""@android:drawable/ic_menu_gallery""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:id=""@+id/imageView1"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<h3>ImageViewExample.cs</h3>
<pre class=""prettyprint lang-cs"">using System;

using Android.App;
using Android.Content;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Android.OS;
using Android.Graphics;
using System.Threading.Tasks;
using System.IO;
using System.Net;

namespace ImageViewExample
{
	[Activity (Label = ""ImageViewExample"", MainLauncher = true, Icon = ""@drawable/icon"")]
	public class MainActivity : Activity
	{

		Button downloadButton;
		ImageView imageView;
		LinearLayout progressLayout;

		//Instance of webclient for async processing
		WebClient webClient;

		protected override void OnCreate (Bundle bundle){
			base.OnCreate (bundle);

			// Set our view from the ""main"" layout resource
			SetContentView (Resource.Layout.Main);

			this.imageView = FindViewById&lt;ImageView&gt; (Resource.Id.imageView1);
			//Hide progressbar initially
			this.progressLayout = FindViewById&lt;LinearLayout&gt; (Resource.Id.progressLayout);
			this.progressLayout.Visibility = ViewStates.Gone;

			// Get views from the layout resource axml file
			this.downloadButton = FindViewById&lt;Button&gt; (Resource.Id.downloadButton);
			downloadButton.Click += downloadAsync;
		}

		async void downloadAsync(object sender, System.EventArgs ea){
                  //Logic to download image and display on ImageView
		}

		void cancelDownload(object sender, System.EventArgs ea){
                 // Logic to cancel downlaod
		}
	}
}
</pre>
<h2>Downloading Image</h2>
<p style=""text-align: left;"">In our activity, we have a button labelled “Download Image” is added with <code>downloadAsync</code> delegate. The downloadAsync method will contain the logic of download using WebClient, display progress bar, resize and store image locally. When user hits download button, the download starts and the button turns into “Cancel Download”. Below is the code snippet for downloadAsync method.</p>
<pre class=""prettyprint lang-cs"">async void downloadAsync(object sender, System.EventArgs ea){
	webClient = new WebClient ();
	var url = new Uri (""http://doubletreebyhiltonsanjose.com/wp-content/uploads/2014/08/Dog-Pictures-1024x698.jpg"");
	byte[] imageBytes = null;

	//Show loading progress
	this.progressLayout.Visibility = ViewStates.Visible;

	//Toggle button click listener to cancel the task
	this.downloadButton.Text = ""Cancel Download"";
	this.downloadButton.Click -= downloadAsync;
	this.downloadButton.Click += cancelDownload;

	try{
		imageBytes = await webClient.DownloadDataTaskAsync(url);
	} catch(TaskCanceledException){
		this.progressLayout.Visibility = ViewStates.Gone;
		return;
	} catch(Exception e){
		this.progressLayout.Visibility = ViewStates.Gone;

		this.downloadButton.Click -= cancelDownload;
		this.downloadButton.Click += downloadAsync;
		this.downloadButton.Text = ""Download Image"";
		return;
	}

	//Saving bitmap locally
	string documentsPath = System.Environment.GetFolderPath (System.Environment.SpecialFolder.Personal);	
	string localFilename = ""image.png"";
	string localPath = System.IO.Path.Combine (documentsPath, localFilename);

	//Save the Image using writeAsync
	FileStream fs = new FileStream (localPath, FileMode.OpenOrCreate);
	await fs.WriteAsync (imageBytes, 0, imageBytes.Length);
	Console.WriteLine(""Saving image in local path: ""+localPath);

	//Close file connection
	fs.Close ();

	BitmapFactory.Options options = new BitmapFactory.Options ();
	options.InJustDecodeBounds = true;
	await BitmapFactory.DecodeFileAsync (localPath, options);

	//Resizing bitmap image
	options.InSampleSize = options.OutWidth &gt; options.OutHeight ? options.OutHeight / imageView.Height : options.OutWidth / imageView.Width;
	options.InJustDecodeBounds = false;

	Bitmap bitmap = await BitmapFactory.DecodeFileAsync (localPath, options);
	imageView.SetImageBitmap (bitmap);

	//Hide progress bar layout
	this.progressLayout.Visibility = ViewStates.Gone;

	//Toggle button click listener
	this.downloadButton.Click -= cancelDownload;
	this.downloadButton.Click += downloadAsync;
	this.downloadButton.Text = ""Download Image"";
}</pre>
<h2>Cancel Image Download</h2>
<p>The <code>cancelDownload</code> delegate is added to button, when the user clicks on download button. This method contains the logic to cancel the download process.</p>
<pre class=""prettyprint lang-cs"">void cancelDownload(object sender, System.EventArgs ea){
	if(webClient!=null)
		webClient.CancelAsync ();

	//Hide progressbar layout
	this.progressLayout.Visibility = ViewStates.Gone;

	//Toggle button click listener
	this.downloadButton.Click -= cancelDownload;
	this.downloadButton.Click += downloadAsync;
	this.downloadButton.Text = ""Download Image"";
}
</pre>
",0,"standard","post"
"Useful Android Books for Developers","useful-android-books-for-developers","In this post we have outlined some of the popular programming books that helps in developers to learn&hellip;
","LIVE","<p>In this post we have outlined some of the popular programming books that helps in developers to learn Android application development. If you want to list down your book on this page then please contact at <a href=""mailto:javatechig@gmail.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">javatechig@gmail.com</a>.</p>
<div class=""pk-col-md-1"">
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""The Busy Coder’s Guide to Advanced Android Development"" class=""aligncenter size-full wp-image-7360"" height=""250"" loading=""lazy"" src=""http://stacktips.com/wp-content/uploads/2014/12/The-Busy-Coder’s-Guide-to-Advanced-Android-Development.jpg"" width=""202""/></a></p>
</div>
<div class=""pk-col-md-1"">
<h3>Beginning Android 4 Application Development</h3>
<p>This book furnishes you with all the required skills for creating attractive user interfaces, working with SMS services, APIs and the Android SDK. Starting right from the basics, you can make your way up to creating that app of your dreams and watch it score you some fame.</p>
<p>Key Features</p>
<ul>
<li>Provides an in-depth approach to application programming and development on the Android 4 OS.</li>
<li>Android 4 OS is for the first time a single solution for both Smartphones and tablets and mastering it will help you create apps on both.</li>
</ul>
<p><strong>ISBN-10 </strong>: 8126535571 | <strong>ISBN-13</strong>: 978-8126535576<br/>
</p></div>
<hr/>
<div class=""pk-col-md-1"">
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Professional Android 4 Application Development"" class=""aligncenter size-full wp-image-7362"" height=""250"" loading=""lazy"" src=""/media/uploads/articles/239/Professional-Android-4-Application-Development.jpg"" srcset="""" width=""192""/></a></p>
</div>
<div class=""pk-col-md-1"">
<h3>Professional Android 4 Application Development</h3>
<p>All the practical exercises that have been outlined in the book will bolster your abilities to design a robust yet purposeful application for your target audience. It is common knowledge that developing a world class application is just half the story and you also need to know how to release it, market it . The book takes care of those areas also as it would walk you through ideas on how to publish and market your application as well create platforms that will enhance user’s experience. Professional Android 4 Application Development (Wrox) was published on 8 June 2012 in paperback.</p>
<p><strong>ISBN-10 </strong>: 812653608X | <strong>ISBN-13</strong>: 978-8126536085<br/>
</p></div>
<hr/>
<div class=""pk-col-md-1"">
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Android Application Development For Dummies"" class=""aligncenter size-full wp-image-7361"" height=""250"" loading=""lazy"" src=""/media/uploads/articles/239/Android-Application-Development-For-Dummies.jpg"" srcset="""" width=""189""/></a></p>
</div>
<div class=""pk-col-md-1"">
<h3 class=""a-size-large a-spacing-none"" id=""title""><span class=""a-size-large"" id=""productTitle"">Android Application Development For Dummies</span></h3>
<p>This book includes new programming techniques that take advantage of Android 4, including scrollable widgets, new UI tools, the improved application programming interface for calendar and contact information and improved social media integration. It also explains the procedure to download the SDK, to get Eclipse up and running, code Android applications and submit the finished products to the Android Market.</p>
<p><strong>ISBN-10 </strong>: 8126538775 | <strong>ISBN-13</strong>: 978-8126538775<br/>
</p></div>
<hr/>
<div class=""pk-col-md-1"">
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Beginning Android 4 Application Development"" class=""aligncenter size-full wp-image-7363"" height=""250"" loading=""lazy"" src=""/media/uploads/articles/239/Beginning-Android-4-Application-Development.jpg"" srcset="""" width=""192""/></a></p>
</div>
<div class=""pk-col-md-1"">
<h3>The Busy Coder’s Guide to Advanced Android Development</h3>
<p>There are many Android programming guides that give you the basics. This book goes beyond simple apps into many areas of Android development that you simply will not find in competing books.</p>
<p>This book is one in CommonsWare’s growing series of Android related titles, including The Busy Coder’s Guide to Android Development, Android Programming Tutorials, and the upcoming Tuning Android Applications.</p>
<p><strong>ISBN-10 </strong>: 098167805X | <strong>ISBN-13</strong>: 978-0981678054<br/>
</p></div>
",0,"standard","post"
"Android L: What’s in Store for Mobile App Designers","android-l-whats-store-mobile-app-designers","New features and functionalities have always kept Google&#8217;s Android under the vigil eye of smartphone app designers and&hellip;
","LIVE","<p>New features and functionalities have always kept Google’s Android under the vigil eye of smartphone app designers and developers. Whether it’s related to designing an app’s layout or an entire user interface; Android versions have always been released with innovative trends that have been well embraced by the Android app development community. Adding up to the count of successful Android versions is Android L(Lollipop). Just like the previous versions of Android, this one also comprises of new changes in terms of design, features, and functions. Today, through this blog, I’ll be making you abreast with the specific design moderations that have been introduced along with this brand new Android version.</p>
<h3>1. Material Design awaits Android app designers</h3>
<p>Mobile app seekers can now gather an excellent opportunity of hiring top Android app developers who’re well abreast about using Material Design interface for building apps that function flawlessly, irrespective of the device and mobile platform. Android L(Lollipop) has employed a Material Design interface which allows you to design app elements that can be made smaller or bigger as per the size of the targeted screens. And that’s not all. With Material Design, you can also ensure the placement of more white space elements and 3D effects in your Android powered applications. Bidding adieu to the traditional Android aesthetics, Material Design has emerged as a spontaneous means of building robust and scalable apps.</p>
<h3>2. Android apps will now be more scalable due to an Adaptive design</h3>
<p>When using Android L, you(a mobile app designer) would be required to follow certain layout guidelines for designing the apps.  You’ll need to adhere to adaptive design guidelines wherein you’ll be required to design apps that can be easily scaled across a range of screen sizes so as to maintain consistency in user experience. Since app interactions need to be consistent for all Android devices, you’ll be supposed to follow standards set for design and placement of colors, icons, spacing etc.</p>
<h3>3. Google’s focus on UI guidelines that work in favor of designers</h3>
<p>A large majority of Android app designers has been ignoring the Google’s guidelines when it comes to designing the user interface for an application. Now, with the emergence of Android L operating system, the app builders would be expected to abide by all the prescribed Google’s guidelines for bringing unified mobile experience without fail. Designers are now equipped with a well-defined documentation that would enable them to learn the process of interacting with the brand new paradigm without getting a headache. Material design guidelines can be found in <a href=""http://www.google.com/design/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Google’s official website for designers</a>.</p>
<h3>4. App Indexing makes way for rendering a streamlined user experience</h3>
<p>The App Indexing feature installed within Android L will enable the users to search through Google Chrome and fetch results even from the apps that have been downloaded into the Android smartphone. To put in simple words, this app indexing feature will enable the interlinking of web apps and native apps, thereby adding excellence into the user experience.</p>
<h3>5. Intuitive Notifications will serve as a ‘sweet’ surprise to users</h3>
<p>Unlike the previous Android OS versions which included dull, boring notifications; Android L will have smarter and more interactive notifications. The best part is that the notifications would no longer be locked to the app’s notifications bar. Instead, they would be a showcased as a key component of the device’s lock screen. Moreover, the Visibility Controls will enable the app used to manage the type of notifications that are displayed on the lock screen. This would assure complete privacy and security of the information that’s being displayed as notifications. As an added advantage, the users would also be able to perform common tasks via the notification itself.</p>
<h3>6. The 64-bit support that helps in to build more intricate apps</h3>
<p>With the launch of Android Lollipop, Android app designers will be capable of designing apps that can run on Android devices which comprise over 4GB of RAM. These apps will be quite similar to the heavy programs that usually run on desktops or laptops.</p>
<h3>Wrapping up</h3>
<p>Witnessing a 63% global market share of smartphone and tablet shipments, Android has undoubtedly become one of the most used devices among hand-held gadget fans. As an Android app designer, you can leverage Android L for creating apps that would not only offer you complete work satisfaction but will even work as a magic wand for meeting your client’s customized requirements.</p>
",0,"standard","post"
"Top Rated Eclipse Plugins for Java Developers","top-rated-eclipse-plugins-java-developers","As an integrated development environment, Eclipse has always proved to be a robust and viable tool for Java&hellip;
","LIVE","<p>As an integrated development environment, Eclipse has always proved to be a robust and viable tool for Java developers when it comes to improving their level of productivity and managing workflow. Its open-source nature and high-quality functionalities help webmasters stay productive and better equipped to build high-end projects. The software also offers a great deal of plugins that play an important role in the success of the Java based projects. They allow Eclipse to remain competitive and stand out amongst so many IDE’s and be the most popular in its own  way.</p>
<p>In this post, we are going to show you a collection of some top of the line Eclipse plugins that help developers stay more agile and efficient. So, without much ado, let’s discuss about them in detail.</p>
<h1>Code Quality Plugins</h1>
<h3><a href=""http://findbugs.sourceforge.net/"" rel=""nofollow noopener noreferrer"" target=""_blank"">1. Find Bugs</a></h3>
<p>Find Bugs is a highly reliable plugin that is used with eclipse IDE to help you locate bugs in Java based projects. The software is available for free under Lesser GNU Public License and also available on Maven, Netbeans, and IntelliJ.</p>
<h3><a href=""http://eclipse-cs.sourceforge.net/#!/"" rel=""nofollow noopener noreferrer"" target=""_blank"">2. CheckStyle</a></h3>
<p>CheckStyle is a powerful open-source development tool that allows you to keep a close eye on whether your Java code adheres to the coding standards. The tool analyzes the source code of your Java document and highlights those items which violate the pre-defined set of coding standards.</p>
<h3><a href=""http://www.eclemma.org/"" rel=""nofollow noopener noreferrer"" target=""_blank"">3. EClemma</a></h3>
<p>EClemma is a free Java code coverage tool great for providing fast development and test cycles. The tool offers an excellent analyzes of the coverage by instantly summarizing and highlighting the results in the Java source code editors.</p>
<h1>Text Editor Plugins</h1>
<h3><a href=""http://andrei.gmxhome.de/anyedit/"" rel=""nofollow noopener noreferrer"" target=""_blank"">4. Any Edit Tools</a></h3>
<p>Any Edit Tools is an extremely helpful plugin that allow you add a new text-based eclipse editors to output consoles. It also provides a seamless way to import and export data.</p>
<h3><a href=""http://sourceforge.net/projects/eclipse-rbe/"" rel=""nofollow noopener noreferrer"" target=""_blank"">5. Eclipse-rbe</a></h3>
<p>Eclipse Resource Bundle Editor is an ideal plugin used to perform editing on the Java resource bundles. Some of its highlighting features include: sorted keys, display of warning icons in the case of missing values and keys, hierarchical views of keys and more.</p>
<h1>Dependency Management Plugins</h1>
<h3><a href=""http://ant.apache.org/ivy/ivyde/"" rel=""nofollow noopener noreferrer"" target=""_blank"">6. Apache IvyDE</a></h3>
<p>Apache IvyDE is an eclipse plugin that helps you effectively manage dependencies declared in an ivy.xml file in your Java project. It comes packed with a great deal of features such as managed classpath container, Ivy XML files editor, Ivy console, reverse dependency explorer and more.</p>
<h3><a href=""http://eclipse.org/m2e/"" rel=""nofollow noopener noreferrer"" target=""_blank"">7. M2eclipse (Maven Plugin)</a></h3>
<p>M2eclipse comes complete with a solid integration with Apache Maven for developing dynamic Java powered projects with ease. It boasts awesome functionalities such as dependency management as well as their automatic downloading from the remote maven repositories, wizards that help you create new Maven projects and more.</p>
<h1>Version Control Integration Plugins</h1>
<h3><a href=""http://subclipse.tigris.org/"" rel=""nofollow noopener noreferrer"" target=""_blank"">8. Subclipse</a></h3>
<p>Subclipse is a top rated SVN plugin that provides a firm support for the smooth functioning of Eclipse IDE and it is licensed under EPL 1.0. Its user-friendly interface is what that is mostly liked by its users and rich functionalities that add an edge to your Java powered projects.</p>
<h3><a href=""http://www.eclipse.org/egit/"" rel=""nofollow noopener noreferrer"" target=""_blank"">9. EGit</a></h3>
<p>EGit plugin is extremely helpful in synchronizing views as well as reading for .git/exclude files. It also offers sophisticated commands for pulling and pushing.</p>
<h3><a href=""http://javaforge.com/project/HGE"" rel=""nofollow noopener noreferrer"" target=""_blank"">10. MercurialEclipse</a></h3>
<p>MercurialEclipse is a solid plugin with an active version control system that helps you manage and work on the highly popular Mercurial, distributed source control management tool within eclipse IDE.</p>
<h1>Framework Development</h1>
<h3><a href=""http://spring.io/tools/eclipse"" rel=""nofollow noopener noreferrer"" target=""_blank"">11. Spring Tool Suite</a></h3>
<p>Spring Tool Suite basically provides a range of best-fitted tools that help developers in creating robust frameworks for the leading Java projects.</p>
<h3><a href=""http://www.easyeclipse.org/site/plugins/springide.html%20 "" rel=""nofollow noopener noreferrer"" target=""_blank"">12. Spring IDE</a></h3>
<p>Spring IDE is an easy and effective way of developing and managing spring framework based applications. It features a graphical user interface that lets you configure files with the help of Spring framework and a range of features to write compelling Spring applications.</p>
<h3><a href=""http://hibernator.sourceforge.net/"" rel=""nofollow noopener noreferrer"" target=""_blank"">13. Hibernator</a></h3>
<p>Hibernator is all what you need to create/update a database schema, working with Hibernate queries and develop user-friendly Hibernate mapping documents.</p>
<h3>14. Jboss Tools</h3>
<p>Jboss Tools is a set of plugins that is used with eclipse IDE. Tailored to improve productivity, its top range of tools provides superior support for your entire project. It also comes packed with a broad set of tooling capabilities and is compatible to support multiple programming models and frameworks.</p>
<h1>Continuous Integration Related Plugin</h1>
<h3><a href=""http://marketplace.eclipse.org/content/hudson-status"" rel=""nofollow noopener noreferrer"" target=""_blank"">15. Hudson Status</a></h3>
<p>Hudson Status is an easy to follow plugin that displays the status of an application in the form of an icon on Hudson build server. The icon changes itself as per the growth made in the project development process and unsuccessful projects are listed in the tooltip.</p>
<h1>Conclusion</h1>
<p>So, there we have it all. The above mentioned list of top rated eclipse plugins will help you quickly get started developing Java applications by providing a development environment which is simple and friendly.</p>
",0,"standard","post"
"A Step-By-Step Guide On iOS8 Beta Testing Using TestFlight","a-step-by-step-guide-on-ios8-beta-testing-using-testflight","Building a fine quality mobile app is something that involves a great deal of dedication and hard work.&hellip;
","LIVE","<p>Building a fine quality mobile app is something that involves a great deal of dedication and hard work. In other words, prior to submitting your iOS app to the App Store, it is pivotal to beta test it for detection of any kind of bugs.</p>
<p>TestFlight is one of the best tools that are used for distributing iOS applications for beta testing. Having being acquired by Apple, TestFlight’s parent company Burstly has been quite confident about the success and acceptance of this Apple beta distribution platform. Getting started with TestFlight is as simple as taking a walk in the park. Through this blog, I’ll be offering you a definite guideline on iOS8 beta testing performed with the help of TestFlight.</p>
<h1><b>iOS app beta testing- What is it exactly?</b></h1>
<p>Beta testing is basically a prominent step in the software development life cycle. Even after testing the app using the built-in simulator and real device, there are chance of missing the opportunity of uncovering some of the basic bugs. This is the point why, the significance of beta testing is realized. Generally open for a small group of real people, beta testing is an effective method of receiving feedback for a particular app that’s to be released soon. You can allow the beta testers to discover a wide range of bugs that might have entered into the app during the design and development stages.</p>
<h2><b>TestFlight- An innovative tool for beta testing of iOS apps</b></h2>
<p>TestFlight helps you in streamlining the process of beta testing of your application. TestFlight is a tool that makes it quite easy for a developer/app owner to invite users for testing the pre-release version of iOS8 applications. With TestFlight, you can invite up to 1,000 beta testers via their email addresses.</p>
<p>Adjacent to the official release of iOS8 and Xcode 6, TestFlight can be easily integrated into iTunes Connect.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""testflight-24-19"" class=""aligncenter size-medium wp-image-6864"" height=""403"" loading=""lazy"" src=""/media/uploads/articles/242/testflight-24-19-620x403.png"" srcset="""" width=""620""/></a></p>
<h2><b>Testing with external testers- Possible with TestFlight</b></h2>
<p>TestFlight allows you to arrange app testing with external testers and internal app users. Here, internal app users can be engineers from development team and other stakeholders.  With new TestFlight, you can invite up to, 25 internal users and 1,000 external testers, who can download and test the app and can report bugs.</p>
<p>The only point that needs to be noted with the process of inviting external testers is that your app must be approved by Apple beforehand. This restriction isn’t there for the internal users as they can begin beta testing your app once its been uploaded to iTunes Connect.</p>
<h2><b>And now, the steps involved in beta testing iOS apps using TestFlight</b></h2>
<p>In this post, we will drive through the process that involve the steps to distribute an app for beta testers using TestFlight.</p>
<p>If you are an Android developer looking for similar beta testing platform read through <a href=""http://stacktips.com/android/testfairy-android-app-beta-testing-platform"" title=""TestFairy – Android app beta testing and deployment platform"">TestFairy – Android app beta testing and deployment platform</a>.</p>
<h3><b>Step 1- Create an app record on iTunes Connect</b></h3>
<p>In order to get started with beta testing, you need to create an app record on iTunes Connect. Simply go to the <a href=""https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa"" rel=""nofollow noopener noreferrer"" target=""_blank"">iTunes Connect</a> official website and create an account.</p>
<p>Once your account is setup, sign in and select ‘My Apps’ and the + icon for creating a new Ios app. Here, you’ll also be asked to fill in values for fields including: App name, primary language, Bundle ID, version and SKU (Stock Keeping Unit).</p>
<h3><b>Step 2- Update the Build String</b></h3>
<p>Now let us go back to Xcode IDE and make sure the version number matches with the one you entered in iTunes Connect.</p>
<p>Go to project navigator and select the project and target for displaying the project editor. After this, under the General Tab, ensure to review the version fields available under the identity section and set the Build field to 1.</p>
<h3><b>Step 3- Archive and upload the application</b></h3>
<p>Prior to archiving the app, make it a point to include the app icon and launch the image in the Xcode project. Here, all the app icons will be managed by the asset catalog. In order to add an icon to the set, select the app icon in the Finder and drag the same to the appropriate image in the set viewer.</p>
<p>For archiving the app, simply review the Archive scheme settings and make sure the build configuration has been set to Release. Once you’re done with the app archiving process, the archive will appear within the Organizer and the app will be ready for upload to iTunes Connect.</p>
<h3><b>Step 4- Manage the app’s beta testing in iTunes Connect</b></h3>
<p>Once the build is uploaded to iTunes Connect, select My Apps and then your app. You can easily spot your uploaded app archive under the PreRelease tab. Next, opt for enabling beta testing by flipping the TestFlight Beta Testing to ‘On’.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""12TestingOff_2x"" class=""aligncenter size-medium wp-image-6861"" height=""1"" loading=""lazy"" sizes=""(max-width: 1px) 100vw, 1px"" src=""/media/uploads/articles/242/12TestingOff_2x.png"" srcset="""" width=""1""/></a></p>
<p>The status of beta testing of app will be changed from Inactive to Invite Testers. After this, click on ‘Invite Testers’ and ‘Users and Roles’ for inviting the internal testers to check out the application. You can assign specific designations to users including: admin, legal etc. The specific users will receive an email regarding the invitation for performing the app’s TestFlight beta testing.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""6AddExternalTesters_2x"" class=""aligncenter size-medium wp-image-6858"" height=""1"" loading=""lazy"" sizes=""(max-width: 1px) 100vw, 1px"" src=""/media/uploads/articles/242/6AddExternalTesters_2x.png"" srcset="""" width=""1""/></a></p>
<h1><b>Conclusion</b></h1>
<p>TestFlight has been one of the most powerful tools for beta testing of iOS applications. Once you’ve built an app after hiring a <a href=""http://www.xicom.biz/offerings/iphone-development/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Custom iPhone App Development Company</a>, its quite crucial for you to beta test it before releasing it for the general public.  With testing being a vital part of app development process, you can’t afford to skip it in any way.</p>
<p>Hope the steps mentioned will helped you gather a clear insight into beta testing your apps using TestFlight before public release.</p>
",0,"standard","post"
"5 Golden Rules for Java Telephonic Interviews","5-golden-rules-java-telephonic-interviews","The phone interview is an integral part of any company’s recruitment process.  With some roles getting upwards of&hellip;","LIVE","<p>The phone interview is an integral part of any company’s recruitment process.  With some roles getting upwards of 50 CVs per eventual hire it’s important that you can impress on the phone interview.  First impressions count, and this is your opportunity to make it count.</p>
<p>With this in mind, here are 5 top tips for excelling in your Java Interview</p>
<h1>1. Practice core Java questions</h1>
<p>Most phone interviews will rely on basic core java questions. They’re standardized so candidates can be compared, they require limited thinking from the interviewer and they work great over the telephone.  You definitely want to practice question based on</p>
<ul>
<li><a href=""http://stacktips.com/java/core-java/java-thread-interview-questions"">Threading</a> (Click for a great list of questions): In particular have a good answer around deadlocks.</li>
<li>Object Oriented Programming: People love asking questions about inheritance and abstraction. Prepare a concise answer for around cohesion and coupling. Understand Polymorphism and Encapsulation.</li>
<li><a href=""http://www.corejavainterviewquestions.com/java-collections-data-structures-interview-questions/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Collections</a> (Click for a full guide to java collections interview questions). Understanding data structures is so important as a developer so any good interview will want to know you know. What are the different types? Why would I use one of the other?</li>
</ul>
<p>Become the master of these things and you’re well on your way.</p>
<h1>2. Have your CV in front of you</h1>
<p>The interviewer will likely go through your CV and ask questions about interesting technologies that you have used.  A friend recently remarked to me how much they loved asking about technologies they didn’t know about to see if the candidate could explain it to them.  A lot of CV’s nowadays simply list every technology a person has ever touched.  Avoid this; if you’ve got it written down then expect to be called out on it.  Candidates who say “I only tried it for a couple of days” after listing it on their CV will lose credibility.</p>
<p>Make sure you’ve prepared a good answer for questions about Spring and Hibernate. These are two of the most popular technologies in Java but they are often poorly understood.</p>
<h1>3. Find somewhere private</h1>
<p>Have a location ready in advance of being called. Whether it’s a room at work or somewhere at home, don’t be rushing around to find somewhere when the interviewer calls. You want to be prepared and relaxed so you can do your best- get yourself in the zone!   It also gives a terrible first impression if you first words to your potential new boss are “can you just give me a minute whilst I find a room?”.  You instantly paint yourself as badly organised.  Not a great start.</p>
<h1>4.  Pre-prepare list of questions</h1>
<p>At the end of the interview there is always a slot to ask questions about the new role and company.  This is still part of the interview and you will be judged based on what questions you’ve asked. This is a great opportunity to impress; by asking about the development style you can enthuse about the way your new team works.  Perhaps they do Agile or TDD. If this is the case then use the opportunity to effuse about your experience in those areas, or if you don’t have the experience then you can talk about how keen you are to learn these new things.  Showing you’re eager and interested in the role is a big plus point and can absolutely swing an average interview into your favor.   That doesn’t apply for just the end of the interview.  Sound enthusiastic throughout the interview, make it clear how excited you are about the role.  Many candidates don’t do this and it’s an easy way to stand out from the crowd.  It is likely your interviewer is doing several interviews in a row, so if you can do just one thing to stand out you will greatly increase your chances of progressing to the next round.</p>
<h1>5.  Say “I don’t know”</h1>
<p>This might sound crazy but it really isn’t.  When an interviewer asks you a question then it is likely they know the answer. If you don’t, and you try to guess your way through it then it will be incredibly obvious.  It’s absolutely fine to say that you don’t know something.  It’s an easy way to earn respect too.  You can also add “but I’m happy to happy a guess if you’d like?”.  This way it’s clear you’re not lying about your knowledge but you have the opportunity to show off your analytical skills.  If possible though, try not to say you don’t know more than a couple of times an interview.</p>
<p>Hopefully with these tips you’ll be well on your way to your dream job.  Learning core java is very important (and javatechig is full of great posts to help you) but there’s a lot more to it than memorizing answers.</p>",0,"standard","post"
"Android Login Screen Using Xamarin","android-login-screen-using-xamarin","In this tutorial we will see &#8220;How to create a login screen using Xamarin.Android&#8221;. This example assumes, you&hellip;
","LIVE","<p>In this tutorial we will see “How to create a login screen using Xamarin.Android”. This example assumes, you have Xamarin for Android development environment setup already.</p>
<p>To design login screen as shown in the image below, we will be using two EditText for username, password and login button.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Login Screen using Xamarin"" class=""aligncenter size-full wp-image-6820"" height=""801"" loading=""lazy"" sizes=""(max-width: 1296px) 100vw, 1296px"" src=""/media/uploads/articles/244/Login-Screen-using-Xamarin.png"" srcset="""" width=""1296""/></a></p>
<h3>Login.axml</h3>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""#2579BF""
    android:orientation=""vertical""&gt;

    &lt;LinearLayout
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_centerInParent=""true""
        android:layout_margin=""10dp""
        android:orientation=""vertical""&gt;

        &lt;ImageView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_gravity=""center""
            android:layout_marginBottom=""20dp""
            android:src=""@drawable/ic_launcher"" /&gt;

        &lt;EditText
            android:id=""@+id/userName""
            android:layout_width=""fill_parent""
            android:layout_height=""45dp""
            android:padding=""5dp""
            android:background=""@android:color/white"" /&gt;

        &lt;View
            android:layout_width=""fill_parent""
            android:layout_height=""2dp""
            android:background=""#f7f7f7"" /&gt;

        &lt;EditText
            android:id=""@+id/password""
            android:layout_width=""fill_parent""
            android:layout_height=""45dp""
            android:padding=""5dp""
            android:background=""@android:color/white""
            android:inputType=""textPassword"" /&gt;

        &lt;Button
            android:id=""@+id/login""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:layout_below=""@id/password""
            android:layout_marginTop=""10dp""
            android:background=""#307FC1""
            android:text=""Login""
            android:textColor=""@android:color/white"" /&gt;

    &lt;/LinearLayout&gt;

&lt;/RelativeLayout&gt;
</pre>
<p>Now, let us create an Activity class and use the below code. To make this example simplified, we are just displaying a toast message when login button is clicked.</p>
<h3>LoginActivity.cs</h3>
<pre class=""prettyprint lang-cs"">using System;

using Android.App;
using Android.Content;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Android.OS;

namespace MyApplication
{
	[Activity (Label = ""POIApplication"", Theme=""@style/android:Theme.Holo.Light.NoActionBar"")]
	public class LoginActivity : Activity
	{
		protected override void OnCreate (Bundle bundle)
		{
			base.OnCreate (bundle);

			// Set our view from the ""main"" layout resource
			SetContentView (Resource.Layout.Login);

			//Initializing button from layout
			Button login = FindViewById&lt;Button&gt; (Resource.Id.login);

			//Login button click action
			login.Click += (object sender, EventArgs e) =&gt; {
				Android.Widget.Toast.MakeText(this, ""Login Button Clicked!"", Android.Widget.ToastLength.Short).Show();
			};
		}
	}
}
</pre>
",0,"standard","post"
"Creating a Splash Screen in Android Using Xamarin","creating-a-splash-screen-in-android-using-xamarin","In this article, we take a look into creating a splash screen in Android using Xamarin. A splash&hellip;
","LIVE","<p>In this article, we take a look into creating a splash screen in Android using Xamarin. A splash screen is non different than other screens, that indicates the loading of resources/data for application. Usually most of the real time application have a splash screen as the first screen to show when application starts, and it is automatically goes off once app is fully loaded.</p>
<p>All you have to do is to define your activity theme style inside <code>Resources/values/Styles.xml</code> file. If you take a look into below style attributes, they are self explanatory. The <code>android:windowBackground</code> attributes takes the link to splash image.</p>
<h3>Styles.xml</h3>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""UTF-8"" ?&gt;
&lt;resources&gt;
  &lt;style name=""Theme.SplashActivity"" parent=""android:Theme.Holo.Light.NoActionBar""&gt;
    &lt;item name=""android:windowBackground""&gt;@drawable/ic_splash_logo&lt;/item&gt;
  &lt;/style&gt;
&lt;/resources&gt;
</pre>
<h3>SplashActivity.cs</h3>
<p>Now let us create a new Activity for splash screen. In this example, we have named it as SplashActivity, and paste the below code.</p>
<pre class=""prettyprint lang-vb"">namespace MyApplication
{
    using System.Threading;
    using Android.App;
    using Android.OS;

    [Activity (Label = ""SplashScreen"", MainLauncher=true, NoHistory=true, Theme=""@style/Theme.SplashActivity"")]
    public class SplashActivity : Activity
    {
        protected override void OnCreate(Bundle bundle)
        {
            base.OnCreate(bundle);

            // Wait for 2 seconds
            Thread.Sleep(2000); 

            //Moving to next activity
            StartActivity(typeof(MainActivity));
        }
    }
}
</pre>
<p>In the above code we have specified <code>[Activity]</code> attribute with following properties</p>
<ol>
<li><strong>MainLauncher</strong> – This specifies that the activity is a launcher activity and will start automatically when application is launched</li>
<li><strong>Theme</strong> – This specifies the custom theme to android activity</li>
<li><strong>NoHistory</strong> – By default Android application maintain back stack of all activities. When user moves from ActivityA to ActivityB, and presses device back button from ActivityB, android system automatically shows to ActivityA. In case of splash screen, once application is loaded, we are not welling to display splash screen again at any point of time. Hence, we must ask android system to explicitely, not to add SplashActivity into backstack. This can be done by using <code>NoHistory = true</code> argument. .</li>
</ol>
<p>A typical android application Splash screen will perform the loading activity. As this is an example we are just using <code>Thread.Sleep(milliseconds)</code>  to create a delay.</p>
",0,"standard","post"
"Interface Segregation Principle","interface-segregation-principle","This article explains the interface segregation principle and its uses. Interface segregation is a design principle that deals&hellip;
","LIVE","<p>This article explains the interface segregation principle and its uses. Interface segregation is a design principle that deals with the disadvantages of “fat” interfaces. Interfaces containing methods that are not specific to it are called polluted or fat interfaces.</p>
<blockquote><p>Clients should not be forced to depend upon interfaces that they don’t use.</p></blockquote>
<p>Let us take the example of a multi-purpose machine developed by Xerox. This super xerox system could do a wide variety of jobs like printing, scanning, stapling, photocopying, etc. They can be implemented as a IMachine interface and XeroxMachine implementation as shown below.</p>
<pre class=""prettyprint lang-java"">public interface IMachine {
	public void print();
	public void staple();
	public void scan();
	public void photoCopy();
}</pre>
<p>XeroxMachine implementation</p>
<pre class=""prettyprint lang-java"">public class XeroxMachine implements IMachine {

	@Override
	public void print() {
		System.out.println(""Printing Job"");
	}

	@Override
	public void staple() {
		System.out.println(""Stapling Job"");
	}
	
	@Override
	public void scan() {
		System.out.println(""Scan Job"");
	}

	@Override
	public void photoCopy() {
		System.out.println(""Photo Copy"");
	}
}
</pre>
<p>The super machine is developed and working great. Now the company is getting requests for making a machine that do only print function. Management has decided to develop a specialized print machine. Now developers want to write Printer class that implements IMachine interface. Did you notice any problem? Although you need only print function, you have to implement all other methods of IMachine interface. <strong>Now IMachine interface is not following interface segregation principle and called fat interface.</strong></p>
<p>We can breakdown the IMachine into multiple special purpose interfaces as shown below.</p>
<pre class=""prettyprint lang-java"">public interface IPrinter {
	public void print();
}

public interface IScanner {
	public void fax();
}

public interface IStapler {
	public void staple();
}

public interface IPhotoCopier {
	public void photoCopy();
}
</pre>
<h3>Notes:</h3>
<p>What if you are dealing with an existing legacy application where the interface is a fat interface? How do deal with such a situation? Well, you can always use an adapter design pattern for segregation.</p>
<p>Interface segregation brings implementation simplicity and makes easy to debug and maintain.</p>
<p>Interface segregation principle is easy to understand and sounds great in theory, but often difficult to identify the distinct interfaces and it can also end up with the proliferation of interfaces.</p>
",0,"standard","post"
"How to Use Picasso Image Loader Library in Android","how-to-use-picasso-library-in-android","This this tutorial, we will take a look into how to use Picasso library in android. Picasso is open source and one of the widely used image downloader library in Android. It is created and maintained by Square. It is among the powerful image download and caching library for android.
","LIVE","<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Picasso Image Downloader"" class=""aligncenter size-full wp-image-6671"" height=""342"" loading=""lazy"" sizes=""(max-width: 800px) 100vw, 800px"" src=""/media/uploads/articles/247/Picasso-Image-Downloader.png"" srcset="""" width=""800""/></a>This this guide, we will see how to use Picasso library in android. Picasso is open source and one of the widely used image downloader library in Android. It is created and maintained by <a href=""http://square.github.io/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Square</a>. It is among the powerful image download and caching <a href=""/articles/android-third-party-libraries-sdks"" title=""Android third party libraries and SDK’s"">library for Android.</a></p>
<h2>Why Use Picasso?</h2>
<ol>
<li>It simplifies the process of loading images from external URLs and displays on your application. For example, downloading an image from the server is one of the most common tasks in any application. And it needs quite a larger amount of code to achieve this via android networking API’s. By using Picasso, you can achieve this with few lines of code.</li>
<li>It is always not about downloading the image from a remote location. You also have to think of implementing image caching logic in order to provide a seamless user experience. Picasso provides automatic image caching.</li>
<li>Image transformation is a costly affair. If your application need deal with such runtime image transformation, you must be watchful about OutOfMemoryException. Picasso deals with it, so you don’t have to do it yourself.</li>
</ol>
<h3>How to Use Picasso Android Library?</h3>
<p><a href=""http://square.github.io/picasso/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Download the Picasso JAR file</a>, If you haven’t done it already. If you are using eclipse as your development IDE, then just copy the downloaded <code>picasso-2.4.0.jar</code> file into your application lib folder. If you are using Android Studio IDE, then you have to add below dependency in <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-java"">dependencies {
   ...
   compile ""com.squareup.picasso:picasso:2.4.0""
   ...
}</pre>
<h3><b>Loading Image from URL ImageView</b></h3>
<p>We are done with configuration, let us see how to use this library to download images from remote server and display in ImageView. I assume you have your activity layout file already with ImageView declared on it.</p>
<pre class=""prettyprint lang-xml"">&lt;ImageView
    android:layout_width=""wrap_content""
    android:layout_height=""wrap_content""
    android:id=""@+id/imageView""
    android:layout_alignParentTop=""true""
    android:layout_centerHorizontal=""true""&gt;
&lt;/ImageView&gt;
</pre>
<p>For Picasso download image from server, you need to add below internet permissions to your project’s manifest.</p>
<pre class=""prettyprint lang-xml"">&lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;</pre>
<p>Now let us download the image and display on imageView</p>
<pre class=""prettyprint lang-java"">//Initialize ImageView
ImageView imageView = (ImageView) findViewById(R.id.imageView);
//Loading image from below URL into imageView
Picasso.with(this)
   .load(""YOUR IMAGE URL HERE"")
   .into(imageView);
</pre>
<p>In the first line we are getting ImageView instance from the layout. And then load the image from the above remote URL using the Picasso library.</p>
<h3>Placeholder and Error Fallback</h3>
<p>In the above code snippet, we have just downloaded the image and displayed on ImageView. But that is not enough always. For any real-time application, you must think of all possible cases. Now we need a placeholder and error fallback for our ImageView. Placeholder image will be shown before the image is loaded. Error fallback will be shown if, there is an error while downloading image. However both fallback and placeholder are optional.</p>
<pre class=""prettyprint lang-java"">Picasso.with(this)
    .load(""YOUR IMAGE URL HERE"")
    .placeholder(R.drawable.ic_placeholder) 
    .error(R.drawable.ic_error_fallback)         
    .into(imageView);</pre>
<h3>Image Resize and Transformation</h3>
<p>Picasso offers much more than just downloading image. It can resize the image, transform before it is displayed in ImageView.</p>
<pre class=""prettyprint lang-java"">Picasso.with(this)
     .load(""YOUR IMAGE URL HERE"")        
     .placeholder(R.drawable.ic_placeholder)   
     .error(R.drawable.ic_error_fallback)      
     .resize(250, 200)                        
     .rotate(90)                             
     .into(imageView);
</pre>
<h3>Alternative options:</h3>
<p>Some of the other alternative contenders of Picasso are:</p>
<ul>
<li><a href=""/articles/universal-image-loader-library-in-android"" rel=""noopener"" target=""_blank"">Universal Image Loader</a></li>
<li><a href=""http://developer.android.com/training/volley/index.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">Volley from Google</a></li>
</ul>
",0,"standard","post"
"Factory Method Design Pattern in Java","factory-method-design-pattern-java","Over the course of this article, we will examine one of the most commonly used patterns, the Factory method pattern in java.. The Factory design pattern provides a way to use an instance as an object factory. The factory can return an instance of one of several possible classes in a class hierarchy, depending on the data provided to it.
","LIVE","<p>Over the course of this article, we will examine one of the most commonly used patterns, the Factory method pattern in java.</p>
<p>Software systems undergo constant changes and they are unstable. We must consider designing where the objects and relationships are loosely coupled. Loose coupling is one of the most important characteristics in software design; this helps in extending new functions in the software without disturbing or doing no changes to the existing system.</p>
<blockquote><p>“The Factory design pattern provides a way to use an instance as an object factory. The factory can return an instance of one of several possible classes in a class hierarchy, depending on the data provided to it.”</p></blockquote>
<p>Java Factory pattern belongs to the creational family of design patterns that govern the object instantiation process. The Factory pattern is grouped into the Simple Factory, Factory Method, and Abstract Factory patterns. We will taper the context of this tutorial to Simple Factory and Factory method design pattern.</p>
<ol>
<li><strong>Simple Factory:</strong> the Simple factory isn’t actually a design pattern; its more of a programming technique often used to encapsulate the object instantiation process.</li>
<li><strong>Factory Method:</strong> Defines an interface for creating an object, but lets the classes that implement the interface decide which class to instantiate. The Factory method lets a class defer instantiation to subclasses.</li>
<li><strong>Abstract Factory:</strong> Provides an interface for creating families of related or dependent objects without specifying their concrete classes.</li>
</ol>
<p>Benefits of Factory design pattern</p>
<ol>
<li>The client does not need to know every subclass of objects it must create. It only needs one reference to the abstract class/interface and the factory object.</li>
<li>The factory encapsulates the creation of objects. This can be useful if the creation process is very complex.</li>
</ol>
<h1>Simple Factory Pattern</h1>
<p>Spice Digital Inc. is one of the top smartphone manufacturers in India. They are the pioneer in manufacturing and distributing smartphones in Indian market. For now, they have two successful products SpiceFire and SpiceBolt. The <code>produceMobile()</code> method is working well which produce two different mobiles based on their model number. Let us have a look into the current implementation of produceMobile() method.</p>
<pre class=""prettyprint lang-java"">public SpiceMobile produceMobile(String model) {
		SpiceMobile mobile = null;

		if (model.equalsIgnoreCase(""SpiceBolt"")) {
			mobile = new SpicePlus();
		} else if (model.equalsIgnoreCase(""SpiceFire"")) {
			mobile = new SpiceBolt();
		}
		mobile.prepare();
		mobile.bundle();
		mobile.label();

		return mobile;
}
</pre>
<p>SpiceMobile implementation,</p>
<pre class=""prettyprint lang-java"">public abstract class SpiceMobile {
	public abstract void prepare();
	public abstract void bundle();
	public abstract void label();
}

public class SpiceFire extends SpiceMobile {
	@Override
	public void prepare() {
	}

	@Override
	public void bundle() {
	}

	@Override
	public void label() {
	}
}

public class SpiceBolt extends SpiceMobile {

	@Override
	public void prepare() {
	}

	@Override
	public void bundle() {
	}

	@Override
	public void label() {
	}
}
</pre>
<p>Problems with the above implementation</p>
<ol>
<li>The above implementation is working well and everyone is happy. However, at some point in time, a company want to release another new model to market, they need to change the produceMobile() method code.</li>
<li>The design is not extensive and it is closed for modification.</li>
<li>Adds more complexity to refactor code each time new products added.</li>
</ol>
<h1>Factory Method Design Pattern Example</h1>
<p>The above example is working great to deal with producing mobiles. However, we have outlined some of the problems above on the above approach. Now let us add some more complexity to the above requirements.</p>
<p>Spice Digital Inc. company now decided to make their global presence. They want to extend their business to London and NewYork location. Looking at the market interest, London factory will produce only SpiceBolt and SpiceFire model and New York will produce SpiceFire and SpicePlus. Now the use-case is becoming fairly complex. Let us have a glance at the below class diagram that using the Factory method design pattern.</p>
<p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""Factory Method Design Pattern"" class=""aligncenter size-medium wp-image-6591"" height=""365"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/248/Factory-Method-Design-Pattern-620x365.png"" srcset="""" width=""620""/></a></center></p>
<h3>SpiceMobile.java</h3>
<pre class=""prettyprint lang-java"">public abstract class SpiceMobile {
	public double price;
	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public abstract void prepare();

	public abstract void bundle();

	public abstract void label();
}
</pre>
<p>Now, let us create three different Spice mobile implementation. For demonstration purpose, we have three simple implementations i.e. SpiceBolt, SpiceFire, and SpicePlus. All three classes are similar so we don’t have listed them all.</p>
<h3>SpiceBolt.java</h3>
<pre class=""prettyprint lang-java"">public class SpiceBolt extends SpiceMobile {

	@Override
	public void prepare() {
	}

	@Override
	public void bundle() {
	}

	@Override
	public void label() {
	}
}
</pre>
<h3>MobileFactory.java</h3>
<pre class=""prettyprint lang-java"">public abstract class MobileFactory {

	public abstract SpiceMobile constructMobile(String model);

	/**
	 * Defines the process to product mobile. This implementation should'nt be
	 * be changed by clients
	 * 
	 * @param model
	 * @return SpiceMobile
	 */
	public SpiceMobile produceMobile(String model) {

		SpiceMobile mobile = constructMobile(model);
		mobile.prepare();
		mobile.bundle();
		mobile.label();

		return mobile;
	}
}
</pre>
<h3>LondonMobileFactory.java</h3>
<pre class=""prettyprint lang-java"">/**
 * London mobile factory is specialized and only sale Spice3D and SpiceHD.
 */
public class LondonMobileFactory extends MobileFactory {

	@Override
	public SpiceMobile constructMobile(String model) {

		SpiceMobile mobile = null;

		if (model.equalsIgnoreCase(""SpiceFire"")) {
			mobile = new SpicePlus();
			mobile.setPrice(300);
		} else if (model.equalsIgnoreCase(""SpiceBolt"")) {
			mobile = new SpiceBolt();
			mobile.setPrice(400);
		}

		return mobile;
	}
}
</pre>
<h3>NYMobileFactory.java</h3>
<pre class=""prettyprint lang-java"">/**
 * New York mobile factory is specialized and only sale Spice3D and SpiceMono.
 */

public class NYMobileFactory extends MobileFactory {

	@Override
	public SpiceMobile constructMobile(String model) {
		
		SpiceMobile mobile = null;

		if (model.equalsIgnoreCase(""SpiceFire"")) {
			mobile = new SpicePlus();
			mobile.setPrice(200);
		} else if (model.equalsIgnoreCase(""SpiceMono"")) {
			mobile = new SpiceFire();
			mobile.setPrice(280);
		}

		return mobile;
	}
}</pre>
<h3>Client.java</h3>
<pre class=""prettyprint lang-java"">public class Client {

	public static void main(String[] args) {

		MobileFactory factory = new LondonMobileFactory();
		SpiceMobile mobile = factory.produceMobile(""SpiceHD"");

		MobileFactory nyFactory = new NYMobileFactory();
		SpiceMobile mobile2 = factory.produceMobile(""SpiceMono"");

	}
}
</pre>
",0,"standard","post"
"Builder Design Pattern In Java","builder-design-pattern-java","Over the course of this article, we will examine Builder design pattern in Java. Builder design pattern belongs to the creational family of pattern, that control the object instantiation process. Builder design pattern simplifies the object instantiation process for complex objects.
","LIVE","<p>Over the course of this article, we will examine Builder design pattern in Java. Builder design pattern belongs to the creational family of pattern, that control the object instantiation process. Builder design pattern simplifies the object instantiation process for complex objects. The definition of Builder design pattern as provided in the original Gang of Four book is,</p>
<p class=""definition""> Separates the construction of a complex object from its representation so that the same construction process can create different representations.</p>
<p>Let us understand this pattern in a simpler term. In Java for instantiating objects we need to pass parameters to its class constructor. What if we have different combinations of parameters required to create objects and some of them are mandatory and some are optional? We can overload the class constructor with different combinations to achieve this.</p>
<p>Instead of using numerous constructors, the builder pattern uses another object, a builder, that receives each initialization parameter step by step and then returns the resulting constructed object at once.</p>
<h1>Builder Design Pattern Example</h1>
<p>Let us take an example of a cafe preparing a meal. For preparing a meal there are various steps being performed, for example, choosing sandwich, adding sides, drink, offer, etc. There can be different combination of meal created during the process. In such cases preparing a meal is difficult than it is expected. Let us solve this issue by using builder design pattern.</p>
<p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""Builder Design Pattern Java"" class=""aligncenter size-medium wp-image-6580"" height=""382"" loading=""lazy"" src=""/media/uploads/articles/249/Builder-Design-Pattern-Java-620x382.png"" srcset="""" width=""620""/></a></center>In the above class diagram,</p>
<ol style=""padding-left: 30px;"">
<li>The <code>MealBuilder</code> specifies an abstract interface for creating parts of a Meal.</li>
<li>The <code>SandwichMealBuilder</code> is an concrete builder constructs and assembles parts of the product by implementing the MealBuilder interface.</li>
<li>The <code>MealDirector</code> constructs an object using the MealBuilder interface.</li>
<li>The <code>Meal</code> is the object which we are intended to create during this process</li>
</ol>
<h3>Meal.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.designpattern.builder;

public class Meal {
	public String sandwich;
	public String sideOrder;
	public String drink;
	public String offer;
	public double price;

	@Override
	public String toString() {
		return ""Sandwich="" + sandwich + "" Side Order="" + sideOrder + "" Drink=""
				+ drink + "" Offer="" + offer + "" Price="" + price;
	}
}
</pre>
<h3>MealBuilder.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.designpattern.builder;

public interface MealBuilder {	
	public abstract void addSandwich(String sandwich);
	public abstract void addSides(String sides);
	public abstract void addDrink(String drink);
	public abstract void addOffer(String coupon);
	public abstract void setPrice(double price);
	public abstract Meal getMeal();
}
</pre>
<h3>SandwichMealBuilder.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.designpattern.builder;

public class SandwichMealBuilder implements MealBuilder {
	private Meal _meal = new Meal();

	@Override
	public void addSandwich(String sandwich) {
		_meal.sandwich = sandwich;
	}

	@Override
	public void addSides(String sides) {
		_meal.sideOrder = sides;
	}

	@Override
	public void addDrink(String drink) {
		_meal.drink = drink;
	}

	@Override
	public void addOffer(String coupon) {
		_meal.offer = coupon;
	}

	@Override
	public void setPrice(double price) {
		_meal.price = price;
	}

	@Override
	public Meal getMeal() {
		return _meal;
	}
}
</pre>
<h3>MealDirector.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.designpattern.builder;

public class MealDirector {
	
	public void makeMeal(MealBuilder mealBuilder) {
		
		mealBuilder.addSandwich(""Hamburger"");
		mealBuilder.addSides(""Fries"");
		mealBuilder.addDrink(""Coke"");
		mealBuilder.addOffer(""Weekend Bonanza"");
		mealBuilder.setPrice(5.99);
	}
}
</pre>
<h3>Client.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.designpattern.builder;

public class Client {
	public static void main(String[] args) {		
		MealBuilder pizzaBuilder = new SandwichMealBuilder();
		MealDirector director = new MealDirector();
		director.makeMeal(pizzaBuilder);
		
		Meal meal = pizzaBuilder.getMeal();
		System.out.println(meal.toString());
	}
}
</pre>
",0,"standard","post"
"Prototype Design Pattern In Java","prototype-design-pattern-java","Prototype design pattern belongs to the structural family of pattern. It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects
","LIVE","<p>Over the course of this article, we will examine Prototype design pattern in Java. Prototype design pattern belongs to the creational family of pattern. It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects. In a simpler term, using prototype pattern, we will create new instances through cloning existing instances.</p>
<p>Creating instance in java is one of the costly operation. It costs time and resources. If there is a scope to avoid object creation process, by just copying the existing object, then won’t it be great? Prototype design patterns answers that problem.</p>
<p>Use the prototype design pattern when,</p>
<ol style=""padding-left: 30px;"">
<li>When specifying new objects by changing an existing objects structure</li>
<li>Speeds up instantiation of large, dynamically loaded classes</li>
</ol>
<h2>Prototype Design Pattern Example</h2>
<p>The Hampstead Cake company are well known for providing quality birthday cheese cakes in London. For each order the cheese cake has to be customized with recipients name, however the ingredients and taste remains the same. The cake company is getting inundated orders and now struggling to deliver them. The trouble is, it is taking too long to specify ingredients and build cheese cake for each order. That way they cannot produce enough cakes. How about you just produce a single cheesecake, and clone it multiple times, and then customize each one?</p>
<p>In this example, CakeStore class is the client. The client creates multiple prototypical  instances by calling <code>prepareCake()</code> method.</p>
<p><center><br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Prototype Design Pattern"" class=""aligncenter wp-image-6575 size-full"" height=""459"" loading=""lazy"" src=""/media/uploads/articles/250/Prototype-Design-Pattern.png"" srcset="""" width=""609""/></a></center></p>
<h3>Cake.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.designpattern.prototype;

public interface Cake extends Cloneable {

	public Cake prepareCake();
}
</pre>
<h3>CheeseCake.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.designpattern.prototype;

public class CheeseCake implements Cake {

	private String sugar;
	private String butter;
	private String cheese;
	private String name;

	public Cake prepareCake() {
		Cake cake = null;
		try {
			cake = (Cake) super.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		return cake;
	}

	void addSugar(String sugar) {
		this.sugar = sugar;
	}

	void addButter(String butter) {
		this.butter = butter;
	}

	public void addCheese(String cheese) {
		this.cheese = cheese;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return ""Sugar:"" + sugar + "", Butter:"" + butter + "", Name:"" + name
				+ "", Cheese:"" + cheese;
	}

}
</pre>
<h3>CakeStore.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.designpattern.prototype;

public class CakeStore {

	public static void main(String[] args) {

		/* Cheese cake preparation */
		CheeseCake cake = new CheeseCake();
		cake.addSugar(""100g"");
		cake.addButter(""200g"");
		cake.addCheese(""Acapella"");
		System.out.println(""Cake = "" + cake.toString());

		
		/* Order with custom name */
		CheeseCake cake1 = (CheeseCake) cake.prepareCake();
		cake1.setName(""Bastien"");
		System.out.println(""Cake1 = "" + cake1.toString());


		/* Order with custom name and customized cheese */
		CheeseCake cake2 = (CheeseCake) cake.prepareCake();
		cake2.addCheese(""Extra Cheese"");
		cake2.setName(""Adams"");
		System.out.println(""Cake3 = "" + cake2.toString());
	}
}
</pre>
<h3>Output</h3>
<pre>Cake = Sugar:100g, Butter:200g, Name:null, Cheese:Acapella
Cake1 = Sugar:100g, Butter:200g, Name:Bastien, Cheese:Acapella
Cake3 = Sugar:100g, Butter:200g, Name:Adams, Cheese:Extra Cheese
</pre>
",0,"standard","post"
"Adapter Design Pattern In Java","adapter-design-pattern-in-java","Over the course of this article, we will examine Adapter design pattern in Java. Java Adapter design pattern allows two incompatible classes to work together by converting the interface of one class into an interface expected by the clients.
","LIVE","<p>Over the course of this article, we will examine Adapter design pattern in Java. Adapter design pattern belongs to the structural family of pattern, that enables two incompatible interfaces to work together. The Adapter pattern allows two incompatible classes to work together by converting the interface of one class into an interface expected by the clients. This pattern is also known as Wrapper. The definition of Adapter pattern provided in the original Gang of Four book is,</p>
<blockquote>
<p style=""text-align: left;"">Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.</p>
</blockquote>
<p>In order to understand this pattern, let us have a look into some of the real-time examples of adapter</p>
<ol>
<li>Suppose you have bought a laptop from India, and in recent past you have just moved to United Kingdom. The electric sockets used in UK is different from the indian electric sockets. And hence, your laptop charger wont work directly. You need to buy an adapter that can charge your indian charger on UK electric socket.</li>
<li>When you have an legacy library interface to be integrated with new system. The new system is not directly accepting the way the legacy library works. As the library is intended to use is not longer on development, we need an adapter to make the two incompatible types to work.</li>
</ol>
<p>In this pattern,</p>
<ol>
<li>The Client makes a request to the adapter by calling a method on it using the target interface.</li>
<li>The Adapter translates that request into one or more calls on adaptee using adapter interface.</li>
<li>The client receives the result of the call and never knows there is an adapter doing the translation.</li>
</ol>
<p>Use the adapter design pattern when,</p>
<ol>
<li>You want to use the existing class and its interfaces that meet your interface requirements at your end.</li>
<li>You want to create a reusable class that helps to interface between two incompatible classes.</li>
</ol>
<h2>Adapter Design Pattern Example</h2>
<p>Lloyds bank is an international bank offers services worldwide. For offshore account holders, the tax rate is 0.03%. And, in India it offers two types of accounts, Standard and Platinum. Tax rules are not applied to indian bank accounts. Now the offshore bank is incompatible to Indian account types. We need to design an AccountAdapter to make both the incompatible account types to work together.</p>
<p>In the above example, the interaction diagram will be represented as shown below. Here client is just calling the <code>getBalance()</code> method of adapter. Adapter calls <code> getOffshoreBalance()</code> on adaptee and returns the result that client is expecting. The getBalance() methods inside Adapter will calculate the account balance by deducing the taxes applied for the offshore account.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Adapter Design Pattern Sequence Diagram"" class=""aligncenter wp-image-6479 size-medium"" height=""492"" loading=""lazy"" src=""/media/uploads/articles/251/Adapter-Design-Pattern-Sequence-Diagram-620x492.png"" srcset="""" width=""620""/></a></p>
<p>In this example we are using object adapters. The object adapters uses composition to adapt one incompatible interface to another. The adapter inherits the target interface that the client expects to see, while it holds an instance of adaptee. This enables the client and the adaptee to be completely decoupled from each other. Only the adapter knows about both of them.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Adapter Design Pattern Class Diagram"" class=""aligncenter wp-image-6478 size-medium"" height=""330"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/251/Adapter-Design-Pattern-Class-Diagram-620x330.png"" srcset="""" width=""620""/></a></p>
<h3>OffshoreAccount.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.designpattern.adapter;

public class OffshoreAccount {
	private double balance;

	/** The tax for the country where the account is */
	private static final double TAX_RATE = 0.04;

	public OffshoreAccount(final double balance) {
		this.balance = balance;
	}

	public double getTaxRate() {
		return TAX_RATE;
	}

	public double getOffshoreBalance() {
		return balance;
	}

	public void debit(final double debit) {
		if (balance &gt;= debit) {
			balance -= debit;
		}
	}

	public void credit(final double credit) {
		balance += balance;
	}
}
</pre>
<h3>Account.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.designpattern.adapter;

public interface Account {
    public double getBalance();    
    public boolean isOverdraftAvailable();    
    public void credit(final double credit);
}
</pre>
<h3>AbstractAccount.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.designpattern.adapter;

public class AbstractAccount implements Account {
	private double balance;	
	private boolean isOverdraftAvailable;

	public AbstractAccount(final double size) {
		this.balance = size;
	}

	@Override
	public double getBalance() {
		return balance;
	}

	@Override
	public boolean isOverdraftAvailable() {
		return isOverdraftAvailable;
	}

	public void setOverdraftAvailable(boolean isOverdraftAvailable) {
		this.isOverdraftAvailable = isOverdraftAvailable;
	}

	@Override
	public String toString() {
		return getClass().getSimpleName() + "" Balance="" + getBalance()
				+ "" Overdraft:"" + isOverdraftAvailable();
	}

	@Override
	public void credit(final double credit) {
		balance += credit;
	}
}
</pre>
<h3>PlatinumAccount.java</h3>
<pre class=""prettyprint lang-java"">public class PlatinumAccount extends AbstractAccount {

	public PlatinumAccount(final double balance) {
		super(balance);
		setOverdraftAvailable(true);
	}
}
</pre>
<h3>StandardAccount.java</h3>
<pre class=""prettyprint lang-java"">public class StandardAccount extends AbstractAccount {

	public StandardAccount(final double balance) {
		super(balance);
		setOverdraftAvailable(false);
	}
}
</pre>
<h3>AccountAdapter.java</h3>
<pre class=""prettyprint lang-java"">public class AccountAdapter extends AbstractAccount {

	// Adaptee - The class we are adapting from
	private OffshoreAccount offshoreAccount;

	/**
	 * 
	 * @param offshoreAccount
	 *            the instance of OffshoreAccount we are going to adapt from.
	 */
	public AccountAdapter(final OffshoreAccount offshoreAccount) {
		super(offshoreAccount.getOffshoreBalance());

		// holds adaptee reference
		this.offshoreAccount = offshoreAccount;
	}

	/**
	 * Calculate offshore account balance after deducting the tax owed for
	 * offshore account
	 */
	@Override
	public double getBalance() {
		final double taxRate = offshoreAccount.getTaxRate();
		final double grossBalance = offshoreAccount.getOffshoreBalance();

		final double taxableBalance = grossBalance * taxRate;
		final double balanceAfterTax = grossBalance - taxableBalance;
		return balanceAfterTax;
	}
}
</pre>
<h3>Client.java</h3>
<pre class=""prettyprint lang-java"">public class AdapterTest {
	public static void main(String[] args) {

		StandardAccount sa = new StandardAccount(2000);
		System.out.println(""Account Balance= "" + sa.getBalance());
		
		//Calling getBalance() on Adapter
		AccountAdapter adapter = new AccountAdapter(new OffshoreAccount(2000));
		System.out.println(""Account Balance= "" + adapter.getBalance());		
	}
}
</pre>
",0,"standard","post"
"Observer Design Pattern In Java","observer-design-pattern-in-java","Observer design pattern defines one-to-many dependency between objects in which one object changes state, all its dependents are notified. Observer design pattern sometimes called as publisher-subscriber design pattern in networked models.","LIVE","<p>The observer design pattern belongs to the behavioural family of patterns, that defines a common communication pattern between objects.</p>
<p>Observer design pattern defines a one-to-many dependency between objects in which one object changes state, all its dependents are notified.</p>
<p>Observer design pattern is sometimes called publisher-subscriber design pattern in networked models. Dependent objects are called observers and the object they are registering to is called a Subject.</p>
<p>When the subject changes its state, all the observers get notified. In this pattern,</p>
<ul><li>Observers register themselves with the subject.</li><li>The subject maintains the list of its&nbsp;dependents (Observers), and it
broadcasts notifications&nbsp;to all its dependents when its state changes.</li><li>Observers de-register explicitly when they no longer want to be notified.</li></ul>
<p>To understand this pattern, let us look at some of the real-time examples:</p>
<ul><li>This design pattern is widely used on most of the user interface frameworks</li><li>Most commonly used in most of the MVC (Model-View-Controller) models</li><li>Consider the different charts in an Excel document. A chart is drawn based on the data shown on the grid. If there is any change to data in
Excel grid, the chart is automatically redrawn.</li></ul>
<h2 class="""">Observer Design Pattern Example in Java</h2>
<p>In this example, let us take the case of a news publisher. In a typical flow, the new readers subscribe for news. Once new news is published by the publisher, all the observers get notified. Here the publisher acts as the subject and subscribers are observers.</p>
<p>A single publisher can have one or many subscribers.</p>
<p></p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""Observer Design Pattern Class Diagram"" class=""aligncenter wp-image-6440 size-full"" height=""599"" loading=""lazy"" src=""/media/uploads/articles/252/Observer-Design-Pattern-Class-Diagram.png"" srcset="""" width=""923""></a></center>The above class diagram represents, two observers &nbsp;<code>Subscriber1</code> and <code>Subscriber2</code> register with publisher. Once there is a change in Publisher both the subscribers gets notified.<p></p>
<p class=""""><b>Observer.java</b></p>
<pre class=""prettyprint lang-java"">public interface Observer {
	 public void update(String editon);
}
</pre>
<p class=""""><b>Subscriber1.java</b></p>
<pre class=""prettyprint lang-java"">public class Subscriber1 implements Observer {

	@Override
	public void update(String  edition) {
		System.out.println(""New Edition from Subscriber1"");
	}
}
</pre>
<p class=""""><b>Subscriber2.java</b></p>
<pre class=""prettyprint lang-java"">public class Subscriber2 implements Observer {

	@Override
	public void update(String  edition) {
		System.out.println(""New Edition from Subscriber2"");
	}
}
</pre>
<p class=""""><b>Subject.java</b></p>
<pre class=""prettyprint lang-java"">public interface Subject {
	public void registerObserver(Observer observer);

	public void removeObserver(Observer observer);

	public void notifyObservers();
}
</pre>
<p class=""""><b>Publisher.java</b></p>
<pre class=""prettyprint lang-java"">import java.util.ArrayList;
import java.util.List;

public class Publisher implements Subject {

	private List&lt;Observer&gt; _observers = new ArrayList&lt;Observer&gt;();

	@Override
	public void registerObserver(Observer observer) {
		System.out.println(""Registered observer"");		
		_observers.add(observer);
	}

	@Override
	public void removeObserver(Observer observer) {
		System.out.println(""Deregister observer"");
		_observers.remove(observer);
	}

	@Override
	public void notifyObservers() {
		
		for (Observer observer : _observers) {
			observer.update(""Weekly Edition"");
		}
	}
}
</pre>
<p class=""""><b>Test.java</b></p>
<pre class=""prettyprint lang-java"">public class Test {

	public static void main(String[] args) {
		
		/* News Publisher */
		Subject publisher = new Publisher();
		
		/* registering observers */
		Observer subscriber1 = new Subscriber1();
		publisher.registerObserver(subscriber1);
		
		Observer subscriber2 = new Subscriber2();
		publisher.registerObserver(subscriber2);
		
		/* Notify observers */
		publisher.notifyObservers();
		
		/* Delete observers */
		publisher.removeObserver(subscriber2);
		
		/* Notify observers */
		publisher.notifyObservers();
	}
}
</pre>
<p class=""""><b>Output</b></p>
<pre>Registered observer
Registered observer
New Edition from Subscriber1
New Edition from Subscriber2
Deregister observer
New Edition from Subscriber1
</pre>
<h3 class="""">Advantages of Observer Design Pattern</h3>
<ul>
<li>Provides loose coupling between objects called observer and observable. The subject only know the list of observers it don’t care about their implementation. All the observers are notified by subject in a single message broadcast.</li>
<li>You can add and remove observers at anytime. No modification is need to be done to the subject to add new observers.</li>
</ul>
<h3 class="""">Drawback of Observer Design Patterns</h3>
<ul>
<li>Sometimes if there is a problem, it becomes complex to debug between the chain of observers.</li>
<li>The subject holds reference of all the observers, if we not unregister the object it can cause memory leak. This common problem is called as lapsed listener problem.</li>
</ul>
<h3 class="""">Rules of thumb</h3>
<ul>
<li>Explicitly unregister the observers, when no longer it is required to listen to Subject.</li>
<li>It is recommended for subject to hold, weakreference of objects to avoid memory leak.</li>
</ul>",0,"standard","post"
"Google Introduce New Website For Designers to Learn Material Design","google-introduce-new-website-designers-tp-learn-material-design","Google has invested hugely on bringing life to design by introducing a complete new design philosophy for visual, motion, and user interaction. They name it as material design.
","LIVE","<p>On 7th annual Google I/O developer conference, Google introduced its upcoming Android operating system Android Lollypop. One of the key focus of this event was Android Lollypop and material design. Google has made a huge investment in bringing life to design by introducing a completely new design philosophy for visual, motion, and user interaction. They call it material design!</p>
<p>Although Android is one among leading mobile operating system, it was falling behind its competitor iOS when it comes to visual design. Apple’s design first approach provides rich and eases to use to experience for smartphone users.</p>
<p>Google’s material design certainly a footstep, towards improvising platform design and to provide a rich user experience with the visual language.</p>
<p>Check out Google’s <a href=""http://www.google.com/design/spec/material-design/introduction.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><strong>new website</strong></a> that helps application designers and developers to learn and adopt material design principles. Here, you will find all the resources that help to understand the key elements of material design.</p>
<p>It covers the various topics such as introduction to available android visual components and layouts, platform design guidelines and recommendation, usage of fonts, enabling different accessibility features, patterns, and user actions. Hope to see some appealing Android L applications soon on Google Play!</p>
<div class=""wp-video"" style=""width: 640px;""><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->
<video class=""wp-video-shortcode"" controls=""controls"" height=""360"" id=""video-6362-1"" preload=""metadata"" width=""640""><source src=""http://material-design.storage.googleapis.com/videos/animations-meaningfultransitions-hierarchical_transitions_topLevel_large_xhdpi.webm?_=1"" type=""video/webm""/><a href=""http://material-design.storage.googleapis.com/videos/animations-meaningfultransitions-hierarchical_transitions_topLevel_large_xhdpi.webm"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://material-design.storage.googleapis.com/videos/animations-meaningfultransitions-hierarchical_transitions_topLevel_large_xhdpi.webm</a></video></div>
<div class=""wp-video"" style=""width: 640px;""><video class=""wp-video-shortcode"" controls=""controls"" height=""360"" id=""video-6362-2"" preload=""metadata"" width=""640""><source src=""http://material-design.storage.googleapis.com/videos/animation-meaningfultransitions-view_contact_large_xhdpi.webm?_=2"" type=""video/webm""/><a href=""http://material-design.storage.googleapis.com/videos/animation-meaningfultransitions-view_contact_large_xhdpi.webm"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://material-design.storage.googleapis.com/videos/animation-meaningfultransitions-view_contact_large_xhdpi.webm</a></video></div>
",0,"standard","post"
"How to Export MBOX into Outlook Format","export-mbox-outlook-format","MBOX/MBX it is one of the recommended file format to export and backup outlook mails.  It is highly useful simple and easy to use file format that allow users to organize and store e-mail messages on hard drive.
","LIVE","<p>MBOX/MBX it is one of the recommended file format to export and backup outlook mails.  It is highly useful simple and easy to use file format that allow users to organize and store e-mail messages on hard drive. MBOX widely accepted by popular emil client applications such as AppleMail, MozzilaMail, Thunderbird, Entourage, Spicebird, Pocomail, Eudora, Mulberry, SeaMonkey, Netscape, ClawsMail, OperaMail, Evolution, Sylpheed, Cone, Mutt and Gnu Mail, etc.</p>
<p>In MBOX format all messages for each mailbox are stored as a single text file in a string of concatenated email messages, starting with the “Form” header of the message. This creates more or less long text file containing one email messages after the other. Many Organizations used this MBOX format as it provides expert feature that make a professional choice. This file format is mostly used for business purpose.</p>
<h1>Corruption Reasons in MBOX File</h1>
<p>Due to accumulate or adding lots of data in mailbox, sometime there is a chance to get corrupted but it is not just the only reason, there are various other possible reasons that may corrupt your data. Once MBOX file is corrupted, we can’t access or read MBOX containing emails.</p>
<p>CorruptedMBOX file are pretty troublesome to agitate. Once corrupted MBOX has to be fastidiously examined and repaired with applicable solution. Its nearly not possible to use a short lived resolution to a corrupted MBOX files and access it. There it’s advised that user to conversion is necessary. Otherwise keep a backup copy of every and each mailbox data. But due to some reasons if you want to switch back to other file format, in such circumstances, you will need a reliable solution that convert their MBOX format to another desired one format.</p>
<p>Many users face various unintentional problems while performing MBOX to Outlook conversion. It can be an unintentional changes to file, malfunctioning in software, corruption in MBOX files, virus invasions, etc. Below are some of the foremost reasons that may corrupt  a MBOX backup file.</p>
<ul>
<li>Corruption in Thunderbird Profile</li>
<li>Malicious Virus attacks on MBOX file</li>
<li>Corruption due to email clients application, can also corrupt mails during execution time or not open properly</li>
<li>Sometime the tool is used by a person contains the issues which corrupt PDF file during the saving process.</li>
<li>In numerous circumstances like –high voltage or power fluctuation, hard disk corruption</li>
</ul>
<p>Below are some of the typical errors messages shown to by the email client application perpetually indicates regarding the failure of a MBOX file</p>
<ul>
<li>Damaged MBOX file or corruption in email messages</li>
<li>Corruption occurs email opening due to Thunderbird crash</li>
<li>Error opening emails</li>
<li>Missing header</li>
<li>Errors in the MBOX format</li>
<li>Error processing emails</li>
<li>The file contains invalid coding</li>
<li>Delivering messages to MBOXCL2 format mailboxes with MBOXO or MBOXRD tools will corrupt the mailbox, rendering all subsequently delivered messages</li>
</ul>
<p>If you are struggling to transfer mails or having suspicious problems, you may still be able to recover/repair it by using a reliable MBOX to PST converter tool that can restore various types of corrupted MBOX problems. There are various tools out there in market, but my pick is IBID Info MBOX to PST converter tool.</p>
<h2>Recover Message from Corrupt MBOX Folder</h2>
<p>In the course of this article, we will see some of the steps that help you to resolve MBOX file corruption related issues. In short tips to recover and repair MBOX/MBX.</p>
<p>First step towards recovering MBOX file is to understand the basic structure of MBOX file. MBOX file stores their data in one single file so number of times the size of MBOX file can become exceeding or become over size. Any types of corruption in this MBOX file may effect the ability of accessing or opening individual messages or open all folder.</p>
<p>If MBOX file is not badly corrupted you can work around the problem by deleting the index folder or compact the folder or moving all messages another one folder. Like replace corrupt folder to fresh one folder but what to do when this trick doesn’t work and you cannot recover all your messages.</p>
<p>Download <a href=""http://www.ibidinfo.com/product/mbox-to-pst-converter.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">IBID Info MBOX to Outlook Converter</a> tool and repair MBOX Free with this.IBID Info MBOX to PST Converter software, makes corrupted MBOX file recovery effortless. This works as one of the reliable tools with a better success rate. This online utility supports the file repairing process of any format of MBOX file like MBOXO, MBOXRD, &amp;MBOXCL2 etc.</p>
<p>Highlights of IBID Info MBOX Outlook Converter</p>
<ol>
<li>Fix all of the problem and repair corrupt MBOX file make accessible in MS Outlook when you perform secure conversion of MBOX to PST format.</li>
<li>Fixes all issues and convert MBOX file to PST, MSG and EML in batch</li>
<li>Preserves the original formatting of email messages.</li>
<li>Convert emails with attachments and merge various MBOX file to single PST</li>
</ol>
<p>Follow though the quick steps for converting MBOX to PST format.</p>
<ol>
<li>Choose a MBOX file</li>
<li>You can select any of MBOX/MacMBOX/MBX/AppleMail files to be convert into PST Format</li>
<li>Add MBOX file</li>
<li>Preview data of selected MBOX file</li>
<li>Export MBOX to PST format</li>
</ol>
",0,"standard","post"
"Flipkart Big Billion Sale, Big Billion Mess And Now Apologies","flipkart-big-billion-sale-big-billion-mess-now-apologies","With lot of hype and full of front page advertisement Flipkart introduced &#8220;BIG BILLION SALE&#8221; on 6th October 2014. This is possibly&hellip;
","LIVE","<p>With lot of hype and full of front page advertisement Flipkart introduced <strong>“BIG BILLION SALE” on 6th October 2014</strong>. This is possibly one of the bigger ever sale arrangement ever made by any online retailer. Above all the big shot arrangement, the e-commerce giant failed to stand on customer expectation. Many of the happy indian Flipkart customer turned into disappointment with various problem like unexpected price hike on the products, unplanned outage of server due to heavy traffic, transaction failures.</p>
<p>This is indeed one of the ever shocking mistake that any e-retailer can think of. After all frustrations, today Flipkart apologize its customers over email. Checkout the email copy below.</p>
<blockquote><p>Dear Customer, </p>
<p>Yesterday was a big day for us. And we really wanted it to be a great day for you.	But at the end of the day, we know that your experience was less than pleasant. We did not live up to the promises we made and for that we are really and truly sorry. </p>
<p>It took enormous effort from everyone at Flipkart, many months of preparation and pushing our capabilities and systems to the limit to be able to create this day. We were looking at fulfilling the dreams of millions of Indian consumers through deals and offers we had painstakingly put together for months. </p>
<p>And though we saw unprecedented interest in our products and traffic like never before, we also realized that we were not adequately prepared for the sheer scale of the event. We didn’t source enough products and deals in advance to cater to your requirements. To add to this, the load on our server led to intermittent outages, further impacting your shopping experience on our site. </p>
<p>An unprecedented 1.5 million people shopped at Flipkart yesterday. While we stand humbled by the sheer faith that such a large number of customers have shown in us, we are unhappy that we were unable to live up to the expectations of millions more who wanted to buy from us yesterday. </p>
<p>And this is not acceptable to us. </p>
<p>Delighting you, and every single one of our customers, is absolutely the top most priority for Flipkart and we have worked very hard over the last seven years to earn your trust. Yesterday, we failed that trust. We have learnt some valuable lessons from this and have started working doubly hard to address all the issues that cropped up during this sale. </p>
<p>Price Changes As we were preparing various deals and promotional pricing in the lead up to the sale, the pricing of several products got ​changed to their non-discounted rates for a few hours​. We realise that this breaks the trust our customers have put in us. We are truly sorry for this and will ensure that this never happens again. </p>
<p>Out-of-stock Issues We ran out of the stock for many products within a few minutes (and in some cases, seconds) of the sale going live. For example, most of our special deals were sold out as soon as they went live. We had ensured availability, anywhere from hundreds to a few lakh units for various products, but it was nowhere near the actual demand. We promise to plan much better for future promotions and ensure that we minimise the out-of-stock issues. </p>
<p>Cancellations We had large number of people buying specific products simultaneously. This led to some instances of an order getting over-booked for a product that was sold out just a few seconds ago. We are working round-the-clock to ensure availability of additional units for these products and will do our level best to ensure that we minimise any cancellations. </p>
<p>Website Issues ​We realise that the shopping experience for many of you was frustrating due to errors and unavailability of the website at times. We had deployed nearly 5000 servers and had prepared for 20 times the traffic growth – but the volume of traffic at different times of the day was much higher than this. We are continuing to significantly scale up all our back end systems so that we do a much, much better job next time. </p>
<p>Everything that we have achieved at Flipkart is purely on the basis of our customer’s trust and faith. This is why we come to work each day and continue to remain extremely passionate about building the best possible customer experience for Indian consumers. We failed to live up to this promise yesterday and would like to apologise once again to every single customer for our failure. </p>
<p>Thank you.<br/>
Sachin and Binny
</p></blockquote>
",0,"standard","post"
"How to Use TestFairy Command Line Upload Script","testfairy-command-line-upload-script","TestFairy is an android application beta testing and deployment platform. Read TestFairy platform features and detailed description here.&hellip;
","LIVE","<p class=""entry-title"">TestFairy is an android application beta testing and deployment platform. Read TestFairy platform features and detailed description <a href=""http://stacktips.com/android/testfairy-android-app-beta-testing-platform"" target=""_blank""><strong>here</strong>.</a></p>
<p class=""entry-title"">As you upload a build to TestFairy, its process on the uploaded build and do some dynamic code injection. During the process, it forgets that the build was signed with a keystore. Before the build is made available for beta testers to download, TestFairy sign your build with a keystore key of its own. This will result in your application not working properly for the services that like Facebook, Google Map, In-App Purchases, Google Cloud Messaging (GCM) etc.</p>
<p>Here is the workaround!! Instead of you just uploading your build to TestFairy, you can use the command line uploader script mentioning your keystore details. In this post, we’ll see the configurations and how to execute test fairy command line uploader script. This will be helpful for integrating bamboo, Jenkins or other CI build automation tools.</p>
<h3>1. Download TestFairy Command Line Upload Script</h3>
<p>Let us download the TestFairy command line upload script from <strong><a href=""https://github.com/testfairy/command-line-uploader"" rel=""nofollow noopener noreferrer"" target=""_blank"">GitHub</a>.</strong>  Once you have the <code>testfairy-upload.sh</code> the file you can change the following parameters as per your project configurations.</p>
<pre class=""prettyprint""># Put your TestFairy API_KEY here. Find it in your TestFairy account settings.
TESTFAIRY_API_KEY=""Put your TestFairy API key here""

# Your Keystore, Store pass and Alias, the ones you use to sign your app.
KEYSTORE=build-dir/MyProject/keystore/myapp.keystore
STOREPASS=android
ALIAS=myapp

# Tester Groups that will be notified when the app is ready. Setup groups in your TestFairy account testers page.
# This parameter is optional, leave empty if not required
TESTER_GROUPS=""Distribution Group Name""

# Comment text will be included in the email sent to testers
COMMENT=""Put your update comment here""

# locations of various tools
CURL=/usr/bin/curl
ZIP=/usr/bin/zip
KEYTOOL=/usr/bin/keytool
ZIPALIGN=/Applications/adt-bundle-mac-x86_64-20130917/sdk/build-tools/19.1.0/zipalign
JARSIGNER=/usr/bin/jarsigner
</pre>
<h3>2. Executing Command Line Upload Script</h3>
<pre class=""prettyprint"">$ chmod a+x testfairy-upload.sh

$ ./testfairy-upload.sh bin/MyApp.apk
</pre>
<p>If the script execute successfully, you will see the output in the code</p>
<pre class=""prettyprint"">Uploading bin/MyApp.apk to TestFairy.. OK!
Downloading instrumented APK.. OK!
Re-signing APK file.. jar signed.

Warning:
No -tsa or -tsacert is provided and this jar is not timestamped. Without a timestamp, users may not be able to validate this jar after the signer certificate's expiration date (2283-11-17) or after any future revocation date.
OK!
Uploading signed APK to TestFairy.. OK!

The build was successfully uploaded to TestFairy and is available at:
https://app.testfairy.com/projects/6521-myapp/builds/142823
</pre>
<p>The above code works fine and build getting uploaded to TestFairy. But there is one problem, if you are uploading build from CI tool, you would like to see the comments from developers for each build. In such case, you have to pass another command line parameter containing the release comment. This release comment will be sent over invitation email.</p>
<pre class=""prettyprint"">#!/bin/sh

UPLOADER_VERSION=1.09

# Put your TestFairy API_KEY here. Find it in your TestFairy account settings.
TESTFAIRY_API_KEY=""Put your TestFairy API key here""

# Your Keystore, Storepass and Alias, the ones you use to sign your app.
KEYSTORE=build-dir/MyProject/keystore/myapp.keystore
STOREPASS=android
ALIAS=myapp

# Tester Groups that will be notified when the app is ready. Setup groups in your TestFairy account testers page.
# This parameter is optional, leave empty if not required
TESTER_GROUPS=""Distribution Group Name""

# Should email testers about new version. Set to ""off"" to disable email notifications.
NOTIFY=""on""

# If AUTO_UPDATE is ""on"" all users will be prompt to update to this build next time they run the app
AUTO_UPDATE=""off""

# The maximum recording duration for every test. 
MAX_DURATION=""10m""

# Is video recording enabled for this build 
VIDEO=""on""

# Add a TestFairy watermark to the application icon?
ICON_WATERMARK=""on""

# Comment text will be included in the email sent to testers
COMMENT=""New Build""

# locations of various tools
CURL=/usr/bin/curl
ZIP=/usr/bin/zip
KEYTOOL=/usr/bin/keytool
ZIPALIGN=/Applications/adt-bundle-mac-x86_64-20130917/sdk/build-tools/19.1.0/zipalign
JARSIGNER=/usr/bin/jarsigner

SERVER_ENDPOINT=http://app.testfairy.com

usage() {
	echo ""Usage: testfairy-upload.sh bin/TennisTV.apk""
	echo
}
	
verify_tools() {

	# Windows users: this script requires zip, curl, and sed. If not installed please get from http://cygwin.com/
	
	# Check 'zip' tool
	${ZIP} -h &gt;/dev/null
	if [ $? -ne 0 ]; then
		echo ""Could not run zip tool, please check settings""
		exit 1
	fi
	
	# Check 'curl' tool
	${CURL} --help &gt;/dev/null
	if [ $? -ne 0 ]; then
		echo ""Could not run curl tool, please check settings""
		exit 1
	fi
	
	OUTPUT=$( ${JARSIGNER} -help 2&gt;&amp;1 | grep ""verify"" )
	if [ $? -ne 0 ]; then
		echo ""Could not run jarsigner tool, please check settings""
		exit 1
	fi
	
	# Check 'zipalign' tool
	OUTPUT=$( ${ZIPALIGN} 2&gt;&amp;1 | grep -i ""Zip alignment"" )
	if [ $? -ne 0 ]; then
		echo ""Could not run zipalign tool, please check settings""
		exit 1
	fi

	OUTPUT=$( ${KEYTOOL} -help 2&gt;&amp;1 | grep ""keypasswd"" )
	if [ $? -ne 0 ]; then
		echo ""Could not run keytool tool, please check settings""
		exit 1
	fi
}

verify_settings() {
	if [ -z ""${TESTFAIRY_API_KEY}"" ]; then
		usage
		echo ""Please update API_KEY with your private API key, as noted in the Settings page""
		exit 1
	fi

	if [ -z ""${KEYSTORE}"" -o -z ""${STOREPASS}"" -o -z ""{$ALIAS}"" ]; then
		usage
		echo ""Please update KEYSTORE, STOREPASS and ALIAS with your jar signing credentials""
		exit 1
	fi

	# verify KEYSTORE, STOREPASS and ALIAS at once
	OUTPUT=$( ${KEYTOOL} -list -keystore ""${KEYSTORE}"" -storepass ""${STOREPASS}"" -alias ""${ALIAS}"" 2&gt;&amp;1 )
	if [ $? -ne 0 ]; then
		usage
		echo ""Please check keystore credentials; keytool failed to verify storepass and alias""
		exit 1
	fi
}

if [ $# -ne 2 ]; then
	usage
	exit 1
fi

# before even going on, make sure all tools work
verify_tools
verify_settings

APK_FILENAME=$1
if [ ! -f ""${APK_FILENAME}"" ]; then
	usage
	echo ""Can't find file: ${APK_FILENAME}""
	exit 2
fi

COMMENT=$2

# temporary file paths
DATE=`date`
TMP_FILENAME=.testfairy.upload.apk
ZIPALIGNED_FILENAME=.testfairy.zipalign.apk
rm -f ""${TMP_FILENAME}"" ""${ZIPALIGNED_FILENAME}""

/bin/echo -n ""Uploading ${APK_FILENAME} to TestFairy.. ""
JSON=$( ${CURL} -s ${SERVER_ENDPOINT}/api/upload -F api_key=${TESTFAIRY_API_KEY} -F apk_file=""@${APK_FILENAME}"" -F icon-watermark=""${ICON_WATERMARK}"" -F video=""${VIDEO}"" -F max-duration=""${MAX_DURATION}"" -F comment=""${COMMENT}"" -A ""TestFairy Command Line Uploader ${UPLOADER_VERSION}"" )

URL=$( echo ${JSON} | sed 's/\\//\//g' | sed -n 's/.*""instrumented_url""\s*:\s*""\([^""]*\)"".*/\1/p' )
if [ -z ""${URL}"" ]; then
	echo ""FAILED!""
	echo 
	echo ""Upload failed, please check your settings""
	exit 1
fi

URL=""${URL}?api_key=${TESTFAIRY_API_KEY}""

echo ""OK!""
/bin/echo -n ""Downloading instrumented APK.. ""
${CURL} -L -o ${TMP_FILENAME} -s ${URL}

if [ ! -f ""${TMP_FILENAME}"" ]; then
	echo ""FAILED!""
	echo
	echo ""Could not download APK back from the server, please contact support@testfairy.com""
	exit 1
fi

echo ""OK!""

/bin/echo -n ""Re-signing APK file.. ""
${ZIP} -qd ${TMP_FILENAME} 'META-INF/*'
${JARSIGNER} -keystore ""${KEYSTORE}"" -storepass ""${STOREPASS}"" -digestalg SHA1 -sigalg MD5withRSA ${TMP_FILENAME} ""${ALIAS}""
${JARSIGNER} -verify ${TMP_FILENAME} &gt;/dev/null
if [ $? -ne 0 ]; then
	echo ""FAILED!""
	echo
	echo ""Jarsigner failed to verify, please check parameters and try again""
	exit 1
fi

${ZIPALIGN} -f 4 ${TMP_FILENAME} ${ZIPALIGNED_FILENAME}
rm -f ${TMP_FILENAME}
echo ""OK!""

/bin/echo -n ""Uploading signed APK to TestFairy.. ""
JSON=$( ${CURL} -s ${SERVER_ENDPOINT}/api/upload-signed -F api_key=${TESTFAIRY_API_KEY} -F apk_file=@${ZIPALIGNED_FILENAME} -F testers-groups=""${TESTER_GROUPS}"" -F auto-update=""${AUTO_UPDATE}"" -F notify=""${NOTIFY}"")
rm -f ${ZIPALIGNED_FILENAME}

URL=$( echo ${JSON} | sed 's/\\//\//g' | sed -n 's/.*""build_url""\s*:\s*""\([^""]*\)"".*/\1/p' )
if [ -z ""$URL"" ]; then
	echo ""FAILED!""
	echo
	echo ""Build uploaded, but no reply from the server. Please contact support@testfairy.com""
	exit 1
fi

echo ""OK!""
echo
echo ""Build was successfully uploaded to TestFairy and is available at:""
echo ${URL}
</pre>
<p>Now, we can run the above script by passing two arguments. One for the APK path and other is for comment for your build. This comment will be sent to the tester over email.</p>
<pre>$ chmod a+x testfairy-upload.sh

$ ./testfairy-upload.sh bin/MyApp.apk ""$@Your build update comment here""
</pre>
",0,"standard","post"
"Android Application UI Design Patterns","android-application-ui-design-patterns","User Interface design patterns are the design best practices, acts as a template to solve common problems while designing application. A design patterns acts as handbook for designers while representing the product ideas into visual components.
","LIVE","<h2>What are design patterns?</h2>
<p>User Interface design patterns are the design best practices, acts as a template to solve common problems while designing the application.</p>
<ol>
<li>A design pattern acts as a handbook for designers while representing the product ideas into visual components.</li>
<li>Do not reinvent the wheel, when something is proven or adopted by most of them</li>
<li>Design pattern should not affect your brand. Make your brand extension to shine.</li>
<li>Not all applications are equal, don’t get bound in design patterns and forget creativity.</li>
<li> Especially while designing for mobile application, platform guidelines have a significant impact on user experience. Inventing your own design with the motive of uniqueness may increase the learning curve to use.</li>
</ol>
<h2>Android design challenges</h2>
<p>Designing for Android is always been a nightmare. Due to the raw nature of the Android platform, Google constantly changing the platform user interface guidelines and practices. Also designing for Android means designing for multiple form factors. We have outlined few of the challenges while designing for android application</p>
<ol>
<li><strong>iOS first approach</strong>– Apple’s iOS has some strict guidelines and popular in US and UK market, so it is always been the first priority for making money. And the Android application is mostly meant just for market presence rather than a serious money-making business. Which means that all the designs made for iOS is meant to be reused without investing on designing something for Android. This approach might save you time up-front, but you run the very real risk of creating inconsistent apps that alienate users.</li>
</ol>
<ol start=""2"">
<li><strong>Support for multiple screen sizes increases complexity</strong> – As Android is an open source operating system, there are numerous number of devices available with different screen sizes and densities. Android phones are classified into 5 different categories. They are ldpi, mdpi, hdpi, xhdpi and xxhdpi.</li>
</ol>
<ol start=""3"">
<li><strong>Many OS versions and difficult to ignore old ones</strong> – While designing mobile application, we must be aware of the platform capabilities. Using Android 4.0 you might be able to do some cool screen transitions, which may not be possible to achieve on lower android phones. Due to lack of platform support, you have to compromise certain features or find for an best alternative. Below infographics will show you the matrix of device and os distribution.</li>
</ol>
<h2>Device and OS matrix</h2>
<p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""Andorid OS market distribution"" class=""alignnone size-full wp-image-6061"" height=""669"" loading=""lazy"" src=""/media/uploads/articles/257/Andorid-OS-market-distribution.png"" srcset="""" width=""575""/></a></center><center><a href=""http://stacktips.com"" target=""_self""><img alt=""Screen Shot 2014-09-24 at 9.49.03 PM"" class=""alignnone size-full wp-image-6058"" height=""537"" loading=""lazy"" sizes=""(max-width: 830px) 100vw, 830px"" src=""/media/uploads/articles/257/Screen-Shot-2014-09-24-at-9.49.03-PM.png"" srcset="""" width=""830""/></a></center></p>
<h2>Quick tips</h2>
<ol>
<li>Platform guidelines are designed with reasons. Making too much of customization will not just cost time and effort, it can create confusion to users.</li>
<li>Don’t be just fooled by platform guidelines. They may not make sense for your brand and app requirements. So while designing your application you must understand platform guidelines before deriving your design.</li>
<li>Don’t leave your branding behind.</li>
<li>Know all the UI controls and widgets available on all platforms. For example, if you are creating a widget to select a date in iOS, It might appear differently on Android. You must be able to judge the key difference between platforms.</li>
</ol>
<p>We are publishing series of tutorials to get you familiar with android platform policy and guidelines. Stay tuned until we publish them all.</p>
",0,"standard","post"
"Android RecyclerView Example","android-recyclerview-example","Google&#8217;s upcoming operating system named Android L looks very promising. It is highly focused on rich user experience and what they called it as material design. In this example we will take a look at the new UI widget called RecyclerView.","LIVE","<h3 class=""""><span id=""1_What_isRecyclerView"">What is&nbsp;RecyclerView?</span></h3>
<p>In Android 5.0 Lollipop, Android introduced RecyclerView widget. RecyclerView is flexible and efficient version of ListView. It is an container for rendering larger data set of views that can be recycled and scrolled very efficiently. RecyclerView is like traditional <a href=""/articles/android-listview-tutorial"">ListView</a> widget, but with more flexibility to customizes and optimized to work with larger datasets.&nbsp;It uses a subclass of <code>RecyclerView.Adapter</code> for providing views that represent items in a data set.</p>
<p>Android SDK doesn’t includes the <code>RecyclerView</code> class. You need to add the&nbsp;following support library graddle dependency to project&nbsp;<code>build.graddle</code> file.</p>
<pre class=""prettyprint lang-java"">compile 'com.android.support:recyclerview-v7:24.0.0'
</pre>
<p>This guide explains how to use and customize RecyclerView in Android applications.</p>
<h3 class=""""><span id=""2_RecyclerView_Example"">RecyclerView Example</span></h3>
<p>In the course of this&nbsp;example we will download the&nbsp;data from JSON API, parse and display the items on RecyclerView. As you can notice in the following image, we will be using&nbsp;both&nbsp;RecyclerView and <a href=""/articles/android-cardview-example"">CardView</a> for creating the App UI.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""android-recyclerview-example"" class=""aligncenter size-full wp-image-11994"" height=""600"" loading=""lazy"" src=""/media/uploads/articles/258/Android-RecyclerView-Example-1.png"" srcset="""" width=""338""></a></p>
<p>&nbsp;</p>
<p>Following steps are required to complete the example:</p>
<ul>
<li>Create a new Android Application and add the required graddle dependencies</li>
<li>Layout activity and add RecyclerView and ProgressBar</li>
<li>Layout the RecyclerView row &nbsp;item using&nbsp;CardView widget</li>
<li>Create a&nbsp;Custom Adapter for&nbsp;RecyclerView</li>
<li>Create main Activity to initialize UI, make HTTP Server request&nbsp;and render data on RecyclerView</li>
<li>Responding to&nbsp;RecyclerView click event</li>
</ul>
<h3 class=""""><span id=""21CreatingAndroid_Project"">Creating&nbsp;Android Project</span></h3>
<p>Let us begin with creating a new Android project in Android Studio. After the project is created, open app&nbsp;<code>build.graddle</code> file and add the following dependency libraries.</p>
<pre class=""prettyprint lang-java"">dependencies {
&nbsp; &nbsp; compile 'com.android.support:recyclerview-v7:24.0.0'
    compile 'com.android.support:cardview-v7:24.0.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    // ...
}</pre>
<p>Notice that, we have added RecyclerView, <a href=""/articles/android-cardview-example"">CardView</a> support libraries and <a href=""/articles/how-to-use-picasso-library-in-android"">Picasso</a> dependency module.</p>
<p>Picasso is an Open Source image loader&nbsp;library&nbsp;created and maintained by Square. It is among the powerful image download and caching <a href=""http://stacktips.com/android/android-third-party-libraries-sdks"" title=""Android third party libraries and SDK’s"">library for Android.</a></p>
<h4><span id=""Adding_Internet_Permission"">Adding Internet Permission:</span></h4>
<p>You might be aware that, Android application must declare all the permissions that are required for application. As we need to download the data form server, we need to add the <code>INTERNET</code> permission. Declare the following permission in <code>AndroidManifest.xml</code> file.</p>
<pre class=""prettyprint lang-xml"">&lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;
</pre>
<h3 class=""""><span id=""22_Declaring_Activity_Layout"">Declaring RecyclerView Layout</span></h3>
<p>Let us&nbsp;now define the layout for Activity. We will add a RecyclerView and ProgressBar inside a <a href=""/articles/android-relativelayout-example"">RelativeLayout</a>. The progress bar will be displayed while the data data from REST API is being downloaded.</p>
<p>Create a new file <code>activity_main.xml</code> inside layout resource folder and paste the following snippets.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout
    xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/activity_main""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""#f1f1f1""
    android:padding=""12dp""
    tools:context=""com.stacktips.recyclerview.MainActivity""&gt;

    &lt;android.support.v7.widget.RecyclerView
        android:id=""@+id/recycler_view""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:layout_centerInParent=""true""/&gt;

    &lt;ProgressBar
        android:id=""@+id/progress_bar""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_centerInParent=""true""/&gt;

&lt;/RelativeLayout&gt;

</pre>
<h3 class=""""><span id=""23_RecyclerView_Row_Layout"">RecyclerView Row Layout</span></h3>
<p>In the example, each row item is represented by a <code>CardView</code> that hosts a RelativeLayout with&nbsp;an <code>ImageView</code>&nbsp;for the thumbnail&nbsp;and a <code>TextView</code>&nbsp;title. This layout resides in&nbsp;the file list_row.xml.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;android.support.v7.widget.CardView
    xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:cardview=""http://schemas.android.com/apk/res-auto""
    android:layout_width=""match_parent""
    android:layout_height=""wrap_content""
    android:layout_marginBottom=""5dp""
    cardview:cardCornerRadius=""2dp""
    cardview:cardElevation=""3dp""
    cardview:cardUseCompatPadding=""true""&gt;

    &lt;RelativeLayout
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""&gt;

        &lt;ImageView
            android:id=""@+id/thumbnail""
            android:layout_width=""match_parent""
            android:layout_height=""180dp""
            android:layout_alignParentTop=""true""
            android:scaleType=""centerCrop""
            android:src=""@drawable/placeholder""/&gt;

        &lt;TextView
            android:id=""@+id/title""
            android:layout_width=""match_parent""
            android:layout_height=""wrap_content""
            android:layout_below=""@+id/thumbnail""
            android:layout_centerVertical=""true""
            android:layout_marginLeft=""12dp""
            android:maxLines=""3""
            android:padding=""8dp""
            android:textAppearance=""@style/TextAppearance.AppCompat.Headline""
            android:textColor=""#444""
            android:textSize=""18dp""
            android:textStyle=""bold""/&gt;

    &lt;/RelativeLayout&gt;
&lt;/android.support.v7.widget.CardView&gt;
</pre>
<h3 class=""""><span id=""24_Creating_RecyclerView_Adapter"">Creating RecyclerView Adapter</span></h3>
<p>Android RecyclerView&nbsp;includes special kind of adapter which works pretty much same as traditional Android&nbsp;adapters but with additional functionalities.It uses a subclass of <code>RecyclerView.Adapter</code> for providing views that represent items in a data set.</p>
<p>The additional functionalities of RecyclerView.Adapter are:</p>
<ul>
<li>It adds two new methods like <code>onCreateViewHolder()</code> and <code>onBindViewHolder()</code> to organize the code. You must override these two methods for inflate the view and to bind data to the view</li>
<li>Implements a ViewHolder by default. Conceptually <code>RecyclerView.ViewHolder</code> works same as the ViewHolder design pattern which we have been using with other Adapters</li>
<li>Takes care of the overhead of recycling&nbsp;and&nbsp;gives better performance and scrolling</li>
</ul>
<p>Create a new class&nbsp;MyRecyclerViewAdapter.class and&nbsp;copy the following snippets.</p>
<pre class=""prettyprint lang-java"">public class MyRecyclerViewAdapter extends RecyclerView.Adapter&lt;MyRecyclerViewAdapter.CustomViewHolder&gt; {
    private List&lt;FeedItem&gt; feedItemList;
    private Context mContext;

    public MyRecyclerViewAdapter(Context context, List&lt;FeedItem&gt; feedItemList) {
        this.feedItemList = feedItemList;
        this.mContext = context;
    }

    @Override
    public CustomViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.list_row, null);
        CustomViewHolder viewHolder = new CustomViewHolder(view);
        return viewHolder;
    }

    @Override
    public void onBindViewHolder(CustomViewHolder customViewHolder, int i) {
        FeedItem feedItem = feedItemList.get(i);

        //Render image using Picasso library
        if (!TextUtils.isEmpty(feedItem.getThumbnail())) {
            Picasso.with(mContext).load(feedItem.getThumbnail())
                    .error(R.drawable.placeholder)
                    .placeholder(R.drawable.placeholder)
                    .into(customViewHolder.imageView);
        }

        //Setting text view title
        customViewHolder.textView.setText(Html.fromHtml(feedItem.getTitle()));
    }

    @Override
    public int getItemCount() {
        return (null != feedItemList ? feedItemList.size() : 0);
    }

    class CustomViewHolder extends RecyclerView.ViewHolder {
        protected ImageView imageView;
        protected TextView textView;

        public CustomViewHolder(View view) {
            super(view);
            this.imageView = (ImageView) view.findViewById(R.id.thumbnail);
            this.textView = (TextView) view.findViewById(R.id.title);
        }
    }
}
</pre>
<p>Notice that we have created an private ViewHolder class. The ViewHolder class contains the reference to the each of the ui widget on the row.</p>
<p>The <code>FeedItem</code> class is an model class that holds the parsed data retrieved from JSON API. Add a new new file <code>FeedItem.java</code>&nbsp;class in&nbsp;your project source folder and add the following.</p>
<pre class=""prettyprint lang-java"">public class FeedItem {
    private String title;
    private String thumbnail;

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getThumbnail() {
        return thumbnail;
    }

    public void setThumbnail(String thumbnail) {
        this.thumbnail = thumbnail;
    }
}</pre>
<h3 class=""""><span id=""25_Activity_Using_RecyclerView"">Activity Using RecyclerView</span></h3>
<p>The resulting RecyclerView implementation for this example app consists of MainActivity initialization code. MainActivity creates the mRecyclerView instance, download and parse the data from JSON API, instantiates the adapter and plugs in the adapter to RecyclerView.</p>
<p>The focus of this tutorial is narrow down to RecyclerView, hence it doesn’t include any explanation for&nbsp;download&nbsp;and&nbsp;parse&nbsp;data from server. For learning how to&nbsp;download data from server, you may read&nbsp;<a href=""http://stacktips.com/android/android-networking-tutorial"">Android Networking Tutorial.</a></p>
<p>Once data is downloaded, inside <code>onPostExecute()</code> we are initializing the adapter and setting adapter to RecyclerView&nbsp;instance by just calling <code>setAdapter()</code> method.</p>
<pre class=""prettyprint lang-java"">public class MainActivity extends AppCompatActivity {
    private static final String TAG = ""RecyclerViewExample"";
    private List&lt;FeedItem&gt; feedsList;
    private RecyclerView mRecyclerView;
    private MyRecyclerViewAdapter adapter;
    private ProgressBar progressBar;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mRecyclerView = (RecyclerView) findViewById(R.id.recycler_view);
        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        progressBar = (ProgressBar) findViewById(R.id.progress_bar);

        String url = ""http://stacktips.com/?json=get_category_posts&amp;slug=news&amp;count=30"";
        new DownloadTask().execute(url);
    }

    public class DownloadTask extends AsyncTask&lt;String, Void, Integer&gt; {

        @Override
        protected void onPreExecute() {
            progressBar.setVisibility(View.VISIBLE);
        }

        @Override
        protected Integer doInBackground(String... params) {
            Integer result = 0;
            HttpURLConnection urlConnection;
            try {
                URL url = new URL(params[0]);
                urlConnection = (HttpURLConnection) url.openConnection();
                int statusCode = urlConnection.getResponseCode();

                // 200 represents HTTP OK
                if (statusCode == 200) {
                    BufferedReader r = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
                    StringBuilder response = new StringBuilder();
                    String line;
                    while ((line = r.readLine()) != null) {
                        response.append(line);
                    }
                    parseResult(response.toString());
                    result = 1; // Successful
                } else {
                    result = 0; //""Failed to fetch data!"";
                }
            } catch (Exception e) {
                Log.d(TAG, e.getLocalizedMessage());
            }
            return result; //""Failed to fetch data!"";
        }

        @Override
        protected void onPostExecute(Integer result) {
            progressBar.setVisibility(View.GONE);

            if (result == 1) {
                adapter = new MyRecyclerViewAdapter(MainActivity.this, feedsList);
                mRecyclerView.setAdapter(adapter);
            } else {
                Toast.makeText(MainActivity.this, ""Failed to fetch data!"", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void parseResult(String result) {
        try {
            JSONObject response = new JSONObject(result);
            JSONArray posts = response.optJSONArray(""posts"");
            feedsList = new ArrayList&lt;&gt;();

            for (int i = 0; i &lt; posts.length(); i++) {
                JSONObject post = posts.optJSONObject(i);
                FeedItem item = new FeedItem();
                item.setTitle(post.optString(""title""));
                item.setThumbnail(post.optString(""thumbnail""));
                feedsList.add(item);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
}
</pre>
<h3 class=""""><span id=""3Handle_RecyclerView_Click_Event"">Handle RecyclerView Click Event</span></h3>
<p>Handling click event on RecyclerView is not as sweet as handling click listener in ListView or GridView. Android RecyclerView doesn’t provide any built in listeners or handy way of handling click events.</p>
<p>Let us declare a interface that specifies listener’s behavior. When user clicks on the RecyclerView the listener will return the FeedItem for the selected row.</p>
<pre class=""prettyprint lang-java"">public interface OnItemClickListener {
    void onItemClick(FeedItem item);
}
</pre>
<p>Now turn on to adapter and declare an instance variable of OnItemClickListener along with getter and setter methods.</p>
<pre class=""prettyprint lang-java"">private OnItemClickListener onItemClickListener;
public OnItemClickListener getOnItemClickListener() {
    return onItemClickListener;
}

public void setOnItemClickListener(OnItemClickListener onItemClickListener) {
    this.onItemClickListener = onItemClickListener;
}
</pre>
<p>In activity class, let set the click listener to adapter by calling setOnItemClickListener() method.</p>
<pre class=""prettyprint lang-java"">adapter.setOnItemClickListener(new OnItemClickListener() {
    @Override
    public void onItemClick(FeedItem item) {
        Toast.makeText(MainActivity.this, item.getTitle(), Toast.LENGTH_LONG).show();

    }
});
</pre>
<p>Now, attach the View.OnClickListener to each of the view you want to handle click. Add the following snippet to onBindViewHolder of the RecyclerView.Adapter. When ImageView or TextView is clicked, we will receive the event back to the caller activity.</p>
<pre class=""prettyprint lang-java"">View.OnClickListener listener = new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        onItemClickListener.onItemClick(feedItem);
    }
};
customViewHolder.imageView.setOnClickListener(listener);
customViewHolder.textView.setOnClickListener(listener);</pre>",0,"standard","post"
"Android Service Interview Questions","android-service-interview-questions","In this post you will find set of interview questions and answers on Android Service, IntentService and AlarmService
","LIVE","<h3>1. What is the purposes of Service in Android?</h3>
<p>Android Service is used to perform long running jobs off the UI thread. A typical long running tasks can be periodic downloading of data from internet, saving multiple records into database, perform file I/O, fetching your phone contacts list, etc. For such long running tasks, Service is used to avoid UI lags and makes user experience better.</p>
<h3>2. Explain service lifecycle methods?</h3>
<p>A service can be run by the system, If someone calls Context.startService() or bindService() method.</p>
<ol style=""padding-left: 30px;"">
<li><b>onStartCommand()</b> – This method is called when the service be started by calling startService(). Once this method executes, the service is started and can run in the background indefinitely. If you implement this, it is your responsibility to stop the service when its work is done, by calling stopSelf() or stopService().  If you are defining your service as, bounded service then you don’t need to implement this method.</li>
<li><b>onBind()</b> – You need to override this method, only if you are defining your service as bounded service. This method is called, when another component wants to bind with the service by calling bindService(). In your implementation of this method, you must provide an interface that clients use to communicate with the service, by returning an IBinder. You must always implement this method, but if you don’t want to allow binding, then you should return null.</li>
<li><b>onCreate()</b>– This method is called while the service is first created. Here all the service initialization is done. This method is never called again.</li>
<li><b>onDestroy()</b> – The system calls this method when the service is no longer used and is being destroyed. This method is used to, clean up any resources such as threads, registered listeners, receivers, etc. This is the last call the service receives.</li>
</ol>
<h3>3. What is the difference between bound and unbounded service?</h3>
<ol style=""padding-left: 30px;"">
<li><strong>Bound Service – </strong>Service which call indefinitely in between activity. An Android component may bind itself to a Service using bindservice (). A bound service would run as long as the other application components are bound to it. As soon as they unbind, the service destroys itself.</li>
<li><strong>Unbound Service – </strong>Service which call at the life span of calling activity. In this case, an application component starts the service, and it would continue to run in the background, even if the original component that initiated it is destroyed. For instance, when started, a service would continue to play music in the background indefinitely.</li>
</ol>
<h3>4. What are the different clock types supported for AlarmService?</h3>
<p>Android supports two clock types for alarm service. Once is elapsed real time and other is real time clock (RTC).  Elapsed real time uses the time since device last booted. Real time clock (RTC) uses UTC time for alarm service clock. RTC is most commonly used for setting alarm service in android.</p>
<h3>5. How to define a service in manifest</h3>
<p>All the services  used in the app need to be registered in application Manifest. Services are declared as shown below</p>
<pre class=""prettyprint lang-xml"">&lt;!--Service declared in manifest --&gt;
&lt;service android:name="".HelloService""
android:exported=""false""/&gt;</pre>
<h3>6. How to pass data to an IntentService ?</h3>
<p>You can pass data as bundle to IntentService before you start.</p>
<pre class=""prettyprint lang-java"">Intent intent = new Intent(Intent.ACTION_SYNC, null, this, DownloadService.class);

/* Send optional extras to Download IntentService */
intent.putExtra(""url"", url);
intent.putExtra(""receiver"", mReceiver);
intent.putExtra(""requestId"", 101);

startService(intent);</pre>
<h3>7. What is an alarm service and explain it’s need with real-world example</h3>
<p>Alarm service is used to run tasks periodically at given interval. You can design application like alrm, birthday reminder, or AlarmManager can be used to initiate long running operations such as syncing data from server once a day.   Once an Alarm Started, this will execute until it is stopped explicitly or until device reboots.</p>
<h3>8. How to stop service?</h3>
<p>Bounded service stops itself once it finishes its tasks. But for unbounded service we need to call stopSelf() or stopService() method.</p>
<h3>9. Can an IntentService execute multiple tasks sequentially?</h3>
<p>No. Intent Services are designed to perform one task at single point of time.  However tasks can be queued.</p>
<h3>10. How can we make the AlarmService run forever even after device reboot</h3>
<p>Once you start an AlarmService, it runs forever until your device restarts. Once your device restart, you have to start the service explicitly to run it forever again. You have to register BroadcastReceiver to handle boot event.</p>
<h3>11. What are the key differences between a service and IntentService in Android?</h3>
<table>
<tbody>
<tr>
<th><strong>Service</strong></th>
<th><strong>IntentService</strong></th>
</tr>
<tr>
<td>Service can be used in tasks with no UI, but shouldn’t be too long. If you need to perform long tasks, you must create a new thread with in Service</td>
<td>IntentService can be used in long running tasks usually with no communication to Main Thread. If communication is required, can use Main Thread handler or broadcast intents.</td>
</tr>
<tr>
<td>Service can be started using startService() method</td>
<td>IntentService can be started using startService() method and it triggers onHandleIntent() method.</td>
</tr>
<tr>
<td>Service can be triggered from any thread</td>
<td>IntentService must be triggered from Main Thread</td>
</tr>
<tr>
<td>Service runs in background but it runs on the Main Thread of the application.</td>
<td>IntentService runs on a separate worker thread</td>
</tr>
<tr>
<td>The Service may block the Main Thread of the application.</td>
<td>The IntentService cannot run tasks in parallel. Hence all the consecutive intents will go into the message queue for the worker thread and will execute sequentially.</td>
</tr>
<tr>
<td>You must call stopSelf() or stopService() to stop a service once your its job is done.</td>
<td>IntentService stops itself when it finishes its job so you never have to call stopSelf()</td>
</tr>
</tbody>
</table>
<p> </p>
<p> </p>
",0,"standard","post"
"Android Interview Question Answers For Freshers","android-interview-questions","Here in this post, you will find compiled set of android interview questions and answers. These questions are&hellip;
","LIVE","<p>Here in this post, you will find compiled set of android interview questions and answers. These questions are intended for freshers and android learners. I am on my way publishing the more advance interview questions sets.</p>
<h3>1. When does onResume() method called?</h3>
<p>onResume() method is an activity lifecycle method. This is called when the activity come to foreground. You can override this method in your activity to execute code when activity is started, restarted or comes to foreground.</p>
<h3>2. How to launch an activity in your application?</h3>
<p>For launching an activity, we need to create an explicit intent that defines the activity that we wish to start. In the below code snippet, the first parameter to Intent constructor is the current activity context and the second parameter is your new activity <code>class.startActivity()</code> method can be called on Activity context.</p>
<pre class=""prettyprint lang-java"">Intent intent = new Intent(this, SecondActivity.class);
startActivity(intent);</pre>
<p>If you want to start an activity from fragment</p>
<pre class=""prettyprint lang-java"">Intent intent = new Intent(getActivity(), SecondActivity.class);
getActivity().startActivity(intent);</pre>
<h3>3. How to define an Activity as launcher activity in application Manifest file?</h3>
<p>All the activities used in the application should be defined in application manifest file. For launcher activity you need to define intent filter as shown in the below code snippets.</p>
<pre class=""prettyprint lang-xml"">&lt;activity android:name="".MyActivity""
              android:label=""@string/app_name""&gt;
        &lt;intent-filter&gt;
            &lt;action android:name=""android.intent.action.MAIN"" /&gt;
            &lt;category android:name=""android.intent.category.LAUNCHER"" /&gt;
        &lt;/intent-filter&gt;
    &lt;/activity&gt;
</pre>
<h3>4. What is a ANR ?</h3>
<p>ANR is short for Application Not Responding. Android systems shows this dialog, if application is performing too much of task on main thread and been unresponsive for a long period of time.</p>
<h3>5. What are the measures to avoid application ANR?</h3>
<p>ANR in application is annoying to user. It can be caused due to various reasons. Below are some of the tips to avoid ANR</p>
<ul>
<li>Perform all you long running network or database operation in separate thread</li>
<li>If you have too much of background tasks, then take it off the UI thread. You may use IntentService</li>
<li>Server not responding for longer period can be guilt for ANR. To avoid always define HTTP time out for your all your webs service calls.</li>
<li>Be watchful of infinite loops during your complex calculations</li>
</ul>
<h3>6. What is the difference between a regular .png and a nine-patch image?</h3>
<p>The nine patch images are extension with <code>.9.png</code>. Nine-patch image allows resizing that can be used as background or other image size requirements for the target device. The Nine-patch refers to the way you can resize the image: 4 corners that are unscaled, 4 edges that are scaled in 1 axis, and the middle one that can be scaled into both axes.</p>
<h3>7. How to share text using android share Intent ?</h3>
<p>Share intent is an easy and convenient way of sharing content of your application with other apps.</p>
<pre class=""prettyprint lang-java"">Intent sendIntent = new Intent();
sendIntent.setAction(Intent.ACTION_SEND);
sendIntent.putExtra(Intent.EXTRA_TEXT, ""This is my text to send."");
sendIntent.setType(""text/plain"");
startActivity(sendIntent);
</pre>
<h3>8. What is the use of WebView in android?</h3>
<p>A WebView is an android UI component that displays webpages. It can either display a remote webpage or can also load static HTML data. This encompasses the functionality of a browser that can be integrated to application. WebView uses the WebKit rendering engine to display web pages and includes methods to navigate forward and backward through a history, zoom in and out, etc.</p>
<h3>9. Define different kind of context in android</h3>
<p>Context defines the current state of application or object. Context provides access to things such as creating new activity instance, access databases, start a service, etc. You can get the context by invoking <code>getApplicationContext()</code>, <code>getContext()</code>, <code>getBaseContext()</code> or <code>this</code> when in the activity class.</p>
<pre class=""prettyprint lang-java"">//Creating ui instance
ImageButton button = new ImageButton(getContext());

//creating adapter
ListAdapter adapter = new SimpleCursorAdapter(getApplicationContext(), ...);

//querying content provider
getApplicationContext().getContentResolver().query(uri, ...);

//start activity. Here this means activity context
Intent intent = new Intent(this, SecondActivity.class);
</pre>
<h3>10. What are the different storage methods in android</h3>
<p>Android offers several different options for data persistence.</p>
<ol>
<li><strong>Shared Preferences</strong> – Store private primitive data in key-value pairs. This sometimes gets limited as it offers only key value pairs. You cannot save your own java types.</li>
<li><strong>Internal Storage</strong> – Store private data on the device memory</li>
<li><strong>External Storage</strong> – Store public data on the shared external storage</li>
<li><strong>SQLite Databases</strong> – Store structured data in a private database. You can define many number of tables and can store data like other RDBMS.</li>
</ol>
",0,"standard","post"
"Repeat Alarm Example In Android Using AlarmManager","repeat-alarm-example-in-android","In this tutorial we will learn how to create a repeat alarm example in android using AlarmManager class. AlarmManager is a class in Android which is used access device alarm service. This allow your application to execute certain piece of code on a given scheduled time. This can run outside the lifetime of your application.
","LIVE","

Scheduling and repeating alarms are generally used as a local reminder to notify user about some event. For example, a mobile live TV streaming application can use local reminder to notify users when a specific program starts. Note that, this is different form Server push notification, mainly because it is purely managed by mobile client.
<h2><span id=""1_AlarmManager_in_Android"">1. AlarmManager in Android</span></h2>
<p><code>AlarmManager</code> is a class in Android allows you to access device system alarm service. Using AlarmManager, you can schedule to execute certain piece of code a particular time. Let us dive into details of AlarmManager specifics:</p>
<ul>
<li>AlarmManager runs outside the lifetime of your application. Once an alarm is scheduled, it will invoke even when your application is not running or in sleep mode.</li>
<li>An scheduled alarm will execute unless it is stopped explicitly by calling cancel() method, or until device reboots.</li>
<li>All scheduled alarms will be stopped when device reboots. This means, you need to re-schedule them explicitly when device boot completes.</li>
<li>AlarmManger fires an <code>Intent</code> at given intervals. This can be used along with broadcast receivers to start a service to perform network operations.</li>
<li>AlarmManager is different form java <code>Timer</code> and <code>TimerTask.</code></li>
</ul>
<div class=""wp-alert warning"">Note, You need to take extra care while working with AlarmManager. A poorly designed AlarmManager can drain your device battery.</div>
<h2><span id=""2_Setting_Repeat_Alarm"">2. Setting Repeat Alarm</span></h2>
<p>Android supports two clock types for alarm service; elapsed real time and real time clock (RTC). Elapsed real time uses the time since device last booted. Real time clock (RTC) uses UTC time for alarm service clock. RTC is most commonly used for setting alarm service in android. The following example, using RTC to schedule alarm.</p>
<p>The application using a single activity containing three buttons. One button is for starting an alarm service, another to cancel scheduled alarm. The third button is to start the alarm at specified calendar time. For example, if you have set a time for your birthday reminder. It will invoke at 10:30 PM and will repeat on every 30 mins.</p>
<p>Let us have a look into our activity layout file (my_activity.xml)</p>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:paddingBottom=""@dimen/activity_vertical_margin""
    android:paddingLeft=""@dimen/activity_horizontal_margin""
    android:paddingRight=""@dimen/activity_horizontal_margin""
    android:paddingTop=""@dimen/activity_vertical_margin""
    tools:context="".MyActivity""&gt;

    &lt;TextView
        android:id=""@+id/textView""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_marginBottom=""20dp""
        android:text=""@string/hint""
        android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

    &lt;Button
        android:id=""@+id/startAlarm""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_alignParentLeft=""true""
        android:layout_alignParentStart=""true""
        android:layout_below=""@+id/textView""
        android:layout_marginBottom=""20dp""
        android:text=""Start Alarm Service"" /&gt;

    &lt;Button
        android:id=""@+id/stopAlarm""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_below=""@+id/startAlarm""
        android:layout_marginBottom=""20dp""
        android:text=""Stop Alarm"" /&gt;


    &lt;Button
        android:id=""@+id/stopAlarmAt10""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_below=""@+id/stopAlarm""
        android:text=""Stop Alarm at 10:30"" /&gt;

&lt;/RelativeLayout&gt;
</pre>
<p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""AlarmManager Example in Android"" class=""alignnone size-medium wp-image-5835"" height=""433"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/261/AlarmManager-Example-in-Android-620x433.png"" srcset="""" width=""620""/></a></center></p>
<h2><span id=""3_Defining_Alarm_BroadcastReceiver"">3. Defining Alarm BroadcastReceiver</span></h2>
<p>In this example, we are associating alarm service with broadcast receiver. Alarm service will invoke this receiver on scheduled time. For the sake of simplicity we are just showing an toast to user for each time the alarm is invoked. You may write your logic to start a service or download task.</p>
<div class=""wp-alert warning""><strong>Note:</strong> If your alarm has to perform network task, then start a download service inside <code>onRecieve()</code> method of your alarm broadcast. </div>
<pre class=""prettyprint lang-java"">package com.javatechig.alarmservice;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.widget.Toast;

public class AlarmReceiver extends BroadcastReceiver {

    @Override
    public void onReceive(Context context, Intent intent) {

        // For our recurring task, we'll just display a message
        Toast.makeText(context, ""I'm running"", Toast.LENGTH_SHORT).show();
    }
}
</pre>
<h2><span id=""4_Schedule_Cancel_Alarm"">4. Schedule &amp; Cancel Alarm</span></h2>
<p>In the above two steps we have defined activity layout and alarm broadcast receiver. Let us have a look into MainActivity.java file. Inside MyActivity class, we have defined three simple methods start(), stop() and startAt10(). The start() method schedule the alarm, cancel() method cancel the scheduled alarm, and startAt!0() method will start the alarm at 10:30 PM with a fixed 20 minutes interval.</p>
<pre class=""prettyprint lang-java"">package com.javatechig.alarmservice;

import android.app.Activity;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Toast;
import java.util.Calendar;

public class MyActivity extends Activity {

    private PendingIntent pendingIntent;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_my);

        /* Retrieve a PendingIntent that will perform a broadcast */
        Intent alarmIntent = new Intent(MyActivity.this, AlarmReceiver.class);
        pendingIntent = PendingIntent.getBroadcast(MyActivity.this, 0, alarmIntent, 0);

        findViewById(R.id.startAlarm).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                start();
            }
        });

        findViewById(R.id.stopAlarm).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                cancel();
            }
        });

        findViewById(R.id.stopAlarmAt10).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startAt10();
            }
        });
    }

    public void start() {
        AlarmManager manager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        int interval = 8000;

        manager.setInexactRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), interval, pendingIntent);
        Toast.makeText(this, ""Alarm Set"", Toast.LENGTH_SHORT).show();
    }

    public void cancel() {
        AlarmManager manager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        manager.cancel(pendingIntent);
        Toast.makeText(this, ""Alarm Canceled"", Toast.LENGTH_SHORT).show();
    }

    public void startAt10() {
        AlarmManager manager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        int interval = 1000 * 60 * 20;

        /* Set the alarm to start at 10:30 AM */
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(System.currentTimeMillis());
        calendar.set(Calendar.HOUR_OF_DAY, 10);
        calendar.set(Calendar.MINUTE, 30);

        /* Repeating on every 20 minutes interval */
        manager.setRepeating(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(),
                1000 * 60 * 20, pendingIntent);
    }

}
</pre>
<h2><span id=""5_Re-Starting_Alarm_Service_on_Device_Reboot"">5. Re-Starting Alarm Service on Device Reboot</span></h2>
<p>As discussed earlier, once an alarm service is started, it execute until it is explicitly stopped or until device reboots. This means that, if your device is restarted then your alarm is stopped. To avoid such situation, you have to restart your alarm service as soon as device boot completes. Below code snippet will help you to start alarm service once device reboots.</p>
<pre class=""prettyprint lang-java"">package com.javatechig.alarmservice;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.widget.Toast;

/**
 * @author Nilanchala
 *         &lt;p/&gt;
 *         Broadcast reciever, starts when the device gets starts.
 *         Start your repeating alarm here.
 */
public class DeviceBootReceiver extends BroadcastReceiver {

    @Override
    public void onReceive(Context context, Intent intent) {
        if (intent.getAction().equals(""android.intent.action.BOOT_COMPLETED"")) {
            /* Setting the alarm here */
            Intent alarmIntent = new Intent(context, AlarmReceiver.class);
            PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, alarmIntent, 0);

            AlarmManager manager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
            int interval = 8000;
            manager.setInexactRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), interval, pendingIntent);

            Toast.makeText(context, ""Alarm Set"", Toast.LENGTH_SHORT).show();
        }
    }
}
</pre>
<h2><span id=""6_Declaring_Application_Manifest"">6. Declaring Application Manifest</span></h2>
<p>To start your alarm on device reboot, you have to register your above declared <code>DeviceBootReciever</code> class in your application manifest. This also need <code>android.permission.RECEIVE_BOOT_COMPLETED</code></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    package=""com.javatechig.alarmservice"" &gt;

    &lt;application
        android:allowBackup=""true""
        android:icon=""@drawable/ic_launcher""
        android:label=""@string/app_name""
        android:theme=""@style/AppTheme"" &gt;

        &lt;!-- Permission to start Alarm on device reboot --&gt;
        &lt;uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""/&gt;

        &lt;activity
            android:name="".MyActivity""
            android:label=""@string/app_name"" &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""android.intent.action.MAIN"" /&gt;
                &lt;category android:name=""android.intent.category.LAUNCHER"" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;

        &lt;receiver android:name="".AlarmReceiver""&gt;
	      &lt;intent-filter&gt;
	           &lt;action android:name=""android.intent.action.BOOT_COMPLETED""/&gt;
	      &lt;/intent-filter&gt;
        &lt;/receiver&gt;

        &lt;!-- Will not be called unless the application explicitly enables it --&gt;
        &lt;receiver android:name="".DeviceBootReceiver""
            android:enabled=""false""&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""android.intent.action.BOOT_COMPLETED""/&gt;
            &lt;/intent-filter&gt;
        &lt;/receiver&gt;

    &lt;/application&gt;
&lt;/manifest&gt;
</pre>
<h2><span id=""7_Download_Source_Code"">7. Download Source Code</span></h2>
<p>Download Complete source code from <a href=""https://github.com/javatechig/Android-Alarm-Service-Example"" rel=""nofollow noopener noreferrer"" target=""_blank""><strong>GitHub</strong></a></p>
",0,"standard","post"
"How To Create Excel File In Android","how-to-create-excel-file-in-android","In this tutorial, we will explain how to create an Excel file in Android using Java for the Excel library.","LIVE","<p>Excel is a widely used software for creating and managing data. In this tutorial, we will show you how to create an Excel file in Android using Java for Excel library. The Java for Excel library provides a simple and easy-to-use API for working with Excel files in Java.</p><p><a href=""/articles/android-sqlite-database-tutorial"" title=""Android SQLite Database Tutorial"">android SQLite database tutorial</a><span>. We recommend you to have a glance at it before going through this example.<br></p>
<p>In our previous example, we have explained you how to create an TODO application in android using SQLite database. Now in this post we will export the data saved in database to an excel file and will store it on SDCard.</p>
<h3>Step-1</h3>
<p>Download Java for Excel library from below path.<br>
<a href=""http://jexcelapi.sourceforge.net/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://jexcelapi.sourceforge.net/</a><br>
<a href=""http://sourceforge.net/projects/jexcelapi/files/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://sourceforge.net/projects/jexcelapi/files/</a></p>
<h3>Step-2</h3>
<p>Export and save data&nbsp;from cursor into excel spreadsheet and saves the spreadsheet into external storage directory.</p>
<pre class=""prettyprint lang-java"">private void exportToExcel(Cursor cursor) {		
	final String fileName = ""TodoList.xls"";
	
	//Saving file in external storage
	File sdCard = Environment.getExternalStorageDirectory();	
	File directory = new File(sdCard.getAbsolutePath() + ""/javatechig.todo"");
		
	//create directory if not exist
	if(!directory.isDirectory()){
		directory.mkdirs();	
	}
		
	//file path
	File file = new File(directory, fileName);
	
	WorkbookSettings wbSettings = new WorkbookSettings();
	wbSettings.setLocale(new Locale(""en"", ""EN""));		
	WritableWorkbook workbook;
		
	try {
		workbook = Workbook.createWorkbook(file, wbSettings);			
		//Excel sheet name. 0 represents first sheet
		WritableSheet sheet = workbook.createSheet(""MyShoppingList"", 0);

		try {
			sheet.addCell(new Label(0, 0, ""Subject"")); // column and row
			sheet.addCell(new Label(1, 0, ""Description""));				
			if (cursor.moveToFirst()) {
				do {
					String title = cursor.getString(cursor.getColumnIndex(DatabaseHelper.TODO_SUBJECT));
					String desc = cursor.getString(cursor.getColumnIndex(DatabaseHelper.TODO_DESC));

					int i = cursor.getPosition() + 1;						
					sheet.addCell(new Label(0, i, title));
					sheet.addCell(new Label(1, i, desc));						
				} while (cursor.moveToNext());
			}				
			//closing cursor
			cursor.close();					
		} catch (RowsExceededException e) {
			e.printStackTrace();
		} catch (WriteException e) {
			e.printStackTrace();
		}			
		workbook.write();		
		try {
			workbook.close();
		} catch (WriteException e) {
			e.printStackTrace();
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
}</pre><p>This code exports the contents of a Cursor object to an Excel file in the external storage of an Android device.</p><p>The method exportToExcel takes a Cursor object as a parameter, which contains the data to be exported. It first creates a file with the name ""TodoList.xls"" in a directory named ""javatechig.todo"" in the external storage of the device.<br></p><p>After creating the file, it creates a new Workbook object using the jxl library to create a new Excel workbook. It then creates a new sheet called ""MyShoppingList"" in the workbook.<br></p><p>The code then loops through each row in the Cursor object, retrieves the data from the columns, and adds the data to the cells in the Excel sheet using the addCell method. The first row of the sheet contains the column headers ""Subject"" and ""Description"".<br></p><p>Finally, the workbook is written to the file, and the workbook and cursor objects are closed to release resources.</p><p><br></p>",0,"standard","post"
"Android Third Party Libraries and SDK’s","android-third-party-libraries-sdks","Over past few years, the age of mobile development become an fiercely-competitive world of serious money making business.&hellip;
","LIVE","<p>Over past few years, the age of mobile development become an fiercely-competitive world of serious money making business. Android developers network is growing rapidly. As the network grows, there are many open source libraries available. Although using someone written code is not be recommended always, but sometimes it helps in getting the application quicker to market.</p>
<p>This post outlines some of the popular third party Android Libraries and SDK’s.</p>
<p>If you find some Library is missing from your favourite list, or discovered a new one, just drop us a comment. We will add it to the list.</p>
<h3>User Interface Libraries</h3>
<table class=""reference"">
<colgroup>
<col style=""width: 20%;""/>
<col style=""width: 80%;""/> </colgroup>
<tbody>
<tr>
<td style=""vertical-align: middle;""><a href=""http://actionbarsherlock.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">ActionBarSherlock</a></td>
<td>ActionBarSherlock is an extension of the support library designed to facilitate the use of the action bar design pattern across all versions of Android with a single API. ActionBarSherlock was widely used before Google introduced AppCompact.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""https://github.com/chrisbanes/ActionBar-PullToRefresh"" rel=""nofollow noopener noreferrer"" target=""_blank"">ActionBar PullToRefresh</a></td>
<td>ActionBar PullToRefresh provides an easy way to add a modern version of the pull-to-refresh interaction to your application.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""https://github.com/chrisbanes/Android-PullToRefresh"" rel=""nofollow noopener noreferrer"" target=""_blank"">Android PullToRefresh</a></td>
<td>This project aims to provide a reusable Pull to Refresh widget for Android. It was originally based on Johan Nilsson’s library (mainly for graphics, strings and animations), but these have been replaced since.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""http://viewpagerindicator.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">View Pager Indicator</a></td>
<td>Paging indicator widgets compatible with the ViewPager from the Android Support Library and ActionBarSherlock.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""http://nineoldandroids.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Nine Old Android</a></td>
<td>Android library for using the Honeycomb (Android 3.0) animation API on all versions of the platform back to 1.0! Animation prior to Honeycomb was very limited in what it could accomplish so in Android 3.x a new API was written.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""https://code.google.com/p/achartengine/"" rel=""nofollow noopener noreferrer"" target=""_blank"">A Chart Engine</a></td>
<td>AChartEngine is a charting library for Android applications. It currently supports all major and widely used chart types.</td>
</tr>
</tbody>
</table>
<h3>Android Networking Libraries</h3>
<table class=""reference"">
<colgroup>
<col style=""width: 20%;""/>
<col style=""width: 80%;""/> </colgroup>
<tbody>
<tr>
<td style=""vertical-align: middle;""><a href=""http://square.github.io/okhttp/"" rel=""nofollow noopener noreferrer"" target=""_blank"">okHttp</a></td>
<td>HTTP is the way modern applications network. It’s how we exchange data &amp; media. Doing HTTP efficiently makes your stuff load faster and saves bandwidth.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""http://developer.android.com/training/volley/index.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">Volley</a></td>
<td>Volley is an HTTP library that makes networking for Android apps easier and most importantly, faster. Volley is available through the open AOSP repository.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""http://loopj.com/android-async-http/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Android Asynchronous Http Client</a></td>
<td>An asynchronous callback-based Http client for Android built on top of Apache’s HttpClient libraries. All requests are made outside of your app’s main UI thread, but any callback logic will be executed on the same thread as the callback was created using Android’s Handler message passing.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""https://code.google.com/p/google-gson/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Google GSON</a></td>
<td>Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object. Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""http://square.github.io/retrofit/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Retrofit</a></td>
<td>Retrofit is a type-safe REST client for Android and Java. This uses annotation to describe HTTP server calls. This is an elegant solution for managing REST API calls in in android application.</td>
</tr>
<td style=""vertical-align: middle;""><a href=""https://github.com/amitshekhariitbhu/Fast-Android-Networking"" rel=""nofollow noopener noreferrer"" target=""_blank"">Fast Android Networking</a></td>
<td>Fast Android Networking Library is a powerful library for doing any type of networking in Android applications which is made on top of OkHttp Networking Layer.</td>

</tbody>
</table>
<h3>Image Downloading And Caching Libraries</h3>
<table class=""reference"">
<colgroup>
<col style=""width: 20%;""/>
<col style=""width: 80%;""/> </colgroup>
<tbody>
<tr>
<td style=""vertical-align: middle;""><a href=""http://square.github.io/picasso/#download"" rel=""nofollow noopener noreferrer"" target=""_blank"">Picasso</a></td>
<td>A powerful image downloading and caching library for Android.
<p><a href=""/articles/how-to-use-picasso-library-in-android"">Example</a></p></td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""https://github.com/nostra13/Android-Universal-Image-Loader"" rel=""nofollow noopener noreferrer"" target=""_blank"">Universal Image Loader</a></td>
<td>UIL aims to provide a powerful, flexible and highly customizable instrument for image loading, caching and displaying. It provides a lot of configuration options and good control over the image loading and caching process.
<p><a href=""/articles/universal-image-loader-library-in-android"">Example</a></p></td>
</tr>
</tbody>
</table>
<h3>Database Helper Libraries</h3>
<table class=""reference"">
<colgroup>
<col style=""width: 20%;""/>
<col style=""width: 80%;""/> </colgroup>
<tbody>
<tr>
<td style=""vertical-align: middle;""><a href=""http://www.activeandroid.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">ActiveAndroid</a></td>
<td>ActiveAndroid is an active record style ORM (object relational mapper). It allows you to save and retrieve SQLite database records without ever writing a single SQL statement. Each database record is wrapped neatly into a class with methods like save() and delete().</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""http://ormlite.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">ORM Lite</a></td>
<td>Object Relational Mapping Lite (ORM Lite) provides some simple, lightweight functionality for persisting Java objects to SQL databases while avoiding the complexity and overhead of more standard ORM packages.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""http://greendao-orm.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Green DOA</a></td>
<td>GreenDAO is an open source project to help Android developers working with data stored in SQLite. GreenDAO does all the SQLite helper work for you. It maps Java objects to database tables (often called ORM). This way you can store, update, delete, and query for Java objects using a simple object oriented API.</td>
</tr>
</tbody>
</table>
<h3>Other Android Libraries</h3>
<table class=""reference"">
<colgroup>
<col style=""width: 20%;""/>
<col style=""width: 80%;""/> </colgroup>
<tbody>
<tr>
<td style=""vertical-align: middle;""><a href=""https://github.com/excilys/androidannotations"" rel=""nofollow noopener noreferrer"" target=""_blank"">Android Anotaion Framework</a></td>
<td>AndroidAnnotations is an Open Source framework that speeds up Android development. It takes care of the plumbing, and lets you concentrate on what’s really important. By simplifying your code, it facilitates its maintenance.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""http://greenrobot.github.io/EventBus/"" rel=""nofollow noopener noreferrer"" target=""_blank"">EventBus</a></td>
<td>EventBus works on publisher, subscriber model similar to Observer design pattern. This helps in hassel free communication between Activities, Fragments, and background threads.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""https://github.com/square/otto"" rel=""nofollow noopener noreferrer"" target=""_blank"">Otto</a></td>
<td>An enhanced Guava-based event bus with emphasis on Android support. Otto is an event bus designed to decouple different parts of your application while still allowing them to communicate efficiently.</td>
</tr>
<tr>
<td style=""vertical-align: middle;""><a href=""http://square.github.io/dagger/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Dragger</a></td>
<td>Dragger is a faster dependency injector for Android and Java</td>
</tr>
</tbody>
</table>
",0,"standard","post"
"Creating a Background Service in Android Using IntentService","creating-a-background-service-in-android","In this tutorial we will take a look into one of most important and commonly used Android concept called IntentService. This post explains steps involved in creating a background service in Android using IntentService.
","LIVE","

In this tutorial we will take a look into one of most important and commonly used Android concept called IntentService. This post explains steps involved in creating a background service in Android using IntentService. Before you start with this post, we recommend you to have a glance at below posts
<p><strong><span style=""color: #ff0000;"">*</span> <a href=""http://stacktips.com/android/android-service-example"" target=""_blank"" title=""Android Service Example"">Checkout Android Service Tutorial</a></strong></p>
<p><strong><span style=""color: #ff0000;"">*</span> <a href=""http://stacktips.com/android/android-networking-tutorial"" target=""_blank"" title=""Android Networking Tutorial"">Android Networking Tutorial</a></strong></p>
<h1><span id=""1_What_is_IntentService"">1. What is IntentService?</span></h1>
<p>IntentService is a subclass of <code>android.app.Service</code> class. A stated intent service allows to handle long running tasks without effecting the application UI thread. This is not bound to any activity so, it is not getting effected for any change in activity lifecycle. Once IntentService is started, it handles each Intent using a worker thread and stops itself when it runs out of work.</p>
<p>IntentService would be an best solution, If you have an work queue to process. For example, if your application using analytics you will likely to send event name and related parameter to your tracking server for each user generated event. Although each event means a tiny piece of data, creating networking request on each click will result an overhead to your application. Instead, you can use work queue processor design pattern and process the events in a batch.</p>
<h1><span id=""2_IntentService_Limitations"">2. IntentService Limitations</span></h1>
<ol>
<li>No easy or direct way to interact with user interface directly from IntentService. Later in this example, we will explain to pass result back from IntentService to</li>
<li>With IntentService, there can only be one request processed at any single point of time. If you request for another task, then the new job will wait until the previous one is completed. This means that IntentService process the request</li>
<li>An tasks stated using IntentService cannot be interrupted</li>
</ol>
<h1><span id=""3_Why_do_we_need_IntentService"">3. Why do we need IntentService?</span></h1>
<p>Android design guidelines strongly suggests to perform all the long running tasks off the UI thread. For example, if you have to periodically download the largest chunk of data from server, you must use IntentService to avoid ANR. ANR (Application not responding) message often occurs, if your main thread is doing too much of work. In this course of this tutorial, we will learn the below concepts</p>
<ol>
<li>How to create and use IntentService</li>
<li>How to pass data from activity to service as parameter</li>
<li>How to pass result back to activity</li>
<li>Update activity based on the result</li>
</ol>
<h4><span id=""Case_Study"">Case Study</span></h4>
<p>To make this tutorial easy to understand we will extend our previous tutorial (<a href=""http://stacktips.com/android/android-networking-tutorial"" target=""_blank"" title=""Android Networking Tutorial"">Android Networking Tutorial</a>) to use Intent Service for downloading the data from server. We suggest you to checkout <strong><a href=""http://stacktips.com/android/android-networking-tutorial"" target=""_blank"">Android Networking Example</a></strong> to get familiar with downloading data from server using different http clients available in Android.</p>
<p><strong>Feed Url : <a href=""http://stacktips.com/api/get_category_posts/?dev=1&amp;slug=android"" target=""_blank"">http://stacktips.com/api/get_category_posts/?dev=1&amp;slug=android</a></strong></p>
<p><strong> Expected Result</strong> Start service to download the data when application is started. Once download is complete, update ListView present in your activity.</p>
<p><strong>Feed Response Object</strong></p>
<p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""JSON Feed Response"" class=""alignnone size-full wp-image-5736"" height=""913"" loading=""lazy"" sizes=""(max-width: 1024px) 100vw, 1024px"" src=""/media/uploads/articles/264/JSON-Feed-Response.png"" srcset="""" width=""1024""/></a></center></p>
<h1><span id=""4_Create_an_IntentService"">4. Create an IntentService</span></h1>
<p>In the context of our example, we will create an IntentService to download the data from server. Once download is completed, the response will be sent back to activity. Lets create a new class <code>DownloadService.java</code> and extend it from <code>android.app.IntentService</code>. Now let us override <code>onHandleIntent()</code> method.</p>
<p>When service is started the onHandleIntent() method is called on the worker thread.Unlike Service, IntentService stops itself once it completes its task, so you don’t need to call stopSelf() for stoping the IntentService.</p>
<pre class=""prettyprint lang-java"">package com.javatechig.intentserviceexample;

import android.app.IntentService;
import android.content.Intent;
import android.os.Bundle;
import android.os.ResultReceiver;
import android.text.TextUtils;
import android.util.Log;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class DownloadService extends IntentService {

    public static final int STATUS_RUNNING = 0;
    public static final int STATUS_FINISHED = 1;
    public static final int STATUS_ERROR = 2;

    private static final String TAG = ""DownloadService"";

    public DownloadService() {
        super(DownloadService.class.getName());
    }

    @Override
    protected void onHandleIntent(Intent intent) {

        Log.d(TAG, ""Service Started!"");

        final ResultReceiver receiver = intent.getParcelableExtra(""receiver"");
        String url = intent.getStringExtra(""url"");

        Bundle bundle = new Bundle();

        if (!TextUtils.isEmpty(url)) {
            /* Update UI: Download Service is Running */
            receiver.send(STATUS_RUNNING, Bundle.EMPTY);

            try {
                String[] results = downloadData(url);

                /* Sending result back to activity */
                if (null != results &amp;&amp; results.length &gt; 0) {
                    bundle.putStringArray(""result"", results);
                    receiver.send(STATUS_FINISHED, bundle);
                }
            } catch (Exception e) {

                /* Sending error message back to activity */
                bundle.putString(Intent.EXTRA_TEXT, e.toString());
                receiver.send(STATUS_ERROR, bundle);
            }
        }
        Log.d(TAG, ""Service Stopping!"");
        this.stopSelf();
    }

    private String[] downloadData(String requestUrl) throws IOException, DownloadException {
        InputStream inputStream = null;
        HttpURLConnection urlConnection = null;

        /* forming th java.net.URL object */
        URL url = new URL(requestUrl);
        urlConnection = (HttpURLConnection) url.openConnection();

        /* optional request header */
        urlConnection.setRequestProperty(""Content-Type"", ""application/json"");

        /* optional request header */
        urlConnection.setRequestProperty(""Accept"", ""application/json"");

        /* for Get request */
        urlConnection.setRequestMethod(""GET"");
        int statusCode = urlConnection.getResponseCode();

        /* 200 represents HTTP OK */
        if (statusCode == 200) {
            inputStream = new BufferedInputStream(urlConnection.getInputStream());
            String response = convertInputStreamToString(inputStream);
            String[] results = parseResult(response);
            return results;
        } else {
            throw new DownloadException(""Failed to fetch data!!"");
        }
    }

    private String convertInputStreamToString(InputStream inputStream) throws IOException {

        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
        String line = """";
        String result = """";

        while ((line = bufferedReader.readLine()) != null) {
            result += line;
        }

            /* Close Stream */
        if (null != inputStream) {
            inputStream.close();
        }

        return result;
    }

    private String[] parseResult(String result) {

        String[] blogTitles = null;
        try {
            JSONObject response = new JSONObject(result);
            JSONArray posts = response.optJSONArray(""posts"");
            blogTitles = new String[posts.length()];

            for (int i = 0; i &lt; posts.length(); i++) {
                JSONObject post = posts.optJSONObject(i);
                String title = post.optString(""title"");
                blogTitles[i] = title;
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }
        return blogTitles;
    }

    public class DownloadException extends Exception {

        public DownloadException(String message) {
            super(message);
        }

        public DownloadException(String message, Throwable cause) {
            super(message, cause);
        }
    }
}
</pre>
<h4><span id=""How_it_works"">How it works</span></h4>
<ol>
<li>DownloadService class extending <code>IntentService</code> and overriding <code>onHandleIntent()</code> method. In onHandleIntent() method we will perform our network request to download data from server</li>
<li>Before it downloads the data from server, the request is being fetched from bundle. Our Activity will send this data as extras while starting the</li>
<li>Once Download is successful we will send the response back to activity via <code>ResultReceiver</code></li>
<li>For any exceptions or error, we will pass the error response back to activity via ResultReceiver.</li>
<li>We have declared custom exception class <code>DownloadException</code> for handling all our custom error messages. You may do this</li>
</ol>
<h1><span id=""5_Declaring_Service_in_the_Manifest"">5. Declaring Service in the Manifest</span></h1>
<p>Like <code>Service</code>, an IntentService also needs an entry in your application manifest. Provide the element entry and declare all your IntentServices you using. Additionally as we are performing operation to download data from internet, we will request for <code>android.permission.INTERNET</code> permission.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    package=""com.javatechig.intentserviceexample""&gt;

    &lt;!-- Internet permission, as we are accessing data from server --&gt;
    &lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;

    &lt;application
        android:allowBackup=""true""
        android:icon=""@drawable/ic_launcher""
        android:label=""@string/app_name""
        android:theme=""@style/AppTheme""&gt;
        &lt;activity
            android:name="".MyActivity""
            android:label=""@string/app_name""&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""android.intent.action.MAIN"" /&gt;

                &lt;category android:name=""android.intent.category.LAUNCHER"" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;


        &lt;!-- Declaring Service in Manifest --&gt;
        &lt;service
            android:name="".DownloadService""
            android:exported=""false"" /&gt;

    &lt;/application&gt;

&lt;/manifest&gt;
</pre>
<h1><span id=""6_Sending_Work_Requests_to_the_IntentService"">6. Sending Work Requests to the IntentService</span></h1>
<p>To start the DownloadService to download data, you must create an explicit Intent and add all the request parameters to it. A service can be started by calling <code>startService()</code> method. You can start an IntentService either form an <code>Activity</code> or a <code>Fragment</code>.</p>
<p>What is the additional <code>DownloadResultReceiver</code> here, huh?. Remember that we have to pass the result of download request from service to activity. This will be done through <code>ResultReceiver</code>.</p>
<pre class=""prettyprint lang-java"">/* Starting Download Service */
mReceiver = new DownloadResultReceiver(new Handler());
mReceiver.setReceiver(this);
Intent intent = new Intent(Intent.ACTION_SYNC, null, this, DownloadService.class);

/* Send optional extras to Download IntentService */
intent.putExtra(""url"", url);
intent.putExtra(""receiver"", mReceiver);
intent.putExtra(""requestId"", 101);

startService(intent);
</pre>
<h1><span id=""7_Report_Status_From_IntentService_to_Activity"">7. Report Status From IntentService to Activity</span></h1>
<p>To send the status of a work request in an IntentService to other components, get the instance of ResultReceiver. Send the status by calling send() method.</p>
<pre class=""prettyprint lang-java"">final ResultReceiver receiver = intent.getParcelableExtra(""receiver"");
Bundle bundle = new Bundle();

/* Service Started */
receiver.send(STATUS_RUNNING, Bundle.EMPTY);

/* Status Finished */
bundle.putStringArray(""result"", results);
receiver.send(STATUS_FINISHED, bundle);

/* Sending error message back to activity */
bundle.putString(Intent.EXTRA_TEXT, ""Error message here.."");
receiver.send(STATUS_ERROR, bundle);
</pre>
<h1><span id=""8_Receive_Status_Broadcasts_from_an_IntentService"">8. Receive Status Broadcasts from an IntentService</span></h1>
<p>To receive results back from IntentService, we can use subclass of <code>ResultReciever</code>. Once results are sent from Service the <code>onReceiveResult()</code> method will be called. Your activity handles this response and fetches the results from the Bundle. Once results are recieved, accordingly the activity instance updates the UI.</p>
<h4><span id=""DownloadResultReceiverjava"">DownloadResultReceiver.java</span></h4>
<pre class=""prettyprint lang-java"">package com.javatechig.intentserviceexample;

import android.os.Bundle;
import android.os.Handler;
import android.os.ResultReceiver;

public class DownloadResultReceiver extends ResultReceiver {
    private Receiver mReceiver;

    public DownloadResultReceiver(Handler handler) {
        super(handler);
    }

    public void setReceiver(Receiver receiver) {
        mReceiver = receiver;
    }

    public interface Receiver {
        public void onReceiveResult(int resultCode, Bundle resultData);
    }

    @Override
    protected void onReceiveResult(int resultCode, Bundle resultData) {
        if (mReceiver != null) {
            mReceiver.onReceiveResult(resultCode, resultData);
        }
    }
}
</pre>
<h4><span id=""MainActivityjava"">MainActivity.java</span></h4>
<pre class=""prettyprint lang-java"">@Override
    public void onReceiveResult(int resultCode, Bundle resultData) {
        switch (resultCode) {
            case DownloadService.STATUS_RUNNING:
                setProgressBarIndeterminateVisibility(true);
                break;
            case DownloadService.STATUS_FINISHED:
                /* Hide progress &amp; extract result from bundle */
                setProgressBarIndeterminateVisibility(false);
                String[] results = resultData.getStringArray(""result"");

                /* Update ListView with result */
                arrayAdapter = new ArrayAdapter(MyActivity.this, android.R.layout.simple_list_item_2, results);
                listView.setAdapter(arrayAdapter);
                break;
            case DownloadService.STATUS_ERROR:
                /* Handle the error */
                String error = resultData.getString(Intent.EXTRA_TEXT);
                Toast.makeText(this, error, Toast.LENGTH_LONG).show();
                break;
        }
    }
</pre>
<h1><span id=""9_Output"">9. Output</span></h1>
<p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""Android Networking Example"" class=""alignnone size-medium wp-image-5743"" height=""1048"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/264/Android-Networking-Example-620x1048.png"" srcset="""" width=""620""/></a></center> </p>
<h1><span id=""11_Download_Source_Code"">11. Download Source Code</span></h1>
<p>Download complete example source code from <a href=""https://github.com/javatechig/Android-IntentService-Example"" rel=""nofollow noopener noreferrer"" target=""_blank""><strong>GitHub</strong></a></p>
",0,"standard","post"
"Android Networking Tutorial","android-networking-tutorial","In this android networking tutorial we will create a sample application that illustrates how to perform network operations in android.","LIVE","<h2 class=""""><span id=""1_Introduction"">Introduction</span></h2>
<p>In this android networking tutorial we will create a sample application that illustrates how to perform network operations in android. By going through this lesson, you will learn the following topics</p>
<ol>
<li>How to create network connection? What are the different available Http clients in android</li>
<li>How download, parse and consume JSON data?</li>
<li>What are the best approaches and design practices?</li>
</ol>
<p>Networking in android means the ability to send and receive data from remote server. This data can be either a plain text, xml, json, image or a video stream. Android primarily supports two HTTP clients for networking, one by using <code>Apache HttpClient</code> and other using <code>HttpURLConnection</code>.</p>
<h3 class=""""><span id=""2_Apache_HttpClient_vs_HttpURLConnection"">Apache HttpClient vs HttpURLConnection</span></h3>
<p>Older version of android was supporting only Apache HttpClient for all network operations. But since <code>Gingerbread (Android 2.3</code>) , android recommend to use HttpURLConnection. HttpURLConnection is simple and thin API’s supporting transparent compression and response caching. Response cache is used to improve speed and loading time.</p>
<h2 class=""""><span id=""3_Android_Networking_Using_Apache_HttpClient"">Android Networking Using Apache HttpClient</span></h2>
<p>In this tutorial we will create a sample application that illustrates how to perform network operations in android. To make this post simplified, we will download the data from the following url and will show the article titles on a ListView. Refer the screenshot for an overview of how application looks</p>
<p>Feed request Url: <a href=""http://stacktips.com/api/get_category_posts/?dev=1&amp;slug=android"" target=""_blank"">http://stacktips.com/api/get_category_posts/?dev=1&amp;slug=android</a></p>
<p>Below is the format of response we are expecting from server. We will get the list of posts and each post contains details like title, content, excerpt, etc. We will take all the list of titles and will display on the ListView.</p>
<p></p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""JSON Feed Response"" class=""alignnone size-full wp-image-5736"" height=""913"" loading=""lazy"" sizes=""(max-width: 1024px) 100vw, 1024px"" src=""/media/uploads/articles/265/JSON-Feed-Response.png"" srcset="""" width=""1024""/></a></center><p></p>
<h2 class=""""><span id=""4_Application_Manifest_Permissions"">Application Manifest Permissions</span></h2>
<p>As our application is connecting to remote server, we have to provide internet permission. Just add the below line of code in your application manifest. This should be a direct child of  &lt;manifest&gt; element.</p>
<pre class=""prettyprint lang-xml""> &lt;uses-permission android:name=""android.permission.INTERNET""/&gt;
</pre>
<p class=""""><span id=""5_Downloading_Data_Using_HttpGet""><br/></span></p><h2 class=""""><span id=""5_Downloading_Data_Using_HttpGet"">Downloading Data Using HttpGet</span></h2>
<p>Downloading data is an long running task and it is recommended that all the long running task should be performed off the UI thread. And in this example we will create a simple downloader asynchronous task that performs the feed download action.</p>
<h4><span id=""What_is_AsyncTask"">What is AsyncTask?</span></h4>
<p>Async task enables you to implement multi threading without get hands dirty into threads. AsyncTask enables proper and easy use methods that allows performing background operations and passing the results back to the UI thread. Learn more about android AsyncTask from below links</p>
<p class=""entry-title""><strong><span>* </span><a href=""http://stacktips.com/android/handler-and-asynctask-in-android"" target=""_blank"">Handler and AsyncTask in Android</a></strong></p>
<h4><span id=""AsyncHttpTaskjava"">AsyncHttpTask.java</span></h4>
<pre class=""prettyprint lang-java"">public class AsyncHttpTask extends AsyncTask&lt;String, Void, Integer&gt; {

        @Override
        protected Integer doInBackground(String... params) {
            InputStream inputStream = null;
            Integer result = 0;
            try {
                /* create Apache HttpClient */
                HttpClient httpclient = new DefaultHttpClient();

                /* HttpGet Method */
                HttpGet httpGet = new HttpGet(params[0]);

                /* optional request header */
                httpGet.setHeader(""Content-Type"", ""application/json"");

                /* optional request header */
                httpGet.setHeader(""Accept"", ""application/json"");

                /* Make http request call */
                HttpResponse httpResponse = httpclient.execute(httpGet);
                int statusCode = httpResponse.getStatusLine().getStatusCode();

                /* 200 represents HTTP OK */
                if (statusCode ==  200) {
                    /* receive response as inputStream */
                    inputStream = httpResponse.getEntity().getContent();
                    String response = convertInputStreamToString(inputStream);
                    parseResult(response);
                    result = 1; // Successful
                } else{
                    result = 0; //""Failed to fetch data!"";
                }
            } catch (Exception e) {
                Log.d(TAG, e.getLocalizedMessage());
            }
            return result; //""Failed to fetch data!"";
        }\

        @Override
        protected void onPostExecute(Integer result) {
            /* Download complete. Lets update UI */
            if(result == 1){
                arrayAdapter = new ArrayAdapter(MyActivity.this, android.R.layout.simple_list_item_1, blogTitles);
                listView.setAdapter(arrayAdapter);
            }else{
                Log.e(TAG, ""Failed to fetch data!"");
            }
        }
    }
</pre>
<h4><span id=""Code_Explanation"">Code Explanation</span></h4>
<ul>
<li><code>AsyncHttpTask</code> is used to perform http connection and download data from server.</li>
<li><code>doInBackground()</code> method is executed on a new thread. This method takes feed request url as input parameter.</li>
<li>This is using apache <code>HttpClient</code> method to download the data from server</li>
<li>Once the response is received it checks for the response status code. HTTP status 200 means, the request is successful. You may validate for other http error code types and do the required validations. Once request is successful, it fetches the content stream.</li>
<li>Now we have to convert the stream to string and then process your parser. The stream to string conversation and the JSON parser is done in two different method. Later on this tutorial we will see them.</li>
<li>Once the data is parsed, the <code>doInBackground()</code> method completes its tasks and then <code>onPostExecute()</code> method invokes.</li>
<li><code>onPostExecute()</code> method we will update the adapter value and the list content.</li>
</ul>
<h2 class=""""><span id=""6_Converting_Stream_to_String"">Converting Stream to String</span></h2>
<pre class=""prettyprint lang-java"">private String convertInputStreamToString(InputStream inputStream) throws IOException {
        BufferedReader bufferedReader = new BufferedReader( new InputStreamReader(inputStream));
        String line = """";
        String result = """";
        while((line = bufferedReader.readLine()) != null){
            result += line;
        }

            /* Close Stream */
        if(null!=inputStream){
            inputStream.close();
        }
        return result;
    }
</pre>
<p class=""""><span id=""7_JSONResponse_Parsing""><br/></span></p><h2 class=""""><span id=""7_JSONResponse_Parsing"">JSON Response Parsing</span></h2>
<p>Note: The focus of this tutorial is more on explaining network connections in android and not focused towards explaining the json parser. If you are looking for some help on JSON parsing, you may read the below post</p>
<p><strong><span>* </span><a href=""http://stacktips.com/android/json-feed-reader-in-android"" title=""JSON Feed Reader in Android"">JSON Feed Reader in Android</a></strong></p>
<pre class=""prettyprint lang-java"">private void parseResult(String result) {
        try{
            JSONObject response = new JSONObject(result);
            JSONArray posts = response.optJSONArray(""posts"");
            blogTitles = new String[posts.length()];

            for(int i=0; i&lt; posts.length();i++ ){
                JSONObject post = posts.optJSONObject(i);
                String title = post.optString(""title"");
                blogTitles[i] = title;
            }
        }catch (JSONException e){
            e.printStackTrace();
        }
    }
</pre>
<p class=""""><span id=""8_Using_AsyncHttpTask_FromActivity""><br/></span></p><h2 class=""""><span id=""8_Using_AsyncHttpTask_FromActivity"">Using AsyncHttpTask From Activity</span></h2>
<p>As discussed earlier, our ui contains a simple ListView and uses basic <code>ArrayAdapter</code>. You may customise your ListView of the kind you want. Need guide on building custom list? Checkout our below tutorial.</p>
<p><span>*</span> <a href=""http://stacktips.com/android/android-listview-tutorial"" target=""_blank"" title=""Android ListView Tutorial"">Android ListView Tutorial</a><br/>
<span>* </span><a href=""http://stacktips.com/android/listview-with-section-header-in-android"" target=""_blank"" title=""ListView with Section Header in Android"">ListView with Section Header in Android</a></p>
<h4><span id=""Activity_layout_activity_myxml"">Activity layout (activity_my.xml)</span></h4>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:paddingLeft=""@dimen/activity_horizontal_margin""
    android:paddingRight=""@dimen/activity_horizontal_margin""
    android:paddingTop=""@dimen/activity_vertical_margin""
    android:paddingBottom=""@dimen/activity_vertical_margin""
    tools:context="".MyActivity""&gt;

    &lt;ListView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:id=""@+id/listView""
        android:layout_alignParentLeft=""true""
        android:layout_alignParentStart=""true""
        android:choiceMode=""singleChoice"" /&gt;
&lt;/RelativeLayout&gt;
</pre>
<h4><span id=""Activity_Java_class"">Activity Java class</span></h4>
<p>Let us have a look into Activity onCreate() method</p>
<pre class=""prettyprint lang-java"">@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_my);

        listView = (ListView) findViewById(R.id.listView);
        final String url = ""http://stacktips.com/api/get_category_posts/?dev=1&amp;slug=android"";
        new AsyncHttpTask().execute(url);
    }
</pre>
<p class=""""><span id=""9_Android_Networking_Using_HttpURLConnection""><br/></span></p><h2 class=""""><span id=""9_Android_Networking_Using_HttpURLConnection"">Android Networking Using HttpURLConnection</span></h2>
<p>In the above example, we have used Apache <code>HttpClient</code> to connect to server and download data. Now let us use <code>HttpURLConnection</code> in the same example. The only place we need to change is inside <code>doInBackgrond()</code> method of AsyncHttpTask class.</p>
<pre class=""prettyprint lang-java""> @Override
        protected Integer doInBackground(String... params) {
            InputStream inputStream = null;
            HttpURLConnection urlConnection = null;
            Integer result = 0;
            try {
                /* forming th java.net.URL object */
                URL url = new URL(params[0]);
                urlConnection = (HttpURLConnection) url.openConnection();

                 /* optional request header */
                urlConnection.setRequestProperty(""Content-Type"", ""application/json"");

                /* optional request header */
                urlConnection.setRequestProperty(""Accept"", ""application/json"");

                /* for Get request */
                urlConnection.setRequestMethod(""GET"");
                int statusCode = urlConnection.getResponseCode();

                /* 200 represents HTTP OK */
                if (statusCode ==  200) {
                    inputStream = new BufferedInputStream(urlConnection.getInputStream());
                    String response = convertInputStreamToString(inputStream);
                    parseResult(response);
                    result = 1; // Successful
                }else{
                    result = 0; //""Failed to fetch data!"";
                }
            } catch (Exception e) {
                Log.d(TAG, e.getLocalizedMessage());
            }
            return result; //""Failed to fetch data!"";
        }
</pre>
<p class=""""><span id=""10_Android_Networking_Best_Practices""><br/></span></p><h2 class=""""><span id=""10_Android_Networking_Best_Practices"">Android Networking Best Practices</span></h2>
<ul>
<li>Do not ever download data in main thread. That will cause Application Not Responding (ANR)</li>
<li>Use <code>HttpURLConnection</code> instead of apache <code>HttpClient</code> if your application is targeted from Android 2.3 onwards</li>
<li>If you have a very long running task like uploading a video, use IntentService</li>
<li>Let user know what is going on. This means there should be some visual representation of download progress. In this example we have not used any (which will show an empty screen while data is being downloaded). Without a progress representation, your application will mislead user.</li></ul>
<p>Download the Android Networking Example using Apache HttpClient from from <a href=""https://github.com/javatechig/Android-HttpGet-Apache-HttpClient"" rel=""nofollow noopener noreferrer"" target=""_blank""><strong>GitHub</strong></a>.</p>
<p>Download the Android Networking Example using HttpURLConnection from <a href=""https://github.com/javatechig/Android-HttpGet-HttpURLConnection"" rel=""nofollow noopener noreferrer"" target=""_blank""><strong>GitHub</strong></a>.</p>
<h1><span id=""12Screenshot"">12. Screenshot</span></h1>
<p></p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""Android Networking Example"" class=""alignnone size-medium wp-image-5743"" height=""1048"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/265/Android-Networking-Example-620x1048.png"" srcset="""" width=""620""/></a></center><p></p>",0,"standard","post"
"How To Integrate Twitter In Android Application","how-to-integrate-twitter-in-android-application","This tutorial explains, how to integrate twitter in android application. The example below using twitter4j java library for login to twitter and allows to share a simple text post and image post in users twitters timeline.
","LIVE","<p>This tutorial explains, how to integrate twitter in android application. The example below using twitter4j java library for login to twitter and allows to post text and image in users twitters timeline. This application involves following steps</p>
<ol>
<li>Download twitter4j jar file</li>
<li>Create a new application in Twitter developer console</li>
<li>Design your application user interface</li>
<li>Allow user to login to twitter and get authentication token</li>
<li>Save the token for further use</li>
<li>Post text or image content on twitter timeline</li>
</ol>
<h1>1. Download Twitter SDK</h1>
<p>Twitter4J is an unofficial Java library for the Twitter API. With Twitter4J, you can easily integrate your Java application with the Twitter service. Note that twitter4j is an unofficial library.</p>
<p>You need to download this library before you can start integrating twitter on android. <a href=""http://twitter4j.org/en/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Download here.</a></p>
<h1>2. Create New App in Twitter console</h1>
<ol>
<li>Visit the below link to login to twitter developer console and login with your credentials<br/>
<a href=""https://dev.twitter.com/apps"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://dev.twitter.com/apps</a></li>
<li>You will see a console as shown in the screenshot below. Here you can see list of applications created on twitter. For our example let us create a new application by clicking on the “Create a new application” button.</li>
<li>Fill the required application details like name, description, website link and callback url. Call back url is optional, so can be left blank. And move next.</li>
<li>Now we are done. You can see your app console as shown in the screenshot below. For twitter integration in android we require consumer secret and consumer key.</li>
</ol>
<p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""Create new application in twitter console"" class=""alignnone size-medium wp-image-5692"" height=""558"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/266/Create-new-application-in-twitter-console-620x558.png"" srcset="""" width=""620""/></a></center></p>
<h1>3. Create New Android Application</h1>
<p>Now we are ready to start write sample application to integrate twitter4j sdk in android. Create a new project and add <code>twitter4j-core-4.0.2.jar</code> to libs folder.</p>
<p>In this example, we have two activities. MainActivity and WebView activity. The MainActivity uses a simple layout that allows user to login to Twitter, and after login user can share message on twitter. The WebViewActivity shows user a login screen through which user can login to twitter by supplying twitter credentials. Once user is authenticated, it will be redirected to the MainActivity with the oAuth response.</p>
<p>Let us have a look into applications layout files.</p>
<h4>activity_main.xml</h4>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:padding=""@dimen/activity_vertical_margin"" &gt;

    &lt;RelativeLayout
        android:id=""@+id/login_layout""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""
        android:orientation=""vertical""
        android:visibility=""visible"" &gt;

        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_centerHorizontal=""true""
            android:text=""@string/login_instructions""
            android:textAppearance=""?android:attr/textAppearanceLarge""
            android:textColor=""#0080B4"" /&gt;

        &lt;Button
            android:id=""@+id/btn_login""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:layout_centerInParent=""true""
            android:background=""#0080B4""
            android:text=""@string/btn_login""
            android:textColor=""#fff"" /&gt;
    &lt;/RelativeLayout&gt;

    &lt;LinearLayout
        android:id=""@+id/share_layout""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""
        android:orientation=""vertical""
        android:visibility=""gone"" &gt;

        &lt;TextView
            android:id=""@+id/user_name""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:paddingBottom=""10dp""
            android:text=""@string/hello""
            android:textAppearance=""?android:attr/textAppearanceLarge""
            android:textColor=""#0080B4"" /&gt;

        &lt;ImageView
            android:id=""@+id/imageView""
            android:layout_width=""fill_parent""
            android:layout_height=""150dp""
            android:scaleType=""centerCrop""
            android:src=""@drawable/lakeside_view"" /&gt;

        &lt;EditText
            android:id=""@+id/share_text""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:layout_marginTop=""5dp""
            android:background=""#cceaf3""
            android:hint=""@string/share_instructions""
            android:inputType=""textMultiLine""
            android:minLines=""5""
            android:padding=""10dp"" /&gt;

        &lt;Button
            android:id=""@+id/btn_share""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:layout_marginTop=""10dp""
            android:background=""#0080B4""
            android:text=""@string/btn_share""
            android:textColor=""#fff"" /&gt;
    &lt;/LinearLayout&gt;

&lt;/LinearLayout&gt;
</pre>
<p>The above layout is being used in MainActivity.java. Below is the layout for WebViewActivity.java</p>
<h4>activity_webview.xml</h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/urlContainer""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""horizontal"" &gt;

    &lt;WebView
        android:id=""@+id/webView""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""
        android:layout_below=""@id/urlContainer"" /&gt;

&lt;/LinearLayout&gt;
</pre>
<p>The above layout files using few of the strings which are defined in <code>strings.xml</code>. This file also contains the mandatory twitter parameters. Please do paste your own twitter <strong>consumer key</strong> and <strong>consumer secret</strong> obtained from twitter developer console (Step-1)</p>
<h4>strings.xml</h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;resources&gt;

    &lt;!-- Strings used in app ui--&gt;
    &lt;string name=""app_name""&gt;TwitterShare&lt;/string&gt;
    &lt;string name=""action_settings""&gt;Settings&lt;/string&gt;
    &lt;string name=""hello""&gt;Hello, &lt;/string&gt;
    &lt;string name=""login_instructions""&gt;Login to twiter&lt;/string&gt;
    &lt;string name=""share_instructions""&gt;Enter share message&lt;/string&gt;
    &lt;string name=""btn_login""&gt;Login to Twitter&lt;/string&gt;
    &lt;string name=""btn_share""&gt;Share&lt;/string&gt;

    &lt;!-- Twitter Configurations --&gt;
    &lt;string name=""twitter_callback""&gt;http://javatechig.android.app&lt;/string&gt;
    &lt;string name=""twitter_consumer_key""&gt;YOUR_CONSUMER_KEY_HERE&lt;/string&gt;
    &lt;string name=""twitter_consumer_secret""&gt;YOUR_CONSUMER_SECRET_HERE&lt;/string&gt;
    &lt;string name=""twitter_oauth_verifier""&gt;oauth_verifier&lt;/string&gt;
    &lt;!-- End Configurations --&gt;
&lt;/resources&gt;
</pre>
<h1>4. Application Manifest Permissions</h1>
<p>In the above two steps, we have declared the layout files and the strings used in the application. Before we getting into the massive piece of activity code, let us have a look into our application Manifest file. In this file, we have declared both the activities used in this application. Note, this application needs <code>android.permission.INTERNET</code> permission and so lets declare it.</p>
<h4>Manifest.xml</h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    package=""com.example.twittershare""
    android:versionCode=""1""
    android:versionName=""1.0"" &gt;

    &lt;uses-sdk
        android:minSdkVersion=""8""
        android:targetSdkVersion=""14"" /&gt;

    &lt;!-- Permission - Internet Connect --&gt;
    &lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;

    &lt;!-- Network State Permissions --&gt;
    &lt;uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE"" /&gt;

    &lt;application
        android:allowBackup=""true""
        android:icon=""@drawable/ic_launcher""
        android:label=""@string/app_name""
        android:theme=""@style/AppTheme"" &gt;
        &lt;activity
            android:name=""com.example.twittershare.MainActivity""
            android:label=""@string/app_name"" &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""android.intent.action.MAIN"" /&gt;

                &lt;category android:name=""android.intent.category.LAUNCHER"" /&gt;
            &lt;/intent-filter&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""android.intent.action.VIEW"" /&gt;

                &lt;category android:name=""android.intent.category.DEFAULT"" /&gt;
                &lt;category android:name=""android.intent.category.BROWSABLE"" /&gt;

                &lt;data
                    android:host=""t4jsample""
                    android:scheme=""oauth"" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
        &lt;activity
            android:name=""com.example.twittershare.WebViewActivity""
            android:label=""@string/app_name"" /&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</pre>
<h4>MainActivity.java</h4>
<pre class=""prettyprint lang-java"">package com.example.twittershare;

import java.io.InputStream;
import twitter4j.StatusUpdate;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.User;
import twitter4j.auth.AccessToken;
import twitter4j.auth.RequestToken;
import twitter4j.conf.Configuration;
import twitter4j.conf.ConfigurationBuilder;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.StrictMode;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity implements OnClickListener {
	
	/* Shared preference keys */
	private static final String PREF_NAME = ""sample_twitter_pref"";
	private static final String PREF_KEY_OAUTH_TOKEN = ""oauth_token"";
	private static final String PREF_KEY_OAUTH_SECRET = ""oauth_token_secret"";
	private static final String PREF_KEY_TWITTER_LOGIN = ""is_twitter_loggedin"";
	private static final String PREF_USER_NAME = ""twitter_user_name"";

	/* Any number for uniquely distinguish your request */
	public static final int WEBVIEW_REQUEST_CODE = 100;

	private ProgressDialog pDialog;

	private static Twitter twitter;
	private static RequestToken requestToken;
	
	private static SharedPreferences mSharedPreferences;

	private EditText mShareEditText;
	private TextView userName;
	private View loginLayout;
	private View shareLayout;

	private String consumerKey = null;
	private String consumerSecret = null;
	private String callbackUrl = null;
	private String oAuthVerifier = null;

	@SuppressLint(""NewApi"")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		/* initializing twitter parameters from string.xml */
		initTwitterConfigs();

		/* Enabling strict mode */
		StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
		StrictMode.setThreadPolicy(policy);

		/* Setting activity layout file */
		setContentView(R.layout.activity_main);

		loginLayout = (RelativeLayout) findViewById(R.id.login_layout);
		shareLayout = (LinearLayout) findViewById(R.id.share_layout);
		mShareEditText = (EditText) findViewById(R.id.share_text);
		userName = (TextView) findViewById(R.id.user_name);
		
		/* register button click listeners */
		findViewById(R.id.btn_login).setOnClickListener(this);
		findViewById(R.id.btn_share).setOnClickListener(this);

		/* Check if required twitter keys are set */
		if (TextUtils.isEmpty(consumerKey) || TextUtils.isEmpty(consumerSecret)) {
			Toast.makeText(this, ""Twitter key and secret not configured"",
					Toast.LENGTH_SHORT).show();
			return;
		}

		/* Initialize application preferences */
		mSharedPreferences = getSharedPreferences(PREF_NAME, 0);

		boolean isLoggedIn = mSharedPreferences.getBoolean(PREF_KEY_TWITTER_LOGIN, false);
		
		/*  if already logged in, then hide login layout and show share layout */
		if (isLoggedIn) {
			loginLayout.setVisibility(View.GONE);
			shareLayout.setVisibility(View.VISIBLE);

			String username = mSharedPreferences.getString(PREF_USER_NAME, """");
			userName.setText(getResources ().getString(R.string.hello)
					+ username);

		} else {
			loginLayout.setVisibility(View.VISIBLE);
			shareLayout.setVisibility(View.GONE);

			Uri uri = getIntent().getData();
			
			if (uri != null &amp;&amp; uri.toString().startsWith(callbackUrl)) {
			
				String verifier = uri.getQueryParameter(oAuthVerifier);

				try {
					
					/* Getting oAuth authentication token */
					AccessToken accessToken = twitter.getOAuthAccessToken(requestToken, verifier);

					/* Getting user id form access token */
					long userID = accessToken.getUserId();
					final User user = twitter.showUser(userID);
					final String username = user.getName();

					/* save updated token */
					saveTwitterInfo(accessToken);

					loginLayout.setVisibility(View.GONE);
					shareLayout.setVisibility(View.VISIBLE);
					userName.setText(getString(R.string.hello) + username);
					
				} catch (Exception e) {
					Log.e(""Failed to login Twitter!!"", e.getMessage());
				}
			}

		}
	}

	
	/**
	 * Saving user information, after user is authenticated for the first time.
	 * You don't need to show user to login, until user has a valid access toen
	 */
	private void saveTwitterInfo(AccessToken accessToken) {
		
		long userID = accessToken.getUserId();
		
		User user;
		try {
			user = twitter.showUser(userID);
		
			String username = user.getName();

			/* Storing oAuth tokens to shared preferences */
			Editor e = mSharedPreferences.edit();
			e.putString(PREF_KEY_OAUTH_TOKEN, accessToken.getToken());
			e.putString(PREF_KEY_OAUTH_SECRET, accessToken.getTokenSecret());
			e.putBoolean(PREF_KEY_TWITTER_LOGIN, true);
			e.putString(PREF_USER_NAME, username);
			e.commit();

		} catch (TwitterException e1) {
			e1.printStackTrace();
		}
	}

	/* Reading twitter essential configuration parameters from strings.xml */
	private void initTwitterConfigs() {
		consumerKey = getString(R.string.twitter_consumer_key);
		consumerSecret = getString(R.string.twitter_consumer_secret);
		callbackUrl = getString(R.string.twitter_callback);
		oAuthVerifier = getString(R.string.twitter_oauth_verifier);
	}

	
	private void loginToTwitter() {
		boolean isLoggedIn = mSharedPreferences.getBoolean(PREF_KEY_TWITTER_LOGIN, false);
		
		if (!isLoggedIn) {
			final ConfigurationBuilder builder = new ConfigurationBuilder();
			builder.setOAuthConsumerKey(consumerKey);
			builder.setOAuthConsumerSecret(consumerSecret);

			final Configuration configuration = builder.build();
			final TwitterFactory factory = new TwitterFactory(configuration);
			twitter = factory.getInstance();

			try {
				requestToken = twitter.getOAuthRequestToken(callbackUrl);

				/**
				 *  Loading twitter login page on webview for authorization 
				 *  Once authorized, results are received at onActivityResult
				 *  */
				final Intent intent = new Intent(this, WebViewActivity.class);
				intent.putExtra(WebViewActivity.EXTRA_URL, requestToken.getAuthenticationURL());
				startActivityForResult(intent, WEBVIEW_REQUEST_CODE);
				
			} catch (TwitterException e) {
				e.printStackTrace();
			}
		} else {

			loginLayout.setVisibility(View.GONE);
			shareLayout.setVisibility(View.VISIBLE);
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {

		if (resultCode == Activity.RESULT_OK) {
			String verifier = data.getExtras().getString(oAuthVerifier);
			try {
				AccessToken accessToken = twitter.getOAuthAccessToken(requestToken, verifier);

				long userID = accessToken.getUserId();
				final User user = twitter.showUser(userID);
				String username = user.getName();
				
				saveTwitterInfo(accessToken);

				loginLayout.setVisibility(View.GONE);
				shareLayout.setVisibility(View.VISIBLE);
				userName.setText(MainActivity.this.getResources().getString(
						R.string.hello) + username);

			} catch (Exception e) {
				Log.e(""Twitter Login Failed"", e.getMessage());
			}
		}

		super.onActivityResult(requestCode, resultCode, data);
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.btn_login:
			loginToTwitter();
			break;
		case R.id.btn_share:
			final String status = mShareEditText.getText().toString();
			
			if (status.trim().length() &gt; 0) {
				new updateTwitterStatus().execute(status);
			} else {
				Toast.makeText(this, ""Message is empty!!"", Toast.LENGTH_SHORT).show();
			}
			break;
		}
	}

	class updateTwitterStatus extends AsyncTask&lt;String, String, Void&gt; {
		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			
			pDialog = new ProgressDialog(MainActivity.this);
			pDialog.setMessage(""Posting to twitter..."");
			pDialog.setIndeterminate(false);
			pDialog.setCancelable(false);
			pDialog.show();
		}

		protected Void doInBackground(String... args) {

			String status = args[0];
			try {
				ConfigurationBuilder builder = new ConfigurationBuilder();
				builder.setOAuthConsumerKey(consumerKey);
				builder.setOAuthConsumerSecret(consumerSecret);
				
				// Access Token
				String access_token = mSharedPreferences.getString(PREF_KEY_OAUTH_TOKEN, """");
				// Access Token Secret
				String access_token_secret = mSharedPreferences.getString(PREF_KEY_OAUTH_SECRET, """");

				AccessToken accessToken = new AccessToken(access_token, access_token_secret);
				Twitter twitter = new TwitterFactory(builder.build()).getInstance(accessToken);

				// Update status
				StatusUpdate statusUpdate = new StatusUpdate(status);
				InputStream is = getResources().openRawResource(R.drawable.lakeside_view);
				statusUpdate.setMedia(""test.jpg"", is);
				
				twitter4j.Status response = twitter.updateStatus(statusUpdate);

				Log.d(""Status"", response.getText());
				
			} catch (TwitterException e) {
				Log.d(""Failed to post!"", e.getMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			
			/* Dismiss the progress dialog after sharing */
			pDialog.dismiss();
			
			Toast.makeText(MainActivity.this, ""Posted to Twitter!"", Toast.LENGTH_SHORT).show();

			// Clearing EditText field
			mShareEditText.setText("""");
		}

	}
}
</pre>
<h4>WebViewActivity.java</h4>
<pre class=""prettyprint lang-java"">package com.example.twittershare;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.webkit.WebView;
import android.webkit.WebViewClient;

public class WebViewActivity extends Activity {
	
	private WebView webView;
	
	public static String EXTRA_URL = ""extra_url"";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		setContentView(R.layout.activity_webview);
		
		setTitle(""Login"");

		final String url = this.getIntent().getStringExtra(EXTRA_URL);
		if (null == url) {
			Log.e(""Twitter"", ""URL cannot be null"");
			finish();
		}

		webView = (WebView) findViewById(R.id.webView);
		webView.setWebViewClient(new MyWebViewClient());
		webView.loadUrl(url);
	}


	class MyWebViewClient extends WebViewClient {
		
		@Override
		public boolean shouldOverrideUrlLoading(WebView view, String url) {

			if (url.contains(getResources().getString(R.string.twitter_callback))) {
				Uri uri = Uri.parse(url);
				
				/* Sending results back */
				String verifier = uri.getQueryParameter(getString(R.string.twitter_oauth_verifier));
				Intent resultIntent = new Intent();
				resultIntent.putExtra(getString(R.string.twitter_oauth_verifier), verifier);
				setResult(RESULT_OK, resultIntent);
				
				/* closing webview */
				finish();
				return true;
			}
			return false;
		}
	}
}
</pre>
<h1>5. Output</h1>
<p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""How to integrate twitter in android application"" class=""alignnone size-full wp-image-5708"" height=""384"" loading=""lazy"" src=""/media/uploads/articles/266/Screen-Shot-2014-09-11-at-12.16.37-AM.png"" srcset="""" width=""526""/></a></center></p>
<h1>6. Download Source Code</h1>
<p>Download complete example source code from <strong><a href=""https://github.com/javatechig/Twitter-Sharing-Example-Android"" rel=""nofollow noopener noreferrer"" target=""_blank"">GitHub</a></strong>.</p>
",0,"standard","post"
"Count line word and characters in file","count-line-word-characters-file","In this example we&#8217;ll see how to count line, word and characters in file. package com.javatechig; import java.io.BufferedReader;&hellip;
","LIVE","<p>In this example we’ll see how to count line, word and characters in file.</p>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;

public class FileCountExample {

	public static void main(String[] args) {
		File file = new File(""file1.txt"");

		if (file.exists()) {
			System.out.println(""Total Lines="" + getLineCount(file));
			System.out.println(""Total Words="" + getWordCount(file));
			System.out.println(""Total Characters="" + getCharacterCount(file));
		} else {
			System.out.println(""File does not exists!"");
		}
	}

	/**
	 * Use a BufferedReader to read the file line-by-line using readLine(). Then
	 * split each line on whitespace using String.split(""\s"") and the size of
	 * the resulting array is the total words count.
	 */
	private static int getWordCount(File file) {
		int count = 0;
		try {
			FileReader fr = new FileReader(file);
			BufferedReader br = new BufferedReader(fr);

			String line = br.readLine();
			while (line != null) {
				String[] parts = line.split("" "");
				for (String w : parts) {
					count++;
				}
				line = br.readLine();
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return count;

	}

	private static int getCharacterCount(File file) {
		FileReader fr = null;
		int charCount = 0;

		try {
                    fr = new FileReader(file);
		    while (fr.read() &gt; -1) {
		       charCount++;
   		    }

		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		finally {
                   if (null != fr)
                	try {
                           fr.close();
			} catch (IOException e) {
			     e.printStackTrace();
		     }
		}
		return charCount;
	}

	private static int getLineCount(File file) {
		int linenumber = 0;
		FileReader fr = null;
		try {
			fr = new FileReader(file);

			/**
			 * buffered character-input stream that keeps track of line numbers
			 */
			LineNumberReader lnr = new LineNumberReader(fr);
			while (lnr.readLine() != null) {
				linenumber++;
			}
			lnr.close();

			return linenumber;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		finally {
			if (null != fr)
			   try {
				r.close();
			   } catch (IOException e) {
				e.printStackTrace();
			}
		}
		return linenumber;
	}
}</pre>
",0,"standard","post"
"How to delete and rename a file in java","how-to-delete-and-rename-a-file-in-java","This post provides sample program explaining how to delete and rename a file in java Rename file in Java&hellip;
","LIVE","<p>This post provides sample program explaining how to delete and rename a file in java</p>
<h3>Rename file in Java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.io.File;
import java.io.IOException;

public class RenameFile {

	public static void main(String[] args) {

		/* File (or directory) with old name */
		File file = new File(""/Users/Neel/Documents/Workspace/file.txt"");

		/* File (or directory) with new name */
		File file2 = new File(""/Users/Neel/Documents/Workspace/new-file.txt"");

		if (file2.exists()) {
			try {
				throw new java.io.IOException(""File already exists!"");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		/* Rename file */
		boolean success = file.renameTo(file2);
		if (!success) {
			System.out.println(""Couldn't rename file!"");
		} else {
			System.out.println(""File renamed successfully!"");
		}
	}

}</pre>
<h3>Delete file in Java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.io.File;

public class DeleteFile {

	public static void main(String[] args) {
		try {
			File file = new File(
					""/Users/Neel/Documents/Workspace/file1.txt"");

			if (file.delete()) {
				System.out.println(file.getName() + "" is deleted!"");
			} else {
				System.out.println(""Delete operation is failed."");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
</pre>
",0,"standard","post"
"Copy file from one folder to another in java","copy-file-one-folder-another-java","This example explains how to Copy file from one folder to another in java. package com.javatechig; import java.io.File;&hellip;
","LIVE","<p>This example explains how to Copy file from one folder to another in java.</p>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;

public class CopyFile {

	public static void main(String[] args) {
		File sourceFile = new File(
				""/Users/Neel/Documents/Workspace/file1.txt"");

		File destFile = new File(
				""/Users/Neel/Documents/Workspace/file2.txt"");

		/* verify whether file exist in source location */
		if (!sourceFile.exists()) {
			System.out.println(""Source File Not Found!"");
		}

		/* if file not exist then create one */
		if (!destFile.exists()) {
			try {
				destFile.createNewFile();
				
				System.out.println(""Destination file doesn't exist. Creating one!"");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		FileChannel source = null;
		FileChannel destination = null;

		try {

			/**
			 * getChannel() returns unique FileChannel object associated a file
			 * output stream.
			 */
			source = new FileInputStream(sourceFile).getChannel();

			destination = new FileOutputStream(destFile).getChannel();

			if (destination != null &amp;&amp; source != null) {
				destination.transferFrom(source, 0, source.size());
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		finally {
			if (source != null) {
				try {
					source.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (destination != null) {
				try {
					destination.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}
</pre>
",0,"standard","post"
"Copying the Contents of One text file to Another in Java","copying-contents-one-text-file-another-java","In this example, we will see a sample program to copying the contents of one text file to another in Java.
","LIVE","<p>In this example, we will see a sample program to copying the contents of one text file to another in Java.</p>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class CopyFileContent {

	public static void main(String[] args) {

		/* Source file, from which content will be copied */
		File sourceFile = new File(""file1.txt"");

		/* destination file, where the content to be pasted */
		File destFile = new File(""file2.txt"");
		
		/* if file not exist then create one */
		if (!destFile.exists()) {
			try {
				destFile.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		InputStream input = null;
		OutputStream output = null;

		try {

			/* FileInputStream to read streams */
			input = new FileInputStream(sourceFile);

			/* FileOutputStream to write streams */
			output = new FileOutputStream(destFile);

			byte[] buf = new byte[1024];
			int bytesRead;

			while ((bytesRead = input.read(buf)) &gt; 0) {
				output.write(buf, 0, bytesRead);
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		finally {
			try {

				if (null != input) {
					input.close();
				}
				
				if (null != output) {
					output.close();
				}

			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

}</pre>
",0,"standard","post"
"How to Create a Text File in Java","how-to-create-a-text-file-in-java","In this article we will see the sample code to create a text file in java.In this example, we&#8217;ll use the PrintWriter class.
","LIVE","<p>In this article we will see how to create a text file in java. In this example, we’ll use the <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/PrintWriter.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><code>PrintWriter</code></a> class.</p>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

public class CreateTextFile {

	public static void main(String[] args) {
		PrintWriter writer = null;
		try {
			/* Create a new file with UTF-8 encoding */
			writer = new PrintWriter(""file1.txt"", ""UTF-8"");

			/* Write content to file */
			writer.println(""Hello, this is a binary file."");
			writer.println(""Put your file contents here..."");

			writer.close();			
			System.out.println(""New File Created!"");			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

	}
}
</pre>
",0,"standard","post"
"Implementing Singleton Design Pattern in Java","singleton-design-pattern-in-java","Master the concept of Singleton classes, Java Singleton Design Pattern, and its practical application. Explore real-world examples and ensure thread safety in your Singleton class.","LIVE","<p id=""3223a22a-1c73-4319-90c5-6ee00a838709"" class="""">Singleton design pattern belongs to the creational family of patterns that governs the object instantiation process. </p><p id=""42c2bdc5-d8fc-4ea9-8685-da250883d8f2"" class="""">This pattern ensures at most one instance of a particular class is ever created in your application. Following are some of the real-time examples listed below.</p><ul id=""ef7e4794-e8b5-4395-bc03-35c096f6096b"" class=""bulleted-list""><li style=""list-style-type:disc""><strong>Project Configuration:</strong> Project configurations are read and loaded into memory once and used multiple times throughout the application lifecycle. Singleton is the best choice to implement that.</li></ul><ul id=""4673f222-bef2-43b4-86d0-a4070ba12134"" class=""bulleted-list""><li style=""list-style-type:disc""><strong>Application Log:</strong> The Logger object will be used globally everywhere in your application. It must be initialized once and used everywhere.</li></ul><ul id=""33485669-f698-447a-a050-516333c5c217"" class=""bulleted-list""><li style=""list-style-type:disc""><strong>Analytics and Reporting:</strong> If you are using some kind of data Analytics or tracking service, then you must design them to be singleton so that they are initialized once and used everywhere.</li></ul><p style=""list-style-type: disc;""><img style=""width: 978px;"" src=""https://media.stacktips.com/media/uploads/summernote/singleton-design-pattern_1_6HU1DL5.jpg""><br></p><p id=""c04f4669-74aa-4b90-bfed-1e59fbb558b2"" class="""">Notice that the <code>Singleton</code> class has a private static instance variable named <code>instance</code>. The default constructor of <code>Singleton</code> class is made private to prevent other class to instantiate it. </p><p id=""68287668-f709-4916-baa1-4473a77ad815"" class="""">The <code>getInstance()</code> method is delcared in the static scope to make the method accessible globally. The <code>getInstance()</code> method returns the singleton object.</p><h2 id=""3ef191cb-2ef8-4c97-92d9-6ac3e60e53e9"" class="""">Implementing the Singleton Class</h2><p id=""e4c82c4b-8d81-41e4-a552-e7d005498c4a"" class="""">To make a class as singleton, you have to:</p><ol type=""1"" id=""20743537-a853-45fc-910a-f91ed3a92d89"" class=""numbered-list"" start=""1""><li>Make the default constructor private. Private constructor prevents the direct instantiation of the object from other classes.</li></ol><ol type=""1"" id=""1b1b6963-3871-49c4-b40a-00f44dd67839"" class=""numbered-list"" start=""2""><li>Create a public static <code>getInstance()</code> method. A member declared as static can be accessed without creating an object using the new operator. This method returns the instance of the singleton class.</li></ol><ol type=""1"" id=""7a438356-8cc2-420e-b7de-fb3ddf5c5c35"" class=""numbered-list"" start=""3""><li>Lazy initialization is preferable to create an object on first use.</li></ol><h3 id=""1fd32661-1aaa-4eeb-9011-f15121f26224"" class="""">Singleton with Lazy Initialization</h3><p id=""3aaf4c31-999b-4cc9-9fbd-8caee7a92c1e"" class=""""><strong>Example: </strong>Creating a singleton class using lazy initialization</p><pre id=""24856316-262b-4798-bf71-9326473d5197"" class=""code code-wrap""><code>class Singleton {
	private static Singleton instance;

	private Singleton() {
	}

	public static Singleton getInstance() {
		if (instance == null) {
			instance = new Singleton();
		}
		return instance;
	}

	public void method1() {
		System.out.println(""Hurray! I am method1 from Singleton!"");
	}
}</code></pre><p id=""c0b71330-e4fd-4dec-bd70-65584b4d1ed4"" class="""">Let us now test the singleton initialization:</p><pre id=""0963f6f0-6068-4638-bc09-a61d62319f6f"" class=""code""><code>Singleton object = new Singleton();
object.method1();</code></pre><p id=""90dc9716-e0ed-42bd-a899-69cef9e56507"" class="""">???The above code will result in compilation error. As the default constructor is made private, you are not allowed to create instance using <code>new</code> keyword. Now let us use the <code>getInstance()</code> method to create the instance of Singleton class.</p><pre id=""130aca04-f2d7-4449-809a-d950a69182f9"" class=""code code-wrap""><code>Singleton object = Singleton.getInstance();
object.method1();</code></pre><p id=""ec31c064-fbc8-49dd-9b0b-d85254b9e1db"" class="""">This is how we create a Singleton class using lazy initialization. The <code>getInstance()</code> method instantiating the class for the first use.</p><h3 id=""6192215b-f296-4557-9821-ec771f5d4385"" class="""">Singleton and Thread Safety</h3><p id=""f9e5f414-3f9a-4455-8515-5d95a7be01cd"" class="""">The above method of creating singleton class is not thread safe. Two instances of Singleton class will be created if the <code>getInstance()</code> called simultaneously by two threads. </p><p id=""c478d931-79f4-44a0-b038-a1f93b2982a3"" class="""">This issue can be avoided by making the <code>getInstance()</code> method <code>synchronized</code>. This way we force every thread to wait for its turn, before it executes. i.e. no two threads can be entered into <code>getInstance()</code> method at the same time.</p><pre id=""6776ca7d-88a8-4e90-9521-0ba97eb547cd"" class=""code code-wrap""><code>public static synchronized Singleton getInstance() {
	if (instance == null) {
		instance = new Singleton();
	}
  return instance;
}</code></pre><p id=""b0f2586a-ae97-468c-91a8-688f623a9bd3"" class="""">The above implementation will answer to the thread safety problem, however, the <code>synchronized</code> methods are expensive and can have a serious performance hit. </p><p id=""17cd75e7-2c1c-416e-9336-d918118ec3c3"" class="""">We can optimize the above code and add a  null check before entering into the <code>synchronization</code> block.</p><pre id=""260fc482-1d0e-4b81-9c25-34cc19b8102f"" class=""code code-wrap""><code>public static synchronized Singleton getInstance() {
	if (instance == null) {	
		synchronized (Singleton.class) {
				if (instance == null) {
					instance = new Singleton();
				}
			}	
		}	
	return instance;
}</code></pre><h3 id=""08ac6be1-b453-4b69-b83e-658d6338d567"" class="""">Singleton with Early Initialization</h3><p id=""c6bbd137-1b48-4d88-940b-968f7b247dc9"" class="""">Using early initialization we will initialize upfront before your class is being loaded. This way you don’t need to check for synchronization as it is initialized before being used ever.</p><pre id=""b1ff4ec9-0220-4007-84f8-eb2812d15d47"" class=""code code-wrap""><code>class Singleton {
	private static Singleton instance = new Singleton();

	private Singleton() {
	}

	public static Singleton getInstance() {
		return instance;
	}

	public void method1() {
		System.out.println(""Hurray! I am method1 from Singleton!"");
	}
}</code></pre><h2 id=""b246de56-20c4-4892-8d2a-db920fe5b764"" class="""">Singleton and Object Cloning</h2><p id=""f074f1b3-b83a-4a97-bf91-480067c5aed1"" class="""">Java has the ability to create a copy of the object with similar attributes and state form original object. This concept in java is called cloning. </p><p id=""ed0f3fba-059e-4f16-9be2-ac43d40d9460"" class="""">To implement cloning, we have to implement <code>java.lang.Cloneable</code> interface and override <code>clone()</code> method from Object class. </p><p id=""ab0ebd20-2e5c-48b2-8fe5-4d853067dbc5"" class="""">It is a good idea to prevent cloning in a singleton class. To prevent cloning on singleton object, let us explicitly throw <code>CloneNotSupportedException</code> exception in clone() method.</p><pre id=""5df68a80-afe2-41fa-90ea-21dd4d952d22"" class=""code code-wrap""><code>class Singleton implements Cloneable {
	private static Singleton instance;

	private Singleton() {
	}

	public static synchronized Singleton getInstance() {
		if (instance == null) {
			synchronized (Singleton.class) {
				if (instance == null) {
					instance = new Singleton();
				}
			}
		}
		return instance;
	}

	@Override
	public Object clone() throws CloneNotSupportedException {
		throw new CloneNotSupportedException();
	}

	public void method1() {
		System.out.println(""Hurray! I am method1 from Singleton!"");
	}
}</code></pre><h2 id=""63e9c33b-8e2a-4dfa-9a75-9e2195360096"" class="""">Singleton and Serialization</h2><p id=""50913518-2f01-4e43-bd1f-36e30182346c"" class="""">Serialization in Java allows to convert the state of an object into a stream of bytes so that it can easily be stored or transferred. Once the object is serialized, you can deserialize it, back to object from the byte stream. </p><p id=""60aab5dc-4432-44e8-8b86-3c234082310c"" class="""">If a singleton class is meant to be serialized, it will end up creating duplicate objects. Let us have a look into the example below,</p><pre id=""5d319822-8030-4bb0-953b-f0d45e2da5bf"" class=""code code-wrap""><code>import java.io.Serializable;

class Singleton implements Cloneable, Serializable {
	private static final long serialVersionUID = 1L;
	private static Singleton instance;
	private int value;

	private Singleton() {
	}

	public static synchronized Singleton getInstance() {
		if (instance == null) {
			synchronized (Singleton.class) {
				if (instance == null) {
					instance = new Singleton();
				}
			}
		}
		return instance;
	}

	@Override
	public Object clone() throws CloneNotSupportedException {
		throw new CloneNotSupportedException();
	}

	public void method1() {
		System.out.println(""Hurray! I am method1 from Singleton!"");
	}

	public int getValue() {
		return value;
	}

	public void setValue(int value) {
		this.value = value;
	}
}</code></pre><p id=""46f68b7d-8d45-41d3-b112-e1e65cccd197"" class="""">In this example the Singleton class is implementing the <code>java.io.Serializable</code> interface, which means the state of its object can be persisted.</p><p id=""ea5310f7-56fe-481d-85bb-137da7e4bda8"" class="""">Now, let us save the object into a file and then retrieve it later. </p><pre id=""3b9a421d-f6eb-4ba3-898f-6bf2d65d8ae8"" class=""code code-wrap""><code>public static void main(String[] args) {
    Singleton instanceOne = Singleton.getInstance();
    instanceOne.setValue(10);

    try {
        FileOutputStream fos = new FileOutputStream(""filename.txt"")
        ObjectOutput out = new ObjectOutputStream(fos);
        out.writeObject(instanceOne);
        out.close();
        instanceOne.setValue(20);

        FileInputStream fis = new FileInputStream(""filename.txt"")
        ObjectInput in = new ObjectInputStream(fis);
        Singleton instanceTwo = (Singleton) in.readObject();
        in.close();

        System.out.println(""instanceOne:"" + instanceOne.getValue());
        System.out.println(""instanceTwo:"" + instanceTwo.getValue());
    } catch (Exception e) {
        e.printStackTrace();
    }
}</code></pre><p id=""cffb9e85-c9cb-4978-b880-2fc343170df1"" class="""">This will print different values, which means that they are two different objects. Here we are violating the singleton principle. </p><p id=""8b6170fe-b5b0-43e6-bfa6-975313cc1dd9"" class="""">To solve this issue, we need to include <code>readResolve()</code> method in our <code>Singleton</code> class. This method will be invoked before the object is deserialized and here we will call the <code>getInstance()</code> method to return the same object after deserialization. </p><pre id=""b71e9b1e-0480-434a-8221-7a1ee6e6d870"" class=""code code-wrap""><code>class Singleton implements Cloneable, Serializable {
	private static final long serialVersionUID = 1L;
	private static Singleton instance;
	private int value;

	private Singleton() {
	}

	public static synchronized Singleton getInstance() {
		if (instance == null) {
			synchronized (Singleton.class) {
				if (instance == null) {
					instance = new Singleton();
				}
			}
		}
		return instance;
	}
  
  protected Object readResolve() {
     return getInstance();
  }

	@Override
	public Object clone() throws CloneNotSupportedException {
		throw new CloneNotSupportedException();
	}

	public void method1() {
		System.out.println(""Hurray! I am method1 from Singleton!"");
	}

	public int getValue() {
		return value;
	}

	public void setValue(int value) {
		this.value = value;
	}
}</code></pre><h2 id=""558b79da-2ab6-4184-9274-66b3d5731c3e"" class="""">Noteworthy</h2><ul id=""5ac39e1c-2fc3-495c-b1ef-b24cca81bd50"" class=""bulleted-list""><li style=""list-style-type:disc"">Singleton classes are used sparingly. Do not think of this pattern, unless you know what you are doing. As the object is created in the global scope, this is riskier in resource-constrained platforms.</li></ul><ul id=""c57d8ca8-de24-4dfe-bd72-4b4eeb5d1c07"" class=""bulleted-list""><li style=""list-style-type:disc"">Beware of object cloning. Double check and block object’s clone method</li></ul><ul id=""60bb0999-ce13-478c-92a4-852fb0fa2470"" class=""bulleted-list""><li style=""list-style-type:disc"">Careful when multiple threads accessing the singleton class</li></ul><ul id=""b5c9296c-51e7-481c-b861-4188d7aab532"" class=""bulleted-list""><li style=""list-style-type:disc"">Careful of multiple class loaders they can break your singleton</li></ul><ul id=""247ec126-6b23-43c6-bfd7-60e213f3a25b"" class=""bulleted-list""><li style=""list-style-type:disc"">Implement strict type if your singleton class is serialized</li></ul>",0,"standard","post"
"TestFairy – Android App Beta Testing and Deployment Platform","testfairy-android-app-beta-testing-platform","TestFairy makes Android beta testing painless. This satisfies all the wish-list to stand out as an best alternative for TestFlight. In this post we&#8217;ll see TestFairy features, advance reporting and TestFairy command line uploader script
","LIVE","
<p>Testing apps and getting feedback from users has never been an easy task in mobile development. Managing alpha and beta tests with internal and external testers alike, is a special kind of madness. So, what service will make testing Android apps easier? I’ve compiled a few below, and give you some highlights on my pick <a href=""http://testfairy.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">TestFairy</a>.</p>
<h2><span id=""1_Beta_testing_and_its_importance"">1. Beta testing and its importance</span></h2>
<p>If we cast our memories back a few years, mobile apps often meant market presence for companies, but today they’re serious money-making businesses. If you plan to make money in the fiercely-competitive world of mobile apps, then you have to seriously consider every aspect of your application: from design and usability to performance and stability.</p>
<p>Beta testing helps you take those aforementioned considerations into account, and address them before you’re finished app is pushed into the wild.</p>
<h2><span id=""2_Choosing_right_beta_platform"">2. Choosing right beta platform</span></h2>
<p>As there are numerous tools available, each that claim to be more useful than the other, it’s important to consider the following criteria.</p>
<ul>
<li>Enterprise app store: Ability to create your own private app store and restrict access to external users</li>
<li>User and test group management</li>
<li>Ability for beta users to download app easily and provide their feedback</li>
<li>SDK for integration with the apps in beta environment</li>
<li>Multiple app stores, multiple groups and ability to publish multiple applications</li>
<li>Easy app distributions: over-air and support for tester apps</li>
<li>Device management: list and control users and devices who have access to apps</li>
<li>Notifying users of new versions</li>
<li>Crash reports (symbolication)</li>
<li>Support for Continuous Integration (CI) tools like Bamboo, Jenkins, etc.</li>
<li>And perhaps most importantly, a reasonable price</li>
</ul>
<h2><span id=""3_Beta_testing_in_Android"">3. Beta testing in Android</span></h2>
<p>Testing the application and getting feedback from you user is never been easy in mobile application development lifecycle. Each mobile platform follows certain steps to build and distribution process. Normally the build and distribution process differs from platform to platform.</p>
<p>Here, in this section we will discuss Android specific beta testing and distribution tool. There are various platforms out there in market, that provides solution for distributing and managing the beta testing workflow. Some of the major ones are.</p>
<ol>
<li>TestFlight (Suspended Support for Android)</li>
<li>TestFairy</li>
<li>AppBlade</li>
<li>HockeyApp</li>
<li>Google Play Native App Beta Testing</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Beta distribution platforms feature comparisons"" class=""size-medium wp-image-5416"" height=""393"" loading=""lazy"" src=""/media/uploads/articles/273/Beta-distribution-platforms-feature-comparisons-620x393.png"" srcset="""" width=""620""/></a></p>
<p align=""justify"">During my initial exploration on this matter, TestFlight arose as one the best platforms for build distribution, but its dominance came to an abrupt halt when Apple acquired it and shut down its Android operations.</p>
<p>In my hunt to find a replacement, <a href=""https://appblade.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">App Blade</a>, <a href=""https://support.google.com/googleplay/android-developer/answer/3131213?hl=en"" rel=""nofollow noopener noreferrer"" target=""_blank"">Google Play</a> and <a href=""http://hockeyapp.net/features/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Hockey App</a> emerged as solid options, but TestFairy leads the pack. In fact, it provides awesome support and documentation for abandoned TestFlight users so they can easily migrate over.</p>
<h2><span id=""4_How_testFairy_works"">4. How testFairy works</span></h2>
<p>TestFairy follows very simple steps while it comes to distributing the build. All you need to do is just upload your android build (.apk) file to your TestFairy account and invite the beta testers. Once you upload the build, TestFairy server process your apk file and inject the required code to your apk. All this process takes places in the background, and you don’t have to do anything for this.</p>
<p>Once your build is processed and ready for download, you can invite beta testers via their email or from TestFairy official community page. And now, you are all done. Just sit back and relax. Once users start playing around with the app, you will get to see the reports real time.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""testfairy-archiecture"" class=""alignnone size-medium wp-image-5420"" height=""409"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/273/testfairy-archiecture-620x409.png"" srcset="""" width=""620""/></a></p>
<h2><span id=""5_TestFairy_highlights"">5. TestFairy highlights</span></h2>
<ul>
<li>Test Users And Group Management</li>
<li>Test fairy allows you to invite users and provide role based user access. You can be either an administrator, developer or a tester.</li>
<li>You can define multiple administrators to control different projects (Enterprise license only)</li>
<li>You are allowed till maximum of 500 testers for any free type account. However the enterprise license goes endless.</li>
<li>The free account can host maximum of 10 applications</li>
<li>Once a new version of the application is available, it notifies test user with email and a link to download the application. Alternatively user can download the TestFairy testers app and browse and install the available application versions.</li>
</ul>
<h3><span id=""51Advance_reporting"">5.1. Advance reporting</span></h3>
<ul>
<li>Know how much time spent on testing each build.</li>
<li>Geo chart, gives you the information on the different location the application is tested from.</li>
<li>You can also have the application deep analysis like Activities per device name, activities per session, checkpoints, etc.</li>
<li>Coverage information, including OS coverage, resolution coverage device demographics. You can see the chart of activities, and fragments covered per devices, sessions and users that participated in testing this project. This info will help you verify that your testers went through all the app’s activities or fragments and in case they did not, you will easily understand where and what should be improved.</li>
<li>TestFairy takes screenshots and record videos of each application test sessions. This sometimes help to reproduce the bugs which was never been easy to reproduce.</li>
</ul>
<h3><span id=""52_Stats"">5.2. Stats</span></h3>
<p>A geographical chart gives you an idea of where your app is being tested from, while coverage information includes details on operating systems and device resolutions. What’s more, you can see a chart of activities and fragments covered per device, as well as sessions and users that participated in testing.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""TestFairy Geo Chat"" class=""size-medium wp-image-5415"" height=""336"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/273/testfairy-geo-chart-620x336.png"" srcset="""" width=""620""/></a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""TestFairy Advance Reports"" class=""size-medium wp-image-5414"" height=""180"" loading=""lazy"" src=""/media/uploads/articles/273/resoluations-device-and-android-os-charts-620x180.png"" srcset="""" width=""620""/></a></p>
<p><a href=""https://www.youtube.com/watch?v=g0nQ3oMhdjw"" rel=""nofollow noopener noreferrer"" target=""_blank"">Checkout this video</a> for more report examples.</p>
<p>Checkpoints help you to monitor when a tester has reached key points in your app, such as making an in-app purchase. To monitor checkpoints, you don’t even need to integrate with their API, you just use a simple code snippet to register a checkpoint.</p>
<p>For example, a purchase could be tracked like so:</p>
<pre>//Purchase started
Log.v(""testfairy-checkpoint"", ""Purchase Initiated"");
// your code to make the purchase
..
Log.v(""testfairy-checkpoint"", ""Purchase Successful!"");
</pre>
<h3><span id=""53_Performance_reporting"">5.3. Performance reporting</span></h3>
<p align=""justify"">Here’s the kicker: TestFairy monitors each and every possible aspect of an application and generates reports. It monitors sessions, battery life, CPU usage, allocated runtime memory, threads and more. All this, again, with no additional configuration or integration of their SDK.</p>
<h3><span id=""54_Visual_comparison"">5.4. Visual comparison</span></h3>
<p>In addition to videos of user sessions, TestFairy takes screenshots of each activity and fragments on the different devices applications are tested on. You can filter the screen grabs by activity or fragment, and can spot the differences across devices.</p>
<h3><span id=""55_Heatmap_analysis"">5.5. Heatmap analysis</span></h3>
<p>Heatmap analysis provides the information on how user is using your application. As you can see in the image below, heatmap report will give the brief idea of the buttons, or widgets clicked by user and what’s trendy on a particular screen. This report is a visual screen shot of the application screen (a sample below). This sometimes helps in taking serious business decisions. Like if you are performing testing with some of your external consultants, you can capture the areas it is covered and which are not.</p>
<figure aria-describedby=""caption-attachment-5413"" class=""wp-caption alignnone"" id=""attachment_5413"" style=""width: 523px""><a href=""http://stacktips.com"" target=""_self""><img alt=""Heatmap Analysis Report"" class=""size-full wp-image-5413"" height=""449"" loading=""lazy"" src=""/media/uploads/articles/273/heatmap-analysis.png"" srcset="""" width=""523""/></a><figcaption class=""wp-caption-text"" id=""caption-attachment-5413"">Heat map Analysis Report</figcaption></figure>
<h3><span id=""56_Crash_reporting"">5.6. Crash reporting</span></h3>
<p>Crash reporting is yet another important feature, that every developers need it. It helps in identifying the defect root and the place of its occurrence. This helps for the quick root cause analysis and fix the issue before making the product live. TestFairy records the video and takes screenshot sequences for each crash log.</p>
<p>Again, TestFairy stands out as you don’t have to do any coding or no integration to their SDK is required. Everything happens in the background while you upload your build. This feature may not be as advanced as “Crashlytics”, but it fulfills the basic needs for identifying the crash root cause.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Testfairy Crash Reports"" class=""size-medium wp-image-5412"" height=""175"" loading=""lazy"" src=""/media/uploads/articles/273/testfairy-crash-reports-620x175.png"" srcset="""" width=""620""/></a></p>
<h3><span id=""57_Beta_tester_feedback"">5.7. Beta tester feedback</span></h3>
<p>Along with your video feedback and crash reports, an enterprise account allows for collecting feedback from individual testers, who simply shake the device to send a message.</p>
<h2><span id=""6_Enterprise_license"">6. Enterprise license</span></h2>
<p>TestFairy provides fairly many options to the free users. Free account is limited to number of applications, testers and group. There is no official record for the application limit on their website, but it is restricted to 10 apps (Information taken from personal interview with TestFairy CEO “Yair Bar-On”). Below are some of the enterprise license feature highlights</p>
<ol>
<li>Enterprise account support unlimited apps, users and distribution list</li>
<li>White labeling for your enterprise account. You can have you own label and customization.</li>
<li>Advance reporting like heatmap analysis, CPU and memory usages</li>
<li>Taking beta testers feedback</li>
<li>Crash reporting with series of screenshots and video recording</li>
</ol>
<h2><span id=""7_CI_integration"">7. CI integration</span></h2>
<p>TestFairy is very simple when it comes to integrate with CI (Continuous integration) tools like Bamboo or Jenkins. CI tools can use the below script to upload the scripts</p>
<pre>curl    --sslv3 https://app.testfairy.com/api/upload 
-F api_key='YOUR API KEY HERE' 
-F apk_file=@trunk/bin/YourApplication.apk 
-F metrics='cpu,network,logcat' 
-F testers_groups='YOUR_DISTRIBUTION_LIST' 
-F comment='What’s new in this build?'
</pre>
<h2><span id=""8_TestFairy_command_line_uploader"">8. TestFairy command line uploader</span></h2>
<p>Once a build is uploaded, TestFairy process the build and it do some dynamic code injection. It again sign the application with keystore before the build is ready to download. And hence, if your application using features that are dependent on your production keystore key then, those features will fail to work in TestFairy generated build. Such features includes Google Map, In-App Purchases, Google Cloud Messaging (GCM) etc. To avoid such issues, with the <a href=""https://github.com/testfairy/command-line-uploader"" rel=""nofollow noopener noreferrer"" target=""_blank"">command line uploader script</a>, you can send TestFairy builds signed with your production keystore key, which makes sure that features dependent on Google Maps, Google Cloud Messaging and the like work.</p>
<h2><span id=""9_Additional_resources"">9. Additional resources</span></h2>
<ol>
<li><a href=""https://github.com/testfairy/testfairy-gradle-plugin"" rel=""nofollow noopener noreferrer"" target=""_blank"">Gradle / Android Studio Plugin</a></li>
<li><a href=""https://github.com/testfairy/command-line-uploader"" rel=""nofollow noopener noreferrer"" target=""_blank"">Command line uploader</a></li>
<li><a href=""http://docs.testfairy.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">TestFairy API Documentation</a></li>
</ol>
<h2><span id=""10_Which_works_for_you"">10. Which works for you?</span></h2>
<p align=""justify"">Clearly, TestFairy has treated me well, but what works for you? If I neglected to list an alternative — or one I did mention does the trick for you — let me know in the comments! If you’d like to give TestFairy a try, take advantage of their free account, which allows for 10 applications and a maximum of 500 testers.</p>
",0,"standard","post"
"Android Service Example","android-service-example","In this tutorial we will learn how to create a service, and service lifecycle methods. A service is a application component used to perform long running tasks in background. A service can run in the background indefinitely, even if component that started the service is destroyed
","LIVE","
<h1><span id=""1_Introduction_toService"">1. Introduction to Service</span></h1>
<p style=""text-align: justify;"">Android user interface is restricted to perform long running jobs to make user experience smoother. A typical long running tasks can be periodic downloading of data from internet, saving multiple records into database, perform file I/O, fetching your phone contacts list, etc. For such long running tasks, Service is the alternative.</p>
<ol>
<li>A service is a application component used to perform long running tasks in background.</li>
<li>A service doesn’t have any user interface and neither can directly communicate to an activity.</li>
<li>A service can run in the background indefinitely, even if component that started the service is destroyed.</li>
<li>Usually a service always performs a single operation and stops itself once intended task is complete.</li>
<li>A service runs in the main thread of the application instance. It doesn’t create its own thread. If your service is going to do any long running blocking operation, it might cause Application Not Responding (ANR).  And hence, you should create a new thread within the service.</li>
</ol>
<h1><span id=""2_Bound_and_Unbound_Service"">2. Bound and Unbound Service</span></h1>
<h4 style=""text-align: justify;""><span id=""Bound_Service"">Bound Service</span></h4>
<p>Service which call indefinitely in between activity. An Android component may bind itself to a Service using bindservice (). A bound service would run as long as the other application components are bound to it. As soon as they unbind, the service destroys itself.</p>
<h4 style=""text-align: justify;""><span id=""Unbound_Service"">Unbound Service</span></h4>
<p>Service which call at the life span of calling activity. In this case, an application component starts the service, and it would continue to run in the background, even if the original component that initiated it is destroyed. For instance, when started, a service would continue to play music in the background indefinitely.</p>
<h1><span id=""3_Android_Service_Lifecycle"">3. Android Service Lifecycle</span></h1>
<p>A service can be run by the system, If someone calls Context.startService() or bindService() method.</p>
<h4><span id=""onStartCommand"">onStartCommand()</span></h4>
<p>This method is called when the service be started, by calling <code>startService()</code>. Once this method executes, the service is started and can run in the background indefinitely. If you implement this, it is your responsibility to stop the service when its work is done, by calling <code>stopSelf()</code> or <code>stopService()</code>.  If you are defining your service as, bounded service then you don’t need to implement this method.</p>
<h4><span id=""onBind"">onBind()</span></h4>
<p>You need to override this method, only if you are defining your service as bounded service. This method is called, when another component wants to bind with the service by calling <code>bindService()</code>. In your implementation of this method, you must provide an interface that clients use to communicate with the service, by returning an IBinder. You must always implement this method, but if you don’t want to allow binding, then you should return null.</p>
<h4><span id=""onCreate"">onCreate()</span></h4>
<p>This method is called while the service is first created. Here all the service initialization is done. This method is never called again.</p>
<h4><span id=""onDestroy"">onDestroy()</span></h4>
<p>The system calls this method when the service is no longer used and is being destroyed. This method is used to, clean up any resources such as threads, registered listeners, receivers, etc. This is the last call the service receives.</p>
<h1><span id=""4_Creating_a_Android_Service"">4. Creating a Android Service</span></h1>
<p>Create a new class and extend it from <code>android.app.Service</code>. You need to override <code>onStartCommand()</code>, <code>onBind()</code>, <code>onCreate()</code> and <code>onDestroy()</code> method to handle the service lifecycle.</p>
<pre class=""prettyprint lang-java"">package com.javatechig.serviceexample;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.util.Log;

public class HelloService extends Service {

    private static final String TAG = ""HelloService"";

    private boolean isRunning  = false;

    @Override
    public void onCreate() {
        Log.i(TAG, ""Service onCreate"");

        isRunning = true;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {

        Log.i(TAG, ""Service onStartCommand"");

        //Creating new thread for my service
        //Always write your long running tasks in a separate thread, to avoid ANR
        new Thread(new Runnable() {
            @Override
            public void run() {


                //Your logic that service will perform will be placed here
                //In this example we are just looping and waits for 1000 milliseconds in each loop.
                for (int i = 0; i &lt; 5; i++) {
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {
                    }

                    if(isRunning){
                        Log.i(TAG, ""Service running"");
                    }
                }

                //Stop service once it finishes its task
                stopSelf();
            }
        }).start();

        return Service.START_STICKY;
    }


    @Override
    public IBinder onBind(Intent arg0) {
        Log.i(TAG, ""Service onBind"");
        return null;
    }

    @Override
    public void onDestroy() {

        isRunning = false;

        Log.i(TAG, ""Service onDestroy"");
    }
}
</pre>
<h1><span id=""5_Service_ManifestDeclaration"">5. Service Manifest Declaration</span></h1>
<p style=""text-align: justify;"">In theory, A service can be called from other application unless it is restricted.  You can ensure that your service is available to only your app by including the <code>android:exported</code> attribute and setting it to “false”. This effectively stops other apps from starting your service, even when using an explicit intent.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    package=""com.javatechig.serviceexample"" &gt;

    &lt;application
        android:allowBackup=""true""
        android:icon=""@drawable/ic_launcher""
        android:label=""@string/app_name""
        android:theme=""@style/AppTheme"" &gt;
        &lt;activity
            android:name="".HelloActivity""
            android:label=""@string/app_name"" &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""android.intent.action.MAIN"" /&gt;

                &lt;category android:name=""android.intent.category.LAUNCHER"" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;

        &lt;!--Service declared in manifest --&gt;
        &lt;service android:name="".HelloService""
            android:exported=""false""/&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</pre>
<h1><span id=""6_Starting_Android_Service"">6. Starting Android Service</span></h1>
<p>You can start a service from an activity or other application component by passing an Intent to <code>startService()</code>. The Android system calls the service’s <code>onStartCommand()</code> method and passes it the Intent.</p>
<p>In our example, we will start service by calling <code>startService()</code> method while start service button is clicked.</p>
<pre class=""prettyprint lang-java"">Intent intent = new Intent(this, HelloService.class);
startService(intent);</pre>
<h1><span id=""7_Stop_Running_Android_Service"">7. Stop Running Android Service</span></h1>
<ul>
<li>A service must be stopped itself by calling <code>stopSelf()</code> method, once it is finishes execution. However, you can also stop a service yourself by calling <code>stopService()</code> method.</li>
<li>A call to stopService method will call <code>onDestroy()</code> callback in your service. You have to manually stop your operation being performed by your application. To do this in the above example, we have taken a boolean variable to control the execution of service.</li>
</ul>
<h1><span id=""8_Output"">8. Output</span></h1>
<figure aria-describedby=""caption-attachment-5408"" class=""wp-caption aligncenter"" id=""attachment_5408"" style=""width: 300px""><a href=""http://stacktips.com"" target=""_self""><img alt=""Android Service Example"" class=""size-thumbnail wp-image-5408"" height=""533"" loading=""lazy"" src=""/media/uploads/articles/274/Android-Service-Example-300x533.png"" srcset="""" width=""300""/></a><figcaption class=""wp-caption-text"" id=""caption-attachment-5408"">Android Service Example</figcaption></figure>
<h1><span id=""9_DownloadSource_Code"">9. Download Source Code</span></h1>
<p><a href=""https://github.com/javatechig/Android-Service-Example"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""Download Android Service Example"">Download Android Service Example</a></p>
",0,"standard","post"
"Android Notification Example Using NotificationCompat","android-notification-example-using-notificationcompat","In this example, we will learn how to create Android notification using NotificationCompat class available in the Android Support library. This class supports big style notification with backward compatibility.
","LIVE","<p>In this example, we will learn how to create Android notification using NotificationCompat class available in the Android Support library. This class supports big style notification with backward compatibility. Big style notification was introduced on Android version 4.1.x. If you are building app that supports older android phones like android 2.3 or above, in such cases you may like to go for NotificationCompat.Builder for showing notifications.  </p>
<p>If you are using this library, then your newer version of android phone will show big styled notification, while older android phones will show old style notification.</p>
<h1>Example using NotificationCompat</h1>
<pre class=""prettyprint lang-java"">
package com.javatechig.notification;

import android.app.Activity;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.NotificationCompat;
import android.view.View;

public class MainActivity extends Activity {

    // A integer, that identifies each notification uniquely
    public static final int NOTIFICATION_ID = 1;

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Your application layout file
        setContentView(R.layout.sample_layout);
    }

    /**
     * Send simple notification using the NotificationCompat API.
     */
    public void sendNotification(View view) {

        // Use NotificationCompat.Builder to set up our notification.
        NotificationCompat.Builder builder = new NotificationCompat.Builder(this);

        //icon appears in device notification bar and right hand corner of notification
        builder.setSmallIcon(R.drawable.ic_stat_notification);

        // This intent is fired when notification is clicked
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""http://stacktips.com/""));
        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0);

        // Set the intent that will fire when the user taps the notification.
        builder.setContentIntent(pendingIntent);

        // Large icon appears on the left of the notification
        builder.setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher));

        // Content title, which appears in large type at the top of the notification
        builder.setContentTitle(""Notifications Title"");

        // Content text, which appears in smaller text below the title
        builder.setContentText(""Your notification content here."");

        // The subtext, which appears under the text on newer devices.
        // This will show-up in the devices with Android 4.2 and above only
        builder.setSubText(""Tap to view documentation about notifications."");

        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);

        // Will display the notification in the notification bar
        notificationManager.notify(NOTIFICATION_ID, builder.build());
    }
}
</pre>
",0,"standard","post"
"Android Studio Shortcuts for Mac OS X Users","android-studio-shortcuts-for-mac-os-x-users","Android Studio brings tons of keyboard shortcuts that helps developers to keep hands more on keyboard rather than relying much on the mouse. The lesser you use mouse, results in faster development. Well, let us see some of the shortcuts for android studio for Mac user.
","LIVE","<p><a href=""http://developer.android.com/sdk/index.html#Other"" rel=""nofollow noopener noreferrer"" target=""_blank""><img alt=""Android Studio IDE"" class=""aligncenter wp-image-7331 size-full"" height=""393"" loading=""lazy"" sizes=""(max-width: 763px) 100vw, 763px"" src=""/media/uploads/articles/276/Android-Studio-IDE.png"" srcset="""" width=""763""/></a></p>
<p>Android Studio brings tons of keyboard shortcuts that helps developers to keep hands more on keyboard rather than relying much on the mouse. The lesser you use mouse, results in faster development. Well, let us see some of the shortcuts for android studio for Mac user.</p>
<h2>Android Studio Shortcuts for Mac OS X</h2>
<table>
<tbody>
<tr>
<th><b>Android Studio Command Type </b></th>
<th><b>Mac OS X Shortcuts</b></th>
</tr>
<tr>
<td>Reformat code</td>
<td>OPTION + CMD + L</td>
</tr>
<tr>
<td>Show selected API documentation</td>
<td>F1 / FUNCTION + F1</td>
</tr>
<tr>
<td>Generate Source Code</td>
<td>CMD + N</td>
</tr>
<tr>
<td>Jump to source</td>
<td>CMD + DOWN ARROW KEY</td>
</tr>
<tr>
<td>Delete Line</td>
<td>CMD + BACKSPACE</td>
</tr>
<tr>
<td>Search by symbol name</td>
<td>OPTION + CMD + O</td>
</tr>
<tr>
<td>Build</td>
<td>CMD + F9</td>
</tr>
<tr>
<td>Build and Run</td>
<td>CTRL + R</td>
</tr>
<tr>
<td>Toggle Project Sidebar Visibility</td>
<td>CMD + 1</td>
</tr>
<tr>
<td>Open Class</td>
<td>CMD + O</td>
</tr>
<tr>
<td>Open File ( including resources)</td>
<td>CMD + SHIFT + O</td>
</tr>
<tr>
<td>Recent Files Opened</td>
<td>CMD + E</td>
</tr>
<tr>
<td>Recently edited files</td>
<td>CMD + SHIFT + E</td>
</tr>
<tr>
<td>Previous Next/Previous Error</td>
<td>F2 / FUNCTION F2</td>
</tr>
<tr>
<td>Last Edited Location</td>
<td>CMD + SHIFT + BACKSPACE</td>
</tr>
<tr>
<td>Last Location</td>
<td>CMD + [ and CMD + ]</td>
</tr>
<tr>
<td>Go to Declaration</td>
<td>CMD + B</td>
</tr>
<tr>
<td>Go to Super</td>
<td>CMD + Y</td>
</tr>
<tr>
<td>Next Word Navigation</td>
<td>ALT + LEFT/RIGHT ARROW KEY</td>
</tr>
<tr>
<td>Find</td>
<td>CMD + F</td>
</tr>
<tr>
<td>Find in Path</td>
<td>SHIFT + CMD + F</td>
</tr>
<tr>
<td>Refactor Class, Method</td>
<td>CTRL + T</td>
</tr>
</tbody>
</table>
",0,"standard","post"
"Android Studio Project Structure","android-studio-project-structure","Android Studio is an IDE based on IntelliJ IDEA that uses gradle build system. In this tutorial we will see Android Studio Project Structure in detailed vs eclipse ADT project structure. 
","LIVE","<p>Android application development is never been easy due to its raw nature and rapid growth and changes to the platform. If we cast our memories back a few years,  Eclipse was the only IDE used for Android development. Eclipse is developed and maintained by open source alliance. Due to its open source and free nature, it always failed to match its all-time competitor platform IDE like XCode.</p>
<p>But now Android development looks very promising with the introduction of Android Studio IDE. Android Studio is an IDE based on IntelliJ IDEA that is used for android application development. The initial developer preview was released on 15th may 2013. This tool has more options that will enable developers to speed up application development. In the later section of this tutorial, we will understand the Android Studio project structure in the context of traditional eclipse based project structure.</p>
<p>Check out the following related articles,</p>
<ul>
<li><a href=""http://stacktips.com/android/android-studio-features"">Android Studio Features</a></li>
<li><a href=""http://stacktips.com/android/installing-android-studio"">Installing Android Studio</a></li>
</ul>
<h2>Gradle Based Build System</h2>
<ul>
<li>Android Studio is an IDE based on IntelliJ IDEA that uses Gradle build system. In eclipse, you can create only one build at a time. Which means, first create debug build and later you can create a release build by signing with your Keystore.</li>
<li>Android Studio projects are set up to build both a debug and a release version of the application. The debug version is signed with the developer key store key which is created automatically (Same as eclipse debug builds). The release is not signed during the build, this needs to happen after.</li>
<li>Android Studio, makes it easy to create several variants of an application, either for multi-apk distribution or for different flavors of an application. This means you can have different builds for debugging, release or maybe a different variant build from the same code.</li>
<li>Eclipse ADT plugin, always generate single R.java file but, Android Studio supports multiple. The generated R.java is located in the debug folder. You can change your build variant between debug and release and accordingly it will create the R.java file in selected debug or release directory.</li>
</ul>
<p>Change the build type configuration here from the bottom left corner in your Android Studio.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Change Build Variants in Android Studio"" class=""size-medium wp-image-5328 aligncenter"" height=""410"" loading=""lazy"" src=""/media/uploads/articles/277/Change-Build-Variants-in-Android-Studio-620x410.png"" srcset="""" width=""620""/></a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Change Build Variants in Android Studio"" class=""size-medium wp-image-5330 aligncenter"" height=""411"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/277/Change-Build-Variants-in-Android-Studio2-620x411.png"" srcset="""" width=""620""/></a></p>
<h2>Android Studio Project Structure</h2>
<h3>1. Main Project</h3>
<p align=""justify"">This would be the entire project context. Whatever you do in IntelliJ IDEA, you do that in the context of a project. A project is an organizational unit that represents a complete software solution. A project in Android Studio is like a workspace in Eclipse. In Android Studio a project can contain multiple modules. A module in Android Studio is like a project in Eclipse. In the above screenshot, “LoginAuthenticator” is the name of my project</p>
<p align=""justify"">This means that, in theory, it is possible to build multiple apps within the same project. From my personal experience, creating multiple apps within the same project doesn’t work well. So, I recommend not to make your hands dirty trying the same thing. Instead, It is a better idea to create a single app per single project.</p>
<p align=""justify""><img alt=""Android Studio Project Structure"" class=""size-medium wp-image-5327 aligncenter"" height=""388"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/277/Android-Studio-Project-Structure-620x388.png"" srcset="""" width=""620""/></p>
<h3>2. .idea</h3>
<p>Eclipse uses project.properties file for project-specific metadata. Here in the Android studio, this .idea does the same thing. This means the project-specific metadata is stored by Android Studio.</p>
<h3>3. Project Module (app)</h3>
<p>This is the actual project folder where your application code resides. The application folder has following sub directories</p>
<p style=""padding-left: 30px;"">a. <strong>build:</strong> This has all the complete output of the make process i.e. classes.dex, compiled classes and resources, etc.</p>
<p style=""padding-left: 30px;"">In the Android Studio GUI, only a few folders are shown. The important part is that your R.java is found here under build/source/r/&lt;build variant&gt;/&lt;package&gt;/R.java</p>
<p style=""padding-left: 30px;"">b. <strong>libs :</strong> This is a commonly seen folder in eclipse land too, which optionally can hold the libraries or .jar files.</p>
<p style=""padding-left: 30px;"">c. <strong>src:</strong> The src folder can have both application code and android unit test script. You will find two folders named “androidTest” and “main” correspond to the “src” folder. The main folder contains two subfolders java and res. The java folder contains all the java codes and res contains drawables, layouts, etc.</p>
<h3>4. gradle</h3>
<p>This is where the Gradle build system’s jar wrapper i.e. this jar is how AS communicates with Gradle installed in Windows (the OS in my case).</p>
<h3>5. External Libraries</h3>
<p>This is not actually a folder but a place where Referenced Libraries and information on targeted platform SDK is shown.</p>
",0,"standard","post"
"Installing Development Environment for Libgdx","installing-development-environment-for-libgdx","As we know Libgdx is a Java based, cross platform game development framework. This means that, once we write the code for one platform, we can port the game to other platforms with no or minimal changes. Currently it is supporting Windows, Linux, Mac OS X, Android, iOS and HTML5 platforms.
","LIVE","
<p>Before you getting into details of this tutorial, I would recommend you to go through my first post of “Introduction to Libgdx”, if you have not read already.</p>
<p align=""justify"">As we know Libgdx is a Java based, cross platform game development framework. This means that, once we write the code for one platform, we can port the game to other platforms with no or minimal changes. Currently it is supporting Windows, Linux, Mac OS X, Android, iOS and HTML5 platforms. And hence, you have to install the required softwares and do the required setup before you can start development. In this tutorial we will see setting up Libgdx development environment for different targets.</p>
<h1><span id=""1_Installing_Java_Development_Kit_JDK"">1. Installing Java Development Kit (JDK)</span></h1>
<p>As discussed earlier, Libgdx is a Java based framework. It need Java runtime to compile any of your game irrespective of your build target. So before you begin with anything you need to install Java in your system. If you already have Java installed in your system, you can skip this step.</p>
<ol>
<li>Download the latest JDK pack from <a href=""http://www.oracle.com/technetwork/java/javase/downloads/index.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">Oracle official website</a>. We recommend you install Java SDK 6.x version.</li>
<li>Once downloaded, you can just double click to install. The installation process may differ depending upon your development machine operating system. You can refer the <a href=""https://www.java.com/en/download/help/download_options.xml"" rel=""nofollow noopener noreferrer"" target=""_blank"">official documentation from Oracle</a> for Java installation process.</li>
<li>Once you are done with the above steps, we recommend you to add Java to your system path (Environment variable). If you are a windows user, you can refer <a href=""http://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">Oracle documentation</a> and Mac OS x users can follow my tutorial on <a href=""http://stacktips.com/mac-os-x/how-to-set-java_home-environment-variable-on-mac-os-x"">setting JAVA_HOME environment variable in mac</a>.</li>
</ol>
<h1><span id=""2_Installing_Eclipse_IDE"">2. Installing Eclipse IDE</span></h1>
<p><span style=""text-decoration: underline;""><b>What Is Eclipse?</b></span></p>
<p align=""justify"">Eclipse is an integrated development environment (IDE). It contains a base workspace and an extensible plug-in system for customizing the environment. Written mostly in Java, Eclipse can be used to develop applications. By means of various plug-ins, Eclipse may also be used to develop applications in other programming languages: Ada, ABAP, C, C++, COBOL, Fortran, Haskell, JavaScript, Lasso, Natural, Perl, PHP, Prolog, Python, R, Ruby (including Ruby on Rails framework), Scala, Clojure, Groovy, Scheme, and Erlang.</p>
<p><span style=""color: #0000ff;""><i>— Definition taken from Wikipedia </i></span></p>
<p align=""justify"">Eclipse is an open source IDE and freely available for download. Download a copy of eclipse from <a href=""https://www.eclipse.org/downloads/"" rel=""nofollow noopener noreferrer"" target=""_blank"">eclipse.org</a>. Once it is downloaded, you can extract the .zip or .tar folder and place in the location of your choice.</p>
<h1><span id=""3_Downloading_Libgdx"">3. Downloading Libgdx</span></h1>
<p align=""justify"">Libgdx development process is changed a bit since its evolution. Earlier process was to download the Libgdx library and using it for Libgdx project. The official document of Libgdx, highly recommend to to use the latest Gradle based build process. However in this tutorial we will show you the both steps.</p>
<h2><span id=""31_Older_Libgdx_downloads_Deprecated"">3.1. Older Libgdx downloads (Deprecated)</span></h2>
<p align=""justify"">Download the latest copy of Libgdx library from <a href=""https://code.google.com/p/libgdx/downloads/list"" rel=""nofollow noopener noreferrer"" target=""_blank"">Google Code</a>. Once it is downloaded, extract the content of the zip file and paste it to a folder “c:/libgdx”. gdx-setup-ui.jar file will be used to create a project setup. In the later tutorials, we will see how to use the downloaded Libgdx files.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Download Libgdx from Google Code"" class=""alignnone size-medium wp-image-5315"" height=""312"" loading=""lazy"" src=""/media/uploads/articles/278/Download-Libgdx-from-Google-Code-620x312.png"" srcset="""" width=""620""/></a></p>
<h2><span id=""32_Gradle_based_Libgdx_Project_Recommended"">3.2. Gradle based Libgdx Project (Recommended)</span></h2>
<p><span style=""text-decoration: underline;""><b>What is Gradle?</b></span></p>
<p align=""justify"">Gradle is a dependency management and build system. A dependency management system is an easy way to pull in 3rd party libraries into your project, without having to store the libraries in your source tree. Instead, the dependency management system relies on a file in your source tree that specifies the names and versions of the libraries you need to be included in your application. Adding, removing and changing the version of a 3rd party library is as easy as changing a few lines in that configuration file. The dependency management system will pull in the libraries you specified from a central repository (in our case Maven Central) and store them in a directory outside of your project.</p>
<p align=""justify"">A build system helps with building and packaging your application, without being tied to a specific IDE. This is especially useful if you use a build or continuous integration server, where IDE’s aren’t readily available. Instead, the build server can call the build system, providing it with a build configuration so it knows how to build your application for different platforms.</p>
<p><i><span style=""color: #0000ff;"">— </span><span style=""color: #0000ff;"">Definition taken form </span></i><a href=""https://github.com/libgdx/libgdx/wiki/Project-Setup-Gradle"" rel=""nofollow noopener noreferrer"" style=""color: #0000ff;"" target=""_blank""><span style=""color: #0000ff;""><i>https://github.com/libgdx/libgdx/wiki/Project-Setup-Gradle</i></span></a></p>
<ol>
<li>We have already downloaded the eclipse in the above step and now we need to install Gradle. Gradle is used to build Libgdx projects. Now in this step you can download the Gradle plugins to your eclipse from Help-&gt; Install new softwares. To do this, we will copy the below link and paste in your new installation window. We only need the Gradle IDE! <a href=""http://dist.springsource.com/release/TOOLS/gradle"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://dist.springsource.com/release/TOOLS/gradle</a></li>
<li>Now <a href=""http://libgdx.badlogicgames.com/download.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">download LibGDX project setup application</a>. This application is the .Jar file and will help you to set up Gradle based application.</li>
</ol>
<h1><span id=""4_InstallingAndroid_Environment"">4. Installing Android Environment</span></h1>
<p align=""justify"">As we already have the Eclipse, IDE, you may just download the eclipse ADT plugin and Android SDK separately. Alternatively, You can download the whole ADT bundle, that comes with latest SDK and eclipse. Follow simple steps provided in <a href=""http://developer.android.com/sdk/index.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">official Android developer portal.</a></p>
<p>Note: Please don’t use Android emulators for your game testing purpose. It really Sucks!! I recommend to use real device for development and testing purpose.</p>
<h1><span id=""5_Installing_GWT_Plugin"">5. Installing GWT Plugin</span></h1>
<p>The Google Plugin for Eclipse is a set of software development tools that enables Java developers to quickly design, build, optimize, and deploy cloud-based applications. The Google Plugin for Eclipse allows you to easily create and deploy App Engine applications.</p>
<p>This plugin is necessary, if you want to develop and run the application for HTML5/GWT with eclipse. You can install the GWT plugin from the eclipse update site</p>
<p><a href=""https://dl.google.com/eclipse/plugin/4.3"" rel=""nofollow noopener noreferrer"" target=""_blank"">https://dl.google.com/eclipse/plugin/4.3</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Installing GWT Plugin"" class=""alignnone size-medium wp-image-5316"" height=""521"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/278/Installing-GWT-Plugin-620x521.png"" srcset="""" width=""620""/></a></p>
<h1><span id=""6_Installing_iOSEnvironment"">6. Installing iOS Environment</span></h1>
<p>Libgdx developed game can also run on iOS platform. You must be surprises, how is this possible to run Java code in iOS. This is possible by using RoboVM. RoboVM allows you to create, truly native iOS apps using native UIs and with full hardware access. Install RoboVM eclipse plugin from the below update site</p>
<p><a href=""http://download.robovm.org/eclipse/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://download.robovm.org/eclipse/</a></p>
<p><strong>Note</strong>: You cannot develop iOS application using windows platform. You must use MacOSX for development, if you are looking for iOS as your target.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Installing RoboVM eclipse plugin"" class=""alignnone size-medium wp-image-5317"" height=""520"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/278/Installing-RoboVM-eclipse-plugin-620x520.png"" srcset="""" width=""620""/></a></p>
<p>Make sure you accept the license agreement for each third party software vendor to install them. Once you have finished the above installation, you will be ready for developing and executing Libgdx games in Android, HTML5 and in iOS.</p>
<h1><span id=""7_References"">7. References</span></h1>
<p><a href=""http://www.toxsickproductions.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://www.toxsickproductions.com/</a><br/>
<a href=""http://developer.android.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://developer.android.com/</a><br/>
<a href=""http://libgdx.badlogicgames.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://libgdx.badlogicgames.com/</a></p>
",0,"standard","post"
"Cross Platform Mobile Game Development Using Libgdx","cross-platform-mobile-game-development-using-libgdx","Libgdx is an open source, cross platform game development framework. It currently supports Windows, Linux, Mac OS X, Android, iOS and HTML5 as target platforms. This is mainly intended to to create games using Java programming language.
","LIVE","<h1>1. Introduction</h1>
<p>Libgdx is an open source, cross platform game development framework. It currently supports Windows, Linux, Mac OS X, Android, iOS and HTML5 as target platforms. This is mainly intended to to create games using Java programming language. Internally Libgdx is using C programming language to enable cross platform capabilities and to provide better performance. Libgdx lets you go as low-level as you want, giving you direct access to file systems, input devices, audio devices and OpenGL via a unified OpenGL ES 2.0 and 3.0 interface.</p>
<p>People always misleads Libgdx as a game engine, but it is not. It is a framework, providing set of API to build games.  A game engine is normally comes with lot of the tools and editors to make your game development process easier and faster. It means that, you may make use of other third party tools to take advantage of different things that used to build a game.</p>
<h1>2. Feature of Libgdx Framework 0.97</h1>
<h2>2.1. Cross-Platform</h2>
<p>A single API to target:</p>
<ul>
<li>Windows</li>
<li>Linux</li>
<li>Mac OS X</li>
<li>Android (2.2+)</li>
<li>BlackBerry</li>
<li>iOS</li>
<li>Java Applet (requires JVM to be installed)</li>
<li>Javascript/WebGL (Chrome, Safari, Opera, Firefox, IE via <a href=""https://developers.google.com/chrome/chrome-frame/"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Google Chrome Frame</b></a>)</li>
</ul>
<h2>2.2. Graphics</h2>
<ul>
<li>Rendering through OpenGL ES 2.0 on all platforms</li>
<li><a href=""http://code.google.com/p/gl2-android/"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Custom OpenGL ES 2.0 bindings</b></a> for Android 2.0 and above</li>
<li>Low-Level OpenGL helpers:
<ul>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/glutils/VertexArray.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Vertex arrays</b></a> and <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/glutils/VertexBufferObject.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>vertex buffer objects</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/Mesh.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Meshes</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/Texture.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Textures</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/glutils/FrameBuffer.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Framebuffer objects</b></a> (GLES 2.0 only)</li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/glutils/ShaderProgram.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Shaders</b></a>, integrating easily with meshes</li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/glutils/ImmediateModeRenderer.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Immediate mode rendering emulation</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/glutils/ShapeRenderer.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Simple shape rendering</b></a></li>
<li>Automatic software or hardware mipmap generation</li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/glutils/ETC1.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>ETC1</b></a> support (not available in Javascript backend)</li>
<li>Automatic handling of <a href=""https://github.com/libgdx/libgdx/wiki/Graphics"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>OpenGL ES context loss</b></a>. Restores all textures, shaders and other OpenGL resources</li>
</ul>
</li>
<li>High-level 2D APIs:
<ul>
<li>Custom CPU side <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/Pixmap.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>bitmap manipulation library</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/OrthographicCamera.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Orthographic camera</b></a></li>
<li>High-performance <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/g2d/SpriteBatch.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>sprite batching</b></a> and <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/g2d/SpriteCache.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>caching</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/g2d/TextureAtlas.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Texture atlases</b></a>, with whitespace stripping support. Either generated<a href=""http://code.google.com/p/libgdx/wiki/TexturePacker"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>offline</b></a> or <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/g2d/PixmapPacker.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>online</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/g2d/BitmapFont.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Bitmap fonts</b></a> (does not support complex scripts like Arabic or Chinese). Either generated <a href=""http://www.angelcode.com/products/bmfont/"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>offline</b></a> or <a href=""http://www.badlogicgames.com/wordpress/?p=2300"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>loaded from TTF files</b></a>(unsupported in Javascript backend)</li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/g2d/ParticleEmitter.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>2D Particle system</b></a></li>
<li><a href=""http://www.mapeditor.org/"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>TMX tile map</b></a> support</li>
<li><a href=""https://github.com/libgdx/libgdx/wiki/Scene2d"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>2D scene-graph API</b></a></li>
<li><a href=""https://github.com/libgdx/libgdx/wiki/Scene2d.ui"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>2D UI library</b></a>, based on scene-graph API, fully skinable</li>
</ul>
</li>
<li>High-Level 3D APIs:
<ul>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/PerspectiveCamera.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Perspective camera</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/g3d/decals/DecalBatch.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Decal batching</b></a>, for 3D billboards or particle systems</li>
<li>Basic loaders for <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/g3d/loaders/obj/ObjLoader.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Wavefront OBJ</b></a> and <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Renderer.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>MD5</b></a></li>
<li>3D rendering API with materials and lighting system and support for loading FBX models via <a href=""https://github.com/libgdx/fbx-conv"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>fbx-conv</b></a></li>
</ul>
</li>
</ul>
<h2>2.3. 3rd Party Support</h2>
<p>Libgdx can be integrated with many 3rd party tools. We love:</p>
<ul>
<li>Spine – 2D Skeletal Animation</li>
<li>Nextpeer – Mobile multiplayer made easy</li>
<li>Saikoa – makers of ProGuard and DexGuard</li>
</ul>
<h2>2.4. Audio</h2>
<ul>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/audio/Music.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Streaming music</b></a> and <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/audio/Sound.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>sound effect</b></a> playback for WAV, MP3 and OGG</li>
<li>Direct access to audio device for <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/audio/AudioDevice.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>PCM sample playback</b></a> and <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/audio/AudioRecorder.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>recording</b></a>(unsupported in Javascript backend)</li>
</ul>
<h2>2.5. Input Handling</h2>
<ul>
<li>Abstractions for <a href=""https://github.com/libgdx/libgdx/wiki/Mouse%2C-touch-%26-keyboard"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>mouse and touch-screen, keyboard</b></a>, <a href=""https://github.com/libgdx/libgdx/wiki/Accelerometer"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>accelerometer</b></a> and<a href=""https://github.com/libgdx/libgdx/wiki/Compass"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>compass</b></a></li>
<li><a href=""https://github.com/libgdx/libgdx/wiki/Gesture-detection"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Gesture detector</b></a>, detects taps, panning, flinging and pinch zooming</li>
</ul>
<h2>2.6. Math &amp; Physics</h2>
<ul>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/math/Matrix4.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Matrix</b></a>, <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/math/Vector3.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>vector</b></a> and <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/math/Quaternion.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>quaternion</b></a> classes. Matrix and vector operations are accelerated via native C code where possible</li>
<li><a href=""https://github.com/libgdx/libgdx/wiki/Circles%2C-planes%2C-rays%2C-etc."" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Bounding shapes and volumes</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/math/Frustum.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Frustum class</b></a>, for picking and culling</li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/math/CatmullRomSpline.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Catmull-Rom splines</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/math/Interpolation.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Common interpolators</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/math/EarClippingTriangulator.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Concave polygon triangulator</b></a></li>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/math/Intersector.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Intersection and overlap testing</b></a></li>
<li>JNI wrapper for <a href=""http://box2d.org/"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Box2D</b></a> physics. So awesome, other <a href=""https://github.com/nicolasgramlich/AndEnginePhysicsBox2DExtension"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>engines</b></a> use it as well</li>
<li><a href=""https://github.com/libgdx/libgdx/tree/master/extensions/gdx-bullet"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>JNI Wrapper</b></a> for <a href=""http://bulletphysics.org/wordpress/"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>bullet physics</b></a></li>
</ul>
<h2>2.7. Utilities</h2>
<ul>
<li><a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/utils/package-summary.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Custom collections, with primitive support</b></a></li>
<li>Json <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/utils/JsonWriter.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>writer</b></a> and <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/utils/JsonReader.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>reader</b></a>, with POJO (de-)serialization support</li>
<li>Xml <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/utils/XmlReader.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>writer</b></a> and <a href=""http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/utils/XmlReader.html"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>reader</b></a></li>
</ul>
<h2>2.8. File I/O &amp; Storage</h2>
<ul>
<li><a href=""https://github.com/libgdx/libgdx/wiki/File-handling"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>File system abstraction for all platforms</b></a></li>
<li>Read-only file system emulation for Javascript backend</li>
<li>Binary file support for Javascript backend</li>
<li><a href=""https://github.com/libgdx/libgdx/wiki/Preferences"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Preferences</b></a> for lightweight setting storage</li>
</ul>
<h2>2.9. File I/O &amp; Storage</h2>
<ul>
<li><a href=""https://github.com/libgdx/libgdx/wiki/File-handling"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>File system abstraction for all platforms</b></a></li>
<li>Read-only file system emulation for Javascript backend</li>
<li>Binary file support for Javascript backend</li>
<li><a href=""https://github.com/libgdx/libgdx/wiki/Preferences"" rel=""nofollow noopener noreferrer"" target=""_blank""><b>Preferences</b></a> for lightweight setting storage</li>
</ul>
<p>Feature above feature set is taken from <a href=""http://libgdx.badlogicgames.com/features.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">official website.</a></p>
",0,"standard","post"
"VMware Recovery Software – Product Review","vmware-recovery-software-product-review","VMware recovery software handles the recovery of data along with images, videos, audios, media files, documents etc from VMDK files (generated under NTFS/FAT file system). Software is best solution if you are facing trouble while mounting VMDK file due corruption issues.
","LIVE","<p>VMware recovery software handles the recovery of data along with images, videos, audios, media files, documents etc from VMDK files (<strong>generated under NTFS/FAT file system</strong>). Software is best solution if you are facing trouble while mounting VMDK file due corruption issues.</p>
<p>Today, so many small as well as large scale organizations are using virtualization environment in order to work with multiple OS without spending extra expenses. While working on this environment, difficulties do happen. This software assists you well for sorting-out all data harm issues of VMDK file. Its basic function let you access your data without any complexity. Software has two powerful Recovery modes which you can choose as per your need.</p>
<ul>
<li><strong>Scan Virtual Machines</strong> – Browse the exact path of your Virtual Machine and then software will start scanning and data recovering process of VMDK files</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""vmware_software_recovery_1"" class=""aligncenter wp-image-5209"" height=""309"" loading=""lazy"" sizes=""(max-width: 503px) 100vw, 503px"" src=""/media/uploads/articles/280/vmware_software_recovery_1-620x381.png"" srcset="""" width=""503""/></a></p>
<ul>
<li><strong>Search Virtual Machines </strong>– Apply this method, if you are unable to search the accurate location of Virtual Machine. Software will automatically search VMs from “All Drives” or “Specific Drive” (which you have chosen) and then scan and recover VMDK data.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""vmware_software_recovery_2"" class=""aligncenter wp-image-5210"" height=""303"" loading=""lazy"" sizes=""(max-width: 493px) 100vw, 493px"" src=""/media/uploads/articles/280/vmware_software_recovery_2-620x381.png"" srcset="""" width=""493""/></a></p>
<p>In term of essential file/folder(s) you don’t want to take chances of data loss and therefore you should opt for reliable and accurate software. This application has easy-to-use so there is no chance to time wastage neither the requirement of technical skills. By applying this software, you enable to getting rid of VMDK file errors.</p>
<h3> Useful Attributes of this Software:</h3>
<ul>
<li>Possible to recover VMDK files in batch</li>
<li>Allows to Search and Scan Virtual Machines</li>
<li>Perform limitless recovery of VMDK files</li>
<li>Use Filter Option to search particular file/folder(s) or data by created, modified or last access date.</li>
<li>Repair corruption, damage or inaccessible problems from VMDK files</li>
<li>Restore deleted or formatted Virtual partition data or details</li>
<li>Save selected folder or data from salvaged VMDK file</li>
</ul>
<h3><strong> </strong>Technical Details of VMware Recovery Software</h3>
<table>
<tbody>
<tr>
<td width=""99""><strong>Product Name</strong></td>
<td width=""400"">VMware Recovery</td>
</tr>
<tr>
<td width=""99""><strong>Latest Version</strong></td>
<td width=""400"">1.0</td>
</tr>
<tr>
<td width=""99""><strong>Size in MB</strong></td>
<td width=""400"">2.1</td>
</tr>
<tr>
<td width=""99""><strong>Demo Version</strong></td>
<td width=""400"">Yes, It is available</td>
</tr>
<tr>
<td width=""99""><strong>OS Compatible</strong></td>
<td width=""400"">Windows Server 2012/2008/2003, Win 8, 7, Vista and XP</td>
</tr>
<tr>
<td width=""99""><strong>Processor</strong></td>
<td width=""400"">1GHz processor (2.4 GHz is recommended)</td>
</tr>
<tr>
<td width=""99""><strong>RAM</strong></td>
<td width=""400"">512 MB of RAM (1GB is recommended)</td>
</tr>
<tr>
<td width=""99""><strong>Hard Disk</strong></td>
<td width=""400"">5 MB of free hard disk space</td>
</tr>
<tr>
<td width=""99""><strong>Price</strong></td>
<td width=""400"">Starts at $99 (for Personal License)</td>
</tr>
</tbody>
</table>
<h3>Useful Facts about VMDK Recovery Tool</h3>
<h4>1. Simple Interface</h4>
<ul>
<li>You are able to safely and securely entire VMDK recovery process as the software itself guides you in each step</li>
<li>After complete recovery task, software will preview  data with attributes like: name, created, data, file name, size etc</li>
</ul>
<p><strong><em>Note</em></strong><em>: Tool only able to display preview txt file (xml, dir, log etc) and images (jpeg, jpg, gif, psd, png etc).</em></p>
<h4>2. Safe Data Extraction</h4>
<ul>
<li>Via “<strong>Extract</strong>” option you are able to save entire recovered data of VMDK file in new location.</li>
<li>With “<strong>Extract As</strong>” option you can save or extract you entire at previous location.</li>
</ul>
<h4>3. 24×7 Help</h4>
<ul>
<li>Go to “<strong>Help Content</strong>” section and check out the guidance if you are stuck anywhere</li>
<li>You can also contact to our expert support team at 24×7 via online chat or email.</li>
</ul>
<p><strong> </strong>Overall working procedure of this VMware recovery software is admirable for fixing corruption problems from VMDK files. There is no data loss or data alteration risk while using this application. I found this software on my budget. You can use this software without installing Virtual environment. Novice user can also easily operate it as the software has simple GUI techniques. Get free demo version to checkout it before purchase <strong><a href=""http://www.vhddatarecovery.net/vmware-data-recovery.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">vhddatarecovery.net</a>.</strong></p>
",0,"standard","post"
"MBOX to Outlook Converter Software Product Review","mbox-to-outlook-converter-software-product-review","This review of the product MBOX Converter version 2.1 highlights its characteristics and also some drawbacks that it possesses. But as whole the software application no doubt serves its Work well as an MBOX to Outlook converter. It easily converts MBOX files supported on about 17+ email clients into Windows Outlook PST format without having the need to put extra efforts for the conversion.
","LIVE","<p align=""justify"">This review of the product MBOX Converter version 2.1 highlights its characteristics and also some drawbacks that it possesses. But as whole the software application no doubt serves its Work well as an MBOX to Outlook converter. It easily converts MBOX files supported on about 17+ email clients into Windows Outlook PST format without having the need to put extra efforts for the conversion.</p>
<h3>Product Overview</h3>
<table>
<tbody>
<tr>
<td width=""145"">Product Name</td>
<td width=""334""><a href=""http://www.mboxtooutlook.org/"" rel=""nofollow noopener noreferrer"" target=""_blank"">MBOX Converter</a></td>
</tr>
<tr>
<td width=""145"">Developer Company</td>
<td width=""334"">SysTools</td>
</tr>
<tr>
<td width=""145"">Tool Download Link</td>
<td width=""334""><a href=""http://www.mboxtooutlook.org/dl/setup-mbox-converter.exe"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://www.mboxtooutlook.org/</a></td>
</tr>
<tr>
<td width=""145"">License Available</td>
<td width=""334"">Personal<br/>
Business<br/>
Enterprise</td>
</tr>
<tr>
<td width=""145"">Versions Available</td>
<td width=""334"">Demo<br/>
Full</td>
</tr>
<tr>
<td width=""145"">Software Size</td>
<td width=""334"">8.7 MB only</td>
</tr>
</tbody>
</table>
<p align=""justify"">‘Product Review’ has its own importance as it describes in detail about each and every factor where the particular product excels and the fields in which it lacks. This inspired me a lot and made me pen down my lines of thought for the software application, though it may vary from person to person as different users might have used the tool from different perspectives. But I found the tool superior to several others, proved through its personal license that I bought as well as other reviews that I read before actually investing in it. So, let’s get familiar with the unmatched features that the application inculcates within itself.</p>
<h3>Characteristics of the Tool Explored To Get Acquainted-With</h3>
<p>Below are specified some really catchy features of the tool used as an MBOX to Outlook converter that lures the clients.</p>
<ol>
<li><em>Converts files in batch</em> – The tool converts several files all together at once from MBOX file type to PST format that can be opened on any version of MS Outlook desktop email client.</li>
<li>Simple User Interface – The interface of the application is very simple, user-friendly and self explanatory that makes the conversion easy and error free. This feature attracts users of all sections, expertise and non-experts.</li>
<li><em>Converts In EML and MSG Format</em> <em>Also</em> – Other than Outlook PST format, the software allows conversion in two other formats also that are EML and MSG file type. This is really an added advantage due to the following reasons:</li>
</ol>
<ul>
<li>The .eml files can be opened in Windows Live Mail, Outlook Express, and Windows Mail etc.</li>
<li>The individual emails saved as .msg files can used by MS Outlook.</li>
<li><em>Make single PST File</em>: With this preference provided to the users, all converted MBOX files can be merged into a single common PST file.</li>
<li><em>Generate Multiple PST Files</em>: This alternative allows you to make a single PST file for each MBOX file. For e.g., if 10 MBOX files are converted then the tool creates 10 separate PST file each.</li>
</ul>
<ol>
<li><em>Supports Several MBOX Formats</em> – MBOX file type is a normally used format made by a multiple applications in different formats such as .mbox or .mbx or MBOX file type without any extension. These entire file formats are supported by the tool.</li>
<li><em>Maintains File/Folder Hierarchy </em>– The structure of the converted file and folders are maintained even after conversion into any of the possible formats and without data loss.</li>
<li><em>Provides Files Selectivity Option</em> – The converter application offers selectivity choice so only the required files and folders can be exported avoiding unnecessary files. This helps in saving time as well as available storage space.</li>
<li><em>Alternative To Create Single And Multiple PST Files – </em>Depending on choice either of the 2 option can be chosen:</li>
<li><em>Multiple File Naming Options</em> – This feature is an exceptional one as it is provided to users only if they save MBOX files as EML or MSG format.</li>
</ol>
<p><strong><em>Note</em></strong> – The tool provides the choice to choose a suitable naming pattern to save each email with. There are multiple file naming conventions available like: Save as subject, DD-MM-YY, DD-MM-YYY, MM-DD-YY, MD5, Auto-incremental and many more.</p>
<h3>How the MBOX to Outlook converter Works?</h3>
<p>The tool reviewed here is able to achieve the above mentioned multiple matchless features in 4 easy steps that does not require any extra effort. These 4 main steps are:</p>
<ol>
<li><strong><em>Open – </em></strong>With the ‘Open’ option the file or folder to be converted can be browsed.</li>
<li><strong><em>Scan – </em></strong>With the ‘Scan’ option the file/folder can be loaded for conversion.</li>
<li><strong><em>Preview – </em></strong>Thereafter preview of the converted emails is provided for user’s satisfaction.</li>
<li><strong><em>Save – </em></strong>Once satisfied with the conversion the files can be saved as Outlook PST, EML or MSG.</li>
</ol>
<p><strong><em>Note – </em></strong>To achieve the above functionalities, the tool shall have to be downloaded and installed as a first step</p>
<h4>Most Attracting Feature</h4>
<ul>
<li>Outlook Installation is not required to convert MBOX files into Outlook PST format i.e. though the tool is used as MBOX to Outlook converter, installation of the same is not necessary.</li>
</ul>
<h3>Software Application Download and Installation Details</h3>
<ul>
<li>Demo/Licensed version of tool can be downloaded from the official website of the developer Company.</li>
<li>Simple System requisites are essential to run the tool on Windows OS. Make sure that the machine has at least 1GHz of processor; 1GB RAM and 10 MB space free in the hard disk.</li>
<li> Installation process is extremely simple. The software application is free from any discrepancies and is safe to install in system as it does not affect any setting or functioning of the existing applications.<em> </em></li>
</ul>
<h3>Demo Available – Get Trial Facility</h3>
<p align=""justify"">The trial version that is available free of cost enables users to test the tool and check its functionalities well purchase. The free edition definitely helps users to clear all doubts (if any) about the key characteristics and its performance. The ability to provide preview of all MBOX files and convert 25 email items in 3 formats that are PST, EML and MSG helps in getting better understanding about the tool.</p>
<h3>Possibility of Enhancement</h3>
<p align=""justify"">It is well known that MBOX files are flexible in nature, i.e. it is accessible on cross platforms such as Windows, Mac as well as Linux operating system. But MBOX converter is supported on Windows OS only which is a drawback. It would be certainly better if the tool would be supported on the other two widely used OS also. But this shortcoming does not matter to a great extent because the MBOX files can be transferred to Windows OS by loading them in USB flash drive.</p>
<h3>My Final Judgment on the Software</h3>
<p align=""justify"">Different users may have different lines of thought about the application software but considering the feasibility and performance and of the tool; I can say that it is a tool complete in all aspects that meets the expectations of users. Moreover; it’s simple interface, minimum system requirements swift and speedy performance makes it quite influential for a basic user who does not have technical expertise.</p>
",0,"standard","post"
"Invoke Method Using Java Reflection","invokeing-method-using-java-reflection","Java provides reflection API to do introspection of an object and modify its behavior on the run time. The class Class in the Java API forms the basis to identify the object class and its internal structure of that particular Class. The below three functions are important to get the class behavior. In this articles we will see, how to invoke a method dynamically at runtime.
","LIVE","<p>Java provides reflection API to do introspection of an object and modify its behavior on the run time. The class Class in the Java API forms the basis to identify the object class and its internal structure of that particular Class. The below three functions are important to get the class behavior. In this articles we will see example invoke method using java reflection.</p>
<h1>Example: Invoking method runtime using reflection</h1>
<p>In mobile manufacturing company, the company wants to perform the quality check for each functionality of the product before it goes into market. The functionality of the product can be added or removed for each release.</p>
<p>For the above scenario consider a validator class which contains all the methods to check the quality of the product. A product class which contains describes the attributes of the product. Quality check class which is invoked by the client to check the product quality before it is checked. In this approach only validator class needs to change if any criteria will be added in future. The client code need not be changed.</p>
<h3>Product.java</h3>
<pre class=""prettyprint lang-java"">public class Product {

	String productName;
	String category;
	String outgoingCallAbility;
	String ChargingCapability;

	public String getProductName() {
		return productName;
	}

	public void setProductName(String productName) {
		this.productName = productName;
	}

	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public String getOutgoingCallAbility() {
		return outgoingCallAbility;
	}

	public void setOutgoingCallAbility(String outgoingCallAbility) {
		this.outgoingCallAbility = outgoingCallAbility;
	}

	public String getChargingCapability() {
		return ChargingCapability;
	}

	public void setChargingCapability(String chargingCapability) {
		ChargingCapability = chargingCapability;
	}

}
</pre>
<h3>ProductValidator.java</h3>
<pre class=""prettyprint lang-java"">public class ProductValidator {

	public boolean checkChargingCapability(Product p)
	{
		if(""Y"".equalsIgnoreCase(p.getChargingCapability()))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	public boolean CheckOutgoingCallAbility(Product p)
	{		
		if(p.getOutgoingCallAbility()!=null &amp;&amp; p.getOutgoingCallAbility().equalsIgnoreCase(""Y""))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
</pre>
<h3>QualityCheckClient.java</h3>
<pre class=""prettyprint lang-java"">import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class QualityCheckClient {

	/**
	 * @param args
	 * @throws ClassNotFoundException
	 * @throws IllegalAccessException
	 * @throws InstantiationException
	 * @throws InvocationTargetException
	 * @throws IllegalArgumentException
	 */
	public static void main(String[] args) throws ClassNotFoundException,
			InstantiationException, IllegalAccessException,
			IllegalArgumentException, InvocationTargetException {

		String dispatch = ""proceed"";
		
		Product p = new Product();
		p.setOutgoingCallAbility(""N"");
		p.setProductName(""Nokia"");
		p.setChargingCapability(""Y"");
		
		ProductValidator validate = (ProductValidator) Class.forName(
				""reflection.ProductValidator"").newInstance();
		
		Method[] methods = Class.forName(""reflection.ProductValidator"")
				.getDeclaredMethods();
		
		for (Method m : methods) {
			boolean test = (Boolean) m.invoke(validate, p);
			if (test) {
				System.out.println(""Successfully Executed "" + m.getName() + "" method"");
			} else {
				System.out.println(""Execution failed for"" + m.getName());
				dispatch = ""fail"";
				break;
			}
		}

		if (""fail"".equalsIgnoreCase(dispatch)) {
			System.out.println(""Product cant be proceed for dispatching"");
		}
	}

}</pre>
<h3>Output</h3>
<pre>Successfully Executed the method--&gt;checkChargingCapability
Execution failed for--&gt;CheckOutgoingCallAbility
Product can’t be proceed for dispatching
</pre>
",0,"standard","post"
"Bamboo Continuous Integration for Android","bamboo-continuous-integration-for-android","Here in this tutorial, we’ll show you the importance of continuous integration tools in software development process and steps to configure Bamboo for building android code.","LIVE","<p class=""""><span>Ihis tutorial, we’ll show you the importance of continuous integration tools in software development process and steps to configure Bamboo for building android code.</span><br/></p>
<p>Most developers use Eclipse as IDE for their development. IDE makes life simplified with the ease to set up, code and build the source. All you have to do is to install and follow some of the screen instructions to run your code.</p>
<p>Eclipse will help you to build your source code and run it on device. Now let us move a step ahead. What if we need to have a continuous integration for android project? Before we begin, let us understand the importance of continuous integration in project.</p>
<h2 class=""""><span id=""2_Why_Continuous_Integration"">Why Continuous Integration?</span></h2>
<p>Continuous integration or “CI” is the process of fully automating the compilation and build generation process. There are several benefits of having a Continuous Integration system integrated in your project</p>
<ul>
<li>Fully automated: Saves time of developers for making build for each release</li>
<li>From Source Control: A CI takes the code from your favourite source code from repository, it could be SVN, git etc. CI server will check for any updates available on the source code, as soon as there is an update, it will trigger the build process</li>
<li>Always Compile latest code: This is a way to make sure we are building from the latest source code from repository</li>
<li>Distribute the latest application build to your beta testers (Optional).</li>
</ul>
<h2 class=""""><span id=""3_Getting_Started_with_Bamboo"">Getting Started with Bamboo</span></h2>
<p>The building process of Continuous integration tool is slightly different than your eclipse IDE. This uses several steps for setting up the project and lines to compile your code.</p>
<ol>
<li>Download Source Code</li>
<li>Compile and Build Source code</li>
<li>Generate .APK file</li>
<li>Sign APK file</li>
<li>Distribute APK file (out of scope in this tutorial)</li>
</ol>
<p>The above steps are important to prepare your android build and distribute to your beta testers. Distribution application to beta tester is optional in this case. I will include it in another tutorial.</p>
<p>Here in this example, we will see how to configure bamboo for building android.</p>
<h3 class=""""><span id=""5_Create_a_New_Plan"">Create a New Plan</span></h3>
<p><span>Login to Bamboo with your valid bamboo account credentials.</span></p><p>Select “Create” and then “Create a new plan” button in the top navigation bar. Create a new plan under an existing project or as a new project.</p>
<p><b>Plan</b>: Plan defines the build process. Here you define what gets built, how the build is triggered and what job gets executed. Each plan will have a default job when it is created. You can add more jobs later.</p>
<p>Once created, click on Atlassian Bamboo – Build Dashboard and select the project and then newly created plan  from the list.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Create New Plan in Bamboo"" class=""aligncenter size-medium wp-image-4941"" height=""420"" loading=""lazy"" src=""/media/uploads/articles/283/Create-New-Plan-in-Bamboo1-620x420.png"" srcset="""" width=""620""/></a></p>
<h2 class=""""><span id=""6_Configuring_the_Plan"">Configuring the Plan</span></h2>
<p>Select your plan. Find “Actions” drop down to the right side of your screen and then click “Configure plan” option.</p>
<p>You will notice a default “Job” will be created for you.</p>
<h3 class=""""><span id=""61Checkout_Source_Code"">Checkout Source Code</span></h3>
<p>Add task as source code checkout (by default this will get created). In this step bamboo connects you to git, github, svn or any other source code version controller system. This step will pull the source code from the specified path and will place the code in “build-dir” folder.<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Create New Plan in Bamboo"" class=""aligncenter size-medium wp-image-4941"" height=""420"" loading=""lazy"" src=""/media/uploads/articles/283/Create-New-Plan-in-Bamboo1-620x420.png"" srcset="""" width=""620""/></a></p>
<h3 class=""""><span id=""62_Update_Android_Project"">Update Android Project</span></h3>
<p>Add Another task “Command” type and do the below configurations. Add below snippet as arguments and save the task</p>
<pre>update project --target ""android-19"" --path ./Android_LoginApp --name LoginTestApp
</pre>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Update Android Project"" class=""aligncenter size-medium wp-image-4940"" height=""465"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/283/Update-Android-Project-620x465.png"" srcset="""" width=""620""/></a></p>
<p>More more info on above command visit</p>
<p><a href=""http://developer.android.com/tools/projects/projects-cmdline.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://developer.android.com/tools/projects/projects-cmdline.html</a></p>
<h3 class=""""><span id=""63Build_Android_Code_using_Ant"">Build Android Code using Ant</span></h3>
<p>Add another task to build the project. Select “Ant” form add task. And do the below configurations</p>
<ol>
<li>Add new executable as “ant” if not available before and add the ant executable path in your computer</li>
<li>Add arguments as below syntax.</li>
</ol>
<pre>release</pre>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Add ant  task"" class=""aligncenter size-medium wp-image-4935"" height=""378"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/283/Add-ant-task-620x378.png"" srcset="""" width=""620""/></a></p>
<p>And now you’re done. Just hit “Run” button in your top right. This should start executing the batch and build the .apk for you.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Task Ant Build Configuration"" class=""aligncenter size-medium wp-image-4939"" height=""481"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/283/Task-Ant-Build-Configuration-620x481.png"" srcset="""" width=""620""/></a></p>
<h3 class=""""><span id=""64Sign_Android_Project"">Sign Android Project</span></h3>
<p class="""">Now we have the apk ready after the above step. Once we have the .apk file, we need to sign it with jarsigner.</p>
<p><span>The jarsigner tool is used for two purposes. To sign Java ARchive (JAR) files, and to verify the signatures and integrity of signed JAR files. The JAR feature enables the packaging of class files, images, sounds, and other digital data in a single file for faster and easier distribution. </span></p><p><span>A tool named jar enables developers to produce JAR files. (Technically, any zip file can also be considered a JAR file, although when created by jar or processed by jarsigner, JAR files also contain a META-INF/MANIFEST.MF file.). </span><br/></p>
<p>Add Another task “Command” type and do the following configurations.</p>
<ol>
<li>Add new executable as “jarsigner” if not available before. “jarsigner” will be present in your java SDK. Redirect to your jarsigner sdk.</li>
<li>Add arguments as below syntax.</li>
</ol>
<pre>-verbose -sigalg MD5withRSA -digestalg SHA1 -keystore docs/android.keystore-storepass &lt;keystore password&gt; &lt;Path to your unsigned apk&gt;  &lt;your_alias&gt;</pre>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Sign Android Project in Bamboo"" class=""aligncenter size-medium wp-image-5189"" height=""378"" loading=""lazy"" src=""/media/uploads/articles/283/Sign-Android-Project-in-Bamboo-620x378.png"" srcset="""" width=""620""/></a></p>
<h3 class=""""><span id=""65_Zip_Align_your_APK"">Zip Align your APK</span></h3>
<p class=""""><span>zipalign is an archive alignment tool that provides important optimization to Android application (.apk) files. The purpose is to ensure that all uncompressed data starts with a particular alignment relative to the start of the file. Specifically, it causes all uncompressed data within the .apk, such as images or raw files, to be aligned on 4-byte boundaries. </span></p><p class=""""><span>This allows all portions to be accessed directly with mmap() even if they contain binary data with alignment restrictions. The benefit is a reduction in the amount of RAM consumed when running the application. </span></p><p class="""">Add Another task “Command” type and do the following configurations.</p>
<pre> -v 4 &lt;path to your unsigned apk&gt; &lt;name of your new apk include .apk extn&gt;</pre>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Zip Align andorid APK"" class=""aligncenter size-medium wp-image-5190"" height=""371"" loading=""lazy"" src=""/media/uploads/articles/283/Zip-Align-andorid-APK-620x371.png"" srcset="""" width=""620""/></a></p>
<p>The result of the above path is the apk that can be distributed to your beta or internal testing team.</p>",0,"standard","post"
"Covariant return type example in java","covariant-return-type-example-in-java","The covariant return type allows narrowing down return type of the overridden method. This feature will help to avoid down casting on the client side. It allows programmer to program without the need of type checking and down casting. The covariant return type always works only for non-primitive return types.
","LIVE","<p>In Java 5, we have feature called covariant return type. Prior to Java5, we could not change the return type of the overridden method. It means that if you override the method in the subclass you need to downcast it to the subclass type.</p>
<p>The covariant return type in java, allows narrowing down return type of the overridden method. This feature will help to avoid down casting on the client side. It allows programmer to program without the need of type checking and down casting. The covariant return type always works only for non-primitive return types.</p>
<p>The Clone method will return the object where we need to downcast the Object to the subclass type. After Java5, we can override the clone method to return the object of subclass type.</p>
<p>Consider the scenario, where we have two types of manufacturer Mobile Phone and Washing Machine. Based on the customer requirement if the user wants to purchase Mobile Phone the overridden method will return the Mobile Phone object. Here the method getProductType will return the Mobile Phone object instead of Product object (Mobile Phone implements the Product interface). I.e. returns the object of subclass instead of superclass. Similarly the clone method in the Mobile Phone class will return the object of Mobile Phone instead of object of the class Object. The same rule applies to the Washing Machine class too.</p>
<h3>Product.Java</h3>
<pre class=""prettyprint lang-java"">public interface Product {
	public void makeProduct(String productName, String ProductOwner, int IMEINo);
}
</pre>
<h3>MobilePhone.Java</h3>
<pre class=""prettyprint lang-java"">public class MobilePhone implements Product, Cloneable {

	String _productName;
	String _ownerName;
	int _IMEINo;
	MobilePhone _clonedProduct;

	@Override
	public void makeProduct(String productName, String ownerName, int IMEINo) {
		// TODO Auto-generated method stub
		_productName = productName;
		_ownerName = ownerName;
		_IMEINo = IMEINo;
	}

	protected MobilePhone clone() throws CloneNotSupportedException {
		_clonedProduct = (MobilePhone) super.clone();
		return _clonedProduct;
		// return super.clone();
	}
}</pre>
<h3>WasingMachine.java</h3>
<pre class=""prettyprint lang-java"">public class WasingMachine implements Product {

	String _productName;
	String _ownerName;
	int _modelNo;

	@Override
	public void makeProduct(String productName, String ownerName, int modelNo) {
		// TODO Auto-generated method stub
		_productName = productName;
		_ownerName = ownerName;
		_modelNo = modelNo;
	}

}</pre>
<h3>Manufacture.java</h3>
<pre class=""prettyprint lang-java"">public interface Manufacture {

	public Product getProductType();

}</pre>
<h3>Apple.java</h3>
<pre class=""prettyprint lang-java"">public class Apple implements Manufacture {

	@Override
	public MobilePhone getProductType() {
		// TODO Auto-generated method stub
		return new MobilePhone();
	}

}</pre>
<h3>Samsung.java</h3>
<pre class=""prettyprint lang-java"">public class Samsung implements Manufacture {

	@Override
	public WasingMachine getProductType() {
		// TODO Auto-generated method stub
		return new WasingMachine();
	}

}</pre>
<h3>ManufactureImpl.java</h3>
<pre class=""prettyprint lang-java"">public class ManufactureImpl {

	/**
	 * @param args
	 * @throws CloneNotSupportedException
	 */
	public static void main(String[] args) throws CloneNotSupportedException {
		// TODO Auto-generated method stub

		Apple s1 = new Apple();
		MobilePhone b1 = s1.getProductType();
		b1.makeProduct(""Iphone5S"", ""XXXX"", 1234);
		MobilePhone b2 = b1.clone();
		b2._IMEINo = 6789;
		System.out.println(""IMEI Number Of Phone1-&gt;"" + b1._IMEINo);
		System.out.println(""IMEI Number Of Phone2-&gt;"" + b2._IMEINo);
		Samsung f1=new Samsung();
		WasingMachine c1=f1.getProductType();
		c1.makeProduct(""samsungWashingMachine"",""XYZ"", 2014);
		System.out.println(""Owner Name Of WasingMachine-&gt;"" + c1._ownerName);
	}

}
</pre>
",0,"standard","post"
"Running Infinite TimerTask in Java Servlet","running-infinite-timertask-in-java-servlet","This example will show you how to run Running Infinite TimerTask in Java Servlet. For achieving this we can initialise TimerTask inside ServletContextListener and schedule it for a certain time period. ServletContextListener is used to, make your code run before your web application started. For more understanding on ServletContextListener, refer my post on ServletContextListener Example in Servlet.
","LIVE","<p>This example will show you how to run Running Infinite TimerTask in Java Servlet.</p>
<p>For achieving this we can initialize TimerTask inside ServletContextListener and schedule it for a certain time period. ServletContextListener is used to, make your code run before your web application started. For more understanding on ServletContextListener, refer my post on ServletContextListener Example in Servlet.</p>
<p>Following example explains how to implement the ServletContextListener</p>
<h3>1) Create a class and implement the ServletContextListener interface</h3>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

public class AppContextListener implements ServletContextListener {

	@Override
	public void contextDestroyed(ServletContextEvent arg0) {

		// Your code here
		System.out.println(""HelloWorld Listener has been shutdown"");

	}

	@Override
	public void contextInitialized(ServletContextEvent servletContextEvent) {

		// Your code here
		System.out.println(""HelloWorld Listener initialized."");

		TimerTask vodTimer = new VodTimerTask();

		Timer timer = new Timer();
		timer.schedule(vodTimer, 1000, (2 * 1000));

	}

	class VodTimerTask extends TimerTask {

		@Override
		public void run() {
			System.out.println(""TimerTask "" + new Date().toString());
		}
	}

}
</pre>
<h3>2) Configure deployment descriptor</h3>
<p>Just add the listener tag and listener-class tag with the class path, as shown in the example.</p>
<pre class=""prettyprint lang-xml"">&lt; ?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;web -app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns=""http://java.sun.com/xml/ns/javaee""
	xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd""
	id=""WebApp_ID"" version=""3.0""&gt;
	&lt;display -name&gt;HelloServlet&lt;/display&gt;

	&lt;servlet&gt;
		&lt;/servlet&gt;&lt;servlet -name&gt;HelloServlet&lt;/servlet&gt;
		&lt;servlet -class&gt;com.javatechig.HelloServlet&lt;/servlet&gt;
	
	&lt;servlet -mapping&gt;
		&lt;/servlet&gt;&lt;servlet -name&gt;HelloServlet&lt;/servlet&gt;
		&lt;url -pattern&gt;/HelloServlet&lt;/url&gt;
	

	&lt;listener&gt;
		&lt;/listener&gt;&lt;listener -class&gt;com.javatechig.AppContextListener&lt;/listener&gt;
	
&lt;/web&gt;
</pre>
<h3>3) Start Tomcat and deploy your application</h3>
<p>You will see the output in the console</p>
<pre><span style=""color: #ff0000;"">Jun 13, 2014 3:52:25 PM org.apache.catalina.core.AprLifecycleListener init
Jun 13, 2014 3:52:27 PM org.apache.catalina.core.ApplicationContext log
INFO: No Spring WebApplicationInitializer types detected on classpath</span>
HelloWorld Listener initialized.
<span style=""color: #ff0000;"">Jun 13, 2014 3:52:27 PM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""http-bio-8080""]
Jun 13, 2014 3:52:27 PM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""ajp-bio-8009""]
Jun 13, 2014 3:52:27 PM org.apache.catalina.startup.Catalina start
INFO: Server startup in 1787 ms</span>
TimerTask Fri Jun 13 15:52:28 BST 2014
TimerTask Fri Jun 13 15:52:30 BST 2014
TimerTask Fri Jun 13 15:52:32 BST 2014
TimerTask Fri Jun 13 15:52:34 BST 2014
TimerTask Fri Jun 13 15:52:36 BST 2014
</pre>
",0,"standard","post"
"ServletContextListener Example in Servlet","servletcontextlistener-example-in-servlet","This example explains how to use ServletContextListener in Servlets. ServletContextListener is used to, make your code run before your web application started. Below use case examples will help for more understanding.
","LIVE","<p>This example explains how to use ServletContextListener in Servlets. <code>ServletContextListener </code>is used to, make your code run before your web application started. Below use case examples will help for more understanding</p>
<ul>
<li>You may need to initialise database pool before the web application started</li>
<li>If you have a web application for your business, which runs a policy control system for monitoring, then you will have to start a worker thread soon before the application gets initialised.</li>
</ul>
<p>There can be only one <code>ServletContext</code> for each web application. The instance of <code>ServletContext</code> will be created while deploying the application before application instance is created. A single ServletContext instance can be used by all the servlets and .jsp files in the same application. ServletContext is also called as the application scope variables in the web application scenario. <code>ServletContextListener</code> has the following two methods</p>
<pre class=""prettyprint lang-java"">public void contextInitialized(ServletContextEvent event)
public void contextDestroyed(ServletContextEvent event)</pre>
<p>Following example explains how to implement the ServletContextListener</p>
<h3>1) Create a class and implement the ServletContextListener interface</h3>
<pre class=""prettyprint lang-java"">package com.javatechig;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

public class AppContextListener implements ServletContextListener {

	@Override
	public void contextDestroyed(ServletContextEvent arg0) {		
		//Your code here
		System.out.println(""HelloWorld Listener has been shutdown"");
	}

	@Override
	public void contextInitialized(ServletContextEvent servletContextEvent) {
		//Your code here
		System.out.println(""HelloWorld Listener initialised."");
	}
}
</pre>
<h3>2) Configure deployment descriptor</h3>
<p>Just add the listener tag and listener-class tag with the class path, as shown in the example.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns=""http://java.sun.com/xml/ns/javaee""
	xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd""
	id=""WebApp_ID"" version=""3.0""&gt;
	&lt;display-name&gt;HelloServlet&lt;/display-name&gt;

	&lt;servlet&gt;
		&lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;
		&lt;servlet-class&gt;com.javatechig.HelloServlet&lt;/servlet-class&gt;
	&lt;/servlet&gt;
	&lt;servlet-mapping&gt;
		&lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;
		&lt;url-pattern&gt;/HelloServlet&lt;/url-pattern&gt;
	&lt;/servlet-mapping&gt;

	&lt;listener&gt;
		&lt;listener-class&gt;com.javatechig.AppContextListener&lt;/listener-class&gt;
	&lt;/listener&gt;

&lt;/web-app&gt;
</pre>
<h3>3) Start Tomcat and deploy your application</h3>
<p>You will see the output in the console</p>
<pre><span style=""color: #ff0000;"">Jun 13, 2014 3:25:12 PM org.apache.catalina.core.AprLifecycleListener init
Jun 13, 2014 3:25:12 PM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler [""http-bio-8080""]
Jun 13, 2014 3:25:12 PM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler [""ajp-bio-8009""]
Jun 13, 2014 3:25:12 PM org.apache.catalina.startup.Catalina load
INFO: Initialization processed in 645 ms
Jun 13, 2014 3:25:12 PM org.apache.catalina.core.StandardService startInternal
INFO: Starting service Catalina
Jun 13, 2014 3:25:12 PM org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet Engine: Apache Tomcat/7.0.54
Jun 13, 2014 3:25:13 PM org.apache.tomcat.websocket.server.WsSci onStartup
</span><span style=""color: #000000;"">HelloWorld Listener initialised.</span><span style=""color: #ff0000;"">
Jun 13, 2014 3:25:13 PM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""http-bio-8080""]
Jun 13, 2014 3:25:13 PM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""ajp-bio-8009""]
Jun 13, 2014 3:25:13 PM org.apache.catalina.startup.Catalina start
INFO: Server startup in 639 ms
Jun 13, 2014 3:25:53 PM org.apache.catalina.core.StandardContext reload
INFO: Reloading Context with name [/HelloServlet] has started
</span><span style=""color: #000000;"">HelloWorld Listener has been shutdown
</span></pre>
<p> </p>
",0,"standard","post"
"How to set JAVA_HOME Environment Variable MacOS","set-java_home-environment-variable-mac-os-x","In this tutorial, we show you how to set $JAVA_HOME environment variable on your Mac OS X
","LIVE","<p>In this tutorial, we show you how to set $JAVA_HOME environment variable on your Mac OS X.</p>
<h2>Mac OSX 10.5.x or later</h2>
<p>Open the Terminal program present in your  (this is in your Applications/Utilities folder by default). Follow the below steps.</p>
<h3>Step-1 Open and edit .bash_profile file</h3>
<pre><b>open </b>-e .bash_profile</pre>
<h3>Step-2 Save the below line</h3>
<pre>export JAVA_HOME=$(/usr/libexec/java_home</pre>
<h3>Step-3 Refresh the file using below command</h3>
<pre>$ <b>source</b> .bash_profile</pre>
<h3>Step-4 Check if the JAVA_HOME is set properly</h3>
<pre>$ <b>echo</b>$JAVA_HOME
<b>/</b>Library<b>/</b>Java<b>/</b>JavaVirtualMachines<b>/</b>1.7.0.jdk<b>/</b>Contents<b>/</b>Home</pre>
<h2><b>For Older Mac OS X</b></h2>
<p>For older Mac OS X, you have to use the full path of installation directory as it /usr/libexec/java_home doesn’t exists.</p>
<pre>$ <b>open </b>-e .bash_profile
<b>$ export</b>JAVA_HOME=<b>/</b>System<b>/</b>Library<b>/</b>Java<b>/</b>JavaVirtualMachines<b>/</b>1.6.0.jdk<b>/</b>Contents<b>/</b>Home
$ <b>source</b> .bash_profile

$ <b>echo</b>$JAVA_HOME
<b>/</b>System<b>/</b>Library<b>/</b>Java<b>/</b>JavaVirtualMachines<b>/</b>1.6.0.jdk<b>/</b>Contents<b>/</b>Home</pre>
",0,"standard","post"
"How to Install ant in your Mac OS X","how-to-install-ant-in-your-mac-os-x","Ant is already installed on some older versions of Mac OS X, so you should run ant -version to test if it is installed before attempting to install it. For MacOS Mavericks (10.9 and perhaps later versions too), Apache Ant does not come bundled with the operating system and so must be installed manually.
","LIVE","<p>Ant is already installed on some older versions of Mac OS X, so you should run ant -version to test  to check if it is already installed before attempting to install it. For MacOS Mavericks (10.9 and perhaps later versions too), Apache Ant does not come bundled with the operating system and so must be installed manually.</p>
<p>You can use brew to easily install ant. Simply execute the following command in a terminal window to install brew:</p>
<pre>$  ruby -e ""$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)""</pre>
<p>It may take a while to download and install. If you already have brew installed, make sure to update it by executing below command</p>
<pre>brew update</pre>
<p>Once brew is installed you can use below command to install ant</p>
<pre>brew install ant</pre>
<p>Ant will be installed and <code>ant</code> command will be available  in the command in the terminal.</p>
<p>To test the installation, just type “ant -version” into a terminal window. You should get the following output:</p>
<pre>Apache Ant(TM) version 1.9.4 compiled on April 29 2014</pre>
",0,"standard","post"
"How to Install Node.js Mac OS X","how-to-install-node-js-mac-os-x","Before installing Node.js, just check if it is already installed in your machine. You can check by using node &#8211;version command. This will give you the current version of Node.js.  If it is not installed already, then you can use brew to easily install ant. Simply execute the following command in a terminal window to install brew
","LIVE","<p>Before installing <code>Node.js</code>, just check if it is already installed in your machine. You can check by using node –version command. This will give you the current version of Node.js.<br/>
If it is not installed already, then you can use brew to easily install ant. Simply execute the following command in a terminal window to install brew</p>
<pre>ruby -e ""$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)""</pre>
<p>It may take a while to download and install. If you already have brew installed, make sure to update it by executing below command</p>
<pre>brew update</pre>
<p>Once brew is installed you can use below command to install <code>Node.js</code></p>
<pre>brew update
brew upgrade node
brew install node</pre>
<p>Node should will be installed. Check if installed successfully</p>
<pre>node --version</pre>
",0,"standard","post"
"Setting ANDROID_HOME Environmental Variable on Mac","setting-android_home-environmental-variable-on-mac","In this tutorial, we will show you how to set ANDROID_HOME Environmental Variable on Mac OS X. Setting ANDROID_HOME environmental variable on mavericks Mac OS X Lion (10.7.5)
","LIVE","<p>In this tutorial, we will show you how to set ANDROID_HOME Environmental Variable on Mac OS X.</p>
<h2>Setting ANDROID_HOME environmental variable on Maverick Mac OS X Lion (10.7.5)</h2>
<p>The ANDROID_HOME environment variable can be used to tell maven where to find the Android SDK. In your home directory, add a file called <code>.bash_profile</code></p>
<p>Set the ANDROID_HOME variable to your SDK directory example,</p>
<pre>export ANDROID_HOME=/Users/alebirke/apps/adt-bundle-mac-x86_64/sdk</pre>
<h2>Setting ANDROID_HOME environmental variable on Maverick Mac OS X (10.9.x)</h2>
<p>Configure the ANDROID_HOME environment variable based on the location of the Android SDK. Additionally, consider adding ANDROID_HOME/tools, and ANDROID_HOME/platform-tools to your PATH.</p>
<pre>$  export ANDROID_HOME=/Users/Neel/Documents/Softwares/adt-bundle-mac-x86_64-20140321/sdk
$  export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</pre>
<h2>Setting ANDROID_HOME environment variable to .bash_profile</h2>
<p>Open the Terminal program present in your (this is in your Applications/Utilities folder by default). Follow the below steps.</p>
<h3>Step-1</h3>
<p>Start up Terminal and go to your home folder.</p>
<pre class=""prettyprint"">cd ~/</pre>
<h3>Step-2</h3>
<p>Open and edit .bash_profile file</p>
<pre class=""prettyprint"">$ open -e .bash_profile</pre>
<p>If you don’t have .bash_profile file in your computer path, then create one. Enter below command to create a new file. Once created follow Step-2.</p>
<pre class=""prettyprint"">touch .bash_profile</pre>
<h3>Step-3</h3>
<p>Save the below line)</p>
<pre>export PATH=${PATH}:/Applications/adt-bundle-mac-x86_64-20140321/sdk/tools
export PATH=${PATH}:/Applications/adt-bundle-mac-x86_64-20140321/sdk/platform-tools</pre>
<h3> Step-4</h3>
<p>Refresh the file using below command</p>
<pre class=""prettyprint"">$ source .bash_profile</pre>
<h3>Step-5</h3>
<p>Check if the JAVA_HOME is set properly</p>
<pre class=""prettyprint"">$ echo $PATH</pre>
<p>You will see the result similar to below. Find for your path in there. If available, then you are good</p>
<pre class=""prettyprint"">/Users/Neel/.rvm/gems/ruby-2.1.2/bin:/Users/Neel/.rvm/gems/ruby-2.1.2@global/bin:/Users/Neel/.rvm/rubies/ruby-2.1.2/bin:/usr/bin:/bin:/usr/sbin:/sbin:<strong>/usr/local/bin:/Applications/adt-bundle-mac-x86_64-20140321/sdk/tools:/Applications/adt-bundle-mac-x86_64-20140321/sdk/platform-tools</strong>:/Users/Neel/.rvm/bin</pre>
<p>Alternatively, You can run <code>android</code> command, it will start android SDK manager</p>
",0,"standard","post"
"Java Servlet Hello World Example","java-servlet-helloworld-example","Servlets are server side Java program which responds to network requests, mostly HTTP requests. Servlets are used to implement the dynamic web applications. Commonly servlets use various other frameworks like Struts, Hibernate, etc. which gives high level features for developing robust server application.
","LIVE","<p>Servlets are server side Java program which responds to network requests, mostly HTTP requests. Servlets are used to implement the dynamic web applications. Commonly servlets use various other frameworks like Struts, Hibernate, etc. which gives high level features for developing robust server application.</p>
<h2>Servlet Interface and Life Cycle</h2>
<p>Every Servlets must implements  javax.servlet.Servlet interface, which provides the required methods for servlet life cycle management. A servlet life cycle includes, initialisation of servlet, receive and respond to client request, and to destroy servlets and release the resources. servlet life-cycle methods are called by the network service in the following order</p>
<ol>
<li>Servlet is created then initialised.</li>
<li>Zero or more service calls from clients are handled</li>
<li>Servlet is destroyed then garbage collected and resources released</li>
</ol>
<p>The state after the servlet container loads and instantiates the servlet class and before it handles any request from client, is called servlet initialisation. Initialising a servlet is an one time expensive operation. In this phase we can do application setup, such as loading configuration and properties, starting helper threads and initialise other resources .</p>
<p>You can override init method of the Servlet interface. Inside this method you can write your initialisation code, if any. If a servlet is unable to complete its initialisation due to some reason then it throws UnavailableException. unable</p>
<h2>Servlet Containers</h2>
<p>Servlets run on a servlet container which handles the networking side (e.g. parsing an HTTP request, connection handling etc). One of the most used, open source servlet containers is Tomcat. You can download latest version of <a href=""http://tomcat.apache.org/download-70.cgi"" rel=""nofollow noopener noreferrer"" target=""_blank"">Tomcat web server from here</a>.</p>
<h2>Creating “HelloWorld” Program in Servlet</h2>
<p>Follow the below steps and sample source code structure of a servlet example to write “HelloWorld” program in servlet.</p>
<h3>Prerequisites for writing servlet program</h3>
<ol>
<li>Install Java JDK (Preferably the latest Java version). You can download it from official <a href=""http://www.oracle.com/technetwork/java/javase/downloads/index.html?ssSourceSiteId=otnjp"" rel=""nofollow noopener noreferrer"" target=""_blank"">Oracle Download Site.</a></li>
<li>Download <a href=""https://www.eclipse.org/downloads/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Eclipse IDE for Java EE Developers</a>. In this example I am using Kepler version.</li>
<li>Download latest stable version of <a href=""http://tomcat.apache.org/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Tomcat web server</a>.</li>
<li>Once you have the above softwares in your work machine then you are good to go.</li>
</ol>
<h3>Step-1</h3>
<p>Create a new project from File-&gt;New-&gt; “Dynamic Web Project” in your eclipse.<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Java Servlet Hello world example"" class=""aligncenter size-medium wp-image-4856"" height=""560"" loading=""lazy"" src=""/media/uploads/articles/291/Java-Servlet-Hello-world-example-620x560.png"" srcset="""" width=""620""/></a></p>
<p>If you don’t have a target runtime setup, then create a new one. Select your Apache Tomcat version and then browse your Tomcat installation directory.</p>
<h3>Step-2</h3>
<p>Create a package “com.javatechig” under Java resources-&gt; src folder and then create the servlet class “HelloServlet.java”. Once you ready then paste below code.</p>
<h3>HelloServlet.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	@Override
	public void init() throws ServletException {
		// Servlet initialization code here
		super.init();
	}

	@Override
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {

		// Set response content type
		response.setContentType(""text/html"");

		// Actual logic goes here.
		PrintWriter out = response.getWriter();
		out.println(""&lt;h1&gt;Hurray !!\n Servlet is Working!! &lt;/h1&gt;"");
	}

	@Override
	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {

	}

	@Override
	public void destroy() {
		// resource release
		super.destroy();
	}
}
</pre>
<h3>Step-3</h3>
<p>Create a new file “web.xml” under WebContent/WEB-INF folder and paste below code</p>
<h3>web.xml</h3>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns=""http://java.sun.com/xml/ns/javaee""
	xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd""
	id=""WebApp_ID"" version=""3.0""&gt;
	&lt;display-name&gt;HelloServlet&lt;/display-name&gt;

	&lt;servlet&gt;
		&lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;
		&lt;servlet-class&gt;com.javatechig.HelloServlet&lt;/servlet-class&gt;
	&lt;/servlet&gt;
	&lt;servlet-mapping&gt;
		&lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;
		&lt;url-pattern&gt;/HelloServlet&lt;/url-pattern&gt;
	&lt;/servlet-mapping&gt;

&lt;/web-app&gt;
</pre>
<p>We are ready with the code. Well, lets execute and see the output. Right click on the project -&gt; Run As-&gt; Run on server. You will notice that the Tomcat service will start and it will automatically deploy your servlet code.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Java Servlet Hello world example output"" class=""aligncenter size-medium wp-image-4857"" height=""333"" loading=""lazy"" src=""/media/uploads/articles/291/Java-Servlet-Hello-world-example-output-620x333.png"" srcset="""" width=""620""/></a></p>
<p> </p>
",0,"standard","post"
"Bootstrap Tutorials","bootstrap-tutorials","Bootstrap is predominantly based on CSS3. CSS3 has a major shift with comparison to CSS1 &#038; CC2 and is currently the latest version.
","LIVE","<p>Bootstrap is predominantly based on CSS3. CSS3 has a major shift with comparison to CSS1 &amp; CC2 and is currently the latest version. It has come up with a number of powerful capabilities such as Media queries, Selectors, Cascading and Inheritance, Template layouts, Namespaces, MathML, Flexible and Grid layouts, Transformations and Transitions, and so on.</p>
<ul>
<li><a href=""/articles/introduction-to-bootstrap-and-basic-building-blocks"">Introduction to Bootstrap</a></li>
<li><a href=""/articles/getting-started-with-bootstrap"">Getting Started with Bootstrap</a></li>
<li><a href=""/articles/creating-your-first-bootstrap-example"" title=""Creating Your First Bootstrap Example"">Creating Your First Bootstrap Page</a></li>
<li><a href=""/articles/bootstrap-responsive-classes-for-building-adaptive-layouts"" title=""Bootstrap Responsive Classes for Building Adaptive Layouts"">Bootstrap Responsive Classes</a></li>
<li><a href=""/articles/rendering-responsive-images-using-bootstrap"" title=""Rendering Responsive Images Using Bootstrap"">Responsive Bootstrap Images</a></li>
<li><a href=""/articles/bootstrap-grid-system-example"" title=""Bootstrap Grid System Example"">Bootstrap Grid System with Example</a></li>
<li><a href=""/articles/vertical-horizontal-and-inline-form-example-in-bootstrap"" title=""Vertical, Horizontal and Inline Form Example in Bootstrap"">Vertical, Horizontal and Inline Form</a></li>
<li><a href=""/articles/bootstrap-css-responsive-utility-classes"" title=""Bootstrap CSS Responsive Utility Classes"">Bootstrap CSS Responsive Utility Classes</a></li>
<li><a href=""/articles/bootstrap-warning-info-success-and-error-alerts-example"" title=""Bootstrap Warning, Info, Success and Error Alerts Example"">Warning, Info, Success and Error Alerts</a></li>
<li><a href=""/articles/bootstrap-jumbotron-example"" title=""Bootstrap Jumbotron Example"">Bootstrap Jumbotron Example</a></li>
<li><a href=""http://stacktips.com/snippet/bootstrap-navigation-tabs-with-dropdown-menu-example"">Navigation Tabs with Dropdown Menu</a></li>
<li><a href=""/articles/how-to-create-toolbars-in-bootstrap3"">Bootstrap Toolbars Example</a></li>
<li><a href=""/articles/how-to-create-button-groups-in-bootstrap3"">Bootstrap Button Groups Example</a></li>
</ul>
",0,"standard","post"
"How To Remotely Connect to Your Windows Desktop From Mac","how-to-remotely-connect-to-your-windows-desktop-from-mac","This article explains how to remotely access Windows desktop form Mac. There are several softwares out there in market which will help you to connect windows desktop from your Mac, but they are not free. The best one out there is Remote Desktop Connection Client for Mac 2.1.1 by Microsoft, which lets you connect from your Macintosh computer to a Windows-based computer.
","LIVE","<p>This article explains how to remotely access Windows desktop form Mac. There are several softwares out there in market which will help you to connect windows desktop from your Mac, but they are not free. The best one out there is Remote Desktop Connection Client for Mac 2.1.1 by Microsoft, which lets you connect from your Macintosh computer to a Windows-based computer.</p>
<h3>Download Microsoft Remote Desktop Connection Client for Mac 2.1.1 from <a href=""http://www.microsoft.com/en-us/download/details.aspx?id=18140"" rel=""nofollow noopener noreferrer"" target=""_blank"">here</a></h3>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Download Remote Desktop Connection for Mac"" class=""aligncenter size-medium wp-image-4849"" height=""327"" loading=""lazy"" src=""/media/uploads/articles/293/Download-Remote-Desktop-Connection-for-Mac-620x327.png"" srcset="""" width=""620""/></a></p>
<h3>Install Remote Desktop Connection Client</h3>
<p>Double click on the downloaded dmg file and you will see a sceren similar to the image shown below</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Remote Desktop Connection Client"" class=""aligncenter size-medium wp-image-4851"" height=""420"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/293/Remote-Desktop-Connection-Client-620x420.png"" srcset="""" width=""620""/></a></p>
<h3>Start Remote Desktop Connection Client</h3>
<p>Go to your launchpad and search for “Remote Desktop Connection”. Enter your remote windows desktop IP address or PC name and click on connect. It will prompt you for entering the credentials of your remote windows system and will connect to your windows.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Remote Desktop Connection for Mac"" class=""aligncenter size-medium wp-image-4850"" height=""277"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/293/Remote-Desktop-Connection-for-Mac-620x277.png"" srcset="""" width=""620""/></a></p>
",0,"standard","post"
"List of Best Android Apps for your Android Smartphone","list-of-best-android-apps-for-your-android-smartphone","There are nearly 1.2 million apps in the Google Play and out of theses 1 million apps are FREE. This makes it harder to find right app for you. So here, I am going to give you some room by listing the best FREE apps in the Google play which is quite necessary to your phone or a must download app all by 2014.
","LIVE","<p>Android is one among the leading Smartphone Operating System around the world. Smart Phone market is keep on growing vast and at the same time there is a valid point of argument between two major platform iOS and Android. It is one among the hot topic in todays tech world. Both the platform has their uniqueness by providing unique and new feature. However, the numbers of Android phone users are more than iOS phone users (as survey by Kantar in 2014).</p>
<p>So today I picked up Android for you all!!!</p>
<p>Android phones are all over in the world and in this new generation people only look for smartphones which give them 1000’s of interactive features with tons of FREE apps.</p>
<p>There are nearly 1.2 million apps in the Google Play and out of theses 1 million apps are FREE. This makes it harder to find right app for you. So here, I am going to give you some room by listing the best FREE apps in the Google play which is quite necessary to your phone or a must download app all by 2014.</p>
<p>Below are the categories present in the below info-graphic.</p>
<ol>
<li>Books &amp; References</li>
<li>Communication</li>
<li>Entertainment</li>
<li>Health</li>
<li>Media &amp; Video</li>
<li>News</li>
<li>Personalization</li>
<li>Photography</li>
<li>Productivity</li>
<li>Shopping</li>
<li>Social</li>
<li>Tools</li>
<li>Travel</li>
<li>Weather</li>
</ol>
<div style=""text-align: center;"">
<p><img alt=""Best Android apps for your android phone"" src=""/media/uploads/articles/294/Important-Apps-for-your-Android-Phones-.jpg"" srcset="""" style=""max-width: 100%;""/></p>
<div style=""margin-bottom: 5px; margin-top: 5px; text-align: left;"">Image Courtesy <a href=""http://theninehertz.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Nine Hertz</a></div>
</div>
",0,"standard","post"
"Android Versions and API Levels","android-versions-and-api-levels","API Level is an integer value that indicates the Android framework API release versions for Android platform. Each revision made is assigned with a new incremental API Level value.
","LIVE","<h1>What is API Level?</h1>
<p>API Level is an integer value that indicates the Android framework API release versions for Android platform. Each revision made is assigned with a new incremental API Level value.</p>
<p>The framework API that an Android platform delivers is specified using an integer identifier called “API Level”. Each Android platform version supports exactly one API Level. The initial release of the Android platform provided API Level 1 and subsequent releases have incremented the API Level.</p>
<p>The API Level identifier lets the Android platform describe the minimum and maximum framework API revision that it supports</p>
<p>The framework API’s are used to build Android application to interact with Android system. The framework API consists of following components</p>
<ol>
<li>A core set of packages and classes</li>
<li>A set of XML elements and attributes for declaring a manifest file</li>
<li>A set of XML elements and attributes for declaring and accessing resources</li>
<li>A set of Intents</li>
<li>A set of permissions that applications can request, as well as permission enforcements included in the system</li>
<li>Each successive version of the Android platform can include updates to the Android application framework API that it delivers.</li>
</ol>
<p>The table below specifies the API Level supported by each version of the Android platform.</p>
<table class=""reference"">
<tbody>
<tr>
<th>Platform Version</th>
<th>API Level</th>
<th>VERSION_CODE</th>
</tr>
<tr>
<td>Android 5.0</td>
<td>21</td>
<td>LOLLIPOP</td>
</tr>
<tr>
<td>Android 4.4W</td>
<td>20</td>
<td>KITKAT_WATCH</td>
</tr>
<tr>
<td>Android 4.4</td>
<td>19</td>
<td>KITKAT</td>
</tr>
<tr>
<td>Android 4.3</td>
<td>18</td>
<td>JELLY_BEAN_MR2</td>
</tr>
<tr>
<td>Android 4.2, 4.2.2</td>
<td>17</td>
<td>JELLY_BEAN_MR1</td>
</tr>
<tr>
<td>Android 4.1, 4.1.1</td>
<td>16</td>
<td>JELLY_BEAN</td>
</tr>
<tr>
<td>Android 4.0.3, 4.0.4</td>
<td>15</td>
<td>ICE_CREAM_SANDWICH_MR1</td>
</tr>
<tr>
<td>Android 4.0, 4.0.1, 4.0.2</td>
<td>14</td>
<td>ICE_CREAM_SANDWICH</td>
</tr>
<tr>
<td>Android 3.2</td>
<td>13</td>
<td>HONEYCOMB_MR2</td>
</tr>
<tr>
<td>Android 3.1.x</td>
<td>12</td>
<td>HONEYCOMB_MR1</td>
</tr>
<tr>
<td>Android 3.0.x</td>
<td>11</td>
<td>HONEYCOMB</td>
</tr>
<tr>
<td>Android 2.3.4, 2.3.3</td>
<td>10</td>
<td>GINGERBREAD_MR1</td>
</tr>
<tr>
<td>Android 2.3.2, 2.3.1, 2.3</td>
<td>9</td>
<td>GINGERBREAD</td>
</tr>
<tr>
<td>Android 2.2.x</td>
<td>8</td>
<td>FROYO</td>
</tr>
<tr>
<td>Android 2.1.x</td>
<td>7</td>
<td>ECLAIR_MR1</td>
</tr>
<tr>
<td>Android 2.0.1</td>
<td>6</td>
<td>ECLAIR_0_1</td>
</tr>
<tr>
<td>Android 2.0</td>
<td>5</td>
<td>ECLAIR</td>
</tr>
<tr>
<td>Android 1.6</td>
<td>4</td>
<td>DONUT</td>
</tr>
<tr>
<td>Android 1.5</td>
<td>3</td>
<td>CUPCAKE</td>
</tr>
<tr>
<td>Android 1.1</td>
<td>2</td>
<td>BASE_1_1</td>
</tr>
<tr>
<td>Android 1.0</td>
<td>1</td>
<td>BASE</td>
</tr>
</tbody>
</table>
",0,"standard","post"
"Progress Notification in Android Example","progress-notification-in-android-example","In this example we&#8217;ll show you how to display progress notification in android using NotificationManager class. For the sake of simplicity the below example shows an simple AsyncTask that does the background operation and update the progress bar displayed on android notification area.
","LIVE","<p>In this example we’ll show you how to display progress notification in Android using <code>NotificationManager</code> class. For the sake of simplicity the below example shows an simple <code>AsyncTask</code> that does the background operation and update the progress bar displayed on android notification area.</p>
<p>As described above this example, using an simple layout with an single button. While user clicking on the button the <code>AsyncTask</code> starts and the it displays the progress notification.</p>
<h2>Application Layout</h2>
<pre lang=""xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/container""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical"" &gt;

    &lt;Button
        android:id=""@+id/button1""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""20dp""
        android:text=""Start Download"" /&gt;

&lt;/LinearLayout&gt;
</pre>
<h2>Activity Class</h2>
<pre lang=""java"">import android.app.Activity;
import android.app.NotificationManager;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.NotificationCompat;
import android.support.v4.app.NotificationCompat.Builder;
import android.util.Log;
import android.view.View;
import android.widget.Button;

public class MainActivity extends Activity {
	private NotificationManager mNotifyManager;
	private Builder mBuilder;
	int id = 1;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		Button b1 = (Button) findViewById(R.id.button1);
		b1.setOnClickListener(new View.OnClickListener() {

			public void onClick(View arg0) {
				mNotifyManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
				mBuilder = new NotificationCompat.Builder(MainActivity.this);
				mBuilder.setContentTitle(""Download"")
						.setContentText(""Download in progress"")
						.setSmallIcon(R.drawable.ic_download);

				new Downloader().execute();
			}
		});
	}

	private class Downloader extends AsyncTask&lt;Void, Integer, Integer&gt; {

		@Override
		protected void onPreExecute() {
			super.onPreExecute();

			// Displays the progress bar for the first time.
			mBuilder.setProgress(100, 0, false);
			mNotifyManager.notify(id, mBuilder.build());
		}

		@Override
		protected void onProgressUpdate(Integer... values) {
			// Update progress
			mBuilder.setProgress(100, values[0], false);
			mNotifyManager.notify(id, mBuilder.build());
			super.onProgressUpdate(values);
		}

		@Override
		protected Integer doInBackground(Void... params) {
			int i;
			for (i = 0; i &lt;= 100; i += 5) {
				// Sets the progress indicator completion percentage
				publishProgress(Math.min(i, 100));
				try {
					// Sleep for 5 seconds
					Thread.sleep(2 * 1000);
				} catch (InterruptedException e) {
					Log.d(""TAG"", ""sleep failure"");
				}
			}
			return null;
		}

		@Override
		protected void onPostExecute(Integer result) {
			super.onPostExecute(result);
			mBuilder.setContentText(""Download complete"");
			// Removes the progress bar
			mBuilder.setProgress(0, 0, false);
			mNotifyManager.notify(id, mBuilder.build());
		}
	}
}
</pre>
<h2>Download Source Code</h2>
<h4 style=""font-weight: inherit;"">Download Source Code from <span style=""color: #0000ff;""><strong style=""color: inherit;""><a href=""https://github.com/javatechig/Progress-Notification-Example-Android"" rel=""nofollow noopener noreferrer"" style=""font-weight: inherit;"" target=""_blank""><span style=""color: #0000ff;"">GitHub.</span></a></strong></span></h4>
<h2>Output</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Displaying Progress Notification in Android Example"" class=""alignnone size-full wp-image-4818"" height=""459"" loading=""lazy"" src=""/media/uploads/articles/296/Displaying-Progress-Notification-in-Android-Example.png"" srcset="""" width=""522""/></a></p>
",0,"standard","post"
"TennisTV – Best Live Streaming App for Tennis fans","tennistv-best-live-streaming-app-for-tennis-fans","TennisTV best Live Streaming App for Tennis fans provides HD quality video streaming on your android smartphone. Watch ATP and WTA tournaments including the Barclays ATP World Tour Finals, the BNP Paribas Open in Indian Wells as well as all ATP Masters 1000 and 500 tournaments, the BNP Paribas WTA Championships and the WTA Premiers.
","LIVE","<p>As a Tennis fan, my hunt for the best mobile app is interminable. I am a bit crazy about best utilizing my smartphone for getting all the World wide Tennis tour updates. There are several apps that are available on Google Play. I have tried all/most of them but, none of them have quite hit the mask.</p>
<p>The latest updates on my old installed “TennisTV” application receive my attention. Recently it is updated with Version 3.0.0 with a complete re-design and gives me quite flawless experience. Undoubtedly I get all that, I have been looking for since I own my first ever smartphone.</p>
<h4>Download TennisTV app from <strong><a href=""https://play.google.com/store/apps/details?id=com.tennistv.women"" rel=""nofollow noopener noreferrer"" target=""_blank"">Google Play</a>.</strong></h4>
<h2>Feature highlights</h2>
<ol>
<li>Striking new features of Live streaming of matches with wide coverage. More than 2,000 matches a year from top ATP and WTA tournaments including the Barclays ATP World Tour Finals, the BNP Paribas Open in Indian Wells as well as all ATP Masters 1000 and 500 tournaments, the BNP Paribas WTA Championships and the WTA Premiers.</li>
<li>HD quality video streaming on your android smartphone.</li>
<li>Brand new User interface that is compatible with Android phones and tablets with android operating system 4.0 (Ice cream sandwich) and above.</li>
<li>It shows the list of matches/tournaments information for the complete calendar year. Schedule feature is more appealing with filter to all the list of matches for today and tomorrow. You may add an upcoming match to your alerts list and app notifies when the match is about to start.</li>
<li>Players list shows the list of top players based on their ranking and allows user to add a player as “favorite” player.</li>
<li>Push notification that sends user notification on different match update for your favorite player.</li>
<li>Can play lots of highlights, interviews and featured videos on pre and post matches</li>
</ol>
<h2>Design and Performance</h2>
<p>On the whole, “TennisTV-Live Streaming Tennis” is a slick app. The color scheme of the app is using both dark and light theme. Screens with more text to read are kept white while, other screens are using dark theme. The UI in this app is much focused with features to swipe, drag-drop (Tablet only), and pop overs. The application is much focused towards providing best performance, by having paginated content loading and caching. Unlike other app, no screen except the help and FAQ are using WebView, and hence app with pure native experience is quite smooth to use.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""TennisTV Application Screenshot"" class=""aligncenter size-full wp-image-4808"" height=""401"" loading=""lazy"" sizes=""(max-width: 659px) 100vw, 659px"" src=""/media/uploads/articles/297/TennisTV-Application-Screenshot.png"" srcset="""" width=""659""/></a></p>
<p>All other live streaming application there on Google Play, shows the default media player for streaming video. This is boring sometimes. However, this app brings its own design to your media player with very fewer controls without confusing user. The HD quality live stream video loads quickly on my Wi-Fi. But in 3G bandwidth, It takes little longer than Wi-Fi.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""TennisTV Live player"" class=""aligncenter size-medium wp-image-4809"" height=""348"" loading=""lazy"" src=""/media/uploads/articles/297/TennisTV-Live-player-620x348.png"" srcset="""" width=""620""/></a></p>
<h2>Compatibility</h2>
<p>The older version of app was targeted for android version 2.3 onwards. But, since the update the newer version of “TennisTV-Live Streaming Tennis” (Version 3.0.0) supports android OS version 4.0 and higher. It supports wide range of devices includes Samsung S series, HTC one Series, Nexus Phones, etc. It performs well even on low end phones like Samsung Galaxy Grand. Current version supports android tablet with 10 inch screens only. Sad, but currently app doesn’t guaranty to work on 7 inch tablets. Addition of support to 7 inch tablet will certainly increase the user base.</p>
<h2>Subscription</h2>
<p>All the live content in this app need subscription to play. Below are the subscription options available that, you can purchase from Google Play. Once you have an account with valid subscription, you get access to their live content on your computer, iPad, iPhone or Android device. The entire payment gateway is through Google Play, and so no hassle of security or no need to add any of your credit cards with them.</p>
<h2></h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""TennisTV Subscription options"" class=""aligncenter size-full wp-image-4806"" height=""464"" loading=""lazy"" src=""/media/uploads/articles/297/TennisTV-Subscription-options.png"" srcset="""" width=""529""/></a></p>
<h2>Final Thoughts</h2>
<p>There is only one annoying aspects to TennisTV app, you can’t stream any live content without subscribing to their service. There should be an option for user to play a preview live stream video for certain period before user purchase any subscription.</p>
",0,"standard","post"
"How to Use Hindi Font in Android Application","how-to-use-hindi-font-in-android-application","In this example we&#8217;ll show you how to support hindi, bangala, marathi fonts in Android application. Android phone doesn&#8217;t support Devanagari fonts. However if you want to use hindi, tamil, bangali or other Devanagari fonts in your Android Application you have an alternative of using external fonts.
","LIVE","<p>In this example we’ll show you how to support hindi, bangala, marathi fonts in Android application. Android phone doesn’t support Devanagari fonts. However if you want to use hindi, tamil, bangali or other Devanagari fonts in your Android Application you have an alternative of using external fonts. Follow below steps to achieve this</p>
<ol>
<li>Download an external Devanagari font that you like to use in your application. Here in this example, I have downloaded “<strong><a href=""http://hindi-fonts.com/fonts/download/Ananda-Lipi-Bold-Cn-Bt"" rel=""nofollow noopener noreferrer"" target=""_blank"">Ananda-Lipi-Bold</a></strong>” font. You can also download from <strong><a href=""http://hindi-fonts.com/fonts/download/Ananda-Lipi-Bold-Cn-Bt"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""Download Ananda-Lipi-Bold font"">here</a></strong></li>
<li>Create a new folder “fonts” under assets and copy the downloaded .ttf font to your assets/font folder.</li>
<li>Load .ttf to your TextView</li>
</ol>
<h2>Activity Layout</h2>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""#900001""
    android:padding=""@dimen/activity_vertical_margin"" &gt;

    &lt;TextView
        android:id=""@+id/textView""
        android:gravity=""center_horizontal""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_centerInParent=""true""
        android:text=""@string/hanuman_chalisa""
        android:textColor=""#ecaa00""
        android:textSize=""28sp"" /&gt;

&lt;/RelativeLayout&gt;
</pre>
<h2>String.xml file</h2>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;resources&gt;

    &lt;string name=""app_name""&gt;HindiFont&lt;/string&gt;
    &lt;string name=""hanuman_chalisa""&gt; श्रीगुरु चरण् सरोजरज, निजमनमुकुर सुधार ।\n बरणौ रघुबर बिमल यश, जो दायक फलचार ॥\n\n बुद्धिहीन तनु जानिके, सुमिरौं पवन कुमार ।\n बल बुद्धिविद्या देहु मोहिं, हरहु कलेश विकार ॥
&lt;/string&gt;

&lt;/resources&gt;
</pre>
<h2>Activity Java Code</h2>
<pre class=""prettyprint lang-java"">import android.app.Activity;
import android.graphics.Typeface;
import android.os.Bundle;
import android.widget.TextView;

public class MainActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		TextView tv = (TextView) findViewById(R.id.textView);
		Typeface fontHindi = Typeface.createFromAsset(getAssets(),
				""fonts/Ananda Lipi Bold Cn Bt.ttf"");
		tv.setTypeface(fontHindi);
	}
}
</pre>
<h2>Output</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Screenshot_2014-05-23-17-13-49"" class=""aligncenter size-medium wp-image-4786"" height=""348"" loading=""lazy"" src=""/media/uploads/articles/298/Screenshot_2014-05-23-17-13-49-620x348.png"" srcset="""" width=""620""/></a></p>
",0,"standard","post"
"Selection Sort Example In Data Structure","selection-sort-example-data-structure","A selection sort is slightly more complicated. but relatively easy to understand and to code. It is one of the slow sorting technique. Given an unsorted array of integer values, a selection sort visits each element of the array, in turn.
","LIVE","<p>In this example we explain selection sort in data structure. A selection sort is slightly more complicated. but relatively easy to understand and to code. It is one of the slow sorting technique. Given an unsorted array of integer values, a selection sort visits each element of the array, in turn. As it visits an element, it employs a second index to scan the array from the present location to the end while it identifies the least (smallest) value in that segment of the array. It then swaps that least value with the current value. Because one index scans the array once while another index scans part of the array each time, this sort algorithm is also O(n2).</p>
<p>Simple steps for selection sort. [Assume we are sorted the n items in array A]
for i = 1 to n do</p>
<p>for j = j+1 to n do</p>
<p>if A[i] &gt; A[j] then swap(A[i],A[j])</p>
<h2>Example: C program, Function to arrange number in ascending order using Selection sort technique.</h2>
<pre class=""prettyprint lang-c"">#include&lt;stdio.h&gt;
void selection_sort(int a[],int n);
{
    int i,j,pos,small,temp;
    for(i=0;i&lt;n-1;i++)
    {
        small=a[i]; /* Initial small number in ith pass */
        pos=i; /* Position of smaller number */
        /* Find the minimum of remaining elements along with the position */
        for(j=i+1;j&lt;n;j++)
        {
            if(a[i]&lt;small)
            {
                small=a[j];
                pos=j;
            }
        }
        
        /* Exchange ith item with least item */
        temp=a[pos];
        a[pos] = a[i];
        a[i]=temp;
    }
}

void main()
{
    int i,n,a[20];
    printf(""Enter the number of elements to sort"");
    scanf(""%d"",&amp;n);
    printf(""Enter %d elements to sort "",n);
    for(i=0;i&lt;n;i++)
    scanf(""%d"",&amp;a[i]);
    selection_sort(a,n)
    printf(""The sort elements are"");
    for(i=0;i&lt;n;i++)
    printf(""%d"",&amp;a[i]);
}
</pre>
",0,"standard","post"
"Bubble Sort Example In Data Structure","bubble-sort-example-data-structure","In this example, we will see Bubble sort algorithm with example. In bubble sort we&#8217;ll compare each element of list to the element that follows it. If the current element is greater than the element at next location, then they are in the wrong order, and we&#8217;ll swap them. 
","LIVE","<p>In this example, we will see bubble sort example In data structure .</p>
<ol>
<li>In bubble sort we’ll compare each element of list to the element that follows it. If the current element is greater than the element at next location, then they are in the wrong order, and we’ll swap them. In this way, the element with large value will be percolate upward. Now the last element in the array is guaranteed to be where it belongs. In the next step we do exactly the same thing. Repeating the above step will result a sorted array.</li>
<li>The bubble sort can be made to work in the opposite direction. moving the least value to the beginning of the array on each pass. This is sometimes referred to as a stone sort.</li>
<li>In this sorting algorithm, multiple Swapping take place in one pass. Smaller elements move or ‘bubble’ up to the top of the list, hence the name given to the algorithm.</li>
<li>In this method adjacent members of the list to be sorted are compared. If the item on top is greater than the item immediately below it, they are swapped. This process is carried on till the list is sorted.</li>
<li><strong>Note:</strong> At least one pass is required to check whether the items are sorted. So, the best case time complexity is O(1).</li>
</ol>
<h2>Algorithm for Bubble Sort</h2>
<pre>INPUT: LIST [] of N items in random order
O UTPUT: LIST [] of N items sorted in ascending order.
1. SWAP = TRUE
PASS = 0/

2. WHILE SWAP = TRUE DO
BEGIN.

2.1 FOR I = 0 TO (N-PASS) DO
BEGIN

2.1.1 IFA[I] &gt;A [I+1]
BEGIN
TMP = A[I]
A[I] = A[I + 1]
A[I + 1] = TMP
SWAP = TRUE
END
ELSE
SWAP = FALSE

2.1.2 PASS = PASS + 1
END
END
</pre>
<h2>Example : C program, Function to arrange numbers in ascending order using bubble sort technique.</h2>
<pre lang=""c"">#include&lt;stdio.h&gt;

void bubble_sort(int a[], int n)
{
    int i; /* To access subsequent item while comparing*/
    int j; /* Keep track of the passes */
    int temp; /* Used to exchange the item */
    int sum; /* Holds the total number of exchanges */
    int pass; /*Holds the number of passes required */
    int exchag; /* Holds the number of exchanges in each pass */
    int flag; /* Indicate any exchange has been done or not */
    sum = 0;
    pass = 0;
    
    for(j=1;j&lt;n;j++)
    {
        exchg = 0; /* number of exchanges just before the pass */
        flage = 0; /* No exchange been done */
        for(i=0;i&lt;n-j;i++)
        {
            if(a[i]&gt;=a[i+1])
            {
                
                /* Exchange and update the number of exchange in the current pass*/
                temp=a[i];
                a[i]=a[i+1];
                a[i+1=temp;
                exchg++;
                sum++ /* Update the total number of exchanges */
                flag=1; /* Exchange has been done */
            }
        }
        
        pass++; /* update the number of passes */
        printf(""Number of exchanges in pass : %d=%dn"",j,exchg);
        print(""Total number of exchanges = %dn"",sum);
    }
    
    void main()
    {
        int i,n,a[20];
        printf(""Enter the number of items to sort"");
        scanf(""%d"",&amp;n);
        print(""Enter the items to sort"");
        for(i=0;i&lt;n;i++)
        scanf(""%d"",&amp;a[i]);
        bubble_sort(a,n);
        printf(""The sorted items are"");
        for(i=0;i&lt;n;i++)
        {
            printf(""%dn"",a[i]);
        }
    }
</pre>
",0,"standard","post"
"Insertion Sort Example In Data Structure","insertion-sort-example-in-data-structure","In this example, we will see Insertion sort algorithm with example. An insertion sort is quite simple to understand and simple to implement. An insertion sort visits each element of the array, in turn. As it visits a particular element, it scans the array from the beginning to end to determines where in that segment of the array the current value belongs.
","LIVE","<p>In this tutorial, we will see insertion sort example In data structure . An insertion sort is quite simple to understand and simple to implement.</p>
<ol>
<li>An insertion sort visits each element of the array, in turn. As it visits a particular element, it scans the array from the beginning to end to determines where in that segment of the array the current value belongs.</li>
<li>It then inserts the current value in that location and shifts every element of the array to the right, up to the present location. It then goes on to the next location (value) in the array.</li>
<li>Notice that one index is going from 0 to n and for each such value and another index is scanning the array from 0 to the value of the first index. The result of this is – that this type of sort is O(n2). Insertion sort is slower.</li>
</ol>
<h2>Case Study</h2>
<p>This is a naturally occurring sorting method exemplified by a card player arranging the cards dealt to him. He picks up the cards as they are dealt and inserts them into the required position. Thus at every step, we insert an item into its proper place in an already ordered list.</p>
<p>Example: Sort the following list (8,6,4,1,3) using insertion sort</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Insertion Sort"" class=""alignnone size-full wp-image-4767"" height=""335"" loading=""lazy"" sizes=""(max-width: 418px) 100vw, 418px"" src=""/media/uploads/articles/301/Insertion-Sort.png"" srcset="""" width=""418""/></a></p>
<h2 style=""color: #494949;"">Insertion sort algorithm</h2>
<p style=""color: #494949;"">Thus to find the correct position search the list till an item just greater than the target is found. Shift all the items from this point one, down the list. Insert the target in the vacated slot.</p>
<pre>INPUT: LIST[ ] of N items in random order.
OUTPUT: LIST[ ] of N items in sorted order.
1. BEGIN
2. FORI = 2 TO N DO
3. BEGIN
4. IF LIST[I] LIST[I-1]
5. THEN BEGIN
6. J = I.
7. T = LIST [I] /*STORE LIST [I] */
8. REPEAT /* MOVE OTHER ITEMS DOWN THE LIST.
9. J = J-1
10. LIST [J + 1] = LIST [J];
11. IF J = 1 THEN
12. FOUND = TRUE
13. UNTIL (FOUND = TRUE)
14. LIST [I] = T
15. END
16. END
17. END
</pre>
<h2>Example: Program to sort n numbers using insertion sort.</h2>
<pre class=""prettyprint lang-c"">#include&lt;stdio.h&gt;

void insertion_sort(int a[],int n)
{
    int i,j,item;
    for(i=0;i&lt;n;i++)
    {
        /* item to be inserted */
        item = a[i];
        /* Try from (i-1)th position */
        j=i-1;
        while(j&gt;=0 &amp;&amp; item&lt;a[j])
        {
            A[j+1] = a[j] /* Move the item to the next position */
            j--; /* and update the position */
        }
        A[j+1]=item; /* appropriate position found and so insert item */
    }
}

void main()
{
    int i, n,a[20];
    printf(""Enter the no. of elements to sort n"");
    scanf(""%d"", &amp;n);
    printf(""Enter n elements n"");
    for(i=0;i&lt;n;i++)
    scanf(""%d"",&amp;a[i]);
    insertion_sort(a,n);
    printf(""The sorted array is n"");
    for(i=0;i&lt;n;i++)
    
    printf(""%dn"",a[i]);
    
}
</pre>
",0,"standard","post"
"Sorting Methods In Data Structures","sorting-methods-in-data-structures","Sorting is the problem of taking an arbitrary permutation of n items and rearranging them into the total order. Sorting algorithms are used in all kinds of applications and are necessary for instance, if we plan to use efficient searching algorithms like Binary Search or Interpolation Search since these require their data to be sorted.
","LIVE","<p>Retrieval of information is made easier when it is stored in some predefined order. Sorting is, therefore, a very important computer application activity. Many sorting algorithms are available. Differing environments require differing sorting methods.</p>
<p>Sorting algorithms can be characterized in the two ways</p>
<ol>
<li>Simple algorithms which require the order of n2 (written as O (n2) comparisons to sort n items.</li>
<li>Sophisticated algorithms that require the O(nlog2n) comparisons to sort items.</li>
</ol>
<p>The difference lies in the fact that the first method move data only over small distances in the process of sorting, whereas the second method method large distances, so that items settle into the proper order sooner, thus resulting in fewer comparisons. Performance of a sorting algorithm can also depend on the degree of order a heady present in the data.</p>
<p>There are two basic categories of sorting methods:</p>
<ol>
<li>Internal Sorting</li>
<li>External Sorting</li>
</ol>
<p>Internal sorting are applied when the entire collection of data to be sorted is small enough that the sorting can take place within main memory. The time required to read or write is not considered to be significant in evaluating the performance of internal sorting methods. External sorting methods are applied to larger collection of data which reside on secondary devices read and write access time are major concern in determine sort performances.</p>
<h2 style=""color: #494949;"">Overview of Sorting Methods</h2>
<p style=""color: #494949;"">In my previous post on Binary search, searching data was efficient when the array was sorted. Indeed, sorting method is one of the most common operation in computing.  The general sorting problem is simple enough to describe; Given an initially un-ordered array of N records, with one field distinguished as the key, rearrange the records so they are sorted into increasing (or decreasing) order according to each record’s key.</p>
<p style=""color: #494949;"">Sorting is the problem of taking an arbitrary permutation of n items and rearranging them into the total order.</p>
<ul>
<li><b>Increasing or Decreasing Order?</b> The same algorithm can be used by both all we need do is change condition in the comparison function as we desire.</li>
<li><b>What about equal keys?</b> Does the order matter or not? May be we need to sort on secondary keys or leave in the same order as the original permutations.</li>
<li><b>What about non-numerical data?</b> Alphabetizing is sorting text strings and libraries have very complicated rules concerning punctuation etc. Is Brown-Williams before or after Brown America before or after Brown John?</li>
</ul>
<p style=""color: #494949;"">Sorting algorithms are used in all kinds of applications and are necessary for instance, if we plan to use efficient searching algorithms like Binary Search or Interpolation Search since these require their data to be sorted.</p>
<p style=""color: #494949;"">There are dozens of algorithms, the choice of which depends on factors such as the number of items relative to working memory, knowledge of the orderliness of the items or the range of the keys, the cost of comparing keys vs. the cost of moving items, etc.</p>
<p style=""color: #494949;"">To choose an algorithm we attempt to characterize the performance of the algorithm with respect to an array of size N. We then determine which operations are critical for each type of problem. There is an memory overhead need to be taken into consideration, before opting for an efficient sorting algorithm.</p>
<p style=""color: #494949;"">Following are several points you must think before choosing an algorithm.</p>
<ol>
<li>Number of times it compares an element in the array to another value (comparisons) or</li>
<li>Number of times it moves an element from or to a position in the array (swaps).</li>
<li>Amount of extra memory used by a sort is important.</li>
<li>Sometimes, when sorting an extremely large data set such as Census Data, there are simply, too many records for them to all fit in memory at once. In this case, we have to resort to external sorting algorithms that don’t assume we have random access to the data. Instead, these algorithms assume the data is stored on magnetic tapes or disks and only portions of the data will fit in memory. These algorithms use “sequential access” to the data and proceed by reading in, processing, and writing out blocks of records at a time. These partially sorted blocks need to be combined or merged in some manner to eventually sort the entire list.</li>
<li>One final Issue to keep in mind when Implementing a sorting algorithm is the size of the records themselves. Many sorting algorithms move and interchange records in memory several times before they are moved into their final sorted position, For large records, this can add up to lots of execution time spent simply copying data. A popular solution to this problem is called “indirect sorting”. The Idea is to sort the indices of the records, rather than the records themselves.</li>
</ol>
<h2>How do you sort?</h2>
<p>There are several different ideas using which you can write sorting algorithms.</p>
<ol>
<li><a href=""http://stacktips.com/c/insertion-sort-example-in-data-structure"" title=""Insertion Sort Example In Data Structure""><strong>Insertion</strong></a> – putting an element in the appropriate place in a sorted list yields a larger sorted list.</li>
<li><strong>Exchange</strong> – rearrange pairs of elements which are out of order, until no such pairs remain.</li>
<li><strong><a href=""http://stacktips.com/c/selection-sort-example-data-structure"" title=""Selection Sort Example In Data Structure"">Selection</a></strong> – extract the largest element form the list, remove it, and repeat.</li>
<li><strong>Distribution</strong> – separate into piles based on the first letter, then sort each pile.</li>
<li><strong>Merging</strong> -Two sorted lists can be easily combined to form a sorted list.</li>
</ol>
<p>There are many different methods used for sorting. Quite frequently, a combination of these above methods are used to perform a sort operation. The four common sorting methods are selection, insertion, comparison, and divide and conquer.</p>
<ol>
<li><strong>Priority queue sorting methods</strong>: Example: Selection Sort and Heap Sort</li>
<li><strong>Divided-and-conquer method:</strong> Example: MergeSort and Quicksort</li>
<li><strong>Insertion based sort:</strong> Example: InsertionSort</li>
<li><strong>Other methods:Example:</strong> <a href=""http://stacktips.com/c/bubble-sort-example-data-structure"" title=""Bubble Sort Example In Data Structure"">BubbleSort</a> and ShellSort</li>
</ol>
",0,"standard","post"
"Binary Search Algorithm In Data Structure","binary-search-algorithm-data-structure","Before we reading through Binary search algorithm, let us recap sequential search or linear search. In Linear search algorithm searching begins with searching every element of the list till the required record is found. Also it doesn&#8217;t demand the sequence or order of elements in the list. If the list is quite huge, then this approach is not optimal. The drawbacks of sequential search can be eliminated by using Binary search algorithm.
","LIVE","<p>In this tutorial, we will see binary search algorithm In data structure. Before we reading through Binary search algorithm, let us recap sequential search or linear search. In Linear search algorithm searching begins with searching every element of the list till the required record is found. Also it doesn’t demand the sequence or order of elements in the list. If the list is quite huge, then this approach is not optimal. The drawbacks of sequential search can be eliminated by using Binary search algorithm.</p>
<h2>How binary search works?</h2>
<p>In binary search, it halves the size of the list to search in each iterations. It is faster then Linear search. Binary search requires sorted data to operate on since the data may not be contiguous like the pages of a book. We cannot guess which quarter of the data the required item may be in. So we divide the list in the center each time.</p>
<h3><span style=""text-decoration: underline;"">Example: Search for page number 6 in a book of 20 pages</span></h3>
<p>Typical example of binary search is searching for a page in a book. Suppose you were searching for page 6 in book of 20 pages. You would first open it at random towards the later half of the book. If the page is less than 6, you would open at a page to the right, it is greater than 6 you would open at a page to the left, repeating the process till page 6 was found. As you can see, by the first instinctive search, you dramatically reduced the number of pages to search.</p>
<p>In the above example, we have an sorted list of size 20. The first comparison is with the middle element Page number 10. This eliminates the last 10 elements, as Page 6 is less then 10. The second comparison is with the middle element from Page 1 to Page 10,  i.e. with Page 5. This eliminates Page 1 to Page 5 as Page 6 is greater then Page 5. This continues until Page 6 is found. Now let us formulate the algorithm for binary search.</p>
<h2>Algorithm Binary Search</h2>
<p>This represents the binary search method to find a required item in a list sorted in increasing order .</p>
<pre>INPUT: Sorted LIST of size N, Target Value T
OUTPUT: Position of T in the LIST = I
BEGIN

1. MAX = N
MIN = 1
FOUND = false

2. WHILE (FOUND is false) and (MAX &gt; = MIN)
2.1 MID = (MAX + MIN)DIV 2
2.2 If T = LIST [MID]
I=MID
FOUND = true
Else If T &lt; LIST[MID]
MAX = MID-1
Else
MIN = MD+1
END
</pre>
<h2>Analysis of Binary Search</h2>
<p>The binary search method needs no; more than [Iog2n] + 1 comparisons. This implies that for an array of a million entries, only about twenty comparisons will be needed. Contrast this with the case of sequential search which on the average will need (n+1)/2 comparisons.</p>
<p>In the binary search method just described above, it is always the key in the middle of the list currently being examined that is used for comparison. The splitting of the list can be illustrated through a binary decision tree in which the value of a node is the index of the key being tested.</p>
<p>Suppose there are 31 records, then the first key compared is at location 16 of the list since (1 + 31)/2 = 16. If the key is less than the key at location 16 the location 8 is tested since (1 + 15)/2 = 8; or if key is less than the key at location 16, then the location 24 is tested.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Binary Search Process"" class=""alignnone size-medium wp-image-4746"" height=""355"" loading=""lazy"" src=""/media/uploads/articles/303/Binary-Search-Process-620x355.png"" srcset="""" width=""620""/></a></p>
<h3><span style=""text-decoration: underline;"">Example: Program to search for an item using Binary Search</span></h3>
<pre class=""prettyprint lang-c"">#include &lt;stdio.h&gt;
 
int main()
{
   int c, first, last, middle, n, search, array[100];
 
   printf(""Enter number of elements\n"");
   scanf(""%d"",&amp;n);
 
   printf(""Enter %d integers\n"", n);
 
   for ( c = 0 ; c &lt; n ; c++ )
      scanf(""%d"",&amp;array[c]);
 
   printf(""Enter value to find\n"");
   scanf(""%d"",&amp;search);
 
   first = 0;
   last = n - 1;
   middle = (first+last)/2;
 
   while( first &lt;= last )
   {
      if ( array[middle] &lt; search )
         first = middle + 1;    
      else if ( array[middle] == search ) 
      {
         printf(""%d found at location %d.\n"", search, middle+1);
         break;
      }
      else
         last = middle - 1;
 
      middle = (first + last)/2;
   }
   if ( first &gt; last )
      printf(""Not found! %d is not present in the list.\n"", search);
 
   return 0;   
}
</pre>
",0,"standard","post"
"Sequential Search Algorithm in Data Structure","sequential-search-algorithm-in-data-structure","Sequential Search is the most natural searching method. In this method, the searching begins with searching every element of the list till the required record is found. It makes no demands on the ordering of records. It takes considerably amount of time and is slower.
","LIVE","<p>Sequential Search is the most natural searching method. In this method, the searching begins with searching every element of the list till the required record is found. It makes no demands on the ordering of records. It takes considerably amount of time and is slower.</p>
<h1>Sequential Search Algorithm</h1>
<p>This represents the algorithm to search a list of values of to find the required one.</p>
<pre>INPUT: List of size N. Target value T
OUTPUT: Position of T in the list I
BEGIN

1. Set FOUND to false
Set I to 0

2. While (I&lt;=N) and (FOUND is false)
If List [I] = T
FOUND = true
Else
I=I+1
END

3. If FOUND is false
T is not present in List.
END
</pre>
<h3>Analysis of Sequential Search</h3>
<p>Whether the sequential search is carried out on lists implemented as arrays or linked lists or on files, the criterial part in performance is the comparison loop step 2. Obviously the fewer the number of comparisons, the sooner the algorithm will terminate.</p>
<p>The fewest possible comparisons = 1. When the required item is the first item in the list. The maximum comparisons = N when the required item is the last item in the list. Thus if the required item is in position I in the list, I comparisons are required. Hence the average number of comparisons done by sequential search is (N+1)/2</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""clip-image00285"" class=""size-full wp-image-4737 aligncenter"" height=""130"" loading=""lazy"" sizes=""(max-width: 131px) 100vw, 131px"" src=""/media/uploads/articles/304/clip-image00285.jpg"" srcset="""" width=""131""/></a></p>
<p>Sequential search is easy to write and efficient for short lists. It does not require sorted data. However it is disastrous for long lists. There is no way of quickly establishing that the required item is not in the list or of finding all occurrences of a required item at one place. We can overcome these deficiencies with Binary search.</p>
<h3>Example- Program to search for an item using linear search.</h3>
<pre class=""prettyprint lang-c"">#include &lt; stdio.h &gt;

/* Search for key in the List */
int seq_search(int key, int a[], int n)
{
    Int I;
    for (i = 0; i &lt; n; i++)
    {
        If(a[i] == key) return i + 1
    }
    return 0;
}

void main()
{
    int I, n, key, pos, a[20];
    printf(""Enter the value of n"");
    scanf(""%d"", &amp; n);
    printf(""Enter n valuesn"");
    for (i = 0; i &lt; n; i++)
        scanf(""%d"", &amp; a[i]);

    printf(""Enter the item to be searched"");
    scanf(""%d"", &amp; key);

    pos = seq_search(key, n, a);
    if (pos == 0)
        printf(""Search unscccessful n"");
    else
        printf(""key found at position = %d n"", pos);
}
</pre>
",0,"standard","post"
"Searching Methods in Data Structure","searching-methods-in-data-structure","Searching methods are designed to take advantage of the file organisation and optimize the search for a particular record or to establish its absence. The file organisation and searching method chosen can make a substantial difference to an application&#8217;s performance.
","LIVE","<h1>Introduction</h1>
<p>Information retrieval is one of the most important applications of computers. It usually involves giving a piece of information called the key, and ask to find a record that contains other associated information. This is achieved by first going through the list to find if the given key exists or not, a process called searching. Computer systems are often used to store large amounts of data from which individual records must be retrieved according to some search criterion. The process of searching for an item in a data structure can be quit straightforward or very complex.</p>
<p>Searching can be done on internal data structures or on external data structures. Information retrieval in the required format is the central activity in all computer applications. This involves searching. This block deals with searching techniques. Searching methods are designed to take advantage of the file organisation and optimize the search for a particular record or to establish its absence. The file organisation and searching method chosen can make a substantial difference to an application’s performance.</p>
<h1>Objectives</h1>
<p>In this series of tutorial, you’ll be able to understand the following</p>
<ol>
<li>Brief discussion on Basics Searching Techniques.</li>
<li>Algorithmic Notation such as The average time, The worst-case time and, The best possible time.</li>
</ol>
<h1>Basics Searching Techniques</h1>
<p>Consider a list of n elements or can represent a file of n records, where each element is a key / number. The task is to find a particular key in the list in the shortest possible time. If you know you are going to search for an item in a set, you will need to think carefully about what type of data structure you will use for that set. At low level, the only searches that get mentioned are for sorted and unsorted arrays. However, these are not the only data types that are useful for searching.</p>
<h2><a href=""http://stacktips.com/c/sequential-search-or-linear-search-data-structure"">1. Linear search</a></h2>
<p>Start at the beginning of the list and check every element of the list. Very slow [order O(n) ] but works on an unsorted list. <a href=""http://stacktips.com/c/sequential-search-or-linear-search-data-structure"">Read Linear Search more in detailed</a>.</p>
<h2><a href=""http://stacktips.com/c/binary-search-algorithm-data-structure"">2. Binary Search</a></h2>
<p>This is used for searching in a sorted array. Test the middle element of the array. If it is too big. Repeat the process in the left half of the array, and the right half if it’s too small. In this way, the amount of space that needs to be searched is halved every time, so the time is O(log n). <a href=""http://stacktips.com/c/binary-search-algorithm-data-structure"">Read Binary Search more in detailed</a>.</p>
<h2>3. Hash Search</h2>
<p>Searching a hash table is easy and extremely fast, just find the hash value for the item you’re looking for then go to that index and start searching the array until you find what you are looking for or you hit a blank spot. The order is pretty close to o(1), depending on how full your hash table is.</p>
<h2>4. Binary Tree search</h2>
<p>Search a binary tree is just as easy as searching a hash table, but it is usually slower (especially if the tree is badly unbalanced). Just start at the root. Then go down the left subtree if the root is too big and the right subtree if is too small. Repeat until you find what you want or the sub-tree you want isn’t there. The running time is O(log n) on average and O(n) in the worst case.</p>
<h1>Algorithmic Notation</h1>
<p>Let’s examine how long it will take to find an item matching a key in the collections. We are interested in:</p>
<ol>
<li>The average time</li>
<li>The worst-case time and</li>
<li>The best possible time.</li>
</ol>
<p>However, we will generally be most concerned with the worst-case time as calculations based on worst-case time can lead to guaranteed performance predictions. Conveniently, the worst-case time are generally easier to calculate than average time. If there are n items in our collection whether it is stored as an array or as linked list-then it is obvious that in the worst case, when there is no item in the collection with the desired key, then n comparisons of the key with keys of the items in the collection will have to be made. To simplify analysis and comparison of algorithms, we look for a dominated operation and count the number of times that dominant operation has to be performed. In the case of searching, the dominant operation is the comparison, since the search requires n comparisons in the worst case, we say this is O(n), (pronounced as big-Oh-n or Oh-n) algorithm.</p>
<p><strong>The best case-in which the first comparison returns a match-requires a single comparison and is O(1). </strong>The average time depends on the probability that the key will be found in the collection-this is something that we would not expected to know in the majority of cases. Thus in this case, as in most others, estimation of the average time is of little utility. If the performance of the system is vital, i.e. it’s part of a life-critical system, then we must use the worst case in our design calculations as it represents the best guaranteed performance.</p>
",0,"standard","post"
"Unordered and Ordered List Example in HTML","unordered-and-ordered-list-example-in-html","List provides methods to layout item or elements sequences in a HTML document. HTML provides unordered, ordered, and definition list types.
","LIVE","<p>List provides methods to layout item or elements sequences in a HTML document. HTML provides unordered, ordered, and definition list types.</p>
<ul>
<li>Ordered lists are numbered in some fashion, while unordered lists are bulleted.</li>
<li>Definition lists consist of a term followed by its definition.</li>
<li>Both ordered and unordered lists require start and end tags as well as the use of a special element to indicate where each list item begins (the &lt;LI&gt; tag).</li>
</ul>
<p><strong>&lt;LI&gt; Tag: </strong>List Item &lt;LI&gt; is a singleton tag. It is a child element that is used to create a list item in an ordered list, unordered list, menu list, or directory list.</p>
<p>When an ordered list &lt;OL&gt; is used, the &lt;LI&gt; element will be rendered with a number. One can control that number’s appearance with the &lt;TYPE&gt; Attribute</p>
<h2>&lt;UL&gt; Tag : Unordered List</h2>
<p>Similarly, inside an unordered list &lt; UL&gt;, one can control the type of bullet; displayed with &lt;TYPE&gt;. VALUE = number changes the count of ordered lists as they progress.</p>
<p>To create an<strong> unordered list, you can put your content inside &lt;UL&gt; and &lt;/UL&gt; </strong>tag. This creates an unordered list with bullets preceding each list item. Unordered lists can be preceded by anyone of several bullet styles; a closed circle, an open circle, or a square.</p>
<p><strong>Attributes:</strong> Renders the list as compactly as possible by reducing line leading and spacing. TYPE (DISC | SQUARE | CIRCLE)</p>
<ul>
<li>The type of bullet can be suggested with the &lt;TYPE&gt; attribute. The CIRCLE attribute value is used for a hollow bullet, the DISC type creates a solid bullet, and the SQUARE attribute value renders a solid block.</li>
<li>The default appearance for a list is with a disc.</li>
<li>You can use an optional &lt;/LI&gt; end tag at the end of each list item.</li>
</ul>
<p>The following example generates two separate lists;</p>
<pre class=""prettyprint lang-html"">
&lt;HTML&gt;
   &lt;HEAD&gt;
      &lt;TITLE&gt; Javatechig | List Example &lt;/TITLE&gt;
   &lt;/HEAD&gt;
   &lt;BODY&gt;
      &lt;H1&gt; Mobile Operating System&lt;/h1&gt;
      &lt;UL&gt;
         &lt;LI&gt; Android 
         &lt;LI&gt; Blckberry
         &lt;LI&gt; iPhone
         &lt;LI&gt; Windows Phone
      &lt;/UL&gt;
      &lt;H1&gt;Mobile Manufacturers&lt;/h1&gt;
      &lt;UL TYPE = ""SQUARE""&gt;
         &lt;LI&gt; Samsung 
         &lt;LI&gt; HTC 
         &lt;LI TYPE = ""DISC""&gt; Micromax 
         &lt;LI TYPE = ""CIRCLE""&gt; Apple 
      &lt;/UL&gt;
   &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
<p>One important aspect of lists is that you can nest one list inside another to create a sub-list. The default appearance of the sub- lists will vary from the main list, with the first sub-list using circle bullets, and the next nested list using squares. For the value “disc” for the value “circle” for the value “square”</p>
<h3>Output of the above code is</h3>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Unordered List Example"" class=""alignnone size-medium wp-image-4703"" height=""332"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/306/Unordered-List-Example-620x332.png"" srcset="""" width=""620""/></a></p>
<h2>&lt;OL&gt; Ordered List</h2>
<p>&lt;OL&gt; tag is used to create ordered lists. Ordered lists are identical in behavior to unordered lists except they use numbers instead of bullets, and you can use an attribute to start numbering at a number other than one.</p>
<h4>Attribute TYPE: (1 | a | A | i | I )</h4>
<ul>
<li>Changes the style of the list.</li>
<li>TYPE = “1” (Arabic Numbers)</li>
<li>TYPE = “a” (Lowercase alphanumeric)</li>
<li>TYPE = “A” (Uppercase alphanumeric)</li>
<li>TYPE = “i” (Lowercase Roman numbers)</li>
<li>TYPE = .1″ (Uppercase Roman numbers)</li>
</ul>
<h3>Example</h3>
<pre class=""prettyprint lang-html"">
&lt;HTML&gt;
   &lt;HEAD&gt;
      &lt;TITLE&gt; Javatechig | List Example &lt;/TITLE&gt;
   &lt;/HEAD&gt;
   &lt;BODY&gt;
      &lt;H1&gt; Mobile Operating System&lt;/h1&gt;
      &lt;OL&gt;
         &lt;LI&gt; Android 
         &lt;LI&gt; Blckberry
         &lt;LI&gt; iPhone
         &lt;LI&gt; Windows Phone
      &lt;/OL&gt;
      &lt;H1&gt;Mobile Manufacturers&lt;/h1&gt;
      &lt;OL TYPE = ""A""&gt;
         &lt;LI&gt; Samsung 
         &lt;LI&gt; HTC 
         &lt;LI&gt; Micromax 
         &lt;LI&gt; Apple 
      &lt;/OL&gt;
   &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
<h3>Output</h3>
<figure aria-describedby=""caption-attachment-4704"" class=""wp-caption alignnone"" id=""attachment_4704"" style=""width: 620px""><a href=""http://stacktips.com"" target=""_self""><img alt=""Ordered List Example"" class=""size-medium wp-image-4704"" height=""330"" loading=""lazy"" src=""/media/uploads/articles/306/Ordered-List-Example-620x330.png"" srcset="""" width=""620""/></a><figcaption class=""wp-caption-text"" id=""caption-attachment-4704"">Ordered List Example</figcaption></figure>
",0,"standard","post"
"Basic Structure of an HTML Document","basic-structure-of-an-html-document","Here in this section of tutorial we will see the essential parts of a well-structured HTML document. A well-structured HTML document will have below three sections.
","LIVE","<p>Here in this section of tutorial we will see the essential parts of a well-structured HTML document. A well-structured HTML document will have below three sections.</p>
<ol>
<li>A head that identifies a document as HTML and establishes its title.</li>
<li>A body that contains the content for a Web page. This part holds all displayed text on a page, as well as most links to graphics, multimedia, locations inside the same file, and to other Web documents.</li>
<li>A footer that labels a page by identifying its author, date of creation, and version number, etc.</li>
</ol>
<h2>Introduction to basic HTML element</h2>
<p>HTML file optionally can start with an <code>&lt;!DOCTYPE&gt;</code> declaration. It is highly recommended to add this element to make user understand the version of html your webpage is using. <code>&lt;!DOCTYPE&gt;</code> is not an html tag. <code>&lt;!DOCTYPE&gt;</code> doesn’t require and closing tag and also it is not case sensitive.</p>
<h3>&lt;HTML&gt; Element</h3>
<p>HTML document starts and ends with an <code>&lt;HTML&gt;</code> tag. Once you open an <code>&lt;HTML&gt;</code> tag you are expected to close it by calling &lt;/HTML&gt; tag.</p>
<h3>&lt;HEAD&gt; Element</h3>
<ol>
<li>This element defines certain information about an HTML document, such as what its title is, who the author is, and reference information about the document, etc.</li>
<li>To create a head element, start with <code>&lt; HEAD&gt;</code> tag, then include all of the elements you want in your head section, then end the head element with a <code>&lt;/HEAD&gt;</code> tag.</li>
<li>If your website is using some scripts or styles of your own or third party library, they are declared in this section.</li>
<li>The titles for a webpage is displayed are displayed by browsers on the top of the page, usually in the title bar (Refer below image). Every HTML document must have a title contained in a <code>&lt;TITLE&gt;</code> start tag and a <code>&lt;/TITLE&gt;</code> end tag.</li>
</ol>
<h3>&lt;BODY&gt; Element</h3>
<p>The real content for any HTML document occurs in the body section, which is enclosed between <code>&lt;BODY&gt;</code> and <code>&lt;/BODY&gt;</code> tags. <strong>Two Categories of Body Elements </strong>There are two basic categories of HTML elements used in the body section:</p>
<ul>
<li>Block-Level Elements</li>
<li>Text-Level Elements</li>
</ul>
<h4>Block level elements</h4>
<p>Block-level elements are used to define groups of text for a specific role. They include tags that position text on the page, begin new paragraphs, set heading levels and create lists. Some commonly used block-level elements and their tags are:</p>
<ul>
<li>Paragraph: &lt; P&gt; and &lt;/P&gt;</li>
<li>Heading, level one: &lt; H1 &gt; and &lt;/H1 &gt;</li>
<li>Heading, level two: &lt;H2&gt; and &lt;/H2&gt;</li>
<li>Horizontal rule: &lt;HR&gt;</li>
<li>Centering: &lt;CENTER&gt;</li>
</ul>
<h4>Text level Elements</h4>
<p>Text-level elements are for markup bits of text, including creating links, inserting things like images or sounds, and changing the appearance of text. Some commonly used text-level elements are:</p>
<ul>
<li>Bold: &lt;B&gt; and &lt;/B&gt;</li>
<li>Italic: &lt;I&gt; and &lt;/I&gt;</li>
<li>Line-break: &lt; BR&gt;</li>
<li>Link anchor: &lt;A HREF = “URL”&gt; and &lt;/A&gt;</li>
<li>Image: &lt;IMG SRC = “URL”&gt;</li>
</ul>
<h2> HTML Footer</h2>
<p>Technically speaking, HTML does not include a separate tag to denote a page footer. But it is recommended because a good footer helps to identify a document’s vintage and contents and let interested readers contact the author if they spot errors or want to provide feedback.</p>
<pre lang=""html"">&lt;HTML&gt;
   &lt;HEAD&gt;
      &lt;TITLE&gt; Javatechig | Resources for Developers. &lt;/TITLE&gt;
   &lt;/HEAD&gt;
   &lt;BODY&gt;
      &lt;H1&gt;
         Welcome to Javatechig!
      &lt;/H1&gt;
      &lt;H2&gt; Fabulous development tutorials &lt;/H2&gt;
      Our website, &lt;A HREF = ''http://javetechig.com/""&gt; stacktips.com&lt;/A&gt; provides some of the finest tutorials on &lt;B&gt; Android &lt;/B&gt;, &lt;B&gt; Java&lt;/B&gt;, &lt;B&gt; Web Technologies (&lt;I&gt;HTML&lt;/I&gt;, &lt;I&gt;Sencha Touch&lt;/I&gt;, etc.)&lt;/B&gt; and related mobile technlogies. 
      &lt;HR&gt;
      &lt;CENTER&gt; Why not visit &lt;A HREF = http://stacktips.com/&gt; stacktips.com &lt;/A&gt; &lt;/CENTER&gt;
   &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
<h3>Output of the above code</h3>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""structure of an HTML program"" class=""aligncenter size-medium wp-image-4695"" height=""379"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/307/structure-of-an-HTML-program-620x379.png"" srcset="""" width=""620""/></a></p>
",0,"standard","post"
"WWW Client Servers Architecture","www-client-servers-architecture","In this tutorial we will see how client-server model works. The WWW Web follows a client-server model. The&hellip;
","LIVE","<p>In this tutorial we will see how client-server model works. The WWW Web follows a client-server model. The server is called Web Server and the browser works as client. The browser is a client program that helps user to communicate with a server program (or web server). Webserver is an program that runs on a remote/host computer. To access the information hosted on webserver, the client sends the request to the server. The server handles the request and sends the response back to the user.</p>
<p>A Web Server is the most visible part of your Internet. The Web server hosts Web pages and these pages can be information’s about an organization or a business. These Web Pages are files in a specialized format known as Hyper Text Mark-up Language (HTML). A Web Server communicates with browsers using the HTTP (Hyper Text Transfer Protocol) or HTTPS (for secured web transactions), which runs over TCP/IP.</p>
<figure aria-describedby=""caption-attachment-4687"" class=""wp-caption aligncenter"" id=""attachment_4687"" style=""width: 600px""><a href=""http://stacktips.com"" target=""_self""><img alt=""(Image courtesy http://contentdeliverance.com/)"" class=""size-full wp-image-4687"" height=""371"" loading=""lazy"" src=""/media/uploads/articles/308/client-server-model-diagram.png"" srcset="""" width=""600""/></a><figcaption class=""wp-caption-text"" id=""caption-attachment-4687"">(Image courtesy http://contentdeliverance.com/)</figcaption></figure>
<p>HTML files are text files with special tags. HTML files do not contain proprietary custom symbols or formatting characters. All formatting is specified with special combinations of ASCII text characters. HTML files can include text or graphic links, which users can click on to move to another location in the same file or to another file on any web server in the world.</p>
<p>Implementation and maintenance of Web server are very critical functions. These can range from personal Web Servers to Heavy-duty freeware, shareware to commercial ones. The choice of Web Servers would depend on the volume of the Web pages that you expect to put up and the number of clients accessing them.</p>
<h2>Basic Web Server Features</h2>
<ul>
<li>HTTP Compliance: The benefits include persistent connection, pipelining, and caching directives for performance, and host headers for multiple Web sites.</li>
<li>Browser Neutral Host Header Support: The Web server should be able to host multiple Web sites using a single I P address. This will also help Web browsers that do not support host headers.</li>
<li>Discussion Groups: The Web server should include support for creating local discussion groups for a single server using the NNTP protocol.</li>
<li>Mail enabled administrators should be able to receive mail driven by events on the Web server.</li>
</ul>
<h2>Basic Web Server Features</h2>
<ul>
<li>Enhanced integrated set-up and administration such as Web based administration, Web site operators, per Web site bandwidth throttling, and configuration replication.</li>
<li>Reliable Web application development and deployment which includes transactional active server pages, crash protection, crash recovery, integrated fail over clustering support/ component load/unload.</li>
<li>Standards based data access like database connectivity.</li>
<li>Integrated authentication and security with support for integrated certificate server, domain blocking.</li>
<li>Rich content management and control like integrated indexing and searching, content expiration, document footers, custom errors, custom headers, one-to-one content replication, redirects, complete and comprehensive documentation.</li>
</ul>
<p> </p>
",0,"standard","post"
"Universal Image Loader Library in Android","universal-image-loader-library-in-android","Universal Image Loader is an smart and powerful library that helps in loading, caching and displaying images on Android. This means, using this library you can download remote images and display on ImageView.
","LIVE","<p>In this example we’ll show you how to use Universal Image Loader library in your android project.</p>
<h2>What is Universal Image Loader?</h2>
<p>Universal Image Loader is an smart and powerful library that helps in loading, caching and displaying images on Android. This means, using this library you can download remote images and display on ImageView.</p>
<h2>Universal Image Loader Features</h2>
<ul>
<li>Asynchronous and multi-threaded image loading. This allows you to download multiple images Asynchronously.</li>
<li>Supports various configurations that helps to tune for your requirement. With this you can control memory, cache type, decoder, display image options, etc.</li>
<li>Possibility of image caching in memory and/or on device’s file system (or SD card)</li>
<li>Possibility to “listen” loading process. Allows various callback methods using which you will get to know the progress/state of your download request.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""UniversalImageLoader"" class=""aligncenter size-medium wp-image-4646"" height=""405"" loading=""lazy"" src=""/media/uploads/articles/309/UniversalImageLoader-620x405.png"" srcset="""" width=""620""/></a></p>
<h2>Integrating Universal Image Loader in Android</h2>
<p>Integrating this library is quite easy. Here we’ll show you steps to download and integrate this library in Android application.</p>
<h4>1. Download Universal Image Loader</h4>
<p><strong><a href=""https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/downloads/universal-image-loader-1.9.1-with-sources.jar"" rel=""nofollow noopener noreferrer"" target=""_blank"">Download Universal Image Loader JAR</a></strong> and put the JAR in the <strong>libs</strong> folder of your Android project. You can also fork the library on <a href=""https://github.com/nostra13/Android-Universal-Image-Loader"" rel=""nofollow noopener noreferrer"" target=""_blank"">GitHub</a></p>
<h4>2. Mainfest permissions</h4>
<p>Add below required permission in your application Manifest file.</p>
<pre class=""prettyprint lang-xml"">&lt;manifest&gt;
    &lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;
    &lt;!-- Include next permission if you want to allow UIL to cache images on SD card --&gt;
    &lt;uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE"" /&gt;
    ...
    &lt;application android:name=""MyApplication""&gt;
        ...
    &lt;/application&gt;
&lt;/manifest&gt;
</pre>
<h4>3. Library setup in your Application class</h4>
<pre class=""prettyprint lang-java"">import android.app.Application;
import com.nostra13.universalimageloader.cache.memory.impl.WeakMemoryCache;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;

public class MyApplication extends Application {
	@Override
	public void onCreate() {
		super.onCreate();

		// UNIVERSAL IMAGE LOADER SETUP
		DisplayImageOptions defaultOptions = new DisplayImageOptions.Builder()
				.cacheOnDisc(true).cacheInMemory(true)
				.imageScaleType(ImageScaleType.EXACTLY)
				.displayer(new FadeInBitmapDisplayer(300)).build();

		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(
				getApplicationContext())
				.defaultDisplayImageOptions(defaultOptions)
				.memoryCache(new WeakMemoryCache())
				.discCacheSize(100 * 1024 * 1024).build();

		ImageLoader.getInstance().init(config);
		// END - UNIVERSAL IMAGE LOADER SETUP
	}
}
</pre>
<h4>4. Download and display bitmap on ImageView</h4>
<pre class=""prettyprint lang-java"">//your image url
String url = ""http://stacktips.com/wp-content/uploads/2014/05/UniversalImageLoader-620x405.png"";

ImageLoader imageLoader = ImageLoader.getInstance();
DisplayImageOptions options = new DisplayImageOptions.Builder().cacheInMemory(true)
				.cacheOnDisc(true).resetViewBeforeLoading(true)
				.showImageForEmptyUri(fallback)
				.showImageOnFail(fallback)
				.showImageOnLoading(fallback).build();
		
//initialize image view
ImageView imageView = (ImageView) findViewById(R.id.imageView1)		

//download and display image from url
imageLoader.displayImage(url, imageView, options);
</pre>
",0,"standard","post"
"Javatechig Mobile App on Google Play","javatechig-mobile-app-on-google-play","Javatechig provides programming tutorials, examples and source code on java, android, Xamarin, PhoneGap and related mobile technologies. We have released our new android application on Google Play. This application help you read and share latest tutorials published on stacktips.com.
","LIVE","<p>Javatechig provides programming tutorials, examples and source code on java, android, Xamarin, PhoneGap and related mobile technologies. We have released our new android application on Google Play. This application help you read and share latest tutorials published on stacktips.com.</p>
<h3>Get it on Google Play</h3>
<p><a href=""https://play.google.com/store/apps/details?id=com.javatechig.app"" rel=""nofollow noopener noreferrer"" target=""_blank""><img alt=""button-get-it-on-google-play"" class=""aligncenter size-full wp-image-4570"" height=""41"" loading=""lazy"" src=""/media/uploads/articles/310/button-get-it-on-google-play-e1398885253772.png"" srcset="""" width=""140""/></a></p>
<p> </p>
<p>You can find tutorials on below topics.</p>
<div class=""pk-col-md-1"">
<ul style=""font-size: 1.166em; line-height: 1.5;"">
<li><a href=""http://stacktips.com/category/android"">Android</a></li>
<li><a href=""http://stacktips.com/category/app-design"">App Design</a></li>
<li><a href=""http://stacktips.com/category/app-review"">App Review</a></li>
<li><a href=""http://stacktips.com/category/blackberry"">Blackberry</a></li>
<li><a href=""http://stacktips.com/category/java/core-java"">Core Java</a></li>
<li><a href=""http://stacktips.com/category/design-patterns"">Design Patterns</a></li>
<li><a href=""http://stacktips.com/category/eclipse"">Eclipse</a></li>
<li><a href=""http://stacktips.com/category/gaming"">Gaming</a></li>
<li><a href=""http://stacktips.com/category/git"">Git</a></li>
<li><a href=""http://stacktips.com/category/ibm-worklight"">IBM Worklight</a></li>
</ul>
</div>
<div class=""pk-col-md-1"">
<ul style=""font-size: 1.166em; line-height: 1.5;"">
<li><a href=""http://stacktips.com/category/j2me"">J2ME</a></li>
<li><a href=""http://stacktips.com/category/java"">Java</a></li>
<li><a href=""http://stacktips.com/category/phonegap"">PhoneGap</a></li>
<li><a href=""http://stacktips.com/category/reviews"">Reviews</a></li>
<li><a href=""http://stacktips.com/category/sencha-touch"">Sencha Touch</a></li>
<li><a href=""http://stacktips.com/category/others"">Software Engineering</a></li>
<li><a href=""http://stacktips.com/category/java/struts"">Struts</a></li>
<li><a href=""http://stacktips.com/category/video"">Video</a></li>
<li><a href=""http://stacktips.com/category/web-technlogies"">Web Technlogies</a></li>
<li><a href=""http://stacktips.com/category/xamarin"">Xamarin</a></li>
</ul>
</div>
<h3>Screenshots</h3>
<p><img alt="""" class=""alignnone"" height=""310"" loading=""lazy"" src=""/media/uploads/articles/310/tkENTmW-PKh2TZPW331xQGgxH60hHJ2R39h5vCe-7_GQyP-H0QfAO99fie8IPJCIqawh=h310-rw"" srcset="""" width=""174""/> <img alt="""" class=""alignnone"" height=""310"" loading=""lazy"" src=""/media/uploads/articles/310/D-tus90odZKQ7kMN_uRA47l5F1ihX5B5s9LJLi7PV4mvAtAEdQrkFKPAtcUhWVHPkM0h=h310-rw"" srcset="""" width=""174""/> <img alt="""" class=""alignnone"" height=""310"" loading=""lazy"" src=""/media/uploads/articles/310/Cp_fCrbcftmVQ3oAxSw-fsBQaIGBDarV9lNhQZjpZaN_cTc4uRJ4Es90EFYwu6880g=h310-rw"" srcset="""" width=""174""/> <img alt="""" class=""alignnone"" height=""310"" loading=""lazy"" src=""/media/uploads/articles/310/MfwAmEnblk1zbNCOEKU3-R57OQ_Chgx-eFNgBNdXim5AdY3RKsBXWcJ88f5hJD9yIQ=h310-rw"" srcset="""" width=""174""/><img alt="""" class=""alignnone"" height=""310"" loading=""lazy"" src=""/media/uploads/articles/310/RdBrq_v2OaNjIbHP1PyFY_gbJdWJK5EtPPiWHQHP94V0HdlRXYax1nQPZvgpYqbz8A=h310-rw"" srcset="""" width=""174""/> <img alt="""" class=""alignnone"" height=""310"" loading=""lazy"" src=""/media/uploads/articles/310/VdkALi17JchEvkgWlPvTsaBrBbaulMhR7GLv2tjN0BovjvkOwEDzaa3AKyHHZK-i5nc=h310-rw"" srcset="""" width=""174""/></p>
",0,"standard","post"
"Enable Move to SDCard button for Android App","enable-the-move-to-sdcard-button-for-android-app","In this tutorial we show you how to enable &#8220;Move to SD Card&#8221; button and allow your application to move to SD Card. Ever since Android 2.2 (API Level 8), you can allow your application to be installed on the SDCard. 
","LIVE","<p>In this tutorial we show you how to enable “Move to SD Card” button and allow your application to move to SD Card. Ever since Android 2.2 (API Level 8), you can allow your application to be installed on the SDCard. This is an optional feature that available in Android device that allows installed applications to move from device storage to SD Card and vice-versa.</p>
<h3>How to copy app from internal memory to SD Card?</h3>
<p>In Android, you can go to device Settings &gt;&gt; Applications &gt;&gt; Manage Applications &gt;&gt; and then click on your app to view the app details. You will find a ‘Move to SD Card’ button which is available for some apps and for some apps it will be disabled (not click-able) for other apps. By default it is disabled for your application.</p>
<h3>How to enable the ‘Move to SD Card’ button in for your App in Android?</h3>
<p>For allowing the system to install your application on the external storage, you have to include the <code>android:installLocation</code> attribute in the &lt;manifest&gt; element, with a value of either “preferExternal”, “auto” or “intenalOnly”</p>
<ol>
<li><code>preferExternal</code> , this request that your application may installed on the external storage, but the system does not guarantee that your application will be installed on the external storage. If the external storage is full, the system will install it on the internal storage. The user can also move your application between the two locations.</li>
<li><code>auto</code> , this indicate that your application may be installed on the external storage, but you don’t have a preference of install location. The system will decide where to install your application based on several factors. The user can also move your application between the two locations.</li>
<li><code>intenalOnly</code> , always installs application in internal storage.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Enable the 'Move to SD Card' button in for your App in Android"" class=""aligncenter size-medium wp-image-4609"" height=""386"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/311/Enable-the-Move-to-SD-Card-button-in-for-your-App-in-Android-620x386.png"" srcset="""" width=""620""/></a></p>
",0,"standard","post"
"Android SQLite Database Tutorial","android-sqlite-database-tutorial","This tutorial describes how to use SQLite database in Android applications. It also demonstrates how to create new table, insert records, and modify records with example
","LIVE","
<p>Over the course of this article, we will focus on Android SQLite database Tutorial. It also demonstrates how to create new table, insert records, and modify records with example.</p>
<h2><span id=""1_What_is_SQLite"">1. What is SQLite</span></h2>
<p>SQLite is an Open-Source embedded SQL database engine. This provides relational database management structure for storing user defined records in the form of tables. SQLite is light weight when it comes to resource usage and it doesn’t need to have any server setup like other RDBMS systems. It is an cross platform and self-contained database.</p>
<p>Android is shipped with SQLite version 3.4.0.</p>
<h2><span id=""2_SampleTODO_Application"">2. Sample TODO Application</span></h2>
<p>In this tutorials we will make a simple TODO application that will store, manipulate the user created records. For the sake of simplicity we have only less number of columns in this application. You may like to extend this to make it an full-fledged application. In this example we will create a database <code>JAVATECHIG_TODOS.DB</code> and a table named <code>TODO</code> for storing all todo’s that user is creating. You can find a demo link to it on <a href=""https://play.google.com/store/apps/details?id=com.javatechig.todo"" rel=""nofollow noopener noreferrer"" target=""_blank"">Google play.</a></p>
<h2><span id=""3_Create_New_Database"">3. Create New Database</span></h2>
<p>Database names must be unique within an application, not across all applications. Let us have a look at the database structure from the below image. We have three columns in <code>TODO</code> table. <code>_id</code> is with INTEGER data type and a primary key with auto increment, subject is TEXT type and <code>description</code> is also TEXT type.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""database design"" class=""aligncenter size-medium wp-image-4572"" height=""208"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/312/database-design-620x208.png"" srcset="""" width=""620""/></a></p>
<h2><span id=""4_Create_a_New_Android_project"">4. Create a New Android project</span></h2>
<p>Create a new android project named “TODOApp”. Here in this example we use minSdkVersion as 14, targetSdkVersion as 19 and package name is <code>com.javatechig.todo</code></p>
<h2><span id=""5_Database_Helper_Class"">5. Database Helper Class</span></h2>
<p>Now let us have a look into database helper classes. Database helper <code>DBhelper.java</code> and <code>SQLController.java</code> class helps to perform all database CURD operations.</p>
<p><strong>DBhelper.java</strong></p>
<pre class=""prettyprint lang-java"">package com.javatechig.todo;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class DBhelper extends SQLiteOpenHelper {

	// Table Name
	public static final String TABLE_NAME = ""TODOS"";

	// Table columns
	public static final String _ID = ""_id"";
	public static final String TODO_SUBJECT = ""subject"";
	public static final String TODO_DESC = ""description"";
	// Database Information
	static final String DB_NAME = ""JAVATECHIG_TODOS.DB"";

	// database version
	static final int DB_VERSION = 1;

	// Creating table query
	private static final String CREATE_TABLE = ""create table "" + TABLE_NAME + ""("" + _ID
			+ "" INTEGER PRIMARY KEY AUTOINCREMENT, "" + TODO_SUBJECT + "" TEXT NOT NULL, "" + TODO_DESC + "" TEXT);"";

	public DBhelper(Context context) {
		super(context, DB_NAME, null, DB_VERSION);
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		db.execSQL(CREATE_TABLE);
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		db.execSQL(""DROP TABLE IF EXISTS "" + TABLE_NAME);
		onCreate(db);
	}
}
</pre>
<p>In the above code we have declared various constants which are used as database name, table name and column names. DBhelper class extends <code>SQLiteOpenHelper</code> class and overrides <code>onCreate()</code> and <code>onUpgrade()</code> method.</p>
<h3><span id=""51_Create_Database"">5.1. Create Database</span></h3>
<p>The <code>onCreate()</code> method will be called on first time use of the application. Here we will construct SQLite database. This method is called only if the database file is not created before. Once the database is successfully created, it creates .DB files in your <code>data/data/&lt;your app package name&gt;/databases/</code> folder. You can view this from DDMS from your emulator, but if you use your physical device you may not be able to browse this file unless your device is routed.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Database location"" class=""aligncenter size-medium wp-image-4591"" height=""350"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/312/Database-location-620x350.png"" srcset="""" width=""620""/></a></p>
<h3><span id=""52_Upgrade_Database"">5.2. Upgrade Database</span></h3>
<p>The <code>onUpgrade()</code> method is called only when the database version is changed. Database version is an integer value which is specified inside the DBhelper constructor.</p>
<h2><span id=""6_Create_Database_Controller"">6. Create Database Controller</span></h2>
<p>It is always a best practice to define an controller or separate class for all your database operations. Here in this example we are creating an new class that performs all database related operations like add, update, delete records into table.</p>
<p>Before performing any database operations like add, update, delete records in a table, first open the database by calling <code>getWritableDatabase()</code> method. Make sure to close database connection once it is opened.</p>
<h3><span id=""61_Add_New_TODORecord"">6.1. Add New TODO Record</span></h3>
<pre class=""prettyprint lang-java"">public void insert(String name, String desc) {
	ContentValues contentValue = new ContentValues();
	contentValue.put(DBhelper.TODO_SUBJECT, name);
	contentValue.put(DBhelper.TODO_DESC, desc);
	database.insert(DBhelper.TABLE_NAME, null, contentValue);
}
</pre>
<h3><span id=""62_Fetching_All_Records"">6.2. Fetching All Records</span></h3>
<pre class=""prettyprint lang-java"">public Cursor fetch() {
	String[] columns = new String[] { DBhelper._ID, DBhelper.TODO_SUBJECT, DBhelper.TODO_DESC};
	Cursor cursor = database.query(DBhelper.TABLE_NAME, columns, null, null, null, null, null);
	if (cursor != null) {
		cursor.moveToFirst();
	}
	return cursor;
}
</pre>
<h3><span id=""63_Modify_Record"">6.3. Modify Record</span></h3>
<pre class=""prettyprint lang-java"">public int update(long _id, String name, String desc) {
	ContentValues contentValues = new ContentValues();
	contentValues.put(DBhelper.TODO_SUBJECT, name);
	contentValues.put(DBhelper.TODO_DESC, desc);
	int i = database.update(DBhelper.TABLE_NAME, contentValues, DBhelper._ID + "" = "" + _id, null);
	return i;
}
</pre>
<h3><span id=""64_Delete_Record"">6.4. Delete Record</span></h3>
<p>Refer SQLiteController class.</p>
<h3><span id=""65_CloseDatabase_Connection"">6.5. Close Database Connection</span></h3>
<p>Refer SQLiteController class.</p>
<h2><span id=""7_Controller_Complete_Code"">7. Controller Complete Code</span></h2>
<p><strong>SQLController.java</strong></p>
<pre class=""prettyprint lang-java"">package com.javatechig.todo;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

public class SQLController {

	private DBhelper dbHelper;
	private Context ourcontext;
	private SQLiteDatabase database;

	public SQLController(Context c) {
		ourcontext = c;
	}

	public SQLController open() throws SQLException {
		dbHelper = new DBhelper(ourcontext);
		database = dbHelper.getWritableDatabase();
		return this;

	}

	public void close() {
		dbHelper.close();
	}

	public void insert(String name, String desc) {
		ContentValues contentValue = new ContentValues();
		contentValue.put(DBhelper.TODO_SUBJECT, name);
		contentValue.put(DBhelper.TODO_DESC, desc);
		database.insert(DBhelper.TABLE_NAME, null, contentValue);
	}

	public Cursor fetch() {
		String[] columns = new String[] { DBhelper._ID, DBhelper.TODO_SUBJECT,
				DBhelper.TODO_DESC };
		Cursor cursor = database.query(DBhelper.TABLE_NAME, columns, null,
				null, null, null, null);
		if (cursor != null) {
			cursor.moveToFirst();
		}
		return cursor;
	}

	public int update(long _id, String name, String desc) {
		ContentValues contentValues = new ContentValues();
		contentValues.put(DBhelper.TODO_SUBJECT, name);
		contentValues.put(DBhelper.TODO_DESC, desc);
		int i = database.update(DBhelper.TABLE_NAME, contentValues,
				DBhelper._ID + "" = "" + _id, null);
		return i;
	}

	public void delete(long _id) {
		database.delete(DBhelper.TABLE_NAME, DBhelper._ID + ""="" + _id, null);
	}
}
</pre>
<h2><span id=""8_Application_Activity_Layout"">8. Application Activity Layout</span></h2>
<p>In this example, we have three major layout files. One for listing all TODO items, second one is for adding all records and the third one is for update/deleting records.</p>
<p><strong>fragment_todo_list.xml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent"" &gt;

    &lt;ListView
        android:id=""@+id/list_view""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:dividerHeight=""1dp""
        android:padding=""10dp"" &gt;
    &lt;/ListView&gt;

    &lt;TextView
        android:id=""@+id/empty""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_centerInParent=""true""
        android:text=""@string/empty_list_text"" /&gt;

&lt;/RelativeLayout&gt;
</pre>
<p><strong>activity_add_record.xml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:padding=""20dp"" &gt;

    &lt;EditText
        android:id=""@+id/subject_edittext""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:ems=""10""
        android:hint=""@string/enter_title"" &gt;

        &lt;requestFocus /&gt;
    &lt;/EditText&gt;

    &lt;EditText
        android:id=""@+id/description_edittext""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:ems=""10""
        android:hint=""@string/enter_desc""
        android:inputType=""textMultiLine""
        android:minLines=""5"" &gt;
    &lt;/EditText&gt;

    &lt;Button
        android:id=""@+id/add_record""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center""
        android:text=""@string/add_record"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<p><strong>activity_modify_record.xml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:padding=""10dp"" &gt;

    &lt;EditText
        android:id=""@+id/subject_edittext""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_marginBottom=""10dp""
        android:ems=""10""
        android:hint=""@string/enter_title"" /&gt;
    
       &lt;EditText
        android:id=""@+id/description_edittext""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:ems=""10""
        android:hint=""@string/enter_desc""
        android:inputType=""textMultiLine""
        android:minLines=""5"" &gt;
    &lt;/EditText&gt;
    
    &lt;LinearLayout
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:weightSum=""2""
        android:gravity=""center_horizontal""
        android:orientation=""horizontal"" &gt;

        &lt;Button
            android:id=""@+id/btn_update""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""@string/btn_update"" /&gt;

        &lt;Button
            android:id=""@+id/btn_delete""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""@string/btn_delete"" /&gt;
    &lt;/LinearLayout&gt;
&lt;/LinearLayout&gt;
</pre>
<h2><span id=""9_Application_Activity_Classes"">9. Application Activity Classes</span></h2>
<p>Now let us see how are the activity classes look like. We have three activity classes that does three different works. One for listing all TODO items, second adds TODO item and other helps in update/delete records.</p>
<ul>
<li>ContentValues is a name value pair, used to insert or update values into database tables. ContentValus object will be passed to SQLiteDatabase object <code>insert()</code> and <code>update()</code> method.</li>
<li>Cursor is a temporary buffer area which holds results from SQLiteDatabase query.</li>
</ul>
<p><strong>TodoListActivity.java</strong></p>
<pre class=""prettyprint lang-java"">package com.javatechig.todo;

import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v4.widget.SimpleCursorAdapter;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.TextView;

public class TodoListActivity extends ActionBarActivity {
	private SQLController dbcon;
	private ListView listView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.fragment_emp_list);

		dbcon = new SQLController(this);
		dbcon.open();
		listView = (ListView) findViewById(R.id.list_view);
		listView.setEmptyView(findViewById(R.id.empty));
		// Attach The Data From DataBase Into ListView Using Crusor Adapter
		Cursor cursor = dbcon.fetch();
		String[] from = new String[] { DBhelper._ID, DBhelper.TODO_SUBJECT,
				DBhelper.TODO_DESC };
		int[] to = new int[] { R.id.id, R.id.title, R.id.desc };

		SimpleCursorAdapter adapter = new SimpleCursorAdapter(this,
				R.layout.activity_view_record, cursor, from, to);

		adapter.notifyDataSetChanged();
		listView.setAdapter(adapter);

		// OnCLickListiner For List Items
		listView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView&lt;?&gt; parent, View view,
					int position, long viewId) {
				TextView id_tv = (TextView) view.findViewById(R.id.id);
				TextView title_tv = (TextView) view.findViewById(R.id.title);
				TextView desc_tv = (TextView) view.findViewById(R.id.desc);

				String id = id_tv.getText().toString();
				String title = title_tv.getText().toString();
				String desc = desc_tv.getText().toString();

				Intent modify_intent = new Intent(getApplicationContext(),
						ModifyTodoActivity.class);
				modify_intent.putExtra(""title"", title);
				modify_intent.putExtra(""desc"", desc);
				modify_intent.putExtra(""id"", id);
				startActivity(modify_intent);
			}
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		int id = item.getItemId();
		if (id == R.id.add_record) {
			Intent add_mem = new Intent(this, AddTodoActivity.class);
			startActivity(add_mem);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
}
</pre>
<p><strong>AddTodoActivity.java</strong></p>
<pre class=""prettyprint lang-java"">package com.javatechig.todo;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;

public class AddTodoActivity extends Activity implements OnClickListener {
	private Button addTodoBtn;
	private SQLController dbController;
	private EditText subjectEditText;
	private EditText descEditText;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setTitle(""Add Record"");

		setContentView(R.layout.activity_add_record);
		subjectEditText = (EditText) findViewById(R.id.subject_edittext);
		descEditText = (EditText) findViewById(R.id.description_edittext);
		addTodoBtn = (Button) findViewById(R.id.add_record);
		dbController = new SQLController(this);
		dbController.open();
		addTodoBtn.setOnClickListener(this);
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.add_record:
			final String name = subjectEditText.getText().toString();
			final String desc = descEditText.getText().toString();
			dbController.insert(name, desc);

			Intent main = new Intent(AddTodoActivity.this,
					TodoListActivity.class)
					.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			startActivity(main);
			break;
		default:
			break;
		}
	}
}
</pre>
<p><strong>ModifyTodoActivity.java</strong></p>
<pre class=""prettyprint lang-java"">package com.javatechig.todo;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;

public class ModifyTodoActivity extends Activity implements OnClickListener {
	private EditText titleText;
	private Button updateBtn, deleteBtn;
	private long _id;
	private SQLController dbController;
	private EditText descText;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setTitle(""Modify Record"");
		setContentView(R.layout.activity_modify_record);

		dbController = new SQLController(this);
		dbController.open();
		titleText = (EditText) findViewById(R.id.subject_edittext);
		descText = (EditText) findViewById(R.id.description_edittext);
		updateBtn = (Button) findViewById(R.id.btn_update);
		deleteBtn = (Button) findViewById(R.id.btn_delete);

		Intent intent = getIntent();
		String id = intent.getStringExtra(""id"");
		String name = intent.getStringExtra(""title"");
		String desc = intent.getStringExtra(""desc"");
		_id = Long.parseLong(id);
		titleText.setText(name);
		descText.setText(desc);

		updateBtn.setOnClickListener(this);
		deleteBtn.setOnClickListener(this);
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.btn_update:
			String title = titleText.getText().toString();
			String desc = descText.getText().toString();
			dbController.update(_id, title, desc);
			this.returnHome();
			break;
		case R.id.btn_delete:
			dbController.delete(_id);
			this.returnHome();
			break;
		}
	}

	public void returnHome() {
		Intent home_intent = new Intent(getApplicationContext(),
				TodoListActivity.class)
				.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
		startActivity(home_intent);
	}
}
</pre>
<h2><span id=""10DownloadExample_Code"">10. Download Example Code</span></h2>
[download url=”https://github.com/javatechig/Advance-Android-Tutorials/tree/master/TODO%20Android%20App”]
",0,"standard","post"
"Action Bar Tabs Example in Xamarin","action-bar-tabs-example-in-xamarin","This example explains &#8220;How to create Action Bar Tabs in Xamarin.Android&#8221;. This example uses Fragment in combination with&hellip;
","LIVE","<p>This example explains “How to create Action Bar Tabs in Xamarin.Android”.</p>
<p>This example uses Fragment in combination with the action bar for tab navigation. We can add a new tab to the action bar by calling newTab() method.</p>
<p>The following code shows an activity with two tabs “Audio” and “Video”. It uses dummy fragments as content. The Action Bar includes support for adding tabbed interfaces in Android 4.0.</p>
<h2>Activity Layout class (Main.xml)</h2>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:orientation=""vertical""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""&gt;
    &lt;FrameLayout
        android:id=""@+id/fragmentContainer""
        android:layout_width=""match_parent""
        android:layout_height=""0dip""
        android:layout_weight=""1"" /&gt;
&lt;/LinearLayout&gt;</pre>
<h2>Your Activity class</h2>
<pre class=""prettyprint lang-cs"">using System;

using Android.App;
using Android.Content;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Android.OS;

namespace ActionBarTabsExample
{
    [Activity (Label = ""ActionBar Tabs Example"", MainLauncher = true)]
    public class Activity1 : Activity
    {   
        protected override void OnCreate (Bundle bundle)
        {
            base.OnCreate (bundle);

            // Set our view from the ""main"" layout resource
            SetContentView (Resource.Layout.Main);

	    //enable navigation mode to support tab layout
            this.ActionBar.NavigationMode = ActionBarNavigationMode.Tabs;

	    //adding audio tab
	    AddTab (""Audio"", Resource.Drawable.Icon,  new AudioFragment());

	    //adding video tab 
            AddTab (""Video"", Resource.Drawable.Icon,  new VideoFragment());
        }

		/*
		 * This method is used to create and add dynamic tab view
		 * @Param,
		 *  tabText: title to be displayed in tab
		 *  iconResourceId: image/resource id
		 *  fragment: fragment reference
		 * 
		*/
		void AddTab (string tabText, int iconResourceId, Fragment fragment)
        {
            var tab = this.ActionBar.NewTab ();            
            tab.SetText (tabText);
			tab.SetIcon (iconResourceId);

			// must set event handler for replacing tabs tab
            tab.TabSelected += delegate(object sender, ActionBar.TabEventArgs e) {
				e.FragmentTransaction.Replace(Resource.Id.fragmentContainer, fragment);
            };

            this.ActionBar.AddTab (tab);
        }      

    }
}</pre>
<h2>Your fragment layout</h2>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;TextView xmlns:android=""http://schemas.android.com/apk/res/android""
    android:id=""@+id/textView""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:gravity=""center""
    android:textStyle=""bold""
    android:textSize=""16dp""
    android:background=""#ffe3e1e1""
    android:textColor=""#ff393939"" /&gt;</pre>
<h2>AudioFragment class</h2>
<pre class=""prettyprint lang-cs"">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;

namespace ActionBarTabsExample
{
	class AudioFragment: Fragment
	{            
		public override View OnCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
		{
			base.OnCreateView (inflater, container, savedInstanceState);

			var view = inflater.Inflate (Resource.Layout.Tab, container, false);
			var sampleTextView = view.FindViewById&lt;TextView&gt; (Resource.Id.textView);	
			sampleTextView.Text = ""This is Audio Fragment Sample"";
			return view;
		}
	}
}</pre>
<h2>VideoFragment class</h2>
<pre class=""prettyprint lang-cs"">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Util;
using Android.Views;
using Android.Widget;

namespace ActionBarTabsExample
{
	class VideoFragment: Fragment
	{            
		public override View OnCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
		{
			base.OnCreateView (inflater, container, savedInstanceState);

			var view = inflater.Inflate (Resource.Layout.Tab, container, false);
			var sampleTextView = view.FindViewById&lt;TextView&gt; (Resource.Id.textView);             
			sampleTextView.Text = ""This is Video Fragment Sample"";

			return view;
		}
}
}</pre>
<h2>Output</h2>
<p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""Action Bar Tabs example in Xamarin"" class=""size-full wp-image-4305 aligncenter"" height=""510"" loading=""lazy"" src=""/media/uploads/articles/313/Action-Bar-Tabs-example-in-Xamarin.png"" srcset="""" width=""607""/></a></center></p>
",0,"standard","post"
"ShareActionProvider Example in Xamarin.Android","shareactionprovider-example-in-xamarin-android","This example explains how to implement &#8220;share action in your action bar using ShareActionProvider class&#8221;. ActionProvider is made available since Android 4.0 (API Level 14). An ActionProvider, once attached to a menu item in the action bar, handles both the appearance and behavior of that item
","LIVE","<p>This example explains how to implement “share action in your action bar using ShareActionProvider class”. <code> ActionProvider</code> is made available since Android 4.0 (API Level 14). An ActionProvider, once attached to a menu item in the action bar, handles both the appearance and behavior of that item. In the case of ShareActionProvider, you provide a share intent and it does the rest.</p>
<h2>Specifying the action Provider Class</h2>
<p>To use the ShareActionProvider, set the <code> android:actionProviderClass </code> attribute on a menu item in the XML for the Action Bar’s menu.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;menu xmlns:android=""http://schemas.android.com/apk/res/android""&gt;
  &lt;item android:id=""@+id/shareMenu""
      android:showAsAction=""always""
      android:title=""Share""
      android:actionProviderClass=""android.widget.ShareActionProvider"" /&gt;
&lt;/menu&gt;</pre>
<h2>Your activity class</h2>
<pre class=""prettyprint lang-cs"">using System;

using Android.App;
using Android.Content;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Android.OS;

namespace ShareActionProviderExample
{
	[Activity (Label = ""ShareActionProviderExample"", MainLauncher = true)]
	public class MainActivity : Activity
	{
		protected override void OnCreate (Bundle bundle)
		{
			base.OnCreate (bundle);

			TextView tv = new TextView (this);
			tv.Text = ""This is an ShareActionProvider Example"";
			tv.SetPadding (20, 20, 20, 20);

			// Set our view from the ""main"" layout resource
			SetContentView (tv);
		}

		public override bool OnCreateOptionsMenu (IMenu menu) {

			MenuInflater.Inflate (Resource.Menu.MainMenu, menu);   

			var shareMenuItem = menu.FindItem (Resource.Id.shareMenu);           
			var shareActionProvider =
				(ShareActionProvider)shareMenuItem.ActionProvider;
			shareActionProvider.SetShareIntent (CreateIntent ());

			return true;
		}

		Intent CreateIntent () {  
			var sendPictureIntent = new Intent (Intent.ActionSend);
			sendPictureIntent.SetType (""image/*"");
			var uri = Android.Net.Uri.FromFile (GetFileStreamPath (""image.png""));          
			sendPictureIntent.PutExtra (Intent.ExtraStream, uri);
			return sendPictureIntent;
		}
	}
}</pre>
<h2>Output</h2>
<p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""ShareActionProvider Example in Xamarin"" class=""aligncenter size-medium wp-image-4308"" height=""435"" loading=""lazy"" src=""/media/uploads/articles/314/ShareActionProvider-Example-in-Xamarin-620x435.png"" srcset="""" width=""620""/></a></center></p>
",0,"standard","post"
"How to Apply Shadow Effect on Android TextView","how-to-apply-shadow-effect-on-android-textview","This example explains how to apply Shadow Effect on Android TextView. You can apply Shadow Effect on Android TextView in two ways. Either we do it pragmatically or we can change in the xml layout.
","LIVE","<p>This example explains how to apply Shadow Effect on Android TextView. You can apply Shadow Effect on Android TextView in two ways. Either we do it pragmatically or we can change in the xml layout.</p>
<h2>Shadow Effect on Android TextView using XML Layout</h2>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical""
    android:padding=""20dp"" &gt;

    &lt;TextView
        android:id=""@+id/textview""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center_horizontal""
        android:shadowColor=""#000""
        android:shadowDx=""0""
        android:shadowDy=""0""
        android:shadowRadius=""50""
        android:text=""Text Shadow Example1""
        android:textColor=""#FBFBFB""
        android:textSize=""28dp""
        android:textStyle=""bold"" /&gt;

    &lt;TextView
        android:id=""@+id/textview2""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center_horizontal""
        android:text=""Text Shadow Example2""
        android:textColor=""#FBFBFB""
        android:textSize=""28dp""
        android:textStyle=""bold"" /&gt;

&lt;/LinearLayout&gt;</pre>
<p>In the above XML layout code, the textview1 is given with Shadow effect in the layout. below are the configuration items are</p>
<ul>
<li><strong>android:shadowDx</strong> – specifies the X-axis offset of shadow. You can give -/+ values, where -Dx draws a shadow on the left of text and +Dx on the right</li>
<li><strong>android:shadowDy</strong> – it specifies the Y-axis offset of shadow. -Dy specifies a shadow above the text and +Dy specifies below the text.</li>
<li><strong>android:shadowRadius</strong> – specifies how much the shadow should be blurred at the edges. Provide a small value if shadow needs to be prominent.</li>
<li><strong>android:shadowColor</strong> – specifies the shadow color</li>
</ul>
<h2>Shadow Effect on Android TextView pragmatically</h2>
<p>Use below code snippet to get the shadow effect on the second TextView pragmatically.</p>
<pre class=""prettyprint lang-java"">TextView textv = (TextView) findViewById(R.id.textview2);
textv.setShadowLayer(30, 0, 0, Color.RED);

</pre>
<h2>Output</h2>
<p><center><a href=""http://stacktips.com"" target=""_self""><img alt=""Shadow Effect on Android TextView"" class=""aligncenter size-thumbnail wp-image-4534"" height=""533"" loading=""lazy"" src=""/media/uploads/articles/315/Shadow-Effect-on-Android-TextView-300x533.png"" srcset="""" width=""300""/></a></center></p>
<p></p>
<h3>Download Source Code</h3>
<p>Download complete source code from <a href=""https://github.com/javatechig/Android-User-Interface-Tutorials/tree/master/AndroidTextShadow"" rel=""nofollow noopener noreferrer"" target=""_blank""><strong>Github</strong></a></p>
",0,"standard","post"
"Create and Manage a New Branch in Git","create-and-manage-new-branch-in-git","Useful git commands for creating and managing new branch in git.
","LIVE","<p>Find some of the useful git commands for creating and managing a new branch in git.</p>

<h2><span id=""1_Create_a_New_Branch_in_Git"">1. Create a New Branch in Git</span></h2>
<p>You may need to create a branch anytime during development for keeping your clean to your master branch. Usually, we create a new branch by copying the master or current branch code. Branches can be merged to master or other branches.</p>
<p>Remember to keep your master clean before creating a new branch.  Commit and sync your uncommitted changes, if any in your local repository. Open your Git Shell and follow the below git commands to create a new branch on your local machine:</p>
<pre>$ git branch &lt;name_of_your_new_branch&gt;</pre>
<p>Once your branch is created you will push the branch on GitHub remote by using the below commands</p>
<pre>$ git push origin &lt;name_of_your_new_branch&gt;</pre>
<h2><span id=""2_Switch_to_your_new_branch"">2. Switch to your new branch</span></h2>
<pre>$ git checkout &lt;name_of_your_new_branch&gt;</pre>
<h2><span id=""3_List_all_branches_created"">3. List all branches created</span></h2>
<pre>$ git branch</pre>
<h2><span id=""4_Adding_filesfolders_to_the_branch"">4. Adding files/folders to the branch</span></h2>
<p>Now you may add some new files or folders to this branch. Either you may create a new file using your vim editor or you may paste the files and folders using your file explorer. When you want to commit something in your branch, be sure to be in your branch. Before committing you must all new files/folders using the below command.</p>
<pre>$ git add-A</pre>
<pre>$ git push origin &lt;new branchName&gt;</pre>
<h2><span id=""5_Delete_a_git_branch"">5. Delete a git branch</span></h2>
<p>The first git command deletes the branch on your local file system and the second command deletes branch in Github</p>
<pre>$ git branch -d &lt;name_of_your_new_branch&gt;
$ git push origin :&lt;name_of_your_new_branch&gt;</pre>
",0,"standard","post"
"Crate a New Repository in GitHub","crate-a-new-repository-in-github","Create and delete branches from GitHub.com. 
","LIVE","<p>You can follow below steps to create and delete branches from GitHub.com</p>
<ol>
<li>Create a new account in GitHub.com if you don’t have one. Once you are ready with new account, just login into GitHub.com.</li>
<li>In your repository’s dashboard you can click on the add button in the right top besides your username.  Now start typing a new branch name, description and select repository type public/private. Private repositories aren’t free.  It is always a good practice a to README file in your repository.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Crate a New Branch in GitHub"" class=""size-full wp-image-4513 alignnone"" height=""594"" loading=""lazy"" sizes=""(max-width: 1018px) 100vw, 1018px"" src=""/media/uploads/articles/317/Crate-a-New-Branch-in-GitHub.png"" srcset="""" width=""1018""/></a></p>
<p> </p>
<p>Follow Screen Instructions</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Crate a New Branch in GitHub2"" class=""aligncenter size-full wp-image-4514"" height=""619"" loading=""lazy"" sizes=""(max-width: 1013px) 100vw, 1013px"" src=""/media/uploads/articles/317/Crate-a-New-Branch-in-GitHub2.png"" srcset="""" width=""1013""/></a></p>
",0,"standard","post"
"How to Get all Registered Email Accounts in Android","how-to-get-all-registered-email-accounts-in-android","How to get  all registered Google and other email accounts in Android. AccountManager class provides access to all registered user accounts in device. AccountManager generates the auth tokens for different applications 
","LIVE","<p>In this example, we’ll show how to get  all registered Google and other email accounts in Android.</p>
<p>AccountManager class provides access to all registered user accounts in device. AccountManager generates the auth tokens for different applications and caches it. It is also responsible for periodic check for the validity of auth tokens.</p>
<p>For accessing the registered accounts in your Android phone, you must add <code>android.permission.GET_ACCOUNTS</code> permission to your Manifest file. This permission allows access to the list of accounts in the Accounts Service.</p>
<pre class=""prettyprint lang-xml"">&lt;uses-permission android:name=""android.permission.GET_ACCOUNTS"" /&gt;</pre>
<p>Below example we’ll show the list of registered email address in a ListView. Well, lets begin with the layout</p>
<h3>Activity layout xml (activity_main.xml)</h3>
<pre class=""prettyprint lang-xml"">&lt;ListView xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/listView1""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:layout_weight=""1"" &gt;

&lt;/ListView&gt;</pre>
<p>Lets create another layout which will be used as our list row item</p>
<h3>lovely_view_layout.xml</h3>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""wrap_content""
    android:background=""#C9DAF3""
    android:orientation=""horizontal""
    android:padding=""5dp""
    android:weightSum=""2"" &gt;

    &lt;TextView
        android:id=""@+id/key""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_weight=""1"" /&gt;

    &lt;TextView
        android:id=""@+id/value""
        android:layout_marginLeft=""5dp""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_weight=""1"" /&gt;

&lt;/LinearLayout&gt;</pre>
<p>Now we are ready with layouts designs. Lets go back to the activity and adapter java file</p>
<h3>MainActivity.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.regemail;

import java.util.ArrayList;
import android.accounts.Account;
import android.accounts.AccountManager;
import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.widget.ListView;

public class MainActivity extends Activity {

	private ArrayList&lt;Item&gt; list = null;
	private ListView listView;
	private LovelyListAdapter listadaptor;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		list = getData();
		listView = (ListView) findViewById(R.id.listView1);
		listadaptor = new LovelyListAdapter(this, R.layout.lovely_view_layout, list);
		listView.setAdapter(listadaptor);
	}

	private ArrayList&lt;Item&gt; getData() {
		ArrayList&lt;Item&gt; accountsList = new ArrayList&lt;Item&gt;();

		//Getting all registered Google Accounts;
		try {
			Account[] accounts = AccountManager.get(this).getAccountsByType(""com.google"");
			for (Account account : accounts) {
				Item item = new Item( account.type, account.name);
				accountsList.add(item);
			}
		} catch (Exception e) {
			Log.i(""Exception"", ""Exception:"" + e);
		}

		//For all registered accounts;
		/*try {
			Account[] accounts = AccountManager.get(this).getAccounts();
			for (Account account : accounts) {
				Item item = new Item( account.type, account.name);
				accountsList.add(item);
			}
		} catch (Exception e) {
			Log.i(""Exception"", ""Exception:"" + e);
		}*/
		return accountsList;
	}
}</pre>
<h3>LovelyListAdapter.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.regemail;

import java.util.List;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.TextView;

public class LovelyListAdapter extends ArrayAdapter&lt;Item&gt; {
	private List&lt;Item&gt; appsList = null;
	private Context context;

	public LovelyListAdapter(Context context, int textViewResourceId, List&lt;Item&gt; appsList) {
		super(context, textViewResourceId, appsList);
		this.context = context;
		this.appsList = appsList;
	}

	@Override
	public int getCount() {
		return ((null != appsList) ? appsList.size() : 0);
	}

	@Override
	public Item getItem(int position) {
		return ((null != appsList) ? appsList.get(position) : null);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		View view = convertView;
		if (null == view) {
			LayoutInflater layoutInflater = (LayoutInflater) context
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			view = layoutInflater.inflate(R.layout.lovely_view_layout, null);
		}

		if (position % 2 == 1) {
		    view.setBackgroundColor(context.getResources().getColor(R.color.lovely_row_bg1));  
		} else {
		    view.setBackgroundColor(context.getResources().getColor(R.color.lovely_row_bg2));  
		}

		Item data = appsList.get(position);
		if (null != data) {

			TextView appName = (TextView) view.findViewById(R.id.key);
			TextView packageName = (TextView) view.findViewById(R.id.value);

			appName.setText(data.getKey());
			packageName.setText(data.getValue());
		}
		return view;
	}
}</pre>
<h3>Item.java</h3>
<pre class=""prettyprint lang-java"">package com.javatechig.regemail;

public class Item {

	private String key;
	private String value;

	public Item(String key, String value) {
		this.key = key;
		this.value = value;
	}

	public String getKey() {
		return key;
	}

	public void setKey(String key) {
		this.key = key;
	}

	public String getValue() {
		return value;
	}

	public void setValue(String value) {
		this.value = value;
	}
}</pre>
<p>Download complete source code from <a href=""https://github.com/javatechig/javatechig-android-advanced/tree/master/GetRegisteredEmailAccounts"" rel=""nofollow noopener noreferrer"" target=""_blank"">GitHub</a>.</p>
",0,"standard","post"
"If-then and if-then-else Statements in Java","if-then-and-if-then-else-statements-in-java","If-else statement in java is used for conditional checks for decision making. You can have multiple hierarchies of if-else statements. Once any of the if or else-if condition satisfies it executes the block of statements corresponding to it
","LIVE","<p>If-else statement in java is used for conditional checks for decision making. You can have multiple hierarchies of if-else statements. Once any of the if or else-if condition satisfies it executes the block of statements corresponding to it. An else statement is optional. If none of if or else-if statements satisfies then else statement gets executed. Once the statements inside if-else block is executed it continue program normally with rest of the statement/block.</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""if-then and if-then-else Statements"" class=""aligncenter size-full wp-image-4489"" height=""485"" loading=""lazy"" src=""/media/uploads/articles/319/if-then-and-if-then-else-Statements.png"" srcset="""" width=""564""/></a></p>
<p>For example, if you want check a number N1 is greater than or less to another number N2, then you will have to use if-else block. Below example will demonstrates the usages of if else statements.</p>
<pre class=""prettyprint lang-java"">
import java.util.Scanner;

public class JavaTest {

	public static void main(String[] args) {

		int N1 = 10;
		System.out.println(""Enter Value for N2:"");
		Scanner scanner = new Scanner(System.in);
		int N2 = scanner.nextInt();

		if (N1 &gt; N2) {
			System.out.println(""N1 is greater"");
		} else if (N1 == N2) {
			System.out.println(""N1 and N2 are equal"");
		} else {
			System.out.println(""N2 is greater"");
		}
	}
}</pre>
<p>Well, let’s give a closure look at the above code. Here In this example we are defining two integer variables N1 and N2. N1 is predefined with value 10 and for N2 we are asking users input. Scanner is used to accept input from user. More about scanner we’ll cover in later sections of tutorials.</p>
<h3>Test Case1- For user entered value for N2 = 8</h3>
<p>The fist if condition is checking whether, the value of N1 is greater than value of N2. As 10 is greater than 8, it satisfies the condition and executes the associated block of code. Here in this case it prints “N1 is greater”</p>
<h3>Test Case2- For user entered value for N2 = 10</h3>
<p>It will fail the first if condition check and it will check for the else if block. The else-if block condition satisfies and it executes the associated block of code. Here in this case it prints “N1 is equals to N2”</p>
<h3>Test Case2- For user entered value for N2 = 20</h3>
<p>Both if and else-if will fail for the value of N2 as 20. Then it executes the else statement and it will print “N2 is greater”</p>
",0,"standard","post"
"Bugsense – a crash analytics and performance monitoring tool for mobile","bugsense-crash-analytics-and-performance-monitoring-tool-for-mobile-developers","Bugsense, provide platform to track application crashes and ANR’s. it reports all your application crashes in real time. It also have some added features that helps developers to debug your application faster and more efficiently
","LIVE","<p>The hardest part of a developer’s life is not to write great code but, to deal with annoying part of an application during phases of development. A bug is what we believe to cause the most inconvenience to user while in the middle of an application. And hence it is must require to take the measures at every phases of development.</p>
<blockquote><p>A software bug is an error, flaw, failure, or fault in a computer program or system that causes it to produce an incorrect or unexpected result or to behave in unintended ways.</p></blockquote>
<p>Bugsense, provide platform to track application crashes and ANR’s. Now you may raise a question, Why use a third-party service, when platforms like Apple iTunes and Google Market provide developers with its own solution for tracking application crashes?”</p>
<p>Following are some of the features makes Bugsense significantly powerful than the platform providers</p>
<figure aria-describedby=""caption-attachment-4450"" class=""wp-caption aligncenter"" id=""attachment_4450"" style=""width: 620px""><a href=""http://stacktips.com"" target=""_self""><img alt=""Bugsense; crash analytics mobile developers"" class=""size-medium wp-image-4450"" height=""490"" loading=""lazy"" src=""/media/uploads/articles/320/Bugsense-crash-analytics-mobile-developers-620x490.png"" srcset="""" width=""620""/></a><figcaption class=""wp-caption-text"" id=""caption-attachment-4450"">Bugsense; crash analytics mobile developers</figcaption></figure>
<h3>Bugsense Features</h3>
<p>Bugsense, reports all your application crashes in real time. It also have some added features that helps developers to debug your application faster and more efficiently. Some of them are:</p>
<ul>
<li><strong>Multi-platform support,</strong> currently it supports world’s leading mobile platforms like Android, iOS, Windows 8 and HTML5 based applications.</li>
<li><strong>Grouping of similar crashes,</strong> know which are the bugs that happen more often, and in which version they appeared for the first time.</li>
<li><strong>Crash report filtering,</strong> you can filter the crashes by platform, devices versions, time period and much more</li>
<li><strong>Application Context,</strong> while debugging application context is the king. Bugsense helps to get the application context like device OS and app version, Network state, device location service, etc.</li>
<li><strong>Symbolication,</strong> supports symbolication on both device and server dashboard. This helps developers to easily find the line of code that causes the crash, without any manual user input.</li>
<li><strong>Tagging of crashes as resolved,</strong> once developers resolves the issues you can update the status to resolved, so you know which ones you don’t have to worry about.</li>
<li><strong>JIRA integration,</strong> supports deep integration of JIRA that creates new tasks when a crash is reported in your application.</li>
<li><strong>Email notifications,</strong> user may opt for email notification. That notifies user when a crash is reported in your application.</li>
<li><strong>Documentation</strong>, you will find range of detailed documentations that supports developers to integrate easily in android, iOS, Windows 8 and HTML5 based applications.</li>
</ul>
<p>Know more from official <a href=""https://www.bugsense.com"" rel=""nofollow noopener noreferrer"" target=""_blank"">BugSense website</a></p>
",0,"standard","post"
"Switch-Case statement in Java","switch-case-statement-in-java","Switch case is another alternative for if-else statements. Switch case statement compares value in the object in the expression with the expressions associated with each case. A switch works only with primitive types like byte, short, char, and int and enumerated data types
","LIVE","<p>Switch case is another alternative for if-else statements. Switch case statement compares value in the object in the expression with the expressions associated with each case. A switch works only with primitive types like byte, short, char, and int and enumerated data types. But since Java SDK7, it also supports String type.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Switch-Case statement in Java"" class=""aligncenter size-full wp-image-4495"" height=""483"" loading=""lazy"" src=""/media/uploads/articles/321/Switch-Case-statement-in-Java.png"" srcset="""" width=""562""/></a></p>
<p>The following code example demonstrates switch case with example. An integer value day is passed as an parameter and the code will display the day of week.</p>
<pre class=""prettyprint lang-java"">
public class StringSwitch {

	public static void main(String[] args) {
		int day = 2;
		String dayOFWeek = """";
		switch (day) {
		case 1:
			dayOFWeek = ""MON"";
			break;
		case 2:
			dayOFWeek = ""TUE"";
			break;
		case 3:
			dayOFWeek = ""WED"";
			break;
		case 4:
			dayOFWeek = ""THU"";
			break;
		case 5:
			dayOFWeek = ""FRI"";
			break;
		case 6:
			dayOFWeek = ""SAT"";
			break;
		case 7:
			dayOFWeek = ""SUN"";
		default:
		}
		System.out.println(dayOFWeek);
	}
}</pre>
<ul>
<li>The older version of java supports switch case statement only with primitive types. It doesn’t supports String comparisons using switch case.</li>
<li>But since JDK 7 release, you can use a String object in the expression of a switch statement.</li>
<li>The switch statement compares the String object in its expression with the expressions associated with each case label as if it were using the String.equals method; consequently, the comparison of String objects in switch statements is case sensitive.</li>
<li>Java compiler generates generally more efficient byte code from switch statements that use String objects than from chained if-then-else statements.</li>
</ul>
<p>The following code example demonstrates switch case with using String comparison example. Note that, you Java to compile with Java 7 and above.</p>
<pre class=""prettyprint lang-java"">
public class StringSwitch {
	public static void main(String[] args) {
		String key = ""TWO"";
		switch (key) {
		case ""ONE"":
			key = ""One Selected!"";
			break;
		case ""TWO"":
			key = ""Two Selected!"";
			break;
		case ""THREE"":
			key = ""Three Selected!"";
			break;
		case ""FOUR"":
			key = ""Four Selected!"";
			break;
		case ""FIVE"":
			key = ""Five Selected!"";
			break;
		case ""SIX"":
			key = ""Six Selected!"";
			break;
		default:

		}
		System.out.println(key);

	}
}</pre>
",0,"standard","post"
"Genymotion- The Fastest Android Emulator for Application Testing","fastest-android-emulator-for-testing-genymotion","Being an Android developer I have always realized that, testing in android simulator sucks. It is very much sluggish and even with an high configuration system it doesn&#8217;t work flawlessly. 
","LIVE","<p>Being an Android developer, I have always realized that, testing in android simulator sucks. It is very much sluggish and even with an high configuration system it doesn’t work flawlessly.</p>
<p><iframe allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen="""" frameborder=""0"" height=""675"" loading=""lazy"" src=""https://www.youtube.com/embed/50PR7ocy_IU?feature=oembed"" title=""Genymotion, Android emulator"" width=""1200""></iframe></p>
<p>Yet another point, today if we have to give a presentation of application with person remotely located there is no way I can make it without an emulator. On my hunt for an alternative options for android simulator, I have encountered Genymotion.</p>
<h2>Genymotion Features</h2>
<ol>
<li>Genymotion is considered to be an fastest Android emulator option for application testing and presentation.</li>
<li>It is an Virtual device integrated with more then 10 virtual devices. This way you can cover your testing in most used devices that are available in market.</li>
<li>Supports to customize your virtual device configuration setup. With this feature we can have a big display for presentations.</li>
<li>You can integrate Genymotion with IDE’s like Eclipse or Android studio. This makes way easier to install applications into Virtual devices. You can also install or run other ADB commands like the way we do for simulators or devices.</li>
</ol>
<p>Of course it is not as fast as the XCode iPhone simulator but quite faster then simulator comes with android SDK.</p>
",0,"standard","post"
"YouTubePlayerView Example in Android Using YouTube API","youtubeplayerview-example-in-android-using-youtube-api","In this tutorial we’ll see how to use YouTube Player API in android. YouTube player API provided and embedded view that supports with various playback controls.
","LIVE","<p class=""alert warning"">Jack and Jill says this tutorial is retired. And we agree! This tutorial was published back in May 2014, since then lot has been changed; YouTubePlayerAPI is updated and Eclipse for Android development is history. Checkout our new <a href=""/articles/youtube-android-player-api-example"">YouTube Android Player API Example </a> here.</p>

<p>In this tutorial we’ll see how to use YouTube Player API in android. YouTube player API provides an embedded view that supports with various playback controls.</p>
<h2><span id=""1_Downloading_YouTube_Player_API"">1. Downloading YouTube Player API</span></h2>
<p>Before you start writing some code, you’ll have to first download the YouTube Android Player API. Once downloaded import the jar into your project lib folder and add the jar to your build path.</p>
<p><strong>Download <a href=""https://developers.google.com/youtube/android/player/downloads/"" rel=""nofollow noopener noreferrer"" target=""_blank"">YouTube Player API here</a></strong></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""YouTube Android Player API"" class=""aligncenter size-medium wp-image-4395"" height=""380"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/323/YouTube-Android-Player-API-620x380.png"" srcset="""" width=""620""/></a></p>
<h2><span id=""2_Register_your_app_in_Google_developer_console"">2. Register your app in Google developer console</span></h2>
<ul>
<li>Before you start using the Youtube player API for android, you have to register your application with Google developer console and get and API key, The API key is a unique value for your application. Do not disclose this to others.</li>
<li>Visit <a href=""https://console.developers.google.com"" rel=""nofollow noopener noreferrer"" target=""_blank""><strong>Google APIs Console</strong> </a>and login with your Google account and create a new project</li>
<li>Once your project is created, got to API’s and enable <strong>YouTube data API V3</strong></li>
<li>And then Select <strong>API Access</strong> in your API Console. You’ll find API key. This API key will be used to access YouTube Android Player APIs.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""YouTube Android Player API2"" class=""size-medium wp-image-4396 aligncenter"" height=""301"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/323/YouTube-Android-Player-API2-620x301.png"" srcset="""" width=""620""/></a></p>
<h2><span id=""3_Create_a_new_Android_Application_project"">3. Create a new Android Application project</span></h2>
<p>Now you are ready to create Android project to play YouTube videos using YouTube player API. You may use IDE of your choice, here I am using Eclipse.</p>
<p>You need <code>INTERNET</code> permission to play video over internet. Add below permission in your application <code>AndroidManifest.xml</code> file.</p>
<pre class=""prettyprint lang-xml"">&lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;</pre>
<h2><span id=""4_Define_your_activity_layout"">4. Define your activity layout</span></h2>
<p>In this example, we will create an simple layout that uses YouTubePlayerView inside an LinearLayout.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical"" &gt;

    &lt;com.google.android.youtube.player.YouTubePlayerView
        android:id=""@+id/youtube_player""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:background=""#fff""
        android:padding=""5dp"" /&gt;

&lt;/LinearLayout&gt;</pre>
<h2><span id=""5_Initialize_YouTubePlayerView_in_your_Activity"">5. Initialize YouTubePlayerView in your Activity</span></h2>
<p>Initializing YouTube player view by calling initialize methood. Once the initialize is successful, you will get the <code>onInitializationSuccess()</code> callback with <code>YouTubePlayer</code> instance. You can add additional listeners to handle the playback control events.</p>
<pre class=""prettyprint lang-java"">package com.javatechig.youtubeapp;

import android.os.Bundle;
import android.widget.Toast;
import com.google.android.youtube.player.YouTubeBaseActivity;
import com.google.android.youtube.player.YouTubeInitializationResult;
import com.google.android.youtube.player.YouTubePlayer;
import com.google.android.youtube.player.YouTubePlayer.ErrorReason;
import com.google.android.youtube.player.YouTubePlayer.PlaybackEventListener;
import com.google.android.youtube.player.YouTubePlayer.PlayerStateChangeListener;
import com.google.android.youtube.player.YouTubePlayer.Provider;
import com.google.android.youtube.player.YouTubePlayerView;
import com.javatechig.youtubeandroid.R;

public class MainActivity extends YouTubeBaseActivity implements YouTubePlayer.OnInitializedListener {
	public static final String API_KEY = ""YOUR API KEY"";

	//http://youtu.be/&lt;VIDEO_ID&gt;
	public static final String VIDEO_ID = ""dKLftgvYsVU"";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		/** attaching layout xml **/
		setContentView(R.layout.activity_main);

		/** Initializing YouTube player view **/
		YouTubePlayerView youTubePlayerView = (YouTubePlayerView) findViewById(R.id.youtube_player);
		youTubePlayerView.initialize(API_KEY, this);
	}

	@Override
	public void onInitializationFailure(Provider provider, YouTubeInitializationResult result) {
		Toast.makeText(this, ""Failured to Initialize!"", Toast.LENGTH_LONG).show();
	}

	@Override
	public void onInitializationSuccess(Provider provider, YouTubePlayer player, boolean wasRestored) {
		/** add listeners to YouTubePlayer instance **/
		player.setPlayerStateChangeListener(playerStateChangeListener);
		player.setPlaybackEventListener(playbackEventListener);

		/** Start buffering **/
		if (!wasRestored) {
			player.cueVideo(VIDEO_ID);
		}
	}

	private PlaybackEventListener playbackEventListener = new PlaybackEventListener() {

		@Override
		public void onBuffering(boolean arg0) {
		}

		@Override
		public void onPaused() {
		}

		@Override
		public void onPlaying() {
		}

		@Override
		public void onSeekTo(int arg0) {
		}

		@Override
		public void onStopped() {
		}

	};

	private PlayerStateChangeListener playerStateChangeListener = new PlayerStateChangeListener() {

		@Override
		public void onAdStarted() {
		}

		@Override
		public void onError(ErrorReason arg0) {
		}

		@Override
		public void onLoaded(String arg0) {
		}

		@Override
		public void onLoading() {
		}

		@Override
		public void onVideoEnded() {
		}

		@Override
		public void onVideoStarted() {
		}
	};
}</pre>
<h2><span id=""6_Output"">6. Output<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""YouTube Android Player API Example - Javatechig"" class=""aligncenter size-medium wp-image-4402"" height=""390"" loading=""lazy"" src=""/media/uploads/articles/323/YouTube-Android-Player-API-Example-Javatechig-620x390.png"" srcset="""" width=""620""/></a></span></h2>
",0,"standard","post"
"TestFlight to terminate Android support as of March 21","testflight-to-terminate-android-support-as-of-march-21","TestFlight is an platform for app developers which helps in test and distribute iOS and Android applications to team. This helps in manage team and notify distribute build over the air. Additionaly TestFlight SDK supports analytics to get metrics of the test report. TestFlight announced it would be terminating Android support as of March 21.
","LIVE","<p>TestFlight is an platform for app developers which helps in test and distribute iOS and Android applications to team. This helps in manage team and notify distribute build over the air. Additionaly TestFlight SDK supports analytics to get metrics of the test report. TestFlight announced it would be terminating Android support as of March 21.</p>
<h2>Supported features</h2>
<ol>
<li>Create Team</li>
<li>Invite team members</li>
<li>Adding team members devices.</li>
<li>Upload, manage and distribute build</li>
</ol>
<h2>For a Developer</h2>
<ol>
<li>Sign up to create a new TestFlight account and to create your team.</li>
<li>Invite members and gather the device UDIDs from the team members and add them to your Apple Developer Portal and provisioning profile for the app (need only for iOS). For android you don’t need this step.</li>
<li>Prepare builds from your source code and then upload to TestFlight. Android application will have the file name as .apk and iOS platforms will generate .ipa file</li>
<li>Create a distribution list or pick individual members for distributing the build. All users will get notification over mail.</li>
</ol>
<h2>For a Tester</h2>
<ol>
<li>As a tester using TestFlight, you can either be invited, recruited or just sign up.</li>
<li>Once you sign up with TestFlight and login to the dashboard for the first time, you will be asked to connect your device, allowing developers to access the device’s Unique Device Identifier (UDID) or have the ability to install Android apps on your device.</li>
<li>Once you have successfully connected the device to your account and have been accepted to a team, the developer will have to add the UDID to the application, so that you can install it on your device.</li>
<li>Once the developer uploads a build you will receive an email through TestFlight, from the developer, with a link to install the build.</li>
<li>Follow the instructions in the email, click on the link, download the build to your device, and you will be ready to begin using the app.</li>
</ol>
",0,"standard","post"
"How to Remove Duplicate in ArrayList using Comparator","how-to-remove-duplicate-in-arraylist-using-comparator","This example shows how to remove duplicate from ArrayList  using Comparator. The easiest way to remove duplicate is by passing the List to an Set. We will use Comparator to remove duplicate elements. Once you have the Set you can again pass it back to ArrayList.
","LIVE","<p>This example shows how to remove duplicate from ArrayList using Comparator. The easiest way to remove duplicate is by passing the List to an Set. We will use Comparator to remove duplicate elements. Once you have the Set you can again pass it back to ArrayList.</p>
<pre class=""prettyprint lang-java"">import java.util.ArrayList;
import java.util.Comparator;
import java.util.Set;
import java.util.TreeSet;

public class RemoveDuplicate {

	public static void main(String[] args) {

		final ArrayList students = new ArrayList();
		students.add(new Student(""Student1"", ""1000""));
		students.add(new Student(""Student2"", ""1001""));
		students.add(new Student(""Student3"", ""1002""));
		students.add(new Student(""Student4"", ""1003""));
		students.add(new Student(""Student5"", ""1001""));
		students.add(new Student(""Student6"", ""1004""));

		/** Printing original list **/
		System.out.println(students);

		Set set = new TreeSet(new Comparator() {
			@Override
			public int compare(Student o1, Student o2) {
				if(o1.getId().equalsIgnoreCase(o2.getId())){
	        		return 0;
	        	}
	        	return 1;
			}
		});
		set.addAll(students);

		System.out.println(""\n***** After removing duplicates *******\n"");

	    final ArrayList newList = new ArrayList(set);

	    /** Printing original list **/
		System.out.println(newList);
	}

}

class Student {
	private String name;
	private String id;

	public Student(String name, String id) {
		this.name = name;
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@Override
	public String toString() {
		return ""\n"" +""Name="" + name + ""   Id="" + id ;
	}
}</pre>
<h3>Output</h3>
<pre>[
Name=Student1   Id=1000, 
Name=Student2   Id=1001, 
Name=Student3   Id=1002, 
Name=Student4   Id=1003, 
Name=Student5   Id=1001, 
Name=Student6   Id=1004]

***** After removing duplicates *******

[
Name=Student1   Id=1000, 
Name=Student2   Id=1001, 
Name=Student3   Id=1002, 
Name=Student4   Id=1003, 
Name=Student6   Id=1004]</pre>
",0,"standard","post"
"Basic Java Language Constructs","basic-java-language-constructs","Java keywords There are over 50 reserved keywords in Java programming language. Keywords are the language construct has&hellip;
","LIVE","<h2>Java keywords</h2>
<p>There are over 50 reserved keywords in Java programming language. Keywords are the language construct has predefined meaning in the Java. As they are reserved, we cannot use keywords as names for variables, methods, classes, or as any other identifier.</p>
<p>Following are some of the java keywords are listed below</p>
<table border=""0"" cellpadding=""0"" class=""reference"" summary="""" width=""100%"">
<tbody>
<tr>
<td align=""left"" width=""20%""><code>abstract</code></td>
<td align=""left"" width=""20%""><code>continue</code></td>
<td align=""left"" width=""20%""><code>for</code></td>
<td align=""left"" width=""20%""><code>new</code></td>
<td align=""left"" width=""20%""><code>switch</code></td>
</tr>
<tr>
<td width=""20%""><code>assert</code><sup>***</sup></td>
<td align=""left"" width=""20%""><code>default</code></td>
<td align=""left"" width=""20%""><code>goto</code><sup>*</sup></td>
<td align=""left"" width=""20%""><code>package</code></td>
<td align=""left"" width=""20%""><code>synchronized</code></td>
</tr>
<tr>
<td align=""left"" width=""20%""><code>boolean</code></td>
<td align=""left"" width=""20%""><code>do</code></td>
<td align=""left"" width=""20%""><code>if</code></td>
<td align=""left"" width=""20%""><code>private</code></td>
<td align=""left"" width=""20%""><code>this</code></td>
</tr>
<tr>
<td align=""left"" width=""20%""><code>break</code></td>
<td align=""left"" width=""20%""><code>double</code></td>
<td align=""left"" width=""20%""><code>implements</code></td>
<td align=""left"" width=""20%""><code>protected</code></td>
<td align=""left"" width=""20%""><code>throw</code></td>
</tr>
<tr>
<td align=""left"" width=""20%""><code>byte</code></td>
<td align=""left"" width=""20%""><code>else</code></td>
<td align=""left"" width=""20%""><code>import</code></td>
<td align=""left"" width=""20%""><code>public</code></td>
<td align=""left"" width=""20%""><code>throws</code></td>
</tr>
<tr>
<td align=""left"" width=""20%""><code>case</code></td>
<td align=""left"" width=""20%""><code>enum</code><sup>****</sup></td>
<td align=""left"" width=""20%""><code>instanceof</code></td>
<td align=""left"" width=""20%""><code>return</code></td>
<td align=""left"" width=""20%""><code>transient</code></td>
</tr>
<tr>
<td align=""left"" width=""20%""><code>catch</code></td>
<td align=""left"" width=""20%""><code>extends</code></td>
<td align=""left"" width=""20%""><code>int</code></td>
<td align=""left"" width=""20%""><code>short</code></td>
<td align=""left"" width=""20%""><code>try</code></td>
</tr>
<tr>
<td align=""left"" width=""20%""><code>char</code></td>
<td align=""left"" width=""20%""><code>final</code></td>
<td align=""left"" width=""20%""><code>interface</code></td>
<td align=""left"" width=""20%""><code>static</code></td>
<td align=""left"" width=""20%""><code>void</code></td>
</tr>
<tr>
<td align=""left"" width=""20%""><code>class</code></td>
<td align=""left"" width=""20%""><code>finally</code></td>
<td align=""left"" width=""20%""><code>long</code></td>
<td align=""left"" width=""20%""><code>strictfp</code><sup>**</sup></td>
<td align=""left"" width=""20%""><code>volatile</code></td>
</tr>
<tr>
<td align=""left"" width=""20%""><code>const</code><sup>*</sup></td>
<td align=""left"" width=""20%""><code>float</code></td>
<td align=""left"" width=""20%""><code>native</code></td>
<td align=""left"" width=""20%""><code>super</code></td>
<td align=""left"" width=""20%""><code>while</code></td>
</tr>
</tbody>
</table>
<h2>Java Comments</h2>
<p>While writing code, you must write set of comments for your own understanding or for others to understand your code. Such blocks are called comments. Comments can appear anywhere in the source code where whitespaces are allowed. Java Comments are not gets compiled or makes any sense to JVM. Java supports various type of comments such single line or multi line comments.</p>
<p>A singleline comment is represented by slash-shash (//). Example of single line comment</p>
<pre>// This is a single line comment
</pre>
<p>Multiline comments are represented as follows</p>
<pre>/**
* This is a multiline comment
**/
</pre>
<h2>Java Data Types</h2>
<p>There are eight Java data types – byte, short, int, long, float, double, char and boolean. We will discuss more in details on the upcoming chapters.</p>
<h2>Java Development Kit</h2>
<p>The Java Developer’s Kit is distributed by Sun Microsystems. The JDK contains documentation, examples, installation instructions, class libraries and packages, and tools.</p>
<h2>Java Literals</h2>
<p>Literals are any number, text, or other information that represents a value. Literals are the values assigned to variables.</p>
<pre>int num = 100;</pre>
<p>Here 100 is a integer literal.</p>
<h2>Class, Objects and Methods in Java</h2>
<p>Java Class is nothing but a template for object you are going to create or it’s a blue print by using this we create an object. Whatever we can see in this world all the things are a object. And all the objects are categorized in a special group. That group is termed as a class. Methods are how we communicate with objects. When we invoke or call a method we are asking the object to carry out a task</p>
<h2>Interface in Java</h2>
<p>An interface is a collection of methods that have no implementation – they are just created, but have no functionality. An interface is a bit like a class, except you can only declare methods and variables in the interface. You cannot actually implement the methods.</p>
<h2>Arrays</h2>
<p>An array is a set of variables that are referenced using a single variable name combined with an index number. Each item of an array is called an element. All the elements in an array must be of the same type. Thus the array itself has a type that specifies what kind of elements it can contain.</p>
",0,"standard","post"
"History of Java Programming Language","history-of-java-programming-language","Java Programming Language was developed with the combined effort from 5 great geeks, James Gosling, Patrick Naughton, Chris&hellip;
","LIVE","<p>Java Programming Language was developed with the combined effort from 5 great geeks, James Gosling, Patrick Naughton, Chris Warth, Mike Sheridan and Ed Frank, while they all were working for Sun Microsystems, Inc. The first public release version of java came in 1991. It took around 18 months combined effort to develop and had a initial name as “Oak” which was renamed to Java in 1995, due to copyright issues.</p>
<p>The core idea behind java was to develop a language that is platform-independent and can be used in various devices such as embedded software’s for consumer electronic devices. C and C++ were quite inefficient for the purpose because they were platform dependent, as their programs have to be compiled for particular hardware before execution. Also, the compiled code was inefficient for other processors and it had to be recompiled. The team of 5 also called as Green Team began to work in developing a easier and efficient, portable and platform-independent language that could create a code which can run on variety of processors under differing environments. That’s how JAVA began!</p>
<p>During late 90s, the Internet and WWW infrastructure become popular day-by-day, and most of the web application was using CGI for programming for web application development. Due to various lags and drawbacks such as platform independency, multi threading and concurrency, CGI was not efficient enough for web applications. It required programs that could run on any operating system irrespective of hardware and software configuration. It required small and portable programs that could be securely transported over the network. The programming language available to suit such requirements was Java.</p>
<p>Many developers soon realized that architectural neutral language like Java would be best for writing programs for Internet. Thus focus shifted towards Java from consumer electronics to World Wide Web.</p>
<p>Today, Java is not an ordinary programming language. It is a technology which is simple, Object Oriented, Distributed, Robust, Secure, Architecture neutral, Portable, Interpreated, Multithreaded, High Performance and Dynamic.</p>
<p>The following table depicts the java version release informations. P.s. this information is taken from Wikipedia.</p>
<table class=""reference"">
<thead>
<tr>
<th scope=""col"">Version</th>
<th scope=""col"">Year of release</th>
<th scope=""col"">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>JDK1.0</td>
<td>23-Jan-1996</td>
<td>The codename is Oak. Initial release of Jdk1.0</td>
</tr>
<tr>
<td>JDK1.1</td>
<td>19-Feb-1997</td>
<td>The addition of AWT, JDBC, RMI, Javabeans etc</td>
</tr>
<tr>
<td>J2SE 1.2</td>
<td>8-Dec-1998</td>
<td>J2SE (Java2 Standard Edition), Codename Playground, Major additions are- Swing graphical API was integrated, strictfp Keyword, reflection, Java IDL, collection and JIT Compiler in Sun’s JVM for Java plug-in was equipped.</td>
</tr>
<tr>
<td>J2SE 1.3</td>
<td>8-May-2000</td>
<td>Codename Kestrel. The major changes are- Hotspot JVM included, RMI modified to support compatibility with CORBA, Java Naming and Directory Interface(JNDI) included and Java Platform Debugger Architecture(JPDA),Java Sound etc.</td>
</tr>
<tr>
<td>J2SE 1.4</td>
<td>6-Feb-2002</td>
<td>Codename merlin. This was the first release of the java platform developed under java community process as JSR 59. The Major Changes are- assert Keyword, Regular Expression, Exception chaining, Image I/O API for reading and writing images, Java Web start included.</td>
</tr>
<tr>
<td>J2SE 5.0</td>
<td>30-Sept-2004</td>
<td>codename Tiger , Originally Numbered 1.5, New language features added are- Generics, Metadata, Autoboxing, Enumeratations, Swing, Var args, collections static imports etc.</td>
</tr>
<tr>
<td>Java SE 6</td>
<td>11-Dec-2006</td>
<td>Codename Mustang. New changes are- Scripting Language support, Improved web service support trough JAX-WS , JDBC 4.0 support, support for pluggable annotations, JVM improvements including Synchronization and compiler performance optimizations, Garbaze collection algorithms.</td>
</tr>
<tr>
<td>Java SE 7.0</td>
<td>July 28, 2011</td>
<td>Codename Dolphin, currently in development stage, The features changes are- JVM support for dynamic language, New library for parallel computing on multi core, compressed 64 bit pointers, Automatic resource management.</td>
</tr>
<tr>
<td>Java SE 8.0</td>
<td>March 18, 2014</td>
<td>Various bug fixes and improvements</td>
</tr>
</tbody>
</table>
",0,"standard","post"
"Introduction to Java, JVM and Writing Your Fist Java Program","introduction-to-java-jvm","Java is a high level, English like, object-oriented programming language with tons of APIS (application programming interface) for developing applications. Java is a platform independent language with support for performing complex computation, graphics, server and mobile application development. Java language syntax looks pretty much like C and C++, however there are some differences such as absence of pointers, allows writing object-oriented code. Learning Java is easy for ","LIVE","<p>Java is a high-level English like an object-oriented programming language with tons of <code>APIS</code> (application programming interface) for developing applications. Java is a platform independent language with support for performing complex computation, graphics, server and mobile application development.</p>
<p>Java language syntax looks pretty much like C and C++, however, there are some differences such as the absence of pointers, allows writing object-oriented code. Learning Java is easy for a developer with a basic C programming experience.</p>
<p>Java is one of the vastly used languages as it supports <strong>“write once run anywhere”</strong> architecture. A java program written in Macintosh can be executed on Windows or Linux without any modification or without recompiling it again. To understand how Java achieves platform independence, we must understand the way the java program is compiled and executed.</p>
<h3>Writing First Java Program</h3>
<p>A simple java program can be written in any text editor such as Notepad, WordPad, notepad++ or edit plus. While writing your Java program make sure it must have one public class and one public static void method<code>main()</code> which allow it to run a java program when invoked in Java Virtual Machine.</p>
<p>For now without worrying much about how to go with it, just copy and paste the following code in your favorites text editor. We will learn about the building blocks in details on the following sections. After pasting the following code, save your file with name HelloWorld.java extension. Now we are ready for next step to compiling and run Java program.</p>
<pre class=""prettyprint lang-java"">/* Hello World Java Program */
public class HelloWorld {

  public static void main(String[] args) {
    System.out.println(“Hello World!”);
  }
}
</pre>
<h3>Compiling Java Code</h3>
<p>Compiling Java code requires a compiler that comes along with Java Development Kit also called as JDK. This tutorial assumes that you have already installed Java JDK on your development computer, if not you can download and install from Oracle’s site.</p>
<p>If you are not sure, if java is installed properly, you can check by entering the command<code>javac –help</code> in your command line. If installed properly, you will see the output as depicted in the screenshot below.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Compiling Java code"" class=""aligncenter size-large wp-image-8495"" height=""361"" loading=""lazy"" sizes=""(max-width: 660px) 100vw, 660px"" src=""/media/uploads/articles/328/Compiling-Java-code-940x514.png"" srcset="""" width=""660""/></a></p>
<p>Once you are ready with your Java development environment, you can compile your java code by invoking the command<code>javac</code> from command line. Enter the following command to compile HelloWorld.java</p>
<pre class=""prettyprint lang-java"">&gt; javac HelloWorld.java</pre>
<p>The above code will compile your java source file and produce a new file named.<code>HelloWorld.class</code> Open HelloWorld.class file in a text editor; notice that it contains some unreadable bytecode. This Class file is actually java’s way to achieve platform independence. This class file contains JVM specific bytecode instead of machine code, unlike the C or C++ that makes it possible to run java program in any platform.</p>
<h3>Running Java Application</h3>
<p>We know that after compilation java compiler creates a<code>.class</code> file that contains JVM specific bytecodes and to execute those bytecodes we need a piece of software called Java Virtual Machine or JVM. JVM is also known as Java Runtime or JRE. Bytecodes of java programs executed inside Java Virtual Machine which is platform dependence, you here it correctly JVM are indeed platformed dependent and it has the different binary for the different platform which you can download from Sun’s site. JVM also comes with JDK or you can download it separately.</p>
<p>Use the following command to compile the above code</p>
<pre class=""prettyprint lang-java"">&gt; java HelloWorld</pre>
<p>The output of the above java program is<br/>
Hello World!</p>
<h3>Importance of JVM?</h3>
<p>It’s important to know that the JVM ((Java Virtual Machine) doesn’t have any information high-level java code. It knows the only binary format of the bytecode and ensures that the class file generated by java compiler is as per Java Byte Code specification thus eliminating dangers of running a malicious and manipulated java bytecodes.</p>
<p>Since every Java program runs within the boundaries defined by Java Virtual machine or JVM it provides inherent Security. The code run inside the JVM cannot go beyond the security constraints defined by the Java Virtual Machine. This is why java application is considered as secure applications over the internet and Java applets are the most widely used programming platform for the internet. Apart from Security Java Virtual machine also provides memory management via Garbage collection that enables java programmer or Java developer to focus more on business logic rather than worrying about system aspects like allocating and reclaiming memory.</p>
<p>In conclusion with the use of the class file, bytecode and Java virtual machine, Java achieves its platform independence and makes development easy to run across different platform.</p>
",0,"standard","post"
"How to Remove Duplicate Values From Java ArrayList","how-to-remove-duplicate-values-from-java-arraylist","This example shows how to remove duplicate from ArrayList. The easiest way to remove duplicate is by passing the List to an Set. As set doesn&#8217;t support duplicates it will omit the duplicate values. Once you have the Set you can again pass it back to ArrayList.
","LIVE","<p>This example shows how to remove duplicate from ArrayList. The easiest way to remove duplicate is by passing the List to an Set. As set doesn’t support duplicates it will omit the duplicate values. Once you have the Set you can again pass it back to ArrayList.</p>
<h3>Duplicate Values From Java ArrayList using HashSet</h3>
<pre class=""prettyprint lang-java"">import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

public class RemoveDuplicate {
	public static void main(String[] args) {
		List sourceList = new ArrayList();

		sourceList.add(""object1"");
		sourceList.add(""object2"");
		sourceList.add(""object2"");
		sourceList.add(""object3"");
		sourceList.add(""object4"");
		sourceList.add(""object2"");

		List newList = new ArrayList(new HashSet(
				sourceList));
		Iterator it = newList.iterator();
		while (it.hasNext()) {
			System.out.println(it.next());
		}

	}
}</pre>
<h3>Output</h3>
<pre>object3
object4
object1
object2</pre>
<p>In this above example we have removed duplicates from the ArrayList but we will loose the sequencing index. If you want to preserve the order of data use LinkedHashSet rather HashSet. Find an example below</p>
<h3>Duplicate Values From Java ArrayList using LinkedHashSet</h3>
<pre class=""prettyprint lang-java"">import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;

public class RemoveDuplicate {
	public static void main(String[] args) {
		List sourceList = new ArrayList();

		sourceList.add(""object1"");
		sourceList.add(""object2"");
		sourceList.add(""object2"");
		sourceList.add(""object3"");
		sourceList.add(""object4"");
		sourceList.add(""object2"");

		List newList = new ArrayList(new LinkedHashSet(
				sourceList));
		Iterator it = newList.iterator();
		while (it.hasNext()) {
			System.out.println(it.next());
		}

	}
}</pre>
<h3>Output</h3>
<pre>object1
object2
object3
object4</pre>
",0,"standard","post"
"How to Instal SVN Subversive Plug-In in eclipse","how-to-instal-svn-subversive-plug-in-in-eclipse","In this tutorial will see steps to install of the SVN Subversive Plug-In in eclipse. Subversive SVN plugin is an official Eclipse project with an EPL license.
","LIVE","<p>In this tutorial will see steps to install of the SVN Subversive Plug-In in eclipse. Subversive SVN plugin is an official Eclipse project with an EPL license. This comes with an SVN connector that connects and communicates with SVN repository.</p>
<h3>Using Eclipse Update Site</h3>
<p>Run Eclipse and select Help &gt; Install New Software from the main menu.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Installation of the SVN Subversive Plug-In in eclipse"" class=""aligncenter size-medium wp-image-4355"" height=""394"" loading=""lazy"" src=""/media/uploads/articles/330/Installation-of-the-SVN-Subversive-Plug-In-in-eclipse-620x394.png"" srcset="""" width=""620""/></a></p>
<p>Click “Add” from the install dialog box. Add the below link as location and name in the dialog. Select both “subclips” and “SVNKit” both options and click install. And then follow the installation instructions.</p>
<h4><strong>SVN Subversive URL- <span style=""color: #ff9900;""><a href=""http://subclipse.tigris.org/update_1.10.x"" rel=""nofollow noopener noreferrer"" target=""_blank""><span style=""color: #ff9900;"">http://subclipse.tigris.org/update_1.10.x</span></a></span></strong></h4>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Installation of the SVN Subversive Plug-In in eclipse2"" class=""aligncenter size-medium wp-image-4356"" height=""580"" loading=""lazy"" src=""/media/uploads/articles/330/Installation-of-the-SVN-Subversive-Plug-In-in-eclipse2-620x580.png"" srcset="""" width=""620""/></a></p>
",0,"standard","post"
"Java Collection Complete Tutorial with Examples","java-collection-complete-tutorial-and-examples","In this tutorial we’ll see the core collection interface available in java and their behavior. Examples in each section will show you the implementation and usage of various collection interfaces.","LIVE","<p>In this tutorial we’ll see the core collection interface available in java and their behavior. Examples in each section will show you the implementation and usage of various collection interfaces.</p>
<h3 class=""""><span id=""1_Introduction_to_Java_collection_API"">Introduction to Java collection API</span></h3>
<p>Java Collections API is a set of interface and implementations included in the java standard library. A collection is a container that holds multiple objects into single unit. Different collection has their own purpose and behaviors. All collection interfaces and classes are available under java.util package.<br/>
Collection interfaces are the abstract behavior of each collection.</p>
<p><a href=""http://stacktips.com"" target=""_self""></a></p>
<h2 class=""""><span id=""2_Collection_Interface"">Collection Interface</span></h2>
<p>Collection interface is the root of collection hierarchy and it represents general purpose behavior for the entire interface in this hierarchy. It doesn’t have a concrete implementation.</p>
<h3 class=""""><span id=""3_Set_Interface"">Set Interface</span></h3>
<ul>
<li>A set is a collection that doesn’t allow duplicate entries. A set has the same methods as the collection interface. It can contain at least one 1 null element.</li>
<li>The set implementations are HashSet, LinkedHashSet and TreeSet.</li>
<li>Element in HashSet, LinkedHashSet are not sorted but TreeSet is sorted.</li>
</ul>
<p class=""""><span id=""Example_SetExamplejava""><b>Example: SetExample.java</b></span></p>
<pre class=""prettyprint lang-java"">import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class SetExample {
  public static void main(String args[]) { 
     int count[] = {34, 22,10,60,30,22};
     Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();
     try{
        for(int i = 0; i&lt;5; i++){
           set.add(count[i]);
        }
        System.out.println(""Initial Set="" + set);        

        set.remove(30);        
        System.out.println(""Values after delete="" + set);

        System.out.println(""Retrieving Values"");        
        Iterator&lt;Integer&gt; iterator = set.iterator();
        while(iterator.hasNext()){
        	System.out.println(iterator.next());
        }     

     }
     catch(Exception e){}
  }
}</pre>
<h4><span id=""Output"">Output</span></h4>
<pre>Initial Set=[34, 22, 10, 30, 60]
Values after delete=[34, 22, 10, 60]
Retrieving Values
34
22
10
60</pre>
<h3 class=""""><span id=""4_HashSet"">HashSet</span></h3>
<ul>
<li>HashSet is an abstract implementation of Set interface. It creates a collection that uses a hash table for storing the elements.</li>
<li>A HashTable uses hashing mechanism to store the objects. Hashing means, a key is used to determine a unique value, called its hash code. Every hash code represents a data associated with key.</li>
</ul>
<p>For example, please refer the previous example block</p>
<h3 class=""""><span id=""5_LinkedHashSet"">LinkedHashSet</span></h3>
<ul>
<li>LinkedHashSet maintains a linked list of the entries in the set.</li>
<li>The elements are stored in the order in which they were inserted.</li>
<li>While retrieving the LinkedHashSet elements using an Iterator, the elements will be returned in the order in which they were inserted.</li>
</ul>
<p class=""""><span id=""Example_LinkedHashSetExamplejava""><b>Example: LinkedHashSetExample.java</b></span></p>
<pre class=""prettyprint lang-java"">import java.util.Iterator;
import java.util.LinkedHashSet;

public class LinkedHashSetExample {
	public static void main(String args[]) {
		int count[] = { 34, 22, 10, 60, 30, 22, 25 };
		LinkedHashSet&lt;Integer&gt; set = new LinkedHashSet&lt;Integer&gt;();

		try {
			for (int i = 0; i &lt; 7; i++) {
				set.add(count[i]);
			}
			System.out.println(""Initial Set="" + set);

			set.remove(30);
			System.out.println(""Values after delete="" + set);

			System.out.println(""Retrieving Values"");
			Iterator&lt;Integer&gt; iterator = set.iterator();
			while (iterator.hasNext()) {
				System.out.println(iterator.next());
			}

		} catch (Exception e) {
		}
	}
}</pre>
<h4><span id=""Output-2"">Output</span></h4>
<pre>Initial Set=[34, 22, 10, 60, 30, 25]
Values after delete=[34, 22, 10, 60, 25]
Retrieving Values
34
22
10
60
25</pre>
<h3 class=""""><span id=""6_TreeSet"">TreeSet</span></h3>
<p>TreeSet is a Set implementation that uses tree concept for storing object. It stores the elements in sorted order. Accessing TreeSet is quite faster than other set implementations.</p>
<h4><span id=""TreeSet_Example""><a href=""http://stacktips.com/java/java-treeset-example"" title=""Java TreeSet Example"">TreeSet Example</a></span></h4>
<h4><span id=""Example_TreeSetExamplejava"">Example: TreeSetExample.java</span></h4>
<pre class=""prettyprint lang-java"">import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;

public class TreeSetExample {

	public static void main(String args[]) {
		int count[] = { 14, 43, 10, 55, 30, 22,40};
		Set&lt;Integer&gt; set = new TreeSet&lt;Integer&gt;();
		try {
			for (int i = 0; i &lt; 6; i++) {
				set.add(count[i]);
			}
			System.out.println(""Intial Set="" + set);

			set.remove(30);
			System.out.println(""Values after delete="" + set);

			System.out.println(""Retrieving Values"");
			Iterator&lt;Integer&gt; iterator = set.iterator();
			while (iterator.hasNext()) {
				System.out.println(iterator.next());
			}

		} catch (Exception e) {
		}
	}
}</pre>
<h4><span id=""Output-3"">Output</span></h4>
<pre>Intial Set=[10, 14, 22, 30, 43, 55]
Values after delete=[10, 14, 22, 43, 55]
Retrieving Values
10
14
22
43
55</pre>
<h3 class=""""><span id=""7_List_Interface"">List Interface</span></h3>
<ul>
<li>A List is an ordered collection of elements</li>
<li>It may contain duplicate</li>
<li>The indexing of the elements is similar to Array. The first index of List is zero.</li>
<li>The elements can be manipulated based on their indexed positions</li>
<li>Common List implementations are ArrayList and LinkedList</li></ul>
<h3 class=""""><span id=""8ArrayList""><a href=""http://stacktips.com/java/how-to-sort-an-arraylist-in-java"" title=""How to sort an ArrayList in java"">ArrayList </a></span></h3>
<p>The ArrayList class extends AbstractList and implements the List interface. ArrayList supports dynamic arrays that can grow as needed. Array lists are created with an initial size. When this size is exceeded, the collection is automatically enlarged. When objects are removed, the array may be shrunk.</p>
<h4 class=""""><span id=""81Loop_ArrayList_In_Java""><a href=""http://stacktips.com/java/how-to-loop-arraylist-in-java"" title=""How To Loop ArrayList In Java"">Loop ArrayList In Java</a></span></h4>
<h4 class=""""><span id=""82Sort_an_ArrayList_in_java""><a href=""http://stacktips.com/java/how-to-sort-an-arraylist-in-java"" title=""How to sort an ArrayList in java"">Sort an ArrayList in java</a></span></h4>
<h3 class=""""><span id=""9_LinkedList"">LinkedList</span></h3>
<p>The LinkedList class extends AbstractSequentialList and implements the List interface. It provides a linked-list data structure.</p>
<pre class=""prettyprint lang-java"">import java.util.LinkedList;

public class LinkedListExample {
	public static void main(String args[]) {
		// create a linked list
		LinkedList&lt;String&gt; list = new LinkedList&lt;String&gt;();
		list.add(""F"");
		list.add(""E"");
		list.add(""D"");
		list.add(""E"");
		list.add(""C"");
		list.addLast(""G"");
		list.addFirst(""B"");
		list.add(1, ""E1"");
		System.out.println(""Values of LinkedList="" + list);

		// remove first and last elements
		list.removeFirst();
		list.removeLast();
		System.out.println(""After deleting first and last= "" + list);

		// remove elements from the linked list
		list.remove(""C"");
		list.remove(4);
		System.out.println(""After Delete"" + list);
	}
}</pre>
<p class=""""><span id=""Output-4""><b>Output</b></span></p>
<pre>Values of LinkedList=[B, E1, F, E, D, E, C, G]
After deleting first and last= [E1, F, E, D, E, C]
After Delete[E1, F, E, D]</pre>",0,"standard","post"
"Java Exception Tutorial","java-exceptions-tutorial","Exception is an event during program execution that prevents the program from continuing normally.
","LIVE","<h2>What is a Exception?</h2>
<p>Exception is an event during program execution that prevents the program from continuing normally. Exception is an error condition that changes the normal flow of control in a program. It is a signal that some unexpected condition has occurred in the program. Java classifies exceptions as Checked, Unchecked and Errors</p>
<h3>Un-Checked Exception</h3>
<p>Unchecked exceptions are usually caused by incorrect program code or logic such as Invalid parameters passed to a method. Unchecked exceptions are subclass of RuntimeException class. The application is not required to handle this exceptions as these should be recovered by correcting the program code. Example of unchecked exceptions are NumberFormatException, IllegalArgumentException.</p>
<h3>Checked Exception</h3>
<p>Checked Exception in Java is all those Exception which requires being catches and handled during compile time. If Compiler doesn’t see try or catch block handling a Checked Exception, it throws Compilation error. All exceptions except RuntimeException class is under checked exceptions category.</p>
<h2>Errors</h2>
<p>Errors represent critical errors, once occurs the system is not expected to recover from. Errors can be generated from mistake in program logic or design. Example OutOfMemoryError, StackOverFlowError, etc.</p>
<h2>Exception Class Hierarchy</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""exception-hierarchy-in-java"" class=""size-full wp-image-4311 aligncenter"" height=""392"" loading=""lazy"" src=""/media/uploads/articles/332/exception-hierarchy-in-java.png"" srcset="""" width=""614""/></a></p>
<h2>Handling Exception</h2>
<p>Java exception handling is built around throw-catch paradigm. To throw means an exception has occurred and catch means the exception is handled. If the exception is not caught then it will be propagated to the call stack until it is handled by the program. The statement or code that is proven to generate checked exception should be handled by program.</p>
<ul>
<li>Exception handling is done using try-catch block. Try block contains the code that might throw an exception. A try block can contain one or more lines of code. For each exception type a individual catch block will be specified. Instead of writing multiple catch block for different exceptions, we can write the generic exception handler in catch block using super class “Exception” type of object.</li>
<li>In the finally block you write the code that will be run whether or not an error has occurred. However this is optional. For example, if you get and exception while executing an database query, finally will be used to close the database connection.</li>
<li>If the exception is not handled, it can be propagated to the call stack. In a method if we are not handling exception using try/catch block we can declare the method using “throws” keyword.</li>
<li>A statement that might generate a checked exception that is declared by the method is considered “handled” and doesn’t need any try-catch block.</li>
<li>You may explicitly throw an checked exception using “throw” keyword. <span style=""font-size: 1em; line-height: 1.5;""> </span></li>
</ul>
",0,"standard","post"
"Vodafone Released Developer platform for app developers","vodafone-developer-platform-for-app-developers","Vodafone launched Vodafone Developer Portal, that helps application developers and publishers to seamless integration of Vodafone platform to their applications. 
","LIVE","<p>Vodafone launched Vodafone Developer Portal, that helps application developers and publishers to s<span style=""font-size: 1em; line-height: 1.5;"">eamless integration of Vodafone platform to their applications. Vodafone platform provides plug and play eco-system for all app developers and content service providers. The platform enables you to seamlessly connect with Vodafone and allow access to your app/service to millions of customers of Vodafone India.</span></p>
<h2>What is in it for you?</h2>
<p>Standard GSMA one Billing API which allows you to integrate with Vodafone billing system and charge our customers for the apps (in app purchases)/services you wish to offer. This helps you reach out to customers beyond the credit card users and provides better monetization opportunity</p>
<ol>
<li>You will have access to many more network assets (e.g. location, messaging etc.) in near future</li>
<li>Transparent and easy settlement process</li>
<li>Partner friendly standard commercial terms</li>
<li>Offer Sandbox environment for you to test out your applications before making them available commercially</li>
<li>Quick time to market due to simpler processes</li>
</ol>
<h2>Opportunities</h2>
<p>Here are some of the areas in which you can use our network assets to provide better services &amp; monetize</p>
<ol>
<li>Developing B2B apps/services for enterprises</li>
<li>Mobile advertising</li>
<li>Offer new age services like health and education</li>
<li>Utilize Subscriber information for better targeting</li>
<li>Location</li>
<li>Profiling of the customer (Device type, DND etc.)</li>
<li>Channels of communication like messaging</li>
</ol>
",0,"standard","post"
"How to Start One Activity From Another in Xamarin Android","how-to-start-one-activity-from-another-in-xamarin-android","In this example we’ll look at how to create multiple activities and communicate between them. In this example we will create two activities and pass data between them.
","LIVE","<p>In this example we will examine how to multiple activities communicate each other.</p>
<p>Android application is composed of multiple activities and they often communicate with each other by passing data. For example, lets say your application contains two activity Activity1 and Activity2. Activity1 is marked as launcher activity, which means it will be invoked automatically when user taps on the application icon from applications list. Note that, there can be at most one launcher activity throughout application. When user clicks on a button in Activity1, it will invoke Activity2.</p>
<h1>Starting activity in Xamarin.Android</h1>
<p>Xamarin Android provides easy to use startActivity method in activity context. The following code snippet will start Activity2 without passing any data</p>
<pre class=""prettyprint lang-cs""> StartActivity(typeof(Activity2));</pre>
<h1>Starting activity by passing arguments</h1>
<p>The above code block starts Activity2 without passing any data. However Xamarin android allows you to pass data from one activity to another using Intent bundle. All you have to do is to pass the instance of Intent to <code>startActivity()</code> method.</p>
<p>The Intent describes the activity to start and carries the data bundle to be sent to target activity. Intent can carry data types as key-value pairs called extras. The <code>putExtra()</code> method takes the key name in the first parameter and the value in the second parameter. Passing data between activities is limited to primitive data types. For object type you must use Parceable or Serilizable. For more information on the data types and intent, you can refer to official android documentation from below links.</p>
<p>http://developer.android.com/reference/android/content/Intent.html</p>
<p>http://developer.android.com/reference/android/os/Bundle.html</p>
<pre class=""prettyprint lang-cs"">Intent intent = new Intent(this, typeof(MainActivity2));
intent.PutExtra(""name"", ""Nilanchala"");
intent.PutExtra(""empid"", 1001);
StartActivity(intent);
</pre>
<p>Retrieving data bundles received</p>
<p>We can receive the above passed data in “Activity2” using the below code snippet</p>
<pre class=""prettyprint lang-cs"">string name = Intent.GetStringExtra(""name"");
int roll = Intent.GetIntegerExtra(""empid"");
</pre>
<p>Note that you must use the same keys such as <strong>“name”</strong> and <strong>“empid”</strong> while retrieving the values from Activity2.</p>
<h1>Receiving result back from Activity</h1>
<p>If you want to receive a result from the activity when it finishes, call <code>startActivityForResult()</code> instead of <code>startActivity()</code>. Your activity receives the result as a separate Intent object in your activity’s <code>onActivityResult()</code> callback.</p>
",0,"standard","post"
"Calculating factorial of number in Java","java-programming-calculating-factorial-of-number","This example below accepts number from user and calculates factorial using while loop and prints it. 
","LIVE","<p>This example below accepts number from user and calculates factorial using while loop and prints it.</p>
<pre class=""prettyprint lang-java"">import java.util.Scanner;

public class Factorial {

	public static void main(String[] args) {
		int number;
                int factorial = 1;

		Scanner input = new Scanner(System.in);

		//accept input from user
		System.out.println(""Enter A Number :"");
		number = input.nextInt();

		int i = 1;

		// while loops
		while (i &lt;= number) {
			factorial = factorial * i;
			i++;
		}

		System.out.println(""Factorial is = "" + factorial);
	}
}</pre>
<h3>Output</h3>
<pre>Enter A Number :
6
Factorial is = 720
</pre>
",0,"standard","post"
"Drawing a pyramid using loops in Java","java-programming-drawing-a-pyramid-using-loops","Below example prints star like pyramid structure using loop in java. 
","LIVE","<p>Below example prints star like pyramid structure using loop in java.</p>
<pre class=""prettyprint lang-java""> public class Pyramid {
	// void main
	public static void main(String[] args) {
		int depth = 10;
		int s = depth, m;

		for (int i = 1; i &lt; = depth; i++) {
			m = s;
			while (s &gt; 0) {
				System.out.print("" "");
				s--;
			}
			for (int j = 1; j &lt; = i; j++) {
				System.out.print(""* "");
			}
			System.out.print(""\n"");
			s = m - 1;
		}
	}
}
</pre>
<p>Output</p>
<pre>          * 
         * * 
        * * * 
       * * * * 
      * * * * * 
     * * * * * * 
    * * * * * * * 
   * * * * * * * * 
  * * * * * * * * * 
 * * * * * * * * * * 
</pre>
",0,"standard","post"
"Java Constructor Tutorial and Examples","java-constructor-tutorial","This is a tutorial explains how constructor works in Java. Constructor is an block of code which is executed before Object creation. Unlike methods constructors are getting called automatically.
","LIVE","
<h2><span id=""1_Introduction"">1. Introduction</span></h2>
<p>This is a tutorial explains how constructor works in Java. Constructor is an block of code which is executed before Object creation. Unlike methods constructors are getting called automatically.</p>
<h2><span id=""2_Properties_of_Constructors"">2. Properties of Constructors</span></h2>
<ol>
<li>Constructors are getting called automatically before you create an object</li>
<li>You class name and the constructor name should be same otherwise compiler treats that as an different method.</li>
<li>Constructor also can not have any return type by default it is void. However, we can still have an return statement that will return the control back from constructor.</li>
<li><span style=""font-size: 1em; line-height: 1.5;"">Since Constructor is </span>executed<span style=""font-size: 1em; line-height: 1.5;""> before object creation, the object initialization code is normally hosted inside constructor. </span></li>
<li><span style=""font-size: 1em; line-height: 1.5;"">Like you override an method, you can also overload an constructor in Java.</span></li>
</ol>
<h2><span id=""3_Constructor_and_Static"">3. Constructor and Static</span></h2>
<p>Static block is executed before constructor, because static members gets initialized during the class is getting loaded into memory but the<span style=""font-size: 1em; line-height: 1.5;""> constructors are executed only when you create instance of any object using new keyword.</span><span style=""font-size: 1em; line-height: 1.5;""> </span></p>
<h2><span id=""4_Declaring_Constructor_in_Java"">4. Declaring Constructor in Java</span></h2>
<p>In the below code snippet, we have declared two constructors in ConstructorDemo class. One without argument and other taking a String argument. A java class can have as many as overridden constructors.</p>
<pre class=""prettyprint lang-java"">
public class ConstructorDemo {
	public ConstructorDemo() {
		System.out.println(""Constructor with no argument"");
	}

	public ConstructorDemo(String name) {
		System.out.println(""Constructor with argument"");
	}

	public static void main(String args[]) {

		ConstructorDemo demo1 = new ConstructorDemo();
		ConstructorDemo demo2 = new ConstructorDemo(""Constructor Demo"");
	}
}
</pre>
<p><strong>Output</strong><br/>
Constructor with no argument<br/>
Constructor with argument</p>
<h2><span id=""5_Default_Constructor_in_Java"">5. Default Constructor in Java</span></h2>
<p>Usually we define constructor in almost every Class we declare in Java. If no explicit constructor is specified by Programmer, Java Compiler inserts a no argument constructor inside class. This is also called default Constructor in Java. If you define your own constructor, could be parameter or without any parameter, then compiler will not add default constructor. It is always a good practice to define a constructor.</p>
<h2><span id=""6_Calling_Constructor_and_Chaining"">6. Calling Constructor and Chaining</span></h2>
<p>Constructors cannot be called explicitly like methods in java. But a constructor can call another constructor of same class or its immediate super class. Calling one constructor from another constructor in Java is called Constructor chaining. You can keyword “this” for calling constructor of same class and keyword “super” for calling constructor of super class. Call to constructor must be on the first line of any constructor or else you will get compilation error.</p>
<h3><span id=""61_Calling_Class_Constructor"">6.1. Calling Class Constructor</span></h3>
<pre class=""prettyprint lang-java"">public class ConstructorDemo {
	public ConstructorDemo() {
		System.out.println(""Constructor with no argument"");
	}

	public ConstructorDemo(String name) {
		this();
		System.out.println(""Constructor with argument"");
	}

	public static void main(String args[]) {
		ConstructorDemo demo = new ConstructorDemo(""Constructor Demo"");
	}
}</pre>
<p><strong>Output</strong><br/>
Constructor with no argument<br/>
Constructor with argument<br/>
In this above example, we are calling one constructor from another constructor of same class using this keyword. If you observe the output above, it is first calling the no argument constructor and then calls he constructor with argument.</p>
<h3><span id=""62_Calling_Super_Class_Constructor"">6.2. Calling Super Class Constructor</span></h3>
<pre class=""prettyprint lang-java"">public class ConstructorDemoSuper {

	public ConstructorDemoSuper() {
		System.out.println(""Super Class Constructor with no argument"");
	}

	public ConstructorDemoSuper(String name) {
		System.out.println(""Super Class Constructor with argument"");
	}
}

public class ConstructorDemo extends ConstructorDemoSuper {
	public ConstructorDemo() {
		super();
		System.out.println(""Constructor with no argument"");
	}

	public ConstructorDemo(String name) {
		super(name);
		System.out.println(""Constructor with argument"");
	}

	public static void main(String args[]) {
		ConstructorDemo demo1 = new ConstructorDemo(""Constructor Demo"");
		ConstructorDemo demo2 = new ConstructorDemo(""Constructor Demo"");
	}
}</pre>
<p><strong>Output</strong><br/>
Super Class Constructor with argument<br/>
Constructor with argument<br/>
Super Class Constructor with argument<br/>
Constructor with argument</p>
<h2><span id=""7_Constructor_Access_Modifiers"">7. Constructor Access Modifiers</span></h2>
<p>Java has four basic modifiers, public, projected, private or default. You can use any of these access modifiers to constructor. You can prevent a to get initialize by other class by defining its constructor as private. Using Private constructor, only the same class can create instance of it. This is an typical example of most common singleton design pattern.</p>
",0,"standard","post"
"CountDownLatch and Java Concurrency Example","countdownlatch-and-java-concurrency-example","CountDownLatch is one of the most usesful Java concept that helps tracking multiple threads execution. This is useful when you want one or more threads to wait until a set of operations being performed in other threads completes.","LIVE","<p>CountDownLatch is one of the most useful Java concept that helps tracking multiple threads execution. This is useful when you want one or more threads to wait until a set of operations being performed in other threads completes.</p>
<p>CountDownLatch helps in achieving maximum parallelism between multiple threads. Lets take a case here; sometimes you want to start multiple threads at the same time in parallel to main thread and once all the threads complete, you have to perform some actions on your main thread. This can be done easily if we create a CountDownLatch.</p>
<h2 class="""">How it works?</h2>
<p>A CountDownLatch is initialized with a given N count. The await methods block the current thread execution until the count reaches zero. Once a task/thread completes the countDown() method will be called which results N– for every call. Once N size reaches zero, the thread which was awaiting returns immediately. CountDownLatch doesn't allow to change the count at runtime. i.e. once initialized it cannot be increased or reset.</p>
<p>Create <code>CountDownLatch</code> and initialize with the count N. Other worker threads must have reference of latch object, because they will need to notify the CountDownLatch object that they have completed their task. </p><p>This notification is done by countDown() method. Each time we call countDown() method, it decreases count of N. When all N threads have called this method, count reaches to zero and main thread is allowed to resume its execution.</p>
<h3 class="""">CountDownLatch Example</h3>
<p>In this example, we will download multiple images using worker thread. Once all the download complete, I expect my main thread to resume its execution. This example is a more simplified version just for your easy understanding.</p>
<p class="""">First lets solve this problem without using CountDownLatch</p>
<p class=""""><b>CountDownLatchTest.java</b></p>
<pre class=""prettyprint lang-java"">import java.util.concurrent.CountDownLatch;

public class CountDownLatchTest {
	private static int N = 6;

	public static void main(String[] args) {		
		try {
			for (int i = 0; i &lt; N; i++) {
				new Thread(new MyWorker()).start();
			}
			
			System.out.println(""*** Main Thread in Action ***"");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}</pre>
<p class=""""><b>MyWorker.java</b></p>
<pre class=""prettyprint lang-java"">import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.concurrent.CountDownLatch;

public class MyWorker implements Runnable {

	public MyWorker() {		
	}

	@Override
	public void run() {
		try {
			URL url = new URL(
					""http://3rdbillion.net/wp-content/uploads/2013/11/35e7e6728456fed40f4f1b27d5d41c8513.jpg"");
			InputStream in = new BufferedInputStream(url.openStream());
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			byte[] buf = new byte[1024];
			int n = 0;
			while (-1 != (n = in.read(buf))) {
				out.write(buf, 0, n);
			}
			out.close();
			in.close();
			byte[] response = out.toByteArray();
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println(""*** Worker Thread ****"");

	}
}</pre>
<p>In the above code snippet we have used multiple threads to download an image. (In this example, the downloaded image is only for demonstration, not being used for anything). Execute the above program, you will notice that it will results the output something similar as below</p>
<p class=""""><b>Output</b></p>
<pre>*** Main Thread in Action ***
*** Worker Thread ****
*** Worker Thread ****
*** Worker Thread ****
*** Worker Thread ****
*** Worker Thread ****
*** Worker Thread ****</pre>
<h3>Using CountDownLatch Example</h3>
<p class=""""><b>CountDownLatchTest.java</b></p>
<pre class=""prettyprint lang-java"">import java.util.concurrent.CountDownLatch;

public class CountDownLatchTest {

	private static CountDownLatch _latch;
	private static int N = 6;

	public static void main(String[] args) {
		_latch = new CountDownLatch(N);

		try {
			for (int i = 0; i &lt; N; i++) {
				new Thread(new MyWorker(_latch)).start();
			}

			_latch.await();

			System.out.println(""*** Main Thread in Action ***"");

		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}</pre>
<p class=""""><b>MyWorker.java</b></p>
<pre class=""prettyprint lang-java"">import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.concurrent.CountDownLatch;

public class MyWorker implements Runnable {
	private CountDownLatch _latch = null;

	public MyWorker(CountDownLatch _latch) {
		this._latch = _latch;
	}

	@Override
	public void run() {
		try {

			URL url = new URL(
					""http://3rdbillion.net/wp-content/uploads/2013/11/35e7e6728456fed40f4f1b27d5d41c8513.jpg"");
			InputStream in = new BufferedInputStream(url.openStream());
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			byte[] buf = new byte[1024];
			int n = 0;
			while (-1 != (n = in.read(buf))) {
				out.write(buf, 0, n);
			}

			out.close();
			in.close();

			byte[] response = out.toByteArray();
		} catch (IOException e) {
			e.printStackTrace();
		}

		System.out.println(""*** Worker Thread ****"");

		_latch.countDown();
	}
}</pre>
<p class=""""><b>Output</b></p>
<pre>*** Worker Thread ****
*** Worker Thread ****
*** Worker Thread ****
*** Worker Thread ****
*** Worker Thread ****
*** Worker Thread ****
*** Main Thread in Action ***</pre>
<p>Notice the output above, the main thread was awaiting until all other worker threads completes their execution.<br/>
If you like reading this post, please don’t forget to hit like or share with your friends!</p>",0,"standard","post"
"Using Facebook SDK in Android Example","using-facebook-sdk-in-android-example","This tutorial explains how to how to use Facebook SDK APIs in Android. This tutorial explains Login to Facebook, Share status message to Facebook wall and Share Image to Facebook wall using Facebook SDK.
","LIVE","<p>This tutorial explains how to how to use Facebook SDK APIs in Android. This tutorial allows user to login to Facebook first and then allows to do following things</p>
<ol>
<li>Login to Facebook</li>
<li>Share status message to Facebook wall</li>
<li>Share Image to Facebook wall</li>
</ol>
<p>This example using Facebook SDK 3.0 for Android which is available for free download from the Facebook’s developer console. This Facebook SDK comes with almost all the functionality of the native Facebook app to your own Android app. Follow the below steps</p>
<h2>Creating an App on Facebook</h2>
<p>Before integrating Facebook SDK to your android app you have to create a Facebook app on your Facebook developer console. Visit <strong><a href=""https://developers.facebook.com/apps"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""https://developers.facebook.com/apps"">Facebook developer console</a></strong> and create a new Facebook application. Once you create the application you will get an app id, which is used to uniquely distinguish your application from others. This AppID will be used along with each of the request we make to Facebook server. Don’t get panic, sometime it takes some time to make your application go live.</p>
<h2>Using Facebook SDK in Android</h2>
<ol>
<li>Now you have created an Facebook app in developer console and you are ready to start with our Android app. You may create a new project or import an existing one.</li>
<li>Import Facebook SDK to your eclipse workspace and make sure it builds successfully. Once it builds we have to attach the Facebook library project to your Android project. The easiest way to attach the SDK is to add it as an Android library by going to the project’s properties.</li>
<li>Now do the following changes to your application manifest file. Put the following code before &lt;/application&gt; tag. Make sure you are using your own AppID obtained from Facebook developer console.</li>
</ol>
<pre class=""prettyprint lang-xml"">&lt;activity android:name=""com.facebook.LoginActivity""
            android:theme=""@android:style/Theme.Translucent.NoTitleBar"" /&gt;

&lt;meta-data android:name=""com.facebook.sdk.ApplicationId""
            android:value=""@string/app_id"" /&gt;</pre>
<p class=""definition"">Note: Make sure that you have give android.permission.INTERNET permission in your application manifest file.</p>
<h3>Activity Layout</h3>
<p>Now define layout for your activity class. In this example, We have three sample buttons.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:facebook=""http://schemas.android.com/apk/res-auto""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:gravity=""center_horizontal""
    android:orientation=""vertical""
    android:padding=""20dp"" &gt;

    &lt;com.facebook.widget.LoginButton
        android:id=""@+id/fb_login_button""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_marginTop=""5dp""
        facebook:confirm_logout=""false""
        facebook:fetch_user_info=""true"" /&gt;

    &lt;TextView
        android:id=""@+id/user_name""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center""
        android:layout_margin=""10dp""
        android:textSize=""18sp"" /&gt;

    &lt;Button
        android:id=""@+id/update_status""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:text=""@string/update_status"" /&gt;

    &lt;Button
        android:id=""@+id/post_image""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:text=""@string/post_image"" /&gt;

&lt;/LinearLayout&gt;</pre>
<h3>Activity Java Class</h3>
<pre class=""prettyprint lang-java"">
public class FBActivity extends FragmentActivity {
	private LoginButton loginBtn;
	private Button postImageBtn;
	private Button updateStatusBtn;

	private TextView userName;
	private UiLifecycleHelper uiHelper;
	private static final List&lt;String&gt; PERMISSIONS = Arrays.asList(""publish_actions"");
	private static String message = ""Sample status posted from android app"";

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		uiHelper = new UiLifecycleHelper(this, statusCallback);
		uiHelper.onCreate(savedInstanceState);
		setContentView(R.layout.activity_facebook);

		userName = (TextView) findViewById(R.id.user_name);
		loginBtn = (LoginButton) findViewById(R.id.fb_login_button);
		loginBtn.setUserInfoChangedCallback(new UserInfoChangedCallback() {
			@Override
			public void onUserInfoFetched(GraphUser user) {
				if (user != null) {
					userName.setText(""Hello, "" + user.getName());
				} else {
					userName.setText(""You are not logged"");
				}
			}
		});

		postImageBtn = (Button) findViewById(R.id.post_image);
		postImageBtn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				postImage();
			}
		});

		updateStatusBtn = (Button) findViewById(R.id.update_status);
		updateStatusBtn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
			}
		});
		buttonsEnabled(false);
	}

	private Session.StatusCallback statusCallback = new Session.StatusCallback() {
		@Override
		public void call(Session session, SessionState state, Exception exception) {
			if (state.isOpened()) {
				buttonsEnabled(true);
				Log.d(""FacebookSampleActivity"", ""Facebook session opened"");
			} else if (state.isClosed()) {
				buttonsEnabled(false);
				Log.d(""FacebookSampleActivity"", ""Facebook session closed"");
			}
		}
	};

	public void buttonsEnabled(boolean isEnabled) {
		postImageBtn.setEnabled(isEnabled);
		updateStatusBtn.setEnabled(isEnabled);
	}

	public void postImage() {
		if (checkPermissions()) {
			Bitmap img = BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher);
			Request uploadRequest = Request.newUploadPhotoRequest(
					Session.getActiveSession(), img, new Request.Callback() {
						@Override
						public void onCompleted(Response response) {
							Toast.makeText(FBActivity.this,
									""Photo uploaded successfully"",
									Toast.LENGTH_LONG).show();
						}
					});
			uploadRequest.executeAsync();
		} else {
			requestPermissions();
		}
	}

	public void postStatusMessage() {
		if (checkPermissions()) {
			Request request = Request.newStatusUpdateRequest(
					Session.getActiveSession(), message,
					new Request.Callback() {
						@Override
						public void onCompleted(Response response) {
							if (response.getError() == null)
								Toast.makeText(FBActivity.this,
										""Status updated successfully"",
										Toast.LENGTH_LONG).show();
						}
					});
			request.executeAsync();
		} else {
			requestPermissions();
		}
	}

	public boolean checkPermissions() {
		Session s = Session.getActiveSession();
		if (s != null) {
			return s.getPermissions().contains(""publish_actions"");
		} else
			return false;
	}

	public void requestPermissions() {
		Session s = Session.getActiveSession();
		if (s != null)
			s.requestNewPublishPermissions(new Session.NewPermissionsRequest(
					this, PERMISSIONS));
	}

	@Override
	public void onResume() {
		super.onResume();
		uiHelper.onResume();
		buttonsEnabled(Session.getActiveSession().isOpened());
	}

	@Override
	public void onPause() {
		super.onPause();
		uiHelper.onPause();
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		uiHelper.onDestroy();
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		uiHelper.onActivityResult(requestCode, resultCode, data);
	}

	@Override
	public void onSaveInstanceState(Bundle savedState) {
		super.onSaveInstanceState(savedState);
		uiHelper.onSaveInstanceState(savedState);
	}

}</pre>
<h3>Output</h3>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Facebook Android Example"" class=""aligncenter size-medium wp-image-4124"" height=""450"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/339/Facebook-Android-Example-620x450.png"" srcset="""" width=""620""/></a></p>
",0,"standard","post"
"Android Popup Menu Example","android-popup-menu-example","In example explains how to create Popup menu in android. Popup menu is used to display the global actions. Popup menu is an overflow menu like Spinner actions. PopupMenu is available from API level 11 (Android 3.0).
","LIVE","<p>In example explains how to create Popup menu in android. Popup menu is used to display the global actions. Popup menu is an overflow menu like Spinner actions. PopupMenu is available from API level 11 (Android 3.0).</p>
<p><strong>activity_main.xml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""#fcfcfc"" &gt;

    &lt;Button
        android:id=""@+id/btn_click""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""10dp""
        android:background=""#176CEC""
        android:text=""SHOW POPUP""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:textColor=""#fff""
        android:textStyle=""bold"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<p><strong>popup_menu.xml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;menu xmlns:android=""http://schemas.android.com/apk/res/android"" &gt;

    &lt;item
        android:id=""@+id/item_movies""
        android:showAsAction=""ifRoom|withText""
        android:title=""Movies""
        android:visible=""true""/&gt;
    &lt;item
        android:id=""@+id/item_music""
        android:showAsAction=""ifRoom|withText""
        android:title=""Music""
        android:visible=""true""/&gt;
    &lt;item
        android:id=""@+id/item_comedy""
        android:showAsAction=""ifRoom|withText""
        android:title=""Comedy""
        android:visible=""true""/&gt;

&lt;/menu&gt;</pre>
<p><strong>PopMenuActivity.java</strong></p>
<pre class=""prettyprint lang-java"">import android.app.Activity;
import android.os.Bundle;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.PopupMenu;
import android.widget.PopupMenu.OnMenuItemClickListener;
import android.widget.Toast;

public class PopMenuActivity extends Activity implements OnMenuItemClickListener {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		findViewById(R.id.btn_click).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View view) {
				PopupMenu popupMenu = new PopupMenu(PopMenuActivity.this, view);
				popupMenu.setOnMenuItemClickListener(PopMenuActivity.this);
				popupMenu.inflate(R.menu.popup_menu);
				popupMenu.show();
			}
		});
	}

	public boolean onMenuItemClick(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.item_comedy:
			Toast.makeText(this, ""Comedy Clicked"", Toast.LENGTH_SHORT).show();
			return true;
		case R.id.item_movies:
			Toast.makeText(this, ""Movies Clicked"", Toast.LENGTH_SHORT).show();
			return true;
		case R.id.item_music:
			Toast.makeText(this, ""Music Clicked"", Toast.LENGTH_SHORT).show();
			return true;		
		}
	}
}</pre>
<p><strong>Output</strong><br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Popup Example in Android"" class=""aligncenter size-medium wp-image-4147"" height=""451"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/340/Popup-Example-in-Android-620x451.png"" srcset="""" width=""620""/></a></p>
",0,"standard","post"
"Share File to Dropbox in Android Example","share-file-to-dropbox-in-android-example","In this example we will see how to use Dropbox API to share Share file to Dropbox in from your native Android application. 
","LIVE","<p>In this example we will see how to use Dropbox API to share file to Dropbox in from your native Android application. </p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Share file to Dropbox in Android Example"" class=""aligncenter size-full wp-image-4128"" height=""462"" loading=""lazy"" sizes=""(max-width: 807px) 100vw, 807px"" src=""/media/uploads/articles/341/Share-file-to-Dropbox-in-Android-Example-e1435937309632.png"" srcset="""" width=""807""/></a></p>
<h1>1. Create App on Dropbox</h1>
<p>For integrating Dropbox services to your Android application, you need to use the Dropbox SDK. The SDK allows you to authenticate and share file on Dropbox. Before we begin, we need to download official  <a href=""https://www.dropbox.com/developers/core/sdks/android"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""https://www.dropbox.com/developers/core/sdks/android"">Dropbox API</a> from the link. Once download is complete, extract the file on your computer drive. Notice that the downloaded Zip file will have sample and library.</p>
<p>Now, let us go ahead and create a new app on Dropbox developer console. Visit <a href=""https://www.dropbox.com/developers/apps"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""https://www.dropbox.com/developers/apps"">Dropbox developer console</a> and create a new application. Once the application is setup, you will get an <strong>App key</strong> and <strong>App Secret </strong>that is required for integration.</p>
<h1>2. Using Dropbox SDK</h1>
<p>Now do the following changes to your application manifest file. Put the following code before &lt;/application&gt; tag. Make sure you are using your own AppID obtained from Facebook developer console.</p>
<pre class=""prettyprint lang-xml"">&lt;activity
            android:name=""com.dropbox.client2.android.AuthActivity""
            android:configChanges=""orientation|keyboard""
            android:launchMode=""singleTask"" &gt;
            &lt;intent-filter&gt;
                <strong>&lt;!-- Change this to be db- followed by your app key --&gt;
                &lt;data android:scheme=""db-yatqpqyb9lsh0tu"" /&gt;</strong>

                &lt;action android:name=""android.intent.action.VIEW"" /&gt;
                &lt;category android:name=""android.intent.category.BROWSABLE"" /&gt;
                &lt;category android:name=""android.intent.category.DEFAULT"" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;</pre>
<blockquote><p><strong>Note:</strong> Make sure that you have to declare android.permission.INTERNET permission in your application manifest file.</p></blockquote>
<h1>3. Declare Activity Layout</h1>
<p>Now define layout for your activity class. In this example, We have three sample buttons one for login/logout , upload and view files.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:layout_marginTop=""20dp""
    android:gravity=""center_horizontal""
    android:orientation=""vertical"" &gt;

    &lt;Button
        android:id=""@+id/dropbox_login""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""10dp""
        android:background=""#176CEC""
        android:text=""Login to Dropbox""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:textColor=""#fff""
        android:textStyle=""bold"" /&gt;

    &lt;Button
        android:id=""@+id/upload_file""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""10dp""
        android:background=""#176CEC""
        android:text=""Upload File to Dropbox""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:textColor=""#fff""
        android:textStyle=""bold"" /&gt;

    &lt;Button
        android:id=""@+id/list_files""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""10dp""
        android:background=""#176CEC""
        android:text=""List All Files""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:textColor=""#fff""
        android:textStyle=""bold"" /&gt;

    &lt;ScrollView
        android:layout_width=""fill_parent""
        android:layout_height=""match_parent""
        android:layout_margin=""10dp"" &gt;

        &lt;LinearLayout
            android:id=""@+id/container_files""
            android:layout_width=""match_parent""
            android:layout_height=""wrap_content""
            android:orientation=""vertical"" &gt;
        &lt;/LinearLayout&gt;
    &lt;/ScrollView&gt;
&lt;/LinearLayout&gt;
</pre>
<h1>4. Activity Java Code</h1>
<pre class=""prettyprint lang-java"">package com.javatechig.dropboxsample;

import java.util.ArrayList;
import android.app.Activity;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.dropbox.client2.DropboxAPI;
import com.dropbox.client2.android.AndroidAuthSession;
import com.dropbox.client2.session.AccessTokenPair;
import com.dropbox.client2.session.AppKeyPair;
import com.dropbox.client2.session.Session.AccessType;
import com.dropbox.client2.session.TokenPair;

public class DropboxActivity extends Activity implements OnClickListener {
	private DropboxAPI&lt;AndroidAuthSession&gt; dropbox;
	private final static String FILE_DIR = ""/DropboxSample/"";
	private final static String DROPBOX_NAME = ""dropbox_prefs"";
	private final static String ACCESS_KEY = ""yatqpqyb9lsh0tu"";
	private final static String ACCESS_SECRET = ""9siqdkoo44y3jlr"";
	private boolean isLoggedIn;
	private Button logIn;
	private Button uploadFile;
	private Button listFiles;
	private LinearLayout container;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_dropbox);

		logIn = (Button) findViewById(R.id.dropbox_login);
		logIn.setOnClickListener(this);
		uploadFile = (Button) findViewById(R.id.upload_file);
		uploadFile.setOnClickListener(this);
		listFiles = (Button) findViewById(R.id.list_files);
		listFiles.setOnClickListener(this);
		container = (LinearLayout) findViewById(R.id.container_files);

		loggedIn(false);
		AndroidAuthSession session;
		AppKeyPair pair = new AppKeyPair(ACCESS_KEY, ACCESS_SECRET);

		SharedPreferences prefs = getSharedPreferences(DROPBOX_NAME, 0);
		String key = prefs.getString(ACCESS_KEY, null);
		String secret = prefs.getString(ACCESS_SECRET, null);

		if (key != null &amp;&amp; secret != null) {
			AccessTokenPair token = new AccessTokenPair(key, secret);
			session = new AndroidAuthSession(pair, AccessType.APP_FOLDER, token);
		} else {
			session = new AndroidAuthSession(pair, AccessType.APP_FOLDER);
		}
		dropbox = new DropboxAPI&lt;AndroidAuthSession&gt;(session);
	}

	@Override
	protected void onResume() {
		super.onResume();

		AndroidAuthSession session = dropbox.getSession();
		if (session.authenticationSuccessful()) {
			try {
				session.finishAuthentication();
				TokenPair tokens = session.getAccessTokenPair();
				SharedPreferences prefs = getSharedPreferences(DROPBOX_NAME, 0);
				Editor editor = prefs.edit();
				editor.putString(ACCESS_KEY, tokens.key);
				editor.putString(ACCESS_SECRET, tokens.secret);
				editor.commit();
				loggedIn(true);
			} catch (IllegalStateException e) {
				Toast.makeText(this, ""Error during Dropbox authentication"",
						Toast.LENGTH_SHORT).show();
			}
		}
	}

	public void loggedIn(boolean isLogged) {
		isLoggedIn = isLogged;
		uploadFile.setEnabled(isLogged);
		listFiles.setEnabled(isLogged);
		logIn.setText(isLogged ? ""Log out"" : ""Log in"");
	}

	private final Handler handler = new Handler() {
		public void handleMessage(Message msg) {
			ArrayList&lt;String&gt; result = msg.getData().getStringArrayList(""data"");
			for (String fileName : result) {
				Log.i(""ListFiles"", fileName);
				TextView tv = new TextView(DropboxActivity.this);
				tv.setText(fileName);
				container.addView(tv);
			}
		}
	};

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.dropbox_login:
			if (isLoggedIn) {
				dropbox.getSession().unlink();
				loggedIn(false);
			} else {
				dropbox.getSession().startAuthentication(DropboxActivity.this);
			}

			break;
		case R.id.list_files:
			ListDropboxFiles list = new ListDropboxFiles(dropbox, FILE_DIR,
					handler);
			list.execute();
			break;
		case R.id.upload_file:
			UploadFileToDropbox upload = new UploadFileToDropbox(this, dropbox,
					FILE_DIR);
			upload.execute();
			break;
		default:
			break;
		}
	}
}
</pre>
<h1>5. Upload File to Dropbox</h1>
<pre class=""prettyprint lang-java"">package com.javatechig.dropboxsample;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import android.content.Context;
import android.os.AsyncTask;
import android.widget.Toast;
import com.dropbox.client2.DropboxAPI;
import com.dropbox.client2.exception.DropboxException;

public class UploadFileToDropbox extends AsyncTask&lt;Void, Void, Boolean&gt; {

	private DropboxAPI&lt;?&gt; dropbox;
	private String path;
	private Context context;

	public UploadFileToDropbox(Context context, DropboxAPI&lt;?&gt; dropbox,
			String path) {
		this.context = context.getApplicationContext();
		this.dropbox = dropbox;
		this.path = path;
	}

	@Override
	protected Boolean doInBackground(Void... params) {
		final File tempDir = context.getCacheDir();
		File tempFile;
		FileWriter fr;
		try {
			tempFile = File.createTempFile(""file"", "".txt"", tempDir);
			fr = new FileWriter(tempFile);
			fr.write(""Sample text file created for demo purpose. You may use some other file format for your app "");
			fr.close();

			FileInputStream fileInputStream = new FileInputStream(tempFile);
			dropbox.putFile(path + ""textfile.txt"", fileInputStream,
					tempFile.length(), null, null);
			tempFile.delete();
			return true;
		} catch (IOException e) {
			e.printStackTrace();
		} catch (DropboxException e) {
			e.printStackTrace();
		}

		return false;
	}

	@Override
	protected void onPostExecute(Boolean result) {
		if (result) {
			Toast.makeText(context, ""File Uploaded Sucesfully!"",
					Toast.LENGTH_LONG).show();
		} else {
			Toast.makeText(context, ""Failed to upload file"", Toast.LENGTH_LONG)
					.show();
		}
	}
}
</pre>
<h1>6. List Dropbox Files</h1>
<pre class=""prettyprint lang-java"">package com.javatechig.dropboxsample;

import java.util.ArrayList;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import com.dropbox.client2.DropboxAPI;
import com.dropbox.client2.DropboxAPI.Entry;
import com.dropbox.client2.exception.DropboxException;

public class ListDropboxFiles extends AsyncTask&lt;Void, Void, ArrayList&lt;String&gt;&gt; {

	private DropboxAPI&lt;?&gt; dropbox;
	private String path;
	private Handler handler;

	public ListDropboxFiles(DropboxAPI&lt;?&gt; dropbox, String path, Handler handler) {
		this.dropbox = dropbox;
		this.path = path;
		this.handler = handler;
	}

	@Override
	protected ArrayList&lt;String&gt; doInBackground(Void... params) {
		ArrayList&lt;String&gt; files = new ArrayList&lt;String&gt;();
		try {
			Entry directory = dropbox.metadata(path, 1000, null, true, null);
			for (Entry entry : directory.contents) {
				files.add(entry.fileName());
			}
		} catch (DropboxException e) {
			e.printStackTrace();
		}

		return files;
	}

	@Override
	protected void onPostExecute(ArrayList&lt;String&gt; result) {
		Message msgObj = handler.obtainMessage();
		Bundle b = new Bundle();
		b.putStringArrayList(""data"", result);
		msgObj.setData(b);
		handler.sendMessage(msgObj);

	}
}

</pre>
",0,"standard","post"
"How to Drag a View in Android","how-to-drag-a-view-in-android","In this example we will see how to drag and ImageView in android on touch drag event.
","LIVE","<p>In this example we will see how to drag and ImageView in android on touch drag event.</p>
<p><strong>Creating View layout</strong></p>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/root""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:padding=""@dimen/activity_vertical_margin"" &gt;

    &lt;ImageView
        android:id=""@+id/imageView""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentTop=""true""
        android:layout_centerHorizontal=""true""
        android:layout_marginTop=""124dp""
        android:src=""@drawable/ic_launcher"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<p><strong>Activity Java code</strong></p>
<pre class=""prettyprint lang-java"">package com.javatechig;

import android.app.Activity;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;

public class MainActivity extends Activity implements View.OnTouchListener {

	private ImageView mImageView;
	private ViewGroup mRrootLayout;
	private int _xDelta;
	private int _yDelta;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		mRrootLayout = (ViewGroup) findViewById(R.id.root);
		mImageView = (ImageView) mRrootLayout.findViewById(R.id.imageView);

		RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(150, 150);
		mImageView.setLayoutParams(layoutParams);
		mImageView.setOnTouchListener(this);
	}

	public boolean onTouch(View view, MotionEvent event) {
		final int X = (int) event.getRawX();
		final int Y = (int) event.getRawY();
		switch (event.getAction() &amp; MotionEvent.ACTION_MASK) {
		case MotionEvent.ACTION_DOWN:
			RelativeLayout.LayoutParams lParams = (RelativeLayout.LayoutParams) view.getLayoutParams();
			_xDelta = X - lParams.leftMargin;
			_yDelta = Y - lParams.topMargin;
			break;
		case MotionEvent.ACTION_UP:
			break;
		case MotionEvent.ACTION_POINTER_DOWN:
			break;
		case MotionEvent.ACTION_POINTER_UP:
			break;
		case MotionEvent.ACTION_MOVE:
			RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) view
					.getLayoutParams();
			layoutParams.leftMargin = X - _xDelta;
			layoutParams.topMargin = Y - _yDelta;
			layoutParams.rightMargin = -250;
			layoutParams.bottomMargin = -250;
			view.setLayoutParams(layoutParams);
			break;
		}
		mRrootLayout.invalidate();
		return true;
	}
}
</pre>
<p><strong>Output</strong></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Drag a View in Android"" class=""aligncenter size-full wp-image-4117"" height=""454"" loading=""lazy"" src=""/media/uploads/articles/342/Drag-a-View-in-Android.png"" srcset="""" width=""536""/></a></p>
",0,"standard","post"
"How to Create an Android ListView with Section Header","listview-with-section-header-in-android","In this example we will show how to create a ListView with section header.
","LIVE","<p>In this example we will show how to create a ListView with section header. This involves following steps</p>
<ol>
<li>Create two custom layout for your List header and List row</li>
<li>Create your custom adapter for ListView</li>
<li>Instantiate ListView in your activity</li>
</ol>
<h3>Create Custom layout for List header and List row</h3>
<p><strong>snippet_item1.xml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:gravity=""center_vertical"" &gt;

    &lt;TextView
        android:id=""@+id/text""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:background=""#FFF""
        android:gravity=""center_vertical""
        android:padding=""5dp""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:textColor=""#FF000000"" /&gt;

&lt;/LinearLayout&gt;</pre>
<p><strong>snippet_item2.xml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:background=""#2F2F2F""
    android:gravity=""center_vertical"" &gt;

    &lt;TextView
        android:id=""@+id/textSeparator""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:gravity=""center""
        android:padding=""8dp""
        android:text=""""
        android:textAllCaps=""true""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:textColor=""#FFF""
        android:textStyle=""bold""
        android:visibility=""visible"" /&gt;

&lt;/LinearLayout&gt;</pre>
<h3>Create your custom adapter for ListView</h3>
<p>You must override getViewTypeCount() method. This method returns the number of types of Views that will be created by getView method.</p>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.util.ArrayList;
import java.util.TreeSet;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;

class CustomAdapter extends BaseAdapter {

	private static final int TYPE_ITEM = 0;
	private static final int TYPE_SEPARATOR = 1;

	private ArrayList&lt;String&gt; mData = new ArrayList&lt;String&gt;();
	private TreeSet&lt;Integer&gt; sectionHeader = new TreeSet&lt;Integer&gt;();

	private LayoutInflater mInflater;

	public CustomAdapter(Context context) {
		mInflater = (LayoutInflater) context
				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	}

	public void addItem(final String item) {
		mData.add(item);
		notifyDataSetChanged();
	}

	public void addSectionHeaderItem(final String item) {
		mData.add(item);
		sectionHeader.add(mData.size() - 1);
		notifyDataSetChanged();
	}

	@Override
	public int getItemViewType(int position) {
		return sectionHeader.contains(position) ? TYPE_SEPARATOR : TYPE_ITEM;
	}

	@Override
	public int getViewTypeCount() {
		return 2;
	}

	@Override
	public int getCount() {
		return mData.size();
	}

	@Override
	public String getItem(int position) {
		return mData.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	public View getView(int position, View convertView, ViewGroup parent) {
		ViewHolder holder = null;
		int rowType = getItemViewType(position);

		if (convertView == null) {
			holder = new ViewHolder();
			switch (rowType) {
			case TYPE_ITEM:
				convertView = mInflater.inflate(R.layout.snippet_item1, null);
				holder.textView = (TextView) convertView.findViewById(R.id.text);
				break;
			case TYPE_SEPARATOR:
				convertView = mInflater.inflate(R.layout.snippet_item2, null);
				holder.textView = (TextView) convertView.findViewById(R.id.textSeparator);
				break;
			}
			convertView.setTag(holder);
		} else {
			holder = (ViewHolder) convertView.getTag();
		}
		holder.textView.setText(mData.get(position));

		return convertView;
	}

	public static class ViewHolder {
		public TextView textView;
	}

}</pre>
<h3>Instantiate ListView in your activity</h3>
<pre class=""prettyprint lang-java"">package com.javatechig;

import android.app.ListActivity;
import android.os.Bundle;

public class SectionListView extends ListActivity {

	private CustomAdapter mAdapter;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		mAdapter = new CustomAdapter(this);
		for (int i = 1; i &lt; 30; i++) {
			mAdapter.addItem(""Row Item #"" + i);
			if (i % 4 == 0) {
				mAdapter.addSectionHeaderItem(""Section #"" + i);
			}
		}
		setListAdapter(mAdapter);
	}

}</pre>
<h3>Output</h3>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""ListView with section header in android"" class=""aligncenter size-full wp-image-4111"" height=""443"" loading=""lazy"" src=""/media/uploads/articles/343/ListView-with-section-header-in-android.png"" srcset="""" width=""592""/></a></p>
",0,"standard","post"
"Java TreeSet Example","java-treeset-example","In the following example, we will see how to use TreeSet Collection in java. This example includes, How to create an TreeSet, How to display element of Treeset, Adding data to TreeSet and Deleting data from TreeSet.
","LIVE","<p>In the following example, we will see how to use TreeSet Collection in java. This example includes,</p>
<ul>
<li>How to create an TreeSet</li>
<li>How to display element of Treeset</li>
<li>Adding data to TreeSet</li>
<li>Deleting data from TreeSet</li>
</ul>
<h3>Things to know about TreeSet</h3>
<ol>
<li>TreeSet is similar to TreeMap that stores its elements in a tree and maintain order of its elements based on their values. The elements are ordered using their natural ordering, or by a Comparator provided at set creation time, depending on which constructor is used.</li>
<li>To get the size of TreeSet collection size() method is used.</li>
<li>The size of the TreeSet can be determine by calling size() method.</li>
<li>remove() method can be used to remove an item/object</li>
<li>clear() method removes all object and makes the TreeSet empty</li>
<li>first() and last() method is used to get the first and last element in TreeSet</li>
</ol>
<h2>TreeSet Example</h2>
<pre class=""prettyprint lang-java"">import java.util.Iterator;
import java.util.TreeSet;

public class TreeSetExample {

	public static void main(String[] args) {
		// adding Integer to treeset
		TreeSet&lt;Integer&gt; treeSet = new TreeSet&lt;Integer&gt;();
		treeSet.add(20);
		treeSet.add(30);
		treeSet.add(40);
		treeSet.add(50);
		treeSet.add(22);

		// Check empty or not
		if (treeSet.isEmpty()) {
			System.out.print(""TreeSet is empty."");
		} else {
			System.out.println(""TreeSet size: "" + treeSet.size());
		}

		// Looping and Displaying the Tree set data using Iterator
		Iterator&lt;Integer&gt; iterator = treeSet.iterator();
		while (iterator.hasNext()) {
			System.out.print(iterator.next() + ""\t"");
		}

		// Retrieve first data from tree set
		System.out.println(""\nFirst Element: "" + treeSet.first());

		// Retrieve last data from tree set
		System.out.println(""Last Element: "" + treeSet.last());

		// remove element by value
		boolean flag = treeSet.remove(40);
		if (flag) {
			System.out.println(""40 is removed!"");
		} else {
			System.out.println(""40 doesn't exist!"");
		}

		System.out.println(""New size after delete: "" + treeSet.size());

		// Looping and Displaying the Tree set data using Iterator
		iterator = treeSet.iterator();
		while (iterator.hasNext()) {
			System.out.print(iterator.next() + ""\t"");
		}

		// Remove all data
		treeSet.clear();
		if (treeSet.isEmpty()) {
			System.out.print(""\nTree Set is empty."");
		} else {
			System.out.println(""\nTree Set size: "" + treeSet.size());
		}
	}
}</pre>
<h3>Output</h3>
<pre><strong>TreeSet size: 5
20	22	30	40	50	
First Element: 20
Last Element: 50
40 is removed!
New size after delete: 4
20	22	30	50	
Tree Set is empty.
</strong></pre>
",0,"standard","post"
"ActionBar with Custom View Example in Android","actionbar-with-custom-view-example-in-android","In this example we will see how to customize ActionBar with Custom View in Android.
","LIVE","<p>In this tutorial, we will create an example to customize <code>ActionBar</code> with a custom layout in Android. Before we begin, I assume you already have created an Android application.</p>
[box style=”2″]
<p>Toolbar is a new standard replacement for ActionBar, introduced in Android Lollipop. It supports whole bunch of customization as you wish along with no or less modification to ActionBar logic.<br/>
[/box]
I recommend using ToolBar. <a href=""http://stacktips.com/android/android-lollipop-toolbar-example"" title=""Android Lollipop Toolbar Example"">Checkout our Android Lollipop ToolBar Example</a>.</p>
<p>Now let us create a custom layout xml file for your ActionBar.</p>
<h4>custom_actionbar.xml</h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""50dp""
    android:background=""@drawable/black_pattern"" &gt;

    &lt;TextView
        android:id=""@+id/title_text""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_centerInParent=""true""
        android:textAllCaps=""true""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:textColor=""#fff""
        android:textStyle=""bold"" /&gt;

    &lt;ImageView
        android:id=""@+id/imageView1""
        android:layout_width=""35dp""
        android:layout_height=""35dp""
        android:layout_alignParentLeft=""true""
        android:layout_centerVertical=""true""
        android:layout_marginLeft=""8dp""
        android:src=""@drawable/ic_launcher"" /&gt;

    &lt;ImageButton
        android:id=""@+id/imageButton""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentRight=""true""
        android:layout_centerVertical=""true""
        android:layout_marginRight=""8dp""
        android:background=""@null""
        android:src=""@android:drawable/ic_menu_rotate"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<h3>Activity Class (MainActivity.java)</h3>
<p>The above declared layout will be used as custom layout for Activity <code>ActionBar</code>. You can inflate custom view to ActionBar <code>setCustomView()</code> method. Let us have a look at the code snippet below.</p>
<pre class=""prettyprint lang-java"">public class MainActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		ActionBar mActionBar = getActionBar();
		mActionBar.setDisplayShowHomeEnabled(false);
		mActionBar.setDisplayShowTitleEnabled(false);
		LayoutInflater mInflater = LayoutInflater.from(this);

		View mCustomView = mInflater.inflate(R.layout.custom_actionbar, null);
		TextView mTitleTextView = (TextView) mCustomView.findViewById(R.id.title_text);
		mTitleTextView.setText(""My Own Title"");

		ImageButton imageButton = (ImageButton) mCustomView
				.findViewById(R.id.imageButton);
		imageButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				Toast.makeText(getApplicationContext(), ""Refresh Clicked!"",
						Toast.LENGTH_LONG).show();
			}
		});

		mActionBar.setCustomView(mCustomView);
		mActionBar.setDisplayShowCustomEnabled(true);
	}

}</pre>
<h3>Output</h3>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""ActionBar Custom View Example in Android"" class=""aligncenter size-full wp-image-4092"" height=""461"" loading=""lazy"" src=""/media/uploads/articles/345/custom-actionbar.png"" srcset="""" width=""547""/></a></p>
",0,"standard","post"
"Edittext Validation in Android Example","edittext-validation-in-android-example","This tutorial show you how to use EditText user interface widget in android and write validation for the inputs. In this example we will create an simple Signup form as attached in the screenshot below.
","LIVE","<p>This tutorial show you how to use EditText user interface widget in android and write validation for the inputs. In this example we will create an simple Signup form as attached in the screenshot below.</p>
<p>EditText widget in android allows us to enter data in UI like html web forms. It is an extends TextView and additional attributes that allows user to input values. It provides wide variety of input controls that enable select, cut, copy, paste of text into EditText.</p>
<h3>Android Layout XML file</h3>
<p>Let us create an layout xml file with two EditText field one for entering email-id and other for password.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""#F0F0F0""
    android:orientation=""vertical"" &gt;

    &lt;TextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:padding=""10dp""
        android:text=""@string/lbl_register""
        android:textAllCaps=""true""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:textColor=""#176CEC""
        android:textStyle=""bold"" /&gt;

    &lt;EditText
        android:id=""@+id/editText_email""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:background=""#fff""
        android:ems=""10""
        android:hint=""@string/lbl_email_hint""
        android:inputType=""textEmailAddress""
        android:padding=""12dp"" /&gt;

    &lt;EditText
        android:id=""@+id/editText_password""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_marginTop=""1dp""
        android:background=""#fff""
        android:ems=""10""
        android:hint=""@string/lbl_password_hint""
        android:inputType=""textPassword""
        android:padding=""12dp"" /&gt;

    &lt;Button
        android:id=""@+id/btn_signup""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""20dp""
        android:background=""#176CEC""
        android:text=""@string/lbl_btn_signup""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:textColor=""#fff""
        android:textStyle=""bold"" /&gt;

&lt;/LinearLayout&gt;</pre>
<h3>Android Layout XML file.</h3>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;

public class MainActivity extends Activity {
	private EditText emailEditText;
	private EditText passEditText;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		emailEditText = (EditText) findViewById(R.id.editText_email);
		passEditText = (EditText) findViewById(R.id.editText_password);

		findViewById(R.id.btn_signup).setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {

				final String email = emailEditText.getText().toString();
				if (!isValidEmail(email)) {
					emailEditText.setError(""Invalid Email"");
				}

				final String pass = passEditText.getText().toString();
				if (!isValidPassword(pass)) {
					passEditText.setError(""Invalid Password"");
				}

			}
		});
	}

	// validating email id
	private boolean isValidEmail(String email) {
		String EMAIL_PATTERN = ""^[_A-Za-z0-9-\+]+(\.[_A-Za-z0-9-]+)*@""
				+ ""[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$"";

		Pattern pattern = Pattern.compile(EMAIL_PATTERN);
		Matcher matcher = pattern.matcher(email);
		return matcher.matches();
	}

	// validating password with retype password
	private boolean isValidPassword(String pass) {
		if (pass != null &amp;&amp; pass.length() &gt; 6) {
			return true;
		}
		return false;
	}
}</pre>
<h3>Output</h3>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Validate EditText in Android "" class=""aligncenter size-full wp-image-4085"" height=""449"" loading=""lazy"" src=""/media/uploads/articles/346/Untitled.png"" srcset="""" width=""586""/></a></p>
<p> </p>
",0,"standard","post"
"How to convert UNIX date to String","how-to-convert-unix-date-to-string","In this post we will see how to convert unix date to human readable format, how to use SimpleDateFormat class for date conversion.
","LIVE","<p>In this post we will see how to convert unix date to human readable format, how to use SimpleDateFormat class for date conversion.</p>
<ul>
<li><code>System.currentTimeMillis()</code>  will give date/time as a single numeric value, expressed as the number of milliseconds after the UNIX epoch. Unix epoch is always an long value. You can convert this time to get your time as per your local time zone.</li>
<li>You can use util.Date class object to get the date. Using this you can extract the year, month and day value numerically.</li>
<li><code>Calendar.getInstance()</code> gives you a Calendar object initialized with the current date / time, using the default Locale and TimeZone. You can overload the time zone and locale to get specific time zone time.</li>
<li><code>SimpleDateFormat</code> class is used for parsing and formatting date as text string. We just have to specify the pattern for parsing.</li>
</ul>
<h1>How to get current date</h1>
<pre class=""prettyprint lang-xml"">DateFormat dateFormat = new SimpleDateFormat(""EEE, d MMM yyyy HH:mm:ss"");
//getting current date using util.Date class
Date date = new Date();
System.out.println(""Current Date:"" + dateFormat.format(date));

//or use calendar instance
//Calendar cal = Calendar.getInstance();
//return dateFormat.format(cal.getTime());
</pre>
<p> </p>
<h1>Convert UNIX date to String</h1>
<pre class=""prettyprint lang-xml"">long unixdate = 1389705117;
DateFormat formatter = new SimpleDateFormat(""EEE, d MMM yyyy HH:mm:ss"");
Calendar calendar = Calendar.getInstance();
calendar.setTimeInMillis(unixdate * 1000);
System.out.println(""Formatted Date:"" + formatter.format(calendar.getTime()));
</pre>
",0,"standard","post"
"Anatomy of Xamarin.Android Application","anatomy-of-xamarin-android-application","This tutorial explains the basic building blocks of Xamarin.Android application. 1. Activity Unlike other platform applications, Android application&hellip;
","LIVE","<p>This tutorial explains the basic building blocks of Xamarin.Android application.</p>
<h1>1. Activity</h1>
<p>Unlike other platform applications, Android application doesn’t have a single entry point “Main” method. Android application is composed of loosely coupled screens called activity. Android supports multi screen applications. Since each Activity is essentially decoupled from the others, there needs to be a way to launch them and optionally pass data to them. On Android this is accomplished using Intents. Intents are classes that describe a message: both what the desired action of the message is and a data payload to send along with it.</p>
<p><center><img alt=""components of a basic Android application"" class=""aligncenter wp-image-4282 size-full"" height=""320"" loading=""lazy"" src=""/media/uploads/articles/348/components-of-a-basic-Android-application.png"" srcset="""" width=""279""/></center>As mentioned, Activities are classes that provide an interface. An Activity is given a window in which to add User Interface to. Therefore, creating multi-screen applications involves creating multiple Activities and transitioning between them.</p>
<p>The Activity class inherits from the abstract Context class. Context is the closest Android gets to a reference to the current application and provides a mechanism for accessing the Android system. A Context is needed to perform many operations in Android such as:</p>
<ul>
<li>Start, stop android services</li>
<li>Accessing shared preferences</li>
<li>Creating views and custom views</li>
<li>While accessing resources</li>
</ul>
<p>An Android application needs a Context to know what permissions the application has, how to create controls, accessing preferences, etc. Therefore, each Activity and Service inherits from Context, which has all the information the application needs. Every time a new Activity is created, it’s passed a Context from the Activity that created it.</p>
<h3>Activity Lifecycle</h3>
<p>Activity has a life-cycle method that helps you to identify and perform operations depending on the livfecycle states. Activities can be paused or destroyed by the system at any time. The lifecycle provides a way for Activities to handle the various lifecycle methods that Android will call and gives them an opportunity to save or rehydrate state, so screens can continue to operate normally.</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""activity lifecycle"" class=""size-thumbnail wp-image-4284 aligncenter"" height=""376"" loading=""lazy"" src=""/media/uploads/articles/348/activity-lifecycle-300x376.jpg"" srcset="""" width=""300""/></a></p>
<h1>2. Intent</h1>
<p>Intent is a messaging object you can use to request an action from another app component. Although intents facilitate communication between activities or activity with service. An Intent provides a facility for performing late runtime binding between the code in different applications. Its most significant use is in the launching of activities, where it can be thought of as the glue between activities. It is basically a passive data structure holding an abstract description of an action to be performed.</p>
<p>Additionally, Intents can be used to tell the OS to launch external Activities as well. For example, an application can have the intention to dial a phone number when the user taps a button. The way an application announces this intention is via an Intent for a phone dialing action. However, the actual dialing of the number is handled by an Activity in the Phone Dialer Application.</p>
<h1>3. AndroidManifest.xml</h1>
<p>Every Android application needs to include a file called AndroidManifest.xml. This file contains information about the application such as:</p>
<ul>
<li>Application name, icon, version, version code, etc.</li>
<li>Registration of Activities, Intents and services</li>
<li>Listing all permissions needed for your application</li>
<li>OS Version Compatibility – The minimum and max Android API level the application supports.</li>
</ul>
<h1>4. Services</h1>
<p>Services are application components that run in the background to perform long-running operations with no direct access to user interface. A typical long running tasks can be periodic downloading of data from internet, persisting multiple records into database, perform file I/O, fetching phone contacts list, etc. Such long running tasks can be implemented using Service, to provide smooth user experience by letting user interact with other activities while long running jobs being processed in background.</p>
<h1>5. Content providers</h1>
<p>Content providers manage access to a central repository of data such as contacts. A content provider is a part of an application, which usually provides a user interface to manage its data. A standard interface is also provided, which allows other applications to access its repository.</p>
<h1>6. Broadcast receivers</h1>
<p>Broadcast receivers are components that perform some type of processing in response to system-wide broadcasts. Broadcasts are generally initiated by the system for events such as low battery, taking a picture, or turning on Bluetooth. Applications may also choose to send broadcasts; a content provider might send a broadcast when data, such as a contact, has been updated. While broadcast receivers do not have a user interface, they may indirectly cause updates to a status.</p>
",0,"standard","post"
"Creating HelloWorld Program in Xamarin.Android","creating-helloworld-program-in-xamarin-android","This tutorial explains step by step approach to create and deploy a Xamarin.Android application. For the sake of&hellip;
","LIVE","<p>This tutorial explains step by step approach to create and deploy a Xamarin.Android application. For the sake of simplicity our first ever Xamarin.Android application, will have very basic user interface.</p>
<h2>1. Creating a Xamarin.Android Application</h2>
<p>This example assumes you already have Xamarin.Android installed in your development system. If you are a windows user you can use Visual Studio 2010 Professional or MonoDev IDE for development.</p>
<p>Let us create a new Xamarin.Android solution. Xamarin.Android includes several project templates, including:</p>
<ol style=""padding-left: 30px;"">
<li>Android Library Project – A reusable .NET library project for Android.</li>
<li>Android Application – A basic starter project with a single activity.</li>
<li>Android OpenGL Application – An OpenGL starter project.</li>
</ol>
<p>We will use “Android Application template” for this example. Let’s create an application by doing the following:</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Xamrin Android Application"" class=""aligncenter size-medium wp-image-4267"" height=""379"" loading=""lazy"" src=""/media/uploads/articles/349/Xamrin-Android-Application-620x379.png"" srcset="""" width=""620""/></a></p>
<h2>2. Understanding Application Components</h2>
<p>In the above section, we have just created a simple Xamarin.Android project. It automatically generates a project structure with different files and folders. The “HelloWorld” project includes three folders named Assets, Properties, and Resources.</p>
<ul style=""padding-left: 30px;"">
<li>Assets – Contains any type of file the application needs included in its package. Files included here are accessible at runtime via the Assets class.</li>
<li>Properties – Contains normal .NET assembly metadata.</li>
<li>Resources – Contains application resources such as strings and images, as well as declarative XML user interface definitions. These resources are accessible through the generated Resource class.</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Xamrin Android Application Example"" class=""aligncenter size-thumbnail wp-image-4277"" height=""308"" loading=""lazy"" src=""/media/uploads/articles/349/Xamrin-Android-Application-Example-300x308.png"" srcset="""" width=""300""/></a><br/>
The project template also created a class called HelloWorld in the file MainActivity.cs. An Activity is a class that models a destination where a user can perform some action while using an app, typically via a user interface.</p>
<h2>3. Creating HelloWorld program</h2>
<p>In this example we will create a simple screen with a TextView and a Button. Clicking the button will show a toast message to user.</p>
<h4>Main.axml</h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:orientation=""vertical""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:background=""#ffe7e5e5""&gt;
    &lt;TextView
        android:text=""HelloWorld Example in Xamrin""
        android:textAppearance=""?android:attr/textAppearanceLarge""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/textView1""
        android:gravity=""center_horizontal""
        android:layout_margin=""10dp""
        android:textColor=""#ff130c0c"" /&gt;
    &lt;Button
        android:id=""@+id/myButton""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:text=""@string/hello""
        android:capitalize=""characters""
        android:layout_margin=""10dp""
        android:background=""#ff0f37f5""
        android:textColor=""#ffffffff""
        android:textSize=""18dp""
        android:textStyle=""bold""
        android:typeface=""sans"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<h4>MainActivity.cs</h4>
<pre class=""prettyprint lang-cs"">using System;
using Android.App;
using Android.Content;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Android.OS;

namespace HelloWorld
{
	[Activity (Label = ""HelloWorld!"", MainLauncher = true)]
	public class MainActivity : Activity
	{
		protected override void OnCreate (Bundle bundle)
		{
			base.OnCreate (bundle);

			// Set your view layout layout resource file
			SetContentView (Resource.Layout.Main);

			// Initilize button from the layout resource
			Button button = FindViewById&lt;Button&gt; (Resource.Id.myButton);

			// and attach an event to it
			button.Click += delegate {
				//display toast message
				Toast.MakeText (Application, ""Button Clicked!"", ToastLength.Short).Show ();
			};
		}
	}
}

</pre>
<h2>4. Output</h2>
<p>Here is a screenshot that shows the application running in Samsung S4.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""HelloWorld program in Xamarin"" class=""aligncenter size-full wp-image-4272"" height=""870"" loading=""lazy"" src=""/media/uploads/articles/349/framed_Screenshot_2014-02-21-08-33-10.png"" srcset="""" width=""591""/></a></p>
",0,"standard","post"
"Android Input Dialog Example","android-input-dialog-example","In this tutorial we show you how to create input dialog in android with code sample. A dialog is a small window that prompts the user to make a decision or enter additional information.","LIVE","<p>In this tutorial we show you how to create input dialog in android with code sample.</p>
<p>A dialog is a small window that prompts the user to make a decision or enter additional information. A dialog does not fill the screen and is normally used for modal events that require users to take an action before they can proceed. The Dialog class is the base class for dialogs.</p>
<p>Creating a input dialog in android involves below steps</p>
<ol>
<li>Create layout for input dialog</li>
<li>Inflating layout and initialize AlertDialog</li>
</ol>
<h2 class="""">Creating Input Dialog Layout</h2>
<p>Here in this example we are creating an simple layout with an TextView and EditText. You may like to add your own layout with different UI widgets you need with your custom styles.</p>
<h3 class="""">Activity layout (activity_main.xml)</h3>
<p>Here we are creating an sample layout for activity. This has just an button, clicking on the button we will show the input dialog.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:padding=""@dimen/activity_vertical_margin"" &gt;

    &lt;Button
        android:id=""@+id/button""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Show Input Dialog"" /&gt;

    &lt;TextView
        android:id=""@+id/result""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

&lt;/LinearLayout&gt;</pre>
<p class=""""><h3 class=""""><span>Input dialog layout (input_dialog.xml)</span></h3></p>
<p>Input dialog layout is composed of a TextView to hint user what to enter, and a EditText to enter values.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout
    xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""wrap_content""
    android:orientation=""vertical""
    android:padding=""10dp""&gt;

    &lt;TextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:textAppearance=""?android:attr/textAppearanceMedium""
        android:text=""Enter Name""
        android:id=""@+id/textView"" /&gt;

    &lt;EditText
        android:id=""@+id/edittext""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:hint=""Enter text here..""
        android:padding=""10dp"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<h3 class="""">Activity Class</h3>
<p>Here in this class we are instating the activity_main.xml layout. A click event is given for the Button, when clicked it shows the input dialog.</p>
<pre class=""prettyprint lang-java"">package com.javatechig;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

public class MainActivity extends Activity {

	private Button button;
	private TextView resultText;

	public void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		// components from main.xml
		button = (Button) findViewById(R.id.button);
		resultText = (TextView) findViewById(R.id.result);

		button.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				showInputDialog();
			}
		});
	}

	protected void showInputDialog() {

		// get prompts.xml view
		LayoutInflater layoutInflater = LayoutInflater.from(MainActivity.this);
		View promptView = layoutInflater.inflate(R.layout.input_dialog, null);
		AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(MainActivity.this);
		alertDialogBuilder.setView(promptView);

		final EditText editText = (EditText) promptView.findViewById(R.id.edittext);
		// setup a dialog window
		alertDialogBuilder.setCancelable(false)
				.setPositiveButton(""OK"", new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						resultText.setText(""Hello, "" + editText.getText());
					}
				})
				.setNegativeButton(""Cancel"",
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int id) {
								dialog.cancel();
							}
						});

		// create an alert dialog
		AlertDialog alert = alertDialogBuilder.create();
		alert.show();
	}
}</pre>
<p class=""""><br/></p>",0,"standard","post"
"Android CheckBox Example","android-checkbox-example","In this tutorial we show you how to create checkbox in android with code sample. This example creates three checkbox and handles users input.
","LIVE","<p>In this tutorial, we show you how to use check box in android with example.</p>
<p>Checkbox is a  two-states button that can be either checked or unchecked. When the radio button is unchecked, the user can click it to check it or vice-versa. Unlike <a href=""http://stacktips.com/android/android-radio-button-example"" title=""Android Radio Button Example"">RadioButton</a>, android check box works like toggle between two states.</p>
<h1>Android CheckBox Example</h1>
<p>Let us create a example that displays three checkbox and responds to user click event. When user selects or un-select the button, it displays a toast with its state. Create a new layout file named activity_main.xml under layout resource folder and add the following code snippets. The code will generate the layout as shown in the screenshot below.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:padding=""@dimen/activity_vertical_margin""&gt;

    &lt;TextView
        android:id=""@+id/textView1""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/hint""
        android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

    &lt;CheckBox
        android:id=""@+id/music""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/music"" /&gt;

    &lt;CheckBox
        android:id=""@+id/game""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:checked=""true""
        android:text=""@string/game"" /&gt;

    &lt;CheckBox
        android:id=""@+id/blogging""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/blogging"" /&gt;

&lt;/LinearLayout&gt;</pre>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Android CheckBox Example"" class=""aligncenter size-full wp-image-8292"" height=""566"" loading=""lazy"" sizes=""(max-width: 855px) 100vw, 855px"" src=""/media/uploads/articles/351/Android-CheckBox-Example.png"" srcset="""" width=""855""/></a></p>
<p>In the above layout class, we are using below strings</p>
<pre class=""prettyprint lang-xml"">&lt;resources&gt;
    &lt;string name=""app_name""&gt;My Application&lt;/string&gt;
    &lt;string name=""blogging""&gt;Write Blog&lt;/string&gt;
    &lt;string name=""music""&gt;Listen Music&lt;/string&gt;
    &lt;string name=""game""&gt;Play Games&lt;/string&gt;
    &lt;string name=""submit""&gt;Submit&lt;/string&gt;
    &lt;string name=""hint""&gt;What do you like do in your free time?&lt;/string&gt;
&lt;/string&gt;
&lt;/resources&gt;</pre>
<h1>Using CheckBox from Activity</h1>
<pre class=""prettyprint lang-java"">import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.widget.CheckBox;
import android.widget.Toast;

public class MainActivity extends Activity {
    private CheckBox blogging, game, music;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        blogging = (CheckBox) findViewById(R.id.blogging);
        game = (CheckBox) findViewById(R.id.game);
        music = (CheckBox) findViewById(R.id.music);
        music.setOnClickListener(checkboxClickListener);
        game.setOnClickListener(checkboxClickListener);
        blogging.setOnClickListener(checkboxClickListener);

        /* Set blogging by default */
        blogging.setChecked(true);

    }

    View.OnClickListener checkboxClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            boolean checked = ((CheckBox) view).isChecked();
            if (checked) {
                String text = null;
                switch (view.getId()){
                    case R.id.game:
                        text = ""Play Game"";
                        break;
                    case R.id.music:
                        text = ""Listen Music"";
                        break;
                    case R.id.blogging:
                        text=""Write blog"";
                        break;
                }
                Toast.makeText(MainActivity.this, text, Toast.LENGTH_LONG).show();
            }
        }
    };
}</pre>
<h1></h1>
<h1></h1>
",0,"standard","post"
"Android Custom Dialog Example","android-custom-dialog-example","In this tutorial we show you how to create custom dialog in android. A dialog is a small window that prompts the user to make a decision or enter additional information.
","LIVE","<p>In this tutorial we show you how to create custom dialog in android with code sample.</p>
<p>A dialog is a small window that prompts the user to make a decision or enter additional information. A dialog does not fill the screen and is normally used for modal events that require users to take an action before they can proceed. The Dialog class is the base class for dialogs.</p>
<p>Creating a custom dialog in android involves below steps</p>
<ol>
<li>Crating a custom layout for dialog</li>
<li>Attaching layout to dialog instance</li>
<li>Show/Hide dialog</li>
</ol>
<h1>Crating a custom layout for dialog</h1>
<p>Here in this example we are creating an simple layout with an ImgeView, TextView and a Button. You may like to add your own layout with different UI widgets you need with your custom styles.</p>
<p><strong>custom_dialog_layout.xml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent"" &gt;

    &lt;ImageView
        android:id=""@+id/image""
        android:layout_width=""50dp""
        android:layout_height=""50dp""
        android:contentDescription=""@drawable/ic_launcher""
        android:src=""@drawable/ic_launcher"" /&gt;

    &lt;Button
        android:id=""@+id/button""
        android:layout_width=""100dp""
        android:layout_height=""wrap_content""
        android:layout_below=""@+id/image""
        android:layout_centerHorizontal=""true""
        android:text=""Dismiss"" /&gt;

    &lt;TextView
        android:id=""@+id/textView""
        android:layout_width=""wrap_content""
        android:layout_height=""fill_parent""
        android:layout_above=""@+id/button""
        android:layout_toRightOf=""@+id/image""
        android:gravity=""center_vertical""
        android:textAppearance=""?android:attr/textAppearanceMedium"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<h1>Attaching layout to dialog instance</h1>
<p>Now, let us go back to our activity and create an instance of Dialog. We can attach our custom layout to dialog by using setContentView() method call.</p>
<pre class=""prettyprint lang-java"">package com.javatechig;

import android.app.Activity;
import android.app.Dialog;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

public class MainActivity extends Activity {
	private Button button;

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		button = (Button) findViewById(R.id.button);
		button.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				final Dialog dialog = new Dialog(MainActivity.this);

				//setting custom layout to dialog
				dialog.setContentView(R.layout.cusotm_dialog_layout);
				dialog.setTitle(""Custom Dialog"");

				//adding text dynamically
				TextView txt = (TextView) dialog.findViewById(R.id.textView);
				txt.setText(""Put your dialog text here."");

				ImageView image = (ImageView)dialog.findViewById(R.id.image);
				image.setImageDrawable(getResources().getDrawable(android.R.drawable.ic_dialog_info));

				//adding button click event
				Button dismissButton = (Button) dialog.findViewById(R.id.button);
				dismissButton.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						dialog.dismiss();
					}
				});
				dialog.show();
			}
		});
	}
}</pre>
<h1>Show/Hide dialog</h1>
<p>When you want to show your dialog, just call show() method and to hide you have to call dismiss() method.</p>
<h1>Output</h1>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Custom Dialog in Android"" class=""aligncenter size-thumbnail wp-image-4061"" height=""437"" loading=""lazy"" src=""/media/uploads/articles/352/Custom-Dialog-in-Android-300x437.png"" srcset="""" width=""300""/></a></p>
",0,"standard","post"
"Wondershare Video Editor 3.5.0 Released","wondershare-video-editor-3-5-0-released","Wondershare Video Editor is an easy-to-use and user-friendly video editing program that enables everyone to edit and enhance the videos to look amazing without putting much effort and hours of time on it.
","LIVE","<p>Wondershare Video Editor is an easy-to-use and user-friendly video editing program that enables everyone to edit and enhance the videos to look amazing without putting much effort and hours of time on it. Recently, a new version (3.5.0) was released which made it even more reliable and powerful. In this review we will discuss all the major features of this software.</p>
<h3>Simple yet stylish interface</h3>
<p>Wondershare Video Editor has a well-organized workspace that allows for text and audio layering. Thanks to the drag-n-drop feature, you can instantly add your media files to the program instead of having to upload them from the containing folders.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""add-files"" class=""aligncenter size-full wp-image-4043"" height=""449"" loading=""lazy"" src=""/media/uploads/articles/353/add-files.jpg"" srcset="""" width=""600""/></a></p>
<h3>Broad format support</h3>
<p>Wondershare Video Editor is compatible with all types of videos captured by different brands or makes of digital camera, camcorders, mobile devices and much more. It’s also supports all the major file types including the HD format. So you don’t have to convert the original video files, thus keep the best video quality and save your time and energy.</p>
<h3>Various unique editing tools and effects</h3>
<p>With the unique video editing and effects provided by Wondershare Video Editor, you can easily edit and enhance your videos like a pro. Besides the very basic video editing tools like Crop, Cut, Split, Trim and Rotate, more unique tools and effects are included:</p>
<ul>
<li><strong>Beautiful filtering effects:</strong> In the Effect library, more than 70 creative and classic visual filters are available. You can directly drag and drop them onto the timeline for application.</li>
<li><strong>Dynamic transitions:</strong> Choose from a wide selection of energetic and colourful transitions such as vertical shutter, grid zoom, skew right split and much more as you like.</li>
<li><strong>Useful Text Effects:</strong> Now more dynamic text motions and styles are added, which allows you to feature different text titles across your scenes with the text effects.</li>
<li><strong>Power Tool:</strong> Power Tool is a set of amazing features that lets you do something different with your clip. Mosaic Blur enables you easily blur part of the video as per your needs. Tilt Shift allows you to focus on a desired part of the video and gives a little blur to the rest area. Face off means that all the faces in the video would be covered with a clip art or would be made blur. Jump Cut would add more fun to your video.</li>
</ul>
<p> </p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""special-effects"" class=""size-full wp-image-4042 aligncenter"" height=""386"" loading=""lazy"" src=""/media/uploads/articles/353/special-effects.jpg"" srcset="""" width=""600""/></a></p>
<p> </p>
<h3>Different output options</h3>
<p>Wondershare Video Editor provides different ways to export your videos. You can convert your videos into over a dozen of different formats while still have the original quality intact or save your videos onto iPhones (5, 4 and 3), iPod, iPad, Samsung and HTC mobiles, PSP as well as other supported devices. You can also choose to upload your videos onto YouTube and Facebook with no hassle or turn your videos into a keepsake on a DVD.</p>
<p> </p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""output"" class=""aligncenter size-full wp-image-4041"" height=""379"" loading=""lazy"" src=""/media/uploads/articles/353/output.jpg"" srcset="""" width=""600""/></a></p>
<p>The features list to Wondershare Video Editor doesn’t end yet. In fact, there are other great features available to make your video even more outstanding, such as the Audio Detach function, Smart Scene Detection feature, Flash and Hold effect and more. Now just go to the <a href=""http://www.wondershare.com/video-editor/"" rel=""nofollow noopener noreferrer"" target=""_blank""><strong>product page</strong></a> and try it out yourself!</p>
",0,"standard","post"
"Caching Bitmaps and Managing Bitmap Memory in Android- Official Video","caching-bitmaps-and-managing-bitmap-memory-in-android-official-video","Applications are enriched with graphics and images. But when your app have to load a number of bitmap, memory allocation will get complicated. Here is the official video lessons on caching bitmaps and managing bitmap memory in android.
","LIVE","<p>Applications are enriched with graphics and images. But when your app have to load a number of bitmap, memory allocation will get complicated. Here is the official video lessons on caching bitmaps and managing bitmap memory in android. Here you will find below two points explained in detailed with a sample demo.</p>
<p><b>1. <a href=""http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">Caching Bitmaps</a>,</b> in this section you can learn how to use a memory and disk bitmap cache to improve the responsiveness and fluidity of your User Interface when loading multiple bitmaps.</p>
<p><b>2. <a href=""http://developer.android.com/training/displaying-bitmaps/manage-memory.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">Managing Bitmap Memory</a>, </b> this section you will see more on how to facilitate garbage collection and reuse bitmaps more effectively.</p>
<p>In this video tutorial you will also get an overview of, how to speed up bitmap loading and reduce garbage collection by reusing existing bitmaps.</p>
<p><iframe allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen="""" frameborder=""0"" height=""675"" loading=""lazy"" src=""https://www.youtube.com/embed/rsQet4nBVi8?start=232&amp;feature=oembed"" title=""DevBytes: Bitmap Allocation"" width=""1200""></iframe></p>
",0,"standard","post"
"Android ImageView Example","android-imageview-example","ImageView is one of the UI widget that is used to display images in your Application. ImageView is comes with different configuration options to support different scaleTypes.","LIVE","<p>Android is enriched with some of the best User interface design widgets. That allows you to build robust and good looking ui based application. ImageView is one of the UI widget that is used to display images in your Application. </p><p>ImageView is comes with different configuration options to support different scaleTypes. scaleType options are used for scaling the bounds of an image to the bounds of this view. Below are the listed <code>scaleType</code> configuration properties supported.</p>
<ul>
<li>CENTER</li>
<li>CENTER_CROP</li>
<li>CENTER_INSIDE</li>
<li>FIT_CENTER</li>
<li>FIT_END</li>
<li>FIT_START</li>
<li>FIT_XY</li>
<li>MATRIX</li>
</ul>
<h2 class="""">Android ImageView Example</h2>
<p>Let us add a new activity layout file named activity_main.xml to your project res/layout folder. In this example, we will be creating three different ImageView for demonstration purpose. </p><p>Note that the ImageView uses the images from drawable folder.</p>
<pre class=""prettyprint lang-xml"">&lt;ScrollView xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""#31352e"" &gt;

    &lt;LinearLayout
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:orientation=""vertical"" &gt;

        &lt;ImageView
            android:id=""@+id/imageView1""
            android:layout_width=""fill_parent""
            android:layout_height=""150dp""
            android:layout_margin=""5dp""
            android:src=""@drawable/image1"" /&gt;

        &lt;ImageView
            android:id=""@+id/imageView2""
            android:layout_width=""fill_parent""
            android:layout_height=""150dp""
            android:layout_margin=""5dp""
            android:background=""#fff""
            android:padding=""3dp""
            android:scaleType=""fitXY""
            android:src=""@drawable/image2"" /&gt;

        &lt;ImageView
            android:id=""@+id/imageView3""
            android:layout_width=""fill_parent""
            android:layout_height=""200dp""
            android:layout_margin=""5dp""
            android:background=""#fff""
            android:paddingBottom=""50dp""
            android:paddingLeft=""3dp""
            android:paddingRight=""3dp""
            android:paddingTop=""3dp""
            android:scaleType=""fitXY""
            android:src=""@drawable/image2"" /&gt;
    &lt;/LinearLayout&gt;

&lt;/ScrollView&gt;</pre>
<h2 class="""">Using ImageView from Activity</h2>
<p>Let us look at the Activity java class. In this example, the second ImageView (i.e. imageView2) is loaded dynamically with an image from drawable folder using <code>setImageResource()</code> method. You can also listen to click event of the ImageView using <code>setOnClickListener().</code></p>
<pre class=""prettyprint lang-java"">package com.javatechig.imageview;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.Toast;

public class MainActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		// setting image resource from drawable
		ImageView imageView = (ImageView) findViewById(R.id.imageView2);
		imageView.setImageResource(R.drawable.image1);

		imageView.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				Toast.makeText(getApplicationContext(), ""Clicked Second Image"",
						Toast.LENGTH_SHORT).show();
			}
		});

	}

}</pre>",0,"standard","post"
"Integrating Google Analytics in Android Example","integrating-google-analytics-in-android-example","Analytics is one of the major parts in applications that drive revenue.  Mobile App Analytics help you set and track the goal conversions you want most: purchases, clicks, or simply time spent on your app. It is required to make business inclined towards user’s interest.
","LIVE","
<h1><span id=""1_Why_Analytics_in_Mobile_app"">1. Why Analytics in Mobile app ?</span></h1>
<p>Analytics is one of the major parts in applications that drive revenue.  Mobile App Analytics help you set and track the goal conversions you want most: purchases, clicks, or simply time spent on your app. It is required to make business inclined towards user’s interest. For example, if you developing an application for Mobile Shopper app, it is important to track the below things.</p>
<ol>
<li>Number of users/active users from across the world</li>
<li>Most viewed products, categories, brands, etc.</li>
<li>Number of users placing request, etc.</li>
</ol>
<p>The above information is required in order to improve the product and make the service is better.</p>
<h1><span id=""2_Introduction_to_Google_Analytics"">2. Introduction to Google Analytics</span></h1>
<p>The Google Analytics Platform lets you measure user interactions with your business across various devices and environments. The platform provides all the computing resources to collect, store, process, and report on these user-interactions.</p>
<h1><span id=""3_Supported_Features"">3. Supported Features</span></h1>
<p>Below are the currently supported features. Read more</p>
<p><strong><a href=""http://www.google.co.in/analytics/mobile/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://www.google.co.in/analytics/mobile/</a></strong></p>
<ol>
<li>Google Play Integration</li>
<li>Crash and Exception Reporting</li>
<li>Custom Reports</li>
<li>Event Tracking</li>
<li>Flow Visualization</li>
<li>Real-Time Reporting</li>
</ol>
<h1><span id=""4_How_to_use_Google_Analytics_in_android"">4. How to use Google Analytics in android</span></h1>
<p>This section of tutorial we will see detailed steps to install Google Analytics for your android application. Before begin with Analytics integration we need the following items</p>
<ol>
<li>Android developer SDK and required configurations. I assume you have it already, if not you can follow Android official documentation <strong><a href=""http://developer.android.com/sdk/index.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://developer.android.com/sdk/index.html</a></strong></li>
<li>Google Analytics SDK for Android v3, with <code>libGoogleAnalyticsServices.jar</code> file. Copy this file in your project’s /libs directory.</li>
<li>Codebase of an Android app that you like to implement the Google Analytics</li>
<li>Create a Google Analytics account (Requires Gmail), and then create a new app property and view in the Analytics console.</li>
</ol>
<h1><span id=""5_Using_Google_Analytics_Detailed_Steps"">5. Using Google Analytics Detailed Steps</span></h1>
<p>Before starting with section, I assume you already have Codebase of an Android app that you like to implement the Google Analytics. But to simplify my example, I am creating an simple Android App and integrating with Google Analytics.</p>
<h2><span id=""51_Creating_Google_Analytics_Account_and_App_Property"">5.1. Creating Google Analytics Account and App Property</span></h2>
<ol>
<li>Login to your Google Analytics Account. Then press “Admin” button on the right side of your screen.</li>
<li>Create a new Account, if you don’t have one and then create a new property. While creating a new property choose Mobile App.</li>
<li>After property is created, you will get the <code>tracking Id</code>. This tracking id will be used as configuration in android app.</li>
</ol>
<h2><span id=""52_Add_analyticsxml_configuration_file"">5.2. Add analytics.xml configuration file</span></h2>
<p>Add <code>analytics.xml</code> configuration file in your application values folder</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;resources&gt;

    &lt;!-- Replace placeholder ID with your tracking ID --&gt;
    &lt;string name=""ga_trackingId""&gt;UA-xxxxxxxxxx&lt;/string&gt;

    &lt;!-- Enable automatic activity tracking --&gt;
    &lt;bool name=""ga_autoActivityTracking""&gt;true&lt;/bool&gt;

    &lt;!-- Enable automatic exception tracking --&gt;
    &lt;bool name=""ga_reportUncaughtExceptions""&gt;true&lt;/bool&gt;    

&lt;/resources&gt;</pre>
<p> </p>
<h2><span id=""53_Android_Activity_Layout_activity_mainxml"">5.3. Android Activity Layout (activity_main.xml)</span></h2>
<p>For this example, I have created an sample Activity with two buttons for tracking event and exceptions.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:padding=""@dimen/activity_vertical_margin""
    tools:context="".MainActivity"" &gt;

    &lt;TextView        
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/info"" /&gt;

    &lt;Button
        android:id=""@+id/trackEvent""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Track Event"" /&gt;

    &lt;Button
        android:id=""@+id/trackCrash""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Track Crash"" /&gt;

&lt;/LinearLayout&gt;</pre>
<h2><span id=""54_Android_Activity_MainActivityjava"">5.4. Android Activity (MainActivity.java)</span></h2>
<p>Now, you need to write the tracking code in your activity class. For that simply add the <code>activiyStart()</code> and <code>activityStop()</code> methods to the <code>onStart()</code> and <code>onStop()</code> methods of each of your Activities as in the following example. This two method enables basic activity tracking.</p>
<pre class=""prettyprint lang-java"">package com.javatechig.ganalytics;

import android.app.Activity;
import android.os.Bundle;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import com.google.analytics.tracking.android.EasyTracker;
import com.google.analytics.tracking.android.MapBuilder;
import com.google.analytics.tracking.android.StandardExceptionParser;

public class MainActivity extends Activity {

	private EasyTracker easyTracker = null;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		easyTracker = EasyTracker.getInstance(MainActivity.this);

		findViewById(R.id.trackEvent).setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				easyTracker.send(MapBuilder.createEvent(""your_action"",
						""envet_name"", ""button_name/id"", null).build());
			}
		});

		findViewById(R.id.trackCrash).setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {

				try {
					int a[] = new int[2];
					int num = a[4];
				} catch (ArrayIndexOutOfBoundsException e) {
					easyTracker.send(MapBuilder.createException(
									new StandardExceptionParser(MainActivity.this, null)
											.getDescription(Thread.currentThread().getName(), e), false).build());
				}

			}
		});
	}

	@Override
	public void onStart() {
		super.onStart();
		EasyTracker.getInstance(this).activityStart(this);
	}

	@Override
	public void onStop() {
		super.onStop();
		EasyTracker.getInstance(this).activityStop(this);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

}</pre>
<p>In this above activity code sample, we are tracking event an crashes on two button clicks. Just for demonstation purpose I am creating sample exception and tracking it.</p>
<h1><span id=""6_Google_Analytics_Output"">6. Google Analytics Output</span></h1>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Google Analytics Report"" class=""aligncenter size-large wp-image-3977"" height=""414"" loading=""lazy"" src=""/media/uploads/articles/356/Google-Analytics-Report-940x623.png"" srcset="""" width=""625""/></a></p>
<h1><span id=""7_Download_Complete_Example"">7. Download Complete Example</span></h1>
[download url=”https://github.com/javatechig/javatechig-android-advanced/tree/master/GoogleAnalyticsDemo”]
",0,"standard","post"
"Android Handler Example","android-handler-example","In this example we will see how to use Handler in android.  This example downloads image from server and using Handler it is communicating back with UI thread. 
","LIVE","<p>In this example we will see how to use Handler in android.  This example downloads image from server and using Handler it is communicating back with UI thread.</p>
<p>A Handler allows you communicate back with the UI thread from other background thread. This is useful in android as android doesn’t allow other threads to communicate directly with UI thread. Handler can send and process Message and Runnable objects associated with a thread’s MessageQueue. Each Handler instance is associated with a single thread and that thread’s message queue. When a new Handler is created, it is bound to the thread/message queue of the thread that is creating it.</p>
<p>The example explained in this tutorial is using below configurations</p>
<ul>
<li>JDK 1.6</li>
<li>Eclipse 4.2 Juno</li>
<li>Android SKD 4.0</li>
<li>And tested over HTC OneX (Android 4.2)</li>
</ul>
<h4>Android Activity Layout (activity_main.xml)</h4>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    tools:context="".MainActivity"" &gt;

    &lt;Button
        android:id=""@+id/button1""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""15dp""
        android:text=""Download Image"" /&gt;

    &lt;ImageView
        android:id=""@+id/imageView""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""
        android:scaleType=""centerInside""
        android:src=""@drawable/ic_launcher"" /&gt;

&lt;/LinearLayout&gt;</pre>
<h4>Android Activity (MainActivity.java)</h4>
<pre class=""prettyprint lang-java"">package com.javatechig.handlerexample;
import java.io.InputStream;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import com.javatechige.handlerexample.R;

import android.app.Activity;
import android.app.ProgressDialog;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
public class MainActivity extends Activity {
    private ProgressDialog progressDialog;
    private ImageView imageView;
    private String url = ""http://www.9ori.com/store/media/images/8ab579a656.jpg"";
    private Bitmap bitmap = null;

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        imageView = (ImageView) findViewById(R.id.imageView);

        Button start = (Button) findViewById(R.id.button1);
        start.setOnClickListener(new OnClickListener() {
        	@Override
            public void onClick(View arg0) {
        		progressDialog = ProgressDialog.show(MainActivity.this, """", ""Loading.."");
        		new Thread() {
        			public void run() {
        				bitmap = downloadBitmap(url);
        				messageHandler.sendEmptyMessage(0);
        			}
        		}.start();
            }
        });
    }

    private Handler messageHandler = new Handler() {
        public void handleMessage(Message msg) {
        	super.handleMessage(msg);
        	imageView.setImageBitmap(bitmap);
                progressDialog.dismiss();
        }
    };

    private Bitmap downloadBitmap(String url) {
        // Initialize the default HTTP client object
        final DefaultHttpClient client = new DefaultHttpClient();

        //forming a HttpGet request
        final HttpGet getRequest = new HttpGet(url);
        try {
            HttpResponse response = client.execute(getRequest);
            //check 200 OK for success
            final int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w(""ImageDownloader"", ""Error "" + statusCode + "" while retrieving bitmap from "" + url);
                return null;
            }

            final HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream inputStream = null;
                try {
                    // getting contents from the stream
                    inputStream = entity.getContent();
                    // decoding stream data back into image Bitmap
                    Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
                    return bitmap;
                } finally {
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    entity.consumeContent();
                }
            }
        } catch (Exception e) {
            getRequest.abort();
            Log.e(getString(R.string.app_name), ""Error ""+ e.toString());
        }
        return null;
    }
}</pre>
<h4>Output</h4>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Android Handler Example"" class=""aligncenter size-full wp-image-3967"" height=""356"" loading=""lazy"" src=""/media/uploads/articles/357/Android-Handler-Example.gif"" srcset="""" width=""580""/></a></p>
<h4>Download Complete Source</h4>
<p>Download complete source code from <a href=""https://github.com/javatechig/javatechig-android-advanced/tree/master/HandlerExample"" rel=""nofollow noopener noreferrer"" target=""_blank"">GitHub</a></p>
",0,"standard","post"
"Get Device ID Example in Android","get-device-id-example-in-android","This example explains how to get device unique id in android. The device unique id is needed when we want user registration for a specific device. This way we can achieve security. Most of the banking applications today are using such approach.
","LIVE","<p>This example explains how to get device unique id in android. The device unique id is needed when we want user registration for a specific device. This way we can achieve security. Most of the banking applications today are using such approach.</p>
<h4>Android Activity Layout (activity_main.xml)</h4>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    tools:context="".MainActivity"" &gt;

    &lt;TextView
        android:id=""@+id/textView1""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_centerInParent=""true""
        android:textColor=""#cc0000""
        android:textSize=""32sp"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<h4>Android Activity (MainActivity.java)</h4>
<pre class=""prettyprint lang-java"">package com.javatechig.getdeviceid;

import android.app.Activity;
import android.os.Bundle;
import android.provider.Settings.Secure;
import android.widget.TextView;

public class MainActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		//getting unique id for device
		String id = Secure.getString(getContentResolver(), Secure.ANDROID_ID);

		//displaying id in textview
		TextView tv = (TextView) findViewById(R.id.textView1);
		tv.setText(id);

	}

}</pre>
<h4>Output</h4>
<h4><a href=""http://stacktips.com"" target=""_self""><img alt=""Get Device ID Example in Android"" class=""aligncenter size-thumbnail wp-image-3875"" height=""438"" loading=""lazy"" src=""/media/uploads/articles/358/Get-Device-ID-Example-in-Android-300x438.png"" srcset="""" width=""300""/></a></h4>
",0,"standard","post"
"Listing all SDCard Filenames with extensions in android","listing-all-sdcard-filenames-with-extensions-in-android","Here in this example we will see how to list all files present in SDCard of your android device. In the below example it searches for all of the SDCard folders and lists all of the images available. You may extend this example to list other file formats
","LIVE","<p>Here in this example we will see how to list all files present in SDCard of your android device. In the below example it searches for all of the SDCard folders and lists all of the images available. You may extend this example to list other file formats.</p>
<p><b>Steps</b></p>
<ol>
<li>First let us create a new Android project and name it as you like. This example uses minSdkVersion=8 and  targetSdkVersion=”18″ and tested over HTC Onex (Android 4.2) device.</li>
<li>Make sure, you have SDCard with some files to list.</li>
</ol>
<h4>Android Activity Layout (activity_main.xml)</h4>
<pre class=""prettyprint lang-xml"">&lt;ScrollView xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/scrollView""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent"" &gt;

    &lt;LinearLayout
        android:id=""@+id/view""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:orientation=""vertical""
        android:padding=""8dp"" &gt;
    &lt;/LinearLayout&gt;

&lt;/ScrollView&gt;</pre>
<p>From the above code snippet, you can observe that I have taken a ScrollView and a LinearLayout as its child. This LinearLayout will hold all of the TextViews that shows filenames.</p>
<h4>Android Activity (MainActivity.java)</h4>
<pre class=""prettyprint lang-java"">package com.javatechig.listallfiles;

import java.io.File;
import java.util.ArrayList;
import com.example.listallfiles.R;
import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Environment;
import android.widget.LinearLayout;
import android.widget.TextView;

public class MainActivity extends Activity {

	private File root;
	private ArrayList&lt;File&gt; fileList = new ArrayList&lt;File&gt;();
	private LinearLayout view;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		view = (LinearLayout) findViewById(R.id.view);

		//getting SDcard root path
		root = new File(Environment.getExternalStorageDirectory()
				.getAbsolutePath());
		getfile(root);

		for (int i = 0; i &lt; fileList.size(); i++) {
			TextView textView = new TextView(this);
			textView.setText(fileList.get(i).getName());
			textView.setPadding(5, 5, 5, 5);

			System.out.println(fileList.get(i).getName());

			if (fileList.get(i).isDirectory()) {
				textView.setTextColor(Color.parseColor(""#FF0000""));
			}
			view.addView(textView);
		}

	}

	public ArrayList&lt;File&gt; getfile(File dir) {
		File listFile[] = dir.listFiles();
		if (listFile != null &amp;&amp; listFile.length &gt; 0) {
			for (int i = 0; i &lt; listFile.length; i++) {

				if (listFile[i].isDirectory()) {
					fileList.add(listFile[i]);
					getfile(listFile[i]);

				} else {
					if (listFile[i].getName().endsWith("".png"")
							|| listFile[i].getName().endsWith("".jpg"")
							|| listFile[i].getName().endsWith("".jpeg"")
							|| listFile[i].getName().endsWith("".gif""))

					{
						fileList.add(listFile[i]);
					}
				}

			}
		}
		return fileList;
	}

}</pre>
<h4>Output</h4>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Example Listing All Files In Android"" class=""aligncenter size-full wp-image-3868"" height=""345"" loading=""lazy"" src=""/media/uploads/articles/359/Example-Listing-All-Files-In-Android.gif"" srcset="""" width=""563""/></a></p>
",0,"standard","post"
"Navigation Drawer Android Example","navigation-drawer-android-example","The navigation drawer is a panel that displays the app’s main navigation commands on the left side of the screen. This example describes How to implement a navigation drawer using  Support Library the DrawerLayout API.
","LIVE","
<h2><span id=""1_Introduction"">1. Introduction</span></h2>
<p>Android navigation drawer is a one of the most common used design pattern that displays the app’s main navigation links on the left side of the screen. It is not visible by default, and shown when swiped from left to right or by clicking the navigation menu icon from ActionBar.</p>
<p>The following example explains, how to implement a navigation drawer using  Android Support Library <code>DrawerLayout</code> API.</p>
<h2><span id=""2_When_to_Use_Navigation_Drawer"">2. When to Use Navigation Drawer</span></h2>
<p>Navigation drawer is an overlay panel, that is replaced with the legacy application dashboard screen or menu. Now we don’t need to create a dedicated activity for showing all application options. You can simply it further by just using navigation drawer.</p>
<p>Before you decide to use a navigation drawer in your app, you should understand the use cases and design principles defined in the Navigation Drawer design guide. It is not an general replacement for top-level menu navigation.</p>
<p>Follow official <a href=""http://developer.android.com/design/patterns/navigation-drawer.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">Android on design guidelines</a> follow for more information.</p>
<h2><span id=""3_Navigation_Drawer_Example"">3. Navigation Drawer Example</span></h2>
<p>The following section of this tutorial, describes step by step approach to Implement a navigation drawer using the DrawerLayout APIs available in the Android Support Library. Some of the steps includes</p>
<ul>
<li>Create drawer layout</li>
<li>Initialize navigation drawer layout</li>
<li>Handle navigation drawer click</li>
<li>Update content based on selection</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Navigation Drawer Android Example"" class=""aligncenter wp-image-8402 size-full"" height=""523"" loading=""lazy"" sizes=""(max-width: 900px) 100vw, 900px"" src=""/media/uploads/articles/360/Navigation-Drawer-Android-Example.png"" srcset="""" width=""900""/></a></p>
<h2><span id=""4_Creating_a_Drawer_Layout"">4. Creating a Drawer Layout</span></h2>
<p>For creating a navigation drawer, first we need to declare the drawer layout in your main activity  where you want to show the navigation drawer. Add <code>android.support.v4.widget.DrawerLayout</code> as root view of activity layout.</p>
<p>A DrawerLayout can have the layout for list to be shown inside navigation drawer and layout for main content view. In this example, the DrawerLayout contains two child views; one FrameLayout for main content, and a ListView for the navigation drawer. The FrameLayout is used to hold the child view’s populated by a Fragment at runtime.</p>
<pre class=""prettyprint lang-xml"">&lt;android.support.v4.widget.DrawerLayout 
xmlns:android=""http://schemas.android.com/apk/res/android""
    android:id=""@+id/drawer_layout""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent"" &gt;

    &lt;!-- The main content view --&gt;
    &lt;FrameLayout
        android:id=""@+id/content_frame""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent"" /&gt;

    &lt;!-- The navigation drawer list--&gt;
    &lt;ListView
        android:id=""@+id/drawer_list""
        android:layout_width=""240dp""
        android:layout_height=""match_parent""
        android:layout_gravity=""start""
        android:background=""#111""
        android:choiceMode=""singleChoice""
        android:divider=""@android:color/transparent""
        android:dividerHeight=""0dp"" /&gt;
&lt;/android.support.v4.widget.DrawerLayout&gt;</pre>
<h4><span id=""Key_Notes"">Key Notes:</span></h4>
<ul>
<li>The main content view is used as first child in the DrawerLayout. The XML order implies z-ordering and the drawer must be on top of the content.</li>
<li>The main content view is set to match the parent view’s width and height, because it represents the entire UI when the navigation drawer is hidden.</li>
<li>The width of drawer view is specified in dp (density independent pixels) units and the height matches the parent view. The drawer width should be no more than 320dp so the user can always see a portion of the main content.</li>
</ul>
<h2><span id=""5Initialize_the_Drawer_List"">5. Initialize the Drawer List</span></h2>
<p>Now, first initialize the navigation drawer’s list of items. As here the navigation drawer consists a ListView, so the list can be populated by an Adapter.</p>
<pre class=""prettyprint lang-java"">items = getResources().getStringArray(R.array.menus);

/* Getting reference to the DrawerLayout */
mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
mDrawerList = (ListView) findViewById(R.id.drawer_list);

/* Creating an ArrayAdapter to add items to mDrawerList */
ArrayAdapter adapter = new ArrayAdapter(this,
        R.layout.drawer_list_item, items);

/* Setting the adapter to mDrawerList */
mDrawerList.setAdapter(adapter);
</pre>
<h2><span id=""6Handle_Navigation_Click_Events"">6. Handle Navigation Click Events</span></h2>
<p>When the user selects an item in the drawer’s list, the system calls onItemClick() on the OnItemClickListener given to setOnItemClickListener(). In this example, selecting each item in the list inserts a different Fragment into the main content view FrameLayout.</p>
<pre class=""prettyprint lang-java"">// Setting item click listener to mDrawerList
mDrawerList.setOnItemClickListener(new OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
        selectedPosition = position;
        //Replace fragment content
        updateFragment();
        mDrawerLayout.closeDrawer(mDrawerList);
     }
});</pre>
<p>Notice that in the above example we are using updateFragment() method that takes responsibility to update the content based on navigation drawer menu click. For the sake of simplicity, example loads the same WebView  with different url. Add the following method to your activity.</p>
<pre class=""prettyprint lang-java"">public void updateFragment() {
    FragmentManager fragmentManager = getFragmentManager();
    WebViewFragment rFragment = new WebViewFragment();

    // Passing selected item information to fragment
    Bundle data = new Bundle();
    data.putString(""title"", items[selectedPosition]);
    data.putString(""url"", getUrl());
    rFragment.setArguments(data);

    //Replace fragment
    FragmentTransaction ft = fragmentManager.beginTransaction();
    ft.replace(R.id.content_frame, rFragment);
    ft.commit();
}
</pre>
<h2><span id=""7HandleDrawerOpen_and_Close_Events"">7. Handle Drawer Open and Close Events</span></h2>
<p>We can also listen to the drawer open and close event. To listen for drawer open and close events, we can extend the ActionBarDrawerToggle class. The ActionBarDrawerToggle implements DrawerLayout.DrawerListener.</p>
<pre class=""prettyprint lang-java"">/* Getting reference to the ActionBarDrawerToggle */
mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout, R.drawable.ic_drawer, R.string.drawer_open, R.string.drawer_close) {
    /* Called when drawer is closed */
    public void onDrawerClosed(View view) {
         //Put your code here
    }

  /* Called when a drawer is opened */
  public void onDrawerOpened(View drawerView) {
     //Put your code here
  }
};
/* Setting DrawerToggle on DrawerLayout */
mDrawerLayout.setDrawerListener(mDrawerToggle);
</pre>
<h2><span id=""8_Download_Complete_Source"">8. Download Complete Source</span></h2>
<p>Download Source Code on <a href=""https://github.com/javatechig/AndroidNavigationDrawer"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""Download Navigation Drawer Example"">Github</a></p>
<p><strong>MainActivity.java</strong></p>
<pre class=""prettyprint lang-java"">import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.widget.DrawerLayout;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.ListView;

public class MainActivity extends Activity {
    private DrawerLayout mDrawerLayout;
    private ListView mDrawerList;
    private ActionBarDrawerToggle mDrawerToggle;
    private String mTitle = ""Navigation Drawer"";
    private String[] items;
    private int selectedPosition;

    @SuppressLint(""NewApi"")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        getActionBar().setTitle(mTitle);

        items = getResources().getStringArray(R.array.menus);
        // Getting reference to the DrawerLayout 
        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        mDrawerList = (ListView) findViewById(R.id.drawer_list);

        /* Creating an ArrayAdapter to add items to mDrawerList */
        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this, R.layout.drawer_list_item, items);
        mDrawerList.setAdapter(adapter);
        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,
                R.drawable.ic_drawer, R.string.drawer_open, R.string.drawer_close) {

            /* Called when drawer is closed */
            public void onDrawerClosed(View view) {
                //Put your code here
            }

            /* Called when a drawer is opened */
            public void onDrawerOpened(View drawerView) {
                //Put your code here
            }
        };
        mDrawerLayout.setDrawerListener(mDrawerToggle);

        // Enabling Home button
        getActionBar().setHomeButtonEnabled(true);
        getActionBar().setDisplayHomeAsUpEnabled(true);

        // Setting item click listener for the listview mDrawerList
        mDrawerList.setOnItemClickListener(new OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
                selectedPosition = position;

                /* Replace fragment content */
                updateFragment();

               /* Closing the drawer */
                mDrawerLayout.closeDrawer(mDrawerList);
            }
        });

        /* Setting default fragment */
        selectedPosition = 0;
        updateFragment();
    }

    public void updateFragment() {
        /* Getting reference to the FragmentManager */
        FragmentManager fragmentManager = getFragmentManager();

        /* Creating fragment instance */
        WebViewFragment rFragment = new WebViewFragment();

        /* Passing selected item information to fragment */
        Bundle data = new Bundle();
        data.putString(""title"", items[selectedPosition]);
        data.putString(""url"", getUrl());
        rFragment.setArguments(data);

        /* Replace fragment */
        FragmentTransaction ft = fragmentManager.beginTransaction();
        ft.replace(R.id.content_frame, rFragment);
        ft.commit();
    }

    protected String getUrl() {
        StringBuffer url = new StringBuffer(""http://stacktips.com"");
        if (selectedPosition &gt; 0) {
            url.append(""/topics/"" + items[selectedPosition].toLowerCase());
        }
        return url.toString();
    }

    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
        mDrawerToggle.syncState();
    }
}</pre>
",0,"standard","post"
"Sencha Touch Sheet And ActionSheet Example","sencha-touch-sheet-and-actionsheet-example","Sheet is a floating model panel widget, what animates on top of the view. It is orientation aware; flipping the device causes the sheet to render in landscape mode. Sheet is a generic class for ActionSheet, Picker and MessageBox.","LIVE","<p>Sheet is a floating model panel widget, what animates on top of the view. Below image shows the class diagram of <code><strong>Ext.Sheet</strong></code> class. Sheet is subclass of Panel, which extends the functionality and provides flexibility to developer to add stack of other widgets to it. It is orientation aware; flipping the device causes the sheet to render in landscape mode. Sheet is a generic class for <code><strong>ActionSheet</strong></code>, <code><strong>Picker</strong></code> and <code><strong>MessageBox</strong></code>.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Sencha Sheet in class diagram"" class=""aligncenter size-full wp-image-3505"" height=""222"" loading=""lazy"" src=""/media/uploads/articles/361/Sencha-Sheet-in-class-diagram.png"" srcset="""" width=""402""></a></p>
<h2 class="""">Sencha Touch Sheet Example</h2>
<pre class=""prettyprint lang-javascript"">// Creating a Sheet Instance using Ext.Sheet Class constructor
var sheet = new Ext.Sheet({
		height  : 70,
		stretchX: true,
		stretchY: true,
		layout: { type: 'hbox', align: 'stretch'},
		items: [{html: ""&lt;img src='quote.png'&gt;""}],
	dockedItems: [{
            dock : 'right',
            xtype: 'button',
            text : 'Close',
            iconCls : 'delete',
		iconMask : true,
            handler: function () {
	sheet.hide();             
            }
        }]
});</pre>
<p>Here is the output of the above code.<br>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Sencha Sheet in action"" class=""aligncenter size-full wp-image-3504"" height=""222"" loading=""lazy"" src=""/media/uploads/articles/361/Sheet-in-action.png"" srcset="""" width=""214""></a></p>
<h2 class="""">Sencha Touch ActionSheet Example</h2>
<p>ActionSheet is a floating panel docked at the bottom of the screen, consists of stack of command buttons. ActionSheet is the way to allow user to choose one of the available buttons. It also has a title for providing a hint along with the Command buttons.</p>
<pre class=""prettyprint lang-javascript"">// Creating a ActionSheet Instance using Ext.ActionSheet Class constructor
var actions = new Ext.ActionSheet({
		items: [{
			text: 'Option 1',
			scope : this,
			handler : function(){
				actions.hide();
				}
             },{
	text : 'Option 2',
	scope : this,
	handler : function(){
		actions.hide();
                    }
             },{
	text : 'Cancel',
	scope : this,
	handler : function(){
		actions.hide();
		}
             }]
 });</pre>
<p>Here is the output of the above code<br>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Sencha ActionSheet Example"" class=""aligncenter size-full wp-image-3506"" height=""247"" loading=""lazy"" src=""/media/uploads/articles/361/ActionSheet-in-action.png"" srcset="""" width=""279""></a></p>",0,"standard","post"
"Confirm, Alert and Prompt MessageBox in Sencha Touch","confirm-alert-and-prompt-messagebox-in-sencha-touch","MessageBox widget is derived from Ext.Sheet class and allows the alert like functionality, with sencha default styles. MessageBox widget provides alert like functionality, with Sencha theming.","LIVE","<p>Sheet is a floating model panel widget, what animates on top of the view. Below image shows the class diagram of <code><strong>Ext.Sheet</strong></code> class. Sheet is subclass of Panel, which extends the functionality and provides flexibility to developer to add stack of other widgets to it. It is orientation aware; flipping the device causes the sheet to render in landscape mode. Sheet is a generic class for <code><strong>ActionSheet</strong></code>, <code><strong>Picker</strong></code> and <code><strong>MessageBox</strong></code>.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Sencha Sheet in class diagram"" class=""aligncenter size-full wp-image-3505"" height=""222"" loading=""lazy"" src=""/media/uploads/articles/362/Sencha-Sheet-in-class-diagram.png"" srcset="""" width=""402""/></a></p>
<p><code>MessageBox</code> widget is derived from Ext.Sheet class and allows the alert like functionality, with sencha default styles. MessageBox widget provides alert like functionality, with Sencha theming. There are three most commonly used MessageBox available in sencha touch, alert, confirm and prompt. Alert is used to display some information with one button. Confirm message allows user to take decision ‘yes’ or ‘no’ to execute set of functionality. And, prompt is used for allow user input data and process the result using a callback function.</p>
<p>Below example shows the usage of different MessageBox in action</p>
<pre class=""prettyprint lang-javascript"">
// For Alert type MessageBox
Ext.Msg.alert('Alert', 'Sencha Touch is Sexy ! Isn\'t it ?', Ext.emptyFn);

// For Confirm type MessageBox
Ext.Msg.prompt('Confirm', 'Please enter your name', function(text) {
     // text represents the user input value				
});

// For Alert type MessageBox
Ext.Msg.confirm(""Confirmation"", ""Are you sure you want to exit?"", Ext.emptyFn);</pre>
<p>Below is the output of the above code.<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Confirm, Alert and Prompt MessageBox in Sencha Touch"" class=""aligncenter size-full wp-image-3510"" height=""328"" loading=""lazy"" src=""/media/uploads/articles/362/Confirm-Alert-and-Prompt-MessageBox-in-Sencha-Touch.png"" srcset="""" width=""214""/></a></p>",0,"standard","post"
"Sencha Touch ToolBar example","sencha-touch-toolbar-example","This example will help you to create ToolBar in Sencha touch. ToolBar is an special kind of pannel that is docked to the either side of the screen.  The most commonly used panels are Panel, TabPanel, Toolbar and FormPanel.","LIVE","<p>This example will help you to create ToolBar in Sencha touch. ToolBar is an special kind of pannel that is docked to the either side of the screen. &nbsp;The most commonly used panels are Panel, TabPanel, Toolbar and FormPanel.&nbsp; </p><p>Panel provides the highest level of configuration and flexibility features. Panel provides ability to add items to either side, and they are called dock. &nbsp;We can create toolbar by calling the constructor of <code>Ext.Toolbar</code> class or by using xtype <code>toolbar</code>.&nbsp;Toolbar also provides the flexibility to contain the buttons, while docked to a container.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Sencha Touch ToolBar example"" class=""aligncenter size-full wp-image-3464"" height=""327"" loading=""lazy"" src=""/media/uploads/articles/363/Sencha-Touch-ToolBar-example.png"" srcset="""" width=""396""></a></p>
<p>Below example shows the usages of toolbar and docked items.</p>
<pre class=""prettyprint lang-javascript"">Ext.setup({
	icon : 'icon.png',
	tabletStartupScreen : 'tablet_startup.png',
	phoneStartupScreen : 'phone_startup.png',
	glossOnIcon : false,

	onReady : function() {
		var panel = new Ext.Panel({
			fullscreen : true,
			html : ""Example demonstrates the usage of Sencha Touch Ext.Toolbar class"",
			dockedItems : [{
				xtype : 'toolbar',
				dock : 'top',
				title : 'Docked Top',
				items : [{
					text : 'Back',
					iconCls : 'arrow_left',
					iconMask : true
				}, {
					xtype : 'spacer'
				}, {
					text : 'Home',
					iconCls : 'home',
					iconMask : true
				}]
			}, {
				xtype : 'toolbar',
				dock : 'bottom',
				ui : 'light',
				title : 'Docked Bottom',
				items : [{
					text : 'Exit',
					ui : ""decline""
				}]
			}]
		});

		Ext.apply(panel, {
			fullscreen : true,
			autoRender : true,
			hideOnMaskTap : false
		});

		panel.show();
	}
});</pre>
[box type=”note” border=”full”]Note that, this example will work only on web-kit browser that supports Sencha touch. For best results you may use Google chrome browser or safari.[/box]
Below is how the output of the above code.
<div style=""text-align: center;""><iframe height=""400"" loading=""lazy"" scrolling=""no"" src=""http://stacktips.com/examples/sencha/toolbar/index.html"" width=""90%"">Your browser does not support live preview. Consider using chrome, or safari.</iframe></div>
<p>The above example is using xtype to crate the toolbar, and both toolbar’s are docked to the top and bottom of the Panel. The <code>dockedItems</code> configuration option is used to specify one or more components to be added as docked items to the panel. Components can be docked to the top, right, bottom or left of the panel.</p>
<p>We can also create the toolbar objects using the <code>Ext.Toolbar</code> class constructor. Below is the code sample to crate the Toolbar using Ext.Toolbar class.</p>
<pre class=""prettyprint lang-javascript"">var toolBar = new Ext.Toolbar({
            id: 'mytoolbar',
            ui: 'light',
            title: 'Docked Bottom',
             items: [{
                text: 'Exit',
                ui: ""decline""
            }]            
 });
</pre>
<p><code>Ext.Panel</code> also provides the high end flexibility to manipulate docked items using a number of functions. We can use the <code>addDocked()</code> and <code>removeDocked()</code> functions to add or remove docked items, and onDockedAdd() or onDockedRemove() to perform actions upon addition or removal of docked items. The <code>getDockedItems()</code> method returns an array of the currently docked components.</p>
<p>The above example uses the “items” configuration option to add the items to Panel. However, we can also use add(), <code>insert()</code> and <code>delete()</code> methods available in <code>Ext.Panel</code> class to manipulate the Panel items.</p>",0,"standard","post"
"Sencha Touch and Basic Carousel Example","sencha-touch-and-basic-carousel-example","Carousel is a customized Panel, provides the ability to slide back and forth between different child items. It usually adds the items as in card layout and on slide it flips through the items.","LIVE","<p>Carousel is a customized Panel, provides the ability to slide back and forth between different child items. It usually adds the items as in card layout and on slide it flips through the items. Carousel can be created using either ways, using Ext.Carousel class constructor or by using <code><strong>carousel</strong></code> xtype. </p><p>Provides an indicator while toggling between items to notify the user to know where they are in the card stack. You can also disable the indicator by setting the <strong><code>indicator</code></strong>configuration property to false. The <strong><code>direction</code></strong> configuration property allows user to set the direction of the Carousel. Default is ‘horizontal’.</p>
<p>Below is the example demonstrating the usage of Carousel.</p>
<pre class=""prettyprint lang-javascript"">Ext.setup({
	icon : 'icon.png',
	tabletStartupScreen : 'tablet_startup.png',
	phoneStartupScreen : 'phone_startup.png',
	glossOnIcon : false,
	
	onReady : function() {
		
		var title = new Ext.Toolbar({
			 title: 'Carousel Example'
		});
		
		var actionBar = new Ext.Toolbar({
            id: 'mytoolbar',
            dock: 'bottom',
            ui: 'light',
             items: [{
                xtype: ""button"",
                ui: ""back"",
                text: ""Previous"",
                handler: function(){
	carousel.prev();
	}
              },{
	xtype:'spacer'
              },{
                xtype: ""button"",
                ui: ""forward"",
                text: ""Next"",
                handler: function(){
	carousel.next();
	}
              }]            
	     });
		
		var carousel = new Ext.Carousel({
	            direction: 'horizontal',
	            items: [{
	                title: 'Tab 1',
	                html: 'Carousel Tab 1'
	            },{
	                title: 'Tab 2',
	                html: 'Carousel Tab 2'
	            },{
	                title: 'Tab 3',
	                html: 'Carousel Tab  3'
	            }]
	        });
		
		var formBase = new Ext.Panel({
			layout : 'fit',
			pinHeaders: true,
			id: 'formbase',
			name: 'formBase',
			fullscreen : true,
			items: [carousel],
			dockedItems: [title, actionBar]
		});

	Ext.apply(formBase, {
		fullscreen : true,
		autoRender : true,
		hideOnMaskTap : false		
	});

	formBase.show();
	}
});
</pre>
[box type=”note” border=”full”]<span style=""color: #ff0000;""><strong>Note that, this example will work only on web-kit browser that supports Sencha touch. For best results you may use Google chrome browser or safari.</strong></span>[/box]
<h3>SenchaTouch Carousel Example In Action</h3>
<div style=""text-align: center;""><iframe height=""400"" loading=""lazy"" scrolling=""no"" src=""http://stacktips.com/examples/sencha/carousel/index.html"" width=""90%""></iframe></div>",0,"standard","post"
"Sencha Touch and Basic Form Control Example","sencha-touch-and-basic-form-control-example","The form is a visual container suite that contains all other UI elements like Textfield, Checkbox, Radio Button, etc. Apparently Sencha touch Form is making it easier to use the HTML5 specific functions and field types and attributes.","LIVE","<p style=""text-align: justify;"">The form is a visual container suite that contains all other UI elements like Textfield, Checkbox, Radio Button, etc. Apparently Sencha touch Form is making it easier to use the HTML5 specific functions and field types (such as e-mail, web addresses, and date pickers) and attributes (such as placeholder text). Form provides the configuration properties and methods to perform basic functionality and manipulations.</p>
<p style=""text-align: justify;"">Sencha Touch offers all implement native HTML5 input elements, with the addition of styling. The basic input fields includes like <strong>Text Field, Checkbox, URL, Email, Textarea,&nbsp; Number Field,&nbsp; Password and&nbsp; Radio fields</strong>, etc. Each of these input fields, except the Radio and Checkbox field slides the native keyboard to appear when focused and allow users to enter data into the fields. The Checkbox and Radio field functions similar as the native-web based UI component, except they are stylized via Sencha Touch’s own check icon to mimic iPhone style native application behavior.</p>
<p style=""text-align: justify;"">In this example, all of the UI controls like Text Field, Email Field, Password Field, check boxes, etc. are grouped in a Fieldset. Fieldset is basically used to group related elements in a form. It draws a box around the related elements added to it. Sencha touch default theme provides the appearance similar as “UITableView” in native iPhone.</p>
<p style=""text-align: justify;"">Date Picker field and Select fields give your users the ability to choose data from a set.&nbsp; The Date Picker field implements a Sheet, which is an overlay panel that slides in from the bottom of the screen and allows user to select values.</p>
<p style=""text-align: justify;"">The Select field, however, will display differently, based on the device. In smartphone devices it will appear as an overlay panel that slides in from the bottom, similar to Date Field. And iOS tablet it displays as the natively displayed dialogue-type of controls for selection. See the below image for the difference appearance of Select widget in a phone and tablet devices, (A) and (B) represents the Select field appearance in smartphone and tablet devices.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Sencha Touch Select Field Example"" class=""aligncenter size-full wp-image-3490"" height=""219"" loading=""lazy"" src=""/media/uploads/articles/365/Sencha-Touch-Select-Field-Example.png"" srcset="""" width=""553""></a></p>
<p>Below example demonstrates the usage of FormPanel. The form panel is added with the form elements like Fieldset, Textfield, Password field, Text Area, Date Picker, Radio Button, and checkbox.</p>
<pre class=""prettyprint lang-javascript"">Ext.setup({
	icon : 'icon.png',
	tabletStartupScreen : 'tablet_startup.png',
	phoneStartupScreen : 'phone_startup.png',
	glossOnIcon : false,

	onReady : function() {
		var formBase = new Ext.form.FormPanel({
			xtype:'form',
			pinHeaders: true,
			id: 'formbase',
			name: 'formBase',
			fullscreen : true,
			scroll: 'vertical',
			items: [{
				xtype: 'fieldset',
				title: 'Register User',
				instructions: 'Please enter the information below.',

	            items: [{
	                xtype: 'textfield',
	                name: 'name',
	                label: 'Name',
	                placeHolder: 'Enter Name',
	                autoCapitalize : true,
	                required: true,
	                useClearIcon: true
		        }, {
	                xtype: 'passwordfield',
	                name: 'password',
	                label: 'Password',
	                useClearIcon: true
	            }, {
	                xtype: 'emailfield',
	                name: 'email',
	                label: 'E-Mail',
	                placeHolder: 'test@test.com',
	                useClearIcon: true
	}, {
	                xtype: 'urlfield',
	                name: 'url',
	                label: 'URL',
	                placeHolder: 'http://stacktips.com',
	                useClearIcon: true
	},{
	                xtype: 'datepickerfield',
	                name: 'birthday',
	                label: 'D.O.B',
	                picker: { yearFrom: 1970 }
	}, {
	                xtype: 'selectfield',
	                name: 'rank',
	                label: 'Country',
	                options: [{
	                    text: 'India',
	                    value: 'india'
	                }, {
	                    text: 'Japan',
	                    value: 'japan'
	                }]
	},{
	                xtype: 'textareafield',
	                name: 'bio',
	                label: 'About'
	},{
	                xtype: 'checkboxfield',
	                name: 'suscribe',
	                label: 'Suscribe'
	}]
        }, {
            xtype: 'fieldset',
            defaults: {
                xtype: 'radiofield',
                labelWidth: '35%'
            },
            title: 'Select Gender',            
            items: [{
                name: 'gender',
                value: 'Male',
                label: 'Male'
            },{
                name: 'gender',
                label: 'Female',
                value: 'Female'
            }]
        },{
	xtype: 'fieldset',
            items: [{
                xtype: ""button"",
                ui: ""submit"",
                text: ""Submit""
            }]
        }]
	});

	Ext.apply(formBase, {
		pinHeaders: true,
		fullscreen : true,
		autoRender : true,
		hideOnMaskTap : false		
	});

	formBase.show();
	}
});</pre>
<p>Here is the output of the above program, displayed in two screens as more number of visual elements is added to screen.<br>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Sencha Touch and Basic Form Control Example"" class=""aligncenter size-full wp-image-3489"" height=""433"" loading=""lazy"" src=""/media/uploads/articles/365/Sencha-Touch-and-Basic-Form-Control-Example.png"" srcset="""" width=""558""></a></p>
<p>All the elements used in the above program, the form elements are statically added to form. We can also add and manipulate the form elements dynamically using the form methods add, addDocked, remove, removeAll.</p>
<fieldset id=""doyouknowfieldset"">
<div id=""doyouknowlegend"">Key Points to Remember</div>
<ol>
<li>A call to this doLayout function is required after adding a new component to an already rendered container, or possibly after changing sizing/position properties of child components. It force container’s layout to be recalculated.</li>
<li>By default, Containers use the AutoContainerLayout scheme which only renders child components, appending them one after the other inside the Container.</li>
</ol>
</fieldset><span style=""color: #ff0000;"">Note that, this example will work only on web-kit browser that supports Sencha touch. For best results you may use Google chrome browser or safari.</span><h3>SenchaTouch Form Example In Action</h3>
<div style=""text-align: center;""><iframe height=""400"" loading=""lazy"" scrolling=""no"" src=""http://stacktips.com/examples/sencha/formpannel/index.html"" width=""90%""></iframe></div>",0,"standard","post"
"Sencha Touch TabPanel example","sencha-touch-tabpanel-example","This example will help you to create TabPanel in Sencha touch. TabPanel is another type of container used to automatically set a top-docked or bottom-docked toolbar with automatically generated buttons for every child item.","LIVE","<p>This example will help you to create TabPanel in Sencha touch. TabPanel is another type of container used to automatically set a top-docked or bottom-docked toolbar with automatically generated buttons for every child item. </p><p>Tapping any of the button flips through items. Items added to TabPanel are known as “cards”. TabPanel can be created using either ways, using <code>Ext.TabPanel</code> class constructor or by using <code>tabpanel</code> xtype.</p>
<p>Below example shows the usages of Sencha Touch TabPanel</p>
<pre class=""prettyprint lang-javascript"">Ext.setup({
	icon : 'icon.png',
	tabletStartupScreen : 'tablet_startup.png',
	phoneStartupScreen : 'phone_startup.png',
	glossOnIcon : false,

	onReady : function() {
		var toolbar = new Ext.Toolbar({
			dock : 'top',
			title : 'Toolbar Sample'
		});

		var tabPanel = new Ext.TabPanel({
			dock : 'bottom',
			styleHtmlContent : true,
			tabBar : {
				dock : 'bottom',
				layout : {
					pack : 'center'
				}
			},
			defaults : {
				scroll : 'vertical'
			},
			items : [{
				title : 'Home',
				html : '&lt;h2&gt;Home&lt;/h2&gt;',
				iconCls : 'home'
			}, {
				title : 'Settings',
				html : '&lt;h2&gt;Settings&lt;/h2&gt;',
				iconCls : 'settings'
			}, {
				title : 'Favourites',
				html : '&lt;h2&gt;Favourit&lt;/h2&gt;',
				iconCls : 'favorites',
				badgeText : '2'
			}]
		});

		var panel = new Ext.Panel({
			fullscreen : true,
			dockedItems : [toolbar, tabPanel],
			layout : 'fit',
			scroll : 'vertical'
		});

		Ext.apply(panel, {
			fullscreen : true,
			autoRender : true,
			hideOnMaskTap : false
		});

		panel.show();
	}
});</pre>
<p>Below is the output of the following program, Figure (A) displays the TabBar docked to bottom and (B) represents the TabBar docked to top. Sencha touch doesn’t display icon for top docked TabBar even it is it is configured with <code>iconCls</code> property. The <code>badgeText</code> configuration property used to display the notification icon to user, as shown in the image below.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Sencha Touch TabPanel example"" class=""aligncenter size-full wp-image-3483"" height=""357"" loading=""lazy"" src=""/media/uploads/articles/366/Sencha-Touch-TabPanel-example.png"" srcset="""" width=""396""></a></p><span style=""color: #ff0000;"">Note that, this example will work only on web-kit browser that supports Sencha touch. For best results you may use Google chrome browser or safari.</span><h3>SenchaTouch TabPanel&nbsp;Example In Action</h3>
<div style=""text-align: center;""><iframe height=""400"" loading=""lazy"" scrolling=""no"" src=""http://stacktips.com/examples/sencha/tabpannel/index.html"" width=""90%""></iframe></div>",0,"standard","post"
"Introduction Sencha Touch User Interface Development","sencha-touch-user-interface-development","The Sencha Touch UI provides mixture of interactive widgets that can be displayed on screen. Ext.Container is the base class that may contain and manage other Components. It handles the basic behavior of containing items, namely adding, inserting and removing items.","LIVE","<p>The Sencha Touch UI provides mixture of interactive widgets that can be displayed on screen. Below image shows the class diagram of Sencha Touch container sub classes.</p>
<p><code>Ext.Container</code>&nbsp;is the base class that may contain and manage other Components. It handles the basic behavior of containing items, namely adding, inserting and removing items.&nbsp;Child components can be added to Container, by specifying the layout configuration property. We can either specifying child items of a Container using items configuration property or dynamically adding Components to a Container. </p><p>By default, Containers use the&nbsp;<code>AutoContainerLayout</code>&nbsp;scheme which only renders child components, appending them one after the other inside the Container. An example of these types of widgets is the Toolbar. Valid layout type values are,&nbsp;<code>auto</code>, (default),&nbsp;<code>card</code>,&nbsp;<code>fit</code>,&nbsp;<code>hbox</code>&nbsp;and&nbsp;<code>vbox</code>.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Introduction to Sencha Touch User Interface"" class=""aligncenter size-full wp-image-3438"" height=""371"" loading=""lazy"" src=""/media/uploads/articles/367/Introduction-to-Sencha-Touch-User-Interface.png"" srcset="""" width=""577""></a></p>
<p>Sencha provides a number of visual components out-of-the-box. Creating instances of these components can be done either by making calls to their constructors or declarative by <code>""xtype""</code>. The xtype is a key used for specifying the component class to be constructed. I’ve organized the following table to help us grasp the groups of UI components.</p>
<h2 class="""">Basic User Interface Components</h2>
[table tablesorter=”0″ class=”table table-bordered” style=”width: 50%;”]
xtype, UI Component Classes<br>
button, Ext.Button<br>
component, Ext.Component<br>
panel, Ext.Panel<br>
toolbar, Ext.Toolbar<br>
spacer, Ext.Spacer<br>
tabpanel, Ext.TabPanel<br>
[/table]
<h1>Sencha Touch Form Components</h1>
[table tablesorter=”0″&nbsp;style=”width: 50%;” class=”table table-bordered”]
xtype,UI Form Component Classes<br>
form,Ext.form.FormPanel<br>
checkbox,Ext.form.Checkbox<br>
select,Ext.form.Select<br>
fieldset,Ext.form.FieldSet<br>
numberfield,Ext.form.NumberField<br>
radio,Ext.form.Radio<br>
textarea,Ext.form.TextArea<br>
textfield,Ext.form.TextField<br>
[/table]
<p>The scope of this tutorial includes the basic UI components and form components but not all of them. To determine the <code>“xtype”</code> to use for a particular class of component, refer the Sencha Touch API Documentation for that class.</p>
<p><strong><a href=""http://docs.sencha.com/touch/2.0.2/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://docs.sencha.com/touch/2.0.2/</a></strong></p>
<h2 class="""">Sencha Touch UI Design tutorials</h2>
<p style=""padding-left: 30px;"" class="""">1.&nbsp;<a href=""http://stacktips.com/sencha-touch/sencha-touch-button-example/"" title=""Sencha Touch Button Example"">Sencha Touch Button Example</a></p>
<p style=""padding-left: 30px;"">2.&nbsp;<a href=""http://stacktips.com/sencha-touch/sencha-touch-toolbar-example/"" title=""Sencha Touch ToolBar example"">Sencha Touch ToolBar example</a></p>
<p style=""padding-left: 30px;"">3.&nbsp;<a href=""http://stacktips.com/sencha-touch/sencha-touch-tabpanel-example/"" title=""Sencha Touch TabPanel example"">TabPanel example</a></p>
<p style=""padding-left: 30px;"">4.&nbsp;<a href=""http://stacktips.com/sencha-touch/sencha-touch-and-basic-carousel-example/"" title=""Sencha Touch and Basic Carousel Example"">Basic Carousel Example</a></p>
<p style=""padding-left: 30px;"">5.&nbsp;<a href=""http://stacktips.com/sencha-touch/sencha-touch-and-basic-form-control-example/"" title=""Sencha Touch and Basic Form Control Example"">Sencha Touch Basic Form Control Example</a></p>
<p style=""padding-left: 30px;"">6.&nbsp;<a href=""http://stacktips.com/sencha-touch/sencha-touch-picker-with-slots-example/"" title=""Sencha Touch Picker with Slots Example"">Picker with Slots Example</a></p>
<p style=""padding-left: 30px;"">7.&nbsp;<a href=""http://stacktips.com/sencha-touch/sencha-touch-simple-and-grouped-list-example/"" title=""Sencha Touch Simple and Grouped List Example"">Simple and Grouped List Example</a></p>
<p style=""padding-left: 30px;"">8.&nbsp;<a href=""http://stacktips.com/sencha-touch/sencha-touch-sheet-and-actionsheet-example/"" style=""font-size: 1em;"" title=""Sencha Touch Sheet And ActionSheet Example"">Sheet And ActionSheet Example</a></p>
<p style=""padding-left: 30px;"" class="""">9.&nbsp;<a href=""http://stacktips.com/sencha-touch/confirm-alert-and-prompt-messagebox-in-sencha-touch/"" title=""Confirm, Alert and Prompt MessageBox in Sencha Touch"">Confirm, Alert and Prompt MessageBox in Sencha Touch</a></p>",0,"standard","post"
"Why Mobile Application is Different from other Conventional App Development","why-mobile-application-is-different-from-other-conventional-app-development","Modern mobile phones are small computers, with limited processing power by desktop standards, but power enough to run small Applications. Today’s phones are also by their very nature networked computers, efficiently sending and receiving digital data.","LIVE","<h3>Remarkable evaluation of mobile</h3>
<p>Today’s Smartphone platforms are still considered to be a complex landscape of constant innovation by many device manufactures and OEM owners. The outlook from the market survey from the last two years, the mobile market business is more striking, with most of the enterprises putting their emphasis on adapting and implementing enterprise mobility in their business model and portfolio.</p>
<p>Now-a-day’s mobile phones become so smart that it become a fully blown multimedia device with multiple features and appealing services. WAP, 3G, Polyphonic Ringtones, Themes, Games, Radios, Camera, Touch Gesture, Sensors, etc. are now merely standard features on a lot of today’s compact mobile phones. I can say mobile devices becoming more and more energy hungry reducing the operational time for the user. On the other hand third generation (3G) data network become more energy friendly when larger amount of data has to be downloaded. Moreover many more services/ applications have been created to access the social networking suits like Yahoo, Google, Facebook, Twitter, Flicker, etc.</p>
<h3>Why mobile application is different?</h3>
<p>Modern mobile phones are small computers, with limited processing power by desktop standards, but power enough to run small Applications. Today’s phones are also by their very nature networked computers, efficiently sending and receiving digital data. Mobile applications development is different from the conventional software development in a number of ways.</p>
<h4>Team Size</h4>
<p>Conventional Software development typically require teams of 12 to 30 people(varies in size). Because, most mobile application are less extensive they are typically developed by teams of 3 to 5 people, and often by lone programmers/designers.</p>
<h4>Budget</h4>
<p>Conventional software’s have budgets in the $1.5 million to $5 million range. Most mobile applications are implemented on budgets of less than $100,000. Essentially, the limited display capabilities of mobile phones, coupled with limitations on application size, make it difficult to spend the huge amounts. This is, in a way, a strong advantage.</p>
<h4>Development Cycle</h4>
<p>Conventional software typically takes two to three years to develop. Most mobile applications are developed in a few months. In other words, with a small team, and a small budget, you can develop and deploy professional-quality mobile Apps. For many developers, frustrated by the conditions of the conventional software market, it is one of mobile development’s strongest appeals.</p>
<h4>Networked Devices</h4>
<p>Mobile phones are networked devices by their very nature. Even though their processing capabilities are reminiscent of older computing technologies, their network capabilities are far superior.</p>
<h4>Deployment</h4>
<p>Mobile software/ application are (mostly) downloaded and installed by the user from different mediums. They are downloaded over the air network; some phones allow you to download an application to a computer, and then sync it to the phone. Consequently, the distribution channels for mobile games are quite different from PC games. Every mobile manufactures has come up with application distribution stores. Here is the list of officially declared application stores listed below</p>
<ul>
<li>Nokia Store</li>
<li>iStore for apple devices</li>
<li>Android market for all android enabled devices</li>
<li>Blackberry app world for all Blackberry RIM devices</li>
<li>Windows market for all windows enabled phones</li>
<li>Samsung app world</li>
<li>Opera store</li>
</ul>
<h4>Huge Potential Audience</h4>
<p>More than a billion mobile phones are in use today, and the number is growing day by day. In every developed country except the United States, a higher proportion of the population owns a mobile phone than owns a computer. While only a small portion of those phones are low end Java-enabled, and an even larger number run an high end OS like iOS, Android, Symbian or RIM OS, the numbers are increasing rapidly. Your potential audience is larger than the potential market for any other platform.</p>
<h4>Portability</h4>
<p>Portability is prized. People like being able to use whenever and wherever they choose. A phone may not be a great device by comparison to computers, but people have their phones with them almost all the time. Give them good application engages the audience</p>
<p><!--NoAds--></p>",0,"standard","post"
"Sencha Touch Simple and Grouped List Example","sencha-touch-simple-and-grouped-list-example","Lists are most flexible and widely used User interface control for mobile applications.Sencha Touch supports various types of lists, including simple, grouped, and nested list.","LIVE","<p style=""text-align: justify;"">Lists are most flexible and widely used User interface control for mobile applications. List is a well suited UI control for mobile application development, as they are well-suited for limited real estate devices. Sencha Touch supports various types of lists, including simple, grouped, and nested list.</p>
<p style=""text-align: justify;"">List object can be created either from the <code>Ext.List</code> class constructor or using “list” xtype. Object of <code>Ext.XTemplate</code> can be used for list layout template. List data is bound to a store object (instance of Ext.data.Store). </p><p style=""text-align: justify;"">Store provides flexibility to manipulate the list element, like add, remove or rename, and updates the list in UI. Sencha touch list store elements can be manipulated using the <code>bindStore()</code>, <code>getRecord()</code>, <code>getRecords()</code>, <code>getSelectedRecords()</code>, <code>getSelectedNodes()</code> and <code>indexOf()</code> methods.</p>
<h2 class="""">Sencha Touch List Event Handling</h2>
<p>List view provides different types of event handling, including <code>itemtap</code>, <code>onItemDisclosure</code>, <code>itemSwipe</code>, <code>itemdoubleTap</code> etc.</p>
<p><strong>onItemDisclosure</strong> is an list configuration property used to handle event for list item. By default it is set to ‘false’. By setting this configuration property to a function, it displays a navigation icon to each of the list row, and triggers the event listener on click.</p>
<p>Sencha touch also provides the extended flexibility to created grouped list with index bar. This can done using the <code>grouped</code> and <code>indexBar</code> Boolean attributes.</p>
<pre class=""prettyprint lang-javascript"">//registering model
Ext.regModel('Contact', {
		fields: ['name', 'number']
});

//declaring store which will be used by list
var store = new Ext.data.JsonStore({
	model  : 'Contact',
	sorters: 'name',



//registering model
	getGroupString : function(record) {
		return record.get('name')[0];
},

data: [{,
		{name: 'Robin', number: '+91-9538926202'},
		{name: 'Joy', number: '+91-9538926202'},
		{name: 'Adam',number: '+91-9538926202'},
		{name: 'Shyam', number: '+91-9538926202'},
		{name: 'James', number: '+91-9538926202'},
		{name: 'Jack', number: '+91-9538926202'},
		{name: 'Rajani', number: '+99-9999999999'},
		{name: 'Robin', number: '+91-9538926202'},
		{name: 'Robin', number: '+91-9538926202'},
		{name: 'Adam',number: '+91-9538926202'},
		{name: 'Shyam', number: '+91-9538926202'}]
	});



var list = new Ext.List({
fullscreen: true,
	 itemTpl : '&lt;div class=""list-item-title""&gt;{name}&lt;/div&gt;' +
' &lt;div class=""list-item-narrative""&gt;{number}&lt;/div&gt;',
       width : '100%',
       scroll : 'vertical',
	grouped : true,
	indexBar: true,
	store:store,

onItemDisclosure : function(list, record, index){
	alert(""Name: ""  + list.store.data.items[index].data.name +
	""  Number:  "" + list.store.data.items[index].data.number +
	"" At Position ""  + index);
	},

listeners: {
// Handler for the item tap event
        itemtap: function(list, index, e, event) {
alert(""Name: ""  + list.store.data.items[index].data.name+ 
""  Number:  "" + list.store.data.items[index].data.number+
"" At Position ""  + index);
            }
	 }
});</pre>
<p>We can use CSS styling for list template for styling the list component. Create a file style.css and copy the below code, and then save it inside your resources directory. The CSS need to be loaded from the index.html, and then can be used for XTemplate. Below are the stylesheets used in this below code sample</p>
<pre class=""prettyprint lang-css"">.list-item-title {
float: left;
width: 100%;
font-size: 90%;
white-space: nowrap;
overflow: hidden;
    text-overflow: ellipsis;
}

.list-item-narrative {
float: left;
width: 100%;
color: #666666;
font-size: 70%;
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
}</pre>
<p>Below is the output of different Sencha touch list control.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Sencha Touch Simple and Grouped List Example"" class=""aligncenter size-full wp-image-3521"" height=""345"" loading=""lazy"" src=""/media/uploads/articles/369/Sencha-Touch-Simple-and-Grouped-List-Example.png"" srcset="""" width=""558""></a></p>
<fieldset id=""doyouknowfieldset"">
<div id=""doyouknowlegend"">Key Points to Remember</div>
<ol>
<li>While using grouping in sencha list we much specify a method getGroupString on the store to maintain grouping</li>
<li>By default sencha grouping, index bar and item disclosure item is disabled.</li>
</ol>
</fieldset>",0,"standard","post"
"Sencha Touch Picker with Slots Example","sencha-touch-picker-with-slots-example","Picker is an overlay panel, slides from the bottom and allows user to choose value from given set. It also allows the swipe gesture input event. Picker can have the slots configuration property used to define the number of sections.","LIVE","<p style=""text-align: justify;"">Picker is an overlay panel, slides from the bottom and allows user to choose value from given set. It also allows the swipe gesture input event. Picker can have the <code><strong>slots</strong></code> configuration property used to define the number of sections. </p><p style=""text-align: justify;"">Here in the below example we have used two sections. One is for specifying the time in hours and other to define the am/pm. DatePicker is a specialized Picker, derived from <strong><code>Ext.Picker</code></strong> class, designed to provide user flexibility to select date.</p>
<p>Below example shows the Sencha Touch Picker in action</p>
<pre class=""prettyprint lang-javascript"">var picker = new Ext.Picker({
	ui: 'light',
	slots: [{
      name : 'hours',
      title: 'Hours',
       data : [
                {text: '01:00', value: 1},
                {text: '02:00', value: 2},
                {text: '03:00', value: 3},
                {text: '04:00', value: 4},
                {text: '05:00', value: 5},
                {text: '06:00', value: 6},
                {text: '07:00', value: 7},
                {text: '08:00', value: 8},
                {text: '09:00', value: 9},
                {text: '10:00', value: 10},
                {text: '11:00', value: 11},
                {text: '12:00', value: 12}
            ]
        },{
            name : 'ampm',
            title: 'AM/PM',
            data : [
                {text: 'AM', value: 'am'},
                {text: 'PM', value: 'pm'}
            ]
        }]
});</pre>
<p>In the above example, we are creating the instance of the picker widget, using the Ext.Picker class constructor. <strong><code>show</code></strong> and <code><strong>hide</strong></code> method is used to display and remove the picker from the view.</p>
<p>Below is the output of the above code.<br>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Sencha Touch Picker with Slots Example"" class=""aligncenter size-full wp-image-3514"" height=""328"" loading=""lazy"" src=""/media/uploads/articles/370/Sencha-Touch-Picker-with-Slots-Example.png"" srcset="""" width=""322""></a></p>",0,"standard","post"
"Best IDE for Grails/Groovy – NetBeans, Spring or IntelliJ?","best-ide-for-grails-groovy-netbeans-spring-or-intellij","Integrated development environment (IDE) brings a whole host of features like auto complete, re-factoring  source control and more for the developers. However, when it comes to Groovy and Grails, it becomes crucial for the developers to choose the right kind of IDE to improve the productivity on the go.
","LIVE","<p>Gone are the days when developers or programmers were solving all the programming issues on their own without using any tool. In today’s highly competitive software application development world, spending hours of time just to code everything right may not be a feasible solution for the developers, and that’s where the significance of IDE (Integrated Development Environment) comes into the picture, specifically when you’re developing applications using Groovy and Grails.</p>
<p>Integrated development environment (IDE) brings a whole host of features like auto complete, re-factoring  source control and more for the developers. However, when it comes to Groovy and Grails, it becomes crucial for the developers to choose the right kind of IDE to improve the productivity on the go.</p>
<p>While Groovy is written for the JVM and uses features and syntax of Java, Grails is built upon Hibernate and Spring. Most of the developers are using Eclipse for developing any kind of Java applications, but when it comes to the Grails, developers have to consider various plugins and IDEs to easily and effectively develop applications based on Groovy and Grails. So, which are the best IDEs that developers can use to build applications based on Groovy and Grails? Let’s find it out!</p>
<h2>NetBeans</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""netbeans-ide"" class=""alignright size-full wp-image-12159"" height=""191"" loading=""lazy"" sizes=""(max-width: 189px) 100vw, 189px"" src=""/media/uploads/articles/372/Netbeans-IDE.png"" srcset="""" width=""189""/></a>NetBeans is a free and open source IDE which can be used for Groovy/Grails development. NetBeans 6.5 or above versions support Groovy/ Grails development. NetBeans comes with a Groovy editor with various integrated tools and offers features like code completion, providing name of dynamic methods for grails domain and controller class. It is light and offers great functional features.</p>
<p>NetBeans is a free IDE tool, which brings tons of benefits for the developers. However, like any other tool or technology, it also has some drawbacks: it is too slow and many developers using it have experienced slow code completion.</p>
<p>If you have a tight budget and can’t afford a paid IDE, this is a best choice. Moreover, it has been integrated with multiple Grails actions. You can easily control the deployment status of your Grails application from the Service window, you can also run Grails generator, Grails commands and create Groovy Server Pages (GSPs) on the go.</p>
<p> </p>
<h2>Spring Tool Suite (STS)</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""sts"" class=""alignright size-full wp-image-12161"" height=""189"" loading=""lazy"" src=""/media/uploads/articles/372/STS.png"" srcset="""" width=""171""/></a>STS for Grails is an eclipse based IDE, which is free and offers out-of-the-box features; all this makes it highly popular among the developer community. Many developers are switching to STS from NetBeans because of better code completion support provided by it. STS is faster and improves developer’s productivity significantly.</p>
<p>Although STS for Grails is not as feature rich as NetBeans, we can expect an improvement on this front as Grails is owned by Spring. If you’re looking for a strong alternative of NetBeans, then STS is without any doubt a great option for you!</p>
<h2>IntelliJ</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""intellijidea-spring"" class=""alignright size-full wp-image-12160"" height=""189"" loading=""lazy"" src=""/media/uploads/articles/372/IntelliJIDEA-Spring.png"" srcset="""" width=""221""/></a>IntelliJ IDE is one of the most popular IDE tools for Grails Development. This amazing IDE comes in two forms: one is free IDEA Community Edition and other one is commercialized IDE known as IntelliJ IDEA Ultimate. There are many advantages of IntelliJ, which simplifies the development of your Groovy and Grails applications.</p>
<p>IntelliJ offers many out-of-the-box features like code completion, on the fly code analysis, Groovy to Java converter, built-in Groovy Shell, integrations with different frameworks other than Grails, like Hibernate, Play and so on. Overall, it offers excellent support for Groovy and Grails. Moreover, it indexes files much faster than any other IDEs.</p>
<h2>Groovy/Grails Tool Suite™ for Eclipse</h2>
<div class=""row-fluid tools--wrapper"">
<section class=""span8"">
<p class=""tools--description""><a href=""http://stacktips.com"" target=""_self""><img alt=""eclipse"" class=""alignright size-full wp-image-12164"" height=""250"" loading=""lazy"" sizes=""(max-width: 250px) 100vw, 250px"" src=""/media/uploads/articles/372/eclipse.png"" srcset="""" width=""250""/></a>The Groovy/Grails Tool Suite is a complete Eclipse-based development environment optimized for developing, debugging and executing Groovy and Grails applications. A new perspective, new views and wizards ensure an intuitive and familiar Eclipse experience when working with the Groovy language and Grails framework. It provides support for the latest versions of Groovy and Grails, and comes on top of the latest Eclipse releases.</p>
<p class=""tools--description"">Included with the Groovy/Grails Tool Suite is the developer edition of Pivotal tc Server, the drop-in replacement for Apache Tomcat. With its Spring Insight console, tc Server Developer Edition provides a graphical real-time view of application performance metrics that lets developers identify and diagnose problems from their desktops.</p>
<p class=""tools--description"">The Groovy/Grails Tool Suite supports application targeting to local, virtual and cloud-based servers. It is freely available for development and internal business operations use with no time limits, fully open-source and licensed under the terms of the Eclipse Public License.</p>
</section>
</div>
<h2>Final Verdict</h2>
<p>The above discussed IDEs can easily help you simplify your Groovy and <a href=""http://www.cygnet-infotech.com/java/grails-development"" rel=""nofollow noopener noreferrer"" target=""_blank"">Grails application development</a>. However, if you don’t have any price constraint, then IntelliJ is the best option. On the other hand, if you wish to go for a FREE IDE, then you may two options. If you choose NetBeans, you may get plenty of features, but you may have to compromise on speed that has been offered by STS for Grails.</p>
",0,"standard","post"
"Creating HelloWorld Application in PhoneGap Cordova Plugin","creating-hello-world-using-phonegap-cordova-plugin","PhoneGap is a web-based mobile development framework, used to develop cross platform mobile application development. It is based on the open-source Cordova project
","LIVE","
<p align=""justify"">PhoneGap is a web-based mobile development framework, used to develop cross platform mobile application development. It is based on the open-source Cordova project. PhoneGap allows you to use standard web technologies such as HTML5, CSS3, and JavaScript for cross-platform development, avoiding each mobile platform’s native development language. Applications execute within wrappers targeted to each platform, and rely on standards-compliant API bindings to access each device’s sensors, data, and network status.</p>
<p>To develop Cordova applications, you must install the android SDK, and eclipse ADT plugin. I assume you already have the setup ready for android development. If not done yet, you may follow the steps from the below link</p>
<h2><span id=""1_Download_Latest_PhoneGap_Plugin"">1. Download Latest PhoneGap Plugin</span></h2>
<p>You can download the PhoneGap latest version plugin from official PhoneGap website (below is the direct download link). Here you can find all the available release versions of PhoneGap, but we would recommend top take the latest stable release version of PhoneGap. You may download the PhoneGap 2.9.0, which is released on 26 June 2013. In this series of tutorial we will be using PhoneGap 2.9.0 version for the demonstration.</p>
<p><strong><a href=""http://phonegap.com/install/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://phonegap.com/install/</a></strong></p>
<h2><span id=""2_Creating_an_new_android_project"">2. Creating an new android project</span></h2>
<p>Now let us create a sample HelloWorld project in android using eclipse.</p>
<ol>
<li>Launch the Eclipse application.</li>
<li>Select the New Project menu item.</li>
<li>Choose Android Project from Existing Code from the resulting dialog box, and press next. You have to select some of the android configurations like build target, min version, package name, etc. Just follow the steps and then it will create a new android project for you. Your project structure will look same as the image below.</li>
</ol>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Creating HelloWorld project using PhoneGap"" class=""aligncenter size-full wp-image-3417"" height=""786"" loading=""lazy"" sizes=""(max-width: 1167px) 100vw, 1167px"" src=""/media/uploads/articles/373/Creating-HelloWorld-project-using-PhoneGap.png"" srcset="""" width=""1167""/></a></p>
<p> </p>
<h1></h1>
<h2><span id=""3_Adding_Html_CSS_and_JavaScript_files_to_project"">3. Adding Html, CSS and JavaScript files to project</span></h2>
<p>Now, create a folder named www under assets folder in your project directory. This folder will contain your entire html, CSS, JavaScript files. You may use some of the JavaScript frameworks of your choice to develop your user interface. Some of the top ones are Sencha Touch, JQueery mobile, iUI, etc.</p>
<p>In this exmple, we are using jQueery Mobile Framework for the user interface development. Here in this example, we will develop Sample JQueery page that displays “Hello World” to user.<br/>
Let us take closer look at the index.html file</p>
<pre escaped=""true"" lang=""html"" line=""1"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;meta charset=""utf-8""&gt;
      &lt;meta name=""viewport"" content=""initial-scale=1.0, user-scalable=no""&gt;
      &lt;meta name=""apple-mobile-web-app-capable"" content=""yes""&gt;
      &lt;meta name=""apple-mobile-web-app-status-bar-style"" content=""black""&gt;
      &lt;title&gt;&lt;/title&gt;

      &lt;!-- stylesheets --&gt;
      &lt;link rel=""stylesheet"" href=""jquery.mobile-1.3.1.min.css""&gt;      
      &lt;link rel=""stylesheet"" href=""codiqa.ext.css""&gt;    

      &lt;!-- jQuery and jQuery Mobile framework libs--&gt;  
      &lt;script src=""jquery-1.9.1.min.js""&gt;&lt;/script&gt;
      &lt;script src=""jquery.mobile-1.3.1.min.js""&gt;&lt;/script&gt;      
      &lt;script src=""codiqa.ext.js""&gt;&lt;/script&gt;

      &lt;!-- for codova plugins --&gt;
      &lt;script type=""text/javascript"" src=""cordova.js""&gt;&lt;/script&gt;

   &lt;/head&gt;
   &lt;body&gt;
      &lt;!-- Home --&gt;
      &lt;div data-role=""page"" id=""page1""&gt;
         &lt;div data-theme=""a"" data-role=""header""&gt;
            &lt;h4&gt;
               PhoneGap Example
            &lt;/h4&gt;
         &lt;/div&gt;
         &lt;div data-role=""content""&gt;
         	Hello World!
         &lt;/div&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;</pre>
<p>The above html code is pretty simpler one. As as-usual we have to load the JavaScript and CSS files used in our application.</p>
<h2><span id=""4_Add_PhoneGap_plugin_and_do_the_required_configuration"">4. Add PhoneGap plugin and do the required configuration</span></h2>
<p>There are three basic configurations required to execute PhoneGap application</p>
<ol>
<li>If you look at the html above, we are loading cordova.js file from index.html. This is required as a part of PhoneGap library initialization.</li>
<li>cordova-2.9.0.jar file to be placed as a part of libs folder. In ideal case the jar file is always linked to build path after placing to libs. But, in some case we have to manually add as an external jar file in the build path.</li>
<li>config.xml file should be placed inside res/xml directory. This contains the mapping between the JavaScript and native code. Note that this is one of the important thing to do, in order to make a PhoneGap configuration.</li>
</ol>
<h2><span id=""5_Load_URL_in_PhoneGap"">5. Load URL in PhoneGap</span></h2>
<p>Now, we are done with the most of the configuration stuffs. As an next step, let us create an sample activity “MainActivity.java” in src folder inside your application.</p>
<p>Below is the code snippet for MainActivity.java file<br/>
This activity should extend DroidGap activity in order to override the PhoneGap library implementation. This will enforce us to override onCreate() method. The older version of PhoneGap using loadUrl() method callback to load the first html page.</p>
<p><code>super.loadUrl(""file:///android_asset/www/index.html"");</code></p>
<p>From Cordova version 2.9.0 onwards, the load url configuration will reside inside config.xml file. If you are using Cordova version 2.9.0, you can use the below callback to load the html page.</p>
<p><code>super.loadUrl(Config.getStartUrl());</code></p>
<p>Below is my activity code</p>
<pre escaped=""true"" lang=""java"" line=""1"">package com.javatechig.droidgap;

import org.apache.cordova.Config;
import org.apache.cordova.DroidGap;
import android.os.Bundle;

public class MainActivity extends DroidGap
{
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        // Set by &lt;content src=""index.html"" /&gt; in config.xml
        super.loadUrl(Config.getStartUrl());
        //super.loadUrl(""file:///android_asset/www/index.html"")
    }
}</pre>
<h2><span id=""6_Output"">6. Output</span></h2>
<p>Now run the application to your emulator or device. You will get to see the output as shown below</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Creating HelloWorld project using PhoneGap output"" class=""aligncenter size-full wp-image-3419"" height=""589"" loading=""lazy"" sizes=""(max-width: 696px) 100vw, 696px"" src=""/media/uploads/articles/373/Creating-HelloWorld-project-using-PhoneGap-output.png"" srcset="""" width=""696""/></a></p>
",0,"standard","post"
"Main Steps to Create Sencha Touch Application","main-steps-to-create-sencha-touch-application","This section describes how to get started with Sencha Touch application. It explains the basic steps for using Sencha Touch to create Web applications for touch-based devices.","LIVE","<p>This section describes how to get started with Sencha Touch application. It explains the basic steps for using Sencha Touch to create Web applications for touch-based devices.&nbsp;This document is written for developers who want to quickly get started using Sencha Touch to create Web applications for touch-based devices. It assumes you have downloaded the Sencha Touch libraries. Have a properly installed and configured Web server, and are familiar with Web application development and concepts such as JavaScript, HTML, Cascading Style Sheets (CSS), Web servers, and so forth.</p>
<h2 class="""">1. Introduction to Sencha Touch</h2>
<p>Sencha Touch is a JavaScript framework for creating Web applications targeted to touch-based devices. With Sencha Touch, you can use the skills you already possess to create an elegant and consistent user experience with minimal effort. Sencha Touch makes use of technologies such as HTML and CSS to provide native-quality application experiences without needing plugins.</p>
<h2 class="""">2.&nbsp;Using Sencha Touch Main Steps</h2>
<p>For using Sencha touch here are the basics steps need to perform.</p>
<h3 class="""">Set up your Environment</h3>
<ul>
<li>Download the Sencha Touch Libraries.</li>
<li>Make sure your development environment is set up.</li>
<li>Make sure your development and production Web servers are properly installed and configured.</li>
<li>Know the name of the CSS file you want your application to use. You will need this file name when you create the application HTML file in the next step.</li>
</ul>
<h3 class="""">Create the HTML File</h3>
<p>In the editor of your choice, create the HTML file for your application. For an example of an application HTML file, see Detailed Steps: Creating the HTML File.</p>
<p>The application HTML file is where you specify links to:</p>
<ul>
<li>The default Sencha Touch cascading style sheet (CSS) files, sencha-touch.css.</li>
<li>The application’s CSS file. For example, <code>mycss.css</code></li>
<li>The version of the Sencha Touch library you want the application to use.</li>
</ul>
<p>Sencha recommends to use the debug version of the library, <code>sencha-touch-debug.js</code>, during application development and testing. The debug version helps you detect and troubleshoot errors, as well as to see exactly where in the library errors occur.&nbsp;Change the HTML file to link to the production version of the library, <code>sencha-touch.js</code>, before you put your application into production.</p>
<p>Save the HTML file with a logical name such as <code>index.html</code>. After you have finished writing the application and have put it on your local Web server, you will point your browser to this file name on your local Web server in order to view and test your application.</p>
<h3 class="""">Create Application JavaScript files</h3>
<p>&nbsp;</p>
<p>Once you have created the HTML file, you are ready to create the application JavaScript file. My next example shows the entire contents of the application JavaScript file and breaks down the creation of the application code into steps.</p>
<h4><a href=""http://stacktips.com/sencha-touch/creating-hello-world-in-sencha-touch/"" title=""Creating “Hello World!” Using Sencha Touch"" style=""font-weight: normal;"">Creating “Hello World!” Using Sencha Touch</a></h4>
<h3 class="""">Test the Application</h3>
<p>Upload the library files to the destination directory on your Web server.</p>
<ul>
<li>Upload the application files (html, js, and CSS) and all referenced files to the destination directory on your Web server.</li>
<li>Point your browser to http://localhost:8080/index.html, where:</li>
</ul>
<p>Localhost: is the Web server host name or IP address</p>
<p>8080 is the Web server port number</p>
<p>“index.html” is the name of the application HTML file.</p>",0,"standard","post"
"Sencha Touch Licence and Installation process","sencha-touch-licence-and-installation-process","This section explains Sencha Touch available Licence options and installation process. Sencha Touch is available with both opensource and commnercial software licence. Know more.","LIVE","<p>This section explains Sencha Touch available Licence options and installation process. Sencha Touch is available with both opensource and commercial software licence.</p>
<h2 class="""">Sencha Touch Licence</h2>
<p>Sencha Touch is licensed under free commercial and open source licenses for application development, and a paid commercial license for OEM uses.</p>
<h2>Commercial Software License</h2>
<p>This is the appropriate option if you are creating proprietary applications and you are not prepared to distribute and share the source code of your application under the GPL. This is now available at no charge to developers.</p>
<h2 class="""">Open Source License</h2>
<p>Sencha is an avid supporter of open source software. This is the appropriate option if you are creating an open source application with a license compatible with the GNU GPL license v3. Although the GPLv3 has many terms, the most important is that you must provide the source code of your application to your users so they can be free to modify your application for their own needs. Visit below link to get more information on Sencha Touch Software License.</p>
<p><strong><a href=""http://www.sencha.com/products/touch/license/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://www.sencha.com/products/touch/license/</a></strong></p>
<h2 class="""">Download &amp; Installation</h2>
<ol>
<li>Download the Sencha Touch Libraries</li>
<li>Make sure your development environment is set up</li>
<li>Make sure your development and production Web servers are properly installed and configured</li>
<li>Know the name of the CSS file you want your application to use. You will need this file name when you create the application HTML file in the next step</li>
</ol>
<h2 class="""">Sencha Touch Dev Environment and IDE</h2>
<p>Software developers spend their workday in an integrated development environment. An IDE is a set of tools that aids easy application development, by allowing developers do the following things</p>
<ul>
<li>Write and edit source code</li>
<li>Re-factoring code</li>
<li>Find and fix errors quickly</li>
<li>Code syntax intelligence/auto complete</li>
<li>Navigate code with ease</li>
<li>Compile and execute code</li>
<li>Browse class and subroutines</li>
<li>Integrated API documentations</li>
</ul>
<p>It’s no wonder developers moved towards an IDE for their day to day development, but which IDE is right for you? What features you want? Here are the below Integrated Development Environments (IDE) Sencha touch supports</p>
<ol>
<li>Eclipse Based IDEs</li>
<li>AptanaIDE</li>
<li>Spket&nbsp; IDE</li>
</ol>",0,"standard","post"
"Creating “Hello World!” Using Sencha Touch","creating-hello-world-in-sencha-touch","This section will walk you step-by-step through the process of creating a Sencha Touch application. Here as a first step we will create a basic “Hello World!” application.","LIVE","<p>This section will walk you step-by-step through the process of creating a Sencha Touch application. Here as a first step we will create a basic “Hello World!” application. The following sections describe the application HTML and JavaScript files and break down creation of the application code into steps.</p>
<ul>
<li>Creating the HTML (index.html) file</li>
<li>Creating the Application JavaScript File</li>
<li>Testing the Application</li>
</ul>
<h2 class=""""><span id=""1_Creating_the_HTML_indexhtml_file"">Creating the HTML (index.html) file</span></h2>
<p>The first step in creating a Sencha Touch application is to create an HTML file that links to Sencha Touch and application CSS files, the Sencha Touch library, and the application JavaScript file.The “Hello World!” application HTML file is index.html and its contents are as follows:</p>
<ul>
<li>The default CSS style sheet for Sencha Touch (sencha-touch.css)</li>
<li>The Sencha Touch library (during development and testing, use the debug version of the Sencha Touch library, sencha-touch-debug.js)</li>
<li>The applications JavaScript file (app.js)</li>
</ul>
<p>&nbsp;</p>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=""utf-8""&gt;
&lt;title&gt;Hello World !!&lt;/title&gt;
&lt;!-- Sencha Touch CSS --&gt;
&lt;link rel=""stylesheet"" href=""lib/sencha-touch.css"" type=""text/css""&gt;
&lt;!-- Sencha Touch JS --&gt;
&lt;script type=""text/javascript"" src=""lib/sencha-touch-debug.js""&gt;&lt;/script&gt;

&lt;!-- Application JS --&gt;
&lt;script type=""text/javascript"" src=""src/app.js""&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;&lt;/body&gt;
&lt;/html&gt;</pre>
<p>This document does not describe the any CSS file in detail because its properties are straight-forward and should be self-explanatory.</p>
<p>The debug version of the library is not compressed and it contains documentation. This can be helpful if an error occurs, as it allows you to see exactly where in the library the error occurred. Normally, in production, you would use sencha-touch.js, which is the version of the library that is optimized for production.</p>
[box type=”note” border=”full” icon=”none”]NOTE: Notice that the &lt; body&gt; tag in the HTML file is empty. This is because Sencha Touch automatically generates the page content via JavaScript.[/box]
<h2 class=""""><span id=""2_Creating_the_Application_JavaScript_File"">Creating the Application JavaScript File</span></h2>
<p>Once you have created the HTML file, you are ready to create the application JavaScript file. This section shows the entire contents of the application JavaScript file and breaks down the creation of the application code into steps.</p>
<p>The “Hello World!” application JavaScript file is app.js and its contents are as follows:</p>
<pre class=""prettyprint lang-javascript"">Ext.setup({
icon : 'icon.png',
tabletStartupScreen : 'tablet_startup.png',
phoneStartupScreen : 'phone_startup.png',
glossOnIcon : false,

onReady : function() {
var formBase = new Ext.form.FormPanel({
		html: ""Hello World!!""
	});

Ext.apply(formBase, {
	fullscreen : true,
	autoRender : true,
	hideOnMaskTap : false
});

formBase.show();
}
});</pre>
<h2 class=""""><span id=""3_Detailed_Explanations_for_appjs"">Detailed Explanations for app.js</span></h2>
<p>The JavaScript code in the “Hello World!” application file defines:</p>
<ul>
<li>Beginning the Ext Application Script File&amp; applying the application properties/ attributes</li>
<li>Defining the Panel Component</li>
<li>Adding Panel to screen</li>
</ul>
<p>Beginning the Ext Application Script File:</p>
<pre class=""prettyprint lang-javascript"">Ext.setup({
	icon : 'icon.png',
	tabletStartupScreen : 'tablet_startup.png',
	phoneStartupScreen : 'phone_startup.png',
	glossOnIcon : false,

	onReady : function() {
	}
});</pre>
<p>The Ext.setup method sets up a page for use on a touch-enabled device. It allows to set various start up properties and behaviors for your application. For detailed information on the Sencha Touch API, including this method, see the&nbsp;<a href=""http://www.sencha.com/deploy/touch/docs/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Sencha Touch API Documentation</a>.</p>
<p>The “Hello World!” application code specifies the following start up properties:</p>
<ul>
<li><strong>tabletStartupScreen</strong> Property, Specifies the name of the icon file to use as the application’s start up screen on tablet devices.</li>
<li><strong>phoneStartupScreen</strong> Property, Specifies the name of the icon file to use as the application’s start up screen on phone devices.</li>
<li><strong>icon</strong> Property, Specifies the name of the application’s default icon file, icon.png.</li>
<li><strong>glossOnIcon</strong> Property, Specifies whether you want the gloss effect to be applied to the default icon. In this case, the value is set to false indicating not to add gloss to the default icon.</li>
<li><strong>onReady</strong> Method. Specifies the function to run when the browser’s Document Object Model (DOM) is ready after the application HTML file has loaded.</li>
</ul>
<p>Within the function in the onReady method, you define the rest of the application code.</p>
<p><b>Defining the Panel Component:</b></p>
<p>A FormPanel component is the object of Ext.form.FormPanel, called formBase which contains html attributes to display the html content on the panel. &nbsp;In this application, components are created with the following syntax:</p>
<pre class=""prettyprint lang-javascript"">var objectName = new Ext.ComponentName({

objectDefinition

});</pre>
<p>Where,</p>
<ul>
<li>objectName is the name of the variable used to reference the object.</li>
<li>ComponentName is the name of the object’s class.</li>
<li>objectDefinition defines the object’s properties and behavior</li>
</ul>
<h2 class=""""><span id=""4_Testing_the_Application"">Testing the Application</span></h2>
<p>Now deploy the complete project in your webserver. Here in this example I am using Apache Tomcat server. Now hit the URL in mobile browser <strong>http://:/Sencha/HelloWorld/index.html</strong></p>
<h2 class=""""><span id=""5_Output"">Output</span></h2>
<p>Here, is the output looks like this</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Creating “Hello World!” Using Sencha Touch"" class=""aligncenter size-full wp-image-3402"" height=""493"" loading=""lazy"" sizes=""(max-width: 682px) 100vw, 682px"" src=""http://stacktips.com/wp-content/uploads/2013/09/Creating-“Hello-World”-Using-Sencha-Touch.png"" srcset=""https://stacktips.com/wp-content/uploads/2013/09/Creating-“Hello-World”-Using-Sencha-Touch.png 682w, https://stacktips.com/wp-content/uploads/2013/09/Creating-“Hello-World”-Using-Sencha-Touch-300x216.png 300w, https://stacktips.com/wp-content/uploads/2013/09/Creating-“Hello-World”-Using-Sencha-Touch-600x433.png 600w, https://stacktips.com/wp-content/uploads/2013/09/Creating-“Hello-World”-Using-Sencha-Touch-76x55.png 76w, https://stacktips.com/wp-content/uploads/2013/09/Creating-“Hello-World”-Using-Sencha-Touch-470x339.png 470w"" width=""682""></a></p>",0,"standard","post"
"How to Start an Application at Device Bootup in Android","how-to-start-an-application-at-device-bootup-in-android","This tutorial will explain to stat an application while the Android device boot-up. For this we need to  listen to the BOOT_COMPLETED action and react to it. BOOT_COMPLETED is a Broadcast Action that is broadcast once, after the system has finished booting.","LIVE","<p>This tutorial will explain how to start an application while the Android device bootup. For this, we need to listen to the <strong>BOOT_COMPLETED</strong> action and react to it. The <strong>BOOT_COMPLETED<strong> is a Broadcast Action that is broadcast once after the system has finished booting. You can listen to this action by creating a <code>BroadcastReceiver</code> that then starts your launch Activity when it receives an intent with the BOOT_COMPLETED action.</strong></strong></p>
<p>Here's a step-by-step guide:</p>
<h2 class="""">Add permission to your manifest</h2>
<pre class=""prettyprint lang-xml"">&lt;uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED"" /&gt;</pre>
<h2 class="""">Create a Custom <code>BroadcastReceiver</code></h2>
<p>Secondly, create a custom <code>BroadcastReceiver</code> in your project to receive boot up event.</p>
<pre class=""prettyprint lang-java"">import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;

public class BootReceiver extends BroadcastReceiver{

	@Override
	public void onReceive(Context context, Intent intent) {
		Intent i = new Intent(context, MainActivity.class);  
                i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                context.startActivity(i);  
	}
}</pre>
<h2 class="""">Adding <code>BroadCastReceiver</code> to the Android Manifest</h2>
<pre class=""prettyprint lang-xml"">&lt;receiver android:name="".BootReceiver"" android:enabled=""true"" 
    android:permission=""android.permission.RECEIVE_BOOT_COMPLETED""&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=""android.intent.action.BOOT_COMPLETED"" /&gt;
        &lt;category android:name=""android.intent.category.DEFAULT"" /&gt;
    &lt;/intent-filter&gt;
&lt;/receiver&gt;<br/></pre>
<p>Install the application, and then restart the device. You can see the application will start after the device restarts.</p>",0,"standard","post"
"TextSwitcher and ImageSwitcher Example in Android","textswitcher-and-imageswitcher-example-in-android","The TextSwitcher and  ImageSwitcher methods give you a simple way to add animated transitions. TextSwitcher and ImageSwitcher are used to have an smooth transition animation in android view.
","LIVE","<p>The <code>TextSwitcher</code> and  <code>ImageSwitcher</code> in Android  allows you to create an smooth transition animation in when switching between Android views.  TextSwitcher and ImageSwitcher is available from version Android v1.6+. TextSwitcher replaces a TextView and ImageSwitcher replaces an ImageView.</p>
<p>TextView and TextSwitcher work in a similar way. TextSwitcher is what we need if we want to add an animation to avoid the hard swap. A TextSwitcher is useful to animate a label onscreen. Whenever it’s called, TextSwitcher animates the current text out and animates the new text in.</p>
<p>TextSwitcher uses the factory to create new views. Whenever we use setText(), it first removes the old view using an animation set with the <code>setOutAnimation()</code> method, and then places the new one using the animation set by the <code>setInAnimation()</code> method. You can use setInAnimation() and setOutAnimation() method to set in and out animation using for switcher. The new transition fades out the original text while the new text fades in to replace it.</p>
<p>In this example, we will use default stock android <code>fade_in</code> animation. This should work equally well with other custom animations.</p>
<p><img alt=""TextSwitcher-and-ImageSwitcher-Example-in-Android"" class=""aligncenter size-full wp-image-3360"" height=""403"" loading=""lazy"" sizes=""(max-width: 657px) 100vw, 657px"" src=""/media/uploads/articles/378/TextSwitcher-and-ImageSwitcher-Example-in-Android.gif"" srcset="""" width=""657""/></p>
<h3>Defining TextSwitcher and ImageSwitcher in layout</h3>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent"" &gt;

    &lt;ImageSwitcher
        android:id=""@+id/imageSwitcher""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""
        android:layout_alignParentLeft=""true"" &gt;
    &lt;/ImageSwitcher&gt;

    &lt;TextSwitcher
        android:id=""@+id/textSwitcher""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_alignParentBottom=""true""
        android:layout_centerHorizontal=""true""
        android:background=""#99000000""
        android:padding=""10dp"" /&gt;

    &lt;Button
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentRight=""true""
        android:layout_alignParentTop=""true""
        android:layout_marginTop=""10dp""
        android:onClick=""onSwitch""
        android:text=""Next Image &gt;&gt;"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<h2>Using TextSwitcher and ImageSwitcher from code</h2>
<pre class=""prettyprint lang-java"">package com.javatechig.ui;

import android.app.Activity;
import android.os.Bundle;
import android.view.Gravity;
import android.view.View;
import android.widget.ImageSwitcher;
import android.widget.ImageView;
import android.widget.TextSwitcher;
import android.widget.TextView;
import android.widget.ViewSwitcher.ViewFactory;

public class MainActivity extends Activity {

	private static final String[] TEXTS = { ""Image #1"", ""Image #2"", ""Image #3"" };
	private static final int[] IMAGES = { R.drawable.mf1, R.drawable.mf2,
			R.drawable.mf3 };
	private int mPosition = 0;
	private TextSwitcher mTextSwitcher;
	private ImageSwitcher mImageSwitcher;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		mTextSwitcher = (TextSwitcher) findViewById(R.id.textSwitcher);
		mTextSwitcher.setFactory(new ViewFactory() {
			@Override
			public View makeView() {
				TextView textView = new TextView(MainActivity.this);
				textView.setGravity(Gravity.CENTER);
				return textView;
			}
		});

		mTextSwitcher.setInAnimation(this, android.R.anim.fade_in);
		mTextSwitcher.setOutAnimation(this, android.R.anim.fade_out);

		mImageSwitcher = (ImageSwitcher) findViewById(R.id.imageSwitcher);
		mImageSwitcher.setFactory(new ViewFactory() {
			@Override
			public View makeView() {
				ImageView imageView = new ImageView(MainActivity.this);
				return imageView;
			}
		});
		mImageSwitcher.setInAnimation(this, android.R.anim.slide_in_left);
		mImageSwitcher.setOutAnimation(this, android.R.anim.slide_out_right);

		onSwitch(null);
	}

	public void onSwitch(View view) {
		mTextSwitcher.setText(TEXTS[mPosition]);
		mImageSwitcher.setBackgroundResource(IMAGES[mPosition]);
		mPosition = (mPosition + 1) % TEXTS.length;
	}
}</pre>
",0,"standard","post"
"Creating Custom Views in Android Tutorial","creating-custom-views-in-android-tutorial","This tutorials describes how to create custom Views in Android.In this example we will create a custom view with two TextView. One to the left and other to the right as pairs. The custom styles can be configured from xml.","LIVE","<p>This tutorial explains how to create custom Views in Android. We will create a custom view with two TextView. One to the left and other to the right as pairs. The custom styles can be configured from xml.
</p><p><p>Android provides various View classes for dealing with user interfaces. View’s are responsible for representing data to user and allow interactivity. Below are few of the common View classes and Layout that is being supported in android.</p>
<h2 class=""""><span id=""1_Different_Android_Layouts"">Different Android Layouts</span></h2>
<p>A layout defines the visual structure for a user interface. It defines the way View’s can be placed on an Activity. Layouts can be declared in two ways.</p>
<ol>
<li><b>Declarative approach: </b>Android provides a straightforward XML vocabulary that corresponds to the View classes and sub classes, such as those for widgets and layouts.</li>
<li>Instantiate <b>Components using Java Code:</b> Your application can create and manipulate View and ViewGroup objects programmatically.</li>
</ol>
<p>Following are the&nbsp;the ViewGroup classes supported by Android;</p>
<ul>
<li><a href=""http://stacktips.com/articles/android-linearlayout-example"">Linear Layout</a></li>
<li><a href=""http://stacktips.com/articles/android-relativelayout-example"">Relative Layout</a></li>
<li><a href=""http://stacktips.com/articles/android-table-layout-example"">Table Layout</a></li>
<li><a href=""http://stacktips.com/articles/android-gridview-example-building-image-gallery-in-android/"">Grid View</a></li>
<li><a href=""http://stacktips.com/articles/android-framelayout-example"">Frame Layout</a></li>
<li><a href=""http://stacktips.com/articles/android-listview-tutorial"">List View</a></li>
</ul>
<p>Following are some of the most common used Android View classes;</p>
<ul>
<li><a href=""http://stacktips.com/articles/android-button-example/"">Button</a></li>
<li><a href=""http://stacktips.com/articles/android-checkbox-example"" title=""Android Checkbox Example"">Checkbox</a></li>
<li><a href=""http://stacktips.com/articles/edittext-validation-in-android-example"" title=""Edittext Validation in Android Example"">EditText</a></li>
<li><a href=""http://stacktips.com/articles/android-imageview-example"" title=""Android ImageView Example"">ImageView</a></li>
<li><a href=""http://stacktips.com/articles/progressbar-while-loading-webview/"">ProgressBar</a></li>
<li><a href=""http://stacktips.com/articles/android-radio-button-example/"">RadioButton</a></li>
<li><a href=""http://stacktips.com/articles/android-seekbar-example/"">SeekBar</a></li>
<li><a href=""http://stacktips.com/articles/android-spinner-example/"">Spinner (ComboBox)</a></li>
<li><a href=""http://stacktips.com/articles/how-to-turn-off-turn-on-wifi-in-android-using-code/"">ToggleButton</a></li>
<li><a href=""http://stacktips.com/articles/android-webview-example/"">WebView</a></li>
<li><a href=""http://stacktips.com/articles/android-dialog-example/"">Dialog</a></li>
</ul>
<h2 class=""""><span id=""2_Why_Custom_Views"">Why Custom Views?</span></h2>
<p>All the above View classes and ViewGroup classes are good enough to create an solid android app. However, sometimes your app may have unique needs that aren’t covered by the built-in views. Such cases you will end up creating an custom View in android. The below example shows you how to create your own views that are robust and reusable.</p>
<h2 class=""""><span id=""3_Creating_Custom_Views"">Creating Custom Views</span></h2>
<p>Declaring a custom View is much similar to declaring any other class in Java. While designing an custom class keep the following things in mind</p>
<ol>
<li>It should provide some easy to use interface and should use the memory efficiently.</li>
<li>A Custom View should conform to Android standards</li>
<li>You can provide custom styleable attributes that can be configurable from Android XML layouts</li>
<li>Your View class should be compatible with multiple Android platforms</li>
</ol>
<p>All the default View classes that are available in android extends View. The same way your custom View can directly extend the View class or you may extend one of the default View controls such as TextView. Now, override the constructor that takes a Context and an AttributeSet object as parameters.</p>
<pre class=""prettyprint lang-java"">import android.content.Context;
import android.util.AttributeSet;
import android.widget.LinearLayout;

public class LovelyView extends LinearLayout {

	public LovelyView(Context context) {
		super(context);		
	}

	public LovelyView(Context context, AttributeSet attrs) {
		super(context, attrs);		
	}

	public LovelyView(Context context, AttributeSet attrs, int defStyle) {
		this(context, attrs);		
	}	
}</pre>
<h3 class=""""><span id=""4_Define_Custom_Attributes"">Define Custom Attributes</span></h3>
<p>You can provide custom styleable attributes that can be configurable from Android XML layouts. These attributes will control its appearance and behavior of View. You can create a <strong><code>values/attr.xml</code></strong> file in your project. To enable this behavior in your custom view, you can define custom attributes for your view in a resource element in <strong><code>attr.xml</code></strong> file.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;resources&gt;

    &lt;declare-styleable name=""LovelyView""&gt;
        &lt;attr name=""leftLabel"" format=""string"" /&gt;
        &lt;attr name=""rightLabel"" format=""string"" /&gt;
        &lt;attr name=""leftLabelStyle"" format=""reference"" /&gt;
        &lt;attr name=""rightLabelStyle"" format=""reference"" /&gt;
    &lt;/declare-styleable&gt;

&lt;/resources&gt;</pre>
<p>In the above xml file, <code>LovelyView</code> is the name of the style. and <code>leftLabel</code>, <code>rightLabel</code>, <code>leftLabelStyle </code>and <code>rightLabelStyle&nbsp;</code>are the style attributes defines.</p>
<p>Once you define the custom attributes, you can use them in layout XML files just like built-in attributes. The only difference is that your custom attributes belong to a different namespace. Instead of belonging to the <code>http://schemas.android.com/apk/res/android</code> namespace, they belong to <code>http://schemas.android.com/apk/res/(your package name)</code></p>
<p>Here’s how to use the attributes defined for LovelyView</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    xmlns:custom=""http://schemas.android.com/apk/res/com.example.customview""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:layout_margin=""10dp""
    android:orientation=""vertical""
    tools:context="".MainActivity"" &gt;

    &lt;com.example.customview.LovelyView
        android:id=""@+id/leftTextView""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""10dp""
        custom:leftLabel=""""
        custom:leftLabelStyle=""@style/leftTextStyle""
        custom:rightLabel=""""
        custom:rightLabelStyle=""@style/rightTextStyle"" /&gt;

    &lt;com.example.customview.LovelyView
        android:id=""@+id/rightTextView""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        custom:leftLabel=""Hello Mr:""
        custom:leftLabelStyle=""@style/leftTextStyle""
        custom:rightLabel=""Whats Up Buddy!""
        custom:rightLabelStyle=""@style/rightTextStyle"" /&gt;

&lt;/LinearLayout&gt;</pre>
<p>Notice that, In the above code snippet, we are using the fully qualified name of the custom view class. If your view class is an inner class, you must further qualify it with the name of the view’s outer class.</p>
<h3 class=""""><span id=""5_Apply_Custom_Attributes"">Apply Custom Attributes</span></h3>
<p>In the above two steps, we have configured the View stylable attributes in the XML. When a view is created from an XML layout, all of the attributes in the XML tag are read from the resource bundle and passed into the view’s constructor as an AttributeSet. We can read the attributes by calling <strong><code>obtainStyledAttributes()</code></strong> method.</p>
<pre class=""prettyprint lang-java"">TypedArray a = context.getTheme().obtainStyledAttributes(attrs,
		R.styleable.LovelyView, 0, 0);
try {
	// get the text and colors specified using the names in attrs.xml
	leftLabel = a.getString(R.styleable.LovelyView_leftLabel);
	rightLabel = a.getString(R.styleable.LovelyView_rightLabel);
	leftStyle = a.getResourceId(R.styleable.LovelyView_leftLabelStyle, android.R.style.TextAppearance_DeviceDefault);
	rightStyle = a.getResourceId(R.styleable.LovelyView_rightLabelStyle, android.R.style.TextAppearance_DeviceDefault);

} finally {
	a.recycle();
}

LayoutInflater.from(context).inflate(R.layout.key_value_layout, this);

//left text view
leftTextView = (TextView) this.findViewById(R.id.leftTextView);
leftTextView.setText(leftLabel);
leftTextView.setTextAppearance(context, leftStyle);

//right text view
rightTextView = (TextView) this.findViewById(R.id.rightTextView);
rightTextView.setText(rightLabel);
rightTextView.setTextAppearance(context, rightStyle);</pre>
<p>Below is the complete View class code</p>
<pre class=""prettyprint lang-java"">import android.content.Context;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.widget.LinearLayout;
import android.widget.TextView;

public class LovelyView extends LinearLayout {
	private String leftLabel = """";
	private String rightLabel = """";
	private TextView leftTextView;
	private TextView rightTextView;
	private int leftStyle ;
	private int rightStyle;

	public LovelyView(Context context) {
		super(context);
		LayoutInflater.from(context).inflate(R.layout.key_value_layout, this);
	}

	public LovelyView(Context context, AttributeSet attrs) {
		super(context, attrs);
		initViews(context, attrs);
	}

	public LovelyView(Context context, AttributeSet attrs, int defStyle) {
		this(context, attrs);
		initViews(context, attrs);
	}

	private void initViews(Context context, AttributeSet attrs) {
		TypedArray a = context.getTheme().obtainStyledAttributes(attrs,
				R.styleable.LovelyView, 0, 0);

		try {
			// get the text and colors specified using the names in attrs.xml
			leftLabel = a.getString(R.styleable.LovelyView_leftLabel);
			rightLabel = a.getString(R.styleable.LovelyView_rightLabel);
			leftStyle = a.getResourceId(R.styleable.LovelyView_leftLabelStyle, android.R.style.TextAppearance_DeviceDefault);
			rightStyle = a.getResourceId(R.styleable.LovelyView_rightLabelStyle, android.R.style.TextAppearance_DeviceDefault);

		} finally {
			a.recycle();
		}

		LayoutInflater.from(context).inflate(R.layout.key_value_layout, this);

		//left text view
		leftTextView = (TextView) this.findViewById(R.id.leftTextView);
		leftTextView.setText(leftLabel);
		leftTextView.setTextAppearance(context, leftStyle);

		//right text view
		rightTextView = (TextView) this.findViewById(R.id.rightTextView);
		rightTextView.setText(rightLabel);
		rightTextView.setTextAppearance(context, rightStyle);
	}

	public String getLeftLabel() {
		return leftLabel;
	}

	public void setLeftLabel(String leftLabel) {
		this.leftLabel = leftLabel;
		if(leftTextView!=null){
			leftTextView.setText(leftLabel);
		}
	}

	public String getRightLabel() {
		return rightLabel;
	}

	public void setRightLabel(String rightLabel) {
		this.rightLabel = rightLabel;
		if(rightTextView!=null){
			rightTextView.setText(rightLabel);
		}
	}
}</pre>
<p class=""""><br></p>

<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""></a></p>
</p>",0,"standard","post"
"Android Include Tag Layout Example","android-include-tag-layout-example","In this example, you’ll learn how to use the  tag in your XML to avoid replication of views. When you’re creating complex layouts, you may find yourself adding a lot of ViewGroup&#8217;s and Views. But, making your view hierarchy tree taller will also result in slowness in your application. 
","LIVE","<p>When you’re creating complex layouts, you may find yourself adding a lot of ViewGroup’s and Views. But, making your view hierarchy tree taller will also result in slowness in your application and increases complexity. Creating optimized layouts is fundamental to building an application that runs fast and is responsive to the user.</p>
<p>In this example, we’ll see how to use the <code>&lt;include /&gt;</code> tag in your XML to avoid replication of code in different layouts. Before we begin, let us have a look into the screenshot below.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Avoid replication of Views using include tag in android layout"" class=""aligncenter size-full wp-image-3347"" height=""403"" loading=""lazy"" sizes=""(max-width: 505px) 100vw, 505px"" src=""/media/uploads/articles/380/Avoid-replication-of-Views-using-include-tag-in-android-layout.gif"" srcset="""" width=""505""/></a></p>
<p>Now, let us imagine we want to add footer (as shown in the image below) to every page of your app. It looks quite simple, we can just declare it in all the layouts files as required. But what happens if we want to do a small modification to the footer layout? We have to do the changes to all the layout files, which costs time. Android include tag is the solution here.</p>
<h2>How it works?</h2>
<p>You just have to declare your reusable xml layout file in a separate xml file. For our example, let us name it as footer.xml.</p>
<p>Just use the footer.xml file using include tag for all your activity/fragment layout files.</p>
<h3>footer.xml</h3>
<p>Here is our <code>footer.xml</code> file which we can reuse using include tag</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:background=""#ffffff""
    android:padding=""5dp"" &gt;

    &lt;ImageView
        android:id=""@+id/imageView""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentLeft=""true""
        android:layout_alignParentTop=""true""
        android:layout_margin=""5dp""
        android:src=""@drawable/javatechig_logo"" /&gt;

    &lt;TextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_centerHorizontal=""true""
        android:layout_centerVertical=""true""
        android:gravity=""center""
        android:text=""@string/footer_text""
        android:textColor=""#13352E"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<p>We have just declared the layout for footer.xml, which will be reused in all activity. Let us create an layout file for our MainActivity class. Let’s look at how it can help us out.  We use the <code>&lt;include /&gt;</code> tag in XML to add another layout from another XML file.</p>
<h3>activity_main.xml</h3>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:background=""#f0f0f0"" &gt;

    &lt;LinearLayout
        android:id=""@+id/linearLayout1""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""10dp""
        android:background=""#ffffff""
        android:orientation=""vertical""
        android:padding=""5dp"" &gt;

        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:text=""@string/hint""
            android:textAppearance=""?android:attr/textAppearanceLarge""
            android:textColor=""#13352E"" /&gt;

        &lt;ImageView
            android:id=""@+id/imageView1""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_gravity=""center_horizontal""
            android:src=""@drawable/image_7"" /&gt;
    &lt;/LinearLayout&gt;

    &lt;include
        android:id=""@+id/footerView""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_alignParentBottom=""true""
        layout=""@layout/footer"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<p>From your MainActivity.java file, you can access the views by using following code snippets</p>
<pre class=""prettyprint lang-java"">// Fetching footer layout
View footerLayout = findViewById(R.id.footerView);

// Fetching the textview declared in footer.xml
TextView footerText = (TextView) footerLayout.findViewById(R.id.footer_text);
footerText.setText(""Some Text Here"");
</pre>
",0,"standard","post"
"How To Send Email In Android","how-to-send-email-in-android","The code sample below will help you understand &#8220;How To Send Email In Android&#8221; using EmailIntent in android. In&hellip;
","LIVE","<p>The code sample below will help you understand “How To Send Email In Android” using EmailIntent in android. In android we can use Intent.ACTION_SEND to call an existing email client to send an Email. If no email clients are configured then,android system displays <strong>“No application can perform this action”</strong> error.</p>
<h2>Sending Email In Android example</h2>
<p>Here is my layout as shown in the screenshots below</p>
<p style=""text-align: center;""> <a href=""http://stacktips.com"" target=""_self""><img alt=""sending email in android"" height=""377"" loading=""lazy"" src=""/media/uploads/articles/381/sending-email-in-android.png"" srcset="""" title=""sending email in android"" width=""433""/></a></p>
<p><strong>activity_main.xml</strong></p>
<pre class=""prettyprint lang-xml"">
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:id=""@+id/linearLayout1""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical""
    android:padding=""5dp"" &gt;

    &lt;TextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""To:""
        android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

    &lt;EditText
        android:id=""@+id/toEmail""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:hint=""Enter email"" &gt;
    &lt;/EditText&gt;

    &lt;TextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Subject:""
        android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

    &lt;EditText
        android:id=""@+id/subject""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:hint=""Enter Subject"" &gt;
    &lt;/EditText&gt;

    &lt;TextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Message:""
        android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

    &lt;EditText
        android:id=""@+id/emailBody""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:gravity=""top""
        android:hint=""Enter mail body""
        android:inputType=""textMultiLine""
        android:lines=""5"" /&gt;

&lt;/LinearLayout&gt;</pre>
<p>In my code example, I have used ActionBar commands for send and clear option.</p>
<p><strong>main_menu.xml</strong></p>
<pre class=""prettyprint lang-xml"">
&lt;menu xmlns:android=""http://schemas.android.com/apk/res/android"" &gt;

     &lt;item
        android:id=""@+id/menu_clear""
        android:icon=""@android:drawable/ic_menu_close_clear_cancel""
        android:showAsAction=""ifRoom|withText""
        android:title=""Clear""/&gt;

    &lt;item
        android:id=""@+id/menu_send""
        android:icon=""@android:drawable/ic_menu_send""
        android:showAsAction=""ifRoom|withText""
        android:title=""Send""/&gt;

&lt;/menu&gt;</pre>
<p>Now, check out the activity code</p>
<p><strong>MainActivity.java</strong></p>
<pre class=""prettyprint lang-java"">
public class MainActivity extends Activity {

	private EditText toEmail = null;
	private EditText emailSubject = null;
	private EditText emailBody = null;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		toEmail = (EditText) findViewById(R.id.toEmail);
		emailSubject = (EditText) findViewById(R.id.subject);
		emailBody = (EditText) findViewById(R.id.emailBody);

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_clear:
			toEmail.setText("""");
			emailBody.setText("""");
			emailSubject.setText("""");
			break;
		case R.id.menu_send:
			String to = toEmail.getText().toString();
			String subject = emailSubject.getText().toString();
			String message = emailBody.getText().toString();

			Intent email = new Intent(Intent.ACTION_SEND);
			email.putExtra(Intent.EXTRA_EMAIL, new String[] { to });
			email.putExtra(Intent.EXTRA_SUBJECT, subject);
			email.putExtra(Intent.EXTRA_TEXT, message);

			// need this to prompts email client only
			email.setType(""message/rfc822"");

			startActivity(Intent.createChooser(email, ""Choose an Email client""));

			break;
		}
		return true;
	}
}</pre>
",0,"standard","post"
"Sending SMS Message In Android","sending-sms-message-in-android","This tutorial explains to Sending SMS Message In Android using  SMS intent method or by using using SmsManager class. SMS&hellip;
","LIVE","<p>This tutorial explains to Sending SMS Message In Android using  SMS intent method or by using using SmsManager class. SMS intent method invokes pre-installed SMS apps.</p>

<p>In Android, we can send SMS from an application in two ways. One by using Intent method and other using SmsManager API. In intent method it uses device’s Built-in SMS application to send a SMS message.</p>
<h3><span id=""1_Sending_SMS_using_SmsManager_API""><strong>1. Sending SMS using  SmsManager API</strong></span></h3>
<pre class=""prettyprint lang-java"">
SmsManager smsManager = SmsManager.getDefault();
smsManager.sendTextMessage("""", null, ""&lt; message body&gt;"", null, null);</pre>
<p>SmsManager require, SMS_SEND permission in your android mainfeast.<br/>
<span style=""color: #ff0000;""><strong><br/>
<em>&lt;uses-permission android:name=”android.permission.SEND_SMS” /&gt;</em></strong></span></p>
<h3><span id=""2_Sending_SMS_by_invoking_Built-in_SMS_application""><em></em>2. Sending SMS by invoking Built-in SMS application</span></h3>
<p><span style=""font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px;"">Intent sendIntent = new Intent(Intent.ACTION_VIEW);</span></p>
<pre class=""prettyprint lang-java"">
	sendIntent.putExtra(""sms_body"", “""); 
	sendIntent.setType(""vnd.android-dir/mms-sms"");
	startActivity(sendIntent);</pre>
<p>Follow the complete example for both the method’s<br/>
<strong>activity_main.xml</strong></p>
<pre class=""prettyprint lang-xml"">
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:id=""@+id/linearLayout1""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical""
    android:padding=""5dp"" &gt;

    &lt;TextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Phone Number : ""
        android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

    &lt;EditText
        android:id=""@+id/mobileNumber""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:hint=""Enter phone number""
        android:phoneNumber=""true"" &gt;
    &lt;/EditText&gt;

    &lt;TextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Message Body: ""
        android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

    &lt;EditText
        android:id=""@+id/smsBody""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:gravity=""top""
        android:hint=""Enter message body""
        android:inputType=""textMultiLine""
        android:lines=""5"" /&gt;

    &lt;LinearLayout
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:weightSum=""10"" &gt;

        &lt;Button
            android:id=""@+id/sendViaIntent""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:layout_weight=""5""
            android:text=""SMS Intent"" /&gt;

        &lt;Button
            android:id=""@+id/send""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:layout_weight=""5""
            android:text=""Send"" /&gt;
    &lt;/LinearLayout&gt;

&lt;/LinearLayout&gt;</pre>
<p><strong>MainActivity.java</strong></p>
<pre class=""prettyprint lang-java"">
public class MainActivity extends Activity {

	private Button shareIntent;
	private Button send;
	private EditText phoneNo;
	private EditText messageBody;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		phoneNo = (EditText) findViewById(R.id.mobileNumber);
		messageBody = (EditText) findViewById(R.id.smsBody);

		send = (Button) findViewById(R.id.send);
		send.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				String number = phoneNo.getText().toString();
				String sms = messageBody.getText().toString();

				try {
					SmsManager smsManager = SmsManager.getDefault();
					smsManager.sendTextMessage(number, null, sms, null, null);
					Toast.makeText(getApplicationContext(), ""SMS Sent!"",
							Toast.LENGTH_LONG).show();
				} catch (Exception e) {
					Toast.makeText(getApplicationContext(),
							""SMS faild, please try again later!"",
							Toast.LENGTH_LONG).show();
					e.printStackTrace();
				}
			}
		});

		shareIntent = (Button) findViewById(R.id.sendViaIntent);
		shareIntent.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				try {
					Intent sendIntent = new Intent(Intent.ACTION_VIEW);
					sendIntent.putExtra(""sms_body"", messageBody.getText().toString());
					sendIntent.setType(""vnd.android-dir/mms-sms"");
					startActivity(sendIntent);
				} catch (Exception e) {
					Toast.makeText(getApplicationContext(),
							""SMS faild, please try again later!"",
							Toast.LENGTH_LONG).show();
					e.printStackTrace();
				}
			}
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
}</pre>
<h3><span id=""3_Output"">3.  Output</span></h3>
<figure aria-describedby=""caption-attachment-1553"" class=""wp-caption aligncenter"" id=""attachment_1553"" style=""width: 259px""><a href=""http://stacktips.com"" target=""_self""><img alt=""Android SeekBar"" class=""wp-image-1553"" height=""461"" loading=""lazy"" src=""/media/uploads/articles/382/2013-04-29_01-33-08.png"" srcset="""" title=""Sending SMS in Android"" width=""259""/></a><figcaption class=""wp-caption-text"" id=""caption-attachment-1553"">Android SeekBar Example Screenshot</figcaption></figure>
<h3><span id=""4_Download_Complete_Source_code_from_GitHub"">4. Download Complete Source code from GitHub</span></h3>
<p>Download Complete Source From <a href=""https://github.com/javatechig/javatechig-android-advanced/tree/master/AndroidSMS"" rel=""nofollow noopener noreferrer"" target=""_blank"">Github</a></p>
",0,"standard","post"
"Android Seekbar Example","android-seekbar-example","SeekBar is one of the useful user interface element in android applications. SeekBar is an extension of ProgressBar that allows the selection of integer values using a natural user interface. Basically SeekBar has a thumb that you can slide to choose a value between 0 and some maximum that you set. A typical usage of Seekbar is your device brightness control and volume control
","LIVE","<h1>Introduction</h1>
<p>This tutorial will help you understand android <code>SeekBar</code>. Here in this example, we’ll see how to create and customize SeekBar with different color and layout.</p>
<p><code>SeekBar</code> is one of the useful user interface element in android applications. SeekBar is an extension of <code>ProgressBar</code> that allows the selection of integer values using a natural user interface. Basically SeekBar has a thumb that you can slide to choose a value between 0 and some maximum that you set. A typical usage of Seekbar is your device brightness control and volume control.</p>
<p>We can add a SeekBar widget using element. <code>android:max</code> property is basically used to set a maximum integer value for selection using SeekBar. <code>android:progress</code> property is basically used to set a integer value for SeekBar progress.</p>
<h1>Android Seekbar Example</h1>
<h4>activity_seekbar.xml</h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:background=""#F0F0F5"" &gt;

    &lt;LinearLayout
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""5dp""
        android:background=""@drawable/background_view_rounded_single""
        android:orientation=""vertical""
        android:visibility=""visible"" &gt;

        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:padding=""10dp""
            android:text=""Seekbar""
            android:textColor=""#ffffff""
            android:textSize=""20sp"" /&gt;

        &lt;SeekBar
            android:id=""@+id/seek1""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:layout_margin=""10dp""
            android:progress=""20""
            android:secondaryProgress=""20"" /&gt;

        &lt;TextView
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:padding=""10dp""
            android:text=""Custom Seekbar""
            android:textColor=""#fcfcfc""
            android:textSize=""20sp"" /&gt;

        &lt;SeekBar
            android:id=""@+id/volume_bar""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:layout_margin=""10dp""
            android:max=""100""
            android:progress=""0""
            android:progressDrawable=""@drawable/progressbar""
            android:secondaryProgress=""0"" /&gt;
    &lt;/LinearLayout&gt;

&lt;/RelativeLayout&gt;
</pre>
<h4>background_view_rounded_single.xml</h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;inset android:insetLeft=""1.0px"" android:insetRight=""1.0px"" android:insetTop=""0.0px"" android:insetBottom=""1.0px""
  xmlns:android=""http://schemas.android.com/apk/res/android""&gt;
    &lt;selector&gt;
        &lt;item android:state_pressed=""true""&gt;
            &lt;shape&gt;
                &lt;gradient android:startColor=""@color/rounded_container_bg"" android:endColor=""@color/rounded_container_bg"" android:angle=""270.0"" /&gt;
                &lt;corners android:radius=""11.0dip"" /&gt;
            &lt;/shape&gt;
        &lt;/item&gt;
        &lt;item&gt;
            &lt;shape&gt;
            	&lt;stroke android:width=""1.0px"" android:color=""@color/rounded_container_border"" /&gt;
                &lt;gradient android:startColor=""@color/rounded_container_bg"" android:endColor=""@color/rounded_container_bg"" android:angle=""270.0"" /&gt;
                &lt;corners android:radius=""10.0dip"" /&gt;

            &lt;/shape&gt;
        &lt;/item&gt;
    &lt;/selector&gt;
&lt;/inset&gt;</pre>
<h4>progressbar.xml</h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;layer-list xmlns:android=""http://schemas.android.com/apk/res/android"" &gt;

    &lt;item android:id=""@android:id/background""&gt;
        &lt;shape android:shape=""rectangle"" &gt;
            &lt;corners android:radius=""5dp"" /&gt;

            &lt;gradient
                android:angle=""270""
                android:endColor=""@color/light_gray_header_color""
                android:startColor=""@color/light_gray_header_color"" /&gt;
        &lt;/shape&gt;
    &lt;/item&gt;
    &lt;item android:id=""@android:id/secondaryProgress""&gt;
        &lt;clip&gt;
            &lt;shape android:shape=""rectangle"" &gt;
                &lt;corners android:radius=""5dp"" /&gt;

                &lt;gradient
                    android:angle=""270""
                    android:endColor=""#00996a""
                    android:startColor=""#00d190"" /&gt;
            &lt;/shape&gt;
        &lt;/clip&gt;
    &lt;/item&gt;
    &lt;item android:id=""@android:id/progress""&gt;
        &lt;clip&gt;
            &lt;shape android:shape=""rectangle"" &gt;
                &lt;corners android:radius=""5dp"" /&gt;

                &lt;gradient
                    android:angle=""270""
                    android:endColor=""#00996a""
                    android:startColor=""#00d190"" /&gt;
            &lt;/shape&gt;
        &lt;/clip&gt;
    &lt;/item&gt;

&lt;/layer-list&gt;</pre>
<h4>colors.xml</h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;resources&gt;

    &lt;color name=""default_screen_bg""&gt;#f9f9f9&lt;/color&gt;
    &lt;color name=""rounded_container_bg""&gt;#222222&lt;/color&gt;
    &lt;color name=""rounded_container_border""&gt;#3b3f44&lt;/color&gt;
    &lt;color name=""light_gray_header_color""&gt;#646663&lt;/color&gt;

&lt;/resources&gt;
</pre>
<p>We are good with layout design, lets move a bit into Java coding. Below is my activity code</p>
<pre class=""prettyprint lang-java"">public class SeekbarActivity extends Activity {

	private SeekBar volumeControl = null;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_seekbar);

		volumeControl = (SeekBar) findViewById(R.id.volume_bar);

		volumeControl.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {
			int progressChanged = 0;

			public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser){
				progressChanged = progress;
			}

			public void onStartTrackingTouch(SeekBar seekBar) {
				// TODO Auto-generated method stub
			}

			public void onStopTrackingTouch(SeekBar seekBar) {
				Toast.makeText(SeekbarActivity.this,""seek bar progress:""+progressChanged, 
						Toast.LENGTH_SHORT).show();
			}
		});
	}

}</pre>
<p>Our activity implements <code>SeekBar.OnSeekBarChangeListener</code>; Basically <code>SeekBar.OnSeekBarChangeListener</code> is a public static interface that is used to listen the SeekBar events. The SeekBar.OnSeekBarChangeListener interface allows us to override the below methods.</p>
<ol>
<li><code>onProgressChanged(SeekBar seekBar, int progress, boolean fromUser)</code> – Used to notify that the progress level has changed.</li>
<li><code>onStartTrackingTouch(SeekBar seekBar)</code> – Used to notify that the user has started a touch gesture.</li>
<li><code>onStopTrackingTouch(SeekBar seekBar)</code> – Used to notify that the user has finished a touch gesture.</li>
</ol>
<h1>Output</h1>
<p>Output of the above code is shown below</p>
<p><center></center> <a href=""http://stacktips.com"" target=""_self""><img alt=""Customizing Android Seekbar Example"" class=""alignnone size-thumbnail wp-image-6136"" height=""507"" loading=""lazy"" src=""/media/uploads/articles/383/Customizing-Android-Seekbar-300x507.png"" srcset="""" width=""300""/></a></p>
<h1>Download Source Code</h1>
<p>Download complete example source code from GitHub.</p>
[download url=”https://github.com/javatechig/Android-Seekbar-Example”]
",0,"standard","post"
"How to Turn off, Turn on Wifi in Android","how-to-turn-off-turn-on-wifi-in-android","The following code snippet will help you to pragmatically turn on and turn off wi-fi in android. This sample code is using android Switch (Available from android API level 14) to toggle between wi-fi state.","LIVE","<p>The following code snippet will help you to pragmatically turn on and turn off wi-fi in android. This sample code is using android Switch (Available from android API level 14) to toggle between wi-fi state.</p>
<p><a href=""http://stacktips.com"" target=""_self""></a></p>
<p>We need following permissions in AndroidMainfest.xml file</p>
<pre class=""prettyprint lang-xml"">&nbsp;&nbsp;&lt;uses-permission android:name=""android.permission.ACCESS_WIFI_STATE"" /&gt;
&nbsp;&nbsp;&lt;uses-permission android:name=""android.permission.CHANGE_WIFI_STATE"" /&gt;
&nbsp;&nbsp;&lt;uses-permission android:name=""android.permission.WAKE_LOCK"" /&gt;</pre>
<h3 class="""">Creating Layout for On/Off Switch</h3>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    tools:context="".MainActivity"" &gt;

    &lt;ImageView
        android:id=""@+id/imageView1""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_centerInParent=""true""
        android:src=""@drawable/wifi"" /&gt;

    &lt;Switch
        android:id=""@+id/wifi_switch""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentBottom=""true""
        android:layout_marginBottom=""10dp""
        android:background=""@android:color/background_dark""
        android:checked=""false""
        android:text=""Wi-Fi Settings""
        android:textColor=""@android:color/white""
        android:textOff=""OFF""
        android:textOn=""ON"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<h3 class="""">Turn on or off wifi in Android</h3>
<p>We are done with the layout. Now let us move on to turn on wifi pragmatically. &nbsp;To do this e need to get the&nbsp;Wifi system service by calling <code>getSystemService()</code> method. After getting Wifi manager, we can check the state of WiFi by calling <code>isWiiEnabled()</code> method, before turning on.</p>
<pre class=""prettyprint lang-java"">package com.example.wifitest;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.widget.CompoundButton;
import android.widget.Switch;
import android.widget.Toast;
import android.app.Activity;
import android.content.Context;

public class MainActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		Switch toggle = (Switch) findViewById(R.id.wifi_switch);
		toggle.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
				if (isChecked) {
					toggleWiFi(true);
					Toast.makeText(getApplicationContext(), ""Wi-Fi Enabled!"", Toast.LENGTH_LONG).show();
				} else {
					toggleWiFi(false);
					Toast.makeText(getApplicationContext(), ""Wi-Fi Disabled!"", Toast.LENGTH_LONG).show();
				}
			}
		});
	}

	public void toggleWiFi(boolean status) {
		WifiManager wifiManager = (WifiManager) this
				.getSystemService(Context.WIFI_SERVICE);
		if (status == true &amp;&amp; !wifiManager.isWifiEnabled()) {
			wifiManager.setWifiEnabled(true);
		} else if (status == false &amp;&amp; wifiManager.isWifiEnabled()) {
			wifiManager.setWifiEnabled(false);
		}
	}

}</pre>",0,"standard","post"
"How to Get List of Installed Apps in Android","how-to-get-list-of-installed-apps-in-android","Android PackageManager class is used to retrieve information on the application packages that are currently installed on the device. You can get an instance of PackageManager class by calling getPackageManager().
","LIVE","<p>Android <code>PackageManager</code> class is used to retrieve information on the application packages that are currently installed on the device. You can get an instance of PackageManager class by calling <code>getPackageManager()</code>. PackageManager provides methods for querying and manipulating installed packages and related permissions, etc. In this Android example, we we get list of installed apps in Android.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""How to Get List of Installed Apps in Android"" class=""aligncenter size-full wp-image-3309"" height=""403"" loading=""lazy"" sizes=""(max-width: 657px) 100vw, 657px"" src=""/media/uploads/articles/385/How-to-get-list-of-Installed-Apps-in-Android.gif"" srcset="""" width=""657""/></a></p>
<pre class=""prettyprint lang-java"">PackageManager packageManager = getPackageManager();
List&lt;ApplicationInfo&gt; list = packageManager.getInstalledApplications(PackageManager.GET_META_DATA)</pre>
<p><code>packageManager.getInstalledApplications()</code> return a List of all application packages that are installed on the device. If we set the flag <code>GET_UNINSTALLED_PACKAGES</code> has been set, a list of all applications including those deleted with <code>DONT_DELETE_DATA </code> (partially installed apps with data directory) will be returned.</p>
<h1>1. Creating application layout in xml</h1>
<p><strong>activity_main.xml</strong></p>
<p>As you can see in the attached screenshot, we will be creating a ListView to show all of the installed applications in android.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical"" &gt;

    &lt;ListView
        android:id=""@android:id/list""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content"" /&gt;

&lt;/LinearLayout&gt;</pre>
<p><strong>snippet_list_row.xml</strong></p>
<p>This layout is being used by the ListView Adapter for representing application details. It shows application icon, application name and application package.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content"" &gt;

    &lt;ImageView
        android:id=""@+id/app_icon""
        android:layout_width=""50dp""
        android:layout_height=""50dp""
        android:padding=""3dp""
        android:scaleType=""centerCrop"" /&gt;

    &lt;LinearLayout
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""
        android:gravity=""center_vertical""
        android:orientation=""vertical""
        android:paddingLeft=""5dp"" &gt;

        &lt;TextView
            android:id=""@+id/app_name""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:gravity=""center_vertical""
            android:textStyle=""bold"" /&gt;

        &lt;TextView
            android:id=""@+id/app_paackage""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:gravity=""center_vertical"" /&gt;
    &lt;/LinearLayout&gt;

&lt;/LinearLayout&gt;</pre>
<p> </p>
<h1>2. Writing Java class</h1>
<p><strong>AllAppsActivity.java</strong></p>
<p>This is the main application class that is used to initialize and list the installed applications. As getting the list of application details from PackageManage is a long running task, we will do that in AsyncTask. Also, this class is using custom Adapter “ApplicationAdapter” for custom ListView.</p>
<pre class=""prettyprint lang-java"">package com.javatechig.listapps;

import java.util.ArrayList;
import java.util.List;
import android.app.AlertDialog;
import android.app.ListActivity;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.ListView;
import android.widget.Toast;

public class AllAppsActivity extends ListActivity {
	private PackageManager packageManager = null;
	private List&lt;ApplicationInfo&gt; applist = null;
	private ApplicationAdapter listadaptor = null;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		packageManager = getPackageManager();

		new LoadApplications().execute();
	}

	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.menu, menu);

		return true;
	}

	public boolean onOptionsItemSelected(MenuItem item) {
		boolean result = true;

		switch (item.getItemId()) {
		case R.id.menu_about: {
			displayAboutDialog();

			break;
		}
		default: {
			result = super.onOptionsItemSelected(item);

			break;
		}
		}

		return result;
	}

	private void displayAboutDialog() {
		final AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setTitle(getString(R.string.about_title));
		builder.setMessage(getString(R.string.about_desc));

		builder.setPositiveButton(""Know More"", new DialogInterface.OnClickListener() {
		       public void onClick(DialogInterface dialog, int id) {
		    	   Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""http://stacktips.com""));
		    	   startActivity(browserIntent);
		    	   dialog.cancel();
		       }
		   });
		builder.setNegativeButton(""No Thanks!"", new DialogInterface.OnClickListener() {
		       public void onClick(DialogInterface dialog, int id) {
		            dialog.cancel();
		       }
		});

		builder.show();
	}

	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		super.onListItemClick(l, v, position, id);

		ApplicationInfo app = applist.get(position);
		try {
			Intent intent = packageManager
					.getLaunchIntentForPackage(app.packageName);

			if (null != intent) {
				startActivity(intent);
			}
		} catch (ActivityNotFoundException e) {
			Toast.makeText(AllAppsActivity.this, e.getMessage(),
					Toast.LENGTH_LONG).show();
		} catch (Exception e) {
			Toast.makeText(AllAppsActivity.this, e.getMessage(),
					Toast.LENGTH_LONG).show();
		}
	}

	private List&lt;ApplicationInfo&gt; checkForLaunchIntent(List&lt;ApplicationInfo&gt; list) {
		ArrayList&lt;ApplicationInfo&gt; applist = new ArrayList&lt;ApplicationInfo&gt;();
		for (ApplicationInfo info : list) {
			try {
				if (null != packageManager.getLaunchIntentForPackage(info.packageName)) {
					applist.add(info);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return applist;
	}

	private class LoadApplications extends AsyncTask&lt;Void, Void, Void&gt; {
		private ProgressDialog progress = null;

		@Override
		protected Void doInBackground(Void... params) {
			applist = checkForLaunchIntent(packageManager.getInstalledApplications(PackageManager.GET_META_DATA));
			listadaptor = new ApplicationAdapter(AllAppsActivity.this,
					R.layout.snippet_list_row, applist);

			return null;
		}

		@Override
		protected void onCancelled() {
			super.onCancelled();
		}

		@Override
		protected void onPostExecute(Void result) {
			setListAdapter(listadaptor);
			progress.dismiss();
			super.onPostExecute(result);
		}

		@Override
		protected void onPreExecute() {
			progress = ProgressDialog.show(AllAppsActivity.this, null,
					""Loading application info..."");
			super.onPreExecute();
		}

		@Override
		protected void onProgressUpdate(Void... values) {
			super.onProgressUpdate(values);
		}
	}
}</pre>
<p><span style=""text-decoration: underline;""><strong>ApplicationAdapter.java</strong></span></p>
<pre class=""prettyprint lang-java"">package com.javatechig.listapps;

import java.util.List;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

public class ApplicationAdapter extends ArrayAdapter&lt;ApplicationInfo&gt; {
	private List&lt;ApplicationInfo&gt; appsList = null;
	private Context context;
	private PackageManager packageManager;

	public ApplicationAdapter(Context context, int textViewResourceId,
			List&lt;ApplicationInfo&gt; appsList) {
		super(context, textViewResourceId, appsList);
		this.context = context;
		this.appsList = appsList;
		packageManager = context.getPackageManager();
	}

	@Override
	public int getCount() {
		return ((null != appsList) ? appsList.size() : 0);
	}

	@Override
	public ApplicationInfo getItem(int position) {
		return ((null != appsList) ? appsList.get(position) : null);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		View view = convertView;
		if (null == view) {
			LayoutInflater layoutInflater = (LayoutInflater) context
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			view = layoutInflater.inflate(R.layout.snippet_list_row, null);
		}

		ApplicationInfo applicationInfo = appsList.get(position);
		if (null != applicationInfo) {
			TextView appName = (TextView) view.findViewById(R.id.app_name);
			TextView packageName = (TextView) view.findViewById(R.id.app_paackage);
			ImageView iconview = (ImageView) view.findViewById(R.id.app_icon);

			appName.setText(applicationInfo.loadLabel(packageManager));
			packageName.setText(applicationInfo.packageName);
			iconview.setImageDrawable(applicationInfo.loadIcon(packageManager));
		}
		return view;
	}
};</pre>
<h1>Download Complete Example</h1>
<p>Download complete Eclipse project source code from <a href=""https://github.com/javatechig/javatechig-android-advanced/tree/master/ListInstalledApps"" rel=""nofollow noopener noreferrer"" target=""_blank"">GitHub. </a></p>
",0,"standard","post"
"Starting an Android Activity for Result","starting-an-activity-for-a-result","In Android user interface is displayed through an activity. Activity is used to represent the data to user and allows user interaction. In an android application, we can have multiple activities and that can interact with each other. This tutorial I will explain more about, how to switch between one Activity to another.
","LIVE","<p>In Android user interface is displayed through an activity. Activity is used to represent the data to user and allows user interaction. In an android application, we can have multiple activities and that can interact with each other. This tutorial I will explain more about, how to switch between one Activity to another.</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Starting an activity for a result"" class=""size-full wp-image-3294 aligncenter"" sizes=""(max-width: 657px) 100vw, 657px"" src=""/media/uploads/articles/386/Starting-an-activity-for-a-result.gif"" srcset="""" width=""80%""/></a></p>
<h1>1. Starting An Activity</h1>
<p>We can call one activity from another by using Intents. Intent is one of the main building block which provides an abstract description of an operation to be performed. <code>startActivity(intent)</code> method belongs to your Activity class and can be used for starting a new activity.</p>
<pre class=""prettyprint lang-java"">  Intent intent = new Intent(context, YourActivityClass.class);
  startActivity(intent);</pre>
<h1>2. Starting Activity for Result</h1>
<p>Starting another activity doesn’t have to be one-way. You can also start another activity and receive a result back. To receive a result, call <code>startActivityForResult()</code> instead of startActivity(). However, the activity that responds must be designed to return a result. When it does, it sends the result as another Intent object. Your activity receives it in the <code>onActivityResult()</code> callback.</p>
<p>Note: You can use explicit or implicit intents when you call startActivityForResult(). When starting one of your own activities to receive a result, you should use an explicit intent to ensure that you receive the expected result.</p>
<pre class=""prettyprint lang-java""> Intent intent = new Intent(this, SecondActivity.class); 
 startActivityForResult(intent, requestCode);</pre>
<p>requestCode is an integer argument, that identifies your request. When you receive the result Intent, the callback provides the same request code so that your app can properly identify the result and determine how to handle it.</p>
<h1>3. Passing Result Back</h1>
<p>In secondActivity if you want to send back data:</p>
<pre class=""prettyprint lang-java""> Intent returnIntent = new Intent();
 returnIntent.putExtra(""result"",result);
 setResult(RESULT_OK, returnIntent);     
 finish();</pre>
<p>If you don’t want to return data:</p>
<pre lang=""java""> Intent returnIntent = new Intent();
 setResult(RESULT_CANCELED, returnIntent);        
 finish();</pre>
<h1>4. Receive the Result</h1>
<p>When Second Acivity is done with its work and returns the result back, the caller activity’s <code>onActivityResult()</code> method gets invoked.</p>
<p>requestCode: The request code you passed to startActivityForResult().<br/>
<code>resultCode</code>: A result code specified by the second activity. This is either <code>RESULT_OK</code> if the operation was successful or <code>RESULT_CANCELED</code> if the user backed out or the operation failed for some reason.<br/>
<code>resultIntent</code>: An Intent that carries the result data.</p>
<pre class=""prettyprint lang-java"">@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
super.onActivityResult(requestCode, resultCode, data);
    if (requestCode == 1){
    	if(resultCode == RESULT_OK){      
             //here is your result
            String result=data.getStringExtra(""result"");  
            Toast.makeText(getApplicationContext(), result, Toast.LENGTH_SHORT).show();	            
        }
        if (resultCode == RESULT_CANCELED) {    
            //Write your code if there's no result
            Toast.makeText(getApplicationContext(), ""Nothing Returned!"", Toast.LENGTH_SHORT).show();
        }
    }
}</pre>
<h1>5. Example</h1>
<p>In this example, we will develop an application with two activities, the first activity will call the second activity for result. The second activity has two buttons; One sends response as “Smile Back” and other doesn’t returns any response.</p>
<p><span style=""text-decoration: underline;""><strong>activity_first.xml</strong></span></p>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
	xmlns:tools=""http://schemas.android.com/tools""
	android:layout_width=""match_parent""
	android:layout_height=""fill_parent""
	android:background=""@drawable/bg""
	android:orientation=""vertical""
	android:padding=""10dp""
	tools:context="".FirstActivity"" &gt;

&lt;TextView
	android:id=""@+id/textView1""
	android:layout_width=""wrap_content""
	android:layout_height=""wrap_content""
	android:layout_centerHorizontal=""true""
	android:layout_marginTop=""10dp""
	android:text=""Activity 1""
	android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

&lt;Button
	android:id=""@+id/start_button""
	android:layout_width=""fill_parent""
	android:layout_height=""wrap_content""
	android:layout_alignParentBottom=""true""
	android:layout_centerHorizontal=""true""
	android:background=""@android:color/holo_blue_dark""
	android:text=""Start Activity 2"" /&gt;
	
&lt;/RelativeLayout&gt;
</pre>
<p><strong>activity_second.xml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
	xmlns:tools=""http://schemas.android.com/tools""
	android:layout_width=""match_parent""
	android:layout_height=""fill_parent""
	android:background=""@drawable/bg""
	android:orientation=""vertical""
	android:padding=""10dp""&gt;

	&lt;TextView
		android:id=""@+id/textView1""
		android:layout_width=""wrap_content""
		android:layout_height=""wrap_content""
		android:layout_centerHorizontal=""true""
		android:layout_marginTop=""10dp""
		android:text=""Activity 2""
		android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

	&lt;LinearLayout
		android:layout_width=""fill_parent""
		android:layout_height=""wrap_content""
		android:layout_alignParentBottom=""true""
		android:layout_marginTop=""50dp""
		android:orientation=""horizontal""
		android:weightSum=""2"" &gt;

		&lt;Button
			android:id=""@+id/cancel_button""
			android:layout_width=""0dp""
			android:layout_height=""wrap_content""
			android:layout_gravity=""center""
			android:layout_margin=""2dp""
			android:layout_weight=""1""
			android:background=""@android:color/holo_blue_dark""
			android:text=""Cancel"" /&gt;

		&lt;Button
			android:id=""@+id/return_button""
			android:layout_width=""0dp""
			android:layout_height=""wrap_content""
			android:layout_gravity=""center""
			android:layout_margin=""2dp""
			android:layout_weight=""1""
			android:background=""@android:color/holo_blue_dark""
			android:text=""Return Results"" /&gt;

	&lt;/LinearLayout&gt;
&lt;/RelativeLayout&gt;
</pre>
<p><strong>FirstActivity.java</strong></p>
<pre class=""prettyprint lang-java"">import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.Toast;
import android.app.Activity;
import android.content.Intent;

public class FirstActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_first);

		Button start = (Button) findViewById(R.id.start_button);
		start.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				Intent intent = new Intent(FirstActivity.this, SecondActivity.class); 
				startActivityForResult(intent, 1); 
			}
		});
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
	    super.onActivityResult(requestCode, resultCode, data);

	    if (requestCode == 1){
	    	if(resultCode == RESULT_OK){
	            String result=data.getStringExtra(""result"");  
	            Toast.makeText(getApplicationContext(), result, Toast.LENGTH_SHORT).show();	            
	        }
	        if (resultCode == RESULT_CANCELED) {    
	            //Write your code if there's no result
	            Toast.makeText(getApplicationContext(), ""Nothing Returned!"", Toast.LENGTH_SHORT).show();
	        }
	    }
	}

}</pre>
<p><strong>SecondActivity.java</strong></p>
<pre class=""prettyprint lang-java"">package com.example.activitytest;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

public class SecondActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_second);

		Button returnResult = (Button) findViewById(R.id.return_button);
		returnResult.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				// returing result back
				Intent resultIntent = new Intent();
				resultIntent.putExtra(""result"", ""Getting Smile Back!!"");
				setResult(RESULT_OK, resultIntent);
				finish();

				// if you don't want to return any result
				// setResult(RESULT_CANCELED, resultIntent);
			}
		});

		Button back = (Button) findViewById(R.id.cancel_button);
		back.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View view) {
				// if you don't want to return any result
				Intent resultIntent = new Intent();
				setResult(RESULT_CANCELED, resultIntent);
				finish();
			}
		});
	}
}</pre>
<h1>6. Download Complete Example</h1>
<p>Here you can download complete eclipse project source code from GitHub.</p>
[download url=”https://github.com/javatechig/javatechig-android-ui/tree/master/ActivityForResults”]
",0,"standard","post"
"How to Pass a Data from One Activity to Another in Android","pass-a-data-from-one-activity-to-another-in-android","In Android user interface is displayed through an activity. Activity is used to represent the data to user and allows user interaction. In an android application, we can have multiple activities and that can interact with each other. During activity interaction we might required to pass data from one activity to other. This tutorial I will explain more about, how to send data while switching between one Activity to another.
","LIVE","

In Android user interface is displayed through an activity. Activity is used to represent the data to user and allows user interaction. In an android application, we can have multiple activities and that can interact with each other. During activity interaction we might required to pass data from one activity to other. This tutorial I will explain more about, how to send data while switching between one Activity to another.
<p>For example, if you are developing an application for RSS News feed reader, you may require having at least of two screens. While the first screen displaying the List of news feeds and other displaying the feed details. Below is the screenshot from the example.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""pass a data from one Activity to another in Android"" class=""aligncenter size-full wp-image-3121"" height=""403"" loading=""lazy"" sizes=""(max-width: 657px) 100vw, 657px"" src=""/media/uploads/articles/387/app_screenshot.gif"" srcset="""" width=""657""/></a></p>
<h1><span id=""1_Calling_one_activity_from_another_in_android"">1. Calling one activity from another in android</span></h1>
<p>We can call one activity from another by using Intents. Intent is one of the main building block which provides an abstract description of an operation to be performed. <code>startActivity(intent)</code> method belongs to your Activity class and can be used for starting a new activity.</p>
<pre class=""prettyprint lang-java"">Intent intent = new Intent(context, YourActivityClass.class);
startActivity(intent);</pre>
<h1><span id=""2_Passing_data_from_one_activity_to_other_in_android"">2. Passing data from one activity to other in android</span></h1>
<p>An intent contains the action and optionally additional data. The data can be passed to other activity using intent p<code>utExtra()</code> method. Data is passed as extras and are key/value pairs. The key is always a String. As value you can use the primitive data types int, float, chars, etc. We can also pass <code>Parceable</code> and <code>Serializable</code> objects from one activity to other.</p>
<pre class=""prettyprint lang-java"">Intent intent = new Intent(context, YourActivityClass.class);
intent.putExtra(KEY, &lt;your value here&gt;);
startActivity(intent);</pre>
<h1><span id=""3_Retrieving_bundle_data_from_android_activity"">3. Retrieving bundle data from android activity</span></h1>
<p>You can retrieve the information using  <code>getData()</code> methods on the Intent object. The Intent object can be retrieved via the <code>getIntent(</code>) method.</p>
<pre class=""prettyprint lang-java"">  Intent intent = getIntent();
  if (null != intent) {
	String stringData= intent.getStringExtra(KEY);
	int numberData = intent.getIntExtra(KEY, defaultValue);
	boolean booleanData = intent.getBooleanExtra(KEY, defaultValue);
	char charData = intent.getCharExtra(KEY, defaultValue);	
  }</pre>
<p>To retrieve <code>Serializable</code> and <code>Parcelable</code> object using <code>getSerializableExtra(KEY)</code> and <code>getParcelableExtra(KEY)</code> method.</p>
<h1><span id=""4_Example_and_case_study"">4. Example and case study</span></h1>
<p>In this example, we will develop one list view of objects and clicking on a list row, it will open up another actiity displaying the detail of that row. Here, we are passing the row data from one activity to other.</p>
<h2><span id=""41_Defining_case_study_layouts"">4.1. Defining case study layouts</span></h2>
<p><span style=""text-decoration: underline;""><strong>activity_news_list.xml</strong></span></p>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    tools:context="".NewsListActivity"" &gt;

    &lt;ListView
        android:id=""@+id/newsList""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent"" &gt;
    &lt;/ListView&gt;

&lt;/RelativeLayout&gt;</pre>
<p><span style=""text-decoration: underline;""><strong>snippet_news_list_row.xml</strong></span></p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/LinearLayout1""
    android:layout_width=""match_parent""
    android:layout_height=""80dp""
    android:orientation=""vertical""
    android:minHeight=""60dp""
     android:background=""#99CC00""
    tools:context="".NewsListActivity"" &gt;

    &lt;TextView
        android:id=""@+id/newsHeadline""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""News Headline""
        android:padding=""5dp""
        android:minLines=""2""
        android:maxLines=""2""
        android:textStyle=""bold""
        android:textColor=""#0000dc""
        android:textAppearance=""?android:attr/textAppearanceMedium"" /&gt;

    &lt;TextView
        android:id=""@+id/pubDate""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_marginRight=""19dp""
        android:text=""Published Date""
        android:padding=""3dp""
        android:textColor=""#FF4444""
        android:textAppearance=""?android:attr/textAppearanceSmall"" /&gt;

&lt;/LinearLayout&gt;</pre>
<p><span style=""text-decoration: underline;""><strong>activity_news_details.xml</strong></span></p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/LinearLayout1""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    tools:context="".NewsListActivity"" &gt;

    &lt;TextView
        android:id=""@+id/headlines""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:padding=""8dp""
        android:text=""Headline""
        android:background=""#99CC00""
        android:textStyle=""bold""
        android:textAppearance=""?android:attr/textAppearanceMedium""
        android:textColor=""#0000dc"" /&gt;

    &lt;TextView
        android:id=""@+id/pub_date""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:gravity=""right""
        android:padding=""3dp""
        android:text=""Published Date""
        android:textAppearance=""?android:attr/textAppearanceSmall""
        android:background=""#33B5E5""
        android:textColor=""#0000dc"" /&gt;

    &lt;TextView
        android:id=""@+id/description""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:padding=""10dp""
        android:text=""News Description""
        android:textAppearance=""?android:attr/textAppearanceMedium"" /&gt;

&lt;/LinearLayout&gt;</pre>
<h2><span id=""42_Defining_Java_Classes"">4.2. Defining Java Classes</span></h2>
<p><span style=""text-decoration: underline;""><strong>NewsItem.java</strong></span></p>
<pre class=""prettyprint lang-java"">package com.javatechig;

public class NewsItem  {

	private String headline;
	private String details;
	private String pubDate;

	public String getHeadline() {
		return headline;
	}

	public void setHeadline(String headline) {
		this.headline = headline;
	}

	public String getDetails() {
		return details;
	}

	public void setDetails(String details) {
		this.details = details;
	}

	public String getPubDate() {
		return pubDate;
	}

	public void setPubDate(String pubDate) {
		this.pubDate = pubDate;
	}

}</pre>
<p><span style=""text-decoration: underline;""><strong>NewsListActivity.java</strong></span></p>
<p>Here we render custom list view to show the news items. NewsItems are shown with alternative colors for each rows. When a list row is clicked, we pass the data to NewsDetailsActivity using intent extras.</p>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.util.ArrayList;
import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.view.Menu;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;

public class NewsListActivity extends Activity {

	private NewsListAdapter adapter;

	public static final String KEY_HEADLINE=""news_headline"";
	public static final String KEY_DETAILS=""news_details"";
	public static final String KEY_PUBDATE = ""news_pub_date"";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_news_list);

		adapter = new NewsListAdapter(this, getData());
		ListView list = (ListView) findViewById(R.id.newsList);
		list.setAdapter(adapter);

		list.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView&lt;?&gt; adapterView, View view, int position, long offset) {
				NewsItem item = (NewsItem) adapter.getItem(position);

				Intent intent = new Intent(getApplicationContext(), NewsDetailsActivity.class);
				intent.putExtra(KEY_HEADLINE, item.getHeadline());
				intent.putExtra(KEY_PUBDATE, item.getPubDate());
				intent.putExtra(KEY_DETAILS, item.getDetails());

				startActivity(intent); 
			}
		});
	}

	private ArrayList&lt;NewsItem&gt; getData() {
		ArrayList&lt;NewsItem&gt; newsList = new ArrayList&lt;NewsItem&gt;();
		String[] headlines = getResources().getStringArray(R.array.news_headlines);
		String[] pubDate = getResources().getStringArray(R.array.news_pubdate);
		String[] details = getResources().getStringArray(R.array.news_details);

		for (int i = 0; i &lt; headlines.length; i++) {
			NewsItem item = new NewsItem();
			item.setHeadline(headlines[i]);
			item.setPubDate(pubDate[i]);
			item.setDetails(details[i]);
			newsList.add(item);
		}
		return newsList;
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
}</pre>
<p><span style=""text-decoration: underline;""><strong>NewsListAdapter.java</strong></span></p>
<p>This adapter will be used for custom list view. Here in this we are using alternative color for each of the list row.</p>
<pre class=""prettyprint lang-java"">package com.javatechig;

import java.util.ArrayList;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;

public class NewsListAdapter extends BaseAdapter {

	private ArrayList&lt;NewsItem&gt; listData;
	private LayoutInflater layoutInflater;
	private Context context;

	public NewsListAdapter(Context context, ArrayList&lt;NewsItem&gt; listData) {
		this.listData = listData;
		this.context = context;
		layoutInflater = LayoutInflater.from(context);
	}

	@Override
	public int getCount() {
		return listData.size();
	}

	@Override
	public Object getItem(int position) {
		return listData.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	public View getView(int position, View convertView, ViewGroup parent) {
		ViewHolder holder;
		if (convertView == null) {
			convertView = layoutInflater.inflate(R.layout.snippet_news_list_row, null);
			holder = new ViewHolder();
			holder.headline = (TextView) convertView.findViewById(R.id.newsHeadline);
			holder.pubDate = (TextView) convertView.findViewById(R.id.pubDate);
			convertView.setTag(holder);
		} else {
			holder = (ViewHolder) convertView.getTag();
		}

		holder.headline.setText(listData.get(position).getHeadline());
		holder.pubDate.setText(listData.get(position).getPubDate());

		if (position % 2 == 1) {
			convertView.setBackgroundColor(context.getResources().getColor(R.color.list_row_color1));  
		} else {
			convertView.setBackgroundColor(context.getResources().getColor(R.color.list_row_color2));  
		}

		return convertView;
	}

	static class ViewHolder {
		TextView headline;
		TextView pubDate;
	}

}</pre>
<p><span style=""text-decoration: underline;""><strong>NewsDetailsActivity.java</strong></span></p>
<p>In NewsDetailsActivity we are retrieving the data passed from NewsListActivity.</p>
<pre class=""prettyprint lang-java"">package com.javatechig;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.widget.TextView;
import static com.javatechig.NewsListActivity.KEY_HEADLINE;
import static com.javatechig.NewsListActivity.KEY_PUBDATE;
import static com.javatechig.NewsListActivity.KEY_DETAILS;

public class NewsDetailsActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_news_details);

		String headline = """";
		String details = """";
		String pubDate = """";

		Intent intent = getIntent();
		if (null != intent) {
			headline = intent.getStringExtra(KEY_HEADLINE);
			details = intent.getStringExtra(KEY_DETAILS);
			pubDate = intent.getStringExtra(KEY_PUBDATE);
		}

		TextView headlineTxt = (TextView) findViewById(R.id.headlines);
		headlineTxt.setText(headline);

		TextView pubdateTxt = (TextView) findViewById(R.id.pub_date);
		pubdateTxt.setText(pubDate);

		TextView descriptionTxt = (TextView) findViewById(R.id.description);
		descriptionTxt.setText(details);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
}</pre>
<h1><span id=""5_Download_Complete_Example"">5. Download Complete Example</span></h1>
<p>Here you can download complete eclipse project source code from <a href=""https://github.com/javatechig/Android-UI-Tutorials/tree/master/AndroidBundleExample"" rel=""nofollow noopener noreferrer"" target=""_blank""><strong>GitHub</strong></a>.</p>
<p><center></center></p>
",0,"standard","post"
"How to create a HTTP adapter in IBM Worlight","how-to-create-a-http-adapter-in-ibm-worlight","This tutorial explains how to create a HTTP adapter in IBM Worlight and easy steps to deploy on&hellip;
","LIVE","<p>This tutorial explains how to create a HTTP adapter in IBM Worlight and easy steps to deploy on Worklight Server. This example reads feeds from stacktips.com using HTTP Adapter.</p>
<h2><span id=""1_What_is_an_IBM_Worklight_Adapter"">1. What is an IBM Worklight Adapter?</span></h2>
<p>Adapter is a mediator between mobile applications and enterprise system. Adapters provide an easy and secure access to enterprise system. And it is efficient to provide enterprise data to mobile devices in a uniform data format. The data can be presented to mobile device using various interchange formats like XML or JSON (used mostly)</p>
<p>IBM Worklight provides three different types of adapters</p>
<ol>
<li>HTTP adapter: HTTP adapters provide access to HTTP-based enterprise services, including RESTful and SOAP-based services.</li>
<li>SQL adapter: SQL adapters provide access to enterprise databases.</li>
<li>Cast IRON adapter: Cast Iron adapters initiate orchestrations in IBM Web Sphere Cast Iron.</li>
</ol>
<p>Adapters are coded in JavaScript and it runs at server-side on the IBM Worklight mobile application platform. IBM internally uses Rhino JavaScript engine for executing the JavaScript source code.</p>
<h2><span id=""2_How_to_create_HTTP_adapter"">2. How to create HTTP adapter?</span></h2>
<h3><span id=""21_Architecture_of_HTTP_Adapter""><strong>2.1 Architecture of HTTP Adapter</strong></span></h3>
<p>Adapters are developed using JavaScript and always runs on the IBM Worklight server. When the mobile application makes request to the HTTP adapter, the HTTP adapter sends the web request to the back end web services. As a response the web service returns the response either in json or xml format, and the adapters converts the response to JSON format and sends it to the requested client application.</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter wp-image-1170"" height=""238"" loading=""lazy"" sizes=""(max-width: 495px) 100vw, 495px"" src=""/media/uploads/articles/388/http-adapter-worklight.png"" srcset="""" title=""http-adapter-worklight"" width=""495""/></a></p>
<p>In my example, I am witting an adapter to fetch feeds from stacktips.com. To fetch the feeds I have to connect to <a href=""http://stacktips.com/feed/"">http://stacktips.com/feed/</a></p>
<h3><span id=""22_Now_let_us_move_to_create_a_HTTP_Adapter""><strong>2.2 Now let us move to create a HTTP Adapter</strong></span></h3>
<p>1. Start Eclipse, and create a new Worklight project.</p>
<p><wbr/><wbr/>2. Right-click on the newly created Worklight project and then, New-&gt;<wbr/> Worklight Adapter. You require giving the project name, adapter name and choosing HTTP adapter type.</p>
<p>3. Go to the adapter’s folder and then open the newly created adapter xml file. This XML contains the configuration required to connect to the REST Web service from adapter.</p>
<p>4. Change the connection parameters like protocol, domain name and port. See my connection parameter in this example. My xml file after changes</p>
<pre escaped=""true"" lang=""xml"" line=""1"">
&lt;wl:adapter xmlns:wl=""http://www.worklight.com/integration"" 
xmlns:http=""http://www.worklight.com/integration/http"" 
xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
name=""JavatechigFeedReader""&gt;
   &lt;displayName&gt;stacktips.com&lt;/displayName&gt;
   &lt;description&gt;Javatechig FeedReader&lt;/description&gt;
   &lt;connectivity&gt;
          &lt;connectionPolicy xsi:type=""http:HTTPConnectionPolicyType""&gt;
              &lt;protocol&gt;http&lt;/protocol&gt;
              &lt;domain&gt;stacktips.com&lt;/domain&gt;
              &lt;port&gt;80&lt;/port&gt;
          &lt;/connectionPolicy&gt;
          &lt;loadConstraints maxConcurrentConnectionsPerNode=""2""/&gt;
   &lt;/connectivity&gt;

&lt;procedure name=""getFeeds""/&gt;
&lt;/wl:adapter&gt;</pre>
<p>I have changed domain name to “stacktips.com”</p>
<p>The xml file lists the procedure declaration for the adapters. It declares all the procedures that the adapter implements. The adapter implementation resides on the JavaScript impl file.</p>
<p>5. Now let us implement the procedure.</p>
<pre escaped=""true"" lang=""javascript"" line=""1"">
function getFeeds() {	
	var input = {
	    method : 'get',
	    returnedContentType : 'xml',
	    path : ""feed"",
	    transformation : {
		    type : 'xslFile',
		    xslFile : 'filtered.xsl'
	    }
	};

	return WL.Server.invokeHttp(input);
}</pre>
<h2><span id=""3_Testing_Adapter_Procedures"">3.  Testing Adapter Procedures?</span></h2>
<p>Right click on the adapter folder -&gt; run as -&gt; Deploy as Worklight adapter. Once deployed you can see it from the admin console. Open your browser and hit <a href=""http://localhost:8080/console/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://localhost:8080/console/</a></p>
<p>Now, RunAs-&gt; Invoke Worklight procedure. Select the procedure to test. For now you can test for getFeeds, results will appear as JSON data.</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter wp-image-1166"" height=""343"" loading=""lazy"" src=""/media/uploads/articles/388/testing-http-adapter.png"" srcset="""" title=""testing-http-adapter"" width=""323""/></a></p>
<h2><span id=""4_How_to_invoke_worklight_Adapter_Procedure"">4. How to invoke worklight Adapter Procedure?</span></h2>
<p>Refer my earlier post <a href=""http://stacktips.com/2013/03/22/invoking-adapter-procedure-in-ibm-worklight/"" target=""_blank""><strong> “Invoking Adapter procedure in IBM Worklight”</strong></a></p>
<h2><span id=""5_References"">5. References</span></h2>
<p><a href=""http://pic.dhe.ibm.com/infocenter/wrklight"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://pic.dhe.ibm.com/infocenter/wrklight</a></p>
<p> </p>
",0,"standard","post"
"Invoking Adapter procedure in IBM Worklight","invoking-adapter-procedure-in-ibm-worklight","This tutorial will help you to understand the Adapters in IBM Worklight and Invoking Adapter procedure in IBM&hellip;
","LIVE","
<p>This tutorial will help you to understand the Adapters in IBM Worklight and Invoking Adapter procedure in IBM Worklight from Javascript client code.  Here to make my post simplified, I am continuing my previous post <a href=""http://stacktips.com/2013/03/18/how-to-create-a-sql-adapter-in-ibm-worklight/"" target=""_blank"">How to create an SQL Adapter in IBM Worklight</a> refer the same before reading this post.</p>
<h2><span id=""1_What_is_an_IBM_Worklight_Adapter"">1. What is an IBM Worklight Adapter?</span></h2>
<p>Adapter is a mediator between mobile applications and enterprise system. Adapters provide an easy and secure access to enterprise system. And it is efficient to provide enterprise data to mobile devices in a uniform data format. The data can be presented to mobile device using various interchange formats like XML or JSON (used mostly)</p>
<p>IBM Worklight provides three different types of adapters</p>
<ol class=""space"">
<li>HTTP adapter: HTTP adapters provide access to HTTP-based enterprise services, including Restful and SOAP-based services.</li>
<li>SQL adapter: SQL adapters provide access to enterprise databases.</li>
<li>Cast IRON adapter: Cast Iron adapters initiate orchestrations in IBM Web Sphere Cast Iron.</li>
</ol>
<p>Adapters are coded in JavaScript and it runs at server-side on the IBM Worklight mobile application platform. IBM internally uses Rhino JavaScript engine for executing the JavaScript source code.</p>
<h2><span id=""2_How_to_create_SQL_Adapter"">2. How to create SQL Adapter?</span></h2>
<p>Refer my previous post for <a href=""http://stacktips.com/2013/03/18/how-to-create-a-sql-adapter-in-ibm-worklight/"" target=""_blank"">creating SQL Adapter in IBM Worklight.</a></p>
<h2><span id=""3_How_to_invoke_Adapter_Procedure"">3. How to invoke Adapter Procedure?</span></h2>
<p>Let us understand a bit before going much into coding.Worklight application can communicate with adapters by making the procedure calls. Typically while making a server call from java script we end up with getting the problem of cross origin proxy browser security issues. But IBM Worklight application architecture is design avoids the same-origin constraints and can make procedure call with the adapters deployed on IBM Worklight server.</p>
<p>The invocation of adapter procedure involved two basic configurations</p>
<ol>
<li>Preparing invocationData object</li>
<li>Invoking procedure from the application</li>
</ol>
<h3><span id=""31_Prepare_an_invocationData_object""><strong>3.1. Prepare an invocationData object</strong></span></h3>
<p>InvocationData object is used to provide the invocation configuration information. The configuration parameters are being configured as a JSON object. Preparing invocationData object requires three configuration parameters i.e. adapter name, procedure name and parameters to be passed. For parameters, leave empty array if your procedure is not expecting.</p>
<pre lang=""javascript"">var invocationData = {
        adapter : 'StudentInfo', // adapter name
        procedure : 'getStudentInfos', // procedure name
        parameters : [] // parameters if any
};</pre>
<p>Here in this example, I am trying to invoke the SQL adapter created in my previous post.</p>
<h3><span id=""32_Invoking_a_procedure_from_the_application""><strong>3.2. Invoking a procedure from the application</strong></span></h3>
<p>We can invoke a procedure from the client application using <code>WL.Client.invokeProcedure</code> method. This method take invocationData and call back methods. The call back methods are the failure or success callbacks.</p>
<p> </p>
<pre lang=""javascript"">WL.Client.invokeProcedure(invocationData,{
		onSuccess : loadSQLQueerySuccess, //success callback
		onFailure : loadSQLQueeryFailure // failure callback
});</pre>
<p>On succesful invocation of adapter procedure the success callback is getting called with the JSON response. The success JSON response contains the status code and the invocationResult object. Below is the format of JSON, I have received from my SQL Adapter.</p>
<pre lang=""javascript"">{
   ""status"":200,
   ""invocationContext"":null,
   ""invocationResult"":{
      ""responseID"":""8"",
      ""isSuccessful"":true,
      ""resultSet"":[
         {
            ""sgrade"":""A+"",
            ""sid"":""PUC001"",
            ""sclass"":""PUC"",
            ""sname"":""Rohan""
         },
         {
            ""sgrade"":""A"",
            ""sid"":""PUC002"",
            ""sclass"":""PUC"",
            ""sname"":""Rakesh""
         },
         {
            ""sgrade"":""C"",
            ""sid"":""PUC003"",
            ""sclass"":""PUC"",
            ""sname"":""Raj""
         },
         {
            ""sgrade"":""E"",
            ""sid"":""PUC004"",
            ""sclass"":""PUC"",
            ""sname"":""Roman""
         }
      ]
   }
}</pre>
<p>On failure callback, another JSON object is being returned with the error code, and error message and HTTP response status code.</p>
<h2><span id=""4_Complete_code_Snippet"">4. Complete code Snippet</span></h2>
<pre lang=""javascript"">function loadSQLRecords(){
	var invocationData = {
		adapter : 'StudentInfo',
		procedure : 'getStudentInfos',
		parameters : []
	};

	WL.Client.invokeProcedure(invocationData,{
		onSuccess : loadSQLQueerySuccess,
		onFailure : loadSQLQueeryFailure
	});
}

function loadSQLQueerySuccess(result){
	WL.Logger.debug(""Retrieve success"" +  JSON.stringify(result));
	displayFeeds(result.invocationResult.resultSet);
}

function loadSQLQueeryFailure(result){
	WL.Logger.error(""Retrieve failure"");
}</pre>
<h2><span id=""5_Updating_UI_with_results"">5. Updating UI with results</span></h2>
<p>To make the example more simplified, I am just creating an simple list and printing the data in rows. You can also have your user interface more beautified using your skills in JQueery, Sencha or any other frameworks. For now below is my code</p>
<pre lang=""javascript"">function displayFeeds(items){
         var ul = $('#itemsList');
         for (var i = 0; i &lt; items.length; i++) {
              var li = $('&lt;li/&gt;').html(items[i].sid);
              li.append($('&lt;li/&gt;').html(items[i].sname));
              li.append($('&lt;li/&gt;').html(items[i].sgrade));
              li.append($('&lt;hr&gt;'));
              ul.append(li);
        }
}</pre>
<h2><span id=""6_Output"">6. Output</span></h2>
<p>Now we are done, just deploy your application and then check the results.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-full wp-image-1158"" height=""394"" loading=""lazy"" src=""/media/uploads/articles/389/worklight-console.png"" srcset="""" title=""worklight-console"" width=""542""/></a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-full wp-image-1155"" height=""458"" loading=""lazy"" src=""/media/uploads/articles/389/sql-adapter-procedure-output.png"" srcset="""" title=""sql-adapter-procedure-output"" width=""240""/></a></p>
",0,"standard","post"
"Struts2 Localization and Internationalization Example","struts2-localization-example","This tutorial will explain Struts2 Localization, internationalization (i18n) with Example. We will build a sample internationalized web application with support for English, French and Japanese.
","LIVE","<p>This tutorial will explain Struts2 Localization, internationalization (i18n) with Example. We will build a sample internationalized web application with support for English, French and Japanese.</p>
<h1>Introduction to Internationalization</h1>
<p>Internationalization is the process designing a software application so that it can be adapted to various languages and regions without engineering changes. Localization helps to build internationalized software for a specific region or language by adding locale-specific components and translating text.  You can call internationalization as translation or localization. Internationalization is abbreviated i18n because the word starts with i and ends with an n, and there are 18 characters between the first i and the last n.</p>
<p>For example, while making a search in Google, the expected results appear in different languages based on region. Not just the search result, you will find the Google page menus display as selected language.</p>
<h1>Internationalizing (i18n) / Localization (i10n)</h1>
<p>Struts2 provides localization i.e. internationalization (i18n) support through resource bundles, interceptors and tag libraries. Here in this tutorial we will learn to build internationalized application using resource bundle.  Resource bundle is a flat file that contains key-value pairs.</p>
<p><strong>English Resource Bundle</strong></p>
<table class=""hovertable"">
<tbody>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
<tr>
<td>key_name</td>
<td>value_value</td>
</tr>
<tr>
<td>key_name</td>
<td>value_value</td>
</tr>
</tbody>
</table>
<p><strong>French Resource Bundle</strong></p>
<table class=""hovertable"">
<tbody>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
<tr>
<td>key_name</td>
<td>value_value</td>
</tr>
<tr>
<td>key_name</td>
<td>value_value</td>
</tr>
</tbody>
</table>
<p>Here the key-value plays major role to adapting the locale language. The key values resource bundle files need to be developed for each of the supporting locale.</p>
<p><b> </b></p>
<h1>Internationalizing uses in following places:</h1>
<ul>
<li>UI Tags</li>
<li>Messages &amp; Errors from validation interface</li>
<li>getText() method</li>
</ul>
<h1>Retrieve message from resource bundle:</h1>
<p><b>      1. getText()</b></p>
<p style=""padding-left: 30px;"">&lt;s:property value=”getText(‘msg.key’)” /&gt;</p>
<p><b>      2. Key attribute</b></p>
<p style=""padding-left: 30px;"">&lt;s:textfield key=”msg.key” /&gt;</p>
<p> </p>
<h1>Resource Bundle:</h1>
<p>The resource bundle is used to keep the key and value pairs for respective languages such as English Resource Bundle can have value as English Text and France Resource Bundle can have value as France Text but the keys are same across.</p>
<p>Resource Bundle can be place in the following places</p>
<ol>
<li>ActionClass.properties</li>
<li>Interface.properties</li>
<li>BaseClass.properties</li>
<li>ModelDriven’s Model</li>
<li>Package.properties</li>
<li>I18n message key</li>
<li>Global resource properties</li>
</ol>
<p>The resource properties are being searched in the above order. At first it looks the resource properties with action class name.properties, if does not found then it looks for interface.properties else goes on till Global resource properties.</p>
<p> </p>
<p><b>UTF-8:  </b>It represents characters in the Unicode character set.</p>
<p><b>Call Flow: </b>On selecting language the UI will render with respective language.</p>
<p><b>Software and tools required</b></p>
<ol>
<li>JAVA 1.6</li>
<li>Tomcat 6</li>
<li>Eclipse 3.6</li>
</ol>
<h1>Steps to create Web Application to support multi-language</h1>
<ol>
<li>Create dynamic web application in eclipse named as <b>struts2localization</b>.<b></b></li>
<li>Configure the project with Struts2Framework (refer previous example)<b></b></li>
<li>Modify the <b>struts.xml</b> as follows to enable the framework to use resource bundle<b></b></li>
</ol>
<p>Add the following line just above the package element.</p>
<p><b>&lt;constant name=”struts.custom.i18n.resources” value=”global” /&gt;</b></p>
<p><b>Value:</b> Prefix name of resource bundle. I am using global.</p>
<pre lang=""xml"">&lt;struts&gt;
	&lt;constant name=""struts.custom.i18n.resources"" value=""global"" /&gt; 
&lt;package name=""struts2web"" namespace=""/"" extends=""struts-default""&gt;
&lt;action name=""login""&gt;
	&lt;result&gt;pages/login.jsp&lt;/result&gt;
&lt;/action&gt;
&lt;action name=""changelang""     
        class=""com.javatechig.struts2web.actions.ChangeLocaleAction""&gt;	
&lt;result name=""success""&gt;pages/login.jsp&lt;/result&gt;
&lt;/action&gt;
&lt;/package&gt;
&lt;/struts&gt;</pre>
<p><strong>4. Create resource properties file as follows under src folder</strong></p>
<p>Naming Conventions – <strong>prefix_lang.properties</strong></p>
<p><strong>a. English</strong></p>
<p style=""padding-left: 30px;"">global.properties<br/>
key : login.here value: Login Here<br/>
key : login.user value: User<br/>
key : login.password value: Password<br/>
key: login.submit value: Login</p>
<p><strong>b. French</strong></p>
<p style=""padding-left: 30px;"">global_fr.properties<br/>
key : login.here value: Connectez-vous ici<br/>
key : login.user value: utilisateur<br/>
key : login.password value: mot de passé<br/>
key: login.submit value: Connexion</p>
<p><strong>c. Japanese</strong></p>
<p style=""padding-left: 30px;"">global_ja.properties<br/>
key : login.here value: ここにログイン<br/>
key : login.user value: ユーザー<br/>
key : login.password value: パスワード<br/>
key: login.submit value: ログイン</p>
<p>Here you can observe that keys are same across all file but the value changes as per the language. The language which contains non-English alphabet like Japanese should use Unicode instead of actual characters.</p>
<p><b><span style=""text-decoration: underline;"">global_ja.properties</span></b></p>
<pre class=""brush:html;gutter:false"">  key: login.here      value: \u3053\u3053\u306B\u30ED\u30B0\u30A4\u30F3
  key: login.user      value: \u30E6\u30FC\u30B6\u30FC
  key: login.password  value: \u30D1\u30B9\u30EF\u30FC\u30C9
  key: login.submit    value: \u30ED\u30B0\u30A4\u30F3</pre>
<p><strong>5. Create Login.jsp with language options as follows</strong><b></b></p>
<pre lang=""xml"">&lt;%@ page contentType=""text/html; charset=UTF-8""%&gt;

&lt;s:form action=""loginauth"" theme=""simple""&gt;
&lt;center&gt;
	&lt;table width=""300""&gt;
		&lt;tr height=""30""&gt;
			&lt;td width=""300"" colspan=""2""&gt;
				&lt;s:a href=""changelang?lang=en"" &gt;English&lt;/s:a&gt;				
				&lt;s:a href=""changelang?lang=fr"" &gt;France&lt;/s:a&gt;
				&lt;s:a href=""changelang?lang=ja_JP"" &gt;Japanese&lt;/s:a&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td colspan=""2"" width=""300"" align=""left"" style=""background:#eee""&gt;&lt;s:property value=""getText('login.here')"" /&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td align=""left"" width=""100""&gt;&lt;s:property value=""getText('login.user')"" /&gt;:&lt;/td&gt;&lt;td align=""left""&gt;&lt;s:textfield name=""userId""/&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td align=""left""&gt;&lt;s:property value=""getText('login.password')"" /&gt;:&lt;/td&gt;&lt;td align=""left""&gt;&lt;s:password type=""text"" name=""password""/&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td align=""left""&gt;&lt;/td&gt;&lt;td align=""right""&gt;&lt;s:submit key=""login.submit"" name=""submit"" /&gt;&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/table&gt;
&lt;/center&gt;
&lt;/s:form&gt;</pre>
<p>Here I have added three language options i.e. English, France and Japanese.</p>
<pre lang=""xml"">&lt;s:a href=""changelang?lang=en"" &gt;English&lt;/s:a&gt;				
&lt;s:a href=""changelang?lang=fr"" &gt;France&lt;/s:a&gt;
&lt;s:a href=""changelang?lang=ja"" &gt;Japanese&lt;/s:a&gt;</pre>
<p><strong>changelang </strong>– is the action name which is mapped with ChangeLocaleAction in struts.xml.<br/>
lang – is the parameter to get selected language.</p>
<p>Here is the code to display text in different language in JSP<br/>
<strong>&lt;%@ page contentType=”text/html; charset=UTF-8″%&gt;</strong> : This tag should be include in all pages where Multilanguage is required to display.</p>
<p>Get Message from resource bundle:</p>
<pre lang=""xml"">&lt;s:property value=""getText('login.user')"" /&gt; 
&lt;s:submit key=""login.submit"" name=""submit"" /&gt;</pre>
<p>The above are used to get the message from resource bundle.<br/>
getText(String s) : It searches the key(‘login.user’) in the resource bundle and returns the respective value or null if none is found. This can be used as label in the UI.<br/>
Key : This helps to retrieve the value from resource bundle using key (‘login.submit’). This is used in html field element like TextField and button etc.</p>
<p><strong>6. Create ChangeLocaleAction.java in com.javatechig.struts2web.actions</strong></p>
<pre lang=""java"">Locale locale = new Locale(lang);
ActionContext.getContext().setLocale(locale);</pre>
<p><strong>lang </strong>: It is the parameter to get the language<br/>
<strong>Locale </strong>: It is from java util package.<br/>
setLocale : It set the locale object to actionContext which is accessible by resource throughout the context.</p>
<p><strong>7. Output of the code sample</strong></p>
<p><strong>Finally the eclipse project structures looks as follows</strong></p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Struts2 Localization and Internationalization Example"" class=""size-full wp-image-3242 aligncenter"" height=""514"" loading=""lazy"" sizes=""(max-width: 806px) 100vw, 806px"" src=""/media/uploads/articles/390/Struts2-Localization-and-Internationalization-Example.png"" srcset="""" width=""806""/></a></p>
<p style=""text-align: center;""><b>Output in English by default</b><br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Struts2 Localization and Internationalization Example output"" class=""size-full wp-image-3244 aligncenter"" height=""1024"" loading=""lazy"" sizes=""(max-width: 1280px) 100vw, 1280px"" src=""/media/uploads/articles/390/Struts2-Localization-and-Internationalization-Example-output1.png"" srcset="""" width=""1280""/></a></p>
<p><b></b><b>Output in</b>France</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Struts2 Localization and Internationalization Example output French"" class=""aligncenter"" height=""614"" loading=""lazy"" src=""/media/uploads/articles/390/Struts2-Localization-and-Internationalization-Example-output-French.png"" srcset="""" width=""768""/></a></p>
<p><b>Output in Japanese</b></p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Struts2 Localization and Internationalization Example japnese"" class=""size-full wp-image-3243 aligncenter"" height=""1024"" loading=""lazy"" sizes=""(max-width: 1280px) 100vw, 1280px"" src=""/media/uploads/articles/390/Struts2-Localization-and-Internationalization-Example-japnese1.png"" srcset="""" width=""1280""/></a></p>
",0,"standard","post"
"Android Gridview Example- Building Image Gallery in android","android-gridview-example-building-image-gallery-in-android","GridView is a ViewGroup that displays items in a two-dimensional, scrollable grid. In this tutorial, we’ll build an Image Gallery using a GridView in android. Each grid to display an image thumbnails and a text. While an item is selected, a toast message will display the position of the grid selected.","LIVE","<h2><span id=""1_Introduction"">1. Introduction</span></h2>
<p>GridView is a ViewGroup that displays items in a two-dimensional, scrollable grid. In this tutorial, we will build an image gallery using Android GridView. Each grid in our example will display an image and a text tile.</p>
<p class=""wp-alert info"">
Checkout the advance version of this tutorial, that downloads the data from server and displays it on&nbsp;GridView.<br>
<a href=""/articles/download-and-display-image-in-android-gridview"" rel=""nofollow"">Download and Display Image in Android GridView</a>
</p>
<p>When user clicks on any grid item, it will navigate user to the details page.&nbsp;The output of the example we will build is depicted in following&nbsp;image.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Android GridView Example"" class=""aligncenter size-full wp-image-8823"" height=""465"" loading=""lazy"" sizes=""(max-width: 800px) 100vw, 800px"" src=""/media/uploads/articles/391/Android-GridView-Example.jpg"" srcset="""" width=""800""></a></p>
<p>&nbsp;</p>
<h2><span id=""2_AddingGridView_layout"">2. Adding&nbsp;GridView layout</span></h2>
<p>To begin with, let us create a layout for activity that contains&nbsp;a GridView. Let us create a new file named activity_main.xml in your application layout folder.</p>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""#f0f0f0""&gt;

    &lt;GridView
        android:id=""@+id/gridView""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_margin=""5dp""
        android:columnWidth=""100dp""
        android:drawSelectorOnTop=""true""
        android:gravity=""center""
        android:numColumns=""auto_fit""
        android:stretchMode=""columnWidth""
        android:verticalSpacing=""5dp""
        android:focusable=""true""
        android:clickable=""true""/&gt;

&lt;/RelativeLayout&gt;
</pre>
<p>Notice that in&nbsp;the above code, we have added a&nbsp;GridView with id gridView, and used some of the attributes such as numColumns, stretchMode, verticalSpacing, etc.&nbsp;Most of the android attributes are self explanatory.</p>
<h2><span id=""3_Define_grid_item_layout"">3. Define grid item layout</span></h2>
<p>As you can notice from the above screenshot, each of the grid item contains&nbsp;an <code>ImageView</code> and an <code>TextView</code>. The following listing will show you the layout for each grid cell item.&nbsp;This layout will be used by the GridView adapter to render the items. Create a new layout inside your project layout directory&nbsp;and name it as&nbsp;<code>grid_item_layout.xml</code>.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""wrap_content""
    android:layout_height=""wrap_content""
    android:layout_marginTop=""5dp""
    android:background=""@drawable/grid_color_selector""
    android:orientation=""vertical""
    android:padding=""5dp""&gt;

    &lt;ImageView
        android:id=""@+id/image""
        android:layout_width=""100dp""
        android:layout_height=""100dp"" /&gt;

    &lt;TextView
        android:id=""@+id/text""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_marginTop=""5dp""
        android:gravity=""center""
        android:textSize=""12sp"" /&gt;

&lt;/LinearLayout&gt;
</pre>
<h2><span id=""4_CreatingGridView_adapter"">4. Creating&nbsp;GridView adapter</span></h2>
<p>Adapter is acts as a&nbsp;bridge between data source and&nbsp;adapter views such as ListView, GridView.&nbsp;Adapter iterates through the data set from beginning till the end&nbsp;and generate Views for each item in the list.</p>
<p>Android SDK provides three different Adapter implementation, that includes <code>ArrayAdapter</code>, <code>CursorAdapter</code>and <code>SimpleAdapter</code>. An ArrayAdapter expects an Array or an List as input, while CursorAdapter accepts the instance of Cursor and SimpleAdapter maps the static data defined in the resources. The type of adapter that suits your app need is purely based on the input data type.</p>
<p>The BaseAdapter is the generic implementation for all of the three adapter types and can be used for ListView, GridView or for Spinners.&nbsp;You may directly use ArrayAdapter by passing array as input or create your own customized class by extending BaseAdapter.</p>
<p>Let us not proceed with creating a custom adapter for grid view by extending ArrayAdapter. Create a new class&nbsp;GridViewAdapter.java in in your application src directory.</p>
<pre class=""prettyprint lang-java"">public class GridViewAdapter extends ArrayAdapter {
	private Context context;
	private int layoutResourceId;
	private ArrayList data = new ArrayList();

	public GridViewAdapter(Context context, int layoutResourceId, ArrayList data) {
		super(context, layoutResourceId, data);
		this.layoutResourceId = layoutResourceId;
		this.context = context;
		this.data = data;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		View row = convertView;
		ViewHolder holder = null;

		if (row == null) {
			LayoutInflater inflater = ((Activity) context).getLayoutInflater();
			row = inflater.inflate(layoutResourceId, parent, false);
			holder = new ViewHolder();
			holder.imageTitle = (TextView) row.findViewById(R.id.text);
			holder.image = (ImageView) row.findViewById(R.id.image);
			row.setTag(holder);
		} else {
			holder = (ViewHolder) row.getTag();
		}

		ImageItem item = data.get(position);
		holder.imageTitle.setText(item.getTitle());
		holder.image.setImageBitmap(item.getImage());
		return row;
	}

	static class ViewHolder {
		TextView imageTitle;
		ImageView image;
	}
}</pre>
<p>The getView() method implementation is necessary, it is responsible for&nbsp;creating a new View for each grid item. When this is called, a View is passed in, which is normally a recycled object, so there’s a check to see if the object is null. If it is null, an ViewHolder is instantiated and configured for holding an ImageView and a TextView.&nbsp;ViewHolder design patterns are efficient while using composite layouts.</p>
<p>Notice that the above adapter is working on a ImageItem pojo Class. Create a new class for ImageItem and add the following code snippets.</p>
<pre class=""prettyprint lang-java"">public class ImageItem {
	private Bitmap image;
	private String title;

	public ImageItem(Bitmap image, String title) {
		super();
		this.image = image;
		this.title = title;
	}

	public Bitmap getImage() {
		return image;
	}

	public void setImage(Bitmap image) {
		this.image = image;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}
}</pre>
<h2><span id=""5_Settingadapterto_GridView"">5. Setting&nbsp;adapter&nbsp;to GridView</span></h2>
<p>Now we are almost ready to hook up grid&nbsp;view on activity. In our activity we will initialize the&nbsp;GridView by calling&nbsp;<code>findViewById(int)</code> method. This method takes the same id as provided in the layout xml file. The <code>setAdapter()</code> method then sets a custom adapter (GridViewAdapter) as the source for all items to be displayed in the grid.</p>
<pre class=""prettyprint lang-java"">public class MainActivity extends ActionBarActivity {
    private GridView gridView;
    private GridViewAdapter gridAdapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        gridView = (GridView) findViewById(R.id.gridView);
        gridAdapter = new GridViewAdapter(this, R.layout.grid_item_layout, getData());
        gridView.setAdapter(gridAdapter);
    }

    // Prepare some dummy data for gridview
    private ArrayList&lt;ImageItem&gt; getData() {
        final ArrayList&lt;ImageItem&gt; imageItems = new ArrayList&lt;&gt;();
        TypedArray imgs = getResources().obtainTypedArray(R.array.image_ids);
        for (int i = 0; i &lt; imgs.length(); i++) {
            Bitmap bitmap = BitmapFactory.decodeResource(getResources(), imgs.getResourceId(i, -1));
            imageItems.add(new ImageItem(bitmap, ""Image#"" + i));
        }
        return imageItems;
    }
}
</pre>
<p>Note that in this example, we are using the static data and image defined in strings.xml file. All the images used in this example is available for download. Visit download section to get the complete project source code.</p>
<p>At this point we can run the application and and can see the grid view in action.</p>
<h2><span id=""6_Handling_GridView_click_action"">6. Handling GridView click action</span></h2>
<p>When user click on any grid item, we have to take user to details activity by passing the image and title of the grid item clicked. To do this we can call&nbsp;<code>setOnItemClickListener()</code> method by passing the instance of OnItemClickListener.</p>
<pre class=""prettyprint lang-java"">gridView.setOnItemClickListener(new OnItemClickListener() {
public void onItemClick(AdapterView&lt;?&gt; parent, View v, int position, long id) {
	ImageItem item = (ImageItem) parent.getItemAtPosition(position);
	//Create intent
	Intent intent = new Intent(MainActivity.this, DetailsActivity.class);
	intent.putExtra(""title"", item.getTitle());
	intent.putExtra(""image"", item.getImage());

	//Start details activity
	startActivity(intent);
}</pre>
<p>Learn &nbsp;more about <a href=""/articles/pass-a-data-from-one-activity-to-another-in-android"" title=""How to pass a data from one Activity to another in Android"">passing data from one activity</a> to another here.</p>
<h2><span id=""7_Customizing_GridView_style"">7. Customizing GridView style</span></h2>
<p>We are pretty much good with the GridView gallery, let us do some customization such as&nbsp;changing the background color of a grid item while user is clicks.</p>
<p>For this, let us define a color selector <code>grid_color_selector.xml</code> and place it inside drawable folder. We can use a selector with <code>grid_row.xml</code> layout file by using <code>android:background</code> attribute.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;selector xmlns:android=""http://schemas.android.com/apk/res/android""&gt;
    &lt;item android:drawable=""@color/blue"" android:state_pressed=""true""/&gt;
    &lt;item android:drawable=""@color/blue"" android:state_selected=""true""/&gt;
    &lt;item android:drawable=""@color/white""/&gt;
&lt;/selector&gt;</pre>
<h2><span id=""8_Creating_details_activity"">8. Creating details activity</span></h2>
<p>Create a new layout file named <code>details_activity.xml</code>. This will be used for the layout for my DetailsActivity.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;FrameLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:background=""#000""&gt;

    &lt;ImageView
        android:id=""@+id/image""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:layout_gravity=""center""
        android:scaleType=""fitCenter"" /&gt;

    &lt;TextView
        android:id=""@+id/title""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_gravity=""bottom""
        android:background=""#00000c""
        android:padding=""10dp""
        android:textColor=""#fff""
        android:textSize=""20dp"" /&gt;
&lt;/FrameLayout&gt;
</pre>
<p>The above layout is quite simple with an ImageView for displaying full sized image and TextView for displaying the title. Now let us crete DetailsActivity and use the above layout to display the selected image.</p>
<pre class=""prettyprint lang-java"">public class DetailsActivity extends ActionBarActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.details_activity);

        String title = getIntent().getStringExtra(""title"");
        Bitmap bitmap = getIntent().getParcelableExtra(""image"");

        TextView titleTextView = (TextView) findViewById(R.id.title);
        titleTextView.setText(title);

        ImageView imageView = (ImageView) findViewById(R.id.image);
        imageView.setImageBitmap(bitmap);
    }
}
</pre>
<p>Well, we have now completed the whole exercise to build image gallery using Android GridView. If you find any problem, or something is missing, you can download code and compare your code with mine.</p>
<h2><span id=""9_Download_Complete_Example"">9. Download Complete Example</span></h2>
[download url=”https://github.com/javatechig/Android-GridView-Example”]",0,"standard","post"
"Creating SQL Adapter in IBM Worklight","creatin-a-sql-adapter-in-ibm-worklight","This tutorial will help you to understand the SQL adapter and to create a SQL adapter from IBM&hellip;
","LIVE","<p>This tutorial will help you to understand the SQL adapter and to create a SQL adapter from IBM Worklight. Here it provided step by step tutorials to create, implement and test an adapter using IBM Worklight.</p>

<h2><span id=""1_What_is_SQL_Adapter"">1. What is SQL Adapter?</span></h2>
<p>Adapter is a mediator between mobile applications and enterprise system. Adapters provide an easy and secure access to enterprise system. And it is efficient to provide enterprise data to mobile devices in a uniform data format. The data can be presented to mobile device using various interchange formats like XML or JSON (used mostly)</p>
<p>IBM Worklight provides three different types of adapters</p>
<ol>
<li>HTTP adapter: HTTP adapters provide access to HTTP-based enterprise services, including RESTful and SOAP-based services.</li>
<li>SQL adapter: SQL adapters provide access to enterprise databases.</li>
<li>Cast IRON adapter: Cast Iron adapters initiate orchestrations in IBM Web Sphere Cast Iron.</li>
</ol>
<p>Adapters are coded in JavaScript and it runs at server-side on the IBM Worklight mobile application platform. IBM internally uses Rhino JavaScript engine for executing the JavaScript source code.</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter wp-image-1071"" height=""313"" loading=""lazy"" sizes=""(max-width: 572px) 100vw, 572px"" src=""/media/uploads/articles/392/adapter-archiecture.png"" srcset="""" title=""adapter-archiecture"" width=""572""/></a></p>
<p>Conceptually, an adapter is a set of JavaScript functions that can be remotely invoked by an application. Typically an adapter consist of and xml file and a JavaScript implementation file. The XML file will be used for configuring connectivity from the adapter to the enterprise system. Each of the procedures for the adapters needs to be defined in this xml. The JavaScript file will contain the implementation for each of the adapter procedure.  Once you are done with the two files we can now deploy and then can test.</p>
<p>The two files are bundled into a .adapter archive file that is then deployed to the IBM Worklight Server. Once deployed, the adapter procedures are ready to be invoked by Worklight applications running on mobile devices and in browsers.</p>
<p>In this below example, you will find an SQL adapter working.</p>
<h2><span id=""2_Creating_an_SQL_adapter_in_IBM_Worklight"">2. Creating an SQL adapter in IBM Worklight</span></h2>
<p>Here at this point, I assume that your IBM Worklight development environment is ready and  working.</p>
<h3><span id=""21_Creating_a_new_Worklight_project""><strong>2.1. Creating a new Worklight project</strong></span></h3>
<p>Create a simple Worklight project. Choose project template as “Hybrid Application” and provide an application name. Here I have used “SQLAdapterSampleApp”</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter wp-image-1074"" height=""380"" loading=""lazy"" src=""/media/uploads/articles/392/adapter-newproject.png"" srcset="""" title=""adapter-newproject"" width=""368""/></a></p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter wp-image-1073"" height=""400"" loading=""lazy"" src=""/media/uploads/articles/392/adapter-new-application.png"" srcset="""" title=""adapter-new-application"" width=""382""/></a></p>
<h3><span id=""22_Creating_new_Worklight_Adapter""><strong>2.2. Creating new Worklight Adapter</strong></span></h3>
<p>Click on “adapter” folder and then New-&gt; Worklight Adapter. You can see a dialog as shown below.</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter wp-image-1075"" height=""310"" loading=""lazy"" src=""/media/uploads/articles/392/adapter-new-sql-adapter.png"" srcset="""" title=""adapter-new-sql-adapter"" width=""370""/></a></p>
<h3><span id=""23_Create_required_tables_and_data_in_database""><strong>2.3. Create required tables and data in database</strong></span></h3>
<p>Now let us move to the mysql part. We need to have the database server running. I assume that you have installed the mysql and have a database running.  Create a table with and fill with some data. You may use the below SQL command</p>
<pre escaped=""true"" lang=""sql"" line=""1"">
USE `ibmworklight`;
DROP TABLE IF EXISTS `studentinfo`;
CREATE TABLE `studentinfo` (`sid` varchar(20), `sname` varchar(20), `sclass` varchar(20), `sgrade` varchar(20));
INSERT INTO `studentinfo` ( `sid`, `sname`, `sclass`, `sgrade`) values ('PUC001','Rohan','PUC', 'A+');
INSERT INTO `studentinfo` ( `sid`, `sname`, `sclass`, `sgrade`) values ('PUC002','Rakesh','PUC', 'A');
INSERT INTO `studentinfo` ( `sid`, `sname`, `sclass`, `sgrade`) values ('PUC003','Raj','PUC', 'C');
INSERT INTO `studentinfo` ( `sid`, `sname`, `sclass`, `sgrade`) values ('PUC004','Roman','PUC', 'E');
select * from `studentinfo`;</pre>
<p>By now, we are ready with the database and table setup.</p>
<h3><span id=""24_Configuring_adapter_xml""><strong>2.4. Configuring adapter xml</strong></span></h3>
<p>Open your adapter .xml file. We need to change the database configurations. Driver calss is used to connect to the database from your project. Mysql database use “com.mysql.jdbc.Driver” class.</p>
<p><span style=""color: #ff0000;""><strong><em>Note: You have to include “mysql-connector-java-5.1.24-bin.jar” library. If you don’t have one, then download here</em></strong></span><strong><a href=""http://dev.mysql.com/downloads/connector/j/"" rel=""nofollow noopener noreferrer"" target=""_blank"">Download</a></strong></p>
<p>As I am running my database in my local system, I have provided localhost and default port as 3306.</p>
<pre escaped=""true"" lang=""xml"" line=""1"">
&lt;dataSourceDefinition&gt;

&lt;driverClass&gt;com.mysql.jdbc.Driver&lt;/driverClass&gt;

&lt;url&gt;jdbc:mysql://localhost:3306/ibmworklight&lt;/url&gt;

&lt;user&gt;root&lt;/user&gt;

&lt;password&gt;root&lt;/password&gt;

&lt;/dataSourceDefinition&gt;</pre>
<h3><span id=""25_Defining_Worklight_Procedures"">2.5. Defining Worklight Procedures</span></h3>
<p>Now, For making my explanation simplified, I am implementing only one procedure. Here in my example “getStudentInfos” procedures fetches all of the available records from “studentinfo” table.</p>
<pre escaped=""true"" lang=""javascript"" line=""1"">
var selectStatement = WL.Server.createSQLStatement(""select * from studentinfo"");
function getStudentInfos() {	

	return WL.Server.invokeSQLStatement({
		preparedStatement : selectStatement,
		parameters : []
	});
}</pre>
<p>Now we are done.</p>
<h2><span id=""3_Testing_my_SQLAdapter"">3. Testing my SQLAdapter</span></h2>
<p>Right click on the adapter folder -&gt; run as -&gt; Deploy as Worklight adapter. Once deployed you can see it from the admin console. Open your browser and hit <a href=""http://localhost:8080/console/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://localhost:8080/console/</a>. You will see the console window as shown below.</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter wp-image-1072"" height=""382"" loading=""lazy"" sizes=""(max-width: 551px) 100vw, 551px"" src=""/media/uploads/articles/392/adapter-ibl-worklight-console.png"" srcset="""" title=""adapter-ibl-worklight-console"" width=""551""/></a></p>
<p>Now, RunAs-&gt; Invoke Worklight procedure. Select the procedure to test. For now you can test for getStudentInfos, results will appear as JSON data.</p>
",0,"standard","post"
"Java enum Programming Tutorial","java-enum-programming-tutorial","An enumeration is a special class, which provides a type-safe implementation of constant data in a java program. Java enum type is introduced in Java 2.0. It is used to restrict a variable only a predefined values from an enumerated list. The items in the enumerated list are called enums.
","LIVE","<h1>What is enum in java?</h1>
<p>An enumeration is a special class, which provides a type-safe implementation of constant data in a java program. Java enum type is introduced in Java 5.0. It is used to restrict a variable only a predefined values from an enumerated list. The items in the enumerated list are called enums.</p>
<p>For example, a MercedesBenz color can be out of only three available colors WHITE, RED, and SILVER. In this context we can take a enum data type for representing the color of MercedesBenz.</p>
<pre class=""prettyprint lang-java"">  enum BenzColors {WHITE, RED, SILVER};</pre>
<p>For the above requirement, we can also do it by declaring an int, byte or string type for the color validation. But, this requires an extra effort to check the infeasible types. Here enum can help to reduce the bugs in your code. Compiler will stop you from assigning values other then three defined enums.</p>
<h1>Declaring enum in java</h1>
<p>Enum can be declared as their own class or can be enclosed inside another class. It is not required to declare the constants are in all caps, but we are following java code convention, that the constants need to be in upper case. In the above code syntax the enum constants are <code>WHITE</code>, <code>RED</code> and <code>SILVER</code>.</p>
<h2>Declaring an enum outside a class</h2>
<pre class=""prettyprint lang-java"">enum BenzColors {WHITE, RED, SILVER}

public class MercedesBenz {
	private BenzColors color;

	public void setColor(BenzColors color){
		this.color = color;
	}

	public BenzColors getColor() {
		return color;
	}

	public static void main(String[] args) {
		MercedesBenz benz = new MercedesBenz();
		benz.setColor(BenzColors.RED);		
		System.out.println(benz.getColor());
	}

}</pre>
<h2>Declaring an enum as a part of class</h2>
<pre class=""prettyprint lang-java"">public class MercedesBenz {
	enum BenzColors {WHITE, RED, SILVER}
	private BenzColors color;

	public void setColor(BenzColors color){
		this.color = color;
	}

	public BenzColors getColor() {
		return color;
	}

	public static void main(String[] args) {
		MercedesBenz benz = new MercedesBenz();
		benz.setColor(BenzColors.RED);		
		System.out.println(benz.getColor());
	}

}</pre>
<p> </p>
<h1>Declaring Constructor, Member Variables and Methods in Enum in Java</h1>
<p>An enum is a special class, which holds a reference to memory in the heap. It is implicitly final, because the constants should not be changed. It can include other component of a traditional class, such as constructors, member variables and methods. Each enum constant can be declared with parameters to be passed to the constructor when it is created.</p>
<p>Let us go back to our MercedesBenz example, the enum constants represents the three color variants. But what if we want to map some other value like color production ratios along with the color constants. We like to know how many RED color Benz are out of available in the production firm.</p>
<pre class=""prettyprint lang-java"">enum BenzColors {
	WHITE(20), RED(40), SILVER(40);

	private final int colorRatio;

	private BenzColors(int colorRatio) {
		this.colorRatio = colorRatio;
	}

	public int getColorRatio() {
		return colorRatio;
	}
};

public class MercedesBenz {

	private BenzColors color;

	public void setColor(BenzColors color){
		this.color = color;
	}

	public BenzColors getColor() {
		return color;
	}

	public static void main(String[] args) {
		MercedesBenz benz = new MercedesBenz();
		benz.setColor(BenzColors.RED);		
		System.out.println(benz.getColor()); // prints RED
		System.out.println(benz.getColor().getColorRatio()); // prints 40
	}

}</pre>
<fieldset id=""doyouknowfieldset"">
<div id=""doyouknowlegend"">Do You Know ?</div>
<ul>
<li>enum cannot be declared inside a method. It can be declared inside a class or as its separate context.</li>
<li>It is optional to put a semicolon to the end of enum declaration.</li>
<li>Each of the enumerated constants are actually instances of enum class. And they represent static and final.</li>
<li>Each enum values knows index of its position. The order in which the constants are declared matters.</li>
<li>enum constructor cannot be directly invoked. The enum constructors are invoked automatically with the constant value you define during declaration.</li>
<li>More than one argument to the constructor can be defined</li>
<li>Enum constructor can be overloaded</li>
</ul>
</fieldset>
",0,"standard","post"
"Java String Complete Tutorial","java-string-complete-tutorial","Strings are sequence of characters. In the Java programming language, strings are objects. The Java platform provides the&hellip;
","LIVE","
<p>Strings are sequence of characters. In the Java programming language, strings are objects. The Java platform provides the String class to create and manipulate strings.</p>
<h1><span id=""1_How_to_creating_new_String"">1. How to creating new String?</span></h1>
<p>A new String can be created using two approaches.</p>
<ol>
<li>String literal</li>
<li>Using String class constructor</li>
</ol>
<h2><span id=""11_Creating_a_new_String_by_literals"">1.1. Creating a new String by literals</span></h2>
<p>A string class object can be created by directly assigning values. Each time you create a string it checks for the string value in the String pool, if the reference exists inside pool then the reference to the existing string from the pool is returned. If the pool doesn’t, contain the reference, then a new String  object is formed and dumped to the pool.</p>
<pre class=""prettyprint lang-java""> //creating string by using literals
  String string1 = ""Raj"";
  String string2 = ""Raj"";
  String string3 = ""Adam"";</pre>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Java String Complete Tutorial"" class=""size-full wp-image-3133 aligncenter"" height=""304"" loading=""lazy"" src=""/media/uploads/articles/394/Java-String-Complete-Tutorial.png"" srcset="""" width=""511""/></a></p>
<h2><span id=""12_Creating_String_using_String_class_constructor"">1.2. Creating String using String class constructor</span></h2>
<p>String class constructor new String() can be used to create a new String. We can initialize a newly created String by passing parameters to String class constructor. If we don’t pass any values to the constructor, it initializes a newly created String object so that it represents an empty character sequence. This way it always creates a new String and dumped into String pool.<br/>
Note, that use of this constructor is unnecessary since Strings are immutable.</p>
<pre class=""prettyprint lang-java""> //creating a new String using String class constructor
  String string1 = new String(""This is a sample String 1"");</pre>
<h2><span id=""13_Creating_String_from_Character_Array"">1.3. Creating String from Character Array</span></h2>
<p>We can also create a String class from the sequence of characters. String class constructor takes a character array as parameter and it creates a new String. The contents of the character array are copied; subsequent modification of the character array does not affect the newly created string.</p>
<pre class=""prettyprint lang-java"">  //creating String from character array
  char chars[] = {'T', 'h', 'i', 's', ' ' , 'i' , 's' , ' ' , 'S','t','r','i','n','g'};
  String string2 = new String(chars);</pre>
<h1><span id=""2_Why_String_is_immutable_in_Java"">2. Why String is immutable in Java?</span></h1>
<p>Immutable means that once an object of that Class has been created it can’t be altered. Main reason is too provide better performance. Creating a copy of existing java String is easier as there is no need to create a new instance but can be easily created by pointing to already existing String. This saves valuable primary memory. Using String as a key for Hashtable guarantees that there will be no need for re hashing because of object change. Using java String in multi-threaded environment is safe by itself and we need not take any precautionary measures.</p>
<pre class=""prettyprint lang-java"">  String string1 = ""Akshay"";
  string1.concat(""Kumar"");
  System.out.println(string1);</pre>
<p>The above code will print Akshay. Only reference for Akshay will be created in String pool, no reference will be created for “Akshay Kumar” But if we want to print Akshay Kumar then we need to do the following changes</p>
<pre class=""prettyprint lang-java"">  String string1 = ""Akshay"";
  string1 = string1.concat(""Kumar"");
  System.out.println(string1);</pre>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Java String Complete Tutorial2"" class=""size-full wp-image-3134 aligncenter"" height=""323"" loading=""lazy"" src=""/media/uploads/articles/394/Java-String-Complete-Tutorial2.png"" srcset="""" width=""537""/></a></p>
<h1><span id=""3_String_class_methods"">3. String class methods</span></h1>
<p>The String class provides various methods that appear to modify strings. Since strings are immutable, what these methods create and return a new string that contains the result of the operation.</p>
<h2><span id=""31_Comparing_string_in_java"">3.1. Comparing string in java</span></h2>
<p>There are three ways to compare two strings in java.</p>
<ul>
<li>String compression using equals() method</li>
<li>String comparison using == method</li>
<li>Using compareTo() method</li>
</ul>
<h3><span id=""311_String_compression_using_equals_method"">3.1.1. String compression using equals() method</span></h3>
<p>equals() method compares the two string contents. It compares the value of String for equality. It has two varients of methods equals() and equalsIgnoreCase() method. equals() method compare one string with the specified string. equalsIgnoreCase() method compares one string with the specified String ignoring the case.<br/>
String class equals() method uses three step process to compare two java String’s;</p>
<ul>
<li>Compare references (if both String references are same return true else continue)</li>
<li>Compare length (if both String length are not same return false else continue)</li>
<li>Compare character by character sequentially.</li>
</ul>
<pre class=""prettyprint lang-java"">  String string1 = ""Akshay"";
  String string2 = new String(""Akshay"");
  System.out.println(string1.equals(string2)); //returns true

  String string3 = ""rajesh"";
  System.out.println(string1.equals(string3)); //returns false

  String string4 = ""akshay"";
  System.out.println(string1.equals(string4)); //returns false

  String string5 = ""akshay"";
  System.out.println(string1.equalsIgnoreCase(string5)); //returns true</pre>
<h3><span id=""312_String_comparison_using_method"">3.1.2. String comparison using == method</span></h3>
<p>This compares two String’s by reference. Let us look into the below code sample</p>
<pre class=""prettyprint lang-java"">  String string1 = ""Akshay"";
  String string2 = ""Akshay"";
  System.out.println(string1 == string2); //returns true

  String string3 = new String(""Akshay"");
  System.out.println(string1 == string3); //returns false</pre>
<p>The first method of string comparison, it retunes true as the same reference is shared by both string1 and string2. But in the second method, while creating string3 object, it force system to create a new string, even though the pool contains the same string literal. So it returns false.</p>
<p>Note: Do not use == operator to compare java String as it compares only the object references and not its contents. == Operator does not 100% guarantee the equality of java String.</p>
<h3><span id=""313_Using_compareTo_method"">3.1.3. Using compareTo() method</span></h3>
<p>comparedTo() method compares values and returns an integer that says if the compared string2 is less then, equals or greater than string1.</p>
<ul>
<li>If first string is equals to second string then it returns zero.</li>
<li>If first string is bigger than second then returns a positive integer</li>
<li>If first string is smaller than second then returns a negative integer</li>
</ul>
<pre class=""prettyprint lang-java"">  String string1 = ""Akshay"";
  String string2 = ""akshay"";
  String string3 = ""Akshay"";
  String string4 = ""Ajay"";		
  System.out.println(string1.compareTo(string2)); // returns negative integer
  System.out.println(string1.compareToIgnoreCase(string2)); // returns 0
  System.out.println(string1.compareTo(string3)); // returns 0
  System.out.println(string1.compareTo(string4)); // returns positive integer</pre>
<h2><span id=""32_Concatenating_strings_in_java"">3.2. Concatenating strings in java</span></h2>
<p>There are two way of concatenating strings in java. We can either use concatenation operator (+) or by using concat() method.</p>
<pre class=""prettyprint lang-java"">  String string1 = ""Akshay"" + ""Kumar"";
  System.out.println(string1); // prints Akshay Kumar</pre>
<p>String concatenation operator not just concatenates two strings. It can also concatenate a string and primitive types. But note that the primitive type should be</p>
<pre class=""prettyprint lang-java"">  String string1 = ""Akshay"" + 25;
  System.out.println(string1); // prints Akshay250

  String string2 = 20+ ""Akshay""+25+25;
  System.out.println(string2); // prints 20Akshay2525

  String string3 = 20+30+ ""Akshay""+25+25;
  System.out.println(string3); // prints 50Akshay2525</pre>
<p>In the above code snippet, string3 value is returned after addition of 20+30, because + operator works as concatenation, only if at least one operand is String type.</p>
<h2><span id=""33_subString_method_in_java"">3.3. subString method in java</span></h2>
<p>substring() method is used to split a string. It has two variant,</p>
<ul>
<li>substring(startIndex): This method returns a new String object after splitting the original string from the specified index to the last index.</li>
<li>substring(startIndex, endIndex): This method returns a new String object after splitting the original string from the specified startIndex to the endIndex.</li>
</ul>
<pre class=""prettyprint lang-java"">  String string1 = ""Akshay Kumar"";
  System.out.println(string1.substring(2)); // prints shay Kumar
  System.out.println(string1.substring(3, 6)); //prints hay</pre>
<h2><span id=""34_Creating_Format_Strings"">3.4. Creating Format Strings</span></h2>
<p>String class has a method called format() that is used to return a formatted string as specified prams and format. Format specifier supported by java are;</p>
<ul>
<li>%d – signed decimal integer</li>
<li>%u – unsigned decimal integer</li>
<li>%o – unsigned octal integer</li>
<li>%f – real number, standard notation</li>
<li>%s – string</li>
<li>%c – character, etc.</li>
</ul>
<pre class=""prettyprint lang-java"">  String string1 = ""Hello %s, isn't %s cool?"";
  String formatted = String.format(string1, ""Akshay"", ""Javatechig"");
  System.out.println(formatted);
  // prints Hello Akshay, isn't Javatechig cool?</pre>
<h1><span id=""4_Other_String_utilities"">4. Other String utilities</span></h1>
<h2><span id=""41_How_do_you_convert_java_String_to_Date"">4.1. How do you convert java String to Date</span></h2>
<p>You can convert String to java date object using SimpleDateFormat class.</p>
<pre class=""prettyprint lang-java"">  try {
	String dateInString = ""March 28, 2013"";
	SimpleDateFormat dateFormat = new SimpleDateFormat(""MMMM d, yyyy"", Locale.ENGLISH);
	Date formattedDate = dateFormat.parse(dateInString);
  } catch (ParseException e) {
	e.printStackTrace();
  }</pre>
<h2><span id=""42_Converting_Strings_to_Numbers"">4.2. Converting Strings to Numbers</span></h2>
<p>Java provides wrapper classes that wrap primitive numeric types and used to convert primitive to String and string to primitive types. The wrapper classes are the subclasses of Number class, they are Byte, Integer, Double, Float, Long, and Short.</p>
<pre class=""prettyprint lang-java"">  float a = Float.parseFloat(""15.4"");
  int b = Integer.parseInt(""5"");
  double c = Double.parseDouble(""25.01"");</pre>
<h2><span id=""43_Converting_primitive_numbers_to_String"">4.3. Converting primitive numbers to String</span></h2>
<p>Each of the wrapper classes provides a class method named valueOf that converts a string to an object of that type.</p>
<pre class=""prettyprint lang-java"">  int num1 = 50;
  Integer number1 = Integer.valueOf(num1);
  String string1 = number1.toString();

  double num2 = 12.5;
  Double number2 = Double.valueOf(num2);
  String string2 = number2.toString();</pre>
",0,"standard","post"
"How to Convert POJO to XML in Android","how-to-convert-pojo-to-xml-in-android","POJO is an acronym for Plain Old Java Object, basically a class with attributes and it&#8217;s getters and&hellip;
","LIVE","<p>POJO is an acronym for Plain Old Java Object, basically a class with attributes and it’s getters and setters. The name is used to emphasize that a given object is an ordinary Java Object, not a special object. The term “POJO” is mainly used to denote a Java object which does not follow any of the major Java object models, conventions, or frameworks.</p>
<p>Below example reads the pojo object instance variable and generates xml tags and values in the order of variable declaration in the given pojo class. You can assign tag names for each element.</p>
<h4>Student.java</h4>
<pre class=""prettyprint lang-java"">public class Student {
	String name;
	String section;
	String id;

	public Student(String name, String id, String section) {
		this.name = name;
		this.id = id;
		this.section = section;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSection() {
		return section;
	}

	public void setSection(String section) {
		this.section = section;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

}</pre>
<h4>MainActivity.java</h4>
<pre class=""prettyprint lang-java"">import java.io.IOException;
import java.io.StringWriter;
import org.xmlpull.v1.XmlSerializer;
import android.os.Bundle;
import android.app.Activity;
import android.util.Log;
import android.util.Xml;
import android.widget.TextView;

public class MainActivity extends Activity {
	TextView textView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		textView = (TextView) findViewById(R.id.textView);

		Student pojo = new Student(""Adam"" , ""100120"", ""Grade 6"");
		// Serialization begins:
		XmlSerializer serializer = Xml.newSerializer();
		StringWriter writer = new StringWriter();
		try {
			serializer.setOutput(writer);
			// start document
			serializer.startDocument(""UTF-8"", true);
			serializer.setFeature(""http://xmlpull.org/v1/doc/features.html#indent-output"", true);

			serializer.startTag("""", ""students"");
			serializer.startTag("""", ""student"");
			serializer.attribute("""", ""ID"", pojo.getId());
			serializer.startTag("""", ""name"");
			serializer.text(pojo.getName());
			serializer.endTag("""", ""name"");
			serializer.startTag("""", ""section"");
			serializer.text(pojo.getSection());
			serializer.endTag("""", ""section"");
			serializer.endTag("""", ""student"");
			serializer.endTag("""", ""students"");

			serializer.endDocument();
			// end document.

			Log.i(""Pojo to xml"", writer.toString());
			textView.setText("""" + writer.toString());
			// Toast.makeText(getApplicationContext(), """"+ writer.toString(), 0).show();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
}</pre>
<h4>Output XML</h4>
<pre class=""prettyprint lang-java"">&lt;students&gt;
&lt;student ID=""100120""&gt;
&lt;name&gt;Adam&lt;/name&gt;
&lt;section&gt;Grade 6&lt;/section&gt;
&lt;/student&gt;
&lt;/students&gt;

</pre>
",0,"standard","post"
"Login Application using Struts2 Tutorial","creating-login-application-using-struts2","This example explains step by step tutorials for building  Login Application using Struts2 Java Framework. The login workflow&hellip;
","LIVE","
<p>This example explains step by step tutorials for building  Login Application using Struts2 Java Framework. The login workflow includes :</p>
<ul>
<li>By default Login page will populate on running the project.</li>
<li>Show error message in case of invalid credentials without losing user enters text.</li>
<li>Redirect to welcome page on successful /valid credentials.</li>
</ul>
<h1><span id=""1_Software_and_tool_requirements"">1. Software and tool requirements</span></h1>
<p>This example us using JAVA 1.6 for compilation and and deployed on Tomcat 6.x as application server. We use Eclipse IDE for all of our development purpose.</p>
<ul>
<li>JAVA 1.6</li>
<li>Tomcat 6</li>
<li>Eclipse 3.6</li>
</ul>
<h1><span id=""2_Struts_2_framework_libraries"">2. Struts 2 framework libraries</span></h1>
<p>Download the latest version of struts 2 lib from <a href=""http://struts.apache.org/download.cgi"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""Download Struts 2"">http://struts.apache.org/download.cgi</a> with respect to you platform such as Windows or Linux. We are using struts-2.3.15.1-lib(windows) for this example.</p>
<p>After downloading extract the struts-2.3.15.1-lib.zip file to some location e.g. <a href=""C:\struts-2.3.15.1-lib"" rel=""nofollow noopener noreferrer"" target=""_blank"">C:\struts-2.3.15.1-lib</a></p>
<h1><span id=""3_Creating_a_new_dynamic_Web_Project_in_eclipse_as_strutsweb"">3. Creating a new dynamic Web Project in eclipse as strutsweb</span></h1>
<p>File -&gt; New -&gt; Dynamic Web Project.</p>
<p>Enter the Project Name as <strong>struts2web</strong>, select the target run-time as Apache Tomcat v6.0 and click on <b>Finish</b>.</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""New Dynamic Web Project"" class=""size-full wp-image-3090 aligncenter"" height=""509"" loading=""lazy"" src=""/media/uploads/articles/396/New-Dynamic-Web-Project.png"" srcset="""" width=""424""/></a></p>
<p>Now copy following jars from <code>C:\struts-2.3.15.1-lib</code> to <code>\WEB-INF\libs</code></p>
<p style=""text-align: center;""> <a href=""http://stacktips.com"" target=""_self""><img alt=""Struts2 Login Application Libs"" class=""size-full wp-image-3092 aligncenter"" height=""295"" loading=""lazy"" src=""/media/uploads/articles/396/Struts2-Login-Application-Libs.png"" srcset="""" width=""301""/></a></p>
<h1><span id=""4_Modify_webxml_configuration_to_enable_struts2_framework"">4. Modify web.xml configuration to enable struts2 framework</span></h1>
<p>Do the following changes in web.xml file to enable struts 2 framework features. You can locate <code>web.xml</code> file in <code>\WEB-INF\web.xml</code> in your project directory.</p>
<pre lang=""xml"">&lt;?xmlversion=""1.0""encoding=""UTF-8""?&gt;
&lt;web-appxmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
xmlns=""http://java.sun.com/xml/ns/javaee""
xmlns:web=""http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd""
xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd""
id=""WebApp_ID"" version=""2.5""&gt;
&lt;display-name&gt;struts2web&lt;/display-name&gt;
&lt;filter&gt;
	&lt;filter-name&gt;struts2&lt;/filter-name&gt;
&lt;filter-class&gt;
       org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter                
&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter-mapping&gt;
	&lt;filter-name&gt;struts2&lt;/filter-name&gt;
	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;

&lt;welcome-file-list&gt;
	&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
&lt;/welcome-file-list&gt;
&lt;/web-app&gt;</pre>
<p>&lt;filter/&gt;- This is filter dispatcher class act as controller. All requests go through this filter. It looks at the request and determines the appropriate action by looking up the struts configuration file i.e. struts.xml.</p>
<p>&lt;filter-mapping/&gt; – It is used to map the request to filter. All request action map to filter dispatcher.</p>
<p>&lt;welcome-file-list/&gt; – It is used to populate the default page.</p>
<p> </p>
<h1><span id=""5_Writing_Java_class_to_validate_the_login_cridentials"">5. Writing Java class to validate the login cridentials</span></h1>
<p>Now, let us jump into validating login credenials from java class.  Create <code>LoginAuthAction.java</code> inside the following package <code>com.javatechig.struts2web.actions.</code> Note, you may have your own package name</p>
<pre lang=""java"">public class LoginAuthAction extends ActionSupport {
    Private static final longserialVersionUID = 1L;
    private String userId;
    private String password;

    private Boolean error;

    public String execute() {
        if (userId.equals("""")) {
            addActionError(""Please Enter user id."");
            error = true;
        }
        else if(password.equals("""")) {
            addActionError(""Please Enter password."");
            error = true;
        }
        else if(!userId.equalsIgnoreCase(password)) {
            addActionError(""Invalid userid or password."");
            error = true;
        } else {
            error = false;
        }

        if (error) {
            return ERROR;
        } else {
            return SUCCESS;
        }

    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getPassword() {
        returnpassword;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}</pre>
<p>The <code>LoginAuthAction </code>extends <code>ActionSupport </code>to use core methods such as <code>addActionError </code> and static string <code>ERROR</code>, <code>SUCCESS</code>. The <code>execute()</code> is the default method which contains the logic for action class. In this example we are validating userId &amp; password is empty or equals. If empty showing error “Please enter userId/password” else if equals then its validated.</p>
<h1><span id=""6_Configuring_action_class_in_Struts_configuration_file"">6. Configuring action class in Struts configuration file</span></h1>
<p>Now it’s time to configure the action class in Struts configuration file. Create struts2 configuration file as struts.xml inside project src directory</p>
<pre lang=""xml"">&lt;?xmlversion=""1.0""encoding=""UTF-8""?&gt;
&lt;!DOCTYPEstrutsPUBLIC
""-//Apache Software Foundation//DTD Struts Configuration 2.0//EN""
""http://struts.apache.org/dtds/struts-2.0.dtd""&gt;

&lt;struts&gt;
	&lt;packagename=""struts2web""namespace=""/""extends=""struts-default""&gt;
		&lt;actionname=""login""&gt;
			&lt;result&gt;pages/login.jsp&lt;/result&gt;
		&lt;/action&gt;
		&lt;actionname=""welcome""&gt;
			&lt;result&gt;pages/welcome.jsp&lt;/result&gt;
		&lt;/action&gt;
		&lt;actionname=""loginauth""class=""com.javatechig.struts2web.actions.LoginAuthAction""		
			&lt;resultname=""success""type=""redirect""&gt;
		&lt;paramname=""location""&gt;/welcome&lt;/param&gt;
		&lt;/result&gt;
			&lt;resultname=""error""&gt;pages/login.jsp&lt;/result&gt;
		&lt;/action&gt;
	&lt;/package&gt;
&lt;/struts&gt;</pre>
<p><strong>Package – name</strong> – It can be any name but it is good practice to use project name.<br/>
<strong>Package</strong> – namespace –Default it is root(/). It is used for package modularization if the project has more than one module.<br/>
<strong>Action</strong> – It is for action class mapping with action name. I have three action name<br/>
<strong>login</strong> – which is mapped to default struts action dispatcher which populate login.jsp<br/>
<strong>welcome</strong> – which is mapped to default struts action dispatcher which populatewelcome.jsp<br/>
<strong>loginauth</strong> – which is mapped to LoginAuthActionclass which returns ERROR &amp; SUCCESS.<br/>
<strong>ERROR</strong> – mapped to login.jsp to display the login errors with user entered credentials.<br/>
<strong>SUCCESS</strong> – Its redirect to “welcome” action.</p>
<p>You can see at the bottom of class I have created getter and setter method of declared variable. This is used by the interceptor. The interceptor will look for setFieldName while on every action request. The FieldName is the element name in the html form. E.g.<br/>
I am using text field in the login.jsp for userid . The name of textfield is userId.</p>
<p>When you click on login it request for loginauth action, which is goes through struts2 dispatcher filter which executes interceptor before/after the invoking of action class.  The interceptor will convert the field name userId to setUserId and then pass the textfield value to setUserId(val).  In the same way when dispatcher deliver the view i.e. jsp it uses getUserId(). E.g. when you enter wrong password and valid user id it throws the same page with error saying invalid password with existing user id values.</p>
<h1><span id=""7_Creating_jsp_pages"">7. Creating jsp pages</span></h1>
<p>In this example we will be needing two jsp pages. Once for login form and other is welcome screen. Welcome screen will appear once user credentials are authenticated</p>
<h2><span id=""71_Login_form"">7.1. Login  form</span></h2>
<pre lang=""html"">&lt;%@pagecontentType=""text/html; charset=UTF-8""%&gt;
&lt;%@taglibprefix=""s""uri=""/struts-tags""%&gt;
&lt;!DOCTYPEhtmlPUBLIC""-//W3C//DTD HTML 4.01 Transitional//EN""""http://www.w3.org/TR/html4/loose.dtd""&gt;
&lt;html&gt;
&lt;head&gt;
&lt;metahttp-equiv=""Content-Type""content=""text/html; charset=ISO-8859-1""&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;styletype=""text/css""&gt;
body{
	font-family:Arial,Helvetica,sans-serif;
	font-size:12px;	
}
.errors {
	background-color:#FFCCCC;
	border:1px solid #CC0000;
	width:220px;
	line-height:10px;
}
.errorsli{
	list-style: none; 
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;s:formaction=""loginauth""theme=""simple""&gt;
&lt;center&gt;
	&lt;tablewidth=""200""&gt;
		&lt;trheight=""30""&gt;
			&lt;tdwidth=""200""colspan=""2""&gt;
				&lt;s:iftest=""hasActionErrors()""&gt;
					&lt;divclass=""errors""&gt;
						&lt;s:actionerror/&gt;
					&lt;/div&gt;
				&lt;/s:if&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;tdcolspan=""2""width=""200""align=""left""style=""background:#eee""&gt;Login Here&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;tdalign=""left""&gt;User ID:&lt;/td&gt;&lt;tdalign=""left""&gt;&lt;s:textfieldname=""userId""/&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;tdalign=""left""&gt;Password:&lt;/td&gt;&lt;tdalign=""left""&gt;&lt;s:passwordtype=""text""name=""password""/&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;tdalign=""left""&gt;&lt;/td&gt;&lt;tdalign=""left""&gt;&lt;inputtype=""submit""name=""login""value=""Login""&gt;&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/table&gt;
&lt;/center&gt;
&lt;/s:form&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>&lt;s:form/&gt; – Struts form element which enhanced with html form. The action is the action class to invoke on click on Login button.</p>
<p>&lt;s:textfield/&gt; – Struts textfiled element which is enhanced to &lt;input type=”text”/&gt;<br/>
&lt;s:password/&gt;- Struts textfiled element which is enhanced to &lt;input type=”password”/&gt;</p>
<p>The name attribute of textfield and password values are important. The value should be same as declared variable in the action class.<br/>
private String userId;<br/>
private String password;</p>
<h2><span id=""72_Creating_Welcome_jsp_page"">7.2. Creating Welcome jsp page</span></h2>
<p>This page contains the welcome text, and will be displayed, once user credentials are authenticated.</p>
<pre lang=""html"">&lt;%@pagelanguage=""java""contentType=""text/html; charset=ISO-8859-1""
pageEncoding=""ISO-8859-1""%&gt;
&lt;!DOCTYPEhtmlPUBLIC""-//W3C//DTD HTML 4.01 Transitional//EN""""http://www.w3.org/TR/html4/loose.dtd""&gt;
&lt;html&gt;
&lt;head&gt;
&lt;metahttp-equiv=""Content-Type""content=""text/html; charset=ISO-8859-1""&gt;
&lt;title&gt;Javatechig :: Struts 2 Tutorial&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Welcome!&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<h2><span id=""73_Create_Indexjsp"">7.3. Create Index.jsp</span></h2>
<p>I am using this page to redirect to login.action. You can see it is configured as welcome-file in web.xml that means it invokes when you run the project with web-context (project-name) name i.e. <a href=""http://localhost:8080/ "" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""Testing Login App"">http://localhost:8080/ </a>and finally you will get login.jsp as default.</p>
<p>Now we are done with the sample and it is ready to run, before that pleas make sure all the created files in proper location as follows:</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Struts2 Login Application Project Structure"" class=""size-full wp-image-3098 aligncenter"" height=""536"" loading=""lazy"" src=""/media/uploads/articles/396/Struts2-Login-Application-Project-Structure.png"" srcset="""" width=""348""/></a></p>
<h1><span id=""8_Output"">8. Output</span></h1>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Struts2 Login Application Project Output"" class=""size-full wp-image-3095 aligncenter"" height=""297"" loading=""lazy"" sizes=""(max-width: 954px) 100vw, 954px"" src=""/media/uploads/articles/396/Struts2-Login-Application-Project-Output1.png"" srcset="""" title=""Struts2 Login Application Project Output"" width=""954""/></a></p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Struts2 Login Application Project Output"" class=""size-full wp-image-3096 aligncenter"" height=""339"" loading=""lazy"" sizes=""(max-width: 973px) 100vw, 973px"" src=""/media/uploads/articles/396/Struts2-Login-Application-Project-Output2.png"" srcset="""" title=""Struts2 Login Application Project Output"" width=""973""/></a></p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Struts2 Login Application Project Output"" class=""size-full wp-image-3097 aligncenter"" height=""320"" loading=""lazy"" sizes=""(max-width: 976px) 100vw, 976px"" src=""/media/uploads/articles/396/Struts2-Login-Application-Project-Output3.png"" srcset="""" title=""Struts2 Login Application Project Output"" width=""976""/></a></p>
<p>  [author_bio</p>
",0,"standard","post"
"Android Radio Button Example","android-radio-button-example","In this tutorial, we show you how to use radio button in android  using example. RadioButton is a&hellip;
","LIVE","<p>In this tutorial, we show you how to use radio button in android  using example.</p>
<p>RadioButton is a  two-states button that can be either checked or unchecked. When the radio button is unchecked, the user can click it to check it. Radio button generally works with RadioGroup. Radio group can hold multiple RadioButtons, however only one can be selected at any point of time. Once a radio button is checked by user it cannot be unchecked again by pressing the same button. It automatically gets unchecked, where any other button on the same RadioGroup is selected.</p>
<p>Let us understand some of the RadioButton attributes and properties</p>
<ol>
<li>The <code>android:orientation</code> property on the Radio group defines the orientation to position its child view. It can be either horizontal  or vertical.</li>
<li><code>check(id)</code> – Sets the selection to the radio button whose identifier is passed in parameter. Using -1 as the selection identifier clears the selection.</li>
<li><code>clearCheck()</code>– Clears the selection. When the selection is cleared, no radio button in this group is selected and getCheckedRadioButtonId() returns null.</li>
<li><code>getCheckedRadioButtonId()</code> – Returns the identifier of the selected radio button in this group. Upon empty selection, the returned value is -1.</li>
<li><code>setOnCheckedChangeListener()</code> – Register a callback to be invoked when the checked radio button changes in this group. You must supply instance of <code>RadioGroup.OnCheckedChangeListener</code> to setOnCheckedChangeListener() method.</li>
</ol>
<h1 style=""text-align: left;"">Android RadioButton Example</h1>
<p>Create a new layout file named activity_main.xml under layout resource folder and add the following code snippets. The code will generate the layout as shown in the screenshot below.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:orientation=""vertical""
    android:padding=""20dp""&gt;

    &lt;TextView
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:text=""How do you like the quality of our tutorials?""
        android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

    &lt;RadioGroup
        android:id=""@+id/radioGroup""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:orientation=""vertical""&gt;

        &lt;RadioButton
            android:id=""@+id/radioButton1""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:text=""Excellent "" /&gt;

        &lt;RadioButton
            android:id=""@+id/radioButton2""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:text=""Satisfactory"" /&gt;

        &lt;RadioButton
            android:id=""@+id/radioButton3""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:text=""Below Average"" /&gt;
    &lt;/RadioGroup&gt;

    &lt;LinearLayout
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:orientation=""horizontal""&gt;

        &lt;Button
            android:id=""@+id/clearBtn""
            android:layout_width=""match_parent""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:onClick=""onClear""
            android:text=""Clear "" /&gt;

        &lt;Button
            android:id=""@+id/submitBtn""
            android:layout_width=""match_parent""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:onClick=""onSubmit""
            android:text=""Submit"" /&gt;
    &lt;/LinearLayout&gt;
&lt;/LinearLayout&gt;</pre>
<h1>Using RadioButton from Activity</h1>
<p>Let us create a new java class named RadioButtonSampleActivity.java and add the following screenshot.</p>
<pre class=""prettyprint lang-java"">import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Toast;

public class MainActivity extends Activity {
    private RadioGroup radioGroup;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        /* Initialize Radio Group and attach click handler */
        radioGroup = (RadioGroup) findViewById(R.id.radioGroup);
        radioGroup.clearCheck();

        /* Attach CheckedChangeListener to radio group */
        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                RadioButton rb = (RadioButton) group.findViewById(checkedId);
                if(null!=rb &amp;&amp; checkedId &gt; -1){
                    Toast.makeText(MainActivity.this, rb.getText(), Toast.LENGTH_SHORT).show();
                }

            }
        });
    }

    public void onClear(View v) {
        /* Clears all selected radio buttons to default */
        radioGroup.clearCheck();
    }

    public void onSubmit(View v) {
        RadioButton rb = (RadioButton) radioGroup.findViewById(radioGroup.getCheckedRadioButtonId());
        Toast.makeText(MainActivity.this, rb.getText(), Toast.LENGTH_SHORT).show();
    }
}
</pre>
<h1>Output</h1>
<p><a href=""/articles/android-radio-button-example/attachment/android-radiobutton-example"" rel=""attachment wp-att-8286""><img alt=""Android RadioButton Example"" class=""aligncenter size-medium wp-image-8286"" height=""592"" loading=""lazy"" sizes=""(max-width: 620px) 100vw, 620px"" src=""/media/uploads/articles/397/Android-RadioButton-Example-620x592.png"" srcset="""" width=""620""/></a></p>
<p> </p>
",0,"standard","post"
"Android Menu Example","android-menu-example","This tutorial explains how to create menu in android with example. Menus are a common user interface component&hellip;
","LIVE","<p>This tutorial explains how to create menu in android with example.</p>
<p>Menus are a common user interface component in many types of applications. To provide a familiar and consistent user experience, you should use the Menu APIs to present user actions and other options in your activities.</p>
<h1>Declare Menu Items in XML</h1>
<p>You can create android menus in two ways. One by using the code or using XML declaration. In this tutorial we are crating the menu items using the declarative approach from xml.</p>
<ol>
<li>Create a new folder named <code>menu</code> inside your project resources directory. This folder will contain all the menu declarative XML files.</li>
<li>Now let us add a new xml file named <code>menu_myactivity.xml</code> file, into menu resource directory and paste the following code snippets.</li>
</ol>
<pre class=""prettyprint lang-xml"">&lt;menu xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:app=""http://schemas.android.com/apk/res-auto""
    xmlns:tools=""http://schemas.android.com/tools""
    tools:context="".MainActivity""&gt;
    &lt;item
        android:id=""@+id/mapMenu""
        android:icon=""@drawable/menu_map""
        android:title=""Map"" /&gt;
    &lt;item
        android:id=""@+id/favMenu""
        android:icon=""@drawable/menu_favourite""
        android:title=""Favorite"" /&gt;
    &lt;item
        android:id=""@+id/listMenu""
        android:icon=""@drawable/menu_list""
        android:title=""List"" /&gt;
    &lt;item
        android:id=""@+id/settingsMenu""
        android:icon=""@drawable/menu_settings""
        android:title=""Settings"" /&gt;
&lt;/menu&gt;
</pre>
<p>Notice that in the menu declaration xml, we are using some of the drawable images. Here you need to add your own images to drawable directory.</p>
<p><strong>Note:</strong> I have used few images for menu items. Copy your images under drawable folder of project. For more details on icon size, Refer <a href=""http://developer.android.com/guide/practices/ui_guidelines/icon_design_menu.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">Guides for App Designers!</a></p>
<h1 style=""text-align: left;"">Using Menu from Android Activity</h1>
<p>Implement the <code>onCreateContextMenu()</code> method from your android Activity class and inflate the menu items created in the <code>menu_myactivity.xml</code>. We can also override <code>OnOptionsItemSelected</code> method to handle the events while user presses the menu option in android.</p>
<pre class=""prettyprint lang-java"">import android.app.Activity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.ViewGroup.LayoutParams;
import android.widget.TextView;
import android.widget.Toast;

public class MenuActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		TextView text = new TextView(this);
		text.setText(""Press the menu button to get list of menus."");
		addContentView(text, new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.menu_myactivity, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		Toast.makeText(getApplicationContext(),	item.getTitle() + "" selected"", Toast.LENGTH_SHORT).show();

		switch (item.getItemId()) {
		case R.id.mapMenu:
			// do something
			break;
		case R.id.favMenu:
			// do something
			break;
		case R.id.listMenu:
			// do something
			break;
		case R.id.settingsMenu:
			// do something
			break;
		}
		return true;
	}

}</pre>
<h1>Demo</h1>
<p>Run the application, you will notice the result as shown in the screenshot below.</p>
<div style=""clear: both; text-align: center;""><a href=""http://1.bp.blogspot.com/-zuOxwEk7Mys/UBvBzAwSWFI/AAAAAAAAAb0/1R6PWTpRri8/s1600/android_menu_sample.png"" rel=""nofollow noopener noreferrer"" style=""margin-left: 1em; margin-right: 1em;"" target=""_blank""><img alt="""" border=""0"" class=""aligncenter"" height=""370"" loading=""lazy"" src=""/media/uploads/articles/398/android_menu_sample.png"" srcset="""" style=""border: 0px;"" width=""400""/></a></div>
",0,"standard","post"
"Sending SMS from JavaScript using Phonegap SMS plugin","phonegap-sms-plugin-android","This Android Phonegap plugin allows you to easily send SMS in android using both native SMS Manager or by invoking the default android SMS app. This plugin works with PhoneGap 2.9.x version. 
","LIVE","
<h1><span id=""1_Introduction"">1. Introduction</span></h1>
<p>This Android Phonegap plugin allows you to easily send SMS in android using both native SMS Manager or by invoking the default android SMS app. This plugin works with PhoneGap 2.9.x version. The sample example is tested with Phonegap 2.9.0 and Android 4.1.x on a Samsung Galaxy S III device.</p>
<h1><span id=""2_Plugin_Download_Link"">2. Plugin Download Link</span></h1>
<p><a href=""https://github.com/javatechig/phonegap-sms-plugin"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""https://github.com/javatechig/phonegap-sms-plugin""><strong>https://github.com/javatechig/phonegap-sms-plugin</strong></a></p>
<h1><span id=""3_Features_supported"">3. Features supported</span></h1>
<ol>
<li>Send SMS using default SMS app using android intent method</li>
<li>Sends SMS using SMS manager</li>
</ol>
<p>The plugin source code is hosted over GitHub. You can grab a copy from below link</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Sending SMS Using PhoneGap Plugin"" class=""aligncenter size-full wp-image-4026"" height=""483"" loading=""lazy"" sizes=""(max-width: 671px) 100vw, 671px"" src=""/media/uploads/articles/399/Sending-SMS-Using-PhoneGap-Plugin.png"" srcset="""" width=""671""/></a></p>
<p> </p>
<h1><span id=""4_How_to_integrate_the_SMS_plugin"">4. How to integrate the SMS plugin</span></h1>
<ul>
<li>Make sure you are using Phonegap plugin 2.9.x. If you are using a older versiion of Codova/PhoneGap plugin, you may grab a new copy from <a href=""http://www.phonegap.com"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""phonegap.com"">http://www.phonegap.com</a></li>
<li>Place smsplugin.js file in your project’s www folder and include a reference to it in your html files. You can include reference by using</li>
</ul>
<pre class=""prettyprint lang-html"">&lt;!-- for codova plugins --&gt;
&lt;script type=""text/javascript"" src=""cordova.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""smsplugin.js""&gt;&lt;/script&gt;</pre>
<ul>
<li>Add the SmsPlugin.java file from src to your project’s src hierarchy. and then reference the plugin in your res/config.xml file</li>
</ul>
<pre class=""prettyprint lang-javascript""> &lt;feature name=""SmsPlugin""&gt;
      &lt;param name=""android-package"" value=""org.apache.cordova.plugin.SmsPlugin""/&gt;
 &lt;/feature&gt;</pre>
<ul>
<li>Ensure that your manifest contains the necessary permissions to send SMS messages.</li>
</ul>
<pre class=""prettyprint lang-javascript""> &lt;uses-permission android:name=""android.permission.SEND_SMS""</pre>
<ul>
<li>Now let us call the plugin method by passing appropriate parameters to send SMS.</li>
</ul>
<h1><span id=""5Sending_SMS_using_Intent_method"">5.Sending SMS using Intent method</span></h1>
<pre class='""prettyprint'>// intent param is needed to send sms using sms intent
              $(""#btnSmsIntent"").click(function(){
	            SmsPlugin.prototype.send('9731563021', 'Your Message Here!', 'INTENT'
				    function () { 
				       alert('Message sent successfully');  
				    },
				    function (e) {
				        alert('Message Failed:' + e);
				    }
				);               
             });</pre>
<h1><span id=""6_Sending_SMS_using_SMS_manager"">6. Sending SMS using SMS manager</span></h1>
<pre class=""prettyprint lang-javascript"">// intent param is needed to send sms using sms intent
              $(""#btnSmsIntent"").click(function(){
	            SmsPlugin.prototype.send('9731563021', 'Your Message Here!', ' '
				    function () { 
				       alert('Message sent successfully');  
				    },
				    function (e) {
				        alert('Message Failed:' + e);
				    }
				);               
             });</pre>
<h1><span id=""7_Complete_Example"">7. Complete Example</span></h1>
<h2><span id=""71_How_to_integrate_the_SMS_plugin"">7.1. How to integrate the SMS plugin</span></h2>
<p>Create a new android project using File-&gt; New android application using your eclipse. Follow the new app wizard steps to create an new android app. Make sure to add your android targets. In my example, I have used android 4.x as my build target for my android app.</p>
<h2><span id=""72_Creating_html_and_JavaScript_files"">7.2. Creating html and JavaScript files</span></h2>
<p>Create a folder <code>'www'</code> under your project assets folder. The <code>www</code> folder will contain all of the JavaScript and html pages and library’s. If you look at the screen above, I have used <code>jQueery</code> framework for building such a simple user interface. Now I term it as simple, as I got this html from one of my JavaScript expert friend. However this simple example will be enough for demonstration.</p>
<p>Now take a look at my index.html files</p>
<pre class=""prettyprint lang-html"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;meta charset=""utf-8""&gt;
      &lt;meta name=""viewport"" content=""initial-scale=1.0, user-scalable=no""&gt;
      &lt;meta name=""apple-mobile-web-app-capable"" content=""yes""&gt;
      &lt;meta name=""apple-mobile-web-app-status-bar-style"" content=""black""&gt;
      &lt;title&gt;&lt;/title&gt;
      &lt;link rel=""stylesheet"" href=""jquery.mobile-1.3.1.min.css""&gt;
      &lt;!-- Extra Codiqa features --&gt;
      &lt;link rel=""stylesheet"" href=""codiqa.ext.css""&gt;
      &lt;!-- jQuery and jQuery Mobile --&gt;
      &lt;script src=""jquery-1.9.1.min.js""&gt;&lt;/script&gt;
      &lt;script src=""jquery.mobile-1.3.1.min.js""&gt;&lt;/script&gt;
      &lt;!-- Extra Codiqa features --&gt;
      &lt;script src=""codiqa.ext.js""&gt;&lt;/script&gt;
      &lt;!-- for codova plugins --&gt;
      &lt;script type=""text/javascript"" src=""cordova.js""&gt;&lt;/script&gt;
      &lt;script type=""text/javascript"" src=""smsplugin.js""&gt;&lt;/script&gt;
      &lt;script type=""text/javascript""&gt;
         $(document).ready(function() {

         //leave empty for sending sms using default intent
             $(""#btnDefaultSMS"").click(function(){

             	var number = $(""#numberTxt"").val();
             	var message = $(""#messageTxt"").val();
             SmsPlugin.prototype.send(number, message, '',
         function () { 
           alert('Message sent successfully');  
         },
         function (e) {
            alert('Message Failed:' + e);
         }
         );               
             }); 
         });

      &lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;!-- Home --&gt;
      &lt;div data-role=""page"" id=""page1""&gt;
         &lt;div data-theme=""a"" data-role=""header""&gt;
            &lt;h4&gt;
               SMS Example
            &lt;/h4&gt;
         &lt;/div&gt;
         &lt;div data-role=""content""&gt;
            &lt;div data-role=""fieldcontain""&gt;
               &lt;input name="""" id=""numberTxt"" placeholder=""Enter mobile number"" value=""""
                  type=""tel"" data-mini=""true""&gt;&lt;br&gt;
               &lt;textarea name="""" id=""messageTxt"" placeholder=""Enter message"" data-mini=""false""&gt;&lt;/textarea&gt;
               &lt;br&gt;
               &lt;input id=""btnDefaultSMS"" type=""submit"" data-theme=""e""
                  value=""Send SMS"" data-mini=""false""&gt;
            &lt;/div&gt;
         &lt;/div&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;</pre>
<p>In the ‘index.html’ file, you need the add the reference of ‘smsplugin.js’ file.</p>
<h2><span id=""73_Adding_plugin_source_to_project"">7.3. Adding plugin source to project</span></h2>
<pre class=""prettyprint lang-javascript"">import org.json.JSONArray;
import org.json.JSONException;
import android.app.PendingIntent;
import android.content.Intent;
import android.telephony.SmsManager;
import org.apache.cordova.api.CallbackContext;
import org.apache.cordova.api.CordovaPlugin;
import org.apache.cordova.api.PluginResult;

public class SmsPlugin extends CordovaPlugin {
	public final String ACTION_SEND_SMS = ""SendSMS"";

	@Override
	public boolean execute(String action, JSONArray args,
			final CallbackContext callbackContext) throws JSONException {
		if (action.equals(ACTION_SEND_SMS)) {
			try {
				String phoneNumber = args.getString(0);
				String message = args.getString(1);
				String method = args.getString(2);

				if (method.equalsIgnoreCase(""INTENT"")) {
					invokeSMSIntent(phoneNumber, message);
					callbackContext.sendPluginResult(new PluginResult(
							PluginResult.Status.NO_RESULT));
				} else {
					sendSMS(phoneNumber, message);
				}

				callbackContext.sendPluginResult(new PluginResult(
						PluginResult.Status.OK));
				return true;
			} catch (JSONException ex) {
				callbackContext.sendPluginResult(new PluginResult(
						PluginResult.Status.JSON_EXCEPTION));
			}
		}
		return false;
	}

	private void invokeSMSIntent(String phoneNumber, String message) {
		Intent sendIntent = new Intent(Intent.ACTION_VIEW);
		sendIntent.putExtra(""sms_body"", message);
		sendIntent.setType(""vnd.android-dir/mms-sms"");
		this.cordova.getActivity().startActivity(sendIntent);
	}

	private void sendSMS(String phoneNumber, String message) {
		SmsManager manager = SmsManager.getDefault();
		PendingIntent sentIntent = PendingIntent.getActivity(
				this.cordova.getActivity(), 0, new Intent(), 0);
		manager.sendTextMessage(phoneNumber, null, message, sentIntent, null);
	}

}</pre>
<h2><span id=""74_Configuring_SMS_plugin"">7.4. Configuring SMS plugin</span></h2>
<p>Add the <code>SmsPlugin.java</code> file from src to your project’s src hierarchy. and then reference the plugin in your res/config.xml file</p>
<pre class=""prettyprint lang-xml""> &lt;feature name=""SmsPlugin""&gt;
      &lt;param name=""android-package"" value=""org.apache.cordova.plugin.SmsPlugin""/&gt;
 &lt;/feature&gt;</pre>
<p>Ensure that your manifest contains the necessary permissions to send SMS messages.</p>
<pre class=""prettyprint lang-xml""> &lt;uses-permission android:name=""android.permission.SEND_SMS""</pre>
<p>Now let us call the plugin method by passing appropriate parameters to send SMS.</p>
",0,"standard","post"
"Android Button Example","android-button-example","This tutorial explains how to use Button widget in Android. The examples used in this tutorial, will show you how to create different button layout such as normal button, image button, button with image and text, etc.
","LIVE","<p>This tutorial explains how to use Button widget in Android. The examples used in this tutorial, will show you how to create different button layout such as normal button, image button, button with image and text, etc.</p>
<p>Android button represents a clickable push-button widget. It accepts different user action such as press, click, long press, etc. Button widget is available in android.widget.Button package.</p>
<p>Let us drive straight into creating button views and different Button properties.</p>
<h2>Declaring Button Layout</h2>
<p>Like any other view widget, you can declare the Button widget layout in your Activity or Fragment layout or you can create a Button programmatically. The following section will show you how to declare a buttons to activity layout.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:orientation=""vertical""&gt;

    &lt;Button
        android:id=""@+id/button""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:text=""Button1"" /&gt;

    &lt;Button
        android:id=""@+id/button2""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Button2"" /&gt;

    &lt;Button
        android:id=""@+id/button3""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""right""
        android:text=""Button3"" /&gt;

    &lt;Button
        android:id=""@+id/button4""
        android:layout_width=""200dp""
        android:layout_height=""90dp""
        android:text=""Button4"" /&gt;

    &lt;Button
        android:id=""@+id/button5""
        android:layout_width=""200dp""
        android:layout_height=""90dp""
        android:gravity=""right""
        android:text=""Button5"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<h4>How it works</h4>
<p>The above xml code will generate five buttons and will represent layout as shown in the screenshot below.</p>
<ol>
<li>We have created a LinearLayout and its orientation is set to vertical.</li>
<li>The <code>layout_width</code> parameter indicates the width of the widget. The first button is stretched to the full screen by specifying its value to match_parent.</li>
<li>The <code>layout_width</code> attribute indicates the height a view. The wrap_content indicates that the height will be adjusted to content of the widget.</li>
<li>The <code>android:layout_gravity</code> defines the positioning of view in its parent layout.</li>
<li>The <code>android:gravity</code> defines the alignment for the view content. It can be of any possible constants like left, right, center_vertical, center_horizontal, center</li>
</ol>
<p><a href=""http://stacktips.com/android/android-button-example/attachment/android-button-example-2"" rel=""attachment wp-att-8151""><img alt=""Android Button Example"" class=""aligncenter wp-image-8151 size-full"" height=""662"" loading=""lazy"" sizes=""(max-width: 967px) 100vw, 967px"" src=""/media/uploads/articles/400/Android-Button-Example.png"" srcset="""" width=""967""/></a></p>
<h2>Initializing Button in Activity</h2>
<p>Now that we have created the activity layout. Let us use this layout in activity. Paste the following code snippet in your activity (MyActivity.java) class.</p>
<pre class=""prettyprint lang-java"">protected void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	setContentView(R.layout.main;
	Activity mActivity = this;

	Button button = (Button) findViewById(R.id.button1);
	button.setOnClickListener(new OnClickListener() {

		@Override
		public void onClick(View v) {
			Toast.makeText(mActivity, ""Button1 Clicked!"", Toast.LENGTH_LONG).show();
		}
});</pre>
<h2>Button Event Handling</h2>
<p>To Attach a click listener to the button, let us first instantiate the Button object by calling <code>findViewById()</code> and supplying the unique button id as declared in the layout.</p>
<p>Now, call <code>setOnClickListener()</code> method and provide <code>OnClickListener</code> event reference. Read here for more on <a href=""http://stacktips.com/android/different-way-to-handle-events-in-android"" title=""Different way to handle events in Android"">different way to handle events in Android</a>.</p>
<h2>Styling Android Button</h2>
<p>Android Button styles can be customized with color, font, background etc. Lets us see some of the button xml attributes to customize the buttons as shown below.</p>
<ol>
<li><code>android:background</code> – Sets Button background style. This can be an hex color of #RRGGBBAA format or can be a drawable.</li>
<li><code>android:drawableLeft</code> – Showing an image to the left side of the button. In the following screenshot, the Facebook icon depicts the same.</li>
<li><code>android:textColor</code> – Allows you to set the background color of button.</li>
</ol>
<p>Learn more about on customizing Android View’s from the following links.</p>
<p class=""entry-title""><a href=""http://stacktips.com/android/android-styles-and-themes-tutorial"" title=""Android Styles and Themes Tutorial"">Android Styles and Themes Tutorial</a></p>
<p><a href=""http://stacktips.com/android/using-external-fonts-in-android-view"" title=""Using External Fonts in Android View"">Using External Fonts in Android View</a></p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:orientation=""vertical""
    android:padding=""10dp""&gt;

    &lt;Button
        android:id=""@+id/button1""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center""
        android:layout_marginBottom=""10dp""
        android:background=""@drawable/button_bg""
        android:text=""Button1"" /&gt;


    &lt;Button
        android:id=""@+id/button2""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center""
        android:background=""#3B5998""
        android:drawableLeft=""@drawable/facebook""
        android:padding=""10dp""
        android:text=""Login With Facebook""
        android:textColor=""#ffffff"" /&gt;
&lt;/LinearLayout&gt;
</pre>
<p>Here is the output of the above code<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Android Button Style"" class=""aligncenter wp-image-8153 size-full"" height=""438"" loading=""lazy"" sizes=""(max-width: 888px) 100vw, 888px"" src=""/media/uploads/articles/400/Android-Button-Style.png"" srcset="""" width=""888""/></a></p>
",0,"standard","post"
"How to Programmatically Zip and Unzip File in Android","how-to-programmatically-zip-and-unzip-file-in-android","This tutorial explains &#8220;How to Programmatically Zip and Unzip File in Android&#8221;. Zipping means writting (compress) data into zip files. Below code snippet will help you to zip and unzip files using a generic wrapper class that allows you to easily zip files in Android.
","LIVE","<p>This tutorial explains “How to Programmatically Zip and Unzip File in Android”. Zipping means writing (compress) data into zip files. Below code snippet will help you to zip and unzip files using a generic wrapper class that allows you to easily zip files in Android.</p>
<h1>Why you need a Zip file?</h1>
<ol>
<li>You couldn’t send multiple attachments using Intents to the Google Mail app. The quickest way around that was of course to compress all of the files into one (ZIP).</li>
<li>For the applications that need to send multiple files to server, it is always easiest to create a zip file and send it across over network.</li>
</ol>
<p>I have created both zip and unzip method inside a wrapper class called <code><strong>ZipManager</strong></code>. You may create the same way or you may like to use in your own way.</p>
<h1>How to Zip files</h1>
<p>Crete a sample android activity and add the following permission to application Mainfest.xml file. These persmissions are required to store data to your device storage.</p>
<pre lang=""java"">&lt;uses-permission android:name=""android.permission.WRITE_INTERNAL_STORAGE"" /&gt;
&lt;uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE""/&gt;</pre>
<p>You can use below code to create zip file. Just copy paste to make it work in your activity</p>
<pre lang=""java"">public void zip(String[] _files, String zipFileName) {
		try {
			BufferedInputStream origin = null;
			FileOutputStream dest = new FileOutputStream(zipFileName);
			ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(
					dest));
			byte data[] = new byte[BUFFER];

			for (int i = 0; i &lt; _files.length; i++) {
				Log.v(""Compress"", ""Adding: "" + _files[i]);
				FileInputStream fi = new FileInputStream(_files[i]);
				origin = new BufferedInputStream(fi, BUFFER);

				ZipEntry entry = new ZipEntry(_files[i].substring(_files[i].lastIndexOf(""/"") + 1));
				out.putNextEntry(entry);
				int count;

				while ((count = origin.read(data, 0, BUFFER)) != -1) {
					out.write(data, 0, count);
				}
				origin.close();
			}

			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}</pre>
<p><strong><code>BUFFER</code></strong> is used for limiting the buffer memory size while reading and writing data it to the zip stream</p>
<p><strong><code>_files</code></strong> array holds all the file paths that you want to zip</p>
<p><strong><code>zipFileName</code></strong> is the name of the zip file.</p>
<p>You can use this in your activity</p>
<pre lang=""java"">// declare an array for storing the files i.e the path
// of your source files
String[] s = new String[2];

// Type the path of the files in here
s[0] = inputPath + ""/image.jpg"";
s[1] = inputPath + ""/textfile.txt""; // /sdcard/ZipDemo/textfile.txt

// first parameter is d files second parameter is zip file name
ZipManager zipManager = new ZipManager();

// calling the zip function
zipManager.zip(s, inputPath + inputFile);
</pre>
<p>You can get complete working eclipse project to end of this tutorial.</p>
<h1>How to UnZip files</h1>
<p>Now let us look into unzipping files. For unzipping you need to know the file path for .zip file and the path to the directory extract the files.</p>
<pre lang=""java"">public void unzip(String _zipFile, String _targetLocation) {

		//create target location folder if not exist
		dirChecker(_targetLocatioan);

		try {
			FileInputStream fin = new FileInputStream(_zipFile);
			ZipInputStream zin = new ZipInputStream(fin);
			ZipEntry ze = null;
			while ((ze = zin.getNextEntry()) != null) {

				//create dir if required while unzipping
				if (ze.isDirectory()) {
					dirChecker(ze.getName());
				} else {
					FileOutputStream fout = new FileOutputStream(_targetLocation + ze.getName());
					for (int c = zin.read(); c != -1; c = zin.read()) {
						fout.write(c);
					}

					zin.closeEntry();
					fout.close();
				}

			}
			zin.close();
		} catch (Exception e) {
			System.out.println(e);
		}
}</pre>
<p>You can use this method in your activity</p>
<pre lang=""java"">ZipManager zipManager = new ZipManager();
zipManager.unzip(inputPath + inputFile, outputPath);
</pre>
<h1>Download Complete Example</h1>
<p>Here you can download complete eclipse project source code from GitHub.</p>
<p><a href=""https://github.com/javatechig/javatechig-android-advanced/tree/master/com.javatechig.androidzip"" rel=""nofollow noopener noreferrer"" target=""_blank"">Download Complete Source Code from GitHub</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""How to Programmatically Zip and Unzip File in Android  (2)"" class=""alignleft size-full wp-image-3763"" height=""583"" loading=""lazy"" src=""/media/uploads/articles/401/How-to-Programmatically-Zip-and-Unzip-File-in-Android-2.png"" srcset="""" width=""399""/></a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""How to Programmatically Zip and Unzip File in Android"" class=""alignleft size-full wp-image-3762"" height=""583"" loading=""lazy"" src=""/media/uploads/articles/401/How-to-Programmatically-Zip-and-Unzip-File-in-Android-.png"" srcset="""" width=""399""/></a></p>
",0,"standard","post"
"Convert String to Long in Java","convert-string-to-long-in-java","The java.lang.Long class wraps a value of the primitive type long in an object. This class provides several&hellip;
","LIVE","<p>The <code>java.lang.Long</code> class wraps a value of the primitive type long in an object. This class provides several methods to convert a long to a String and a String to a long, as well as other utility methods.</p>
<pre class=""prettyprint lang-java"">import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;

public class StringToLong {

	public static void main(String[] args) {

		// converting to long
		String number1 = ""543210"";
		long result = Long.valueOf(number1);
		System.out.println(""Result="" + result);

		// remove all commas and then converting to long
		String bumber2 = ""5,43,210"";
		long result2 = Long.valueOf(bumber2.replaceAll("","", """").toString());
		System.out.println(""Result="" + result2);

		// converting using Locale
		String number3 = ""5,43,210"";
		NumberFormat format = NumberFormat.getInstance(Locale.US);
		Number number = 0;
		try {
			number = format.parse(number3);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		long result3 = number.longValue();
		System.out.println(""Result="" + result3);
	}

}
</pre>
<p>Mixing <code>NumberFormat </code> and <code>Long.parseLong()</code> isn’t a good idea always. <code>NumberFormat </code> can be locale-aware (in your example it uses the default locale for your computer) or you can explicitly specify format patterns, whereas the parseXXX() methods of Number subclasses only read “plain” numbers (optional minus sign+digits).</p>
<p>If you formatted it with <code>NumberFormat</code>, you should use <code>NumberFormat.parse()</code> to parse it back. However you shouldn’t depend on the default locale, try to specify one instead. Here in my above example, I am using <code>Locale.US</code> local.</p>
<p>If you don’t care about the format, consider using Long.toString() to convert a long value into string and <code>Long.parseLong()</code> to convert it back. It’s easier to use and works the same everywhere.</p>
",0,"standard","post"
"Converting Array to List in java","converting-array-to-list-in-java","Array class has a asList() method that helps to convert array to List. This method copies an array&hellip;
","LIVE","<p>Array class has a <code>asList()</code> method that helps to convert array to List. This method copies an array into List. When we use <code>asList()</code> method, the array and list both shares the same heap space. When update is made to the list, it reflects the changes to array and vice-versa.</p>
<pre class=""prettyprint lang-java"">import java.util.Arrays;
import java.util.List;

public class ArrayToList {

	public static void main(String[] args) {
		String[] names = { ""Neel"", ""Clay"", ""Adams"", ""Joseph"", ""Jack"" };

		// Converting Array to List 
		List aList = Arrays.asList(names);

		System.out.println(""Size of list="" + aList.size());
		System.out.println(""aList Values="" + aList);

		//changing the aList values
		aList.set(2, ""Dinesh"");

		// printing aList values
		for (String name : names) {
			System.out.println(name);
		}
	}
}</pre>
<p>If you look at the output below you will notice that, after changing the values in list, the changes reflected in the array.</p>
<p><strong>Output</strong></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Converting Array to List in java"" class=""alignleft size-full wp-image-2959"" height=""160"" loading=""lazy"" src=""/media/uploads/articles/403/Converting-Array-to-List-in-java.png"" srcset="""" width=""580""/></a></p>
",0,"standard","post"
"Searching arrays and collections in java","searching-arrays-and-collections-in-java","Arrays and Collection class provides methods that allows to search a specific element in the list. Things to&hellip;
","LIVE","<p>Arrays and <code>Collection </code>class provides methods that allows to search a specific element in the list. Things to know while searching a collection or an array;</p>
<ul>
<li>Search is performed using <code>binarySearch()</code> method</li>
<li>If the element found in the collection or array it returns the element index. If the index is a non negative integer greater than zero then element found.</li>
<li>The collection array needs to be sorted before performing search algorithm. If the collection is not sorted then the result will be unpredictable. Note that the sorting should be performed in natural order.</li>
<li>If the sorting is not made in natural order, and performed using Comparator, then searching should be performed using same Comparator.</li>
</ul>
<p>Example of searching Array/Collection in java</p>
<pre class=""prettyprint lang-java"">package com.java.test;

import java.util.Arrays;
import java.util.Comparator;

public class SearchObjectArray {

	public static void main(String[] args) {
		String[] names = { ""Neel"", ""Clay"", ""Adams"", ""Joseph"", ""Jack"" };

		// sorting array
		Arrays.sort(names);

		// printing after sort
		for (String name : names) {
			System.out.println(name);
		}

		// Search result for ""one""
		System.out.println(""Search Adams="" + Arrays.binarySearch(names, ""Adams""));

		System.out.println(""======================================"");

		// reverse sorting
		ReverseSortComparator reSort = new ReverseSortComparator();
		Arrays.sort(names, reSort);
		for (String name : names) {
			System.out.println(name);
		}

		// Search result for ""one""
		System.out.println(""Search Adams="" + Arrays.binarySearch(names, ""Adams"", reSort));
	}

	static class ReverseSortComparator implements Comparator {

		public int compare(String a, String b) {
			return b.compareTo(a);
		}

	}

}</pre>
<p>Output of the above code is</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Searching arrays and collections"" class=""alignleft size-full wp-image-2949"" height=""240"" loading=""lazy"" src=""/media/uploads/articles/404/Searching-arrays-and-collections.png"" srcset="""" width=""560""/></a></p>
",0,"standard","post"
"Using Static Import in Java","using-static-import-in-java","To import a specific member inside your java source file, put an import statement at the beginning of&hellip;
","LIVE","<p>To import a specific member inside your java source file, put an <code>import</code> statement at the beginning of the file before any type definitions but after the package statement, if there is one. Here’s how you would import the <code>Color </code> class to <code>Rectangle</code> class.</p>
<pre class=""prettyprint lang-java"">package com.java.test;

public class Constants {

	public static final double PI = 3.141592653589793;
}</pre>
<p>Importing Constants class</p>
<pre class=""prettyprint lang-java"">import com.java.test.Constants;

public class Circle {
	private double getArea(int radious) {
		return Constants.PI * radious * radious;

	}

	public static void main(String[] args) {
		Circle myCircle = new Circle();
		System.out.println(""Area="" + myCircle.getArea(20));
	}

}</pre>
<p>This approach works well. However, Java5 has enhanced import feature called static import. Static import can be used when you want to use classe’s static members. After using static import in the above example</p>
<pre class=""prettyprint lang-java"">import static com.java.test.Constants.PI;

public class Circle {
	private double getArea(int radious) {
		return PI * radious * radious;

	}

	public static void main(String[] args) {
		Circle myCircle = new Circle();
		System.out.println(""Area="" + myCircle.getArea(20));
	}

}</pre>
<p>However, both classes produce the same output.</p>
<h3>Note:</h3>
<ol>
<li>To use static import we have to use fully qualified name of the static member you want to import, or a wildcard. In our example we are importing PI from <code>com.java.test.Constants</code> class</li>
<li>In case we have to import several static members, then we can use wildcard (*), which will import all of the static members of that class.</li>
<li>After <code>static import </code>we don’t have to write the class name while calling. You can see the example in case-1 where we are using Constants.PI but after static import we just use member name PI.</li>
<li>You must use <code>import static &lt;packagename.Classname.MemberName&gt;</code></li>
<li>Static import and ambiguity: If your are importing the static member of two classes that shares common names for two or more members, which leads to an ambiguity. Java compiler wont understand which member it is referring to.</li>
</ol>
",0,"standard","post"
"Mobile application design study","mobile-application-design-study","This post will explain end-to-end mobile design process case study and importance and what makes an effective mobile design process? However, before this we will see the challenges of designing in the mobile centric design patterns.
","LIVE","<p>The mobile ecosystem is growing tremendously; such a rapid growth that from startups to fortune 500 companies are heading towards mobility. As mobile devices are smaller computing devices, not much of the serious business that runs on mobile. Huh! Now I will contradict my previous statement. In fact, this was the mindset everyone had including developers and companies. But since 2010 mobile application is rising so rapidly that mobility turned as a serious market. This post will explain things to consider while making an effective mobile design.</p>
<h2>Real world mobile usability study</h2>
<p>Couple of years back computer/web application development is one of the front pages and a serious topic and mobile were in the back seat. Any design or application model formation was followed in the context of big sized computers. As mobiles are getting smarter with more capabilities and a huge user base, companies are focused on mobile user interface design.</p>
<p style=""text-align: left;"">In short, mobile design context is king! It is no longer possible to imagine a mobile model looks same or similar to big sized web layout. Each of the fundamental design parameters like changing the interface dramatically while changing device orientation, implementing sensor capability, etc. are very much important consideration while analyzing the best user interface.</p>
<p>Usability study is always been very much required for cases like,  when the customer is standing on a busy street corner and looking at a map; sharing photos of the kids while sitting on the couch with a spouse; talking with one’s boss one-handed while trying to park the car; or reading while riding the city bus.</p>
<p>To really understand the user mood, you or your team has to get out to the field and observe these interactions first hand, as they happen. And while you are out there, simply asking questions is no longer enough to get accurate and precise data. To make solid design decisions, ideally, you should observe behaviors using a realistic prototype of your app as a tool for eliciting these behavioral responses.</p>
<h2>Variety of form factors</h2>
<p>The mobile computing world is largely different from the web and PC world. Mobile touch computing yielded a variety of platforms and device form factors. Small phones, large phones, small tablets, mid-size tablets, and large tablets are widely available for sale today. And all the touch Interfaces claims to provide simplicity and using different approaches to software design because of the different operating system, programming languages base, form factors, and different interface patterns.</p>
<p>Today phones and tablets are not the only platforms to be worried about. Android is supporting installations in everything from music system, TV, and cars. Considering the need and usage of the devices, all these installations require considerable changes to the user interface to fit the specific target. This means that the old model of wire-frames is no longer reflects the feasible for targeted platforms. In order to provide the best user experience, we need to understand each platform and modify our design for these objects. This reflects the significant changes to the design guidelines and approaches.</p>
<p>This section provides an overview of screen configurations of mobile ecosystem, and an overview of screen-compatibility features. Here we will look into some of the very important factors while designing mobile interface. Here in this tutorial series we are considering android platform design guidelines in comparison with world leading iOS platform.</p>
<h3>Screen size</h3>
<p>Actual physical size, measured as the screen’s diagonal. While iPhone comes with two standard resolutions (shown in image below), android groups all actual screen sizes into four generalized sizes: small, normal, large, and extra large.</p>
<p style=""text-align: center;""> <a href=""http://stacktips.com"" target=""_self""><img alt=""iPhone4S and earlier 320×480 vs. iPhone 5 640×1136 "" class=""aligncenter wp-image-2855"" height=""395"" loading=""lazy"" sizes=""(max-width: 470px) 100vw, 470px"" src=""/media/uploads/articles/406/iphone_screen_size.png"" srcset="""" width=""470""/></a></p>
<h3>Screen density</h3>
<p>Density defines the number of pixels within a physical area of the screen; usually referred to as dpi or PPI (dots per inch). For example, a “low” density screen has fewer pixels within a given physical area, compared to a “normal” or “high” density screen. iPhone is coming up with three standard PPI rate 163, 202 and 326. But, Android groups all actual screen densities into four generalized densities: low, medium, high, and extra high. Find some more information on different device screen density</p>
<p><a href=""http://en.wikipedia.org/wiki/List_of_displays_by_pixel_density"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""List_of_displays_by_pixel_density"">http://en.wikipedia.org/wiki/List_of_displays_by_pixel_density</a></p>
<h3>Orientation supports</h3>
<p>Orientation defines the orientation of the screen from the user’s point of view. This is either landscape or portrait, meaning that the screen’s aspect ratio is either wide or tall, respectively. Be aware that not only do different devices operate in different orientations by default, but the orientation can change at runtime when the user rotates the device. Each of today’s smartphone is orientation aware, irrespective of brand and operating system.</p>
<h3>Resolution Consideration</h3>
<p>Resolution is the total number of physical pixels on a screen. When adding support for multiple screens, applications do not work directly with resolution; applications should be concerned only with screen size and density, as specified by the generalized size and density groups.</p>
<h3>Density-independent pixel (dp)</h3>
<p>dp is a virtual pixel unit that we should use when defining UI layout, to express layout dimensions or position in a density-independent way.</p>
<p>The density-independent pixel is equivalent to one physical pixel on a 160 dpi screen, which is the baseline density assumed by the system for a “medium” density screen. At runtime, the system transparently handles any scaling of the dp units, as necessary, based on the actual density of the screen in use. The conversion of dp units to screen pixels is simple: px = dp * (dpi / 160). For example, on a 240 dpi screen, 1 dp equals 1.5 physical pixels. You should always use dp units when defining your application’s UI, to ensure proper display of your UI on screens with different densities.</p>
<h3>Standard android screen sizes</h3>
<ul style=""padding-left: 30px;"">
<li>xlarge screens are at least 960dp x 720dp</li>
<li>large screens are at least 640dp x 480dp</li>
<li>normal screens are at least 470dp x 320dp</li>
<li>small screens are at least 426dp x 320dp</li>
</ul>
<h2>Mode of interactions</h2>
<p>Soon you buy a brand new phone, you will be amazed to use all the device supported advance features. If your phone has a voice command, then you would like to do a keyword search putting voice command rather typing.</p>
<p>When it comes to mobile design, keep in mind to take full advantage of features like voice command, motion sensor, and multi-touch, gestures, etc. In order to design effective interface, your prototype and customer experience testing techniques need to take into account for all modes of available interactions.</p>
<h3>Touch Interfaces incorporate simplicity</h3>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Swipe Gesture  in app"" class=""size-full wp-image-2852"" height=""250"" loading=""lazy"" src=""/media/uploads/articles/406/product_page_image_mnt-388x250.png"" srcset="""" width=""388""/></a></p>
<p>The browser based software runs on large screens could afford to proven to have a high tolerance of complexity, fairly due to large screens and relatively high degree of focus that customers have on your software just by virtue of having to sit down at a chair to use the computer.</p>
<p>As mobile devices are all time accessible devices, your application interfaces need to be simple and clear. Expecting lot as some of your heavy lifting enterprise application will turn your mobile design very messy. It should be having an acceptable amount of features with a smart looking interface. Each mobile platform has guidelines that provide touch interfaces, which is claimed to be unique. However, I personally don’t feel much of the difference as all of the smartphones are enabled with the same touch capabilities.</p>
<h2>Delight is mandatory</h2>
<p>Thus, no matter how trivial and cost-effective, the mobile application design needs to be as delightful as possible, even if “delight” simply means the software helped the customer complete the task as quickly as possible. The best mobile experiences must behave and feel more like games. The fun elements (such as transitions) play a big role in the experience.</p>
<p>In contrast, you will find little limitation in some of the old smartphones. Older and low capability devices are supporting minimal or no transitions. This means that while you are prototyping the design of your app, a serious amount of time is required to explore the element of transition that will support wide range of targeted devices.</p>
",0,"standard","post"
"Creating Drop Down List Using Android Spinner","android-spinner-example","This tutorial explains creating spinner in android and attaching event to spinner in android. Here in this tutorial, you&#8217;ll create a Simple spinner widget that displays a list of countries and shows appropriate flag as per selected country from the spinner.
","LIVE","<p>This tutorial explains creating spinner in android and attaching event to spinner in android. Here in this tutorial, you’ll create a Simple spinner widget that displays a list of countries and shows appropriate flag as per selected country from the spinner.</p>
<p>1. Create a new new project. In this example we named it as <strong>SpinnerExample.</strong></p>
<h3>Declare Your Activity Layout (layout_main.xml)</h3>
<p>Add a new layout file in \layout\layout_main.xml and insert the following code.</p>
<pre lang=""xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical""
    android:padding=""10dip"" &gt;

    &lt;TextView
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_marginTop=""10dip""
        android:text=""@string/country_label""
        android:textAppearance=""?android:attr/textAppearanceLarge"" /&gt;

    &lt;Spinner
        android:id=""@+id/country_spinner""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:prompt=""@string/country_label"" /&gt;

    &lt;ImageView
        android:id=""@+id/country_image""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""
        android:layout_gravity=""center_vertical""
        android:scaleType=""centerInside""
        android:src=""@drawable/ic_launcher"" /&gt;

&lt;/LinearLayout&gt;</pre>
<p>In the above example, we have declared TextView, Spinner and a ImageView. The text behaves as a title for the spinner. When you select the Spinner, the ImageView to display the flag for selected country in Spinner.</p>
<h3>3. Declaring String Arrays inside strings.xml</h3>
<p>Below are the strings used in the application. Declare all of them in strings.xml file</p>
<pre lang=""xml"">&lt;string-array name=""countries_list""&gt;
        &lt;item&gt;Afghanistan&lt;/item&gt;
        &lt;item&gt;Albania&lt;/item&gt;
        &lt;item&gt;Australia&lt;/item&gt;
        &lt;item&gt;Bangladesh&lt;/item&gt;
        &lt;item&gt;Bhutan&lt;/item&gt;
        &lt;item&gt;England&lt;/item&gt;
        &lt;item&gt;Finland&lt;/item&gt;
        &lt;item&gt;India&lt;/item&gt;
        &lt;item&gt;Saudi Arabia&lt;/item&gt;
        &lt;item&gt;Nepal&lt;/item&gt;
    &lt;/string-array&gt;

    &lt;integer-array name=""countries_flag_list""&gt;
        &lt;item&gt;@drawable/afghanistan&lt;/item&gt;
        &lt;item&gt;@drawable/albania&lt;/item&gt;
        &lt;item&gt;@drawable/australia&lt;/item&gt;
        &lt;item&gt;@drawable/bangladesh&lt;/item&gt;
        &lt;item&gt;@drawable/bhutan&lt;/item&gt;
        &lt;item&gt;@drawable/england&lt;/item&gt;
        &lt;item&gt;@drawable/finland&lt;/item&gt;
        &lt;item&gt;@drawable/india&lt;/item&gt;
        &lt;item&gt;@drawable/saudi_arabia&lt;/item&gt;
        &lt;item&gt;@drawable/nepal&lt;/item&gt;
    &lt;/integer-array&gt;</pre>
<h3>4. Activity Java Class (MainActivity.java)</h3>
<p>Now create a java class and name it as MainActivity.java. And paste the following code.</p>
<pre lang=""java"">package com.example.spinnerexample;

import android.app.Activity;
import android.content.res.TypedArray;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.Spinner;

public class MainActivity extends Activity {

	private ImageView image;
	private String[] states;
	private Spinner spinner;
	private TypedArray imgs;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		states = getResources().getStringArray(R.array.countries_list);
		imgs = getResources().obtainTypedArray(R.array.countries_flag_list);

		image = (ImageView) findViewById(R.id.country_image);
		spinner = (Spinner) findViewById(R.id.country_spinner);

		ArrayAdapter&lt;String&gt; dataAdapter = new ArrayAdapter&lt;String&gt;(this,
				android.R.layout.simple_spinner_item, states);
		dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		spinner.setAdapter(dataAdapter);

		spinner.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView&lt;?&gt; parent, View view,
					int position, long id) {
				image.setImageResource(imgs.getResourceId(
						spinner.getSelectedItemPosition(), -1));
			}

			@Override
			public void onNothingSelected(AdapterView&lt;?&gt; arg0) {

			}
		});
	}
}</pre>
<p>First we are initializing <code>Spinner </code>object by getting reference from the xml layout file using <code>findViewById()</code> method. Then creates a new <code>ArrayAdapter</code>, which binds each item in the string array to the initial appearance for the Spinner (which is how each item will appear in the spinner when selected). <code>setOnItemSelectedListener()</code> callback is registered to Spinner to handle the spinner event.</p>
<h3>5. Output</h3>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Android Spinner Example"" class=""size-full wp-image-3670 aligncenter"" height=""583"" loading=""lazy"" src=""/media/uploads/articles/407/Android-Spinner-Example.png"" srcset="""" width=""399""/></a></p>
",0,"standard","post"
"Websites Providing Attractive Android Tutorials for Developers","android-tutorials-for-developers","Here are list of some pretty cool and amazing websites that provides e-learning tutorials for developers. This will&hellip;
","LIVE","<p>Here are list of some pretty cool and amazing websites that provides e-learning tutorials for developers. This will help developers who are just started programming for android.  All of the above websites provides awesome tutorials on android user interface design, android services, SQLite, advance android tutorials with complete open source code. Few are providing only the code snippets while few others provide complete example code.</p>
<p>I found all of them are quite helpful while I was pursuing android. Hope this will help you too</p>
<h3>1. <a href=""http://www.vogella.com/android.html"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""vogella android tutorials"">Vogella Android development tutorials</a></h3>
<p>Free tutorials about Eclipse, Android, Web programming and other Open Source related programming tasks</p>
<h3>2. <a href=""http://stacktips.com/category/android/"" title=""Javatechig Android tutorials"">JavatechIG android tutorials</a></h3>
<p>JavatechIG provides compiled set of finest tutorials on leading java and mobile technologies like Android, Blackberry, Sencha Touch, PhoneGap and IBM Worklight etc. It provides some of the finest android tutorials along with the complete source code is available here.</p>
<h3>3. <a href=""https://www.udemy.com/android-programming-video-tutorials-for-beginners-in-english/"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""Udemy Android tutorials"">Video android tutorials by udemy</a></h3>
<p>Udemy is the world’s largest destination for online courses. Here you can find some of the video tutorials on android. I admit the fact that, video tutorials are time consuming. But for few others they can be much effective.</p>
<h3>4. <a href=""http://www.mkyong.com/android"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""android tutorials by mkyong"">Android tutorials by mkyong</a></h3>
<p>Provides ton of tutorials on java, android and advance java. You can find answers for each of the smallest questions. It is a good resource for person starting with android. But, it may not be much effective for learning advance android programming.</p>
<h3>5. <a href=""http://www.javacodegeeks.com/android/"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""javacodegeeks android tutorials"">Android tutorials by javacodegeeks</a></h3>
<p>It is yet another resource for learning android programming. Provides tutorials and learning materials on Java, Scala, Groovy and android news, tutorials, code examples and snippets, articles and more.</p>
<h3>6. <a href=""http://www.androidhive.info"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""android tutorials by androidhive"">Android tutorials by androidhive</a></h3>
<p>Androidhive is a personal blog sharing android tutorials, tips and hacks for android and game developers. It provides some of the complete advance tutorials on android.</p>
",0,"standard","post"
"Android ViewFlipper Example- Creating Image Slideshow Using ViewFlipper","android-viewflipper-example","ViewFlipper is and user interface widget available in android since android API level 1. It can hold two more views, but only one child can be shown at a time. Using this we can implement functionality similar to android gallery item, swiping allows to navigate between images. 
","LIVE","
<h1><span id=""1_Introduction_to_Android_ViewFlipper"">1. Introduction to Android ViewFlipper</span></h1>
<p>ViewFlipper is and user interface widget available in android since android API level 1. It can hold two more views, but only one child can be shown at a time. Using this we can implement functionality similar to android gallery item, swiping allows to navigate between images. It also support to auto flip between child at a regular interval.</p>
<p>The ViewFlipper class has derived from ViewAnimator. It supports the methods to set the animation for the in and out actions using <code>setInAnimation()</code> and <code>setOutAnimation()</code>. You can either use some of the default animation that are available in android system or you can write your own animation class.</p>
<h1><span id=""2_Defining_ViewFlipper_Example_Layout"">2. Defining ViewFlipper Example Layout</span></h1>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical""&gt;

    &lt;ViewFlipper
        android:id=""@+id/view_flipper""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""&gt;

        &lt;RelativeLayout
            android:layout_width=""fill_parent""
            android:layout_height=""fill_parent""&gt;

            &lt;ImageView
                android:layout_width=""fill_parent""
                android:layout_height=""fill_parent""
                android:layout_gravity=""center""
                android:adjustViewBounds=""true""
                android:scaleType=""centerCrop""
                android:src=""@drawable/lightning"" /&gt;

            &lt;TextView
                style=""@style/ImageTitle""
                android:text=""@string/lightning"" /&gt;
        &lt;/RelativeLayout&gt;

        &lt;RelativeLayout
            android:layout_width=""fill_parent""
            android:layout_height=""fill_parent""&gt;

            &lt;ImageView
                android:layout_width=""fill_parent""
                android:layout_height=""fill_parent""
                android:layout_gravity=""center""
                android:adjustViewBounds=""true""
                android:scaleType=""centerCrop""
                android:src=""@drawable/color_baloons"" /&gt;

            &lt;TextView
                style=""@style/ImageTitle""
                android:text=""@string/color_baloons"" /&gt;
        &lt;/RelativeLayout&gt;

        &lt;RelativeLayout
            android:layout_width=""fill_parent""
            android:layout_height=""fill_parent""&gt;

            &lt;ImageView
                android:layout_width=""fill_parent""
                android:layout_height=""fill_parent""
                android:layout_gravity=""center""
                android:adjustViewBounds=""true""
                android:scaleType=""centerCrop""
                android:src=""@drawable/natural_wall"" /&gt;

            &lt;TextView
                style=""@style/ImageTitle""
                android:text=""@string/natural_wall"" /&gt;
        &lt;/RelativeLayout&gt;
    &lt;/ViewFlipper&gt;

    &lt;ImageView
        android:id=""@+id/swipe_left""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentLeft=""true""
        android:layout_centerVertical=""true""
        android:src=""@drawable/swipe_left"" /&gt;

    &lt;ImageView
        android:id=""@+id/swipe_right""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentRight=""true""
        android:layout_centerVertical=""true""
        android:src=""@drawable/swipe_right"" /&gt;

&lt;/RelativeLayout&gt;
</pre>
<p>Here in the above xml layout, I am using three <code>LinearLayout</code>. Each layout has an image and image caption. All image caption is using the same style. You can see the screenshot’s below for the style. Now, let us create a <code>style.xml</code> file in values folder and then add the following style code</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;resources&gt;    
    &lt;style name=""ImageTitle""&gt;
        &lt;item name=""android:layout_width""&gt;fill_parent&lt;/item&gt;
        &lt;item name=""android:layout_height""&gt;50dp&lt;/item&gt;
        &lt;item name=""android:layout_alignParentBottom""&gt;true&lt;/item&gt;
        &lt;item name=""android:background""&gt;#99000000&lt;/item&gt;
        &lt;item name=""android:gravity""&gt;center&lt;/item&gt;
        &lt;item name=""android:maxLines""&gt;2&lt;/item&gt;
        &lt;item name=""android:textColor""&gt;#fff&lt;/item&gt;
        &lt;item name=""android:textStyle""&gt;bold&lt;/item&gt;
        &lt;item name=""android:textSize""&gt;18dp&lt;/item&gt;
        &lt;item name=""android:typeface""&gt;sans&lt;/item&gt;
    &lt;/style&gt;
&lt;/resources&gt;</pre>
<p>I admit the fact that, the style file used here can be more improvised. The color can be placed in <code>colors.xml</code> file. But, for the sake of simplicity it is using the colors right inside the styles. Now we are done with the layout design and we will move to controlling the <code>ViewFlipper</code> from java code.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Android ViewFlipper example"" class=""aligncenter size-full wp-image-2824"" height=""547"" loading=""lazy"" sizes=""(max-width: 707px) 100vw, 707px"" src=""/media/uploads/articles/409/ViewFlipper-example-javatechig.png"" srcset="""" width=""707""/></a></p>
<h1><span id=""3_Using_ViewFlipper_inActivity"">3. Using ViewFlipper in Activity</span></h1>
<p>Android ViewFlipper can anytime display only one immoderate child at a time. So you can only see the first image in your eclipse graphical layout view. We need to pragmatically move to different child or we can setup an auto timer. Setting an auto flip timer will create a slideshow and can be controlled by <code>startFlipping()</code> and <code>stopFlipping()</code> method. Later in this example we will see more in detail.</p>
<pre class=""prettyprint lang-java"">
public class ViewFlipperSampleActivity extends Activity {
	private static final int SWIPE_MIN_DISTANCE = 120;
	private static final int SWIPE_THRESHOLD_VELOCITY = 200;
	private ViewFlipper mViewFlipper;	
	private Context mContext;
	private final GestureDetector detector = new GestureDetector(new SwipeGestureDetector());

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		mContext = this;
		mViewFlipper = (ViewFlipper) this.findViewById(R.id.view_flipper);
		mViewFlipper.setOnTouchListener(new OnTouchListener() {
			@Override
			public boolean onTouch(final View view, final MotionEvent event) {
				detector.onTouchEvent(event);
				return true;
			}
		});
	}

	class SwipeGestureDetector extends SimpleOnGestureListener {
		@Override
		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
			try {
				// right to left swipe
				if (e1.getX() - e2.getX() &gt; SWIPE_MIN_DISTANCE &amp;&amp; Math.abs(velocityX) &gt; SWIPE_THRESHOLD_VELOCITY) {
					mViewFlipper.setInAnimation(AnimationUtils.loadAnimation(mContext, R.anim.left_in));
					mViewFlipper.setOutAnimation(AnimationUtils.loadAnimation(mContext, R.anim.left_out));					
					mViewFlipper.showNext();
					return true;
				} else if (e2.getX() - e1.getX() &gt; SWIPE_MIN_DISTANCE &amp;&amp; Math.abs(velocityX) &gt; SWIPE_THRESHOLD_VELOCITY) {
					mViewFlipper.setInAnimation(AnimationUtils.loadAnimation(mContext, R.anim.right_in));
					mViewFlipper.setOutAnimation(AnimationUtils.loadAnimation(mContext,R.anim.right_out));
					mViewFlipper.showPrevious();
					return true;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			return false;
		}
	}
}</pre>
<p>In the above code, we are using <code>GestureListener</code> to identify the swipe gesture and rotate between ViewFlipper child view’s. <code>showNext()</code> and <code>showPrevious()</code> method’s are used to show the next and previous ViewFlipper child items. All the ViewFlipper items are added statically inside the layout xml file. However you can also add ViewFlipper child items using <code>addView()</code> method.</p>
<pre class=""prettyprint lang-java"">ImageView imageView = new ImageView(this);
imageView.setImageResource(R.drawable.color_baloons);
mViewFlipper.addView(imageView);</pre>
<h1><span id=""4_Image_Slideshow_inViewFlipper"">4. Image Slideshow in ViewFlipper</span></h1>
<p>So far, our example is supporting swipe gesture. But what if we want to implement a slideshow?<br/>
Android <code>ViewFlipper</code> support auto flip which can be controlled with <code>startFlipping()</code> and <code>stopFlipping()</code> method. We can set the auto flip interval using <code>setFlipInterval(period)</code>. Note that the interval period is in milliseconds.</p>
<p>To control the auto flip we will add play and stop buttons. I have inserted the following code right after <code>ViewFlipper</code> in my original layout xml file.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout
        style=""@style/ButtonContainer""
        android:orientation=""horizontal"" &gt;

        &lt;Button
            android:id=""@+id/play""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_marginRight=""10dp""
            android:background=""@android:drawable/ic_media_play"" /&gt;

        &lt;Button
            android:id=""@+id/stop""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:background=""@android:drawable/ic_media_pause"" /&gt;
    &lt;/LinearLayout&gt;</pre>
<p>Added the following style</p>
<pre class=""prettyprint lang-xml"">&lt;style name=""ButtonContainer""&gt;
        &lt;item name=""android:layout_width""&gt;fill_parent&lt;/item&gt;
        &lt;item name=""android:layout_height""&gt;50dp&lt;/item&gt;
        &lt;item name=""android:layout_alignParentTop""&gt;true&lt;/item&gt;
        &lt;item name=""android:background""&gt;#99000000&lt;/item&gt;
        &lt;item name=""android:gravity""&gt;center&lt;/item&gt;        
    &lt;/style&gt;</pre>
<p>ViewFlipper auto flip can be controlled from java code. add following code in your java class</p>
<pre class=""prettyprint lang-xml"">		
findViewById(R.id.play).setOnClickListener(new OnClickListener() {
	@Override
	public void onClick(View view) {
		//sets auto flipping
		mViewFlipper.setAutoStart(true);
		mViewFlipper.setFlipInterval(4000);
		mViewFlipper.startFlipping();
	}
});

findViewById(R.id.stop).setOnClickListener(new OnClickListener() {
	@Override
	public void onClick(View view) {
		//stop auto flipping 
		mViewFlipper.stopFlipping();
	}
});</pre>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Android ViewFlipper example"" class=""aligncenter size-full wp-image-2825"" height=""547"" loading=""lazy"" sizes=""(max-width: 707px) 100vw, 707px"" src=""/media/uploads/articles/409/ViewFlipper-example.png"" srcset="""" width=""707""/></a></p>
<h1><span id=""5_ViewFlipper_Animation_and_Events"">5. ViewFlipper Animation and Events</span></h1>
<p>The ViewFlipper class has derived from <code>ViewAnimator</code>. It supports the methods to set the animation for the in and out actions using <code>setInAnimation()</code> and <code>setOutAnimation()</code>. You can either use some of the default animation that are available in android system or you can write your own animation class.</p>
<p>Sometimes we may need to control our screen while animation is started or completed. AnimationListener enables to handle animation events using <code>onAnimationStart()</code>, <code>onAnimationRepeat()</code> and <code>onAnimationEnd()</code> methods.</p>
<pre class=""prettyprint lang-java"">
//animation listener
AnimationListener mAnimationListener = new Animation.AnimationListener() {
	public void onAnimationStart(Animation animation) {
		//animation started event
	}

	public void onAnimationRepeat(Animation animation) {
	}

	public void onAnimationEnd(Animation animation) {
		//TODO animation stopped event
	}
};</pre>
<p>Now add the animation listener to <code>ViewFlipper</code>.</p>
<pre class=""prettyprint lang-java"">
mViewFlipper.getInAnimation().setAnimationListener(mAnimationListener);</pre>
<h1><span id=""6_Download_source_code"">6. Download source code</span></h1>
[download url=”https://github.com/javatechig/Android-UI-Tutorials/tree/master/ViewFlipperExample”]
",0,"standard","post"
"ProgressBar while Loading WebView in Android","progressbar-while-loading-webview","This tutorial demonstrate the usage of ProgressBar while Loading WebView contents in android. This example explains horizontal ProgressBar and ProgressBar dialog with WebView. Progressbar is a visual indicator of progress in some operation.
","LIVE","<p>This tutorial demonstrate the usage of ProgressBar while Loading <a href=""/articles/android-webview-example"" title=""Android WebView Example"">WebView</a> contents in android. This example explains horizontal ProgressBar and ProgressBar dialog with WebView.</p>
<p>Progressbar is a visual indicator of progress in some operation. Displays a bar to the user representing how far the operation has progressed; the application can change the amount of progress (modifying the length of the bar) as it moves forward. There is also a secondary progress displayable on a progress bar which is useful for displaying intermediate progress, such as the buffer level during a streaming playback progress bar.</p>
<p>A progress bar can also be made indeterminate. In indeterminate mode, the progress bar shows a cyclic animation without an indication of progress. This mode is used by applications when the length of the task is unknown. The indeterminate progress bar can be either a spinning wheel or a horizontal bar</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""progressbar-android"" class=""aligncenter size-full wp-image-1446"" height=""369"" loading=""lazy"" sizes=""(max-width: 563px) 100vw, 563px"" src=""/media/uploads/articles/410/progressbar-android.png"" srcset="""" width=""563""/></a></p>
<h2>1. Determinate Progress Bar Example</h2>
<p>Here is my layout</p>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    tools:context="".WebViewActivity"" &gt;

    &lt;LinearLayout
        android:id=""@+id/urlContainer""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:orientation=""horizontal"" &gt;

        &lt;EditText
            android:id=""@+id/urlField""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""3""
            android:hint=""Enter URL to open"" /&gt;

        &lt;Button
            android:id=""@+id/goButton""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_weight=""1""
            android:text=""Open"" /&gt;
    &lt;/LinearLayout&gt;

    &lt;ProgressBar
        android:id=""@+id/progressBar""
        style=""?android:attr/progressBarStyleHorizontal""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_below=""@id/urlContainer"" /&gt;

    &lt;WebView
        android:id=""@+id/webView""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""
        android:layout_below=""@id/progressBar"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<p>Do the following changes in your java code</p>
<pre class=""prettyprint lang-java"">import android.app.Activity;
import android.os.Bundle;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;

public class WebViewActivity extends Activity {
	private WebView webView;
	private EditText urlEditText;
	private ProgressBar progress;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_web_view);

		urlEditText = (EditText) findViewById(R.id.urlField);
		webView = (WebView) findViewById(R.id.webView);
		webView.setWebChromeClient(new MyWebViewClient());

		progress = (ProgressBar) findViewById(R.id.progressBar);
		progress.setMax(100);

		Button openUrl = (Button) findViewById(R.id.goButton);
		openUrl.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				String url = urlEditText.getText().toString();
				if (validateUrl(url)) {
					webView.getSettings().setJavaScriptEnabled(true);
					webView.loadUrl(url);

					WebViewActivity.this.progress.setProgress(0);
				}
			}

			private boolean validateUrl(String url) {
				return true;
			}
		});

	}

	private class MyWebViewClient extends WebChromeClient {	
		@Override
		public void onProgressChanged(WebView view, int newProgress) {			
			WebViewActivity.this.setValue(newProgress);
			super.onProgressChanged(view, newProgress);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.web_view, menu);
		return true;
	}

	public void setValue(int progress) {
		this.progress.setProgress(progress);		
	}
}</pre>
<p>Output of the above program is</p>
<p style=""text-align: center;""> <a href=""http://stacktips.com"" target=""_self""><img alt=""progressbar1"" class=""aligncenter wp-image-1448"" height=""500"" loading=""lazy"" src=""/media/uploads/articles/410/progressbar1.png"" srcset="""" width=""431""/></a></p>
<h2>2. Indeterminate Progress Bar Example</h2>
<p>In the above layout xml file, do the following changes</p>
<pre class=""prettyprint lang-xml"">&lt;ProgressBar
        android:id=""@+id/progressBar""
        android:layout_width=""wrap_content""
        android:layout_centerHorizontal=""true""
        android:layout_height=""wrap_content""
        android:layout_below=""@id/urlContainer"" /&gt;</pre>
<p>Below is my activity java class</p>
<pre class=""prettyprint lang-java"">import android.app.Activity;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;

public class WebViewActivity extends Activity {
	private WebView webView;
	private EditText urlEditText;
	private ProgressBar progress;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_web_view);

		urlEditText = (EditText) findViewById(R.id.urlField);
		webView = (WebView) findViewById(R.id.webView);
		webView.setWebViewClient(new MyWebViewClient());

		progress = (ProgressBar) findViewById(R.id.progressBar);
		progress.setVisibility(View.GONE);
		Button openUrl = (Button) findViewById(R.id.goButton);
		openUrl.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				String url = urlEditText.getText().toString();
				if (validateUrl(url)) {
					webView.getSettings().setJavaScriptEnabled(true);
					webView.loadUrl(url);

				}
			}

			private boolean validateUrl(String url) {
				return true;
			}
		});

	}

	private class MyWebViewClient extends WebViewClient {	
		 @Override
		    public boolean shouldOverrideUrlLoading(WebView view, String url) {
		        view.loadUrl(url);
		        return true;
		    }

		 @Override
		public void onPageFinished(WebView view, String url) {
			 progress.setVisibility(View.GONE);
				WebViewActivity.this.progress.setProgress(100);
			super.onPageFinished(view, url);
		}

		 @Override
		public void onPageStarted(WebView view, String url, Bitmap favicon) {
			 progress.setVisibility(View.VISIBLE);
			WebViewActivity.this.progress.setProgress(0);
			super.onPageStarted(view, url, favicon);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.web_view, menu);
		return true;
	}

	public void setValue(int progress) {
		this.progress.setProgress(progress);		
	}
}</pre>
<p>Below is the Output of the above code</p>
<p style=""text-align: center;""> <a href=""http://stacktips.com"" target=""_self""><img alt=""progressbar"" class=""aligncenter wp-image-1448"" height=""500"" loading=""lazy"" src=""/media/uploads/articles/410/progressbar2.png"" srcset="""" width=""431""/></a></p>
",0,"standard","post"
"Using External Fonts in Android View","using-external-fonts-in-android-view","This tutorial explains example for using external fonts in Android View. Android applications are capable of loading the external font files with .ttf extension. 
","LIVE","<p>This tutorial explains example for using external fonts in Android View. Android applications are capable of loading the external font files with .ttf extension. Follow below simple steps to create an example that uses custom font on TextView.</p>
<ol>
<li>At first, download a font of your choice. Note that android supports .ttf extension. Here I have downloaded <code>Maximum.ttf</code> file.</li>
<li>Create a new folder <code>font</code> in your assets folder and paste your recently downloaded font file.<br/>
We can change the font settings for a view simply by adding two lines of code</li>
</ol>
<pre class=""prettyprint lang-java"">TextView textview = (TextView) findViewById(R.id.textView);
Typeface font = Typeface.createFromAsset(getContext().getAssets(), ""fonts/Maximum.ttf"");
textView. setTypeface(font);</pre>
<ol start=""3"">
<li>This solution will work for you, but sometimes you may have to maintain the theme font across the application for each of the text view you use. You can do that by just extending your class from android TextView. Below is the code to my customized TextView.</li>
</ol>
<pre class=""prettyprint lang-java"">import android.content.Context;
import android.graphics.Typeface;
import android.util.AttributeSet;
import android.widget.TextView;

public class CustomTextView extends TextView {
	public CustomTextView(Context context) {
		super(context);
		setFont();
	}
	public CustomTextView(Context context, AttributeSet attrs) {
		super(context, attrs);
		setFont();
	}
	public CustomTextView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		setFont();
	}

	private void setFont() {
		Typeface font = Typeface.createFromAsset(getContext().getAssets(), ""fonts/Maximum.ttf"");
		setTypeface(font, Typeface.NORMAL);
	}
}</pre>
<ol start=""5"">
<li>Now change the following in your android layout xml file</li>
</ol>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:background=""#0F0F0F""&gt;

    &lt;com.javatechig.droid.ui.CustomTextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/font_sample_text""
        android:textSize=""18dp""
        android:textColor=""#AAD4DE"" /&gt;

    &lt;com.javatechig.droid.ui.CustomTextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/font_sample_text""
        android:textColor=""#FFDE46""
        android:textSize=""24dp""/&gt;

    &lt;com.javatechig.droid.ui.CustomTextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/font_sample_text""
        android:textSize=""30dp""
        android:textColor=""#7FBA00""/&gt;
&lt;/LinearLayout&gt;
</pre>
<p>Here is the output of the above code</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter wp-image-1107"" height=""498"" loading=""lazy"" src=""/media/uploads/articles/411/custom-font-android.png"" srcset="""" title=""Android Custom Font example"" width=""431""/></a></p>
[download src=”https://github.com/javatechig/Android-UI-Tutorials/tree/master/AndroidCustomFont”]
",0,"standard","post"
"Handler and AsyncTask in Android","handler-and-asynctask-in-android","Handler and AsyncTasks are way to implement multithreading in android with UI/Event Thread. Handler is available since Android&hellip;
","LIVE","<p>Handler and AsyncTasks are way to implement multithreading in android with UI/Event Thread. Handler is available since Android API level 1 &amp; AsyncTask is available since API level 3.</p>
<h1>What is Handler?</h1>
<ol>
<li>Handler allows to add messages to the thread which creates it and It also enables you to schedule some runnable to execute at some time in future.</li>
<li>The Handler is associated with the application’s main thread. It handles and schedules messages and runnables sent from background threads to the app main thread.</li>
<li>If you are doing multiple repeated tasks, for example downloading multiple images which are to be displayed in ImageViews (like downloading thumbnails) upon download, use a task queue with Handler.</li>
<li>There are two main uses for a Handler. First is to schedule messages and runnables to be executed as some point in the future; and second Is to enqueue an action to be performed on a different thread than your own.</li>
<li>Scheduling messages is accomplished with the the methods like <code>post(Runnable)</code>, <code>postAtTime(Runnable, long)</code>, <code>postDelayed(Runnable, long)</code>, <code>sendEmptyMessage(int)</code>, <code>sendMessage(Message)</code>, <code>sendMessageAtTime(Message, long)</code>, and <code>sendMessageDelayed(Message, long)</code> methods.</li>
<li>When a process is created for your application, its main thread is dedicated to running a message queue that takes care of managing the top-level application objects (activities, broadcast receivers, etc) and any windows they create.</li>
<li>You can create your own threads, and communicate back with the main application thread through a Handler.</li>
</ol>
<h1>What is AsyncTask ?</h1>
<ol>
<li>Async task enables you to implement multi threading without get hands dirty into threads. AsyncTask enables proper and easy use methods that allows performing background operations and passing the results back to the UI thread.</li>
<li>If you are doing something isolated related to UI, for example downloading data to present in a list, go ahead and use <code>AsyncTask</code>.</li>
<li>AsyncTasks should ideally be used for short operations (a few seconds at the most.)</li>
<li>An asynchronous task is defined by 3 generic types, called Params, Progress and Result, and 4 steps, called onPreExecute, doInBackground, onProgressUpdate and onPostExecute.</li>
<li>In onPreExecute you can define code, which need to be executed before background processing starts.</li>
<li><code>doInBackground</code> have code which needs to be executed in background, here in doInBackground we can send results to multiple times to event thread by <code>publishProgress()</code> method, to notify background processing has been completed we can return results simply.</li>
<li><code>onProgressUpdate()</code> method receives progress updates from doInBackground method, which is published via publishProgress method, and this method can use this progress update to update event thread</li>
<li><code>onPostExecute()</code> method handles results returned by doInBackground</li>
<li>The generic types used are
<ul>
<li><code>Params</code>, the type of the parameters sent to the task upon execution,</li>
<li><code>Progress</code>, the type of the progress units published during the background computation.</li>
<li><code>Result</code>, the type of the result of the background computation.</li>
</ul>
</li>
<li>If an async task not using any types, then it can be marked as Void type.</li>
<li>An running async task can be cancelled by calling cancel(boolean) method.</li>
</ol>
",0,"standard","post"
"How to Get Key Hashes for Android App Facebook Integration","how-to-get-key-hashes-for-android-facebook-app","This section of the tutorial explains you how to get Key Hashes for Android Facebook app. Facebook SDK integration&hellip;","LIVE","<p>This section of the tutorial explains you how to get Key Hashes for Android Facebook app. Facebook SDK integration to android require an key hash configuration.</p>
<p>While integrating Facebook SDK, we need to configure Facebook API console with Key Hash. If key hash is missing you will get <code>App mis-configured</code> error in Facebook dashboard.</p>
<p>Download the <code>facebook-android-sdk</code> and configured a new app. In the application settings enable “Native android app” and enable for Facebook login and deep linking. It asks for key hashes, and I’m stuck. After spending a generous amount of time, I have found two solutions to get the key hashes.</p>
<p><a href=""http://stacktips.com"" target=""_self""></a></p>
<h2 class="""">Using OpenSSL and command</h2>
<ul>
<li>Download openssl from Google code (If you have a 64 bit machine you must download openssl-0.9.8e X64 not the latest version)</li>
<li>Extract it. Create a folder- OpenSSL in C: / and copy all files here</li>
<li>Find “debug.keystore” file path. Most likely it will be inside “C:\Users\.android” folder. However, if you still don’t find then perform a search. I am sure you are lucky enough to get it.</li>
<li>Find keytool.exe path. It will be inside your java/bin directory. In my system it is under “C:\Program Files\Java\jdk1.6.0_30\bin”</li>
<li>Open command prompt (Run-&gt; cmd-&gt;start) and go to java /bin folder (cd “C:\Program Files\Java\jdk1.6.0_30\bin” command will do it for you)</li>
<li>Now you run the below command.</li>
</ul>
<pre>C:\Program Files\Java\jdk1.6.0_30\bin&gt;keytool -exportcert -alias androiddebugkey -keystore ""C:\Users\.android\debug.keystore"" | ""C:\OpenSSL\bin\openssl"" sha1 -binary |""C:\OpenSSL\bin\openssl"" base64
</pre>
<ul>
<li>Provide password (android), as when you are prompted. You are done. It will generate you the key-hash</li>
</ul>
<p><a href=""http://stacktips.com"" target=""_self""></a></p>
<h2 class="""">Using a method call from Android</h2>
<p>Using below code snippet, you can get the hash code.</p>
<pre class=""prettyprint lang-java"">public static String printKeyHash(Activity context) {
	PackageInfo packageInfo;
	String key = null;
	try {
		//getting application package name, as defined in manifest
		String packageName = context.getApplicationContext().getPackageName();

		//Retriving package info
		packageInfo = context.getPackageManager().getPackageInfo(packageName,
				PackageManager.GET_SIGNATURES);
			
		Log.e(""Package Name="", context.getApplicationContext().getPackageName());
		
		for (Signature signature : packageInfo.signatures) {
			MessageDigest md = MessageDigest.getInstance(""SHA"");
			md.update(signature.toByteArray());
			key = new String(Base64.encode(md.digest(), 0));
		
			// String key = new String(Base64.encodeBytes(md.digest()));
			Log.e(""Key Hash="", key);
		}
	} catch (NameNotFoundException e1) {
		Log.e(""Name not found"", e1.toString());
	}
	catch (NoSuchAlgorithmException e) {
		Log.e(""No such an algorithm"", e.toString());
	} catch (Exception e) {
		Log.e(""Exception"", e.toString());
	}

	return key;
}</pre>
<p>You may use any of the above methods to generate the key hash for your facebook app.</p>",0,"standard","post"
"Image Picker Using Intent.ACTION_PICK in Android","writing-image-picker-using-intent-in-android","Android supports seamless integration of applications and content providers. Lot many things are handy provided to developers, which&hellip;
","LIVE","<p>Android supports seamless integration of applications and content providers. Lot many things are handy provided to developers, which helps in reducing the code and consumes less time to integrate different features to app.</p>
<p>For example, if we have an application that allow user to change his profile picture. In this requirement user will be welling to browse his mobile gallery and pick a picture of his own to set his profile picture. Integrating this feature in traditional operating system, need lot of effort write code to integrate file browser. But in android we can use <code>Intent.ACTION_PICK</code> action to get this feature integrated in not more than five minutes.</p>
<h1>What is intent in android?</h1>
<p>Intent is an abstract description of an operation to be performed. It can be used with <code>startActivity</code> to launch an Activity, broadcastIntent to send it to any interested BroadcastReceiver components, and <code>startService(Intent)</code> or <code>bindService(Intent, ServiceConnection, int)</code> to communicate with a background Service.</p>
<p>Intent provides a facility for performing late run-time binding between the codes in different applications. Its most significant use is in the launching of activities, where it can be thought of as the glue between activities. It is basically a passive data structure holding an abstract description of an action to be performed.</p>
<h1>Writing image picker using Intent.ACTION_PICK in android</h1>
<p><code>Intent.ACTION_PICK</code> action is in buit in android and helps to pick an image item from a data source. We just need to provide the URI of the provider. Almost all core android applications (eg. Messaging, Gallery, Contacts etc) provide this facility. All you need is to set the intent action and the data.</p>
<p><strong>action</strong> – tells what to perform, such as <code>ACTION_VIEW</code>, <code>ACTION_EDIT</code>, <code>ACTION_MAIN</code>, etc.<br/>
<strong>data</strong>– data needed to operate the action. It is expressed as uri. Example such as a person record in the contacts database. Some examples of action/data pairs are:</p>
<p>ACTION_VIEW content://contacts/people/1 — Display information about the person whose identifier is “1”.<br/>
ACTION_DIAL content://contacts/people/1 — Display the phone dialer with the person filled in.<br/>
ACTION_VIEW tel:123 — Display the phone dialer with the given number filled in. Note how the VIEW action does what what is considered the most reasonable thing for a particular URI.<br/>
ACTION_DIAL tel:123 — Display the phone dialer with the given number filled in.</p>
<p>There are also some more additional attributes. Visit the below llink for more details</p>
<p><strong><a href=""http://developer.android.com/reference/android/content/Intent.html"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""developer.android.com"">http://developer.android.com/reference/android/content/Intent.html</a></strong></p>
<h2>Creating layout Code Snippet</h2>
<p>As you can see in the screenshot below, my example is using simple LinearLayout with a ImageView and a button aligned to vertical orientation. You may have some complex layout as per your needs.</p>
<pre escaped=""true"" lang=""xml"" line=""1"">
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical""
    tools:context="".ImagePickerActivity"" &gt;

    &lt;ImageView
        android:id=""@+id/imageView""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center_horizontal""
        android:maxHeight=""200dp""
        android:src=""@drawable/ic_launcher"" /&gt;

    &lt;Button
        android:id=""@+id/btn_pick""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center""
        android:layout_marginTop=""20dp""
        android:text=""@string/change_image"" /&gt;

&lt;/LinearLayout&gt;</pre>
<h2>Activity class Code Snippet</h2>
<p>Below is my activity class using <code>Intent.ACTION_PICK</code> action</p>
<pre escaped=""true"" lang=""java"" line=""1"">
package com.javatechig.filepicker;

import java.io.FileNotFoundException;
import java.io.InputStream;
import android.net.Uri;
import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;

public class ImagePickerActivity extends Activity {

	private final int SELECT_PHOTO = 1;
	private ImageView imageView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_image_picker);

        imageView = (ImageView)findViewById(R.id.imageView);

        Button pickImage = (Button) findViewById(R.id.btn_pick);
        pickImage.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {				
				Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
				photoPickerIntent.setType(""image/*"");
				startActivityForResult(photoPickerIntent, SELECT_PHOTO);
			}
		});
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent imageReturnedIntent) { 
        super.onActivityResult(requestCode, resultCode, imageReturnedIntent); 

        switch(requestCode) { 
        case SELECT_PHOTO:
            if(resultCode == RESULT_OK){
				try {
					final Uri imageUri = imageReturnedIntent.getData();
					final InputStream imageStream = getContentResolver().openInputStream(imageUri);
					final Bitmap selectedImage = BitmapFactory.decodeStream(imageStream);
					imageView.setImageBitmap(selectedImage);
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}

            }
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        return true;
    }    
}</pre>
<p>As you can see the code snippet used is pretty simple. Here in this example, I am handling button click event and their Image picker using <code>Intent.ACTION_PICK</code> has been called. <code>setType()</code> method is used to define the file filter criteria. This will invoke the default gallery and user will be able to select an image.</p>
<p>Once image is selected, the result will be back to our main activity, and the result will be returned to <code>onActivityResult()</code> method. Here we are receiving the selected image Uri. Once we have the uri, we can convert them to <code>Bitmap</code> and then display it on <code>ImageView</code>. Below coded snippet is used to get the image from the Uri and convert into bitmap.</p>
<pre escaped=""true"" lang=""java"" line=""1"">
InputStream imageStream = getContentResolver().openInputStream(imageUri);
Bitmap selectedImage = BitmapFactory.decodeStream(imageStream);</pre>
<p>And now we are done.</p>
<h2>Output of the above code is below</h2>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""image picker example in anroid"" class=""size-full wp-image-2790 aligncenter"" height=""312"" loading=""lazy"" sizes=""(max-width: 760px) 100vw, 760px"" src=""/media/uploads/articles/416/image-picker-example-in-anroid-javatechig.png"" srcset="""" width=""760""/></a></p>
",0,"standard","post"
"What is Android Virtual Device","what-is-avd","This tutorial is intended to explain the Android Virtual Device(AVD). An Android Virtual Device (AVD) is an emulator&hellip;","LIVE","<p><span>An Android Virtual Device (AVD) is an emulator configuration that allows developers to test the application by simulating the real device capabilities. We can configure the AVD by specifying the hardware and software options. AVD manager enables an easy way of creating and managing the AVD with its graphical interface. We can create as many AVDs as we need, based on the types of device we want to test for. Below are the steps to create an AVD from AVD manager graphical interface</span><br/></p>
<ol>
<li>Go to Window -&gt;AVD Manager and select Virtual Devices.</li>
<li>Click on New to create a Virtual Device, give it some Name and select Target Android Platform from the drop down list</li>
<li>Click “Create AVD” and we are done!</li>
</ol>
<p><img src=""https://media.stacktips.com/media/uploads/summernote/create-avd-in-android-218x300.png""/> <a href=""http://stacktips.com"" target=""_self""></a></p>
<p>Note: API Levels generally mean that as a programmer, you can communicate with the devices’ built in functions and functionality. Choosing an API level for an application development should take at least two things into account:</p>
<ol>
<li>Current distribution – How many devices can actually support my application, if it was developed for API level 9, it cannot run on API level 8 and below, then “only” around 60% of devices can run it (true to the date this post was made).</li>
<li>Choosing a lower API level may support more devices but gain less functionality for your app. you may also work harder to achieve features you could’ve easily gained if you chose higher API level.</li>
</ol>
<h2>Mocking location data</h2>
<p>As you develop your application, you’ll certainly need to test how well your model for obtaining user location works. This is most easily done using a real Android-powered device. However, if you don’t have a device, you can still test your location-based features by mocking location data in the Android emulator.</p>
<p>Select Window &gt; Show View &gt; Other &gt; Emulator Control.</p>
<p>In the Emulator Control panel, enter GPS coordinates under Location Controls as individual latitude and longitude coordinates, with a GPX file for route playback, or a KML file for multiple place marks. (Be sure that you have a device selected in the Devices panel—available from Window &gt; Show View &gt; Other &gt; Devices.)</p><p><img src=""https://media.stacktips.com/media/uploads/summernote/test-gps-in-emulator.png""/><br/></p>
<p></p>
<p>Note: Providing mock location data is injected as GPS location data, so you must request location updates from GPS_PROVIDER in order for mock location data to work.</p>
<p> </p>",0,"standard","post"
"Different Way to Handle Events in Android","different-way-to-handle-events-in-android","Typically events do responds to user interactions. Android platform supports multiple ways to handle the events on View’s.&hellip;
","LIVE","<p>Typically events do responds to user interactions. Android platform supports multiple ways to handle the events on View’s. When user clicks on an Android View, some method is getting called by the android framework and then passed the control to the application listeners.</p>
<p>For example, when a user clicks on a view such as a Button, the <code>onTouchEvent()</code> method is called on that Button object. In order to make our application to responds to the event we must extend the class and override the method. But extending every View object in order to handle such an event would not be practical. Each View classes in Android provide collection of nested interfaces called listeners with callbacks that you can much more easily define in order to handle event.</p>
<h1>1. Anonymus click listener</h1>
<pre class=""prettyprint lang-java"">button.setOnClickListener(new OnClickListener(){
    @Override
    public void onClick(View v) {
        //do stuff
    }
});</pre>
<p>This way will create anonymous classes as much as you create buttons. This is recommended only if you have fewer listener in your class. But if we have a complex screen layout with many view’s then writing a listener programmatically for each view will make the code messy. Its less readable and costly</p>
<h1>2. Using android:OnClick layout attribute</h1>
<pre class=""prettyprint lang-java"">&lt;Button android:id=""@+id/btnView""
    ...............
    ...............
    android:OnClick=""btnViewOnClick""/&gt;</pre>
<p>Many people use this way of handling the click events by writing <code>OnClick</code> attribute in XML. But, usually it is not preferable as I because better to keep listeners inside code. Internally android is using java reflection concept behind the scene to handle this. It is less readable, and confuses other developers.</p>
<h1>3. Using OnClickListener interface on the Activity</h1>
<pre class=""prettyprint lang-java"">public class MainActivity extends Activity implements OnClickListener{
    @Override
    public void onClick(View v) {
        //do stuff
    }

    protected void onCreate(Bundle savedInstanceState) {
        ...
        button.setOnClickListener(this);
    }
}</pre>
<p>Here we are implementing the <code>OnClickListener</code> interface on the Activity class and passing a self reference to the Button. This way the onclick listener will hold the reference to the activity object, and so it is a heavy operation to keep the whole activity’s object in it.</p>
<p>This way we can handle the click event for all views. However, we need to differentiate view’s using their id’s. We can use <code>view.getId()</code> method to see which button was clicked. Again, this is preferable only when we have fewer views to handle. This way all the click event handling codes are done at one place.</p>
<p>This way is hard to navigate through, because you can’t determine the type of the listener you are using with current button (I know eclipse will highlight the methods this are pointing at, but with huge code I think it will be hard to find).</p>
<h1>4. Creating the OnClickListener field</h1>
<pre class=""prettyprint lang-java"">private OnClickListener onClickHandler = new OnClickListener(){

    @Override
    public void onClick(View v) {
        //stuff
    }
};

protected void onCreate(Bundle savedInstanceState) {
    ...
    button.setOnClickListener(onClickHandler);
}</pre>
<p>The best practice is the create a local variable with the <code>OnClickListener</code> type. This way it is easy to navigate and more readable. But it doesn’t stop you to implement the other three options provided above. Just that every one has different way of looking at the problem.</p>
",0,"standard","post"
"Homescreen App Widgets Example in Android","app-widgets-example-in-android","In this example we will learn about creating a simple 4&#215;2 home screen App widget using an App&hellip;
","LIVE","

In this example we will learn about creating a simple 4×2 home screen App widget using an App Widget provider. It shall show two text view and a button. and clicking on the button will change the widget text contents.
<h2><span id=""1_Introduction"">1. Introduction</span></h2>
<p>App widget is a simple way to enhance your application by having a view on android HomeScreen. This helps to inform user about some important update about the application also this is help user to use the application over and often.  App Widgets I available since API Level 3 (Android 1.5). To create an App Widget we need the following classes.</p>
<h2><span id=""2_Creating_View_layout_for_Widget"">2. Creating View layout for Widget</span></h2>
<p>Widget layout can be defined in XML and can be saved in project’s res/layout/ directory. Currently App Widget layouts are based on RemoteViews and android currently supports limited View widget. Creating layout for the widget is same as creating the layout for other activity type. But to make a good widget we need to follow the android widget guidelines.</p>
<p>A RemoteViews object or App Widget currently supports the following layout classes</p>
<ul>
<li>FrameLayout</li>
<li>LinearLayout</li>
<li>RelativeLayout</li>
<li>GridLayout</li>
</ul>
<p>Supported widget classes are</p>
<ul>
<li>AnalogClock</li>
<li>Button</li>
<li>Chronometer</li>
<li>ImageButton</li>
<li>ImageView</li>
<li>ProgressBar</li>
<li>TextView</li>
<li>ViewFlipper</li>
<li>ListView</li>
<li>GridView</li>
<li>StackView</li>
<li>AdapterViewFlipper</li>
</ul>
<p>For our example we will take a simple layout with two TextField and a button. Pressing on the button it will change the content on the widget. below is my widget-layout</p>
<pre class=""prettyprint lang-xml"">
&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:layout_margin=""5sp""
    android:background=""@drawable/appwidget_dark_bg""
    android:orientation=""vertical"" &gt;

    &lt;RelativeLayout
        android:id=""@+id/buttonContainer""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_alignParentBottom=""true"" &gt;

        &lt;Button
            android:id=""@+id/sync_button""
            android:layout_width=""30dp""
            android:layout_height=""30dp""
            android:layout_centerInParent=""true""
            android:background=""@drawable/ic_sync_button""
            android:text="""" /&gt;
    &lt;/RelativeLayout&gt;

    &lt;LinearLayout
        android:id=""@+id/contentContainer""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:layout_above=""@id/buttonContainer""
        android:layout_alignParentTop=""true""
        android:orientation=""vertical""
        android:padding=""8dp"" &gt;

        &lt;TextView
            android:id=""@+id/title""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:maxLines=""2""
            android:paddingBottom=""5dp""
            android:text=""""
            android:textColor=""#fcfcfc""
            android:textSize=""16sp""
            android:textStyle=""bold"" /&gt;

        &lt;TextView
            android:id=""@+id/desc""
            android:layout_width=""fill_parent""
            android:layout_height=""wrap_content""
            android:maxLines=""5""
            android:text=""""
            android:textColor=""#fcfcfc""
            android:textSize=""13sp""
            android:textStyle=""normal"" /&gt;
    &lt;/LinearLayout&gt;

&lt;/RelativeLayout&gt;</pre>
<h2><span id=""3_Creating_AppWidgetProviderInfo_in_XML"">3. Creating AppWidgetProviderInfo in XML</span></h2>
<p>This is used to describe the metadata for an App Widget, such as the App Widget’s layout, update frequency, and the AppWidgetProvider class. This is always defined as XML file.</p>
<p>Below is my AppWidgetProvider xml configuration file</p>
<pre class=""prettyprint lang-xml"">
&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;appwidget-provider xmlns:android=""http://schemas.android.com/apk/res/android""
    android:initialLayout=""@layout/widget_layout""
    android:minHeight=""146dp""
    android:minWidth=""292dp""
    android:previewImage=""@drawable/widget""
    android:updatePeriodMillis=""1000000"" &gt;
&lt;/appwidget-provider&gt;</pre>
<p>The minWidth and minHeight attribute is used to specify the minimum amount of space the App Widget consumes by default. The default Home screen positions App Widgets in its window based on a grid of cells that have a defined height and width. If the values for an App Widget’s minimum width or height don’t match the dimensions of the cells, then the App Widget dimensions round up to the nearest cell size.</p>
<p>To make your app widget portable across devices, your app widget’s minimum size should never be larger than 4 x 4 cells. Check out the below link for the App Widget Design Guidelines</p>
<p><a href=""http://developer.android.com/guide/practices/ui_guidelines/widget_design.html"" rel=""nofollow noopener noreferrer"" target=""_blank"" title=""Android App Widget Design Guidelines"">http://developer.android.com/guide/practices/ui_guidelines/widget_design.html</a></p>
<p>The updatePeriodMillis attribute defines the update timer for the App Widget framework. It calls AppWidgetProvider by calling the onUpdate() callback method. This update timer is not guaranteed to refresh exactly on the same time.<br/>
Note: The lesser the refresh timer, consumes more battery. It is better to always provide user an option to select the refresh timer frequency.</p>
<p>The initialLayout attribute points to the layout resource that defines the App Widget layout.</p>
<h3><span id=""31_Setting_preview_image_to_Android_App_Widget"">3.1 Setting preview image to Android App Widget</span></h3>
<p>You can set a preview image to specify what the app widget will look like on the widgets list screen. This help users to know about the widget while configuration. This is optional configuration, if not provided then the application icon will be displayed as default widget preview image.</p>
<p><span style=""color: #ff0000;""><strong>Note: This attribute is introduced from Android 3.0</strong></span></p>
<p>You can set the preview image using the following code</p>
<pre class=""prettyprint lang-xml"">
&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;appwidget-provider xmlns:android=""http://schemas.android.com/apk/res/android""
    ...................
    ...................
    android:previewImage=""@drawable/widget""
&lt;/appwidget-provider&gt;</pre>
<h3><span id=""32_How_to_make_Android_App_Widget_re_sizable"">3.2 How to make Android App Widget re sizable</span></h3>
<p>The resizeMode attribute is used to specify whether the widget can be resizable on the home screen. Android home screen widget can be resized horizontally, vertically, or on both axes. We can resize a widget by touch-holding a widget on home screen. resizeMode attribute can be configured to either “horizontal”, “vertical”, and “none”. We can also define a widget resizable to both directions by specifying “horizontal|vertical”.</p>
<p><span style=""color: #ff0000;""><strong>Note: This attribute is introduced from Android 3.1</strong></span></p>
<h2><span id=""4_Implementing_AppWidgetProvider_class"">4. Implementing AppWidgetProvider class</span></h2>
<p>Now we need to add a class extending AppWidgetProvider which will be used to control the behavior of the widget. The onUpdate() call back method is used to change the text view text at runtime. This class is used to interface with the App Widget, based on broadcast events. Using AppWidgetProvider we can receive broadcast events while the App Widget state has been updated, enabled, disabled or deleted.</p>
<pre class=""prettyprint lang-java"">
package com.javatechig.widgetdemo;

import android.app.PendingIntent;
import android.appwidget.AppWidgetManager;
import android.appwidget.AppWidgetProvider;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.widget.RemoteViews;

public class MyWidgetProvider extends AppWidgetProvider {
	@Override
	public void onUpdate(Context context, AppWidgetManager appWidgetManager,
			int[] appWidgetIds) {

		// initializing widget layout
		RemoteViews remoteViews = new RemoteViews(context.getPackageName(),
				R.layout.widget_layout);

		// register for button event
		remoteViews.setOnClickPendingIntent(R.id.sync_button,
				buildButtonPendingIntent(context));

		// updating view with initial data
		remoteViews.setTextViewText(R.id.title, getTitle());
		remoteViews.setTextViewText(R.id.desc, getDesc());

		// request for widget update
		pushWidgetUpdate(context, remoteViews);
	}

	public static PendingIntent buildButtonPendingIntent(Context context) {
		++MyWidgetIntentReceiver.clickCount;

		// initiate widget update request
		Intent intent = new Intent();
		intent.setAction(WidgetUtils.WIDGET_UPDATE_ACTION);
		return PendingIntent.getBroadcast(context, 0, intent,
				PendingIntent.FLAG_UPDATE_CURRENT);
	}

	private static CharSequence getDesc() {
		return ""Sync to see some of our funniest joke collections"";
	}

	private static CharSequence getTitle() {
		return ""Funny Jokes"";
	}

	public static void pushWidgetUpdate(Context context, RemoteViews remoteViews) {
		ComponentName myWidget = new ComponentName(context,
				MyWidgetProvider.class);
		AppWidgetManager manager = AppWidgetManager.getInstance(context);
		manager.updateAppWidget(myWidget, remoteViews);
	}
}</pre>
<h2><span id=""5_Writing_BroadcastReceiver_for_your_widget"">5. Writing BroadcastReceiver for your widget</span></h2>
<p>Now, we will write a BroadcastReciever to perform action on the button click. This implementation is pretty straight forward. The onReceive() method is requesting the app widget provider for updating the widget.</p>
<pre class=""prettyprint lang-java"">
package com.javatechig.widgetdemo;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.widget.RemoteViews;

public class MyWidgetIntentReceiver extends BroadcastReceiver {
	public static int clickCount = 0;
	private String msg[] = null;

	@Override
	public void onReceive(Context context, Intent intent) {
		if (intent.getAction().equals(WidgetUtils.WIDGET_UPDATE_ACTION)) {
			updateWidgetPictureAndButtonListener(context);
		}
	}

	private void updateWidgetPictureAndButtonListener(Context context) {
		RemoteViews remoteViews = new RemoteViews(context.getPackageName(),
				R.layout.widget_layout);

		// updating view
		remoteViews.setTextViewText(R.id.title, getTitle());
		remoteViews.setTextViewText(R.id.desc, getDesc(context));

		// re-registering for click listener
		remoteViews.setOnClickPendingIntent(R.id.sync_button,
				MyWidgetProvider.buildButtonPendingIntent(context));

		MyWidgetProvider.pushWidgetUpdate(context.getApplicationContext(),
				remoteViews);
	}

	private String getDesc(Context context) {
		// some static jokes from xml
		msg = context.getResources().getStringArray(R.array.news_headlines);
		if (clickCount &gt;= msg.length) {
			clickCount = 0;
		}
		return msg[clickCount];
	}

	private String getTitle() {
		return ""Funny Jokes"";
	}
}</pre>
<h2><span id=""6_Registering_receiver_in_in_Android_Manifest"">6. Registering receiver in in Android Manifest</span></h2>
<p>Finally, we need to register the app widget in your application Manifest file. To do this, you will use the tag. This block of XML should be placed inside the application tag in application Manifest.</p>
<pre class=""prettyprint lang-xml"">
&lt;receiver android:name="".MyWidgetProvider"" &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""android.appwidget.action.APPWIDGET_UPDATE"" /&gt;
            &lt;/intent-filter&gt;

            &lt;meta-data
                android:name=""android.appwidget.provider""
                android:resource=""@xml/demo_widget_provider"" /&gt;
        &lt;/receiver&gt;

        &lt;receiver
            android:name="".MyWidgetIntentReceiver""
            android:label=""@string/app_name"" &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""com.javatechig.intent.action.UPDATE_WIDGET"" /&gt;
            &lt;/intent-filter&gt;

            &lt;meta-data
                android:name=""android.appwidget.provider""
                android:resource=""@xml/demo_widget_provider"" /&gt;
        &lt;/receiver&gt;</pre>
<p>Note that the receiver name is the name of your app widget provider class implementation. We add an intent filter for the UPDATE_WIDGET event such that your widget will update at regular intervals.</p>
<h2><span id=""7_Working_Demo"">7. Working Demo</span></h2>
<p>Now we have an app widget! From the Home screen, press and hold an empty space to get list if widgets instlled, then choose “WidgetDemo” from the list. The app widget will then be added to your Home screen. You can watch a live video of the tutorial below</p>
<p><iframe allowfullscreen=""allowfullscreen"" frameborder=""0"" height=""315"" loading=""lazy"" src=""//www.youtube.com/embed/AguqhQHHrcs"" width=""420""></iframe></p>
<h2><span id=""8_Download_Complete_Source_Code"">8. Download Complete Source Code</span></h2>
<p><a href=""https://github.com/javatechig/Advance-Android-Tutorials/tree/master/WidgetDemo"" rel=""nofollow noopener noreferrer"" target=""_blank""><img alt=""dl_github"" class=""aligncenter size-full wp-image-4240"" height=""50"" loading=""lazy"" src=""/media/uploads/articles/419/dl_github.png"" srcset="""" width=""230""/></a></p>
<h2><span id=""9_References"">9. References</span></h2>
<p><a href=""http://developer.android.com/guide/topics/appwidgets/index.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://developer.android.com/guide/topics/appwidgets/index.html</a><br/>
<a href=""http://developer.android.com/guide/practices/ui_guidelines/widget_design.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://developer.android.com/guide/practices/ui_guidelines/widget_design.html</a></p>
",0,"standard","post"
"JSON Feed Reader in Android","json-feed-reader-in-android","In the course of this tutorial, we will take step by step look into building a JSON feed&hellip;
","LIVE","
<p>In the course of this tutorial, we will take step by step look into building a JSON feed reader in Android. All the source code used in this example, are open source. You may grab a copy of the project source code from the download link provided.</p>
<p>This app will fetch the recent posts from stacktips.com and display list of posts along with post title, thumbnail, description on screen. You can also view details of each feed, share the article and can view the article on original website using Android <code>WebView</code>.</p>
<h4><span id=""JSON_Feed_URL"">JSON Feed URL</span></h4>
<pre><a href=""http://stacktips.com/api/get_category_posts/?dev=1&amp;slug=android"" target=""_blank"">http://stacktips.com/api/get_category_posts/?dev=1&amp;slug=android</a></pre>
<p>You will learn following things in this article.</p>
<ul>
<li>Designing User Interface</li>
<li>Using AsyncTask to Download Data From Remote Server</li>
<li>JSON Parsing In Android</li>
<li>Downloading Image Asynchronously and Displaying In Android ListView</li>
<li>Using Share Intent to Share Article in Android</li>
<li>Loading Original Feed Link on Android WebView</li>
</ul>
<h1><span id=""1_Designing_User_Interface"">1. Designing User Interface</span></h1>
<p>Here in this example, we are using three Activities. While first Activity is used to list out all feed items on a ListView, Second one is used to show the image preview and the description of each feed. Another Activity is used to view the original feed item on a WebView.</p>
<p>Below are the listed three activity classes</p>
<ul>
<li>com.javatechig.feedreader.FeedDetailsActivity</li>
<li>com.javatechig.feedreader.FeedListActivity</li>
<li>com.javatechig.feedreader.WebViewActivity</li>
</ul>
<p>In this tutorial, I assume you already have knowledge of creating basic user interfaces. We will be creating the layouts as shown in the images below.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""json-feed-reader-android-featured-715x300"" class=""aligncenter size-full wp-image-2557"" height=""299"" loading=""lazy"" sizes=""(max-width: 715px) 100vw, 715px"" src=""/media/uploads/articles/420/json-feed-reader-android-featured-715x300.png"" srcset="""" width=""715""/></a></p>
<p>On landing page of my example, It uses a ListView which can display thumbnail image, title and date published, so here we need to create a custom ListView. If you are not proficient on creating such custom ListView, then you may visit my previous post on Android ListView Tutorial.</p>
<p>For simplicity sake, our previous ListView Tutorial was using static data for list. But in this example, I am fetching the data from <a href=""http://stacktips.com/"" title=""JavatechIG"">JavatechIG</a> feed server and then displaying on list view. During fetching data from server it will display a loading ProgressBar on screen and disappears once the list items are downloaded. Let’s start getting our the code to build the user interface set up.</p>
<h4><span id=""activity_post_listxml"">activity_post_list.xml</span></h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;FrameLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical"" &gt;

    &lt;ProgressBar
        android:id=""@+id/progressBar""
        style=""?android:attr/progressBarStyleLarge""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_gravity=""center"" /&gt;

    &lt;ListView
        android:id=""@+id/custom_list""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""
        android:cacheColorHint=""#00000000""
        android:dividerHeight=""1dp""
        android:focusable=""false""
        android:listSelector=""@drawable/list_selector_flatcolor""
        android:visibility=""gone"" /&gt;

&lt;/FrameLayout&gt;</pre>
<p>In the above xml code, we are using FrameLayout. We will be displaying either of the UI widgets. During loading we will display ProgressBar and then we will display ListView after feed data is downloaded.</p>
<h4><span id=""list_row_layoutxml"">list_row_layout.xml</span></h4>
<p>This layout will be used for ListView row. Each Row is an RelativeLayout with an ImageView and two TextViews placed adjacent to ImageView.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:minHeight=""50dp""
    android:orientation=""horizontal"" &gt;

    &lt;ImageView
        android:id=""@+id/thumbImage""
        android:layout_width=""70dp""
        android:layout_height=""70dp""
        android:layout_alignParentLeft=""true""
        android:layout_centerVertical=""true""
        android:background=""@drawable/list_placeholder"" /&gt;

    &lt;TextView
        android:id=""@+id/title""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_toRightOf=""@id/thumbImage""
        android:lineSpacingExtra=""3dp""
        android:paddingLeft=""5dp""
        android:paddingTop=""5dp""
        android:text=""""
        android:textColor=""@drawable/list_item_text_selector""
        android:textStyle=""bold""
        android:typeface=""sans"" /&gt;

    &lt;TextView
        android:id=""@+id/date""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_below=""@+id/title""
        android:layout_toRightOf=""@id/thumbImage""
        android:paddingLeft=""5dp""
        android:paddingTop=""5dp""
        android:text=""""
        android:textColor=""@drawable/list_item_text_selector""
        android:textSize=""11sp"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<p>In the above code, I have used “list_item_text_selector” for changing the TextView color while list row is pressed.</p>
<h4><span id=""list_item_text_selectorxml"">list_item_text_selector.xml</span></h4>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;selector xmlns:android=""http://schemas.android.com/apk/res/android""&gt;
    &lt;item android:state_pressed=""true"" 
        android:color=""@color/text_color_inverse"" /&gt;
    &lt;item android:state_focused=""true"" 
        android:color=""@color/text_color_inverse"" /&gt;
    &lt;item android:color=""@color/text_color_default"" /&gt;
&lt;/selector&gt;</pre>
<p>We are ready with the layout for FeedList Screen. Now lets create a custom Adapter.</p>
<h4><span id=""CustomListAdapterjava"">CustomListAdapter.java</span></h4>
<pre class=""prettyprint lang-java"">public class CustomListAdapter extends BaseAdapter {
	private ArrayList listData;
	private LayoutInflater layoutInflater;
	private Context mContext;

	public CustomListAdapter(Context context, ArrayList listData) {
		this.listData = listData;
		layoutInflater = LayoutInflater.from(context);
		mContext = context;
	}

	@Override
	public int getCount() {
		return listData.size();
	}

	@Override
	public Object getItem(int position) {
		return listData.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	public View getView(int position, View convertView, ViewGroup parent) {
		ViewHolder holder;
		if (convertView == null) {
			convertView = layoutInflater.inflate(R.layout.list_row_layout, null);
			holder = new ViewHolder();
			holder.headlineView = (TextView) convertView.findViewById(R.id.title);
			holder.reportedDateView = (TextView) convertView.findViewById(R.id.date);
			holder.imageView = (ImageView) convertView.findViewById(R.id.thumbImage);
			convertView.setTag(holder);
		} else {
			holder = (ViewHolder) convertView.getTag();
		}

		FeedItem newsItem = (FeedItem) listData.get(position);
		holder.headlineView.setText(newsItem.getTitle());
		holder.reportedDateView.setText(newsItem.getDate());

		if (holder.imageView != null) {
			new ImageDownloaderTask(holder.imageView).execute(newsItem.getAttachmentUrl());
		}

		return convertView;
	}

	static class ViewHolder {
		TextView headlineView;
		TextView reportedDateView;
		ImageView imageView;
	}
}</pre>
<p>Now you must be getting some compilation error for FeedItem. FeedItem is an model class used for reading feeds. It has the following fields with public getter and setter methods.</p>
<h4><span id=""FeedItemjava"">FeedItem.java</span></h4>
<pre class=""prettyprint lang-java"">public class FeedItem implements Serializable {
	private String title;
	private String date;
	private String attachmentUrl;
	private String id;
	private String content;
	private String url;
}</pre>
<p>Now, we are ready for the first screen layout. Let’s move on to the FeedDetailsActivity layout. In this screen we have thumbnail image, title and the content to be displayed. Below is the layout code snippet.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""#ffffff""
    android:orientation=""vertical"" &gt;

    &lt;RelativeLayout
        android:layout_width=""fill_parent""
        android:layout_height=""200dp"" &gt;

        &lt;ImageView
            android:id=""@+id/featuredImg""
            android:layout_width=""fill_parent""
            android:layout_height=""fill_parent"" &gt;
        &lt;/ImageView&gt;

        &lt;TextView
            android:id=""@+id/title""
            android:layout_width=""fill_parent""
            android:layout_height=""100dp""
            android:layout_alignParentBottom=""true""
            android:background=""@drawable/image_border""
            android:ellipsize=""end""
            android:gravity=""bottom""
            android:lineSpacingExtra=""3dp""
            android:maxLines=""2""
            android:padding=""5dp""
            android:text=""""
            android:textColor=""#00000c""
            android:textStyle=""bold"" /&gt;
    &lt;/RelativeLayout&gt;

    &lt;ScrollView
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""
        android:padding=""5dp"" &gt;

        &lt;TextView
            android:id=""@+id/content""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:text=""""
            android:textColor=""#00000c"" /&gt;
    &lt;/ScrollView&gt;

&lt;/LinearLayout&gt;</pre>
<p>In FeedDetailsActivity, we are using Android ActionBar commands.</p>
<h5><span id=""menuxml"">menu.xml</span></h5>
<pre class=""prettyprint lang-xml"">&lt;menu xmlns:android=""http://schemas.android.com/apk/res/android"" &gt;

    &lt;item
        android:id=""@+id/menu_share""
        android:icon=""@android:drawable/ic_menu_share""
        android:showAsAction=""always""
        android:title=""Share""/&gt;
    &lt;item
        android:id=""@+id/menu_view""
        android:icon=""@android:drawable/ic_menu_info_details""
        android:showAsAction=""always""
        android:title=""View""/&gt;

&lt;/menu&gt;</pre>
<p>Now we are done with all xml layouts. Let us have a look into the Activity components</p>
<h1><span id=""2_AsyncTask_to_Download_Data_from_Server"">2. AsyncTask to Download Data from Server</span></h1>
<p>AsyncTask enables you to implement MultiThreading without get Hands dirty into threads. AsyncTask enables proper and easy use of the UI thread. It allows performing background operations and passing the results on the UI thread. If we are doing something isolated related to UI, for example downloading data and prepare for a list, it is recemended to use AsyncTask.</p>
<p><strong><a href=""http://stacktips.com/android/difference-between-handler-and-asynctask-in-android/"" target=""_blank"">http://stacktips.com/android/difference-between-handler-and-asynctask-in-android/</a></strong></p>
<h4><span id=""DownloadFeedTaskjava"">DownloadFeedTask.java</span></h4>
<pre class=""prettyprint lang-java"">private class DownloadFilesTask extends AsyncTask&lt;String, Integer, Void&gt; {

		@Override
		protected void onProgressUpdate(Integer... values) {
		}

		@Override
		protected void onPostExecute(Void result) {
			if (null != feedList) {
				updateList();
			}
		}

		@Override
		protected Void doInBackground(String... params) {
			String url = params[0];

			// getting JSON string from URL
			JSONObject json = getJSONFromUrl(url);

			//parsing json data
			parseJson(json);
			return null;
		}
	}</pre>
<h4><span id=""Downloading_JSON_from_server"">Downloading JSON from server</span></h4>
<p>As downloading of feed data from JavatechIG is a long running task, we are doing it inside doInBackground method. Once we have the data downloaded and parsed, then we can update the ListView with appropriate updated data.</p>
<pre class=""prettyprint lang-java"">public JSONObject getJSONFromUrl(String url) {
		InputStream is = null;
		JSONObject jObj = null;
		String json = null;

		// Making HTTP request
		try {
			// defaultHttpClient
			DefaultHttpClient httpClient = new DefaultHttpClient();
			HttpPost httpPost = new HttpPost(url);

			HttpResponse httpResponse = httpClient.execute(httpPost);
			HttpEntity httpEntity = httpResponse.getEntity();
			is = httpEntity.getContent();

			BufferedReader reader = new BufferedReader(new InputStreamReader(
					is, ""iso-8859-1""), 8);
			StringBuilder sb = new StringBuilder();
			String line = null;
			while ((line = reader.readLine()) != null) {
				sb.append(line + ""\n"");
			}
			is.close();
			json = sb.toString();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			jObj = new JSONObject(json);
		} catch (JSONException e) {
			Log.e(""JSON Parser"", ""Error parsing data "" + e.toString());
		}

		// return JSON String
		return jObj;

	}</pre>
<p>The above method will download the Json feed and returned as a JSONObject. Now its the time to parse the JSON feed data</p>
<h1><span id=""3_JSON_Parsing_In_Android"">3. JSON Parsing In Android</span></h1>
<p>The aove Feed link gives the below JSON object structure.</p>
<pre class=""prettyprint lang-json"">{
   ""status"": ""ok"",
   ""count"": 10,
   ""pages"": 3,
   ""posts"": [
      {
         ""id"": 2398,
         ""type"": ""post"",
         ""slug"": ""asynchronous-image-loader-in-android-listview"",
         ""url"": ""http://stacktips.com/android/asynchronous-image-loader-in-android-listview/"",
         ""status"": ""publish"",
         ""title"": ""Asynchronous Image Loader in Android ListView"",
         ""date"": ""2013-06-01 19:31:07"",
         ""attachments"": [
            {
               ""id"": 2402,
               ""url"": ""http://stacktips.com/wp-content/uploads/2013/06/Async_ListView.png"",
               ""slug"": ""async_listview"",
               ""title"": ""Async_ListView"",
               ""description"": """",
               ""caption"": """",
               ""parent"": 2398,
               ""mime_type"": ""image/png"",
               ""images"": []
            }
         ],
         ""comment_count"": 3
      }
   ]
}</pre>
<p>From this above structure we will be needing the title, date, url and attachment url. check out the code snippet below for json parsing.</p>
<pre class=""prettyprint lang-java"">public void parseJson(JSONObject json) {
    try {

        // parsing json object
        if (json.getString(""status"").equalsIgnoreCase(""ok"")) {
            JSONArray posts = json.getJSONArray(""posts"");

            feedList = new ArrayList();

            for (int i = 0; i &lt; posts.length(); i++) {
                JSONObject post = (JSONObject) posts.getJSONObject(i);
                FeedItem item = new FeedItem();
                item.setTitle(post.getString(""title""));
                item.setDate(post.getString(""date""));
                item.setId(post.getString(""id""));
                item.setUrl(post.getString(""url""));
                item.setContent(post.getString(""content""));
                JSONArray attachments = post.getJSONArray(""attachments"");
                if (null != attachments &amp;&amp; attachments.length() &gt; 0) {
                    JSONObject attachment = attachments.getJSONObject(0);
                    if (attachment != null)
                    item.setAttachmentUrl(attachment.getString(""url""));
                }

                feedList.add(item);
            }
        }
        } catch (JSONException e) {
        e.printStackTrace();
    }
}</pre>
<h1><span id=""4_Downloading_Image_Asynchronously"">4. Downloading Image Asynchronously</span></h1>
<p>A good practice to bring the best performance for android application is to make sure your main thread does the minimum amount of work. Any long running tasks or heavy operations are usually performed in a different thread. Typical long running tasks could be network operations, reading files form memory, animations, etc.</p>
<p>Check out the below post for detailed implementation</p>
<p><a href=""http://stacktips.com/android/asynchronous-image-loader-in-android-listview/"" target=""_blank"">http://stacktips.com/android/asynchronous-image-loader-in-android-listview/</a></p>
<h1><span id=""5_Share_Article_in_Android"">5. Share Article in Android</span></h1>
<p>One of the best and most useful feature is sharing of information across different social networks. Android platform provides handy way of sharing contents across different application using Share Intent. It lists out all of the available application that can handle the share event. Check out the code snippet</p>
<pre class=""prettyprint lang-java"">Intent sendIntent = new Intent();
sendIntent.setAction(Intent.ACTION_SEND);
sendIntent.putExtra(Intent.EXTRA_TEXT, feed.getTitle()+""\n""+feed.getUrl());
sendIntent.setType(""text/plain"");
startActivity(Intent.createChooser(sendIntent, ""Share using""));</pre>
<p>Note: As sharing intent is taken care by platform, we don’t have control on the way and behavior of each application while sharing. For example, twitter has a limit of maximum of 140 characters for a message.</p>
<h1><span id=""6_Loading_url_on_Android_WebView"">6. Loading url on Android WebView</span></h1>
<p>We have an excellent post on using WebView in another section on our site. It will gives complete understanding on loading external URL on android WebView and different configurations.</p>
<p><a href=""http://stacktips.com/android/android-webview-example/"">http://stacktips.com/android/android-webview-example/</a></p>
<p><a href=""http://stacktips.com/android/display-html-in-android-textview/"">http://stacktips.com/android/display-html-in-android-</a></p>
<p><a href=""http://stacktips.com/android/progressbar-while-loading-webview/"" target=""_blank"">http://stacktips.com/android/progressbar-while-loading-webview/</a></p>
<h1><span id=""7_Download_Complete_Example"">7. Download Complete Example</span></h1>
<p><a href=""https://github.com/javatechig/javatechig-android-advanced/tree/master/Feed%20Reader"" rel=""nofollow noopener noreferrer"" target=""_blank""><img alt=""dl_github"" class=""aligncenter size-full wp-image-4240"" height=""50"" loading=""lazy"" src=""/media/uploads/articles/420/dl_github.png"" srcset="""" width=""230""/></a></p>
<h1><span id=""8_Working_Demo"">8. Working Demo</span></h1>
<p><center><iframe allowfullscreen=""allowfullscreen"" frameborder=""0"" height=""480"" loading=""lazy"" src=""http://www.youtube.com/embed/YTAMIK_ldhA"" width=""640""></iframe></center></p>
",0,"standard","post"
"Android TextToSpeech Example","android-texttospeech-example","Android is called one among the very advanced operating system in providing cool features out of box. It supports converting Text-To-Speech (TTS) or also known as speech synthesis. It is introduced from android 1.6, API level 4. Text-To-Speech enables your Android device to speak text of different languages.
","LIVE","<p>Android operating system provides developers some of the cool API’s such as Text to speech API. converting Text-To-Speech (TTS) or also known as “speech synthesis”. Text-To-Speech enables your Android device to speak text of different languages.</p>
<ol>
<li>It is introduced from android 1.6, API Level 4. All of the TTS API’s are available in <code>android.speech.tts.TextToSpeech</code> class.</li>
<li>TTS supports various languages like English, French, German, Italian and Spanish, etc. and some additional languages depending on the region.</li>
<li>You have to pre-configure the Text-To-Speech engine with which language to speak. The initial language configuration is important to initialize the specific voice dictionary.</li>
</ol>
<p>Following section of this tutorial will teach you the steps required to implement TTS in your Android application.</p>
<h1>TextToSpeech Example</h1>
<p>Before you go ahead implementing the Text to Speech, you must note the following points</p>
<ol>
<li>A TextToSpeech instance can only be used to synthesize text once it has completed its initialization.</li>
<li>The constructor of TextToSpeech class takes <code>TextToSpeech.OnInitListener</code> parameter. You must implement the TextToSpeech.OnInitListener to be notified, when the TTS is initialized.</li>
<li>Call <code>speak()</code> method on TextToSpeech instance for making Text to Speech to work.</li>
<li>The speak() method accepts three parameter, a String that accepts text, an integer queue mode and Bundle. The queue mode can be either <code>QUEUE_FLUSH</code> or <code>QUEUE_ADD</code>.</li>
</ol>
<p>In this example, we have an simple activity with an EditText and button, that allows user to enter text for converting into Speech. A screenshot of output is shown below</p>
<p><a href=""http://stacktips.com/android/android-example-to-convert-text-to-speech/attachment/android-texttospeech-example"" rel=""attachment wp-att-8076""><img alt=""Android TextToSpeech Example"" class=""aligncenter size-full wp-image-8076"" height=""374"" loading=""lazy"" src=""/media/uploads/articles/421/Android-TextToSpeech-Example.png"" srcset="""" width=""346""/></a></p>
<h1>Define Activity Layout</h1>
<p>As described above, for the sake of simplicity we will be creating the simple layout with an EditText and a Button.</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:layout_alignParentBottom=""true""
    android:layout_marginBottom=""10dp""
    android:orientation=""vertical""
    android:padding=""20dp"" &gt;

    &lt;EditText
        android:id=""@+id/input_text""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_marginBottom=""20dp""
        android:ems=""10""
        android:hint=""Enter your command""
        android:minLines=""2""
        android:padding=""10dp"" &gt;
        &lt;requestFocus /&gt;
    &lt;/EditText&gt;

    &lt;Button
        android:id=""@+id/speak_now""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:text=""Speak Now"" /&gt;

&lt;/LinearLayout&gt;</pre>
<h1>TextToSpeech Manager</h1>
<p>In this example, we will be crating a generic class named <code>TTSManager</code>, which will encapsulate all of the logic to implement TextToSpeech in Android. You can reuse the class and use it anywhere you like.</p>
<pre class=""prettyprint lang-java"">import android.content.Context;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import java.util.Locale;

/**
 * Created by Nilanchala
 * http://www.stacktips.com
 */
public class TTSManager {

    private TextToSpeech mTts = null;
    private boolean isLoaded = false;

    public void init(Context context) {
        try {
            mTts = new TextToSpeech(context, onInitListener);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private TextToSpeech.OnInitListener onInitListener = new TextToSpeech.OnInitListener() {
        @Override
        public void onInit(int status) {
                if (status == TextToSpeech.SUCCESS) {
                    int result = mTts.setLanguage(Locale.US);
                    isLoaded = true;

                    if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {
                        Log.e(""error"", ""This Language is not supported"");
                    }
                } else {
                    Log.e(""error"", ""Initialization Failed!"");
                }
        }
    };

    public void shutDown() {
        mTts.shutdown();
    }

    public void addQueue(String text) {
        if (isLoaded)
            mTts.speak(text, TextToSpeech.QUEUE_ADD, null);
        else
            Log.e(""error"", ""TTS Not Initialized"");
    }

    public void initQueue(String text) {

        if (isLoaded)
            mTts.speak(text, TextToSpeech.QUEUE_FLUSH, null);
        else
            Log.e(""error"", ""TTS Not Initialized"");
    }
}</pre>
<p><strong>How it works</strong></p>
<ol>
<li>To make the TTS engine to work, the basic configuration is the language that TTS will initialize. You can set the language just by calling setLanguage(locale) method.</li>
<li>Before we call <code>setLanguage()</code>, you need to check if the specified locale is supported. To query whether a specific Locale is supported, you can use <code>isLanguageAvailable()</code>, which returns the level of support for the given Locale.</li>
<li>The TTS engine manages a global queue of all the entries to synthesize, which are also known as “utterances”.</li>
<li>Each TextToSpeech instance can manage its own queue in order to control which utterance will interrupt the current one and which one is simply queued.</li>
</ol>
<h1>Making your app to speak</h1>
<pre class=""prettyprint lang-java"">import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

public class MainActivity extends Activity {
    private Button speakNowButton;
    private EditText editText;
    TTSManager ttsManager = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ttsManager = new TTSManager();
        ttsManager.init(this);

        editText = (EditText) findViewById(R.id.input_text);
        speakNowButton = (Button) findViewById(R.id.speak_now);
        speakNowButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View arg0) {
                String text = editText.getText().toString();
                ttsManager.initQueue(text);
            }
        });
    }

    /**
     * Releases the resources used by the TextToSpeech engine.
     */
    @Override
    public void onDestroy() {
        super.onDestroy();
        ttsManager.shutDown();
    }
}
</pre>
<h1>Queue multiple texts</h1>
<p>If you have multiple text to be queued for TTS engine, you may do it by calling speak() method with <code>TextToSpeech.QUEUE_ADD</code> flag.</p>
<pre class=""prettyprint lang-java"">String myText1 = ""Hi"";
String myText2 = ""Hello"";
ttsManager.initQueue(myText1);                
//adding it to queue
ttsManager.addQueue(myText2);
</pre>
<p><strong>How it works</strong></p>
<ol>
<li>Here in this example, the call to the first speak() method would interrupt whatever was currently being synthesized and the queue is flushed and the new utterance is queued, which places it at the head of the queue.</li>
<li>On the second call to speak() method, the utterance is queued and will be played after myText1 has completed.</li>
</ol>
",0,"standard","post"
"How to Generate .apk and Install to Android Device","how-to-install-android-application","This tutorial will be demonstrate, how to build android code and generate a signed APK and then install&hellip;
","LIVE","<p>This tutorial will be demonstrate, how to build android code and generate a signed APK and then install in device.</p>
<p>Application testing is one of the vital thing we do soon after development. Due to larger number of devices with different resolution, different OS versions and different capabilities, it is difficult to test the application on all supported devices. Due to this limitation, each of the vendors made application testing easy using virtual devices or so called simulators.  Android uses AVD, Android Virtual devices to test the mobile application.</p>
<h2>How to generate signed .apk in android?</h2>
<ul>
<li>Download the android Keys and place it in local folder.</li>
<li>Right Click on the Project.</li>
<li>Find Android Tools&gt;Export Signed Application Package.</li>
<li>Select the Project to Export Signed Application Package and Click Next</li>
<li>Key store Page selection appears.</li>
<li>Enable radio button of use Existing key store.</li>
<li>Browse to the local folder of the android keys.</li>
<li>Enter the appropriate key password (Same as the key password given while generating key store), Click next.</li>
<li>Select the destination folder, where you want to place your newly created .apk. And Click finish.</li>
</ul>
<h2>How to installing android application</h2>
<div>Before testing the application either in real device or simulator we need to install it. In android there are various different ways to install the android application (.apk) into simulator or device.</div>
<h3>1. Installing .apk to simulator using eclipse</h3>
<p>One way of installing android application to android emulator is using Eclipse. Once we create the avd from avd manager, we can run the application directly from the source project from eclipse. For every subsequent change or testing we don’t have to restart the AVD every time.</p>
<h3>2. Installing .apk to simulator using ADB utility</h3>
<p>If you don’t have access to Eclipse or the ADT Plugin, you can install your application on the emulator using the adb utility. Before installing the application, you need to build and package it into an .apk.</p>
<p>When the emulator is running, you can also connect to the emulator instance’s console to issue commands as needed.</p>
<pre><strong>&gt; &lt;adb install &lt;path-to-your-APK&gt;</strong></pre>
",0,"standard","post"
"Loading Image Asynchronously in Android ListView","loading-image-asynchronously-in-android-listview","In this tutorial, we will create a simple ListView in Android that downloads data  asynchronously from the internet using a AsyncTask. AsyncTask enables you to implement MultiThreading without getting your hands dirty into threads. AsyncTask is easy to use, and it allows performing background operation in dedicated thread and passing the results back UI thread.
","LIVE","<h2><span id=""1_Introduction"">1. Introduction</span></h1>
<p>As mobile devices are limited with memory, we must follow certain best practices to provide best performance and smooth user experience. Among set of best practices, the one holds priority is to take the long running heavy operations off the main thread.</p>
<p>Any long running tasks or heavy operations are usually performed in a different thread, to make sure your main thread does the minimum amount of work. Example of a typical long running tasks could be network operations, reading files form memory, animations, etc.</p>
<p>In this tutorial, we will create a simple <a href=""/articles/android-listview-tutorial"" title=""Android ListView Example"">ListView</a> in Android that downloads data  asynchronously from the internet using a AsyncTask. As you can see in the screenshot below, the ListView contains a image thumbnails on each row, we will download the images asynchronously form server.</p>
<p>If you’re looking for downloading data from asynchronously from server, we recommend you to read through <a href=""/articles/android-networking-tutorial"" title=""Android Networking Tutorial"">Android networking tutorial.</a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Async ListView Android Example"" class=""aligncenter size-full wp-image-8790"" height=""523"" loading=""lazy"" sizes=""(max-width: 900px) 100vw, 900px"" src=""/media/uploads/articles/423/Async-ListView-Android-Example.png"" srcset="""" width=""900""/></a></p>
<h2><span id=""2_What_is_Android_AsyncTask"">2. What is Android AsyncTask</span></h1>
<p>AsyncTask enables you to implement MultiThreading without getting your hands dirty into threads. AsyncTask is easy to use, and it allows performing background operation in dedicated thread and passing the results back UI thread. If you are doing something isolated related to UI, for example downloading data for List view, go ahead and use AsyncTask. Some of the basic characteristics of AsyncTask are as follows</p>
<ol>
<li>An asynchronous task is defined by 3 generic types, called <code>Params</code>, <code>Progress</code> and <code>Result</code>, and 4 steps, called <code>onPreExecute</code>, <code>doInBackground</code>, <code>onProgressUpdate</code> and <code>onPostExecute</code>.</li>
<li>In onPreExecute you can define code, which need to be executed before background processing starts.</li>
<li>The <code>doInBackground()</code> method contains the code which needs to be executed in background, here in doInBackground we can send results to multiple times to event thread by <code>publishProgress()</code> method, to notify background processing has been completed we can return results simply.</li>
<li>The <code>onProgressUpdate()</code> method receives progress updates from doInBackground method, which is published via publishProgress method, and this method can use this progress update to update event thread</li>
<li>The <code>onPostExecute()</code> method handles results returned by doInBackground method.</li>
<li>If an async task not using any types, then it can be marked as <code>Void</code> type.</li>
<li>An running async task can be cancelled by calling <code>cancel()</code> method.</li>
</ol>
<p>The generic types used by AsyncTask are</p>
<ul>
<li>Params, the type of the parameters sent to the task upon execution</li>
<li>Progress, the type of the progress units published during the background computation.</li>
<li>Result, the type of the result of the background computation.</li>
</ul>
<h2><span id=""3_Downloading_image_using_AsyncTask"">3. Downloading image using AsyncTask</span></h1>
<p>We had learnt the basics of AsyncTask. Let us take a glance at how to use it practically for downloading image asynchronously from web. To achieve this, let us create a new class and name it as <code>ImageDownloaderTask</code>.</p>
<p>The following code snippet expects the url of image as an parameter and initiate download image download request. Once download is over, it displays the bitmap on the image view.</p>
<pre class=""prettyprint lang-java"">class ImageDownloaderTask extends AsyncTask&lt;String, Void, Bitmap&gt; {
    private final WeakReference&lt;ImageView&gt; imageViewReference;

    public ImageDownloaderTask(ImageView imageView) {
        imageViewReference = new WeakReference&lt;ImageView&gt;(imageView);
    }

    @Override
    protected Bitmap doInBackground(String... params) {
        return downloadBitmap(params[0]);
    }

    @Override
    protected void onPostExecute(Bitmap bitmap) {
        if (isCancelled()) {
            bitmap = null;
        }

        if (imageViewReference != null) {
            ImageView imageView = imageViewReference.get();
            if (imageView != null) {
                if (bitmap != null) {
                    imageView.setImageBitmap(bitmap);
                } else {
                    Drawable placeholder = imageView.getContext().getResources().getDrawable(R.drawable.placeholder);
                    imageView.setImageDrawable(placeholder);
                }
            }
        }
    }
}
</pre>
<h2><span id=""4_Downloading_image_from_web"">4. Downloading image from web</span></h1>
<p>Notice that, in the above step we are calling downloadBitmap() method but haven’t declared it yet. Let us create declare the  downloadBitmap method which takes care of loading image and returning the bitmap. Here we are using HttpURLConnection to download the stream from given url. Learn more about HttpURLConnection from our <a href=""/articles/android-networking-tutorial"" title=""Android Networking Tutorial"">android networking tutorial</a>.</p>
<pre class=""prettyprint lang-java"">private Bitmap downloadBitmap(String url) {
    HttpURLConnection urlConnection = null;
    try {
        URL uri = new URL(url);
        urlConnection = (HttpURLConnection) uri.openConnection();
        int statusCode = urlConnection.getResponseCode();
        if (statusCode != HttpStatus.SC_OK) {
            return null;
        }

        InputStream inputStream = urlConnection.getInputStream();
        if (inputStream != null) {
            Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
            return bitmap;
        }
    } catch (Exception e) {
        urlConnection.disconnect();
        Log.w(""ImageDownloader"", ""Error downloading image from "" + url);
    } finally {
        if (urlConnection != null) {
            urlConnection.disconnect();
        }
    }
    return null;
}
</pre>
<h2><span id=""5Creating_custom_ListView"">5. Creating custom ListView</span></h1>
<p>Now that we understand the basics of AsyncTask, let us proceed with creating the custom list view in android. The focus of this tutorial is tried to image download. If you not familiar with creating custom list view in android, you can read our <a href=""/articles/android-listview-tutorial"" title=""Android ListView Example"">Android ListView tutorial</a>.</p>
<h3><span id=""51Adding_ListView_to_activity_layout"">5.1. Adding ListView to activity layout</span></h2>
<p>For sake of simplicity our activity layout contains a simple ListView that covers the total available width and height of the device. Create a new file <code>activity_main.xml</code> in layout directory.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;ListView xmlns:android=""http://schemas.android.com/apk/res/android""   
        android:id=""@+id/custom_list""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""&gt;
&lt;/ListView&gt;</pre>
<h3><span id=""52_Createlist_view_activity"">5.2. Create list view activity</span></h2>
<p>Let us now create a new activity class MainActivity.java in your project src directory and paste the following code. We will complete this activity in Section 3.5</p>
<pre class=""prettyprint lang-java"">public class MainActivity extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
	}
}</pre>
<h3><span id=""53_Create_list_row_layout"">5.3. Create list row layout</span></h2>
<p>Now let us focus on the layout for list view row item. As you can notice form the above screenshot, we will use <a href=""/articles/android-relativelayout-example"" title=""Android RelativeLayout Example"">RelativeLayout</a> for building a simple list row view. Crete a new file list_row_layout.xml file in layout directory and paste the following code blocks.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:minHeight=""50dp""
    android:padding=""8dp""&gt;

    &lt;ImageView
        android:id=""@+id/thumbImage""
        android:layout_width=""70dp""
        android:layout_height=""70dp""
        android:layout_alignParentLeft=""true""
        android:layout_centerVertical=""true""
        android:layout_marginRight=""10dp""
        android:background=""@drawable/placeholder"" /&gt;

    &lt;TextView
        android:id=""@+id/title""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_toRightOf=""@id/thumbImage""
        android:minLines=""2""
        android:paddingTop=""5dp""
        android:textStyle=""bold"" /&gt;

    &lt;TextView
        android:id=""@+id/reporter""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_below=""@id/title""
        android:layout_marginTop=""5dp""
        android:layout_toRightOf=""@id/thumbImage"" /&gt;

    &lt;TextView
        android:id=""@+id/date""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignBottom=""@+id/reporter""
        android:layout_alignParentRight=""true"" /&gt;

&lt;/RelativeLayout&gt;</pre>
<h3><span id=""54_Creating_custom_list_adapter"">5.4. Creating custom list adapter</span></h2>
<p>Adapter is acts as a bridge between data source and adapter views such as ListView, GridView. Adapter iterates through the data set from beginning till the end and generate Views for each item in the list.</p>
<p>Create a new class named CustomListAdapter and extend it from BaseAdapter. <a href=""/articles/android-listview-tutorial"" title=""Android ListView Example"">Visit here</a> to learn more about android adapters.</p>
<pre class=""prettyprint lang-java"">public class CustomListAdapter extends BaseAdapter {
	private ArrayList listData;
	private LayoutInflater layoutInflater;

	public CustomListAdapter(Context context, ArrayList listData) {
		this.listData = listData;
		layoutInflater = LayoutInflater.from(context);
	}

	@Override
	public int getCount() {
		return listData.size();
	}

	@Override
	public Object getItem(int position) {
		return listData.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	public View getView(int position, View convertView, ViewGroup parent) {
		ViewHolder holder;
		if (convertView == null) {
			convertView = layoutInflater.inflate(R.layout.list_row_layout, null);
			holder = new ViewHolder();
			holder.headlineView = (TextView) convertView.findViewById(R.id.title);
			holder.reporterNameView = (TextView) convertView.findViewById(R.id.reporter);
			holder.reportedDateView = (TextView) convertView.findViewById(R.id.date);
			holder.imageView = (ImageView) convertView.findViewById(R.id.thumbImage);
			convertView.setTag(holder);
		} else {
			holder = (ViewHolder) convertView.getTag();
		}

		NewsItem newsItem = (NewsItem) listData.get(position);
		holder.headlineView.setText(newsItem.getHeadline());
		holder.reporterNameView.setText(""By, "" + newsItem.getReporterName());
		holder.reportedDateView.setText(newsItem.getDate());
		if (holder.imageView != null) {
			new ImageDownloaderTask(holder.imageView).execute(newsItem.getUrl());
		}
		return convertView;
	}

	static class ViewHolder {
		TextView headlineView;
		TextView reporterNameView;
		TextView reportedDateView;
		ImageView imageView;
	}
}</pre>
<h3><span id=""55_Using_list_view_adapter"">5.5. Using list view adapter</span></h2>
<p>Now that we have the list view and adapter class ready. Let us proceed to complete the MainActivity class. The following code snippet is used to initialize the list view and assign the custom adapter to it.</p>
<pre class=""prettyprint lang-java"">public class MainActivity extends Activity {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ArrayList&lt;ListItem&gt; listData = getListData();

        final ListView listView = (ListView) findViewById(R.id.custom_list);
        listView.setAdapter(new CustomListAdapter(this, listData));
        listView.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView&lt;?&gt; a, View v, int position, long id) {
                ListItem newsData = (ListItem) listView.getItemAtPosition(position);
                Toast.makeText(MainActivity.this, ""Selected :"" + "" "" + newsData, Toast.LENGTH_LONG).show();
            }
        });
    }

    private ArrayList&lt;ListItem&gt; getListData() {
        ArrayList&lt;ListItem&gt; listMockData = new ArrayList&lt;ListItem&gt;();
        String[] images = getResources().getStringArray(R.array.images_array);
        String[] headlines = getResources().getStringArray(R.array.headline_array);

        for (int i = 0; i &lt; images.length; i++) {
            ListItem newsData = new ListItem();
            newsData.setUrl(images[i]);
            newsData.setHeadline(headlines[i]);
            newsData.setReporterName(""Pankaj Gupta"");
            newsData.setDate(""May 26, 2013, 13:35"");
            listMockData.add(newsData);
        }
        return listMockData;
    }
}
</pre>
<p>Notice that, <code>getListData()</code> method in the activity is used to create some dummy list data for the list view. To make this example simple, we are using the string arrays defined in the <code>strings.xml</code> resource file. But in realtime you might download the data from server or get it from any other sources.</p>
<p>Add the following string array declarations to string.xml file.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;resources&gt;
    &lt;string name=""app_name""&gt;Async ListView&lt;/string&gt;
    &lt;array name=""images_array""&gt;
        &lt;item&gt;http://lh5.ggpht.com/_hepKlJWopDg/TB-_WXikaYI/AAAAAAAAElI/715k4NvBM4w/s144-c/IMG_0075.JPG&lt;/item&gt;
        &lt;item&gt;http://lh4.ggpht.com/_4f1e_yo-zMQ/TCe5h9yN-TI/AAAAAAAAXqs/8X2fIjtKjmw/s144-c/IMG_1786.JPG&lt;/item&gt;
        &lt;item&gt;http://lh3.ggpht.com/_GEnSvSHk4iE/TDSfmyCfn0I/AAAAAAAAF8Y/cqmhEoxbwys/s144-c/_MG_3675.jpg&lt;/item&gt;
        &lt;item&gt;http://lh6.ggpht.com/_ZN5zQnkI67I/TCFFZaJHDnI/AAAAAAAABVk/YoUbDQHJRdo/s144-c/P9250508.JPG&lt;/item&gt;
        &lt;item&gt;http://lh4.ggpht.com/_XjNwVI0kmW8/TCOwNtzGheI/AAAAAAAAC84/SxFJhG7Scgo/s144-c/0014.jpg&lt;/item&gt;
        &lt;item&gt;http://lh6.ggpht.com/_Nsxc889y6hY/TBp7jfx-cgI/AAAAAAAAHAg/Rr7jX44r2Gc/s144-c/IMGP9775a.jpg&lt;/item&gt;
        &lt;item&gt;http://lh6.ggpht.com/_ZN5zQnkI67I/TCFFZaJHDnI/AAAAAAAABVk/YoUbDQHJRdo/s144-c/P9250508.JPG&lt;/item&gt;
    &lt;/array&gt;

    &lt;array name=""headline_array""&gt;
        &lt;item&gt;Dance of Democracy&lt;/item&gt;
        &lt;item&gt;Major Naxal attacks in the past&lt;/item&gt;
        &lt;item&gt;BCCI suspends Gurunath pending inquiry &lt;/item&gt;
        &lt;item&gt;Life convict can`t claim freedom after 14 yrs: SC&lt;/item&gt;
        &lt;item&gt;Indian Army refuses to share info on soldiers mutilated at LoC&lt;/item&gt;
        &lt;item&gt;French soldier stabbed; link to Woolwich attack being probed&lt;/item&gt;
        &lt;item&gt;Life convict can`t claim freedom after 14 yrs: SC&lt;/item&gt;
    &lt;/array&gt;
&lt;/resources&gt;
</pre>
<h2><span id=""5_Download_Complete_Example"">5. Download Complete Example</span></h1>
[download url=”https://github.com/javatechig/Async-ListView-Image-Loader”]
",0,"standard","post"
"How to sort an ArrayList in java","how-to-sort-an-arraylist-in-java","ArrayList are also called as dynamic arrays that can grow as needed. In Java ArrayList class extends AbstractList&hellip;
","LIVE","<p>ArrayList are also called as dynamic arrays that can grow as needed. In Java ArrayList class extends AbstractList and implements List interface. In Java ArrayList’s are created with an initial size. The size of the collection is changes dynamically as the items are exceeded the size or deleted. This example will explain sorting of ArrayList using <code>Comparator</code>, <code>Comparable</code> and <code>Collectiolns.sort()</code> method.</p>
[box style=”1″]Note: Typically standard Array in java is fixed sized in nature. Once created, they cannot grow or shrink, which means that you must know in advance how many elements an array will hold.[/box]
<p>At times, you may need to sort the ArrayList to make it alphabetically order. In this below example, it shows the use of Collections.sort and comparator to sort an ArrayList.</p>
<h1>1. Sorting using Collections.sort method:</h1>
<pre class=""prettyprint lang-java"">public class SortArrayList {

	public static void main(String[] args) {
		ArrayList unsortList = new ArrayList();
		unsortList.add(""1011"");
		unsortList.add(""5460"");
		unsortList.add(""1000"");
		unsortList.add(""Abdul"");
		unsortList.add(""1012"");
		unsortList.add(""Adam"");

		System.out.println(""********** Value before sorting **************"");
		for (String str : unsortList) {
			System.out.println(str);
		}

		Collections.sort(unsortList);

		System.out.println(""********** Value after sorting **************"");
		for (String str : unsortList) {
			System.out.println(str);
		}

	}
}</pre>
<p>Here in this above example the sorting happens according to ASCII.</p>
<h5>Output:</h5>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""sorting-array-list-using-collections.sort"" class=""alignnone size-full wp-image-2287"" height=""226"" loading=""lazy"" src=""/media/uploads/articles/424/sorting-array-list-using-collections.sort_.png"" srcset="""" width=""560""/></a></p>
<h1> 2. Sorting objects in an ArrayList using Comparable interface</h1>
<p>In my example I want to sort the employees list as per their salary in descending order. My Employee class implements Comparable interface and overridden compareTo method. In Compare to method add your logic, weather to sort ascending or descending order.</p>
<pre class=""prettyprint lang-java"">public class Employee implements Comparable {
	private String name;
	private String id;
	private double salary;

	public Employee(String id, String name, double salary) {
		this.id = id;
		this.name = name;
		this.salary = salary;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) {
		this.salary = salary;
	}

	@Override
	public int compareTo(Employee employee) {
		double compareSalary = ((Employee) employee).getSalary();

		// ascending order
		// return (int) (this.salary - compareSalary);

		// descending order
		return (int) (compareSalary - this.salary);
	}

	@Override
	public String toString() {
		return ""[ id="" + id + "", name="" + name + "", salary="" + salary + ""]"";
	}

}</pre>
<h1>3. Sorting Objects in an ArrayList using Comparator</h1>
<p>Check out the below code snippet, I am sorting Employees list using Anonymous Comparator</p>
<pre class=""prettyprint lang-java"">//Sorting using Anonymous inner class type
		Collections.sort(emplyoees, new Comparator() {
			@Override
			public int compare(Employee e1, Employee e2) {
				String id1 = ((Employee) e1).getId();
				String id2 = ((Employee) e2).getId();

				// ascending order
				 return id1.compareTo(id2);

				// descending order
				//return id2.compareTo(id1);
			}
		});</pre>
<h5>Complete Code</h5>
<pre class=""prettyprint lang-java"">public class SortArrayListObjects {

	public static void main(String[] args) {

		ArrayList employees = new ArrayList();
		employees.add(new Employee(""1001"", ""Adam"", 5000));
		employees.add(new Employee(""1006"", ""Rajan"", 8400));
		employees.add(new Employee(""1040"", ""Keay"", 2500));
		employees.add(new Employee(""1056"", ""Ashok"", 12000));	

		System.out.println(""**** Value before sorting ***"");
		for(Employee employee: employees){
			System.out.println(employee);
		}

		Collections.sort(employees);

		System.out.println(""**** After sorting salary descending ***"");
		for(Employee employee: employees){
			System.out.println(employee);
		}

		//Sorting using Anonymous inner class type
		Collections.sort(employees, new Comparator() {
			@Override
			public int compare(Employee e1, Employee e2) {
				String id1 = ((Employee) e1).getId();
				String id2 = ((Employee) e2).getId();

				// ascending order
				 return id1.compareTo(id2);

				// descending order
				//return id2.compareTo(id1);
			}
		});

		System.out.println(""**** After sorting id ascending ***"");
		for(Employee employee: employees){
			System.out.println(employee);
		}

	}
}</pre>
<h5>Output<a href=""http://stacktips.com"" target=""_self""><img alt=""sorting-array-list-using-Comparator"" class=""alignleft size-full wp-image-2288"" height=""250"" loading=""lazy"" sizes=""(max-width: 774px) 100vw, 774px"" src=""/media/uploads/articles/424/sorting-array-list-using-Comparator.png"" srcset="""" width=""774""/></a></h5>
<p> </p>
",0,"standard","post"
"How To Loop ArrayList In Java","how-to-loop-arraylist-in-java","In this tutorial we will see How To Loop ArrayList In Java in different ways. Below example will loop through ArrayList and&hellip;
","LIVE","<p>In this tutorial we will see How To Loop ArrayList In Java in different ways. Below example will loop through ArrayList and print its content.</p>
<ol>
<li>Using regular for loop</li>
<li>Using advance for loop</li>
<li>Using While Loop</li>
<li>Using Iterator</li>
</ol>
<p>Iterator is an interface in the collection framework. ArrayList is a collection class and implements the List Inteface. All the elements of the ArrayList can be traversed by the Iterator. Iterator has methods hasNext() and next()</p>
<pre class=""prettyprint lang-java"">package com.test;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class ArrayListDemo {

	public static void main(String[] args) {

		// adding items to list
		// in real time you might get this data from a db or from other sources
		// We are hard-coding the values here to simplify this example
		List list = new ArrayList();
		list.add(new NewsObject(1001,
				""Soldier beheaded in suspected terror attack in London"",
				""en_in""));
		list.add(new NewsObject(1002,
				""Passive smoking can make kids aggressive"", ""en_in""));
		list.add(new NewsObject(
				1003,
				""Police prepare to question BCCI chief's son-in-law for betting links"",
				""en_in""));
		list.add(new NewsObject(1004,
				""Shun body tattoos if you wish to join armed forces"", ""en_in""));
		list.add(new NewsObject(1005,
				""Man linked to Boston bombings killed by FBI agent"", ""en_in""));

		System.out.println(""#1. Looping using regular for loop"");
		for (int i = 0; i &lt; list.size(); i++) {
			NewsObject news = (NewsObject) list.get(i);
			System.out.println(news);
		}

		System.out.println(""#2.  Looping using advance for loop"");
		for (NewsObject news : list) {
			System.out.println(news);
		}

		System.out.println(""#3. Looping using while loop"");
		int j = 0; // initilisation
		while (list.size() &gt; j) { // condition checking
			NewsObject news = (NewsObject) list.get(j);
			System.out.println(news);
			j++; // iteration
		}

		System.out.println(""#4. Looping using iterator"");
		Iterator iterator = (Iterator) list.iterator();
		while (iterator.hasNext()) {
			NewsObject news = (NewsObject) iterator.next();
			System.out.println(news);
		}
	}

}</pre>
<p>Here in my above example, I am storing NewsObject object in my ArrayList.</p>
<pre class=""prettyprint lang-java"">public class NewsObject {
	int id;
	String headline;
	String edition;

	NewsObject(int id, String headline, String edition) {
		this.id = id;
		this.headline = headline;
		this.edition = edition;

	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getHeadline() {
		return headline;
	}

	public void setHeadline(String headline) {
		this.headline = headline;
	}

	public String getEdition() {
		return edition;
	}

	public void setEdition(String edition) {
		this.edition = edition;
	}

	@Override
	public String toString() {
		return ""NewsObject : "" + ""Id = "" + id + "", Headline="" + headline
				+ "", Editon="" + edition;
	}

}</pre>
",0,"standard","post"
"Creating Frame by Frame Animations in Android","creating-frame-animations-in-android","This example explains step by step process to create Frame Animations in Android. An animation created by moving an object little-by-little over several consecutive frames.
","LIVE","<p>A frame animation created by moving an object little-by-little over several consecutive frames. In Android, we can create Frame Animation by swapping frames repeatedly, so that it appears continuous to the human eye and we feel that it is animated.</p>
<p>Frame is referred to an image. So to implement frame by frame animation in android, we needs to have set of images, which describes a motion. Now let’s move on and see how to implement frame by frame animation in Android</p>
<p>The following steps will guide you through step by step approach to create frame animation in Android.</p>
<h2>1. Identifying the Image Frames</h2>
<p>First step towards creating frame animation is to prepare a series of images with the individual frames of your animation. Add the images to your project’s drawable folder. In this example, I have used the following sequence of images.</p>
<p><img alt="""" src=""/media/uploads/articles/426/frame1.png"" srcset="""" style=""max-width: 150px !important;""/><img alt="""" src=""/media/uploads/articles/426/frame2.png"" srcset="""" style=""max-width: 150px !important;"" width=""150""/><img alt="""" src=""/media/uploads/articles/426/frame3.png"" srcset="""" style=""max-width: 150px !important;"" width='""150/'/><img alt="""" src=""/media/uploads/articles/426/frame4.png"" srcset="""" style=""max-width: 150px !important;"" width=""150""/><img alt="""" src=""/media/uploads/articles/426/frame5.png"" srcset="""" style=""max-width: 150px !important;"" width=""150""/><img alt="""" src=""/media/uploads/articles/426/frame6.png"" srcset="""" style=""max-width: 150px !important;"" width=""150""/><img alt="""" src=""/media/uploads/articles/426/frame7.png"" srcset="""" style=""max-width: 150px !important;"" width=""150""/><img alt="""" src=""/media/uploads/articles/426/frame8.png"" srcset="""" style=""max-width: 150px !important;"" width=""150""/><img alt="""" src=""/media/uploads/articles/426/frame9.png"" srcset="""" style=""max-width: 150px !important;"" width=""150""/><img alt="""" src=""/media/uploads/articles/426/frame10.png"" srcset="""" style=""max-width: 150px !important;"" width=""150""/></p>
<h2>2. Define Animation Sequence</h2>
<p>Declare a XML file that defines the animation sequence that holds the list of drawables. Create a new file named  <code>frame_animation_list.xml</code>  and paste it to your project resource <code>res/anim</code> or <code>res/drawable</code> folder.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;animation-list xmlns:android=""http://schemas.android.com/apk/res/android"" android:oneshot=""false""&gt;
        &lt;item android:drawable=""@drawable/frame1"" android:duration=""210"" /&gt;
	&lt;item android:drawable=""@drawable/frame2"" android:duration=""210"" /&gt;
	&lt;item android:drawable=""@drawable/frame3"" android:duration=""210"" /&gt;
	&lt;item android:drawable=""@drawable/frame4"" android:duration=""210"" /&gt;
	&lt;item android:drawable=""@drawable/frame5"" android:duration=""210"" /&gt;
	&lt;item android:drawable=""@drawable/frame6"" android:duration=""210"" /&gt;
	&lt;item android:drawable=""@drawable/frame7"" android:duration=""210"" /&gt;
	&lt;item android:drawable=""@drawable/frame8"" android:duration=""210"" /&gt;
	&lt;item android:drawable=""@drawable/frame9"" android:duration=""210"" /&gt;
	&lt;item android:drawable=""@drawable/frame10"" android:duration=""210"" /&gt;

&lt;/animation-list&gt;</pre>
<ul>
<li>Notice that in the above layout declaration, we are using <code>AnimationDrawable</code> class. This takes the list of <code>Drawable</code> resources and render them at specified intervals.</li>
<li>Note that the AnimationDrawable class, loads all the images into memory before it starts animation.</li>
<li>You must be careful about using this for images of larger size. Depending on the size of the images, you have to restrict the number of frames for making animation smoother.</li>
</ul>
<h2>3. Declare Activity Layout</h2>
<p>Now declare an image view to your activity layout where the animation will be shown. In my example, I have declared an image view and two buttons Start and Stop to control the animation. Add the following snippet to your <code>activity_main.xml</code> file.</p>
<pre class=""prettyprint lang-xml"">&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""&gt;

    &lt;ImageView
        android:id=""@+id/imageView""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_centerInParent=""true""
        android:adjustViewBounds=""true"" /&gt;

    &lt;LinearLayout
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_alignParentBottom=""true""
        android:layout_marginBottom=""20dp""
        android:orientation=""horizontal""&gt;

        &lt;Button
            android:id=""@+id/start""
            android:layout_width=""0dp""
            android:layout_height=""wrap_content""
            android:layout_weight=""0.5""
            android:text=""Start"" /&gt;

        &lt;Button
            android:id=""@+id/stop""
            android:layout_width=""0dp""
            android:layout_height=""wrap_content""
            android:layout_weight=""0.5""
            android:text=""Stop"" /&gt;
    &lt;/LinearLayout&gt;
&lt;/RelativeLayout&gt;
</pre>
<h2>4. Control the Animation Behaviour</h2>
<p>Now that we are ready with the animation sequence, we need to add this Drawable as a background resource for our ImageView. Use the following code snippet to set the AnimationDrawable as the background of the ImageView.</p>
<pre class=""prettyprint lang-java"">// Setting animation_list.xml as the background of the image view
view.setBackgroundResource(R.drawable.frame_animation_list);
</pre>
<p>Once this is set, you can access this AnimationDrawable object by doing a get on the view object like this:</p>
<pre class=""prettyprint lang-java"">// Type casting the Animation drawable
frameAnimation = (AnimationDrawable) view.getBackground();
</pre>
<ul>
<li>Now we can control the behaviour of animation by using <code>start()</code> and <code>stop()</code> methods to start and stop the animation.</li>
<li>You may use <code>setOneShot()</code> method runs the animation once and then stops.</li>
<li>The <code>addFrame(drawable, duration)</code> method can be used to add a new frame by passing a Drawable object and sets its display duration.</li>
</ul>
<h2>5. Completing Example Code</h2>
<p>Now that we understand the concepts, let us complete the example. Here is the complete code that goes inside <code>MainActivity.java</code>.</p>
<pre class=""prettyprint lang-java"">import android.graphics.drawable.AnimationDrawable;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;

public class MainActivity extends ActionBarActivity implements OnClickListener {

    private ImageView view;
    private AnimationDrawable frameAnimation;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Type casting the Image View
        view = (ImageView) findViewById(R.id.imageView);

        // Setting animation_list.xml as the background of the image view
        view.setBackgroundResource(R.drawable.frame_animation_list);

        // Type casting the Animation drawable
        frameAnimation = (AnimationDrawable) view.getBackground();

        //set true if you want to animate only once
        frameAnimation.setOneShot(true);

        findViewById(R.id.start).setOnClickListener(this);
        findViewById(R.id.stop).setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        int id = v.getId();
        if(id == R.id.start){
            frameAnimation.start();
        }else if(id==R.id.stop){
            frameAnimation.stop();
        }
    }
}</pre>
",0,"standard","post"
"Installing Android Studio","installing-android-studio","Android Studio is an IDE based on IntelliJ IDEA used for android application development. It is released on 15th may 2013. This tool has more options for Android Development, making the process faster and more productive. A “live layout” was shown that renders your app as you’re editing in real-time. In this tutorial you can learn steps for Installing Android Studio.
","LIVE","<p align=""justify""><a href=""http://developer.android.com/sdk/index.html#Other"" rel=""nofollow noopener noreferrer"" target=""_blank""><img alt=""Android Studio IDE"" class=""aligncenter wp-image-7331 size-full"" height=""393"" loading=""lazy"" sizes=""(max-width: 763px) 100vw, 763px"" src=""/media/uploads/articles/427/Android-Studio-IDE.png"" srcset="""" width=""763""/></a></p>
<p>Android Studio is an IDE based on IntelliJ IDEA used for android application development. It is released on 15th may 2013. This tool has more options for Android Development, making the process faster and more productive. A “live layout” was shown that renders your app as you’re editing in real-time. In this tutorial you can learn steps for Installing Android Studio.<br/>
Know more about android studio features from <a href=""http://stacktips.com/2013/05/19/android-studio-features/"" title=""Android Studio Features"">Android Studio Features</a>.</p>
[box style=”2″] Android Studio is currently available as an early access preview. Several features are either incomplete or not yet implemented and you may encounter bugs. If you are not comfortable using an unfinished product, you may want to instead download (or continue to use) the ADT Bundle (Eclipse with the ADT Plug-in). [/box]
<h1>Installing Android Studio</h1>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""android-studio-viewing-layout_builder"" class=""aligncenter wp-image-2215"" height=""437"" loading=""lazy"" sizes=""(max-width: 680px) 100vw, 680px"" src=""/media/uploads/articles/427/android-studio-viewing-layout_builder.png"" srcset="""" width=""680""/></a></p>
<h1>Some Common Problems</h1>
<h3>1. ERROR: cannot start Android Studio</h3>
<pre><span style=""color: #ff0000;"">ERROR: cannot start Android Studio. No JDK found. Please validate either ANDROID_STUDIO_JDK, or JDK_HOME or JAVA_HOME points to valid JDK installation. ECHO is off. Press any key to continue</span></pre>
<p>It is a known issue with android studio<strong>. </strong>On some Windows systems, the launcher script does not find where Java is installed. If you encounter this problem, you need to set an environment variable indicating the correct location. Select <strong>Start menu &gt; Computer &gt; System Properties &gt; Advanced System Properties</strong>. Then open <strong>Advanced tab &gt; Environment Variables</strong>, add new system variable <code>JAVA_HOME</code> that points to your JDK folder, for example <code>C:\Program Files\Java\jdk1.7.0_21</code>. <a href=""http://stacktips.com"" target=""_self""><img alt=""setting up java path"" class=""aligncenter size-full wp-image-2233"" height=""496"" loading=""lazy"" sizes=""(max-width: 866px) 100vw, 866px"" src=""/media/uploads/articles/427/setting-up-java-path.png"" srcset="""" width=""866""/></a></p>
<h3>2.Android SDK is out of date or is missing templates</h3>
<pre><span style=""color: #ff0000;"">Your Android SDK is out of date or is missing templates. Please ensure you are using SDK version 22 or later.</span></pre>
<p style=""text-align: left;"">This may happen because you already have your SDK installation up for Android Developers Bundle with eclipse. First open your SDK manager in the ADT Bundle and update you Android SDK Tools from 21.1 to 22 and then open your Android Studio. For windows user the tools and other SDK packages are saved with the Android Studio application directory. Windows:</p>
<p style=""text-align: left;"">\Users\AppData\Local\Android\android-studio\sdk\ Mac: /Applications/Android\ Studio.app/sdk/ Make sure your android-sdk-path is correct and the sdk tool version is 22 or later. Once android studio started, open the <strong>Configure &gt; Project Defaults &gt; Project Structure</strong>, set your project sdk is Android SDK. Then select SDK tab and select build target (eg: Android 4.2.2). Now  you should be good to start.</p>
",0,"standard","post"
"Android Studio Features","android-studio-features","This tutorial explains Android Studio Features and Installation steps. Android Studio is an IDE based on IntelliJ IDEA used for android application development.&hellip;
","LIVE","<p>This tutorial explains Android Studio Features and Installation steps. Android Studio is an IDE based on IntelliJ IDEA used for android application development. It is released on 15th may 2013. This tool has more options for Android Development, making the process faster and more productive. A “live layout” was shown that renders your app as you’re editing in real-time.</p>
<p>Prior to Android Studio, developers were relying only on the open source eclipse as IDE with ADT plugin for android development. Due to this android was always falling back compared Apples xCode IDE for iOS based development. After android studio release Google can equally bet with iOS platform in terms of development assets. Now let’s see more of the IDE capabilities.</p>
<h2>Android Studio Features</h2>
<p>Android studio is based on IntelliJ IDEA, which does all the functionality that Eclipse with ADT plug-in do, with lot more additional features. The initial version of android studio offers</p>
<ol>
<li>Gradle-based build support.</li>
<li>Android-specific refactoring and quick fixes</li>
<li>Lint tools to catch performance, usability, version compatibility and other problems</li>
<li>ProGuard and app-signing capabilities</li>
<li>Template-based wizards to create common Android designs and components.</li>
<li><strong>A rich layout editor:</strong> it allows you to drag-and-drop UI components, preview layouts on multiple screen configurations. Preview appears instantly as you change in the layout editor. You can choose a language, and can see the preview of layout with that locale.</li>
<li><strong>Rich Color Preview editor:</strong> While adding colors as a resource, and we can see the color preview at the left hand side of the editor.</li>
<li><strong>Deep Code Analysis:</strong> If you point to a line and it gives detailed explanation about an exception based on the annotation added. And you can also know which constants are allowed for which API. It also has the powerful code completion. You can also inspect code in whole project, InteliJ lists all Lint errors during code inspection.</li>
</ol>
[box style=”2″]
<p><strong>Note:</strong> Android Studio is currently available as an early access preview. Several features are either incomplete or not yet implemented and you may encounter bugs. If you are not comfortable using an unfinished product, you may want to instead download (or continue to use) the ADT Bundle (Eclipse with the ADT Plug-in)</p>
[/box]
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""android-studio-viewing-layout_builder"" class=""aligncenter size-full wp-image-2215"" height=""729"" loading=""lazy"" sizes=""(max-width: 1134px) 100vw, 1134px"" src=""/media/uploads/articles/428/android-studio-viewing-layout_builder.png"" srcset="""" width=""1134""/></a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""android-studio-viewing-layout"" class=""aligncenter size-full wp-image-2217"" height=""728"" loading=""lazy"" sizes=""(max-width: 1366px) 100vw, 1366px"" src=""/media/uploads/articles/428/android-studio-viewing-layout.png"" srcset="""" width=""1366""/></a></p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""android-studio-color-editor"" class=""aligncenter size-full wp-image-2216"" height=""394"" loading=""lazy"" sizes=""(max-width: 1173px) 100vw, 1173px"" src=""/media/uploads/articles/428/android-studio-color-editor.png"" srcset="""" width=""1173""/></a></p>
<p>With this new features, hope it will help developers to get their development faster.</p>
<p>You can find a Youtube tutorial from Devbytes which will help you getting started with IDE</p>
<p><iframe allowfullscreen=""allowfullscreen"" frameborder=""0"" height=""360"" loading=""lazy"" src=""http://www.youtube.com/embed/e0fXuyL0xVU"" width=""640""></iframe></p>
<h2>Installing Android Studio</h2>
<p>Find my post explaining steps to install android studio on windows.</p>
<p><a href=""/articl/installing-android-studio/"">http://stacktips.com/articels/installing-android-studio/</a></p>
",0,"standard","post"
"Android Toast Example","android-toast-example","In this tutorial we will explain how to work with Android Toast with example. The example below demonstrates&hellip;","LIVE","<p>In this tutorial we will explain how to work with Android Toast with example. The example below demonstrates the usages of simple and customized toast in Android.</p>
<ol>
<li>Toast is a solution for android developer when required to notify user about an operation without expecting any user input.</li>
<li>This provides a small popup that displays for a small period and fades out automatically after timeout. Sometimes developers use this for debugging.</li>
<li>For example, some of the app shows&nbsp;“Press back once to Exit” message when pressed back button in home page.&nbsp;Another real-time example is Gmail app, It shows a Toast, when a mail message is saved to draft.</li>
</ol>
<h3 class="""">How to Create a&nbsp;Toast</h3>
<p>We can instantiate a <code>android.widget.Toast</code> object using static <code>makeText()</code> method. This method takes three parameters: the application <code>Context</code>, the text <code>message</code>, and the <code>duration</code> for the toast. You can display the toast notification by calling show() method.</p>
<p>Checkout below code snippet to show an simple toast in Android</p>
<pre class=""prettyprint lang-java"">//display in short period of time
Toast.makeText(getApplicationContext(), ""Your toast message."",
                      Toast.LENGTH_SHORT).show();
//display in long period of time
Toast.makeText(getApplicationContext(), ""Your toast message"", 
                      Toast.LENGTH_LONG).show();</pre>
<p>Toast notification in android always appears near the bottom of the screen, centered horizontally as shown in the image. However, it allows us to change its position with the <code>setGravity(int, int, int)</code> method. This accepts three parameters: a Gravity constant, an x-position offset, and a y-position offset.</p>
<p>For example, if you decide that the toast should appear in the top-left corner, you can set the gravity like this:</p>
<pre class=""prettyprint lang-java"">Toast toast = Toast.makeText(getApplicationContext(), ""Your toast message."", Toast.LENGTH_SHORT);
toast.setGravity(Gravity.TOP|Gravity.LEFT, 0, 0);
toast.show();</pre>
<h3 class="""">Creating Custom Toast in Android</h3>
<p>Sometimes a simple Toast may not be satisfactory, and then we can go for customizing the Toast. To create a custom layout, define a View layout, in XML and pass the root View object to the setView(View) method.</p>
In my example, I have created an XML layout named as <code>custom_toast.xml</code><p></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
	android:id=""@+id/toast_layout_root""
	android:layout_width=""fill_parent""
	android:layout_height=""fill_parent""
	android:layout_marginLeft=""10dp""
	android:layout_marginRight=""10dp""
	android:orientation=""horizontal""
	android:paddingLeft=""10dp""
	android:paddingRight=""10dp"" &gt;

	&lt;LinearLayout
		android:layout_width=""fill_parent""
		android:layout_height=""fill_parent""
		android:background=""#00AAE9""
		android:orientation=""horizontal""
		android:paddingBottom=""5dp""
		android:paddingTop=""5dp"" &gt;

	&lt;ImageView
		android:id=""@+id/toastImage""
		android:layout_width=""wrap_content""
		android:layout_height=""fill_parent""
		android:layout_marginRight=""10dp""
		android:src=""@drawable/ic_warning"" /&gt;

	&lt;TextView
		android:id=""@+id/toastText""
		android:layout_width=""wrap_content""
		android:layout_height=""fill_parent""
		android:gravity=""center_vertical""
		android:textColor=""#FFFFFF""
		android:textSize=""7pt""
		android:textStyle=""italic"" /&gt;
	&lt;/LinearLayout&gt;
&lt;/LinearLayout&gt;</pre>
<p>Below is the code changes for the activity class</p>
<pre class=""prettyprint lang-java"">public class MainActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		Button toastButton = (Button) this.findViewById(R.id.toastButton);
		toastButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				//create the toast object, set display duration,
				Toast.makeText(getApplicationContext(), ""This is a plain toast."", Toast.LENGTH_SHORT).show();
			}
		});

		Button customToastButton = (Button) this.findViewById(R.id.customToastButton);
		customToastButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {

				//get the LayoutInflater and inflate the custom_toast layout
				LayoutInflater inflater = getLayoutInflater();
				View layout = inflater.inflate(R.layout.custom_toast, (ViewGroup)
				findViewById(R.id.toast_layout_root));

				//get the TextView from the custom_toast layout
				TextView text = (TextView) layout.findViewById(R.id.toastText);
				text.setText(""This is my custom toast"");

				//create the toast object, set display duration,
				//set the view as layout that's inflated above and then call show()
				Toast t = new Toast(getApplicationContext());
				t.setDuration(Toast.LENGTH_LONG);
				t.setView(layout);
				t.show();
			}
		});
	}
}</pre>
<p>Below is the output of the above code</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter wp-image-986"" height=""507"" loading=""lazy"" sizes=""(max-width: 567px) 100vw, 567px"" src=""/media/uploads/articles/429/thumb-toast-custom.png"" srcset="""" title=""thumb-toast-custom"" width=""567""></a></p>",0,"standard","post"
"Android WebView Example","android-webview-example","In the course of this tutorial, we will teach you how to use Android WebView and answer to some of the most common questions on android WebView.  Android WebView is an embedded browser that can render static HTML data or even remote URL. A WebView is an android UI component that displays webpages.
","LIVE","
<h1><span id=""1_Introduction_to_Android_WebView"">1. Introduction to Android WebView</span></h1>
<p>In the course of this tutorial, we will teach you how to use Android WebView and answer to some of the most common questions on android WebView.</p>
<ol>
<li>Android WebView is an embedded browser that can render static HTML data or even remote URL. A WebView is an android UI component that displays webpages.</li>
<li>WebView encompasses the functionality of a browser that can be integrated to Android application.</li>
<li>It uses the WebKit rendering engine to display web pages and includes methods to navigate forward and backward through a history, zoom in and out, and perform text searches and more.</li>
<li>Most of the android applications like WordPress, Flipboard, fiddly; Google Reader, etc. do integrate WebView, in order to display certain piece of online contents.</li>
</ol>
<p>Android WebView use WebKit rendering engine to display web pages. If you see the android underlying platform architecture, the WebKit core resides in library layer, and the source is developed in C/C++. From Android application framework layer, the WebView can connect to WebKit using JNI (Java native Interface).</p>
<figure class=""wp-caption aligncenter"" style=""width: 428px""><a href=""http://elinux.org/images/c/c2/Android-system-architecture.jpg"" rel=""nofollow noopener noreferrer"" target=""_blank""><img alt=""Android-system-architecture"" class="""" height=""307"" loading=""lazy"" src=""/media/uploads/articles/430/Android-system-architecture.jpg"" srcset="""" title=""Android-system-architecture"" width=""428""/></a><figcaption class=""wp-caption-text"">Android-system-architecture</figcaption></figure>
<p>If you are interested in taking a look into the Android platform source code, you may visit the following links<br/>
<a href=""https://android.googlesource.com/platform/external/webkit/+/f10585d69aaccf4c1b021df143ee0f08e338cf31/WebKit/android/jni"" rel=""nofollow noopener noreferrer"" target=""_blank"">Webkit JNI code</a><br/>
<a href=""http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android-apps/4.1.1_r1/com/android/browser/BrowserWebView.java?av=f"" rel=""nofollow noopener noreferrer"" target=""_blank"">BrowserWebView.Java</a></p>
<h1><span id=""2_Open_Link_on_Android_DeviceBrowser"">2. Open Link on Android Device Browser</span></h1>
<p>At times, you may require to invoke the device browser, when an external link is clicked from app. For example, in most of the mobile advertising platform, when user click on a banner, it redirect user to the ad publisher website to show more info on specific ad. For such similar requirement, you need to open device browser with a URL.</p>
<p>Following code show how to invoke device browser using Android Intent method.</p>
<pre class=""prettyprint lang-java"">Uri uri = Uri.parse(""http://stacktips.com"");
Intent intent = new Intent(Intent.ACTION_VIEW, uri);
startActivity(intent);</pre>
<p>The ACTION_VIEW intent action is used to invoke the application based on the specified data. Here in this example, we are using URL as bundle data so it will invoke the specified url in the application that can take such action, eg. browser.  If you provide the data type as phone number, it will automatically open phone dialer.</p>
<h1><span id=""3_Android_WebView_Example"">3. Android WebView Example</span></h1>
<p>Following section of the tutorial, will drive you with step by step approach to create a simple WebView with different configuration params and load stacktips.com home page.</p>
<h1><span id=""4_Declare_WebView_Layout"">4. Declare WebView Layout</span></h1>
<p>Like any other UI controls in android, you can include the WebView in your xml layout. Below is my xml layout</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/urlContainer""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:orientation=""horizontal"" &gt;

    &lt;WebView
        android:id=""@+id/webView""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""/&gt;
&lt;/LinearLayout&gt;</pre>
<h1><span id=""5_Load_Static_Html_Data_on_WebView"">5. Load Static Html Data on WebView</span></h1>
<p>Following activity class snippet will show you how to initialize WebView instance and load static Html string onto it. Just call loadData()  It takes html string data, mime-type and encoding param as three parameters.</p>
<pre class=""prettyprint lang-java"">//Instantiating WebView instance
WebView webView = (WebView) findViewById(R.id.webView);
String customHtml = ""&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, WebView&lt;/h1&gt;"" +
           ""&lt;h1&gt;Heading 1&lt;/h1&gt;&lt;h2&gt;Heading 2&lt;/h2&gt;&lt;h3&gt;Heading 3&lt;/h3&gt;"" +
           ""&lt;p&gt;This is a sample paragraph.&lt;/p&gt;"" +
           ""&lt;/body&gt;&lt;/html&gt;"";
webView.loadData(customHtml, ""text/html"", ""UTF-8"");
</pre>
<p>Output of the above code is<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt=""Load Static HTML Data on WebView"" class=""aligncenter size-thumbnail wp-image-8106"" height=""294"" loading=""lazy"" src=""/media/uploads/articles/430/Load-Static-HTML-Data-on-WebView-300x294.png"" srcset="""" width=""300""/></a></p>
<h1><span id=""6Load_Remote_URL_onWebView"">6. Load Remote URL on WebView</span></h1>
<ol>
<li>The default behavior of Android is to open device browser, when links are clicked. But as our WebView should work like a embedded browser, we must override to always open the links in the WebView instead redirecting it to the default browser.</li>
<li>We can do this using android <code>WebViewClient</code>. WebViewClient helps to monitor events in a WebView. We have to override the <code>shouldOverrideUrlLoading()</code> method. This method allows performing your own action when a particular URL is selected. Once we are ready with the WebViewClient, we can set the WebViewClient of your WebView using the <code>setWebViewClient()</code> method.</li>
<li>The WebViewClient class has some other useful methods such as <code>onPageStarted()</code>, <code>onPageFinished()</code> and <code>onReceivedError()</code> that helps you to show loading progress of WebView content, or handle error.</li>
</ol>
<p>Checkout my Android tutorial that explains <a href=""http://stacktips.com/android/progressbar-while-loading-webview"" title=""ProgressBar while Loading WebView in Android"">How to show loading progress in Android WebView</a>.</p>
<p>Now let us go back to our example, and take a look into how our activity class looks like.</p>
<pre class=""prettyprint lang-java"">public class WebViewActivity extends Activity {
	private WebView webView;	

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_webview);
		
		webView = (WebView) findViewById(R.id.webView);
		webView.setWebViewClient(new MyWebViewClient());
		
		String url = ""http://stacktips.com"";
                webView.getSettings().setJavaScriptEnabled(true);
		webView.loadUrl(url);		
	}

	private class MyWebViewClient extends WebViewClient {
	    @Override
	    public boolean shouldOverrideUrlLoading(WebView view, String url) {
	        view.loadUrl(url);
	        return true;
	    }
	}	
}

</pre>
<p>Output of the above code is here</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""><img alt=""Load Remote URL on WebView"" class=""aligncenter size-thumbnail wp-image-8111"" height=""416"" loading=""lazy"" src=""/media/uploads/articles/430/Load-Remote-URL-on-WebView-300x416.png"" srcset="""" width=""300""/></a></p>
<h1><span id=""7_Display_HTML_Text_in_TextView"">7. Display HTML Text in TextView</span></h1>
<p>Android TextView is also capable of rendering the HTML text. Checkout my post <a href=""http://stacktips.com/android/display-html-in-android-textview"" title=""How to Display HTML in Android TextView"">How to Display HTML in Android TextView</a>.</p>
",0,"standard","post"
"Android ListView Example","android-listview-tutorial","This post will walk you through building simple and customized ListView in Android using different Android adapters. ListView is a view group that, displays a list of scrollable items.","LIVE","<h2 class=""""><span id=""1_Introduction"">Introduction</span></h2>
<p>This post will walk you through building simple and customized&nbsp;<code>ListView</code>&nbsp;in Android&nbsp;using different Android adapters.</p>
<p>Scrollview is ideal for screens where scrolling is required, but&nbsp;it is not efficient when scroll view is used to render a larger data set. Instead you can use specialized adapter views like&nbsp;<a href=""http://stacktips.com/articles/android-listview-tutorial"" title=""Android ListView Example"">ListView</a>, <a href=""http://stacktips.com/articles/android-gridview-example-building-image-gallery-in-android"" title=""Android Gridview Example- Building Image Gallery in android"">GridView</a> and <a href=""http://stacktips.com/articles/android-recyclerview-example"" title=""Android RecyclerView Example"">Recycler View</a> (Introduced in Android Lollipop) for long lists.</p>
<ol>
<li>ListView is an Android ViewGroup, used extensively to display the collection of data in vertical scrollable rows.</li>
<li>The list items are automatically inserted to the list using an Adapter and Adapter pulls data&nbsp;from data source source such as an array, cursor, etc.</li>
</ol>
<h2 class=""""><span id=""2_Android_Adapter"">Android Adapter</span></h2>
<p>Adapter is acts as a&nbsp;bridge between data source and&nbsp;adapter views such as ListView, GridView.&nbsp;Adapter iterates through the data set from beginning till the end&nbsp;and generate Views for each item in the list.</p>
<p>Android SDK provides three different Adapter implementation, that includes <code>ArrayAdapter</code>, <code>CursorAdapter</code> and <code>SimpleAdapter</code>. An ArrayAdapter expects an Array or an List as input, while CursorAdapter accepts the instance of Cursor and SimpleAdapter maps the static data defined in the resources. The type of adapter that suits your app need is purely based on the input data type.</p>
<p>The BaseAdapter is the generic implementation for all of the three adapter types and can be used for ListView, GridView or for Spinners.</p>
<p>You may directly use ArrayAdapter by passing array as input or create your own customized class by extending BaseAdapter.</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self""></a></p>
<p>The image above, provides idea of customizable list views can be done using adapters.</p>
<h2 class=""""><span id=""3_ListView_UsingArrayAdapter"">ListView Using&nbsp;ArrayAdapter</span></h2>
<p>The simplest way for building list view is by using ArrayAdapter. Following are some of the steps used to implement simple ListView using array adapter.</p>
<ol>
<li>First step towards building list view is to identify the input&nbsp;data, which you want to display in list. In this example, we will be using a static array of strings.</li>
<li>Secondly, let us declare list view in activity layout. In our example, the activity&nbsp;layout contains a list view inside linear layout. Provide&nbsp;<code>android:id=""@+id/months_list""</code> as ListView id.</li>
<li>Now finally, let us instantiate&nbsp;the&nbsp;&nbsp;the ArrayAdapter and set to ListView by calling <code>setAdapter()</code> method.</li>
</ol>
<p>Following code snippet depicts the list view declaration inside activity layout</p>
<pre class=""prettyprint lang-xml"">&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
	xmlns:tools=""http://schemas.android.com/tools""
	android:layout_width=""match_parent""
	android:layout_height=""match_parent""
	android:orientation=""vertical""&gt;

	&lt;ListView
		android:id=""@+id/months_list""
		android:layout_width=""match_parent""
		android:layout_height=""wrap_content"" &gt;
	&lt;/ListView&gt;
&lt;/LinearLayout&gt;</pre>
<p>Now instantiate the ListView and Array adapter. Following code snippet depicts the activity code.</p>
<p class=""""><b><span id=""ListActivityjava"">ListActivity.java</span></b></p>
<pre class=""prettyprint lang-java"">import android.os.Bundle;
import android.app.Activity;
import android.widget.ArrayAdapter;
import android.widget.ListView;

public class ListActivity extends Activity {
	private String[] monthsArray = { ""JAN"", ""FEB"", ""MAR"", ""APR"", ""MAY"", ""JUNE"", ""JULY"",
 ""AUG"", ""SEPT"", ""OCT"", ""NOV"", ""DEC"" };

	private ListView monthsListView;
	private ArrayAdapter arrayAdapter;

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list);

		monthsListView = (ListView) findViewById(R.id.months_list);

		// this-The current activity context.
		// Second param is the resource Id for list layout row item
		// Third param is input array 
		arrayAdapter = new ArrayAdapter(this, android.R.layout.simple_list_item_1, monthsArray);
		monthsListView.setAdapter(arrayAdapter);
	}
}</pre><h2 class=""""><span id=""4_ListView_Using_Custom_Adapter"">ListView Using Custom Adapter</span></h2>
<p>So far we have created a simple list view using ArrayAdapter.&nbsp;Now it time to create something fancy custom a list by extending BaseAdapter.&nbsp;Following steps are used to&nbsp;implement customized ListView:</p>
<ol>
<li>First step towards building custom list is to identify&nbsp;the data model for each row. In our example we will display&nbsp;list of <code>NewsItem</code> objects.</li>
<li>Secondly, let us declare list view in activity layout.</li>
<li>Now declare the layout for each row item.</li>
<li>Create your custom&nbsp;adapter class by extending <code>BaseAdapter</code> class.</li>
<li>Finally, let us instantiate your custom adapter and set to ListView by calling setAdapter() method.</li>
</ol>
<p>The NewsItem object will represent each row in list. Declare NewsItem.java class and add the following code snippets.</p>
<pre class=""prettyprint lang-java"">public class NewsItem {
	private String headline;
	private String reporterName;
	private String date;
	public String getHeadline() {
		return headline;
	}

	public void setHeadline(String headline) {
		this.headline = headline;
	}

	public String getReporterName() {
		return reporterName;
	}

	public void setReporterName(String reporterName) {
		this.reporterName = reporterName;
	}

	public String getDate() {
		return date;
	}

	public void setDate(String date) {
		this.date = date;
	}
}</pre>
<h3 class=""""><span id=""41_Define_List_Row_Layout"">Define List Row Layout</span></h3>
<p>Let us create a new custom layout for list view row item containing headline, name and date TextView.</p>
<p class=""""><b><span id=""list_row_layoutxml"">list_row_layout.xml</span></b></p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:orientation=""horizontal""
    android:padding=""5dip"" &gt;

    &lt;TextView
        android:id=""@+id/title""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:textStyle=""bold""
        android:typeface=""sans"" /&gt;

    &lt;TextView
        android:id=""@+id/reporter""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_below=""@id/title""
        android:layout_marginTop=""5dip""
        android:textColor=""#343434""
        android:textSize=""12sp"" /&gt;

    &lt;TextView
        android:id=""@+id/date""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignBaseline=""@+id/reporter""
        android:layout_alignBottom=""@+id/reporter""
        android:layout_alignParentRight=""true""
        android:textColor=""#343434""
        android:textSize=""12sp"" /&gt;
&lt;/RelativeLayout&gt;</pre>
<h3 class=""""><span id=""42_Custom_List_Adapter"">Custom List Adapter</span></h3>
<p>Let us create a new class named <code>CustomListAdapter.java</code>, and extend it from BaseAdapter. You must override&nbsp;&nbsp;the following methods form BaseAdpter class.</p>
<table>
<tbody>
<tr>
<td><code>getCount()</code></td>
<td>This method returns the total number of row counts for the listview. Typically this contains the size of the list you passing as input.</td>
</tr>
<tr>
<td><code>getItem()</code></td>
<td>Returns object representing data for each row.</td>
</tr>
<tr>
<td><code>getItemId()</code></td>
<td>This returns the unique integer id that represents each row item. Let us return the integer position value.</td>
</tr>
<tr>
<td><code>getView()</code></td>
<td>The getView() method returns a view instance that represents a single row in ListView item. Here you can inflate your own layout and update values on list row.</td>
</tr>
</tbody>
</table>
<p>Checkout the &nbsp;following code snippets for CustomListAdapter class.</p>
<pre class=""prettyprint lang-java"">public class CustomListAdapter extends BaseAdapter {
	private ArrayList&lt;NewsItem&gt; listData;
	private LayoutInflater layoutInflater;

	public CustomListAdapter(Context aContext, ArrayList&lt;NewsItem&gt; listData) {
		this.listData = listData;
		layoutInflater = LayoutInflater.from(aContext);
	}

	@Override
	public int getCount() {
		return listData.size();
	}

	@Override
	public Object getItem(int position) {
		return listData.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	public View getView(int position, View convertView, ViewGroup parent) {
		ViewHolder holder;
		if (convertView == null) {
			convertView = layoutInflater.inflate(R.layout.list_row_layout, null);
			holder = new ViewHolder();
			holder.headlineView = (TextView) convertView.findViewById(R.id.title);
			holder.reporterNameView = (TextView) convertView.findViewById(R.id.reporter);
			holder.reportedDateView = (TextView) convertView.findViewById(R.id.date);
			convertView.setTag(holder);
		} else {
			holder = (ViewHolder) convertView.getTag();
		}

		holder.headlineView.setText(listData.get(position).getHeadline());
		holder.reporterNameView.setText(""By, "" + listData.get(position).getReporterName());
		holder.reportedDateView.setText(listData.get(position).getDate());
		return convertView;
	}

	static class ViewHolder {
		TextView headlineView;
		TextView reporterNameView;
		TextView reportedDateView;
	}
}</pre>
<h3 class=""""><span id=""43_Declaring_ListViewLayout"">Declaring ListView&nbsp;Layout</span></h3>
<p>Declare ListView in your activity layout.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical"" &gt;

    &lt;ListView
        android:id=""@+id/custom_list""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:dividerHeight=""1dp"" /&gt;

&lt;/LinearLayout&gt;</pre>
<h3 class=""""><span id=""44_Hooking_Up_to_Activity"">Hooking Up to Activity</span></h3>
<p>Well, we are almost ready. Let us put all of them together and hook it up to the activity.&nbsp;Following code snippet depicts&nbsp;the&nbsp;activity class (MainActivity.java), where we initialize&nbsp;Adapter and hook it up to ListView.</p>
<pre class=""prettyprint lang-java"">public class MainActivity extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		ArrayList image_details = getListData();
		final ListView lv1 = (ListView) findViewById(R.id.custom_list);
		lv1.setAdapter(new CustomListAdapter(this, image_details));
		lv1.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView&lt;?&gt; a, View v, int position, long id) {
				Object o = lv1.getItemAtPosition(position);
				NewsItem newsData = (NewsItem) o;
				Toast.makeText(MainActivity.this, ""Selected :"" + "" "" + newsData, Toast.LENGTH_LONG).show();
			}
		});
	}

	private ArrayList getListData() {
		ArrayList&lt;NewsItem&gt; results = new ArrayList&lt;NewsItem&gt;();
		NewsItem newsData = new NewsItem();
		newsData.setHeadline(""Dance of Democracy"");
		newsData.setReporterName(""Pankaj Gupta"");
		newsData.setDate(""May 26, 2013, 13:35"");
		results.add(newsData);

                // Add some more dummy data for testing
		return results;
	}
}</pre>

<p><a href=""http://stacktips.com"" target=""_self""></a></p>
<h3 class=""""><span id=""5_StylingAndroid_ListView"">Styling&nbsp;Android ListView</span></h3>
<p>Like any other view, ListView in Android can customized by color, background, selection color, etc. In this section of tutorial, we will learn how to customize an Android ListView.</p>
<h3 class=""""><span id=""51_Changing_ListView_Selection_Color"">Changing ListView Selection Color</span></h3>
<p>ListView default selection color can be changed using selectors. Selectors enables to decide how list row will visually be represented based on different states. Let us change the background and text color while list row is in pressed state.</p>
<p>Create a new file named&nbsp;list_color_selector.xml inside your drawable folder and paste the following code snippets.&nbsp;This selector style will be used to change the background color when list row is pressed.</p>
<pre class=""prettyprint lang-xml"">&lt;selector xmlns:android=""http://schemas.android.com/apk/res/android""&gt;
     &lt;!-- Normal state. --&gt;
    &lt;item android:drawable=""@color/list_row_default_bg"" 
        android:state_pressed=""false"" 
        android:state_selected=""false""/&gt;
    &lt;!-- pressed state. --&gt;
    &lt;item android:drawable=""@color/list_row_pressed_bg"" 
        android:state_pressed=""true""/&gt;
    &lt;!-- Selected state. --&gt;
    &lt;item android:drawable=""@color/list_row_selected_bg"" 
        android:state_pressed=""false"" 
        android:state_selected=""true""/&gt;

&lt;/selector&gt;</pre>
<p>Now, let us create file and&nbsp;named it as list_item_text_selector.xml. This style will be used to change the text color while list row is pressed.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;selector xmlns:android=""http://schemas.android.com/apk/res/android""&gt;
    &lt;item android:state_pressed=""true"" android:color=""@color/text_color_inverse"" /&gt;
    &lt;item android:state_focused=""true"" android:color=""@color/text_color_inverse"" /&gt;
    &lt;item android:color=""@color/text_color_default"" /&gt;
&lt;/selector&gt;</pre>
<p>Define the following colors inside colors.xml file. If you don’t have colors.xml file already than create one inside values folder and paste the following code snippets.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;resources&gt;
    &lt;color name=""text_color_default""&gt;#00000C&lt;/color&gt;
    &lt;color name=""text_color_inverse""&gt;#FFFFFF&lt;/color&gt;
    &lt;color name=""white""&gt;#FFFFFF&lt;/color&gt;
    &lt;color name=""list_row_default_bg""&gt;#ffffff&lt;/color&gt;
    &lt;color name=""list_row_pressed_bg""&gt;#008cef&lt;/color&gt;
    &lt;color name=""list_row_selected_bg""&gt;#86d3f6&lt;/color&gt;
&lt;/resources&gt;</pre>
<p>Now let us apply the list selector styles to ListView inside&nbsp;activity_main.xml file</p>
<pre class=""prettyprint lang-xml""> &lt;ListView
        android:id=""@+id/custom_list""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:listSelector=""@drawable/list_color_selector""
        android:dividerHeight=""1dp"" /&gt;</pre>
<p>Now, we can apply the styles to text in “list_row_layout.xml”. Change all TextView widget textColor attribute as shown below</p>
<pre class=""prettyprint lang-xml"">&lt;TextView
        android:id=""@+id/title""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""""
        android:textColor=""@drawable/list_item_text_selector""
        android:textStyle=""bold""
        android:typeface=""sans"" /&gt;</pre><h3 class=""""><span id=""52_ListView_Divider_Style"">ListView Divider Style</span></h3>
<p>You can use the following properties to change the list divider styles</p>
<ol>
<li>The <code>android:divider</code> property is used to set the list divider color. It accepts the color in <code>#RRGGBBAA</code> format. It also accepts reference to the drawable, which will be shown as list drawable.</li>
<li>The <code>android:dividerHeight</code> property used to set the height of list divider. It can be defined in dp.</li>
</ol>
<pre class=""prettyprint lang-xml"">&lt;ListView
        android:id=""@+id/custom_list""
        android:layout_width=""fill_parent""
        android:layout_height=""wrap_content""
        android:divider=""#FF0000""
        android:dividerHeight=""1dp""
        android:listSelector=""@drawable/list_selector_flatcolor"" /&gt;</pre>
<h3 class=""""><span id=""53ChangingList_Divider_Pragmatically"">Changing&nbsp;List Divider Pragmatically</span></h3>
<p>You can also change the list view divider style programmatically form java code using <code>setDivider()</code> method.</p>
<pre class=""prettyprint lang-java"">ListView listView = getListView();
ColorDrawable devidrColor = new ColorDrawable(
      this.getResources().getColor(R.color.devidrColor));
listView.setDivider(devidrColor);
listView.setDividerHeight(1);</pre>
<p><a href=""http://stacktips.com"" target=""_self""></a></p>",0,"standard","post"
"Normalize all whites paces from string","normalize-white-spaces-from-string","Java provides the StringBuffer and String classes, and the String class is used to manipulate character strings that&hellip;
","LIVE","<p>Java provides the StringBuffer and String classes, and the String class is used to manipulate character strings that cannot be changed. Simply stated, objects of type String are read only and immutable. The StringBuffer class is used to represent characters that can be modified.</p>
<p>The significant performance difference between these two classes is that StringBuffer is faster than String when performing simple concatenations. In String manipulation code, character strings are routinely concatenated. Using the StringBuffer Class we can remove the White spaces from a string.</p>
<pre class=""prettyprint lang-java"">String normalizeWhitespaces(String s) {
		StringBuffer res = new StringBuffer();
		int prevIndex = 0;
		int currIndex = -1;
		int stringLength = s.length();
		String searchString = "" "";
		while ((currIndex = s.indexOf(searchString, currIndex + 1)) &gt;= 0) {
			res.append(s.substring(prevIndex, currIndex + 1));

			while (currIndex &lt; stringLength &amp;&amp; s.charAt(currIndex) == ' ') {
				currIndex++;
			}

			prevIndex = currIndex;
		}
		res.append(s.substring(prevIndex));

		return res.toString();
	}
</pre>
",0,"standard","post"
"Download Image using AsyncTask in Android","download-image-using-asynctask-in-android","This tutorial explains how to download Image using AsyncTask in Android. The example below download image while showing progress bar while during download.
","LIVE","<p>This tutorial explains how to download Image using AsyncTask in Android. The example below download image while showing progress bar while during download.</p>
<h2>Understanding Android AsynkTask</h2>
<p>Async task enables you to implement MultiThreading without get Hands dirty into threads. AsyncTask enables proper and easy use of the UI thread. It allows performing background operations and passing the results on the UI thread. If you are doing something isolated related to UI, for example downloading data to present in a list, go ahead and use AsyncTask.</p>
<ul>
<li>AsyncTasks should ideally be used for short operations (a few seconds at the most.)</li>
<li>An asynchronous task is defined by 3 generic types, called Params, Progress and Result, and 4 steps, called onPreExecute, doInBackground, onProgressUpdate and onPostExecute.</li>
<li>In onPreExecute you can define code, which need to be executed before background processing starts.</li>
<li>doInBackground have code which needs to be executed in background, here in doInBackground we can send results to multiple times to event thread by publishProgress() method, to notify background processing has been completed we can return results simply.</li>
<li>onProgressUpdate() method receives progress updates from doInBackground method, which is published via publishProgress method, and this method can use this progress update to update event thread</li>
<li>onPostExecute() method handles results returned by doInBackground method.</li>
<li>The generic types used are
<ul>
<li>Params, the type of the parameters sent to the task upon execution</li>
<li>Progress, the type of the progress units published during the background computation.</li>
<li>Result, the type of the result of the background computation.</li>
</ul>
</li>
<li>If an async task not using any types, then it can be marked as Void type.</li>
<li>An running async task can be cancelled by calling cancel(boolean) method.</li>
</ul>
<h2>Downloading image using Android AsyncTask</h2>
<pre class=""prettyprint lang-xml"">
&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;

&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
android:layout_width=""fill_parent""
android:layout_height=""fill_parent""
android:orientation=""vertical"" &gt;

&lt;Button
android:id=""@+id/downloadButton""
android:layout_width=""match_parent""
android:layout_height=""wrap_content""
android:text=""Click Here to Download"" /&gt;

&lt;ImageView
android:id=""@+id/imageView""
android:layout_width=""match_parent""
android:layout_height=""match_parent""
android:contentDescription=""Your image will appear here"" &gt;
&lt;/ImageView&gt;

&lt;/LinearLayout&gt;</pre>
<p>.java class</p>
<pre class=""prettyprint lang-java"">
package com.javatechig.droid;

import java.io.InputStream;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import android.app.Activity;
import android.app.ProgressDialog;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;

public class ImageDownladerActivity extends Activity {

	private ImageView downloadedImg;
	private ProgressDialog simpleWaitDialog;
	private String downloadUrl = ""http://www.9ori.com/store/media/images/8ab579a656.jpg"";

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.asynch);
		Button imageDownloaderBtn = (Button) findViewById(R.id.downloadButton);

		downloadedImg = (ImageView) findViewById(R.id.imageView);

		imageDownloaderBtn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				new ImageDownloader().execute(downloadUrl);
			}

		});
	}

	private class ImageDownloader extends AsyncTask {

		@Override
		protected Bitmap doInBackground(String... param) {
			// TODO Auto-generated method stub
			return downloadBitmap(param[0]);
		}

		@Override
		protected void onPreExecute() {
			Log.i(""Async-Example"", ""onPreExecute Called"");
			simpleWaitDialog = ProgressDialog.show(ImageDownladerActivity.this,
					""Wait"", ""Downloading Image"");

		}

		@Override
		protected void onPostExecute(Bitmap result) {
			Log.i(""Async-Example"", ""onPostExecute Called"");
			downloadedImg.setImageBitmap(result);
			simpleWaitDialog.dismiss();

		}

		private Bitmap downloadBitmap(String url) {
			// initilize the default HTTP client object
			final DefaultHttpClient client = new DefaultHttpClient();

			//forming a HttoGet request 
			final HttpGet getRequest = new HttpGet(url);
			try {

				HttpResponse response = client.execute(getRequest);

				//check 200 OK for success
				final int statusCode = response.getStatusLine().getStatusCode();

				if (statusCode != HttpStatus.SC_OK) {
					Log.w(""ImageDownloader"", ""Error "" + statusCode + 
							"" while retrieving bitmap from "" + url);
					return null;

				}

				final HttpEntity entity = response.getEntity();
				if (entity != null) {
					InputStream inputStream = null;
					try {
						// getting contents from the stream 
						inputStream = entity.getContent();

						// decoding stream data back into image Bitmap that android understands
						final Bitmap bitmap = BitmapFactory.decodeStream(inputStream);

						return bitmap;
					} finally {
						if (inputStream != null) {
							inputStream.close();
						}
						entity.consumeContent();
					}
				}
			} catch (Exception e) {
				// You Could provide a more explicit error message for IOException
				getRequest.abort();
				Log.e(""ImageDownloader"", ""Something went wrong while"" +
						"" retrieving bitmap from "" + url + e.toString());
			} 

			return null;
		}
	}
}</pre>
<p>Output of the above code is<br/>
<a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-full wp-image-1096"" height=""475"" loading=""lazy"" src=""/media/uploads/articles/433/image-downloader-thumb.png"" srcset="""" title=""image-downloader-thumb"" width=""406""/></a></p>
<p><strong><a href=""https://github.com/javatechig/javatechig-android-advanced/tree/master/com.javatechig.imagedownloader"" rel=""nofollow noopener noreferrer"" target=""_blank"">Download Complete eclipse project from GitHub</a></strong></p>
",0,"standard","post"
"Android Styles and Themes Tutorial","android-styles-and-themes-tutorial","This tutorial describes how to create and use styles and themes in Android applications with examples and code snippets.","LIVE","<p>This tutorial describes how to create and use styles and themes in Android applications with examples and code snippets.</p>
<h2 class=""""><span id=""1_Android_Design_Patterns"">1. Android Design Patterns</span></h2>
<p>Android is one among the most matured mobile platform today. Like every platforms, android development follows certain guidelines and patterns. The patterns are derived in order to make the app look amazing, simplifying life, and to provide the best performance. Google developers insist to follow the platform design guidelines for developing android applications. Remember to focus on below three overreaching goals while developing your applications</p>
<ol>
<li>Application should be usable and easy to understand</li>
<li>Your app should strive to combine beauty. But remember not to make it too complex</li>
<li>Make your app not to heavy, it should be responsive.</li>
</ol>
<p>Check out Google’s official design pattern guidelines <a href=""http://developer.android.com/design/get-started/creative-vision.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">here.</a><span> </span></p>
<h2 class=""""><span id=""2_UsingCustomStyles"">2. Using Custom Styles</span></h2>
<p>Android supports customizing view and widgets by applying styles. A style is a collection of properties that specify the look and format for a View or widget. A style can specify properties such as height, padding, font color, font size, background color, and much more. In Android Styles works similar to CSS (cascading stylesheets) that are used in web designing application.</p>
<p>In android Style’s are XML files that are placed in the <code>/res/values</code> directory of your project. The root node of the XML file must be <code>&lt;resources&gt;</code> and you use a style tag that includes the name attribute. This tag contains than more or more item tags which define values for named attributes. For example, the below example we will create a <code>TextView</code> in android using XML layout editor.</p>
<pre class=""prettyprint lang-xml"">&lt;TextView
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""
    android:text=""@string/hello_world""
    android:textColor=""#006633""
    android:background=""#f0f0f0""
    android:typeface=""monospace""
    android:textStyle=""italic""
    android:padding=""5dp""&gt;
&lt;/TextView&gt;</pre>
<p>This works great for us, but what if we have to use the same or similar TextView style at multiple places in our application??  Yes, we can surely achieve this by copying  the same style in multiple places. But that will result in following problems</p>
<ol>
<li>What if we have to re-skinning our application tomorrow? We have to change in all over the places we have used the color, styles. And I am sure this will consume quite a lot time.</li>
<li>We will end up writing repetitive code, which is again difficult to maintain.</li>
</ol>
<p>Sounds Frustrating? Now, we can overcome this by declaring a style for the <code>TextView</code>. A single style can be used by multiple places in our application. Change in the style at single place will reflect the changes all over. Sounds interesting? Let us see the below code snippet.</p>
<pre class=""prettyprint lang-xml"">&lt;TextView
    android:id=""@+id/textView2""
    style=""@style/MtTextViewStyle"" 
    android:text=""@string/hello_world""&gt;
&lt;/TextView&gt;</pre>
<p>In this above code snippet, the <code>TextView</code> is referencing <code>@style/MyTextViewStyle</code> style.</p>
<h3 class=""""><span id=""21_Defining_Style_Class"">2.1. Defining Style Class</span></h3>
<p>A style xml file can be declared separately and that can be used or applied in other layout files. We can create a new xml file and save it in the <code>res/values/ directory</code> of your project. The root node of the XML file must be <code>&lt;resources&gt;</code>.</p>
<p>Multiple styles can be defined in a single <code>style.xml</code> file. For each style you want to create, add a &lt;style&gt; element to the file with a name that uniquely identifies the style. Then add an <code>&lt;item&gt;</code> element for each property of that style, with a name that declares the style property and a value to go with it. The value for the <code>&lt;item&gt;</code> can be a keyword string, a hex color, a reference to another resource type, or other value depending on the style property.</p>
<p>Here is the style we have defined for the TextView example</p>
<pre class=""prettyprint lang-xml"">&lt;style name=""MyTextViewStyle""&gt;
    &lt;item name=""android:layout_width""&gt;fill_parent&lt;/item&gt;
    &lt;item name=""android:layout_height""&gt;wrap_content&lt;/item&gt;
    &lt;item name=""android:textColor""&gt;#006633&lt;/item&gt;
    &lt;item name=""android:typeface""&gt;monospace&lt;/item&gt;
    &lt;item name=""android:background""&gt;#f0f0f0&lt;/item&gt;
    &lt;item name=""android:textStyle""&gt;italic&lt;/item&gt;
    &lt;item name=""android:padding""&gt;5dp&lt;/item&gt;    
&lt;/style&gt;</pre>
<h3 class=""""><span id=""22_Apply_a_Style_to_View"">2.2. Apply a Style to View</span></h3>
<p>Here’s how to set a style for a View in the XML layout:</p>
<pre class=""prettyprint lang-xml"">&lt;TextView
    android:id=""@+id/textView2""
    style=""@style/MyTextViewStyle"" 
    android:text=""@string/hello_world""&gt;
&lt;/TextView&gt;</pre>
<p>Now this TextView will be styled as defined by the style named <code><strong>MyTextViewStyle</strong></code></p>
<h3 class=""""><span id=""23Inheriting_Built-in_Platform_Styles"">2.3. Inheriting Built-in Platform Styles</span></h3>
<p>The parent attribute in the <code>&lt;style&gt;</code> element lets you specify a style from which your style should inherit properties. You can use this to inherit properties from an existing style and then define only the properties that you want to change or add. You can inherit from styles that you’ve created yourself or from styles that are built into the platform.</p>
<p>Below code snippet inherits the android platform’s default text appearance and then modify it <code>@android:style/TextAppearance.Large</code></p>
<pre class=""prettyprint lang-xml"">&lt;style name=""MyTextViewStyle"" parent=""@android:style/TextAppearance.Large""&gt;
        &lt;item name=""android:layout_width""&gt;fill_parent&lt;/item&gt;
        &lt;item name=""android:layout_height""&gt;wrap_content&lt;/item&gt;
        &lt;item name=""android:textColor""&gt;#006633&lt;/item&gt;
        &lt;item name=""android:typeface""&gt;monospace&lt;/item&gt;
        &lt;item name=""android:background""&gt;#f0f0f0&lt;/item&gt;
        &lt;item name=""android:textStyle""&gt;italic&lt;/item&gt;
        &lt;item name=""android:padding""&gt;5dp&lt;/item&gt;
&lt;/style&gt;</pre>
<h3 class=""""><span id=""24_Inheriting_Self_Defined_Styles"">2.4. Inheriting Self Defined Styles</span></h3>
<p>Android allows you to inherit other styles defined in the applications. Find the example below</p>
<pre class=""prettyprint lang-xml"">&lt;style name=""MyTextViewStyle"" parent=""@android:style/TextAppearance.Large""&gt;
        &lt;item name=""android:layout_width""&gt;fill_parent&lt;/item&gt;
        &lt;item name=""android:layout_height""&gt;wrap_content&lt;/item&gt;
        &lt;item name=""android:textColor""&gt;#006633&lt;/item&gt;
        &lt;item name=""android:typeface""&gt;monospace&lt;/item&gt;
        &lt;item name=""android:background""&gt;#f0f0f0&lt;/item&gt;
        &lt;item name=""android:textStyle""&gt;italic&lt;/item&gt;
        &lt;item name=""android:padding""&gt;5dp&lt;/item&gt;
    &lt;/style&gt;

    &lt;style name=""MyTextViewStyle.BoldRed""&gt;
        &lt;item name=""android:textColor""&gt;#FF0000&lt;/item&gt;
        &lt;item name=""android:textStyle""&gt;bold&lt;/item&gt;
    &lt;/style&gt;</pre>
<p>Notice that there is no parent attribute in the &lt;style&gt; tag, but because the name attribute begins with the <code>MyTextViewStyle</code> style name, which is a style that you have created. <code>MyTextViewStyle.BoldRed</code> style inherits all style properties from that <code>MyTextViewStyle</code>.  This style then overrides the android:textColor and android:textStyle property to make the text red and bold. The newly created style can be referenced from <code>TextView</code> as <code>@style/MyTextViewStyle.BoldRed</code>.</p>
<p>You can continue inheriting like this as many times as you’d like, by chaining names with periods.</p>
<pre class=""prettyprint lang-xml"">&lt;style name=""MtTextViewStyle"" parent=""@android:style/TextAppearance.Large""&gt;
        &lt;item name=""android:layout_width""&gt;fill_parent&lt;/item&gt;
        &lt;item name=""android:layout_height""&gt;wrap_content&lt;/item&gt;
        &lt;item name=""android:textColor""&gt;#006633&lt;/item&gt;
        &lt;item name=""android:typeface""&gt;monospace&lt;/item&gt;
        &lt;item name=""android:background""&gt;#f0f0f0&lt;/item&gt;
        &lt;item name=""android:textStyle""&gt;italic&lt;/item&gt;
        &lt;item name=""android:padding""&gt;5dp&lt;/item&gt;
    &lt;/style&gt;

    &lt;style name=""MtTextViewStyle.BoldRed""&gt;
        &lt;item name=""android:textColor""&gt;#FF0000&lt;/item&gt;
        &lt;item name=""android:textStyle""&gt;bold&lt;/item&gt;
    &lt;/style&gt;

    &lt;style name=""MtTextViewStyle.BoldRed.Big""&gt;
        &lt;item name=""android:textSize""&gt;30sp&lt;/item&gt;
    &lt;/style&gt;</pre>
<p>This inherits from both <code>MyTextViewStyle</code> and <code>MyTextViewStyle.BoldRed</code> styles, then adds the <code>android:textSize</code> property.</p>
<h2 class=""""><span id=""3Applying_Activity_Themes"">3. Applying Activity Themes</span></h2>
<p>A theme is a style applied to an entire activity or application, rather than an individual View. The technique of defining a theme is the same as defining a style.</p>
<pre class=""prettyprint lang-xml"">&lt;style name=""MyTheme"" parent=""android:Theme.Light""&gt;
        &lt;item name=""android:windowNoTitle""&gt;true&lt;/item&gt;
        &lt;item name=""android:colorBackground""&gt;@color/default_bg&lt;/item&gt;
&lt;/style&gt;</pre>
<p>The above code, overrides the default <code>android:Theme.Light</code> theme and overrides <code>android:windowNoTitle</code> property.</p>
<p>To set a theme for all the activities of your application, open the AndroidManifest.xml file and edit the &lt;application&gt; tag to include the android:theme attribute with the style name. For example</p>
<pre class=""prettyprint lang-xml"">&lt;application android:theme=""@style/MyTheme""&gt;</pre>
<p>If you want a theme applied to just one Activity in your application, then add the android:theme attribute to the <code>&lt;activity&gt;</code> tag.</p>
<h2 class=""""><span id=""4_Using_Nine-PatchBackground"">4. Using Nine-Patch Background</span></h2>
<p>A nine-patch drawable is a special kind of image which can be scaled in width and height while maintaining its visual integrity. Nine-patches are the most common way to specify the appearance of Android buttons, though any drawable type can be used. Notice the one pixel black lines around the edge; they control the scaling of the image.</p>
<p>Below are the images used in this example</p>
<div class=""pk-col-md-1"">
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""ic_green_button.9"" class=""wp-image-3616 size-medium alignnone"" height=""69"" loading=""lazy"" src=""/media/uploads/articles/434/ic_green_button.9-300x69.png"" srcset="""" width=""300""/></a></p>
</div>
<div class=""pk-col-md-1"">
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""ic_orange_button.9"" class=""wp-image-3617 size-medium alignnone"" height=""69"" loading=""lazy"" src=""/media/uploads/articles/434/ic_orange_button.9-300x69.png"" srcset="""" width=""300""/></a><br/>
</p></div>
<ol>
<li>Save this bitmap inside drawable folder <code>/res/drawable/ic_green_button.9.png</code></li>
<li>You may define a new style as explained below. Here we have created two styles <code>MyButton.Green</code> and <code>MyButton.Orange</code> for creating two buttons.</li>
</ol>
<pre class=""prettyprint lang-xml"">&lt;style name=""MyButton"" parent=""android:Widget.Button""&gt;
        &lt;item name=""android:layout_width""&gt;fill_parent&lt;/item&gt;
        &lt;item name=""android:layout_height""&gt;wrap_content&lt;/item&gt;
        &lt;item name=""android:textColor""&gt;#ffffff&lt;/item&gt;
         &lt;item name=""android:textSize""&gt;22sp&lt;/item&gt;
    &lt;/style&gt;

     &lt;style name=""MyButton.Green""&gt;
        &lt;item name=""android:background""&gt;@drawable/ic_green_button&lt;/item&gt;
    &lt;/style&gt;

      &lt;style name=""MyButton.Orange""&gt;
       &lt;item name=""android:background""&gt;@drawable/ic_orange_button&lt;/item&gt;
    &lt;/style&gt;</pre>
<ol>
<li>Apply the new button style to your button created inside your layout xml.</li>
</ol>
<pre class=""prettyprint lang-xml"">     &lt;Button
         style=""@style/MyButton.Green""
         android:text=""GREEN BUTTON"" /&gt;

     &lt;Button
         style=""@style/MyButton.Orange""
         android:text=""ORANGE BUTTON"" /&gt;</pre>
<h1><span id=""5Using_Selector"">5. Using Selector</span></h1>
<p>A selector is a drawable which changes based on state. Here is an example selector which switches between two images or two colors. For example, create <code>/res/drawable/button_selector.xml</code> to display two images depending on the button state.</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;selector xmlns:android=""http://schemas.android.com/apk/res/android""&gt;

    &lt;item android:drawable=""@drawable/ic_green_button"" android:state_pressed=""true""/&gt;
    &lt;item android:drawable=""@drawable/ic_orange_button""/&gt;

&lt;/selector&gt;</pre>
<p>Now you can use this selector as the drawable applied to the button style.</p>
<pre class=""prettyprint lang-xml"">  &lt;style name=""MyButton.Orange.Selector""&gt;
       &lt;item name=""android:background""&gt;@drawable/button_selector&lt;/item&gt;
  &lt;/style&gt;</pre>
<h2 class=""""><span id=""6_Gradient_Drawables"">6. Gradient Drawables</span></h2>
<p>We can define gradients in android xml file and apply to the interface. You can a gradient file in drawable folder <code>/res/drawable/my_gradient.xml</code> and add the following code</p>
<pre class=""prettyprint lang-xml"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;shape xmlns:android=""http://schemas.android.com/apk/res/android""
    android:shape=""rectangle"" &gt;

    &lt;gradient
        android:angle=""270""
        android:endColor=""#62c4e7""
        android:startColor=""#4a557c"" /&gt;

&lt;/shape&gt;</pre>
<p>Now apply the style to the button as background property</p>
<pre class=""prettyprint lang-xml"">   &lt;style name=""MyButton.Orange.Gradient""&gt;
       &lt;item name=""android:background""&gt;@drawable/my_gradient&lt;/item&gt;
    &lt;/style&gt;</pre>
<h2 class=""""><span id=""7MakeActivity_LookLike_Dialog"">7. Make Activity Look Like Dialog</span></h2>
<p>Android provides other built-in themes and styles which can be used without rewriting them yourself. You can use the Dialog theme and make your Activity appear like a dialog box</p>
<pre class=""prettyprint lang-xml"">&lt;activity android:theme=""@android:style/Theme.Dialog""&gt;</pre>
<p>Or if you want the background to be transparent, use the translucent theme:</p>
<pre class=""prettyprint lang-xml"">&lt;activity android:theme=""@android:style/Theme.Translucent""&gt;</pre>
<p><a href=""http://stacktips.com"" target=""_self""></a></p>",0,"standard","post"
"What is Phonegap Cordova","what-is-phonegap","This section of the tutorial will help you understand &#8220;what is phonegap cordova&#8221; 1. About PhoneGap PhoneGap is&hellip;
","LIVE","<p>This section of the tutorial will help you understand “what is phonegap cordova”<br/>

<h2><span id=""1_About_PhoneGap"">1. About PhoneGap</span></h2>
<p>PhoneGap is an open source development framework for building cross platform mobile apps. It is a wrapper used for native packaging of mobile web application. It is developed by Nitobi, a company based in Vancouver, Canada. Nitobi was acquired by Adobe Corporation on the year of 2011. After the acquisition Adobe released PhoneGap technology as open source under the name Apache Cordova.</p>
<h2><span id=""2_What_is_PhoneGap_Cordova"">2. What is PhoneGap Cordova</span></h2>
<p>Mobile market is huge with bunch of opportunities. At the same time it is really painful experience for the developers to make an application reach to the wider audience. There are multiple platforms like android, iPhone, Blackberry, windows comes with lot different capabilities. Every platform uses different programming language syntax and different distribution process. As the programming platforms are different, developing an application requires putting the separate development effort for different platforms.</p>
<p>Below table explains the languages, tools and application formats accepted by different app stores for different mobile platforms.</p>
<div align=""center"">
<table border=""1"" cellpadding=""5"" cellspacing=""1"" width=""70%"">
<tbody>
<tr bgcolor=""#CACACA"">
<td valign=""top""></td>
<td valign=""top""><strong>iOS</strong></td>
<td valign=""top""><strong>Android</strong></td>
<td valign=""top""><strong>Blackberry</strong></td>
<td valign=""top""><strong>Windows</strong></td>
</tr>
<tr bgcolor=""#FFFFFF"">
<td valign=""top"">Language</td>
<td valign=""top"">Objective C</td>
<td valign=""top"">Java</td>
<td valign=""top"">Java</td>
<td valign=""top"">C#, .NET.</td>
</tr>
<tr>
<td valign=""top"">Tools</td>
<td valign=""top"">Xcode</td>
<td valign=""top"">Android SDK</td>
<td valign=""top"">Blackberry SDK</td>
<td valign=""top"">Windows Dev. Tools</td>
</tr>
<tr bgcolor=""#FFFFFF"">
<td valign=""top"">Packaging format</td>
<td valign=""top"">.app</td>
<td valign=""top"">.apk</td>
<td valign=""top"">.cod</td>
<td valign=""top"">.xap</td>
</tr>
<tr>
<td valign=""top"">App Stores</td>
<td valign=""top"">Apple</td>
<td valign=""top"">Android Market</td>
<td valign=""top"">Blackberry app World</td>
<td valign=""top"">Windows</td>
</tr>
</tbody>
</table>
</div>
<div align=""left"">
<p>Below are the challenges today to maintain the application for different platforms</p>
<ul>
<li>Development tools and programming languages are different for different platforms, which require developers with different skillsets.</li>
<li>Developing the application for different platforms is cost effective</li>
<li>As development is different for different platforms, we will have different source code as a result code base gets messy and becomes difficult for maintenance and support</li>
<li>Time to market increases as need parallel development and bigger team need</li>
</ul>
<h2><span id=""3_Revolution_of_Cross_Platform_Application_development"">3. Revolution of Cross Platform Application development</span></h2>
<p>Due to the above challenges, there’s revolution of cross platform mobile application development. Cross platform approach or in another word web approach. In this approach, the application development will be using HTML, CSS, and JavaScript technologies. HTML and Java Script is platform independent as it runs on browser. The below table displays the basic different between</p>
<table border=""1"" cellpadding=""2"" cellspacing=""0"">
<tbody>
<tr bgcolor=""#CACACA"">
<td valign=""top"" width=""320""><strong>Native App</strong></td>
<td valign=""top"" width=""319""><strong>Mobile Web  App</strong></td>
</tr>
<tr>
<td valign=""top"" width=""320"">
<ul>
<li>Designed to run on device operating system and machine firmware</li>
<li>It can run offline as standalone app</li>
<li>It typically need to be adapted/adjusted for different device</li>
<li>Developed using the platform native SDK or programming languages.</li>
<li>Writing differently for different platforms</li>
</ul>
</td>
<td valign=""top"" width=""319"">
<ul>
<li>All or some part of the software downloaded from web each time it runs</li>
<li>It is usually accessible form all mobile platforms</li>
<li>It runs on browser</li>
<li>Developed using HTML, JavaScript, CSS, and SASS. Same code can run on different platforms.</li>
<li><span style=""line-height: 19px;"">Write once and execute anywhere</span></li>
</ul>
</td>
</tr>
</tbody>
</table>
</div>
<div align=""left""></div>
<div align=""left""><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter wp-image-629"" height=""243"" loading=""lazy"" src=""/media/uploads/articles/435/pic2.bmp"" srcset="""" title=""phonegap-2"" width=""365""/></a></div>
<div align=""left"" style=""text-align: center;"">(Image above illustrates basic web approach application development)</div>
<div align=""left"" style=""text-align: center;""></div>
<div align=""left"" style=""text-align: left;"">Today many application frameworks like Sencha Touch, iUI, JQueery Mobile, etc. provides extensive support for the HTML5 features and useful in many ways to create a mobile web application. But all the above frameworks rely entirely on web technologies, you can easily host those apps on your web server and have your users find and access them directly from their browsers.</div>
<div align=""left"" style=""text-align: left;"">
<p>Sometimes though, you’ll want to distribute your application in different ways, including via various app stores. Imagine the best of both worlds: build an application with HTML5, JavaScript or some other competing web frameworks, and then distribute it alongside all of those other native apps.</p>
<h2><span id=""4_Limitations_with_HTML5_JavaScript_based_application"">4. Limitations with HTML5 &amp; JavaScript based application</span></h2>
<p>Although HTML5 is a breakthrough in the mobility space, it couldn’t applaud the way it aimed to achieve it. It doesn’t allow developers to access the native mobile app capability like Camera, GPS, Barcode Scanning, etc. Here is the need of PhoneGap (Codova)</p>
<h2><span id=""5_PhoneGap_Features"">5. PhoneGap Features</span></h2>
<p>PhoneGap is an open source development framework for building cross platform mobile apps. It allows you to package your mobile web application code and resources into a binary app and ready to distribute to Apple, Android, Palm, Symbian, and BlackBerry devices. It is not only the purpose of PhoneGap to distribute the web application to application store. It is also providing the feature to access the device hardware from web application.</p>
</div>
<div align=""left"" style=""text-align: left;""> <a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-full wp-image-633"" height=""589"" loading=""lazy"" src=""/media/uploads/articles/435/phonegap-archiecture.png"" srcset="""" title=""phonegap-archiecture"" width=""556""/></a></div>
<div align=""left"" style=""text-align: left;"">
<p>So, if you’ve ever wondered how to make your mobile web app access a handset’s file-system, use JavaScript to make it vibrate, prompt users to use the camera, or even check the device’s current network state, then PhoneGap approach is the answer.</p>
<h2><span id=""6_PhoneGap_supported_platforms"">6. PhoneGap supported platforms</span></h2>
<ul>
<li>iPhone / iPhone 3G and Higher</li>
<li>Blackberry OS 5.x and Newer</li>
<li>Android</li>
<li>Web OS</li>
<li>Windows Phone 7</li>
<li>Symbian</li>
<li>Bada</li>
</ul>
<p><strong> </strong>Hardware Features support table</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt="""" class=""aligncenter size-full wp-image-634"" height=""624"" loading=""lazy"" sizes=""(max-width: 1009px) 100vw, 1009px"" src=""/media/uploads/articles/435/phonegap-features.png.bmp.png"" srcset="""" title=""phonegap-features.png.bmp"" width=""1009""/></a></p>
<h2><span id=""7_Advantages_of_PhoneGap_Cordova"">7. Advantages of PhoneGap (Cordova)</span></h2>
<ul>
<li>One codebase can be maintained for multiple platforms</li>
<li>Reuse existing web developer skills</li>
<li>Faster development</li>
<li>Based on open standards</li>
</ul>
</div>
</p>",0,"standard","post"
"Sencha Touch Button Example","sencha-touch-button-example","This section of the tutorial explains Sencha Touch Button Example with different styles. Below you will find a live&hellip;","LIVE","<p>This section of the tutorial explains Sencha Touch Button Example&nbsp;with different styles. Below you will find a live example, which demonstrates the code snippet shared below. </p><p>The buttons are styled based on the UI configuration option, determines the UI look and feel of the button. Supported button configuration types are <code>normal</code>, <code>back</code>, <code>round</code>, <code>action</code>, <code>forward</code>, <code>decline</code>, <code>confirm </code> and <code>small</code>. The <code>round</code> and <code>small&nbsp; </code> UIs can also be appended to the other options – for example ‘confirm-small’, ‘action-round’, ‘forward-small’ etc. Defaults to ‘normal’</p>
<p>Here is the basic example of Sencha Touch UI controls.</p>
<pre class=""prettyprint lang-javascript"">Ext.setup({
	icon : 'icon.png',
	tabletStartupScreen : 'tablet_startup.png',
	phoneStartupScreen : 'phone_startup.png',
	glossOnIcon : false,

	onReady : function() {
		var formBase = new Ext.form.FormPanel({
			fullscreen: true,
			layout: ""vbox"",			
			items: [
              {
                xtype: ""button"",
                ui: ""normal"",
                text: ""Normal Button""  
              },
              {
                xtype: ""button"",
                ui: ""back"",
                text: ""Backward  Button""  
              },{
                xtype: ""button"",
                ui: ""forward"",
                text: ""Forward  Button""  
              },
              {
                xtype: ""button"",
                ui: ""round"",
                text: ""Round  Button""  
              },
              {
                xtype: ""button"",
                ui: ""action"",
                text: ""Action  Button""  
              },              
              {
              	xtype: ""button"",
                ui: ""decline"",
                text: ""Decline  Button""  
              },
              {
              	xtype: ""button"",
                ui: ""decline-round"",
                text: ""Decline Round""  
              }
            ]
		});

		Ext.apply(formBase, {
			fullscreen : true,
			autoRender : true,
			hideOnMaskTap : false
		});

		formBase.show();
	}
});</pre>
<p>Below is how the output of the above code.</p>Note that, this example will work only on web-kit browser that supports Sencha touch. For best results you may use Google chrome browser or safari.
<p><iframe height=""280"" loading=""lazy"" scrolling=""no"" src=""http://stacktips.com/examples/sencha/buttonexample/index.html"" width=""100%""></iframe></p>
<p>Now, let’s make it responsive. Here we will add some event handler function to the button, which will respond the user click on the button.</p>
<pre class=""prettyprint lang-javascript"">{
  xtype: ""button"",
  ui: ""decline"",
  text: ""Decline  Button"" ,
  handler: function () {
     	alert(""Decline Button Pressed!!"");                
  }
}</pre>
<p>Here, in this above code I am using handler for the button. On user click, it will just show the alert in the screen.</p>
<p>Here is the example for that makes use of Button components both by xtype as well as via their constructors. First create the object Button using Ext.Button Class Constructor and then add declineBtn to formPannel items.</p>
<pre class=""prettyprint lang-javascript"">var declineBtn = new Ext.Button({
	id: 'sampleBtn',
      ui: ""decline"",
      text: ""Decline  Button"" ,
      handler: function () {
        	alert(""Decline Button Pressed!!"");                
      }
});</pre>
<p>Sencha touch comes with an array of beautiful icons for almost every need of your app. You can use them using the iconMask and iconCls property. You can find those images inside the resources/picto directory of Sencha downloaded resource.</p>
<pre class=""prettyprint lang-json"">{
   xtype: ""button"",
   ui: ""decline-round"",
   text: ""Decline Round"",     
   iconCls : 'add',
   iconMask : true
}</pre>
<p>However, if you’ve made a few apps you’ll realize that not all the icons in the resources folder work in the iconCls.</p>",0,"standard","post"
"Getting Started with Sencha Touch","getting-started-with-sencha-touch","This section of the tutorial will help you Getting Started with Sencha Touch features.  It will help you&hellip;","LIVE","<div class=""postnote"">
</div>
<div class=""postnote""></div>
<div class=""postnote"">This section of the tutorial will help you Getting Started with Sencha Touch features. &nbsp;It will help you get an understanding on props and cons of sencha touch framework for cross platform application development.</div>
<h2 class=""""><span id=""1_Introduction"">Introduction</span></h2>
<p>Sencha Touch is a cross-platform framework aimed at next generation, touch enabled devices. It is probably one of the most powerful mobile web app frameworks out there and the best suited to handle complex web applications that need to replicate a native app. It’s currently compatible with Apple iOS 3+, Android 2.1+, and BlackBerry 6+ devices.</p>
<p><strong>Language Used:</strong> HTML5, CSS3, and JavaScript</p>
<h2 class=""""><span id=""2_Built_with_Web_Standards"">Built with Web Standards</span></h2>
<ul>
<li>Sencha Touch is the world’s first app framework built specifically to leverage HTML5, CSS3, and Javascript for the highest level of power, flexibility, and optimization.</li>
<li>Using the HTML5 to deliver components like audio and video, as well as a local Storage proxy for saving data offline.</li>
<li>We have made extensive use of CSS3 in our stylesheets to provide the most robust styling layer possible.</li>
<li>The entire library is under 120kb (gzipped and minified), and it’s trivial to make that number even smaller by disabling unused components or styles.</li>
</ul>
<h2 class=""""><span id=""3_Sencha_Touch_features"">Sencha Touch features</span></h2>
<p>Sencha touch is built specifically to leverage HTML5, CSS3, and JavaScript for the highest level of power, flexibility, and optimization. It Provides HTML5 to deliver components like audio and video, as well as a local Storage proxy for saving data offline. It provides CSS3 style sheets for robust styling layer possible. Here are the detailed features listed below.</p>
<h3><span id=""31_GUI_Support"">GUI Support:</span></h3>
<ul>
<li>Easily scales to different resolutions for maximum compatibility with different iPhone, iPad, and the various Android phones.</li>
<li>HTML5 and CSS3 allow higher flexibility.</li>
<li>Great support for animations and enhanced touch events</li>
</ul>
<h3><span id=""32_Audio_Video_Support"">3.2. Audio Video Support</span></h3>
<ul>
<li>Provides HTML5 to deliver components like audio and video, as well as a local Storage proxy for saving data offline. Provides CSS3 style sheets for robust styling layer possible.</li>
<li>Provides a simple Container for HTML5 Video</li>
</ul>
<h3><span id=""33_Networking_Support"">3.3. Networking Support:</span></h3>
<ul>
<li>HTTP</li>
<li>GPS (location-based web services and accelerometer input)</li>
</ul>
<h3><span id=""34_Data_Integration"">3.4. Data Integration</span></h3>
<ul>
<li>AJAX</li>
<li>JSONP</li>
<li>YQL</li>
<li>Saving data offline with local Storage writers</li>
</ul>
<h2 class=""""><span id=""4_Sencha_Touch_Licence""><strong>Sencha Touch Licence</strong></span></h2>
<p>Sencha Touch is licensed under free commercial and open source licenses for application development, and a paid commercial license for OEM uses.</p>
<h3><span id=""Commercial_Software_License""><strong>Commercial Software License:</strong></span></h3>
<p>This is the appropriate option if you are creating proprietary applications and you are not prepared to distribute and share the source code of your application under the GPL. This is now available at no charge to developers.</p>
<h3><span id=""Open_Source_License""><strong>Open Source License:</strong></span></h3>
<p>Sencha is an avid supporter of open source software. This is the appropriate option if you are creating an open source application with a license compatible with the GNU GPL license v3. Although the GPLv3 has many terms, the most important is that you must provide the source code of your application to your users so they can be free to modify your application for their own needs. Visit below link to get more information on Sencha Touch Software License.</p>
<p><a href=""http://www.sencha.com/products/touch/license/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://www.sencha.com/products/touch/license/</a></p>
<h2 class=""""><span id=""5_Download_Installation"">Download &amp; Installation</span></h2>
<ul>
<li>Download the Sencha Touch Libraries</li>
<li>Make sure your development environment is set up</li>
<li>Make sure your development and production Web servers are properly installed and configured</li>
<li>Know the name of the CSS file you want your application to use. You will need this file name when you create the application HTML file in the next step</li>
</ul>
<h2 class=""""><span id=""6_Sencha_Touch_Software_Development_IDE"">Sencha Touch Software Development IDE</span></h2>
<p>Software developers spend their workday in an integrated development environment. An IDE is a set of tools that aids easy application development, by allowing developers do the following things</p>
<ul>
<li>Write and edit source code</li>
<li>Refactoring code</li>
<li>Find and fix errors quickly</li>
<li>Code syntax intelligence/auto complete</li>
<li>Navigate code with ease</li>
<li>Compile and execute code</li>
<li>Browse class and subroutines</li>
<li>Integrated API documentations</li>
</ul>
<p>It’s no wonder developers moved towards an IDE for their day to day development, but which IDE is right for you? What features you want? Here are the below Integrated Development Environments (IDE) Sencha touch supports</p>
<ul>
<li>Eclipse Based IDEs</li>
<li>Aptana IDE</li>
<li>Spket&nbsp; IDE</li>
</ul>
<h2 class=""""><span id=""7_My_Review_on_Sencha_Touch"">Wrap up</span></h2>
<div>
<p>Here above I have articulated all of the framework features. I have been working in Sencha touch since its birth. Sencha is enhanced lot more features like performance improvement, additional API for data management, wider platform support, etc. It is claimed to be the best cross platform solution.&nbsp;&nbsp; I agree with this point when I compare to the novice platforms like JQueery, iUI, etc. However, I couldn’t applaud the way it is aimed to achieve it. There are major roadblock that prompts me again and again while choosing Sencha as the platform for cross platform support with robust and acceptable performance. It failed to achieve the below things</p>
<ol>
<li>Performance in blackberry is remarkably bad</li>
<li>No support for blackberry non touch devices</li>
<li>Bad performance in android Low end devices. However, It works great in my HTC OneX, a high end device.</li>
<li>UI is unacceptably bad in android low end devices</li>
<li>Scrolling is very laggy, once the data set in a list reaches more then 200+ records</li>
<li>SASS- Sencha claims SASS theming support is the backbone and added advantage compared to other platforms.&nbsp; But, it is damn difficult and take couple of steps to compile and use in comparison with CSS3</li>
</ol>
<p>Above all, I still say Sencha is the best platform in compared to all other mobile web frameworks.&nbsp; It’s Just a thought in addition to your post.</p>
</div>",0,"standard","post"
"Android Interview Questions And Answers","android-interview-questions-and-answers","This post answers some of the common questions in android. The source code snippets are pretty simple to use. How to Make a call in Android, How to integrating sharing in Android, How to open link in Android Browser, etc.","LIVE","<p>This post answers some of the common android interview questions and answers.</p>
<h3>How to send SMS in Android?</h3>
<p>You may send sms either using SmsManager or by invoking Built-in SMS application</p>
<p>Sending SMS using SmsManager API</p>
<pre class=""prettyprint lang-java"">SmsManager smsManager = SmsManager.getDefault();
smsManager.sendTextMessage("""", null, ""&lt; message body&gt;"", null, null);</pre>
<p>SmsManager require, SMS_SEND permission in your android mainfeast.</p>
<p>Sending SMS by invoking Built-in SMS application</p>
<pre class=""prettyprint lang-java"">Intent sendIntent = new Intent(Intent.ACTION_VIEW);
sendIntent.putExtra(""sms_body"", “""); 
sendIntent.setType(""vnd.android-dir/mms-sms"");
startActivity(sendIntent);</pre>
<h3>How to Make a call in Android?</h3>
<pre class=""prettyprint lang-java"">Intent callIntent = new Intent(Intent.ACTION_CALL);
callIntent.setData(Uri.parse(""tel:03777788""));
startActivity(callIntent);</pre>
<h3>How to send Email in Android?</h3>
<p>Android Intent is the handy way to send Email using your app.</p>

<pre class=""prettyprint lang-java"">String to = toEmail.getText().toString(); 
String subject = emailSubject.getText().toString();
String message = emailBody.getText().toString(); 
Intent email = new Intent(Intent.ACTION_SEND); 
email.putExtra(Intent.EXTRA_EMAIL, new String[] { to }); 
email.putExtra(Intent.EXTRA_SUBJECT, subject); 
email.putExtra(Intent.EXTRA_TEXT, message);  

// need this to prompts email client only 
email.setType(""message/rfc822""); 
startActivity(Intent.createChooser(email, ""Choose an Email client""));
</pre>

<h3>How to integrating sharing in Android?</h3>
<p>Android API made sharing feature handy. You don’t need to integrate the third party applications SDK’s like Facebook, twitter. Just a step to use share intent and it makes your application ready to share data to your social networks.</p>
<pre class=""prettyprint lang-java"">Intent sendIntent = new Intent();
sendIntent.setAction(Intent.ACTION_SEND);
sendIntent.putExtra(Intent.EXTRA_TEXT, ""This is my text to send."");
sendIntent.setType(""text/plain"");
startActivity(Intent.createChooser(sendIntent, getResources().getText(R.string.send_to)));
</pre>
<h3>How to open link in Android Browser?</h3>
<pre class=""prettyprint lang-java"">Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""http://stacktips.com""));
startActivity(browserIntent);</pre>
<h3>How to Display HTML in Android TextView?</h3>
<p>In android there is a lovely class <code>android.text.HTML</code> that processes HTML strings into displayable styled text. Currently android doesn’t support all HTML tags.</p>
<p><code>Html.formHtml()</code> method takes an <code>Html.TagHandler</code> and an <code>Html.ImageGetter</code> as arguments as well as the text to parse. We can parse null as for the Html.TagHandler but you’d need to implement your own Html.ImageGetter as there isn’t a default implementation. The Html.ImageGetter needs to run synchronously and if you’re downloading images from the web you’ll probably want to do that asynchronously. But in my example I am using the images from resources to make my ImageGetter implementation simpler.</p>
<pre class=""prettyprint lang-java"">String htmlText = ""&lt;html&gt;&lt;body&gt;....&lt;/body&gt;&lt;/html&gt;"";
TextView htmlTextView = (TextView)findViewById(R.id.html_text);
htmlTextView.setText(Html.fromHtml(htmlText, new ImageGetter(), null));</pre>
<h3>How to display Android Toast?</h3>
<p>Toast is a notification message that pop up, display a certain amount of time, and automatically fades in and out, most people just use it for debugging purpose. Below is the code snippets to create a Toast message</p>
<pre class=""prettyprint lang-java"">//display in short period of time
Toast.makeText(getApplicationContext(), ""msg msg"", Toast.LENGTH_SHORT).show();

//display in long period of time
Toast.makeText(getApplicationContext(), ""msg msg"", Toast.LENGTH_LONG).show();</pre>
<p><a href=""/articles/android-toast-example/"">Android custom toast example</a></p>
<h3>How to Pass data between Activities in android</h3>
<p>We an pass values between the activities, by using Bundles. Use below code to send data from ActivityA</p>
<pre class=""prettyprint lang-java"">String name=""StackTips"";
String url=""http://stacktips.com"";
Intent intent=new Intent(ActivityA.this, ActivityB.class);
intent.putExtra(""name"", name);
intent.putExtra(""url"", url);
startActivity(intent);&nbsp;&nbsp;</pre>

<p>Now, you can retrieve the data in ActivityB using below code</p>
<pre class=""prettyprint lang-java"">Bundle bundle = new Bundle();
bundle = getIntent().getExtras();
String name = bundle.getString(""name"");
String url = bundle.getString(""url"");</pre>",0,"standard","post"
"Cross domain Ajax calls and Same Origin policy in web browser","cross-domain-ajax-calls-and-same-origin-policy-in-web-browser","This section of tutorial tutorial explains Cross domain Ajax calls and Same Origin policy in web browser. All modern browsers today are following the same policy.
","LIVE","<p>This section of tutorial tutorial explains Cross domain Ajax calls and Same Origin policy in web browser. All modern browsers today are following the same policy.</p>
<p>One of the current trends in web applications is communicating with the content and functionality from two different sources. Over the last few years, Google, Yahoo, Flickr, YouTube and Amazon has allowed developers to implement in their own applications, by opening up of formerly proprietary APIs with simple one line calls to their APIs. That enables developers to the features such as adding photos, maps, videos and playlists, comments, likes etc.</p>
<p>Also, in business application sometimes we are forced to create the similar meshups, by making the web service calls to different IPs. In the case of web services, they are always called either with SOAP or HTTP-GET/POST requests and return information in the same way may be using XML, JSON or any other format. They are designed to be called from other domains, and in sometimes it is a contradiction to prevent them being called this way. The client applications developed has to make cross-domain web services calls, and mostly they use Ajax calls.</p>
<p>Browsers security restriction imposes the cross domain web Service calls using Ajax.  Bowsers have the same-origin policy exists to prevent malicious use of resources.  Browsers by default don’t support to make cross domain Ajax calls. If we make so, it returns the following error:</p>
<p><span style=""color: red;"">XMLHttpRequest cannot load URL. Origin http://yourwebserver.com is not allowed by Access-Control-Allow-Origin.</span></p>
<p>Visit the below link for more details on browser security policy: <a href=""http://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy"" rel=""nofollow noopener noreferrer"" target=""_blank"">Same-origin policy.</a></p>
<h3>How to get around this limitation?</h3>
<p>There isn’t a single answer to this question; here we will see the different work around and current most popular techniques, what several techies are proposing.</p>
<h3>1. Cross domain proxy</h3>
<p>This is one of the most common approaches. Your script calls your server; your server makes the call to the remote server and then returns the result back to the client.</p>
<p>There are some definite advantages to this approach. You have more control over the entire life-cycle. You can parse the data from the remote server; do with it what you will before sending it back to the client. If anything fails along the way, you can handle it in your own way. And lastly, you can log all remote calls, with that you can track success and call failures.</p>
<h3>2. Cross domain JSON/ JSONP</h3>
<p>For this approach, the remote server needs to be set up to handle this. It needs to handle an additional parameter i.e. a callback function. The response back will load a JSON object as a parameter of the callback function you specified in the request.</p>
<p><b>Example:</b><br/>
A conventional JavaScript program might request this URL via XMLHttpRequest, to the URL</p>
<p><a href=""http://ip1.server.com/UserInfo?UserId=someID"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://ip1.server.com/UserInfo?UserId=someID</a></p>
<p>This JSON data could be dynamically generated, according to the query parameters. And it might receive the response in JSON format like this</p>
<pre>{""Name"": ""User1"",""Id"": ""USRGRP111"",""GROUP"": ""GR10""}</pre>
<p>In JSONP the src attribute in the<script>// < ![CDATA[
// < ![CDATA[
// < ![CDATA[
// < ![CDATA[
// < ![CDATA[
// < ![CDATA[

element returns dynamically generated JSON, with a function call wrapped around it.  Making request to server using JSONP





<pre>
// ]]></script><script src=""http://server2.example.com/RetrieveUser?UserId=1234&amp;jsonp=parseResponse"">// < ![CDATA[

// ]]></script>

The received payload would be:
<pre> parseResponse({""Name"": ""User1"",""Id"": ""USRGRP111"",""GROUP"": ""GR10""})</pre>
<p>More on JSONP and security concerns visit Wikipedia <a href=""http://en.wikipedia.org/wiki/JSONP"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://en.wikipedia.org/wiki/JSONP</a></p>
<h3>3. Cross domain using Flash</h3>
<p>Flash is much like Ajax, and by default you cannot again make cross-domain web service calls. Work around to this us we can enable the capability by placing a special XML file on the remote server to accept requests from other domains.</p>
<p>Visit the link to understand more on making cross domain calls from flash <a href=""http://blog.monstuff.com/archives/000280.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://blog.monstuff.com/archives/000280.html</a></p>
<p><a href=""http://www.xml.com/pub/a/2006/06/28/flashxmlhttprequest-proxy-to-the-rescue.html"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://www.xml.com/pub/a/2006/06/28/flashxmlhttprequest-proxy-to-the-rescue.html</a></p>
<p><b>Limitation: </b>The great limitation to this technique is that the browser must need to have Flash installed and enabled.</p>
<h3>4. Disable web security policy</h3>
<p>This approach works as a temporary fix for the application only for development purpose. Here we can disable that security policy by opening the browser with “–disable-web-security” command.  This disables it for the entire browser, until you restart it. Steps to disable the browsers security policy:</p>
<ol>
<li>Right click on the Chrome.exe</li>
<li>Add –disable-web-security command to the target path. It should look like</li>
</ol>
<p>C:\Users\&lt;User Name&gt;\AppData\Local\Google\Chrome\Application\chrome.exe –disable-web-security</p>
<h3>5. Disable web security policy using frameworks available</h3>
<p>ACD framework: <a href=""http://www.ajax-cross-domain.com/"" rel=""nofollow noopener noreferrer"" target=""_blank"">http://www.ajax-cross-domain.com/</a></p>
</p>",0,"standard","post"
"How Does Reference Counting Garbage Collection Work","reference-counting-garbage-collection","This article will help you to understand the basic concept of Garbage Collection and the process flow for&hellip;
","LIVE","<p>This article will help you to understand the basic concept of Garbage Collection and the process flow for reference counting garbage collection.</p>
<p>In the previous post, <a href=""http://stacktips.com/2012/02/27/overview-of-garbage-collector/"" target=""_blank"">An Overview of Garbage Collector</a>, we just discussed the strategies for avoiding garbage collection. However, there are times when garbage collection is actually desirable. Imagine a program that requires a significant amount of memory. Suppose the amount of memory required is very close to the amount of memory available for use by the Java virtual machine. The performance of such a program is going to depend on the ability of the garbage collector to find and reclaim as much unused storage as possible.</p>
<p>How can we help out the garbage collector? Since the garbage collector collects only unreferenced objects it is necessary to eliminate all references to objects that are no longer needed. This can be done by assigning the value none to every variable that refers to an object that is no longer needed.</p>
<h2><strong>Reference Counting Garbage Collection</strong></h2>
<p>The difficulty in garbage collection is not the actual process of collecting the garbage–it is the problem of finding the garbage in the first place. An object is considered to be garbage when no references to that object exist. But how can we tell when no references to an object exist?</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""reference counting garbage collection"" class=""size-medium wp-image-507 aligncenter"" height=""61"" loading=""lazy"" src=""/media/uploads/articles/440/reference-counitng-300x61.png"" srcset="""" title=""reference-counitng"" width=""300""/></a></p>
<p>A simple expedient is to keep track in each object of the total number of references to that object. That is, we add a special field to each object called a reference count. The reference count field is not accessible to the Java program it is updated by the Java virtual machine itself.  Consider the statement</p>
<pre>String state = “Alabama”;</pre>
<p>The above statement creates a new instance of the String class. Only a single variable, state, refers to the object. So, its reference count should be one. Now consider the following sequence of statements:</p>
<pre>String state = “Alabama”;
String capital = state;</pre>
<p><span style=""text-align: justify;"">This sequence creates a single String instance. Both state and capital refer to the same object. Therefore, its reference count should be two. Every time one reference variable is assigned to another, it is necessary to update several reference counts. Suppose p and q is both reference variables. The assignment</span></p>
<p>capital = state<br/>
would be implemented by the Java virtual machine as follows:</p>
<pre>  if(state != null){
      state.refCount +=1;
  }</pre>
<p>But if state and capital is declared using as follows;</p>
<pre>String state = “Alabama”;
String capital = “Alabama”;
capital = state;</pre>
<p>Then in 1st line the reference count of both state and capital is one. But after state is assigned to capital, both are referred to the same object/memory location. So the reference count of state becomes 2 and capital becomes 0. So now capital is ready for garbage collector.</p>
<p>The costs of using reference counts are high. Every object requires the special reference count field, means an extra word of storage must be allocated in each object. Second, every time one reference is assigned to another, the reference counts must be adjusted. This increases significantly the time taken by assignment statements.</p>
<p>The advantage of using reference counts is that garbage is easily identified. When it becomes necessary to reclaim the storage from unused objects, the garbage collector needs only to examine the reference count fields of all the objects that have been created by the program. If the reference count is zero, the object is garbage.</p>
<p>It is not necessary to wait until there is insufficient memory before initiating the garbage collection process. We can reclaim memory used by an object immediately when its reference goes to zero.</p>
<h2>Why reference counting doesn’t work?</h2>
<p>Reference counting does not always work. It will fail to work whenever the data structure contains a cycle of references. Python does not prevent the creation of cyclic structures. Consider a circular, singly-linked list, the variable head refers to the head of the linked list and the last element of the linked list also refers to the head. So, the reference count on the first list element is two, whereas, the remaining list elements each has a reference count of one.</p>
<p style=""text-align: center;""><a href=""http://stacktips.com"" target=""_self"" title=""reference counting garbage collection""><img alt=""reference counting garbage collection"" class=""aligncenter size-full wp-image-506"" height=""154"" loading=""lazy"" src=""/media/uploads/articles/440/referencecounting-fails-300x154.png"" srcset="""" title=""reference counting garbage collection"" width=""300""/></a></p>
<p>If it happened to assign the value none to the head variable, then the reference count on the first list element has been decreased by one because the head variable no longer refers to it. But its reference count is not zero, because the tail of the list still refers to the head.</p>
<p>We now have a problem. The reference counts on all the lists elements are non-zero. Therefore, they are not considered to be garbage by a reference counting garbage collector. On the other hand, no external references to the linked-list elements remain. Therefore, the list elements are indeed garbage.</p>
<p>Reference counting will fail to work whenever the data structure contains a cycle of references, so reference counting by itself is not a suitable garbage collection scheme. However, it is a useful technique for dealing with simple objects that don’t refer to other objects, such as int and floats.</p>
",0,"standard","post"
"What is Garbage Collector and how it works ?","overview-of-garbage-collector","This article will help you to understand the basic concept of Garbage Collection like dangling pointer, memory leak and strategies to avoid and reduce memory costs.
","LIVE","<p>This article will help you to understand the basic concept of Garbage Collection like dangling pointer, memory leak and strategies to avoid and reduce memory costs.</p>
<p>Objects allocate memory at run-time for executing the programs. As long as a program contains a reference to some object instance, the virtual machine is required to ensure that the object exists. An un-referenced object is called garbage and the process of finding all the un-referenced objects and reclaiming the storage is called garbage collection.</p>
<h3>Dangling pointer</h3>
<p>The situation which arises when a program contains a reference to a destroyed object is called a dangling reference (or dangling pointer). It doesn’t allow the explicit destruction of objects.  Languages like java, support the explicit destruction of objects typically require the program to keep track of all the objects it creates and to destroy them explicitly when they are no longer needed. If a program somehow loses track of an object it has created then that object cannot be destroyed. And if the object is never destroyed, the memory occupied by that object cannot be used again by the program.</p>
<h3>Memory leak</h3>
<p>A program that loses track of objects before it destroys them suffers from a memory leak. If we run a program that has a memory leak for a very long time, it is quite possible that it will exhaust all the available memory and eventually fail because no new objects can be created.</p>
<h3>Reduce, reuse, recycle</h3>
<p>The slogan “reduce, reuse, recycle” prescribes three strategies for reducing the memory costs associated with waste objects. These strategies apply equally well to Java programs!</p>
<h3>Reduce</h3>
<p>A program that does not create any object instances or arrays does not create garbage. Of course, a program that creates no objects is not very useful because it does nothing. A program that creates all the objects it needs at the beginning of its execution and uses the same objects until it terminates also does not create garbage. By reducing the number of objects a program creates dynamically during its execution, we can reduce or even eliminate the need for garbage collection.</p>
<h3>Reuse</h3>
<p>Sometimes, a Java program will create many objects which are used only once. For example, a program may create an object in the body of a loop that is used to hold temporary information that is only required for the particular iteration of the loop in which it is created. Consider the following:</p>
<pre>for(int i=0; i    obj = new SomeClass(i);
    System.out.priintln(obj.value);
}</pre>
<p>This creates a million instances of the SomeClass class and prints them out. If the SomeClass class has a property, say value, we can reuse and a single object instance like this:</p>
<pre>obj = new SomeClass()
for(int i=0; i    obj.value = i;
System.out.priintln(obj.value);
}</pre>
<p>Clearly, by reusing a single object instance, we have dramatically reduced the amount of garbage produced. But it may not apply for all cases.</p>
<h3>Recycle</h3>
<p>Recycling of objects is a somewhat more complex strategy for reducing the overhead associated with garbage collection. Instead leaving an unused object around for the garbage collector to find, it is put into a container of unused objects. When a new object is needed, the container is searched first to see if an unused one already exists. Because a container always refers to the objects it contains, those objects are never garbage collected.</p>
<p>The recycling strategy can indeed reduce garbage collection overhead. However, it puts the burden back on the programmer to explicitly put unused objects into the container  to avoid memory leaks and to make sure objects put into the container are really unused to avoid dangling references. Because the recycling strategy undermines some of the benefits of garbage collection, it should be used with great care.<strong><span style=""font-size: large;""><br/>
</span></strong></p>
",0,"standard","post"
"Game Design Documentation Checklist","game-designer-checklist","This article explains the Game Design Documentation Checklist for feature specifications, profile Specification, and audio while making a&hellip;
","LIVE","<p>This article explains the Game Design Documentation Checklist for feature specifications, profile Specification, and audio while making a successful game. Documents includes feature specifications, profile Specification, and audio while making a successful game.</p>
<p>After knowing the whole of the end to end process for game development, I realized the game developer’s job is real easy compared to designer. They are the real guys, the coordinators who transforms the creative ideas to a visual prototype and then to a working piece.  Here are few of my thoughts shared which explain the checklists for a game designer’s specification document. The below points are as critical as we breathe to live</p>
<ul>
<li>Remember that the documentation is also for other people
<ul>
<li>If anything is differently in this document than in the game, QA will bug it</li>
<li>Post Production will solve their problems based on what the Features Specification document specifies</li>
</ul>
</li>
<li>Update the documents before every milestone
<ul>
<li>And remember to use the version control table</li>
</ul>
</li>
<li>Does the document explain the cheat code
<ul>
<li>From QA: Consider language testers who need to see every text/stage of the game (Make sure each game step can be reached individually (for localization) and unlocking all milestones is a separate cheat, consider adding cheat menu (good example: Wind)</li>
</ul>
</li>
<li>Is the unlocking structure explained in its own section?</li>
<li>Is the scoring system clear and explained?</li>
<li>Explain what is the games high score(s)</li>
<li>Explain is possible how the games score is counted</li>
<li>Is what the HUD contains explained?</li>
<li>Is the mission structure/career explained in detail in its own section?</li>
<li>Are the controls explained?
<ul>
<li>Use a table to explain the controls in-game and in menus</li>
</ul>
</li>
<li>Use the version history table to report every change.
<ul>
<li>After Beta it is mandatory to report every change here! But even before, use it!</li>
</ul>
</li>
<li>Do not explain same things in two places</li>
<li>Use one term for one thing throughout the document</li>
<li>Use a lot of tables and lists</li>
<li>Use an own header for game modes, locations, for unlocking, difficulty levels, mechanics, scoring, high score, ranking, power-ups,  hud, tutorial, controls, settings etc. items so they can be found easily from the document</li>
<li>Concentrate on features
<ul>
<li>Create a own header for each feature (one feature = one header rule)</li>
</ul>
</li>
<li>If you do put actual values of variables from the game in the document, do verify their values</li>
<li>If you have screenshots (like for the HUD) use them</li>
<li>Group things: like everything concerning screens, put them in one place, everything “technical” like Settings, Controls and so. In one place</li>
<li>Do not use 5 key in the cheat code, since might be an action</li>
<li>Consult with QA what they’ll need for the cheat code</li>
<li>You can put game texts to the document, but in that case you’ll have to be updating them a lot</li>
</ul>
<p> </p>
",0,"standard","post"
"Difference between mobile and PC game development","mobile-game-dev-to-pc-game-dev","This article will explain you the difference between Mobile game development and conventional PC and Play Station game&hellip;
","LIVE","<p>This article will explain you the difference between Mobile game development and conventional PC and Play Station game development from different technical and business aspects.</p>
<p>Modern mobile phones are small computers, with limited processing power by desktop standards, but power enough to run a small game. Today’s phones are also by their very nature networked computers, efficiently sending and receiving digital data. Primarily geared for voice data, they can send and receive other kinds of data as well. This inherent ability to share information offers a unique opportunity to design games wherein players interact with other players, perhaps even on the other side of the world.A number of different technologies are used for games on mobile phones.</p>
<ul>
<li>Embedded Games</li>
<li>SMS Games</li>
<li>Browsing (WAP) Games</li>
<li>J2ME (Java)</li>
<li>Native platform games (using Android, iPhone, iPad, Symbian)</li>
</ul>
<p>Mobile game development differs from conventional (PC and Play Stations) game development in a number of ways.</p>
<h3>Team Size</h3>
<p>Conventional PC and console games typically require teams of 12 to 30 people. Because most mobile games are less extensive than their console counterparts, they are typically developed by teams of 3 to 5 people, and often by lone programmers/designers.</p>
<h3>Budget</h3>
<p>Conventional games have budgets in the $1.5 million to $5 million range. Most mobile games are implemented on budgets of less than $100,000. Essentially, the limited display capabilities of mobile phones, coupled with limitations on application size, make it difficult to spend the huge amounts devoted to conventional games. This is, in a way, a strong advantage.</p>
<h3>Development Cycle</h3>
<p>Conventional games typically take two to three years to develop. Most mobile games are developed in a few months. In other words, with a small team, and a small budget, you can develop and deploy a professional-quality mobile game. For many developers, frustrated by the conditions of the conventional game market, it is one of mobile game development’s strongest appeals.</p>
<h3>Networked Devices</h3>
<p>Mobile games can be unlike any games we’ve seen before: limited in terms of media, but networked and multiplayer. Modems for PCs have been widely deployed only for the last eight years or so; consoles are only now going online. Mobile phones are networked devices by their very nature. Even though their processing capabilities are reminiscent of older computing technologies, their network capabilities are far superior.</p>
<h3>Open Standards</h3>
<p>Console development requires authorization and support from console game manufacturers, who use their control to require high “platform royalties” from game publishers, and to control what sorts of games get developed for their hardware. In the world of wireless (as in PC game development), you are free to develop whatever sorts of games you like, without paying Nokia, Sun, or anyone else.</p>
<h3>Deployment</h3>
<p>Conventional games are (mostly) purchased in software outlets. Mobile games are (mostly) downloaded and installed by the user from different mediums. They are downloaded over the air network; some phones allow you to download an application to a computer, and then sync it to the phone. Consequently, the distribution channels for mobile games are quite different from PC games. Every mobile manufactures has come up with application distribution stores. Here are the list of officially declared application stores listed below</p>
<ul>
<li>Nokia Store</li>
<li>iStore for apple devices</li>
<li>Android market for all android enabled devices</li>
<li>Blackberry app world for all Blackberry RIM devices</li>
<li>Windows market for all windows enabled phones</li>
<li>Samsung app world</li>
<li>Opera store</li>
</ul>
<h3>Huge Potential Audience</h3>
<p>More than a billion mobile phones are in use today, and the number is growing. In every developed country except the United States, a higher proportion of the population owns a mobile phone than owns a computer. While only a small portion of those phones are low end Java-enabled, and an even larger number run an high end OS like iOs, Android, Symbian or RIM OS, the numbers are increasing rapidly. Your potential audience is larger than the potential market for any other platform—Playstation and GameBoy included.</p>
<h3>Portability</h3>
<p>There’s a reason that GameBoy has sold more units than any other game console ever manufactured: portability is prized. People like being able to play whenever and wherever they choose. A phone may not be a great game device by comparison to modern consoles or computers, but people have their phones with them almost all the time. Give them good games to play when out of the home, and they will play.</p>
",0,"standard","post"
"Overview of Software Testing Strategies","overview-of-software-testing-strategies","This tutorial, explains test Verification and Validation (V&amp;V) with their specific definitions. Verification and validation encompasses a wide&hellip;
","LIVE","<p>This tutorial, explains test Verification and Validation (V&amp;V) with their specific definitions. Verification and validation encompasses a wide array of SQA activities that include technical reviews, quality and configuration audits, performance monitoring, simulation, feasibility study, documentation review, database review, algorithm analysis, development testing, qualification testing, and installation testing.</p>
<h2>Test Plan</h2>
<p>The Test plan section describes the overall strategy for integration. Testing is divided into phases and builds that address specific functional and behavioral characteristics of the software.<br/>
Different types of test strategies like</p>
<ul>
<li>Top-down testing</li>
<li>Bottom-up Testing</li>
<li>Thread testing</li>
<li>Stress testing</li>
<li>Back-to-back testing</li>
</ul>
<h2>Verification and Validation</h2>
<p>Software testing is one element of a broader topic that is often referred to as verification and validation.</p>
<ol>
<li>Verification refers to the set of activities that ensure that software correctly implements a specific function. “Are we building the product right?”</li>
<li>Validation refers to a different set of activities that ensure that the software that has been built is traceable to customer requirements.  “Are we building the right product?”</li>
</ol>
<h3>Validation testing</h3>
<p>Once software integration and integration testing is done the software is said to be completely assembled as a package. And a final series of software tests validation testing may begin.</p>
<p>Validation can be defined in many ways, but a simple definition is that validation succeeds when the software functions in a manner that can be reasonably expected by the customer.  Expectations are defined in the Software Requirements Specification (SRS). SRS is a document that describes all user-visible attributes of the software. The Specification contains a section called Validation criteria.</p>
<h3>Validation test criteria</h3>
<p>Software validation is achieved through a series of black box tests that demonstrate conformity with requirements. A test plan outlines the classes of tests to be conducted and a test procedure defines specific test cases that will be used to demonstrate conformity with requirements. Both the plan and the procedure are designed to ensure that all functional requirements are satisfied, all performance requirements are achieved, documentation is correct and human-engineered, and other requirements are met  (e.g., transportability, compatibility, error recovery, maintainability).</p>
<h3>Test Plan</h3>
<p>An overall plan for integration of the software and a description of specific tests are documented in a Test Specification. The specification is deliverable in the software engineering process and becomes part of the software configuration.  Scope of testing summarizes the specific functional, performance, and internal design characteristics that are to be tested. Testing effort is bounded, criteria for completion of each test phase are described, and schedule constraints are documented.  The Test plan section describes the overall strategy for integration. Testing is divided into phases and builds that address specific functional and behavioral characteristics of the software.  Each of these phases and sub phases gives a broad functional category within the software and can generally be related to a specific domain of the program structure. Therefore, program builds are created to correspond to each phase.   The following criteria and corresponding tests are applied for all test phases:</p>
<p><strong>Interface integrity</strong>: Internal and external interfaces are tested as each module (or cluster) is incorporated into the structure.</p>
<ul>
<li>Functional validity: Tests designed to uncover functional errors are conducted. Information content: Tests designed to uncover errors associated with local or global data structures are conducted.</li>
<li>Performance:Tests designed to verify performance bounds established during software design are conducted.</li>
</ul>
<h3>Top-Down testing</h3>
<ul>
<li>Top-down testing tests the high levels of a system before testing its detailed components. T</li>
<li>A program is represented as a single abstract component with sub components represented by stubs.</li>
<li>Stubs have the same interface as the component but very limited functionality. After the top-level component has been tested, its stub components are implemented and tested in the same way.</li>
<li>This process continues recursively until the bottom level components are implemented. The whole system may then be completely tested.</li>
<li>Strict top-down testing is difficult to implement because of the requirement that program stubs, simulating lower levels of the system, must be produced.</li>
<li>The main disadvantage of top-down testing is that test output may be difficult to observe.</li>
<li>Bottom-Up Testing</li>
<li>Bottom –up testing is the converse of top down testing. It involves testing the modules at the lower levels in the hierarchy, and then working up the hierarchy of modules until the final module is tested.</li>
<li>The advantage of bottom-up testing is the disadvantages of the top-down testing and vice versa.</li>
<li>Bottom-up testing is appropriate for object-oriented systems in that individual objects may be tested using their own test drivers they are then integrated and the object collection is tested. The testing of these collections should focus on object interactions.</li>
</ul>
<h3>Thread testing</h3>
<ul>
<li>It is an event-based approach where tests are based on the events, which trigger system actions.</li>
<li>Thread testing is a testing strategy, which may be used after processes, or objects have been individually tested and integrated in to sub-systems.</li>
<li>The processing of each possible external event ‘threads’ its way through the system processes or objects with some processing carried out at each stage. Thread testing involves identifying and executing each possible processing ‘thread’.</li>
<li>Complete thread testing may be impossible because of the number of possible input and output combinations. In such cases, the most commonly exercised threads should be identified and selected for testing.</li>
</ul>
<h3>Stress testing</h3>
<p>Some classes of system are designed to handle specified load. Tests have to be designed to ensure that the system can process its intended load. This usually involves planning a series of tests where the load is steadily increased.</p>
<h3>Back-to-back testing</h3>
<p>Back-to-back testing may be used when more than one version of a system is available for testing. The same tests are presented to both versions of the system and the test results compared. Back-to-back testing is only usually possible in the following situations:</p>
<ul>
<li>When a system prototype is available</li>
<li>When reliable systems are developed using N-version programming</li>
<li>When different versions of a system have been developed for different types of computers</li>
</ul>
<p>Steps involved in back-to-back testing includes</p>
<ol>
<li>Prepare a general-purpose set of test case.</li>
<li>Run one version of the program with these test cases and save the results in more than one files</li>
<li>Run another version of the program with the same test cases, saving the results to a different file</li>
<li>Automatically compare the files produced by the modified and unmodified program versions.</li>
</ol>
",0,"standard","post"
"Rapid Application Development Model","rapid-application-development-model","This section of tutorial explains rapid application development methodology and its different phases of development with its drawbacks. 
","LIVE","<div dir=""ltr"" style=""text-align: left;"">
<div dir=""ltr"" style=""text-align: left;"">
<div style=""clear: right; float: right; margin-bottom: 1em; margin-left: 1em;""></div>
<h2>Introduction</h2>
<div>This section of tutorial explains rapid application development methodology and its different phases of development with its drawbacks.</div>
<div></div>
<div>Rapid Application Development (RAD) is an incremental software development process model that emphasizes an extremely short development cycle. The RAD model is a high speed adaptation of the linear sequential model in which the rapid development is achieved by using component-based construction. If requirements are clear and well understood and the project scope is constrained, the RAD process enables a development team to create a fully functional system within a very short period of time.</div>
<p>The RAD approach encompasses the following phases:</p>
<ol>
<li><b>Business modeling:</b> Here we try to find answers to questions like what information drives the business process. What information is generated? Who generates it? Where does the information go? Who processes it? Etc.</li>
<li><b>Data modeling:</b> Here the information flow which would have been defined as part of the business modeling phase is refined into a set of data objects that are needed to support the business.</li>
<li><b>Process modeling:</b> The data objects defined in the data modeling phase are transformed to achieve the information flow necessary to implement a business function. Processing descriptions are created for adding, modifying, deleting, or retrieving a data object.</li>
<li><b>Application generation:</b> RAD assumes the use of fourth generation techniques. Rather than creating software using conventional third generation programming languages the RAD process works to reuse existing program components(when possible) or create reusable components(when necessary). In all cases, automated tools are used to facilitate construction of the software.</li>
<li><b>Testing and turnover:</b>  Since the RAD process emphasizes reuse, many of the program components have already been tested. This reduces overall testing time. However, new components must be tested and all interfaces must be fully exercised.</li>
</ol>
<p style=""text-align: center;""> <a href=""http://stacktips.com/2012/02/22/rapid-application-development-model/"" rel=""attachment wp-att-2123""><img alt=""rapid appliation development"" class=""aligncenter wp-image-2123"" height=""129"" loading=""lazy"" sizes=""(max-width: 230px) 100vw, 230px"" src=""/media/uploads/articles/445/rapid-appliation-development.png"" srcset="""" width=""230""/></a></p>
<h2>Drawbacks of the RAD model</h2>
<ol style=""text-align: left;"">
<li>For large but salable projects, RAD requires sufficient human resources to create the right number of RAD teams.</li>
<li>RAD requires developers and customers who are committed to the rapid-fire acitivites necessary to get a system complete in a much abbreviated time frame. If commitment is lacking from either, RAD projects will fail.</li>
<li>Not all types of applications are appropriate for RAD. If a system cannot be properly modularized, building the components necessary for RAD will be problematic. If high performance is an issue and performance is to be achieved through tuning the interfaces to system components, the RAD approach may not work.</li>
<li>RAD is not appropriate when technical risks are high. This occurs when a new application makes a heavy use of new technology or when the new software requires a high degree of interoperability with existing computer programs.</li>
</ol>
<p style=""text-align: left;"">Points to remember before selecting the best software engineering methodology are</p>
<ol style=""text-align: left;"">
<li>How big is the project?</li>
<li>Do you need a prototype?</li>
<li>Are you using a packaged solution?</li>
<li>How flexible is your team?</li>
<li>How much will your customer participate in the process?</li>
<li>Is your project manager experienced?</li>
</ol>
</div>
</div>
",0,"standard","post"
"Serial or Linear Sequential Development Model","serial-linear-sequential-development-model","This Model also called as the Classic life cycle or the Waterfall model. The Linear sequential model suggests&hellip;
","LIVE","<p>This Model also called as the Classic life cycle or the Waterfall model. The Linear sequential model suggests a systematic sequential approach to software development that begins at the system level and progresses through analysis, design, coding, testing, and support. The linear sequential model has the following activities;</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Sequential Development Model"" class=""aligncenter"" height=""184"" loading=""lazy"" src=""/media/uploads/articles/446/Sequential-Development-Model.png"" srcset="""" width=""502""/></a></p>
<h3>Information engineering and modeling</h3>
<p>Software is a part of a large system, work begins by establishing requirements for all system elements and then allocating some subset of these requirements to software. This system view is essential when software must interact with other element such as hardware, people and databases. System engineering and analysis encompasses requirements gathering at the system level with a small amount of top level design and analysis. Information engineering encompasses requirements gathering at the strategic business level and at the business area level.</p>
<h3>Software requirement analysis</h3>
<p>The requirement gathering process is intensified and focused specifically on software. To understand the nature of the program to be built, the software engineer (analyst) must understand the information domain for the software, as well as required function, behavior  performance and interface. Requirements for the both system and the software are documented and reviewed with the customer.</p>
<h3>Design</h3>
<p>Software design is actually a multi step process that focuses on four distinct attributes of a program, data structure, software architecture, interface representations, and procedural (algorithmic) detail. The design process translates requirements into a representation of the software that can be assessed for quality before coding begins. Like requirements, the design is documented and becomes part of the software configuration.</p>
<h3>Code generation</h3>
<p>The design must be translated into a machine–readable form. The code generation step performs this task. If design is performed in a detailed manner, code generation can be accomplished mechanistically.</p>
<h3>Testing</h3>
<p>Once code has been generated, program testing begins. The testing process focuses on the logical internals of the software, ensuring that all statements have been tested, and on the functional externals; that is, conducting tests to uncover errors and ensure that defined input will produce actual results that agree with required results.</p>
<h3>Support</h3>
<p>Software will undergo change after it is delivered to the customer. Change will occur because errors have been encountered, because the software must be adopted to accommodate changes in its external environments or because the customer requires functional or performance enhancements. Software maintenance re-applies each of the preceding phases to an existing program rather than a new one.</p>
<p>A successful software product is one that satisfies all the objectives of the development project. These objectives include satisfying the requirements and performing the development within time and cost constraints. Generally, for any reasonable size projects, all the phases listed in the model must be performed explicitly and formally.</p>
<p>The second reason is the one that is now under debate. For many projects the linear ordering of these phases is clearly the optimum way to organize these activities. However some argue that for many projects this ordering of activity is unfeasible or suboptimal. Still waterfall model is conceptually the simplest process model for software development that has been used most often.</p>
<h3>Limitation of the linear sequential model</h3>
<ul class=""space"">
<li>The linear sequential model or waterfall model assumes the requirement of a system which can be frozen (baseline) before the design begins. This is possible for systems designed to automate an existing manual system. But for a new system, determining the requirements is difficult as the user does not even know the requirements. Hence, having unchanging requirements is unrealistic for such projects.</li>
<li>Freezing the requirements usually requires choosing the hardware (because it forms a part of the requirement specifications) A large project might take a few years to complete. If the hardware is selected early, then due to the speed at which hardware technology is changing, it is likely the final software will use a hardware technology on the verge of becoming obsolete. This is clearly not desirable for such expensive software systems.</li>
<li>The waterfall model stipulates that the requirements be completely specified before the rest of the development can proceed. In some situations it might be desirable to first develop a part of the system completely and then later enhance the system in phases. This is often done for software products that are developed not necessarily for a client, but for general marketing, in which case the requirements are likely to be determined largely by the developers themselves.</li>
<li>It is a document driven process that requires formal documents at the end of each phase. This approach tends to make the process documentation-heavy and is not suitable for many applications, particularly interactive application, where developing elaborate documentation of the user interfaces is not feasible. Also, if the development is done using fourth generation language or modern development tools, developing elaborate specifications before implementation is sometimes unnecessary.</li>
</ul>
<p>Despite these limitations, the serial model is the most widely used process model. It is well suited for routine types of projects where the requirements are well understood. That is if the developing organization is quite familiar with the problem domain and requirements for the software are quite clear, the waterfall model or serial model works well.</p>
<p> </p>
",0,"standard","post"
"Getting Started with Airplay SDK for Mobile Application Development","airplay-sdk-for-mobile-app-development","Airplay saves development time by writing app using vanilla C++ in the IDE of your choice. It supports&hellip;
","LIVE","<p>Airplay saves development time by writing app using vanilla C++ in the IDE of your choice. It supports all versions of Visual C++, and the Airplay Mac SDK supports Xcode. The deployment assets are converted using the Airplay Studio tools and added into the application built using the Airplay SDK. This creates a single binary that can be used by the deployment tool to create an application to run on any of the different platforms.</p>
<p><a href=""http://stacktips.com"" target=""_self""><img alt=""Airplay SDK"" class=""aligncenter size-full wp-image-7537"" height=""252"" loading=""lazy"" src=""/media/uploads/articles/447/Airplay-SDK-.png"" srcset="""" width=""598""/></a></p>
<p><strong>Supported platforms:</strong> iOS, Android, Symbian, bada, Windows Mobile 6.x and webOS<br/>
<strong>Language Used:</strong> C/C++<br/>
<strong>IDE Used:</strong> Microsoft Visual C++ and Xcode<br/>
<strong>GUI Support:</strong></p>
<ul>
<li>Style sheet / Re skinning</li>
<li>Dynamic layout</li>
<li>2D drawing support.</li>
<li>Image format – BMP, GIF, PNG and TGA</li>
<li>Font – System &amp; Bitmap</li>
<li>Single drawing API supports OpenGL ES 1.x, OpenGL ES 2.0</li>
<li>3D user interfaces for games</li>
<li>3D screen transitions</li>
</ul>
<p><strong>Audio Video Support: </strong>Audio Support: WAV, 3GP, MP4, ACC, MP3 and PCM</p>
<p><strong>Multi-threading and networking support</strong></p>
<ul>
<li>HTTP</li>
<li>GPS (location-based web services and accelerometer input)</li>
<li>Camera Support:</li>
<li>Snapshot API</li>
<li>Image stream, Image load and save</li>
<li>Support for performing background tasks such as file loading and network activity</li>
<li>Multi-threading support with a pthread API</li>
</ul>
<p><strong>Input Methods:</strong> Accelerometer, Keyboard, Pointer</p>
<p><strong>Hidden features:</strong></p>
<ul>
<li>Dynamic portrait/landscape screen switching handled identically for all devices</li>
<li>Compile for ARM, using GCC or RVCT compilers, without leaving the IDE</li>
<li>Airplay SDK provides a flexible and extremely easy-to-use resource management framework. Resources (images, fonts, audio and video files, 3D models, etc.) are simply listed in text files.</li>
<li>Test and debug actual ARM code on the desktop, at source or disassembly level, without having to deploy to device</li>
<li>Deploy your application as a standard OS installer package, for all supported operating systems, using a single click</li>
<li>Build rich 2D and 3D applications using powerful tools and graphics libraries</li>
<li>Support software rendering, OpenGL ES 1.x and OpenGL ES 2.0 from within a single application, without rewriting rendering code</li>
<li>The EDK (Extensions Development Kit) allows developers to call native APIs from within the Airplay SDK.</li>
<li>The EDK is currently supported for iOS, Android and Windows</li>
<li>Use of native platform code is also supported on Android through the JNI (Java Native Interface) S3E Extension. This allows you to include Java code for Android, either directly in the C++ source files of your Airplay application, or by building and executing standard Java source files and assets</li>
</ul>
<p><strong>Limitations:</strong></p>
<ul>
<li>AirPlay support is not included for video streaming</li>
<li>Streaming videos on the camera roll is not supported</li>
</ul>
<table>
<tr>
<th>License Type</th>
<th>Evaluation</th>
<th>iPhone</th>
<th>Indie</th>
<th>Pro</th>
<th>Pro Support</th>
</tr>
<tbody>
<tr>
<td>Duration of license</td>
<td>30 days</td>
<td>Annual</td>
<td>Annual</td>
<td>Annual</td>
<td>Annual</td>
</tr>
<tr>
<td>$ Annual Turnover (or top line revenue) of your business</td>
<td>N/A</td>
<td>&lt;$100K</td>
<td>&lt;$100K</td>
<td>&gt;$100K</td>
<td>&gt;$100K</td>
</tr>
<tr>
<td>Price per seat</td>
<td>Free</td>
<td>Free</td>
<td>$99</td>
<td>$2500
</td>
<td>$1000</td>
</tr>
</tbody>
</table>
<ul>
<li>iPhone License (free): permits public distribution of iPhone/iPod/iPad apps. These have no visual watermarking. Deployments to all other platforms have an “evaluation only” splash screen, and public distribution of these deployments is prohibited.</li>
<li>Indie License, $99 per seat per year: permits public distribution on all supported platforms. No mandatory visual watermarks or splash screens.</li>
<li>Pro License, $2500 per seat per year: permits public distribution on all supported platforms. No mandatory visual watermarks or splash screens.</li>
<li>Pro Support, $1000 per seat per year: offers a private support ticket channel with 48-hr response time Service Level Agreement; dedicated Account Manager; access to Beta releases of the next SDK version.</li>
</ul>
<p><strong>Example Applications in market:</strong></p>
<p><a href=""http://www.airplaysdk.com/examples.php#3"" rel=""nofollow noopener noreferrer"" target=""_blank"">Example 1</a></p>
<p><a href=""http://www.airplaysdk.com/moreexamples"" rel=""nofollow noopener noreferrer"" target=""_blank"">Example 2</a></p>
<p><strong>Operating System support:</strong></p>
<ul>
<li>Airplay supports the following operating systems</li>
<li>Mac OS X 10.5 (Leopard) or above running on an Intel Mac.</li>
<li>Microsoft Windows 7</li>
<li>Microsoft Windows Vista</li>
<li>Microsoft Windows XP SP2 (or above)</li>
</ul>
<p><strong>Supported 3D Modeling Packages:</strong></p>
<ul>
<li>Airplay supports exporting assets from a number of 3rd party 3D modeling packages/ exporters<br/>
3D Studio Max 8 / 9</li>
<li>3D Studio Max 2008 (32bit, 64bit) / 2009 (32bit, 64bit) /2010 (32bit, 64bit) / 2011 (32bit, 64bit)<br/>
Maya 7/ 8/ 8.5</li>
<li>Maya 2008 (32bit, 64bit) / 2009 (32bit, 64bit)/ 2010 (32bit, 64bit) /2011 (32bit, 64bit)</li>
</ul>
",0,"standard","post"
"Learn to Shoot Game Artificial Intelligence  – Part I","learn-to-shoot-game-ai-part-i","This part of tutorial  explains, how to shoot—as true action game bots should. The shooting behaviors are split&hellip;
","LIVE","<p>This part of tutorial  explains, how to shoot—as true action game bots should. The shooting behaviors are split up into sub-tasks that can be handled independently. A combination of physics and neural network technology produces the ideal balance between effectiveness and realism. This proves to be a surprisingly challenging problem (although equally entertaining).</p>
<h3>Motivation</h3>
<p>Given a satisfactory solution for movement, the next step to building up a death-match bot is to give it weapon skills. The non-player character (NPC) can handle a variety of lethal weapons, ranging from slow rockets to instantaneous railguns.</p>
<p>After forward and side movement, turning is the most primitive capability of animats. Turning has already been put to use for movement, but tight control wasn’t necessary. Shooting, on the other hand, emphasizes the capability to turn precisely. Together with other simple actions to control the weapon, this will provide an interesting challenge for the AI.</p>
<p>The shooting behavior can be split up into different tasks, including anticipation, prediction, target selection, aiming, and firing. Unlike the previous examples, the shooting behavior requires more than just one function. This behavior will give us a feel for simple architectures using a single-level decomposition.</p>
<h3>Combat Settings</h3>
<p>Key Topics</p>
<ul>
<li>In the Armory</li>
<li>Weapon Requirements</li>
<li>Environment Conditions</li>
<li>Training Zone</li>
</ul>
<p>When designing animats to deal with combat, it’s essential to analyze what’s involved in the task generally. Moreover, it’s crucial for the developer to have a solid grasp of the game design and its consequences on the AI.</p>
<div style=""text-align: justify;"">No matter how great the battle, warfare takes place at an individual level. This chapter provides an informal description of the concept of combat on a personal level, where the objective is to inflict the most possible damage upon the opponent. AI design ideas are built by looking into challenges faced by soldiers throughout the centuries, and investigating the approach taken within existing computer games to model these activities.</div>
<p>In the course of this tutorial we will learn the following topics:</p>
<ul>
<li>The varieties of weapons used in warfare</li>
<li>Different weapon types (to abstract out the essence of combat: shooting skill)</li>
<li>The role of the environment in individual fights, revealing its importance</li>
<li>Design of a test bed where we can train and evaluate animats at one-on-one combat</li>
</ul>
<p>As game players, principles of combat in games are familiar to us. As game developers, it’s important to understand the dynamics of the design well enough to implement the AI.</p>
<h3>In the Armory</h3>
<p>There are two fundamentally different types of weapons: melee (or contact) weapons and range (or projectile) weapons. They are generally designed for only one of these purposes—but sometimes both, such as the spear or even the musket and bayonet. Of course, one can physically use any type of weapon outside of its intended purpose, but it will not be too effective!</p>
<p>Instead of discussing the abilities required to use such weapons, this chapter focuses on the physical requirements for them to serve their purpose—and hence what the AI needs for shooting. This section discusses existing computer games and how they model weapons as objects. Different levels of weapon modeling are presented, including conceptual and physical levels.</p>
<h3>Melee Weapons</h3>
<p>Hand weapons, such as axes and swords, have the advantage of being reusable, a logical progress from throwing rocks or bits of tree. The important aspect of such weapons is the physical contact (naturally)—the impact of the weapon on its target causes harm. Therefore, any concepts that affect this collision (such as velocity, momentum, or pressure) need to be understood by the AI, too.</p>
<p>Computer games can capture the complexity of such contact weapons relatively well, although low-level details of limb control are often abstracted out for playability. This means the player cannot manipulate the weapon freely. Select attacking behaviors are instead provided; clicking the mouse is a poke action, and mouse movement is a slash of the sword—as in role-playing games or first-person adventures (for instance, Jedi Knight 2 and Die by the Sword). The alternative is to press combinations of buttons to control the weapon behavior, as in popular beat ’em up games (for instance, Soul Blade and Caliber). These design decisions can be reused directly to create interfaces to the AI.</p>
<p>Such games require a good model of weapons, because the gameplay relies on them heavily. Generally, however, contact weapons in first-person games do give the impression of desperate fighting, as a last measure before the fatal fall. Because sophisticated combinations of key presses reminiscent of beat ’em ups are quite rare, the skill often boils down to raw clicking speed or unpredictable slashes.</p>
<p>The modeling of the weapon itself is always simplified in games, because full physical simulations are rarely performed in great detail. This is typically just an animation of a weapon moving. The collision detection between the weapon and the target remains crude, for efficiency and simplicity purposes. Some games handle the contact as a Boolean fact; if the weapon hit the bounding box around a character, reduce its health. Simpler models such as these require lower levels of understanding from the AI, resulting in simpler behaviors.</p>
<h3>Range Weapons</h3>
<div>Rocks and sticks are often popular choices, although technology can significantly improve projectiles. The properties of projectiles (materials, shape) and the way they are thrown affect their trajectory the most. Therein lies the key concept: The object’s flight through the air determines its impact on the target.</div>
<p>Fundamentally, all the computer model needs to do is simulate the trajectory of the projectile. When checking the targets, a simple Boolean hit test is enough, although variable injury models (where individual limbs can get hurt) are becoming increasingly popular (for instance, Soldier of Fortune). The AI needs to be aware of such concepts to perform realistically.</p>
<p>Fairly simple models of projectile weapons tend to work very well (that is, linear flight with no gravity). It’s easier to develop non player characters (NPCs) with an understanding of projectiles—or ballistics. Parameters are easy to tweak for playability by the designer (for instance, precision and velocity). As such, range weapons often prove much more fun than melee weapons. The process of aiming at a distance is both challenging and rewarding, and therefore interesting from the AI’s perspective, too.</p>
<p>As for the process of aiming and firing, the simulation also contains different levels of realism. Depending on the weapon, the player’s view can include wobble or angle restrictions. The timing for the release the projectile can also influence power and accuracy (for instance, arrows or grenades). Finally, the player may have to reload manually. The combination of these properties can contribute to the immersiveness of the game, but conversely can steepen the learning curve. Games tend to handle this very differently, so various restrictions may be imposed on the AI, too.</p>
<h3>Weapon Requirements</h3>
<p>Modern first-person games usually include many different kinds of weapons. This adds to the players’ entertainment by varying their experience, providing them with more challenges. Different weapons require different abilities from the players—whether human or AI. Obviously, contact weapons require movement abilities to get into proximity of the target, but direct control of the weapon is also required to inflict the damage. On the other hand, projectiles require being fired from a distance while aiming for the target.</p>
<p>Beyond these rough categorizations, each variety of weapon requires different skills—each of which may need handling separately by the AI. For example, a weapon with fast projectiles behaves very differently from a slow one. Each alternate firing mode also requires different abilities. The essence of the combat is the common denominator: the ability to damage the enemy by shooting. This basic ability may be modeled as a reusable component in the AI, from which specific skills are derived.</p>
<p>Other tactical decisions, such as weapon selections and combat strategies just attempt to make the most of these shooting behaviors.</p>
<h3>Environment Conditions</h3>
<p>Skill with the weapon itself is only part of the story. The layout of the environment significantly influences close combat. Not only does it constrain player movement, but also the weapons and the blast resulting from the explosion (a.k.a. splash damage). Both participants in the fight have to deal with the environment. It affects the attacker and the defender in different ways. The defender can exploit the layout of the environment to hide temporarily, or secure an escape. In general, however, defenders have little room for error; they depend on the terrain, which can make them vulnerable if a wrong decision is made.</p>
<p>The attackers are in the favorable position, because the traps of the environment play in their favor. Attackers can take advantage of splash damage by aiming for nearby walls, and constrain enemy movement with targeted fire (for instance, in dead ends). Interestingly, the roles are almost never as clear-cut. Firing often happens simultaneously, which means each player is partially an attacker and a defender. That said, there is usually a dominant party, so the descriptions apply as trends. This can be especially challenging when the parties involved are in close proximity. Local fire is both very important and extremely dangerous. Both players therefore have to look out for backfire. It can be quite damaging—and embarrassing—to accidentally shoot into a nearby wall. Such pitfalls are quite common in close combat, and need to be prevented by the AI, too.</p>
<h3>Training Zone</h3>
<p>Having described the important aspects of combat such as the weapons and conditions, we can now define a test bed to develop the AI behaviors. The chosen environment needs to be representative of real in-game situations, because skills developed and learned here should be transferable. By making the training zone a real game level, the chances of this happening successfully are significantly increased.</p>
<p>The focus of the training zone will be medium-range combat, emphasizing aiming skills, weapon handling, and immediate decisions. To improve these conditions, the environment needs to be designed with care:</p>
<ol>
<li><b>Frequent targets</b>— The bots learning to aim need to find cannon fodder as often as possible, which will speed up the training process.</li>
<li><b>Variety of weapons</b>— To offer opportunities for more than one weapon, they need to be scattered throughout the training zone.</li>
<li><b>Abundance of ammo</b>— In addition, so as not to limit the bot to particular weapons, ammunition needs to be provided at regular intervals in space.</li>
</ol>
<p>Also, paying attention to such little details will improve the development process and the learning of computer agents. For this, we’ll use a fairly small deathmatch level, with good connectivity and plenty of weapons.</p>
",0,"standard","post"
"Code optimization tips for java","code-optimization-tips-for-java","This section I wrote by referring Sun’s code optimization steps and added some more additions for a J2M game developer. Java 2 Micro Edition (J2ME) is astripped-down version of Java, suitable for small devices with limited capabilities, such as cell phones and PDAs.
","LIVE","<p>In this section we will see some of the useful tips for java programmers.</p>
<h3>When not to Optimize</h3>
<div>
<ul style=""text-align: left;"">
<li>Optimization is a good way to introduce bugs</li>
<li>Some techniques decrease the portability of your code</li>
<li>We can expend a lot of effort for little or no results</li>
</ul>
<h3>We can distinguish between different types of optimization</h3>
<ul style=""text-align: left;"">
<li>Optimizing for speed</li>
<li>Optimizing for maintainability</li>
<li>Optimizing for size</li>
</ul>
<h3>1. Unroll Loops to Optimize Your Code</h3>
<p>A compiler can automatically optimize the code by unrolling loops. Consider this code</p>
<pre class=""prettyprint lang-java"">int buff = new int[3];
for (int i =0; i&lt;3;i++)
{
buff[i] = 0;
}</pre>
<p>On every iteration, the loop assigns a value to the next array element. However,precious CPU time is also wasted on testing and incrementing the loop counter,and performing a jump statement. To avoid this overhead, the compiler can unroll the loop into a sequence of three assignment statements</p>
<pre class=""prettyprint lang-java"">buff[0] = 0;
buff[1] = 0;
buff[2] = 0;</pre>
<p>This way, you avoid the unnecessary overhead of a loop. Note, however,that the compiler applies this optimization automatically; you shouldn’t do it yourself.</p>
<h3>2. Use return statements out of switch blocks</h3>
<p>The break statements are necessary in each branch in a switch statement because otherwise the flow of execution “falls through” to the next</p>
<pre class=""prettyprint lang-java"">case. switch (suit) {

case CLUBS: {
----
----
stmts; } return ""Clubs"";

case DIAMONDS: {
----
----
stmts;
}
return ""Diamonds"";

case HEARTS: {
----
-----
stmts;
}

return ""Hearts"";

case SPADES:
{
-------------
-------------
stmts;
}
return ""Spades"";

default:
{
-------------
-------------
stmts;
}
return ""Not a valid suit"";
}</pre>
<p>return statement saves 3 bytes.</p>
<p>In this case we don’t need break statements because the return statements cause the flow of execution to return to the caller instead of falling through to the next case. In general it is good style to include a default case in every switch statement, to handle errors or unexpected values</p>
<h3>3. Eliminate Common Subexpressions</h3>
<p>Before (Eliminate):</p>
<pre class=""prettyprint lang-java"">double x = d * (lim/max) * sx;
double y = d *(lim/max) * sy;</pre>
<p>After (Eliminate):</p>
<pre class=""prettyprint lang-java"">double depth = d * (lim/max); doublex = depth * sx;
double y = depth * sy;</pre>
<h3>4. Avoid String constant</h3>
<p>System.out.println statements they are bulky and apart from testing purposes aren’t going to do much on a cell phone. For Ex: System.out.println(“Collide”); System.out.println(“intBallX”+ intBallX);</p>
<h3>5. Division is slower than multiplication</h3>
<p>Division is slower than multiplication, so multiply by the inverse instead of dividing. There are also some optimizations you can perform when using a Fixed Point math library.First, if you’re doing a lot of division by a single number, you should instead work out the inverse of that number and perform a multiplication. Multiplication Is slightly quicker than division. So instead of…</p>
<pre class=""prettyprint lang-java"">int fpP = FP.Div( fpX, fpD );
int fpQ = FP.Div( fpY, fpD );
int fpR = FP.Div( fpZ, fpD );</pre>
<p>…you should rewrite it like this:</p>
<pre class=""prettyprint lang-java"">int fpID = FP.Div( 1, fpD);
int fpP = FP.Mul( fpX, fpID );
int fpQ = FP.Mul( fpY, fpID );
int fpR = FP.Mul( fpZ, fpID );</pre>
<p>If you’re performing hundreds of divisions every frame, this will help.</p>
<h3>6. Avoid typecasting</h3>
<p>Avoid typecasting, use type integers instead. For example, you may find that the multiplication method has to cast both ints to longs and then back to an int:</p>
<pre class=""prettyprint lang-java"">Public static final int Mul (int x, int y) {

long z = (long) x * (long) y;
return ((int) (z &gt;&gt; 16));
}</pre>
<p>Those casts take time. Collision detection using bounding circles or spheres involves adding the squares of ints together. That can generate some bignumbers that might overflow the upper bound of your int Fixed Point data type.To avoid this, you could write your own square function that returns a long:</p>
<pre>public static final long Sqr (int x) {
long z = (long) x;
z *= z;
return (z &gt;&gt; 16);
}</pre>
<p>This optimized method avoids a couple of casts</p>
</div>
<h3>7. Carefully evaluate coding alternatives</h3>
<p>A switch statement is an alternative to a chained conditional that is syntactically prettier and often more efficient. It looks like this:</p>
<pre class=""prettyprint lang-java"">switch (symbol) {
case '+':
perform_addition ();
break;
case '*':
perform_multiplication ();
break;
default:
System.out.println(""I only know how to perform addition and multiplication"");
break;
}</pre>
<p>This switch statement is equivalent to the following chained conditional:</p>
<pre class=""prettyprint lang-java"">if (symbol == '+') {
perform_addition ();
} else if (symbol == '*') {
perform_multiplication ();
} else {
System.out.println(""I only know how to perform addition and multiplication"");
}</pre>
<p>It can reduce 40 bytes.</p>
<h3>8. Null Out the Old References</h3>
<p>Be sure to help garbage collector to do its work by setting object reference to null whenever you are finished with themFor Example: You might define a deinitialize method for a class in order to explicitly clear out its members</p>
<pre class=""prettyprint lang-java"">public class myClass {

private SomeObject someObject;

public myClass(Object obj)
{
--------------------
}

public void deinitialize()
{
someObject = null;
}
}</pre>
<p>By clearing out object references, you make it easier for the garbage collector to find and reclaim and unreferenced objects.This technique is simple and does not add too much code to your classes.</p>
<p>The garbage collector works automatically, whether you request it to or not. However, it is possible to make a garbage collector request, by invoking the <code>System.gc()</code> method. When garbage collector starts its work, you may have a short pause in the application’s execution. This is the reason why you should only invoke the System.gc() method at the right time, such as before performing a huge task or when the application is idle,waiting for user’s input.</p>
",0,"standard","post"
"Introduction to Game Artificial Intelligence","introduction-to-game-artificial-intelligence","Most of the games incorporate some form of artificial intelligence (AI). For instance, developers have used AI for&hellip;
","LIVE","<p>Most of the games incorporate some form of artificial intelligence (AI). For instance, developers have used AI for years to give seemingly intelligent life to countless game characters, from the ghosts in the classic arcade game PacMan to the bots in the first-person shooter Unreal, and many others in between.The huge variety of game genres and game characters necessitates a rather broad interpretation as to what is considered game AI. Indeed, this is true of AI in more traditional scientific applications as well.</p>
<p>Some developers consider tasks such as path finding and collision detection as part of game AI. It includes everything from simple chasing and evading, to pattern movement, to neural networks and genetic algorithms. Game AI a weak AI.</p>
<p>In games, we aren’t always interested in giving non-player characters human-level intellect. Perhaps we are writing code to control nonhuman creatures such as dragons, robots, or even rodents. Further, who says we always have to make non-player characters smart? Making some non-player characters dumb adds to the variety and richness of game content. Although it is true that game AI is often called upon to solve fairly complex problems, we can employ AI in attempts to give non-player characters the appearance of having different personalities, or of portraying motions or various dispositions—for example, scared, agitated, and so on.</p>
<p>Anything that gives the illusion of intelligence to an appropriate level, thus making the game more immersive, challenging, and, most importantly, fun, can be considered game AI.</p>
<h3>Deterministic Versus Non Deterministic AI</h3>
<p>Game AI techniques generally come in two flavors: deterministic and non-deterministic.</p>
<h3>Deterministic</h3>
<p>Deterministic behavior or performance is specified and predictable. There’s no uncertainty. An example of deterministic behavior is a simple chasing algorithm. You can explicitly code anon-player character to move toward some target point by advancing along the x and y coordinate axes until the character’s x and y coordinates coincide with the target location.</p>
<h3>Non Deterministic</h3>
<p>Non-deterministic behavior is the opposite of deterministic behavior. Behavior has a degree of uncertainty and is some what unpredictable (the degree of uncertainty depends on the AI method employed and how well that method is understood). An example of non-deterministic behavior is a non-player character learning to adapt to the fighting tactics of a player. Such learning could use a neural network, a Bayesian technique, or a genetic algorithm.</p>
<p>Deterministic AI techniques are the bread and butter of game AI. These techniques are predictable, fast, and easy to implement, understand, test, and debug.</p>
",0,"standard","post"
"Kafka Vs. ActiveMQ - Comparing Key Differences & Use Cases","kafka-vs-activemq-key-differences","Apache Kafka and ActiveMQ are both open-source message brokers, but they have some key differences in terms of their design, performance, and intended use cases.","LIVE","<p>Apache Kafka and ActiveMQ are both open-source message brokers, but they have some key differences in terms of their design and intended use cases.</p>

<p>Kafka is a distributed streaming platform that is designed for handling large streams of data in real-time. It is often used for processing real-time data streams, such as log data, sensor data, and financial data. Kafka is highly scalable and can handle millions of events per second.</p>

<p>ActiveMQ, on the other hand, is a message broker that supports a wide range of messaging protocols including JMS, AMQP, and MQTT. It is designed for enterprise use cases such as integration of distributed systems, event-driven architectures, and service-oriented architectures. It has a more traditional message broker architecture, which supports both point-to-point and publish-subscribe messaging patterns.</p>
<ol>
<li>
<p><b>Scalability:</b> Kafka is designed to handle high throughput, low latency, and high scalability. It uses a publish-subscribe model and is built on a distributed architecture, allowing it to handle large amounts of data and handle high levels of concurrency. ActiveMQ, on the other hand, is designed for more traditional messaging scenarios and may not be as well suited for extremely high scalability.</p>
</li>
<li>
<p><b>Durability:</b> Kafka's messages are written to disk and replicated across multiple nodes, providing a high level of durability in case of node failures. ActiveMQ also provides a high level of durability, but it may not be as robust as Kafka in certain scenarios.</p>
</li>
<li>
<p><b>Performance:</b> Kafka has been designed for very high performance and can handle millions of messages per second. ActiveMQ also provides good performance, but it may not be as fast as Kafka in certain scenarios.</p>
</li>
<li>
<p><b>Latency:</b> Kafka has a lower latency than ActiveMQ as it uses a zero-copy design and a memory-mapped file system. ActiveMQ's latency is higher as it requires message to be copied between different layers of the system.</p>
</li>
<li>
<p><b>Use cases:</b> Kafka is often used in big data and streaming scenarios, such as real-time data pipelines and event-driven architectures. ActiveMQ is more commonly used in traditional messaging scenarios, such as enterprise application integration and message-oriented middleware.</p>
</li>
<li>
<p><b>Partitioning:</b> Kafka supports partitioning of messages across multiple servers which allows it to scale horizontally. ActiveMQ does not have built-in support for partitioning.</p>
</li>
</ol><p>

</p><p>In general, Kafka is often considered to be a better choice for large-scale, high-performance, and real-time streaming scenarios, while ActiveMQ is more appropriate for traditional message driven architecture integration in enterprise systems..</p>",0,"standard","post"
"Performing MongoDB CRUD Operation in Spring Boot","mongodb-crud-operation-in-spring-boot","This blog explains how to use MongoDB with Java Spring Boot. We will create a simple CRUD API to interact with our Mongo database.","LIVE","<p id=""c1e55d64-8f9d-412f-988f-3e2ee7a05a8e"" class="""">MongoDB is a cross-platform document-oriented database
			program. It is classified as a NoSQL database, which means that it does not use the traditional SQL
			relational database model. Instead, MongoDB stores data in flexible, JSON-like documents, which can have
			fields that hold values of different data types.</p>
		<p id=""80435c7f-b80a-4b8e-8568-0e72286a5f2f"" class="""">The key advantages of using MongoDB are:</p>
		<ol type=""1"" id=""1ea82a47-869e-4bec-a1e1-149bb460eac9"" class=""numbered-list"" start=""1"">
			<li><strong>Scalability:</strong> MongoDB can be easily scaled horizontally by adding more nodes to a
				replica set or sharded cluster, which enables it to handle increasing amounts of data and read/write
				loads.</li>
		</ol>
		<ol type=""1"" id=""cf7f5224-3182-41e0-94a9-9de4c38a2a35"" class=""numbered-list"" start=""2"">
			<li><strong>Flexibility:</strong> MongoDB's document data model allows you to store data in a flexible,
				JSON-like format, which makes it easier to change the structure of your data as your application
				evolves.</li>
		</ol>
		<ol type=""1"" id=""57a1cf6c-f4f5-46f7-9515-763d89f5c740"" class=""numbered-list"" start=""3"">
			<li><strong>Performance:</strong> MongoDB's use of indexing, sharding, and in-memory storage options
				can significantly improve the performance of your applications compared to traditional relational
				databases.</li>
		</ol>
		<ol type=""1"" id=""2aee6a14-c2ba-4bc5-84d7-bf746ae695ff"" class=""numbered-list"" start=""4"">
			<li><strong>Easy to use:</strong> MongoDB provides a simple and straightforward API for inserting, updating,
				and retrieving data, making it easier for developers to work with compared to traditional relational
				databases.</li>
		</ol>
		<ol type=""1"" id=""0e7198f3-e4c4-4e6b-aff1-1458e139a4d9"" class=""numbered-list"" start=""5"">
			<li><strong>High availability:</strong> MongoDB provides built-in high availability features, such as
				replica sets and auto-electing primary nodes, which can help ensure that your data is always available
				even in the event of a node failure.</li>
		</ol>
		<ol type=""1"" id=""4a8316fa-26a7-4990-aaf1-6c71b151f326"" class=""numbered-list"" start=""6"">
			<li><strong>Agile development:</strong> MongoDB's flexible data model and easy-to-use API can help
				speed up the development process and reduce the time and effort required to build complex applications.
			</li>
		</ol>
		<ol type=""1"" id=""7467000b-52d0-4c4d-b36e-de712b851d91"" class=""numbered-list"" start=""7"">
			<li><strong>Cost-effective:</strong> MongoDB is an open-source software, which means that you can use it for
				free. Additionally, it's scalable and flexible architecture can help reduce the costs associated
				with managing and storing data.</li>
		</ol>
		<p id=""dc1bc244-2636-4d1e-a4d5-df3fbbcc6bf2"" class="""">Overall, MongoDB is a highly flexible and scalable NoSQL
			database that provides a number of advantages over traditional relational databases, making it an excellent
			choice for a wide range of applications and use cases.</p>
		<h2 id=""1a811b9f-3f50-4235-a4f2-52424db162db"" class="""">Spring Boot CRUD with
					MongoDB</h2>
		<p id=""6f58b14e-31b2-4642-af90-c5cbc14b26a8"" class="""">Here is an example of a simple Spring Boot application
			that performs CRUD operations on a MongoDB database:</p>
		<h3 id=""1dc209e4-38e2-4a3a-bfb5-d354895894f1"" class="""">Adding MongoDB Spring Boot Dependency
				</h3>
		<p id=""b264e010-d29e-4011-8072-d7c398618979"" class="""">Start by creating a new Spring Boot project and adding the
			following dependencies to your <code><strong>pom.xml</strong></code> file:</p>
		<pre id=""9d7854d4-9bc4-4b64-91f8-edf064b3bf20"" class=""code code-wrap""><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre>
		<h3 id=""44c1797c-3283-4d00-a293-d52e433643e7"" class="""">MongoDB Connection
					Properties</h3>
		<p id=""37ce88de-34d1-4478-b008-a58552a45556"" class="""">In application.properties file add the following
			properties for mongodb connection</p>
		<pre id=""eff4cc31-2de3-4a80-a77b-38924badff99"" class=""code code-wrap""><code>spring.data.mongodb.uri=mongodb://&lt;host&gt;:&lt;port&gt;/&lt;database&gt;
spring.data.mongodb.username=&lt;username&gt;
spring.data.mongodb.password=&lt;password&gt;</code></pre>
		<h3 id=""f2fe0db8-a63d-4d95-9a64-bcc863bf778a"" class="""">Data Model Class
					Declaration</h3>
		<p id=""4767b884-1161-441c-a876-231ad40f065b"" class="""">Create a model class, for example
			<code><strong>Person</strong></code> which will be mapped to a MongoDB collection. This class should have
			fields that correspond to the fields in the MongoDB document, as well as appropriate getters and setters.
		</p>
		<pre id=""ab65bd86-9b15-4661-b398-9a24b16933c3"" class=""code code-wrap""><code>@Document(collection = ""people"")
public class Person {
    @Id
    private String id;
    private String name;
    private int age;

    //getters and setters
}</code></pre>
		<h3 id=""0041f97c-6e85-4a1c-bf06-e925c72b8b53"" class="""">Mongo Repository
					Interface</h3>
		<p id=""4657794d-e6d3-489f-a1ea-d10b2d070dd3"" class="""">Create a <code><strong>MongoRepository</strong></code>
			interface to perform CRUD operations on the <code><strong>Person</strong></code> class.</p>
		<pre id=""2d049fe7-405d-418a-8016-801560dd5a97"" class=""code code-wrap""><code>public interface PersonRepository extends MongoRepository&lt;Person, String&gt; {

}</code></pre>
		<h3 id=""695b5670-65a1-46a9-a474-41506d367430"" class="""">Using Mongo Repository From
					Services</h3>
		<p id=""9e857fc6-afb8-4dff-8484-aaa278c7a7fe"" class="""">In your application main class, autowire the
			<code><strong>PersonRepository</strong></code> and use it to perform CRUD operations. For example:</p>
		<pre id=""455f89a7-2d55-478c-8515-9189396b3c14"" class=""code code-wrap""><code>@Service
class PersonService {

	@Autowired
	private PersonRepository repository;

	public void addPerson(Person person) {
	    repository.save(person);
	}

	public List&lt;Person&gt; getAllPeople() {
	    return repository.findAll();
	}
}</code></pre>
		<p id=""8522a89b-d888-4039-80b5-734d627aaeb4"" class="""">This is just an example, and you will likely need to add
			more functionality to your application depending on your specific requirements.</p>
		<p id=""2ac05754-b945-4957-869a-3c253deae517"" class="""">
		</p>
		<p id=""09458005-ef91-4628-b386-8e702e66f214"" class="""">Please note that this is just a starting point and you
			should consult the official Spring Boot and MongoDB documentation for more information on how to properly
			implement your application.</p>
		<h2 id=""5a221e5f-a4d5-44a7-8ac2-8d44c9df3ae8"" class="""">References</h2>
		<p id=""dd9b51f2-40f8-4fb4-b141-445ab8c2fa77"" class="""">Spring Boot MongoDB References –&nbsp;<a href=""https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#reference"">MongoDB
				Reference</a></p>",1,"standard","post"
"How to Connect to Multiple Mongo Databases in SpringBoot","how-to-connect-to-multiple-mongo-databases-in-springboot","Step-by-Step Guide to the necessary configurations required for connecting Multiple MongoDB from Spring Boot application.","LIVE","<p>In this tutorial, we will discuss how to connect two different MongoDB databases from your Spring boot application. This article assumes you already have MongoDB integrated into your project, hence this post skips the basics. </p>
<p>To connect to multiple MongoDB databases, we need to use <code>MongoClientFactoryBean</code> to create multiple <code>MongoClient</code> instances that connects to two different databases. </p>
<p>First let us add two set of MongoDB connection properties to your <code>application.properties</code> file corresponding to each DB.</p>
<pre class=""prettyprint lang-properties""># Primary MongoDB configs  
spring.data.mongodb.primary.host=localhost  
spring.data.mongodb.primary.port=27017  
spring.data.mongodb.primary.username=root  
spring.data.mongodb.primary.password=admin  
spring.data.mongodb.primary.database=movies_db  
spring.data.mongodb.primary.authentication-database=admin  

# Secondary MongoDB configs  
spring.data.mongodb.secondary.host=localhost  
spring.data.mongodb.secondary.port=27018  
spring.data.mongodb.secondary.username=root  
spring.data.mongodb.secondary.password=admin  
spring.data.mongodb.secondary.database=movies_db2  
spring.data.mongodb.secondary.authentication-database=admin
</pre>
<h3>MongoDB Config</h3>
<p>Next, we will bind these configuration properties property to the <code>MongoProperties</code> object using the <code>@ConfigurationProperties</code> annotation. </p>
<p>And then, we will use these properties to create a <code>MongoClient</code> bean. The <code>MongoClient</code> is the entry point to the MongoDB driver API. </p>
<p>We then have to register a <code>MongoClient</code> via <code>MongoDatabaseFactory</code>. The <code>MongoDatabaseFactory</code> is used to bootstrap the connectivity to the database. Finally we can use the <code>MongoDatabaseFactory</code> instance to configure the <code>MongoTemplate</code> .</p>
<p>The <code>MongoTemplate</code> will be used for performing all Mongo DB CRUD operations including BSON queries or updates.  </p>
<p><strong>Primary MongoDB Config:</strong></p>
<pre class=""prettyprint lang-java"">@Configuration  
@EnableMongoRepositories(basePackages = ""com.stacktips.app.repository.primary"",  
        mongoTemplateRef = ""primaryMongoTemplate"")  
public class PrimaryMongoConfig {  

    @Primary  
    @Bean(""primaryMongoProperties"")  
    @ConfigurationProperties(prefix = ""spring.data.mongodb.primary"")  
    public MongoProperties primaryMongoProperties() {  
        return new MongoProperties();  
    }  

    @Primary  
    @Bean(name = ""primaryMongoClient"")  
    public MongoClient primaryMongoClient(@Qualifier(""primaryMongoProperties"") MongoProperties mongoProperties) {  

        ServerAddress serverAddress = new ServerAddress(mongoProperties.getHost(), mongoProperties.getPort());  
        MongoClientSettings settings = MongoClientSettings.builder()  
                .applyToClusterSettings(builder -&gt;  
                        builder.hosts(List.of(serverAddress)))  
                .credential(MongoCredential.createCredential(  
                        mongoProperties.getUsername(),  
                        mongoProperties.getAuthenticationDatabase(),  
                        mongoProperties.getPassword()))  
                .build();  
        return MongoClients.create(settings);  
    }  

    @Primary  
    @Bean(name = ""primaryMongoFactory"")  
    public MongoDatabaseFactory mongoDatabaseFactory(  
            @Qualifier(""primaryMongoClient"") MongoClient mongoClient,  
            @Qualifier(""primaryMongoProperties"") MongoProperties mongoProperties) {  
        return new SimpleMongoClientDatabaseFactory(mongoClient, mongoProperties.getDatabase());  
    }  

    @Primary  
    @Bean(name = ""primaryMongoTemplate"")  
    public MongoTemplate mongoTemplate(  
            @Qualifier(""primaryMongoFactory"") MongoDatabaseFactory mongoDatabaseFactory) {  
        return new MongoTemplate(mongoDatabaseFactory);  
    }  
}
</pre>
<p><strong>Important Notes:</strong>
</p><ul><li>The <code>@EnableMongoRepositories</code> is the key here. This will scan all mongo repository from specific package as defined. All repositories that will be used to </li><li>The <code>mongoTemplateRef</code> is used to configure the name of the <code>MongoTemplate</code> bean to be used with the repositories detected.
</li><li>The <code>@Primary</code> annotation indicates that the a bean should be given preference when multiple candidates are qualified to autowire a single-valued dependency. If exactly one 'primary' bean exists among the candidates, it will be the autowired value.</li></ul>
<p><strong>Secondary MongoDB Config:</strong>
</p><p>The secondary mongo db config is similar to the primary, except for the <code>@Primary</code> annotation and it will read properties with <code>spring.data.mongodb.secondary</code> prefix. </p>
<pre class=""prettyprint lang-java"">@Configuration  
@EnableMongoRepositories(basePackages = ""com.stacktips.app.repository.secondary"",  
        mongoTemplateRef = ""secondaryMongoTemplate"")  
public class SecondaryMongoConfig {  

    @Bean(""secondaryMongoProperties"")  
    @ConfigurationProperties(prefix = ""spring.data.mongodb.secondary"")  
    public MongoProperties secondaryMongoProperties() {  
        return new MongoProperties();  
    }  

    @Bean(name = ""secondaryMongoClient"")  
    public MongoClient secondaryMongoClient(  
            @Qualifier(""secondaryMongoProperties"") MongoProperties mongoProperties) {  

        ServerAddress serverAddress = new ServerAddress(mongoProperties.getHost(), mongoProperties.getPort());  
        MongoClientSettings settings = MongoClientSettings.builder()  
                .applyToClusterSettings(builder -&gt; builder.hosts(List.of(serverAddress)))  
                .credential(MongoCredential.createCredential(  
                        mongoProperties.getUsername(),  
                        mongoProperties.getAuthenticationDatabase(),  
                        mongoProperties.getPassword()))  
                .build();  
        return MongoClients.create(settings);  
    }  

    @Bean(name = ""secondaryMongoFactory"")  
    public MongoDatabaseFactory mongoDatabaseFactory(  
            @Qualifier(""secondaryMongoClient"") MongoClient mongoClient,  
            @Qualifier(""secondaryMongoProperties"") MongoProperties mongoProperties) {  
        return new SimpleMongoClientDatabaseFactory(mongoClient, mongoProperties.getDatabase());  
    }  

    @Bean(name = ""secondaryMongoTemplate"")  
    public MongoTemplate mongoTemplate(  
            @Qualifier(""secondaryMongoFactory"") MongoDatabaseFactory mongoDatabaseFactory) {  
        return new MongoTemplate(mongoDatabaseFactory);  
    }  
}
</pre>
<p>In the above example, we're defining two <code>MongoTemplate</code> beans, one for each database. We're passing in the <code>MongoClient</code> instances created by the <code>MongoClientFactoryBean</code> beans, along with the corresponding database name from the <code>MongoProperties</code> beans.</p>
<h3>Mongo Repositories</h3>
<p>In this example, we will created a two repositories to perform CRUD operation. Note that they reside in two different packages, i.e. <code>com.stacktips.app.repository.primary</code> and <code>com.stacktips.app.repository.secondary</code>. </p>
<p>Here we are using extending <code>MongoRepository</code> to perform the CRUD operations, but the same will work for custom repository that uses <code>MongoTemplate</code>.</p>
<pre class=""prettyprint lang-java"">package com.stacktips.app.repository.primary;  

import com.stacktips.app.model.Movie;  
import org.springframework.data.mongodb.repository.MongoRepository;  
import org.springframework.stereotype.Repository;  

@Repository  
public interface PrimaryMovieRepository extends MongoRepository&lt;Movie, String&gt; {

}
</pre>
<p>Secondary Mongo Repository:</p>
<pre class=""prettyprint lang-java"">package com.stacktips.app.repository.secondary;  

import com.stacktips.app.model.Movie;  
import org.springframework.data.mongodb.repository.MongoRepository;  
import org.springframework.stereotype.Repository;  

@Repository  
public interface SecondaryMovieRepository extends MongoRepository&lt;Movie, String&gt; {

}
</pre>
<p>No that we have everything, let us now inject these repositories into our service:</p>
<pre class=""prettyprint lang-java"">@Service  
public class MovieService {  

    private final PrimaryMovieRepository primaryMovieRepository;  
    private final SecondaryMovieRepository secondaryMovieRepository;  

    public MovieService(  
            PrimaryMovieRepository primaryMovieRepository,  
            SecondaryMovieRepository secondaryMovieRepository) {  
        this.primaryMovieRepository = primaryMovieRepository;  
        this.secondaryMovieRepository = secondaryMovieRepository;  
    }  

    public Movie savePrimary(Movie movie) {  
        return primaryMovieRepository.save(movie);  
    }  

    public List&lt;Movie&gt; findAllPrimary() {  
        return primaryMovieRepository.findAll();  
    }  

    public Movie saveSecondary(Movie movie) {  
        return secondaryMovieRepository.save(movie);  
    }  

    public List&lt;Movie&gt; findAllSecondary() {  
        return secondaryMovieRepository.findAll();  
    }  
}
</pre>
<p>That's it! With the above configuration, you should be able to connect to multiple MongoDB Databases from your Spring Boot application. </p>
<p>For complete project source code checkout of the download link. </p>",0,"standard","post"
"How to Handle Simple Form Submissions in Django?","how-to-handle-simple-form-submissions-in-django","This post explains how to create and handle forms in Django. It covers creating and handling standard forms and model forms.","LIVE","<p>Forms are the key component of building any web applications. Forms provide an easy and efficient way to handle user input and process form data.</p><p>In Django a form is a Python class that defines the fields of a form and their behavior, including how data is validated and processed. Django provide a convenient way to render forms in HTML templates. Form fields can be customized with labels, help text, and error messages. They can also be styled with CSS to match the look and feel of the web application.</p><p>Django provides two main types of forms:</p><ul>
<li>Standard forms</li>
<li>Model forms.</li>
</ul><p>Standard forms are used for creating custom forms that are not tied to any specific database model.</p><p>Model forms, on the other hand, are used for creating forms that are tied to a specific database model. Model forms automatically generate form fields based on the fields of the model, which can save a lot of time and effort in creating and managing forms.</p><h2>Handling Standard forms in Django</h2><p>Here is a basic example of how to handle form submissions in Django:</p><p>First, let us define a Django form in <code>forms.py</code> file.</p><pre><code class=""language-python"">from django import forms

class ContactForm(forms.Form):
    name = forms.CharField(max_length=100)
    email = forms.EmailField()
    message = forms.CharField(widget=forms.Textarea)
</code></pre><p>Secondly, define a view that renders the form and handles form submissions in <code>views.py</code></p><pre><code class=""language-python"">from django.shortcuts import render
from .forms import ContactForm

def contact_form_view(request):
    if request.method == 'POST':
        form = ContactForm(request.POST)
        if form.is_valid():
            name = form.cleaned_data['name']
            email = form.cleaned_data['email']
            message = form.cleaned_data['message']
            return render(request, 'success_page.html')
    else:
        form = ContactForm()
    return render(request, 'contact_page.html', {'form': form})
</code></pre><p>If the request method is not <code>POST</code>, we create a new instance of the <code>ContactForm</code> class and render the form using a template <code>contact_page.html</code>. We pass the form object to the template context using a dictionary.</p><p>Lastly, define a template <code>contact_page.html</code> that renders the form</p><pre><code class=""language-python"">&lt;form method=""post""&gt;
    {% csrf_token %}
    {{ form.as_p }}
    &lt;button type=""submit""&gt;Submit&lt;/button&gt;
&lt;/form&gt;
</code></pre><p>The <code>form.as_p</code> method outputs each form field as a separate HTML paragraph element. We also include a CSRF token using the <code>{% csrf_token %}</code> template tag and a submit button to submit the form.</p><p>When the user submits the form, the data is sent to the server using a <code>POST</code> request. The view code above will then validate and process the data, and return an appropriate response to the user.</p><h2>Handling Model Forms in Django</h2><p>Creating Model Forms in Django is pretty straightforward.</p><h3 class="""">Define Model</h3><p>First we need to define a model class. A model class represents the database table, that the form with interact with.</p><pre><code class=""language-python"">from django.db import models

class Person(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
</code></pre><h3 class="""">Create a form class:</h3><p>Next, create a form class that is based on your model. This can be done by using Django's built-in ModelForm class.</p><p>The ModelForm class automatically creates form fields based on the fields in your model.</p><pre><code class=""language-python"">from django import forms
from .models import Person

class PersonForm(forms.ModelForm):
    class Meta:
        model = Person
        fields = ('name', 'email')
        labels = {
            'name': 'Name',
            'email': 'Email Address',
        }
        help_texts = {
            'name': 'Enter your name',
            'email': 'Enter your email address',
        }
</code></pre><p>In this example, we have defined a <code>Person</code> model with two fields: <code>name</code> and <code>email</code>. Then, we have created a <code>PersonForm</code> form class that is based on the <code>Person</code> model.</p><p>The form fields can be customized by specifying additional attributes such as labels, help texts, and validation rules.</p><h3 class="""">Define Form template</h3><p>Lastly, define a template <code>person_form.html</code> that renders the form</p><pre><code class=""language-python"">{% extends ""base.html"" %}

{% block content %}
  &lt;h1&gt;Create a new person&lt;/h1&gt;
  &lt;form method=""post""&gt;
    {% csrf_token %}
    {{ form.as_p }}
    &lt;input type=""submit"" value=""Save""&gt;
  &lt;/form&gt;
{% endblock %}
</code></pre><h3 class="""">Create the form in a view:</h3><p>Create an instance of the form class in a view function that is responsible for rendering the form to the user.</p><pre><code class=""language-python"">from django.shortcuts import render, redirect
from .forms import PersonForm

def create_person(request):
    if request.method == 'POST':
        form = PersonForm(request.POST)
        if form.is_valid():
            person = form.save()
            return redirect('person_detail', pk=person.pk)
    else:
        form = PersonForm()
    return render(request, 'person_form.html', {'form': form})

def person_detail(request, pk):
    person = Person.objects.get(pk=pk)
    return render(request, 'person_detail.html', {'person': person})
</code></pre><p>
</p><p>When the user submits the form, the <code>create_person</code> view function will validate the form data and save it to the database. If the data is valid, we redirect the user to the <code>person_detail</code>
view.</p>",0,"standard","post"
"Difference between select_related and prefetch_related in Django?","difference-between-select_related-and-prefetch_related","This post explains how to use select_related and prefetch_related method in django to optimize  the database queries when using complex relations.","LIVE","<p>Accessing related objects through the ORM can sometimes lead to performance bottlenecks, especially when dealing with large datasets or complex relationships. One common issue is the ""N+1 queries"" problem, where a query is executed for each related object, leading to a significant increase in database queries and slow performance.</p><p>To avoid this problem in Django, we can use <code>select_related</code> and <code>prefetch_related</code> are methods that used to optimize the database queries when dealing with related objects.</p><h2>Using select_related method</h2><p>The <code>select_related</code> is used to retrieve related objects using a single SQL query. It works by following foreign key relationships and joining the related objects into a single query. This can be useful when you need to access related objects in a loop or when accessing a single related object in a template.</p><p>For example, consider the following code:</p><pre><code class=""language-python""># Retrieve all books and their authors using select_related
books = Book.objects.select_related('author')
for book in books:
    print(book.title, book.author.name)
</code></pre><p>In this example, <code>select_related</code> is used to retrieve all books and their authors in a single query.</p><h3>Using prefetch_related method</h3><p>On the other hand, <code>prefetch_related</code> is used to retrieve related objects using multiple queries. It works by first retrieving the main queryset, and then retrieving the related objects in a separate query. This can be useful when you need to access many related objects, or when you want to avoid unnecessary database joins.</p><p>For example, consider the following code:</p><pre><code class=""language-python""># Retrieve all books and their reviews using prefetch_related
books = Book.objects.prefetch_related('reviews')
for book in books:
    print(book.title)
    for review in book.reviews.all():
        print(review.body)
</code></pre><p>In this example, <code>prefetch_related</code> is used to retrieve all books and their reviews in two separate queries.</p><p>In general, you should use <code>select_related</code> when accessing a single related object, or when accessing related objects in a loop.</p><p>












</p><p>Use <code>prefetch_related</code> when accessing many related objects or when you want to avoid unnecessary database joins.</p>",0,"standard","post"
"The Ultimate Guide to Top Website Analytics and Measurement Tools","the-ultimate-guide-to-website-analytics-and-measurement-tools","In this article, we will look at an overall view of some of the most popular website analytics and measurement tools on the market, as well as the pros and cons of each tool to help you make an informed decision.","LIVE","<p>In today's digital age, having a website is critical for any business or organisation. However, simply having a website is not enough; it is also necessary to have insights into how visitors interact with the site. This is where website analytics and measurement tools come in. With so many options available, determining which tool is best suited for your needs can be challenging.</p><p>In this blog post, we will look at the most popular website analytics and measurement tools on the market today, offering you an overview of each tool's features and capabilities to help you make an informed decision. This guide will help you find the right tool to monitor and improve the website's performance.</p><p>Here are the list of most popular website analytics and measurement tools currently available:</p><p>


</p><ul>
<li><a href=""#google-analytics-4-ga4"">Google Analytics 4 (GA4)</a></li>
<li><a href=""#adobe-analytics"">Adobe Analytics</a></li>
<li><a href=""#matomo"">Matomo</a></li>
<li><a href=""#mixpanel"">Mixpanel</a></li>
<li><a href=""#heap"">Heap</a></li>
<li><a href=""#hotjar"">Hotjar</a></li>
<li><a href=""#kissmetrics"">Kissmetrics</a></li>
<li><a href=""#crazy-egg"">Crazy Egg</a></li></ul><h3 class="""">Google Analytics 4 (GA4)</h3><p>
</p><p>Google Analytics 4 (GA4) is the latest version of Google Analytics. It is a sophisticated and comprehensive website analytics platform that provides advanced tracking, reporting, and data analysis features for businesses of all sizes.<br></p><p><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/google_analytics.png"" style=""width: 978px;""></p><p><strong>Pros:</strong></p><ul>
<li><strong>Advance tracking:</strong> Allow tracking user behaviour across different devices, including desktops, laptops, smartphones, and tablets, providing a more comprehensive picture of customer interactions with a website.</li>
<li><strong>User behaviour tracking:</strong> GA4 offers enhanced reporting capabilities, providing businesses with more detailed and accurate information on user behaviour. The platform's advanced reporting features allow businesses to analyse user interactions at a more granular level, enabling them to identify trends and make informed decision.</li>
<li>GA4 uses machine learning algorithms to improve data accuracy, providing businesses with more accurate insights into user behaviour.</li>
<li><strong>Custom reports:</strong> GA4 allows businesses to create customisable reports, enabling them to analyse data in a way that is specific to their business needs. This can help businesses identify areas for improvement and optimise their marketing strategies accordingly.</li>
</ul><p><strong>Cons:</strong></p><ul>
<li><strong>Privacy concerns:</strong> Google analytics is inherently not GDPR compliant. It requires some effort from the website owner to ensure compliance.</li>
<li><strong>Steeper learning curve</strong>: GA4 is a more advanced platform and requires a longer learning curve to take best use of its advance features.</li>
<li>In the free version of Google Analytics, data sampling can occur when a website has a large amount of traffic. This means that the platform may only analyse a portion of the data, potentially leading to less accurate insights.</li>
<li><strong>Real-time data limitations:</strong> Although Google Analytics does offer real-time data, it is limited in granularity and depth compared to some of its competitors</li>
<li><strong>Lack of raw data access:</strong> Google Analytics does not provide access to raw data, which can be a limitation for businesses wanting to perform custom, in-depth analysis. Tools like Matomo and Adobe Analytics allow for raw data access and exporting.</li>
<li><strong>Limited on-page&nbsp;</strong><b>visualisation</b>: Google Analytics lacks these visualisation features such as heat maps and scroll maps.</li>
</ul><p>



</p><p><strong>Price:</strong> Free. Paid versions with more advanced features available.</p><h3 class="""">Adobe Analytics</h3><p>Adobe Analytics is a comprehensive digital analytics platform available as part of Adobe's Experience Cloud suite. It enables businesses to perform advanced data analysis, segmentation, and marketing attribution.</p><p>

</p><p>Adobe Analytics enables businesses to collect, analyse, and visualise user behaviour data across multiple touch points, including websites, mobile apps, and other digital channels.</p><p><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/adobe-min_dwgdkNU.png"" style=""width: 978px;""><br></p><p><strong>Pros:</strong></p><ul>
<li><strong>Advanced segmentation</strong>: Adobe Analytics provides robust segmentation capabilities, allowing businesses to dive deep into their data and identify specific customer segments for more targeted marketing efforts.</li>
<li><strong>Integration with Adobe Experience Cloud</strong>: Adobe Analytics seamlessly integrates with other Adobe tools, like Adobe Target, Adobe Campaign, and Adobe Audience Manager, enabling businesses to create a comprehensive digital marketing ecosystem.</li>
<li><strong>Real-time data analysis:</strong> Adobe Analytics provides real-time data analysis and reporting, allowing businesses to make timely decisions based on up-to-date information.</li>
<li><strong>Customizable dashboards and reports:</strong> Users can create custom dashboards and reports tailored to their specific needs, enabling them to focus on relevant data and insights.</li>
<li><strong>Advanced attribution modeling:</strong> Adobe Analytics offers advanced marketing attribution models to help businesses understand the effectiveness of their marketing efforts and optimize their campaigns.</li>
<li><strong>Access to raw data:</strong> Adobe Analytics provides access to raw data, allowing businesses to perform in-depth custom analyses and data exports.</li>
</ul><p><strong>Cons:</strong></p><ul>
<li><strong>Cost:</strong> Adobe Analytics can be expensive, especially for small and medium-sized businesses. The pricing structure may not be as accessible as competitors like Google Analytics, which offers a free version.</li>
<li><strong>Complexity:</strong> Adobe Analytics has a steep learning curve and may require dedicated resources or training to fully leverage its capabilities. This can be a challenge for smaller organizations with limited resources.</li>
<li><strong>Implementation and setup:</strong> The implementation and setup of Adobe Analytics can be complex and time-consuming, potentially requiring assistance from experienced professionals or consultants.</li>
<li><strong>Limited integrations with non-Adobe tools:</strong> While Adobe Analytics integrates well with other Adobe products, it may not offer as many out-of-the-box integrations with non-Adobe tools and platforms.</li>
</ul><p><strong>Price:</strong> Premium. Contact sales for pricing details.</p><h2>Matomo</h2><p>Matomo, formerly known as Piwik, is an open-source web analytics platform that provides comprehensive analytics and reporting capabilities for websites and mobile applications. It is well-known for its focus on privacy and GDPR compliance, making it a popular choice for organisations with stringent data privacy requirements.</p><p><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/matomo-min.png"" style=""width: 978px;""><br></p><p></p><p><strong>Pros:</strong></p><ul>
<li><strong>Privacy-focused:</strong> It is designed with privacy in mind, ensuring GDPR compliance and allowing businesses to have full control over their data. No data is shared with third parties, which can be an advantage over some competitors like Google Analytics.</li>
<li><strong>Open-source:</strong> Matomo's open-source nature enables businesses to customize the platform and adapt it to their specific needs. It also allows for a large community of developers to contribute to the platform, continuously improving its features and functionality.</li>
<li><strong>Self-hosted option:</strong> Offers the choice between self-hosted and cloud-hosted solutions. Self-hosting allows organizations to have complete control over their data and infrastructure.</li>
<li><strong>Access to raw data:</strong> Provides access to raw data, allowing for more in-depth analysis and data exports.</li>
<li><strong>Cost-effective:</strong> An open-source, self-hosted version is available for free, making it an affordable option for businesses of all sizes. There is also a paid, cloud-hosted version with different pricing tiers based on the volume of page views.</li>
</ul><p><strong>Cons:</strong></p><ul>
<li><strong>Limited integrations:</strong> Matomo may not have as many out-of-the-box integrations with third-party tools and platforms as some of its competitors like Google Analytics or Adobe Analytics.</li>
<li><strong>Less advanced features:</strong> While Matomo offers comprehensive analytics capabilities, it may lack some advanced features available in more premium solutions like Adobe Analytics.</li>
<li><strong>Smaller user community:</strong> Although Matomo has a dedicated user base, it may not have as extensive a community or resources compared to more popular competitors like Google Analytics.</li>
<li><strong>Self-hosted maintenance:</strong> If you choose the self-hosted option, your organization will need to manage and maintain the Matomo infrastructure, which can require additional resources and expertise.</li>
</ul><p><strong>Price:</strong> Free plan is available with limited access. It starts from $19 per month.</p><h2><strong>Mixpanel</strong></h2><p>Mixpanel is a web and mobile analytics platform that provides businesses with detailed insights into user behaviour. It is a user-centric analytics platform that focuses on tracking individual user behaviour and engagement, allowing for more personalised marketing efforts.</p><p><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/mixpanel-min.png"" style=""width: 978px;""><br></p><p></p><p><strong>Pros:</strong></p><ul>
<li><strong>Real-time tracking:</strong> Provides real-time data tracking and analysis, enabling businesses to see how users are interacting with their website or mobile app in real-time.</li>
<li><strong>Segmentation:</strong> Allows businesses to segment their user base based on specific criteria, such as geographic location, device type, and behaviour patterns.</li>
<li><strong>Funnel analysis:</strong> Offers funnel analysis, which enables businesses to identify areas where users drop off in the user journey. This information can be used to optimize the user experience and improve conversion rates.</li>
<li><strong>Customizable dashboards:</strong> Provides customizable dashboards, enabling businesses to track specific metrics and KPIs that are relevant to their business goals.</li>
<li><strong>Third party Integrations:</strong> It can integrate with a variety of third-party tools and platforms, including Salesforce, Slack, and Google Analytics</li>
</ul><p><strong>Cons:</strong></p><ul>
<li><strong>Learning curve:</strong> Mixpanel can be complex and difficult to learn for new users, especially those who do not have a technical background. This can make it challenging to implement and use effectively.</li>
<li><strong>Expensive:</strong> It can be expensive, especially for small businesses. The cost increases as the number of users and events tracked increases.</li>
<li><strong>Limited reporting:</strong> Mixpanel's reporting capabilities are not as robust as some other analytics platforms, such as Google Analytics.</li>
<li><strong>Limited data visualization:</strong> Mixpanel's data visualization options are limited compared to some other analytics platforms, making it difficult to quickly and easily identify trends and patterns.</li>
</ul><p><strong>Price:</strong> Free plan available (up to 20m events/month) . It starts from $19 per month. Growth <strong><strong>$20</strong></strong> and Enterprise starting <strong><strong>$1,667</strong></strong> is available.</p><h2>Heap</h2><p>Heap is a web analytics tool that allows website owners to track user behaviour and gather insights about how users interact with their website. Heap&nbsp;uses a tracking code that is installed on the website, which captures data about user behaviour and sends it back to Heap's servers for analysis.</p><p><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/heap-min.png"" style=""width: 978px;""><br></p><p></p><p><strong>Pros:</strong></p><ol>
<li>User-friendly interface: Heap provides a user-friendly interface that makes it easy for website owners to visualise and analyse user behaviour data.</li>
<li>Real-time data capture: Heap captures user behaviour data in real-time, which means that website owners can get immediate insights into how users are interacting with their website.</li>
<li>Customisable tracking: Heap allows website owners to customize their tracking code to capture specific user behaviour data, such as button clicks, form submissions, or page views.</li>
<li>No data sampling: Heap does not use data sampling, which means that website owners can analyse all of their user behaviour data without any loss of accuracy.</li>
</ol><p><strong>Cons:</strong></p><ol>
<li>Limited free plan: Heap's free plan is limited in terms of the number of events that can be tracked per month, and the amount of historical data that can be analysed.</li>
<li>Costly for high-traffic websites: Heaps pricing can be expensive for high-traffic websites that generate a large amount of user behaviour data.</li>
<li>Privacy concerns: Some users may have concerns about the collection and storage of their personal data, which is captured by Heap's tracking code. Website owners need to be transparent about their data collection practices and provide clear privacy policies to address these concerns.</li>
</ol><p><strong>Price:</strong> Free plan is available with limited access. Other paid plans such as Growth, Pro and Premier plans available. Contact sales for more details.</p><h2>Hotjar</h2><p>Hotjar is a web analytics tool that provides insights into user behaviour on a website through various methods like heatmaps, visitor recordings, surveys, and more. It aims to help website owners understand how their website is being used by visitors and identify areas for improvement.</p><p><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/hotjar-min.png"" style=""width: 978px;""><br></p><p></p><p><strong>Pros:</strong></p><ul>
<li><strong>Comprehensive tracking:</strong> It tracks a wide range of user behaviour data, including heatmaps, visitor recordings, and feedback surveys, which provides a comprehensive view of how visitors interact with a website.</li>
<li><strong>User-friendly interface:</strong> It has a user-friendly interface that makes it easy for website owners to access and analyse user behaviour data.</li>
<li><strong>Easy to set up:</strong> Setting up Hotjar is relatively simple, requiring only a small piece of tracking code to be added to a website.</li>
<li><strong>Affordable pricing:</strong> Offers affordable pricing plans, making it accessible to small businesses and website owners on a budget.</li>
</ul><p><strong>Cons:</strong></p><ul>
<li><b>Limited customisation:</b> Hotjar's tracking is limited to pre-defined events, which may not capture all the user behaviour data that website owners want to track.</li>
<li><strong>Limited integrations:</strong> Hotjar has limited integrations with other analytics tools and platforms, which can make it difficult to combine data from multiple sources.</li>
<li><strong>Privacy concerns:</strong> Some users may have concerns about the collection and storage of their personal data, which is captured by Hotjar's tracking code. Website owners need to be transparent about their data collection practices and provide clear privacy policies to address these concerns.</li>
<li><strong>Limited scalability:</strong> Hotjar may not be suitable for high-traffic websites, as it can slow down website performance due to the large amount of data that is captured and processed.</li>
</ul><p><strong>Price:</strong> Free Basic plan, Plus ¢32, Business ¢80</p><h2>Kissmetrics</h2><p>Kissmetrics is a web analytics tool that tracks and analyses user behaviour on a website or web application, with a focus on user engagement and conversions. It aims to help businesses improve their user experience, optimise their conversion rates, and increase revenue.</p><p><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/kissmetrics-min.png"" style=""width: 978px;""><br></p><p></p><p><strong>Pros:</strong></p><ul>
<li><strong>Detailed user tracking:</strong> Kissmetrics tracks individual user behaviour over multiple sessions, allowing businesses to understand how users interact with their website over time and identify trends in behaviour.</li>
<li><strong>Advanced segmentation:</strong> Kissmetrics offers advanced segmentation capabilities that allow businesses to create custom segments based on specific user behaviours, demographics, or other attributes.</li>
<li><strong>Goal tracking:</strong> Kissmetrics allows businesses to track specific goals and events, such as form submissions, sign-ups, or purchases, and measure the effectiveness of different marketing campaigns and user experiences.</li>
<li><strong>Robust reporting:</strong> Kissmetrics provides detailed reports and visualizations of user behaviour data, allowing businesses to analyze their data and make data-driven decisions.</li>
</ul><p><strong>Cons:</strong></p><ul>
<li><strong>High cost:</strong> Kissmetrics can be expensive compared to other web analytics tools, which may make it less accessible to small businesses or those on a tight budget.</li>
<li><strong>Limited integrations:</strong> Kissmetrics has limited integrations with other analytics tools and platforms, which can make it difficult to combine data from multiple sources.</li>
<li><strong>Complex implementation:</strong> Setting up Kissmetrics requires technical knowledge and can be complex, which may be a barrier for businesses without a dedicated technical team.</li>
<li><strong>Limited data visualization:</strong> Kissmetrics' reporting and visualization capabilities are not as robust as some other analytics tools, which may make it more difficult to visualise and analyse complex data sets.</li>
</ul><p><strong>Price:</strong> It has 3 pricing tires. Silver $299.00/m , Gold $499.00/m, and Platinum tire.</p><h2>Crazy Egg</h2><p>CrazyEgg is a web analytics tool that uses heatmaps, scrollmaps, and other visualizations to help website owners understand how users interact with their website. It aims to help businesses optimise their website design and user experience to improve conversions and engagement.</p><p><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/CrazyEgg-min.png"" style=""width: 978px;""><br></p><p></p><p><strong>Pros:</strong></p><ul>
<li>User-friendly interface: CrazyEgg has a user-friendly interface that makes it easy for website owners to access and analyze user behaviour data.</li>
<li>Visualisations: CrazyEgg provides visualisations such as heatmaps, scrollmaps, and click maps that help website owners understand how users interact with their website.</li>
<li>Easy to set up: Setting up CrazyEgg is relatively simple, requiring only a small piece of tracking code to be added to a website.</li>
<li>Affordable pricing: CrazyEgg offers affordable pricing plans, making it accessible to small businesses and website owners on a budget.</li>
</ul><p><strong>Cons:</strong></p><ul>
<li>Limited tracking: CrazyEgg's tracking is limited to pre-defined events, which may not capture all the user behaviour data that website owners want to track.</li>
<li>Limited integrations: CrazyEgg has limited integrations with other analytics tools and platforms, which can make it difficult to combine data from multiple sources.</li>
<li>Limited customisation: CrazyEgg's tracking is limited to a few pre-defined visualisations, which may not allow for as much customisation as some other analytics tools.</li>
<li>Privacy concerns: Some users may have concerns about the collection and storage of their personal data, which is captured by CrazyEgg's tracking code. Website owners need to be transparent about their data collection practices and provide clear privacy policies to address these concerns.</li>
<li>A website optimisation tool that offers heatmaps, scroll maps, and A/B testing features to improve user experience and conversion rates.</li>
</ul><p><strong>Price:</strong> Basic $29/mo*, Standard $49/mo*, Plus $99/mo and Pro $249/mo* and Enterprise pricing tire available.</p><p>




















































</p><p>In conclusion, choosing the right tool depends on individual needs and preferences, and the blog post provides a helpful guide to assist readers in making an informed decision. Ultimately, implementing an effective website analytics and measurement tool can lead to better business performance and increased success online.</p><ol>
</ol>",0,"standard","post"
"Most Popular Android Interview Questions and Answers","most-popular-android-interview-questions-and-answers","A comprehensive list of the most important and commonly asked Android interview questions
and answers with detailed explanations.","LIVE","<div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What are the key differences between a service and IntentService in Android?</h3><div class=""answer-content""><table>
<tbody>
<tr>
<th><strong>Service</strong></th>
<th><strong>IntentService</strong></th>
</tr>
<tr>
<td>Service can be used in tasks with no UI, but shouldn't be too long. If you need to perform long tasks, you must create a new thread with in Service</td>
<td>IntentService can be used in long running tasks usually with no communication to Main Thread. If communication is required, can use Main Thread handler or broadcast intents.</td>
</tr>
<tr>
<td>Service can be started using startService() method</td>
<td>IntentService can be started using startService() method and it triggers onHandleIntent() method.</td>
</tr>
<tr>
<td>Service can be triggered from any thread</td>
<td>IntentService must be triggered from Main Thread</td>
</tr>
<tr>
<td>Service runs in background but it runs on the Main Thread of the application.</td>
<td>IntentService runs on a separate worker thread</td>
</tr>
<tr>
<td>The Service may block the Main Thread of the application.</td>
<td>The IntentService cannot run tasks in parallel. Hence all the consecutive intents will go into the message queue for the worker thread and will execute sequentially.</td>
</tr>
<tr>
<td>You must call stopSelf() or stopService() to stop a service once your its job is done.</td>
<td>IntentService stops itself when it finishes its job so you never have to call stopSelf()</td>
</tr>
</tbody>
</table></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is an alarm service and explain the purpose with real-world example.</h3><div class=""answer-content""><p>Alarm service is used to run tasks periodically at given interval. You can design application like alrm, birthday reminder, or AlarmManager can be used to initiate long running operations such as syncing data from server once a day. &nbsp;&nbsp;Once an Alarm Started, this will execute until it is stopped explicitly or until device reboots.</p></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to pass data to an IntentService?</h3><div class=""answer-content""><p>You can pass data as bundle to IntentService before you start.</p>
<pre class=""prettyprint lang-java"">Intent intent = new Intent(Intent.ACTION_SYNC, null, this, DownloadService.class);

/* Send optional extras to Download IntentService */
intent.putExtra(""url"", url);
intent.putExtra(""receiver"", mReceiver);
intent.putExtra(""requestId"", 101);

startService(intent);</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to define a service in Android manifest file?</h3><div class=""answer-content""><p>All the services &nbsp;used in the app need to be registered in application Manifest. Services are declared as shown below</p>
<pre class=""prettyprint lang-xml"">&lt;!--Service declared in manifest --&gt;
&lt;service android:name="".HelloService""
android:exported=""false""/&gt;</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What are the different clock types supported for AlarmService?</h3><div class=""answer-content""><p>Android supports two clock types for alarm service. Once is elapsed real time and other is real time clock (RTC). &nbsp;Elapsed real time uses the time since the device last booted. Real-time clock (RTC) uses UTC time for alarm service clock. RTC is most commonly used for setting alarm service in android.</p></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the difference between bound and unbounded service in Android?</h3><div class=""answer-content""><ol>
 	<li><strong>Bound Service -&nbsp;</strong>Service which call indefinitely in between activity. An Android component may bind itself to a Service using bindservice (). A bound service would run as long as the other application components are bound to it. As soon as they unbind, the service destroys itself.</li>
 	<li><strong>Unbound Service -&nbsp;</strong>Service which call at the life span of calling activity. In this case, an application component starts the service, and it would continue to run in the background, even if the original component that initiated it is destroyed. For instance, when started, a service would continue to play music in the background indefinitely.</li>
</ol></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">Explain service lifecycle methods in Android?</h3><div class=""answer-content""><p>A service can be run by the system, If someone calls Context.startService() or bindService() method.</p>
<ol style=""padding-left: 30px;"">
         <li><b>onStartCommand()</b> - This method is called when the service be started by calling startService(). Once this method executes, the service is started and can run in the background indefinitely. If you implement this, it is your responsibility to stop the service when its work is done, by calling stopSelf() or stopService(). &nbsp;If you are defining your service as, bounded service then you don?t need to implement this method.</li>
         <li><b>onBind()</b> - You need to override this method, only if you are defining your service as bounded service. This method is called, when another component wants to bind with the service by calling bindService(). In your implementation of this method, you must provide an interface that clients use to communicate with the service, by returning an IBinder. You must always implement this method, but if you don?t want to allow binding, then you should return null.</li>
         <li><b>onCreate()</b>- This method is called while the service is first created. Here all the service initialization is done. This method is never called again.</li>
         <li><b>onDestroy()</b> - The system calls this method when the service is no longer used and is being destroyed. This method is used to, clean up any resources such as threads, registered listeners, receivers, etc. This is the last call the service receives.</li>
</ol></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the purposes of Service in Android?</h3><div class=""answer-content""><p>Android Service is used to perform long-running jobs off the UI thread. Typical long-running tasks can be periodic downloading of data from the internet, saving multiple records into the database, performing file I/O, fetching your phone contacts list, etc. For such long-running tasks, Service is used to avoid UI lags and makes the user experience better.</p></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to Pass data between Activities in Android?</h3><div class=""answer-content""><p>We an pass values between the activities, by using Bundles. Use below code to send data from ActivityA</p>
<pre class=""prettyprint lang-java"">&nbsp;&nbsp;String name=""Javatechig"";
&nbsp;&nbsp;String url=""http://stacktips.com""
&nbsp;&nbsp;Intent intent=new Intent(ActivityA.this, ActivityB.class);
&nbsp;&nbsp;intent.putExtra(""name"", name);
&nbsp;&nbsp;intent.putExtra(""url"", url);
&nbsp;&nbsp;startActivity(intent);</pre>
Now, you can retrieve the data in ActivityB using below code
<pre class=""prettyprint lang-java"">&nbsp;&nbsp;Bundle bundle = new Bundle();
&nbsp;&nbsp;bundle = getIntent().getExtras();
&nbsp;&nbsp;String name = bundle.getString(""name"");
&nbsp;&nbsp;String url = bundle.getString(""url"");</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to display Android Toast?</h3><div class=""answer-content""><p>Toast is a notification message that pop up, display a certain amount of time, and automatically fades in and out, most people just use it for debugging purpose. Below is the code snippets to create a Toast message
</p><pre class=""prettyprint lang-java"">&nbsp;&nbsp;//display in short period of time <p></p>
&nbsp;&nbsp;Toast.makeText(getApplicationContext(), ""msg msg"", Toast.LENGTH_SHORT).show();

&nbsp;&nbsp;//display in long period of time
&nbsp;&nbsp;Toast.makeText(getApplicationContext(), ""msg msg"", Toast.LENGTH_LONG).show();</pre>
<a href=""http://stacktips.com/android/android-toast-example/"">Android custom toast example</a></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to Display HTML in Android TextView?</h3><div class=""answer-content""><p>In android there is a lovely class <code>android.text.HTML</code> that processes HTML strings into displayable styled text. Currently android doesn't support all HTML tags.</p>

<code>Html.formHtml()</code> method takes an <code>Html.TagHandler</code> and an <code>Html.ImageGetter</code> as arguments as well as the text to parse. We can parse null as for the Html.TagHandler but you?d need to implement your own Html.ImageGetter as there isn?t a default implementation. The Html.ImageGetter needs to run synchronously and if you?re downloading images from the web you?ll probably want to do that asynchronously. But in my example I am using the images from resources to make my ImageGetter implementation simpler.
<pre class=""prettyprint lang-java"">&nbsp;&nbsp;&nbsp;String htmlText = ""&lt;html&gt;&lt;body&gt;....&lt;/body&gt;&lt;/html&gt;"";
&nbsp;&nbsp;&nbsp;TextView htmlTextView = (TextView)findViewById(R.id.html_text);
&nbsp;&nbsp;&nbsp;htmlTextView.setText(Html.fromHtml(htmlText, new ImageGetter(), null));</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to open link in Android Browser?</h3><div class=""answer-content""><pre class=""prettyprint lang-java"">&nbsp;&nbsp;&nbsp;Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""http://stacktips.com""));
&nbsp;&nbsp;&nbsp;startActivity(browserIntent);</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">When does onResume() method called?</h3><div class=""answer-content""><p>The onResume() method is an activity lifecycle method. This is called when the activity come to foreground. You can override this method in your activity to execute code when activity is started, restarted or comes to foreground.</p></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to launch an activity in your application?</h3><div class=""answer-content""><p>For launching an activity, we need to create an explicit intent that defines the activity that we wish to start. In the below code snippet, the first parameter to Intent constructor is the current activity context and the second parameter is your new activity <code>class.startActivity()</code> method can be called on Activity context.</p>
<pre class=""prettyprint lang-java"">Intent intent = new Intent(this, SecondActivity.class);
startActivity(intent);</pre>
If you want to start an activity from fragment
<pre class=""prettyprint lang-java"">Intent intent = new Intent(getActivity(), SecondActivity.class);
getActivity().startActivity(intent);</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to define an Activity as launcher activity in application Manifest file?</h3><div class=""answer-content""><p>All the activities used in the application should be defined in application manifest file. For launcher activity you need to define intent filter as shown in the below code snippets.</p>
<pre class=""prettyprint lang-xml"">&lt;activity android:name="".MyActivity""
              android:label=""@string/app_name""&gt;
        &lt;intent-filter&gt;
            &lt;action android:name=""android.intent.action.MAIN"" /&gt;
            &lt;category android:name=""android.intent.category.LAUNCHER"" /&gt;
        &lt;/intent-filter&gt;
    &lt;/activity&gt;
</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is a ANR? What measures you can take to avoid application ANR?</h3><div class=""answer-content""><p>ANR is short for Application Not Responding. Android systems shows this dialog, if application is performing too much of task on main thread and been unresponsive for a long period of time.</p>
<strong>Measures to avoid application ANR:</strong>
ANR in application is annoying to user. It can be caused due to various reasons. Below are some of the tips to avoid ANR
<ul>
         <li>Perform all you long running network or database operation in separate thread</li>
         <li>If you have too much of background tasks, then take it off the UI thread. You may use IntentService</li>
         <li>Server not responding for longer period can be guilt for ANR. To avoid always define HTTP time out for your all your webs service calls.</li>
         <li>Be watchful of infinite loops during your complex calculations</li>
</ul></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the difference between a regular .png and a nine-patch image?</h3><div class=""answer-content""><p>The nine patch images are extension with <code>.9.png</code>. Nine-patch image allows resizing that can be used as background or other image size requirements for the target device. The Nine-patch refers to the way you can resize the image: 4 corners that are unscaled, 4 edges that are scaled in 1 axis, and the middle one that can be scaled into both axes.</p></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to share text using android share Intent?</h3><div class=""answer-content""><p>Share intent is an easy and convenient way of sharing content of your application with other apps.</p>
<pre class=""prettyprint lang-java"">Intent sendIntent = new Intent();
sendIntent.setAction(Intent.ACTION_SEND);
sendIntent.putExtra(Intent.EXTRA_TEXT, ""This is my text to send."");
sendIntent.setType(""text/plain"");
startActivity(sendIntent);
</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the use of WebView in android?</h3><div class=""answer-content""><p>A WebView is an android UI component that displays webpages. It can either display a remote webpage or can also load static HTML data. This encompasses the functionality of a browser that can be integrated to application. WebView uses the WebKit rendering engine to display web pages and includes methods to navigate forward and backward through a history, zoom in and out, etc.</p></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">Define different kind of context in android</h3><div class=""answer-content""><p>Context defines the current state of application or object. Context provides access to things such as creating new activity instance, access databases, start a service, etc.&nbsp;You can get the context by invoking <code>getApplicationContext()</code>, <code>getContext()</code>, <code>getBaseContext()</code> or <code>this</code> when in the activity class.</p>
<pre class=""prettyprint lang-java"">//Creating ui instance
ImageButton button = new ImageButton(getContext());

//creating adapter
ListAdapter adapter = new SimpleCursorAdapter(getApplicationContext(), ...);

//querying content provider
getApplicationContext().getContentResolver().query(uri, ...);

//start activity. Here this means activity context
Intent intent = new Intent(this, SecondActivity.class);
</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What are the different data storage options available in Android?</h3><div class=""answer-content""><p>Android offers several different options for data persistence.</p>
<ol>
         <li><strong>Shared Preferences</strong> - Used to store private primitive data in key-value pairs. This sometimes gets limited as it offers only key value pairs. You cannot save your own java types.</li>
         <li><strong>Internal Storage</strong> - Used to store private data on the device memory</li>
         <li><strong>External Storage</strong> - Used to store public data on the shared external storage</li>
         <li><strong>SQLite Databases</strong> - Used to store structured data in a private database. You can define many number of tables and can store data like other RDBMS.</li>
</ol></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to send SMS in Android?</h3><div class=""answer-content""><p>You may send SMS either using SmsManager or by invoking the Built-in SMS application</p>

<strong>Sending SMS using SmsManager API</strong>
<pre class=""prettyprint lang-java"">&nbsp;&nbsp;&nbsp;SmsManager smsManager = SmsManager.getDefault();
&nbsp;&nbsp;&nbsp;smsManager.sendTextMessage("""", null, ""&lt; message body&gt;"", null, null);</pre>
SmsManager require, SMS_SEND permission in your android mainfeast.

<strong>Sending SMS by invoking Built-in SMS application</strong>
<pre class=""prettyprint lang-java"">&nbsp;&nbsp;&nbsp;Intent sendIntent = new Intent(Intent.ACTION_VIEW);
&nbsp;&nbsp;&nbsp;sendIntent.putExtra(""sms_body"", ?""); 
&nbsp;&nbsp;&nbsp;sendIntent.setType(""vnd.android-dir/mms-sms"");
&nbsp;&nbsp;&nbsp;startActivity(sendIntent);</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to Make a call in Android?</h3><div class=""answer-content""><pre class=""prettyprint lang-java"">&nbsp;&nbsp;&nbsp;Intent callIntent = new Intent(Intent.ACTION_CALL);
&nbsp;&nbsp;&nbsp;callIntent.setData(Uri.parse(""tel:03777788""));
&nbsp;&nbsp;&nbsp;startActivity(callIntent);</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to send Email in Android?</h3><div class=""answer-content""><p>Android Intent is the handy way to send Email using your app.</p>
<pre class=""prettyprint lang-java"">&nbsp;&nbsp;&nbsp;String to = toEmail.getText().toString();
&nbsp;&nbsp;&nbsp;String subject = emailSubject.getText().toString();
&nbsp;&nbsp;&nbsp;String message = emailBody.getText().toString();
&nbsp;&nbsp;&nbsp;Intent email = new Intent(Intent.ACTION_SEND);
&nbsp;&nbsp;&nbsp;email.putExtra(Intent.EXTRA_EMAIL, new String[] { to });
&nbsp;&nbsp;&nbsp;email.putExtra(Intent.EXTRA_SUBJECT, subject);
&nbsp;&nbsp;&nbsp;email.putExtra(Intent.EXTRA_TEXT, message);
&nbsp;&nbsp;&nbsp;// need this to prompts email client only
&nbsp;&nbsp;&nbsp;email.setType(""message/rfc822"");
&nbsp;&nbsp;&nbsp;startActivity(Intent.createChooser(email, ""Choose an Email client""));</pre></div></div><div class=""card mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to integrating sharing in Android?</h3><div class=""answer-content""><p>Android API made sharing feature handy. You don't need to integrate the third party applications SDK's like Facebook, twitter. Just a step to use share intent and it makes your application ready to share data to your social networks.</p>
<pre class=""prettyprint lang-java"">&nbsp;&nbsp;&nbsp;Intent sendIntent = new Intent();
&nbsp;&nbsp;&nbsp;sendIntent.setAction(Intent.ACTION_SEND);
&nbsp;&nbsp;&nbsp;sendIntent.putExtra(Intent.EXTRA_TEXT, ""This is my text to send."");
&nbsp;&nbsp;&nbsp;sendIntent.setType(""text/plain"");
&nbsp;&nbsp;&nbsp;startActivity(Intent.createChooser(sendIntent, getResources().getText(R.string.send_to)));</pre></div></div>",0,"naked","post"
"Most Popular Git Interview Questions and Answers","most-popular-git-interview-questions-and-answers","A comprehensive list of the most important and commonly asked Git interview questions
and answers with detailed explanations.","LIVE","<div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is Git?</h3><div class=""answer-content""><p>Git is the most popular, open-source, widely used, and an example of distributed version control system (DVCS) used for handling the development of small and large projects in a more efficient and neat manner.</p>
<p>It is most suitable when there are multiple people working on projects as a team and is used for tracking the project changes and efficiently supports the collaboration of the development process.</p>
<p>Git is a version control system for tracking changes in computer files and is used to help coordinate work among several people on a project while tracking progress over time. In other words, it’s a tool that facilitates source code management in software development. In case of any unforeseen circumstances, the code can be reverted to any of the previously working versions thereby saving huge efforts.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is a Git repository?</h3><div class=""answer-content"">Git repository refers to a place where all the Git files are stored. These files can either be stored on the local repository or on the remote repository.</div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How can you initialize a repository in Git?</h3><div class=""answer-content""><p>If you want to initialize an empty repository to a directory in Git, you need to enter the git init command. After this command, a hidden .git folder will appear.</p>
<pre class=""prettyprint"">test$ git init
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint:
hint: 	git config --global init.defaultBranch <name>
hint:
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint:
hint: 	git branch -m <name>
Initialized empty Git repository in /Users/npangirahy/Documents/test/.git/
<pre></pre></name></name></pre></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How is Git different from Subversion (SVN)?</h3><div class=""answer-content""><table><tbody>
<tr>
<td>
<p>GIT</p>
</td>
<td>
<p>SVN</p>
</td>
</tr>
<tr>
<td>
<p>Git is a distributed decentralized version control system</p>
</td>
<td>
<p>SVN is a centralized version control system.</p>
</td>
</tr>
<tr>
<td>
<p>Git stores content in the form of metadata.</p>
</td>
<td>
<p>SVN stored data in the form of files.</p>
</td>
</tr>
<tr>
<td>
<p>The master contains the latest stable release.</p>
</td>
<td>
<p>In SVN, the trunk directory has the latest stable release&nbsp;</p>
</td>
</tr>
<tr>
<td>
<p>The contents of Git are hashed using the SHA-1 hash algorithm.</p>
</td>
<td>
<p>SVN doesn?t support hashed contents.&nbsp;</p>
</td>
</tr>
</tbody></table></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">Name a few Git commands with their function.</h3><div class=""answer-content""><ul>
<li>Git config - Configure the username and email address</li>
<li>Git add - Add one or more files to the staging area</li>
<li>Git diff - View the changes made to the file</li>
<li>Git init - Initialize an empty Git repository</li>
<li>Git commit - Commit changes to the head but not to the remote repository</li>
</ul></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">Difference between git fetch and git pull.</h3><div class=""answer-content""><table><tbody>
<tr>
<td>
<p>Git Fetch</p>
</td>
<td>
<p>Git Pull</p>
</td>
</tr>
<tr>
<td>
<p>The Git fetch command only downloads new data from a remote repository.</p>
</td>
<td>
<p>Git pull updates the current HEAD branch with the latest changes from the remote server.</p>
</td>
</tr>
<tr>
<td>
<p>It does not integrate any of these new data into your working files.</p>
</td>
<td>
<p>Downloads new data and integrate it with the current working files.</p>
</td>
</tr>
<tr>
<td>
<p>Command - git fetch origin</p>
<p>git fetch --all</p>
</td>
<td>
<p>Tries to merge remote changes with your local ones.</p>
<p>Command - git pull origin master</p>
</td>
</tr>
</tbody></table></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What do you understand about the Git merge conflict?</h3><div class=""answer-content""><p>A Git merge conflict&nbsp;is an event that occurs when Git is unable to resolve the differences in code between the two commits automatically.&nbsp;</p>
<p>Git is capable of automatically merging the changes only if the commits are on different lines or branches.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the process to revert a commit that has already been pushed and made public?</h3><div class=""answer-content""><p>There are two processes through which you can revert a commit: Remove or fix the bad file in a new commit and push it to the remote repository. Then commit it to the remote repository using:</p>
<pre class=""prettyprint"">git commit –m “commit message”
</pre>
<p>Create a new commit to undo all the changes that were made in the bad commit. Use the following command:</p>
<pre class=""prettyprint"">git revert 
</pre></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is Git stash?</h3><div class=""answer-content""><p>Let’s say you're developing a module for software and you want to switch branches to work on something else. The issue is you don’t want to make commits in uncompleted work, so you just want to get back to this point later. The solution here is the Git stash.&nbsp;</p>
<p>Git stash takes your modified tracked files and saves them on a stack of unfinished changes that you can reapply at any time. To go back to the work you can use the stash pop.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the difference between fork, branch, and clone?</h3><div class=""answer-content""><p><strong>Fork</strong></p>
<p>The fork is the process when a copy of the repository is made. It's usually experimentation in the project without affecting the original project. They’re used to advise changes or take inspiration from someone else’s project.</p>
<p><strong>Branch</strong></p>
<p>Git branches refer to individual projects within a git repository. If there are several branches in a repository, then each branch can have entirely different files and folders.</p>
<p><strong>Clone</strong></p>
<p>Git clone refers to creating a clone or a copy of an existing git repository in a new directory. Cloning automatically creates a connection that points back to the original repository, which makes it very easy to interact with the central repository.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is ?git cherry-pick??</h3><div class=""answer-content""><p>The command <code>git cherry-pick</code> enables you to pick up commits from a branch within a repository and apply it to another branch. This command is useful to undo changes when any commit is accidentally made to the wrong branch. Then, you can switch to the correct branch and use this command to cherry-pick the commit.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the command used to delete a branch?</h3><div class=""answer-content""><ul>
<li>To delete a branch we can simply use the command&nbsp;<code>git branch –d [head]</code>.</li>
<li>To delete a branch locally, we can simply run the command:&nbsp;<code>git branch -d &lt;local_branch_name&gt;</code></li>
<li>To delete a branch remotely, run the command:&nbsp;<code>git push origin --delete &lt;remote_branch_name&gt;</code></li>
<li>Deleting a branching scenario occurs for multiple reasons. One such reason is to get rid of the feature branches once it has been merged into the development branch.</li>
</ul></div></div>",0,"naked","post"
"Most Popular Django Interview Questions and Answers","most-popular-django-interview-questions-and-answers","A comprehensive list of the most important and commonly asked Django interview questions
and answers with detailed explanations.","LIVE","<div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to check if user instance is admin django permissions?</h3><div class=""answer-content""><p>The <code>is_superuser</code> property in User model, designates that this user has all permissions without explicitly assigning them.</p>

<pre class=""prettyprint lang-java"">
class UserAdmin(BaseUserAdmin):
    ...
    def has_add_permission(self, request, obj=None):
        return request.user.is_superuser

    def has_delete_permission(self, request, obj=None):
        return request.user.is_superuser
</pre></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How to get Django admin url for a model object?</h3><div class=""answer-content""><p>You can use the URL resolver directly in a template, there's no need to write your own filter. E.g.</p>
<pre class=""prettyprint lang-python"">
{% url 'admin:index' %}

{% url 'admin:polls_choice_add' %}

{% url 'admin:polls_choice_change' choice.id %}

{% url 'admin:polls_choice_changelist' %}
</pre>
ref: <a href=""https://docs.djangoproject.com/en/dev/ref/contrib/admin/#reversing-admin-urls"" target=""_blank"">Django official documentation</a></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is a ""slug"" in Django?</h3><div class=""answer-content""><p>A ""slug"" is a way of generating a valid URL, generally using data already obtained. For instance, a slug uses the title of an article to generate a URL. I advise to generate the slug by means of a function, given the title (or another piece of data), rather than setting it manually. An example:</p>
<pre class=""prettyprint lang-python"">&lt;title&gt; The 46 Year Old Virgin &lt;/title&gt;<br />&lt;content&gt; A silly comedy movie &lt;/content&gt;<br />&lt;slug&gt; the-46-year-old-virgin &lt;/slug&gt;
</pre>
<p>Now let's pretend that we have a Django model such as:</p>
<pre class=""prettyprint lang-python"">class Article(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField(max_length=1000)
    slug = models.SlugField(max_length=40)
    
</pre>
<p>How would you reference this object with a URL and with a meaningful name? You could for instance use Article.id so the URL would look like this:</p>
<pre class=""prettyprint lang-python"">www.example.com/article/23</pre>
<p>Or, you might want to reference the title like this:</p>
<pre class=""prettyprint lang-python"">www.example.com/article/The 46 Year Old Virgin
</pre>
<p>Since spaces aren't valid in URLs, they must be replaced by %20, which results in:</p>
<pre class=""prettyprint lang-python"">www.example.com/article/The%2046%20Year%20Old%20Virgin
</pre>
<p>Both attempts are not resulting in very meaningful, easy-to-read URL. This is better:</p>
<pre class=""prettyprint lang-python"">www.example.com/article/the-46-year-old-virgin
</pre>
<p>In this example, the-46-year-old-virgin is a slug: it is created from the title by down-casing all letters, and replacing spaces by hyphens -</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is a Django middleware, and how is it used?</h3><div class=""answer-content""><p>A Django middleware is a component that sits between the web server and the view function and can perform operations on incoming requests or outgoing responses. Middleware can be used to perform tasks such as authentication, caching, logging, or modifying headers.<br></p></div></div>",0,"naked","post"
"Most Popular Java Interview Questions and Answers","most-popular-java-interview-questions-and-answers","A comprehensive list of the most important and commonly asked Java interview questions
and answers with detailed explanations.","LIVE","<div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the difference between comparison done by equals method and == operator?</h3><div class=""answer-content""><p>In Java, equals() method is used to compare the contents of two string objects and returns true if the two have same value while == operator compares the references of two string objects.</p>
<p>In the following example, equals() returns true as the two string objects have same values. However == operator returns false as both string objects are referencing to different objects:</p>
<pre class=""prettyprint lang-java"">public class EqualsTest {

    public static void main(String args[]) {
        String str1 = new String(""Hello World"");
        String str2 = new String(""Hello World"");

      	//Reference comparison
      	System.out.println(s1 == s2);
      
      	//Content comparison
      	System.out.println(s1.equals(s2));
      
      	// integer-type
      	System.out.println(10 == 10);
      
      	// char-type
      	System.out.println('a' == 'a');
    }

}
</pre>
<p>Output</p>
<pre class=""prettyprint lang-java"">false
true
true
true
</pre></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How is an infinite loop declared in Java?</h3><div class=""answer-content""><p>Infinite loops are those loops that run infinitely without any breaking conditions. Some examples of consciously declaring infinite loop is:</p>

Using For Loop:
<pre class=""prettyprint lang-java"">for (;;)
{
   // Business logic
   // Any break logic
}
</pre>
Using while loop:

<pre class=""prettyprint lang-java"">while(true){
   // Business logic
   // Any break logic
}
</pre>
Using do-while loop:

<pre class=""prettyprint lang-java"">do{
   // Business logic
   // Any break logic
} while(true);
</pre></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">Why is the main method static in Java?</h3><div class=""answer-content""><p>The main method is always static because static members are those methods that belong to the classes, not to an individual object. So if the main method will not be static then for every object, It is available. And that is not acceptable by JVM. JVM calls the main method based on the class name itself. Not by creating the object.</p>
<p>Because there must be only 1 main method in the java program as the execution starts from the main method. So for this reason the main method is static.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How would you differentiate between a String, StringBuffer, and a StringBuilder?</h3><div class=""answer-content""><p><strong>Storage area:</strong> In string, the String pool serves as the storage area. For StringBuilder and StringBuffer, heap memory is the storage area.</p>
<p><strong>Mutability:</strong> A String is immutable, whereas both the StringBuilder and StringBuffer are mutable.</p>
<p><strong>Efficiency:</strong> It is quite slow to work with a String. However, StringBuilder is the fastest in performing operations. The speed of a StringBuffer is more than a String and less than a StringBuilder. (For example appending a character is fastest in StringBuilder and very slow in String because a new memory is required for the new String with appended character.)</p>
<p><strong>Thread-safty:</strong> In the case of a threaded environment, StringBuilder and StringBuffer are used whereas a String is not used. However, StringBuilder is suitable for an environment with a single thread, and a StringBuffer is suitable for multiple threads.</p>
<p>Syntax:</p>
<pre class=""prettyprint lang-java"">// String
String first = ""InterviewBit"";
String second = new String(""InterviewBit"");

// StringBuffer
StringBuffer third = new StringBuffer(""InterviewBit"");

// StringBuilder
StringBuilder fourth = new StringBuilder(""InterviewBit"");
</pre></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is a Comparator in java?</h3><div class=""answer-content""><p>Consider the example where we have an ArrayList of employees like( EId, Ename, Salary), etc. Now if we want to sort this list of employees based on the names of employees. Then that is not possible to sort using the Collections.sort() method. We need to provide something to the sort() function depending on what values we have to perform sorting. Then in that case a comparator is used.</p>
<p>Comparator is the interface in java that contains the compare method. And by overloading the compare method, we can define that on what basis we need to compare the values.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What makes a HashSet different from a TreeSet?</h3><div class=""answer-content""><p>Although both HashSet and TreeSet are not synchronized and ensure that duplicates are not present, there are certain properties that distinguish a HashSet from a TreeSet.</p>
<p><strong>Implementation:</strong> For a HashSet, the hash table is utilized for storing the elements in an unordered manner. However, TreeSet makes use of the red-black tree to store the elements in a sorted manner.</p>
<p><strong>Complexity/ Performance:</strong> For adding, retrieving, and deleting elements, the time amortized complexity is O(1) for a HashSet. The time complexity for performing the same operations is a bit higher for TreeSet and is equal to O(log n). Overall, the performance of HashSet is faster in comparison to TreeSet.</p>
<p><strong>Methods:</strong> hashCode() and equals() are the methods utilized by HashSet for making comparisons between the objects. Conversely, compareTo() and compare() methods are utilized by TreeSet to facilitate object comparisons.</p>
<p><strong>Objects type:</strong> Heterogeneous and null objects can be stored with the help of HashSet. In the case of a TreeSet, runtime exception occurs while inserting heterogeneous objects or null objects.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What are the differences between HashMap and HashTable in Java?</h3><div class=""answer-content""><table>
<thead><tr>
<th>HashMap</th>
<th>HashTable</th>
</tr></thead>
<tbody>
<tr>
<td>HashMap is not synchronized thereby making it better for non-threaded applications.</td>
<td>HashTable is synchronized and hence it is suitable for threaded applications.</td>
</tr>
<tr>
<td>Allows only one null key but any number of null in the values.</td>
<td>This does not allow null in both keys or values.</td>
</tr>
<tr>
<td>Supports order of insertion by making use of its subclass LinkedHashMap.</td>
<td>Order of insertion is not guaranteed in HashTable.</td>
</tr>
</tbody>
</table></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What are the different ways to create threads in Java?</h3><div class=""answer-content""><p>We can define and implement a thread in java using two ways: Extending the Thread class</p>
<pre class=""prettyprint lang-java"">class ThreadExample extends Thread {  
   public void run(){  
       System.out.println(""Thread runs..."");  
   }  
   public static void main(String args[]){  
       ThreadExample ib = new ThreadExample();  
       ib.start();  
   }  
}
</pre>
<p>Implementing the Runnable interface</p>
<pre class=""prettyprint lang-java"">class ThreadExample implements Runnable {  
   public void run(){  
       System.out.println(""Thread runs..."");  
   }  
   public static void main(String args[]){  
       Thread ib = new Thread(new ThreadExample()); 
       ib.start();  
   }  
}

</pre>
<p>Implementing a thread using the method of Runnable interface is more preferred and advantageous as Java does not have support for multiple inheritances of classes. start() method is used for creating a separate call stack for the thread execution. Once the call stack is created, JVM calls the run() method for executing the thread in that call stack.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is difference between thread and process?</h3><div class=""answer-content""><p>A thread is a class in java that belongs to java.lang package. A thread is an lightweight process and has its own call stack. In Java, you can run multiple threads parallely. A thread is used to perform long running jobs dedicated without disturbing to the other part of program. Even if you don't create any new threads in your program, there is at least one thread i.e. main thread() which runs the application.</p>
<ol>
         <li>Threads share the address space of the process that created it; processes have their own address.</li>
         <li>Threads have direct access to the data segment of its process; processes have their own copy of the data segment of the parent process.</li>
         <li>Threads can directly communicate with other threads of its process; processes must use interprocess communication to communicate with sibling processes.</li>
         <li>Threads have almost no overhead; processes have considerable overhead.</li>
         <li>New threads are easily created; new processes require duplication of the parent process.</li>
         <li>Threads can exercise considerable control over threads of the same process; processes can only exercise control over child processes.</li>
         <li>Changes to the main thread (cancellation, priority change, etc.) may affect the behavior of the other threads of the process; changes to the parent process do not affect child processes.</li>
</ol></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What are the different states of a thread's life cycle?</h3><div class=""answer-content""><ol>
 	<li><strong>New</strong> - When a thread is instantiated it is in New state until the start() method is called on the thread instance. In this state the thread is not considered to be alive.</li>
 	<li><strong>Runnable</strong> - The thread enters into this state after the start method is called in the thread instance. The thread may enter into the Runnable state from Running state. In this state the thread is considered to be alive.</li>
 	<li><strong>Running</strong> - When the thread scheduler picks up the thread from the Runnable thread's pool, the thread starts running and the thread is said to be in Running state.</li>
 	<li><strong>Waiting/Blocked/Sleeping</strong> - In these states the thread is said to be alive but not runnable. The thread switches to this state because of reasons like wait method called or sleep method has been called on the running thread or thread might be waiting for some i/o resource so blocked. Dead - When the thread finishes its execution i.e. the run() method execution completes, it is said to be in dead state. A dead state can not be started again. If a start() method is invoked on a dead thread a runtime exception will occur.</li>
</ol></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What are different ways in which a thread can enter the waiting state?</h3><div class=""answer-content""><p>A thread can enter the waiting state by the following ways:</p>
<ol>
<li>Invoking its sleep() method,</li>
<li>By blocking on I/O</li>
<li>By unsuccessfully attempting to acquire an object's lock</li>
<li>By invoking an object's wait() method.</li>
<li>It can also enter the waiting state by invoking its (deprecated) suspend() method.</li>
</ol></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the difference between yield and sleep?</h3><div class=""answer-content""><p>When a task invokes its yield() method, it returns to the ready state, either from waiting, running or after its creation. When a task invokes its sleep() method, it returns to the waiting state from a running state.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">Extending Thread class or implementing Runnable Interface. Which is better?</h3><div class=""answer-content""><p>You have two ways to create a thread in Java. First, making your class ""extends"" Thread class. The other way is making your class implement ""Runnable"" interface.</p>
<p>The latter is more advantageous, cause when you are going for multiple inheritance, then only interface can help. If you are already inheriting a different class, then you have to go for Runnable Interface. Also, if you are implementing interface, it means you have to implement all methods in the interface.</p>
<p>Both Thread class and Runnable interface are provided for convenience and use them as per the requirement. But if you are not extending any class, better extend Thread class as it will save few lines of coding. Otherwise performance wise, there is no distinguishable difference. A thread is in the ready state after it has been created and started.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is mutual exclusion? How can you take care of mutual exclusion using Java threads?</h3><div class=""answer-content""><p>Mutual exclusion in Java is a mechanism that allows only one thread to access a shared resource or critical section of code at a time, preventing race conditions where multiple threads can access and modify the same resource simultaneously.</p><p>For mutual exclusion, you can simply use the <code>synchronized</code> keyword, which can be applied to a method or a block of code to ensure that only one thread can access the synchronized code at a time.</p><p>Java offers different options to achieve mutual exclusion, such as the <code>Semaphore</code> class, the <code>ReadWriteLock</code> interface, the <code>AtomicInteger</code> class, and the <code>StampedLock</code> class. The choice of implementation depends on the specific requirements and constraints of the application.</p><p>


</p><ol>
<li><strong>Semaphore:</strong> The Semaphore class can be used to implement mutual exclusion. It allows a limited number of threads to access a critical section at the same time.</li>
<li><strong>ReadWriteLock:</strong> The ReadWriteLock interface can be used to implement mutual exclusion for read and write operations. It allows multiple threads to read a shared resource simultaneously, but only one thread can write to the resource at a time.</li>
<li><strong>AtomicInteger:</strong> The AtomicInteger class can be used to implement mutual exclusion for integer values. It provides atomic operations such as incrementAndGet() and decrementAndGet(), which ensures that only one thread can modify the value at a time.</li>
<li><strong>StampedLock:</strong> The StampedLock class can be used to implement mutual exclusion for read and write operations. It provides optimistic read locks, which allows multiple threads to read a shared resource simultaneously, and a write lock, which allows only one thread to write to the resource at a time.</li>
</ol></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the difference between preemptive scheduling and time slicing?</h3><div class=""answer-content""><p>Under preemptive scheduling, the highest priority task executes until it enters the waiting or dead states or a higher priority task comes into existence. Under time slicing, a task executes for a predefined slice of time and then re-enters the pool of ready tasks. The scheduler then determines which task should execute next, based on priority and other factors.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is deadlock?</h3><div class=""answer-content""><p>When two threads are waiting for each other and can't proceed until the first thread obtains a lock on the other thread or vice versa, the program is said to be in a deadlock.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What are synchronized methods and synchronized statements?</h3><div class=""answer-content""><p>Synchronized methods are methods that are used to control access to an object. A thread only executes a synchronized method after it has acquired the lock for the method's object or class. Synchronized statements are similar to synchronized methods. A synchronized statement can only be executed after a thread has acquired the lock for the object or class referenced in the synchronized statement.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is a volatile keyword?</h3><div class=""answer-content""><p>In general, each thread has its own copy of the variable, such that one thread is not concerned with the value of the same variable in the other thread. But sometime this may not be the case. Consider a scenario in which the count variable is holding the number of times a method is called for a given class irrespective of any thread calling, in this case, irrespective of thread access the count has to be increased so the count variable is declared as volatile.</p>
<p>The copy of the volatile variable is stored in the main memory, so every time a thread access the variable even for reading purpose the local copy is updated each time from the main memory. The volatile variable also has performance issues.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is Serializable?</h3><div class=""answer-content""><p>Serializable is a marker interface. When an object has to be transferred over a network ( typically through RMI or EJB) or persists the state of an object to a file, the object Class needs to implement a Serializable interface. Implementing this interface will allow the object converted into a byte stream and transfer over a network.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is use of serialVersionUID?</h3><div class=""answer-content""><p>During object serialization, the default Java serialization mechanism writes the metadata about the object, which includes the class name, field names, types, and superclass. This class definition is stored as a part of the serialized object. This stored metadata enables the deserialization process to reconstitute the objects and map the stream data into the class attributes with the appropriate type every time an object is serialized the java serialization mechanism automatically computes a hash value.</p>
<p>ObjectStreamClass’s computeSerialVersionUID() method passes the class name, sorted member names, modifiers, and interfaces to the secure hash algorithm (SHA), which returns a hash value. The serialVersionUID is also called suid.</p>
<p>So when the serialized object is retrieved, the JVM first evaluates the suid of the serialized class and compares the suid value with the one of the objects. If the suid values match then the object is said to be compatible with the class and hence it is de-serialized. If not InvalidClassException exception is thrown.</p>
<p>Changes to a serializable class can be compatible or incompatible.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is difference between ArrayList and Vector?</h3><div class=""answer-content""><ul>
<li><strong>Synchronization</strong>&nbsp;– ArrayList is not thread-safe whereas Vector is thread-safe. In Vector class each method like&nbsp;<code>add()</code>,&nbsp;<code>get(int i)</code>&nbsp;is surrounded with a synchronized block and thus making Vector class thread-safe.</li>
<li><strong>Data growth</strong>&nbsp;– Internally, both the ArrayList and Vector hold onto their contents using an Array. When an element is inserted into an ArrayList or a Vector, the object will need to expand its internal array if it runs out of room. A Vector defaults to doubling the size of its array, while the ArrayList increases its array size by 50 percent.</li>
</ul></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is difference between HashMap and HashTable?</h3><div class=""answer-content""><p>Both collections implement Map. Both collections store value as key-value pairs. The key differences between the two are</p>
<ol>
<li>
<ol>
<li>Hashmap is not synchronized in nature but HashTable&nbsp;is.</li>
<li>Another difference is that the iterator in the HashMap is fail-safe while the enumerator for the HashTable isn’t. Fail-safe – if the HashTable is structurally modified at any time after the iterator is created, in any way except through the iterator’s own remove method, the iterator will throw a <code>ConcurrentModificationException</code></li>
<li>HashMap permits null values and only one null key, while Hashtable doesn’t allow key or value as null.</li>
</ol>
</li>
</ol></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">When to use ArrayList or LinkedList?</h3><div class=""answer-content""><ul>
<li>For the ArrayList, doing random lookup using&nbsp;<code>get()</code>&nbsp;is fast, but for LinkedList, it’s slow. It’s slow because there’s no efficient way to index into the middle of a linked list.</li>
<li>When removing elements, using ArrayList is slow. This is because all remaining elements in the underlying array of Object instances must be shifted down for each remove operation. But here LinkedList is fast because deletion can be done simply by changing a couple of links.</li>
<li>So an ArrayList works best for cases where you’re doing random access on the list, and a LinkedList works better if you’re doing a lot of editing in the middle of the list.</li>
</ul></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is final, finalize() and finally? What does it mean that a class or member is final?</h3><div class=""answer-content""><ul>
<li><strong>final</strong> – Variables defined in an interface are implicitly final. A final class can’t be extended i.e., the final class may not be subclassed. This is done for security reasons with basic classes like String and Integer. It also allows the compiler to make some optimizations and makes thread safety a little easier to achieve. A final method can’t be overridden when its class is inherited. You can’t change the value of a final variable (which is a constant)</li>
<li><strong>finally</strong> – a keyword used in exception handling will be executed whether or not an exception is thrown. For example, the closing of open connections is done in the final method.</li>
<li><strong>finalize</strong> – helps in garbage collection. finalize() method is used just before an object is destroyed and garbage collected.</li>
</ul></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is Method Overriding? What restrictions are placed on method overriding?</h3><div class=""answer-content""><p>When a class defines a method using the same name, return type, and argument list as that of a method in its superclass, the method in the subclass is said to override the method present in the Superclass. When the method is invoked for an object of the class, it is the new definition of the method that is called and not the method definition from the superclass. Restrictions placed on method overriding</p>
<ul>
<li>Overridden methods must have the same name, argument list, and return type.</li>
<li>The overriding method may not limit the access of the method it overrides. Methods may be overridden to be more public, not more private.</li>
<li>The overriding method may not throw any exceptions that may not be thrown by the overridden method.</li>
</ul></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the difference between an Inner Class and a Sub-Class?</h3><div class=""answer-content""><p>An Inner class is a class that is nested within another class. An Inner class has access rights to the class which is nesting it and it can access all variables and methods defined in the outer class.</p>
<p>A sub-class is a class that inherits from another class called a super class. Sub-class can access all public and protected methods and fields of its super class.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What are the various access specifiers for Java classes?</h3><div class=""answer-content""><p>In Java, access specifiers are the keywords used before a class name that defines the access scope. The types of access specifiers for classes are:</p>
<ul>
<li><strong>Public:</strong> Class, Method, Field is accessible from anywhere.</li>
<li><strong>Protected: </strong>Method, Field can be accessed from the same class to which they belong or from the sub-classes, and from the class of the same package, but not from outside.</li>
<li><strong>Default:</strong> Method, Field, and class can be accessed only from the same package and not from outside of its native package.</li>
<li><strong>Private:</strong> Method, Field can be accessed from the same class to which they belong.</li>
</ul></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What?s the purpose of Static methods and static variables?</h3><div class=""answer-content""><p>When there is a requirement to share a method or a variable between multiple objects of a class instead of creating separate copies for each object, we use static keywords to make a method or variable shared for all objects.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is data encapsulation and what?s its significance?</h3><div class=""answer-content""><p>Encapsulation is a concept in Object Oriented Programming for combining properties and methods in a single unit.</p>
<p>Encapsulation helps programmers to follow a modular approach for software development as each object has its own set of methods and variables and serves its functions independent of other objects. Encapsulation also serves the data hiding purpose.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is a singleton class? Give a practical example of its usage.</h3><div class=""answer-content""><p>Singleton design pattern belongs to the creational family of patterns that governs the instantiation process. This pattern ensures at most one instance of a particular class is ever created in your application. Examples such as:</p>
<ul>
<li><strong>Project Configuration</strong>: A class that reads your project configuration can be made Singleton. By making this singleton, you are allowing global access for all classes in your application. If the project configs are stored in a file, it just reads once and holds on the application cache. You don’t have to read the file multiple times.</li>
<li><strong>Application Log:</strong>&nbsp;Logger will be used everywhere in your application. It must be initialized once and used everywhere.</li>
<li><strong>Analytics and Reporting:</strong> If you are using some kind of data analysis tool like Google Analytics, you will notice that they are designed to be a singleton. It initializes once and is used everywhere for each user action.</li>
</ul>
<p>Read more about singleton implementation <a href=""/articles/singleton-design-pattern-in-java"">here</a>.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the difference between continue and break statement?</h3><div class=""answer-content""><p>The <code>break</code> and <code>continue</code> are two important keywords used in the loops. When a break keyword is used in a loop, the loop is broken instantly while when the continue keyword is used, the current iteration is broken and the loop continues with the next iteration.</p>
<p>In the below example, Loop is broken when the counter reaches 4.</p>
<pre class=""prettyprint lang-java"">for (counter = 0; counter&lt; 10; counter++)
    system.out.println(counter);

	if (counter == 4) {
	    break;
	}
}
</pre>
<p>In the below example when the counter reaches 4, the loop jumps to the next iteration and any statements after the continue keyword are skipped for the current iteration.</p>
<pre class=""prettyprint lang-java"">for (counter = 0; counter &lt; 10; counter++)
    system.out.println(counter);
	if (counter == 4) {
    	continue;
	}
}
</pre></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is the difference between double and float variables in Java?</h3><div class=""answer-content""><p>In java, float takes 4 bytes in memory while Double takes 8 bytes in memory. Float is single-precision floating-point decimal number while Double is a double-precision decimal number.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What is Final Keyword in Java?</h3><div class=""answer-content""><p>A variable declared with the final keyword is a constant in java. Value can be assigned only once and after the assignment, the value of a constant can’t be changed.</p>
<p>For example, a constant with the name MAX_LIMIT is declared and assigned value:</p>
<pre>private final int MAX_LIMIT=100</pre>
<p>When a method is declared as final, it can NOT be overridden by the subclasses. This method is faster than any other method because they are resolved at the complied time.</p>
<p>When a class is declares as final, it cannot be inherited. Example String, Integer, and other wrapper classes.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">Can we declare a class as Abstract without having any abstract method?</h3><div class=""answer-content""><p>Yes, we can create an abstract class by using the abstract keywords before the class names even if it doesn’t have any abstract method. However, if a class has even one abstract method, it must be declared as abstract otherwise it will give an error.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">What?s the difference between an Abstract Class and Interface in Java?</h3><div class=""answer-content""><p>The primary difference between an abstract class and an interface is that an interface can only possess a declaration of public static methods with no concrete implementation while an abstract class can have members with any access specifiers (public, private, etc) with or without a concrete implementation.</p>
<p>Another key difference in the use of abstract classes and interfaces is that a class that implements an interface must implement all the methods of the interface while a class that inherits from an abstract class doesn’t require implementation of all the methods of its super class.</p>
<p>A class can implement multiple interfaces but it can extend only one abstract class.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">Can we declare the main method of our class as private?</h3><div class=""answer-content""><p>In java, the main method must be public static in order to run any application correctly. If the main method is declared as private, the developer won’t get any compilation error however, it will not get executed and will give a runtime error.</p></div></div><div class=""card card-shadow mb-4 p-4""><h3 class=""h2 pb-3 my-0"">How we can execute any code even before main method?</h3><div class=""answer-content""><p>If we want to execute any statements before even the creation of objects at the load time of class, we can use a static block of code in the class. Any statements inside this static block of code will get executed once at the time of loading the class even before the creation of objects in the main method.</p></div></div>",0,"naked","post"
"Calling HTTP Services with WebClient in Spring Boot","what-is-webclient-how-to-use-webclient-in-java-springboot","This post explains how to use WebClient to consume the REST APIs in Java SpringBoot.","LIVE","<p class="""" id=""cbe33b50-cb1d-4e06-be09-82be25ee8d16"">WebClient is a non-blocking, reactive HTTP client introduced in Spring 5.0, which is the reactive counterpart to the traditional <a href=""/articles/calling-rest-services-using-resttemplate"" target=""_blank"">RestTemplate</a> in Spring Boot. <span>It provides a simplified and intuitive API for making HTTP requests. It is designed to handle both synchronous and asynchronous operations.</span></p><p class="""" id=""b93bc35c-8f15-4c1a-8dad-d818a20aedb8"">In this article we will see how to use WebClient to integrate with external HTTP/REST services from Spring Boot.</p><p class="""" id=""b93bc35c-8f15-4c1a-8dad-d818a20aedb8"">To use WebClient in a Spring Boot application, follow these steps:</p>
<h2 class="""" id=""b93bc35c-8f15-4c1a-8dad-d818a20aedb8"">Adding WebClient Dependency</h2>
<p class="""" id=""b93bc35c-8f15-4c1a-8dad-d818a20aedb8""><span>Ensure you have the necessary dependencies in your project. If you're using Maven, add the following dependency to your </span><code><strong>pom.xml</strong></code><span> file:</span></p><pre class=""code code-wrap"" id=""f8eb032d-4e41-43ff-8daf-620d1861e44b""><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre><h2 class="""">Create a WebClient Bean </h2><p>In your code, create an instance of <code><strong>WebClient</strong></code> using the <code><strong>WebClient.builder()</strong></code> method. You can customize the WebClient instance by setting properties such as timeouts, authentication, SSL configuration, and more.</p><pre class=""code code-wrap"" id=""217dd6ac-1035-4d77-a56e-96dbffb5ae73""><code>WebClient webClient = WebClient.builder()
    .baseUrl(""https://api.example.com"")
    .build();</code></pre><h2 class="""">Making HTTP Request using WebClient </h2><p>Use the methods provided by the WebClient instance to make HTTP requests. WebClient offers methods like <code><strong>get()</strong></code>, <code><strong>post()</strong></code>, <code><strong>put()</strong></code>, <code><strong>delete()</strong></code>, etc., to perform different types of requests. You can chain these methods together to customize the request.</p><pre class=""code code-wrap"" id=""ad03b460-3976-4274-82e9-2e16726bec8f""><code>Mono&lt;MyResponse&gt; responseMono = webClient.get()
    .uri(""/data/{id}"", id)
    .retrieve()
    .bodyToMono(MyResponse.class);</code></pre><h2 class="""">Using WebClient in Spring Boot</h2><p class="""" id=""daab52b0-8ee4-4627-81ff-646dd5a8d364"">Let us now examine, how to use <code>WebClient</code> in real-time to consume the following APIs from the Spring Boot application. </p><pre class=""code"" id=""d27b4100-e6c4-4066-bbf2-8cecb482f7e7""><code>GET
https://fakestoreapi.com/products - get all products
https://fakestoreapi.com/products/1 - get specific product based on id

POST
https://fakestoreapi.com/products - add a new product

DELETE
https://fakestoreapi.com/products/1 - get specific product based on id</code></pre><p class=""""><span>Let us now declare a domain model for the </span><code>Product</code><span> object.</span><br/></p><pre class=""code"" id=""11916482-1222-4450-bca5-b6aa1b40ff80""><code>public class Product {

    private String image;
    private double price;
    private String description;
    private int id;
    private String title;
    private String category;

    //Getter, Setter
}</code></pre><h3 class="""" id=""235900ab-a5e9-4188-9aab-6d515b4af423"">Consuming GET API in WebClient</h3><p class="""" id=""e4cbf626-2bab-49a7-b395-8fc1ee8a242d"">Let us now create a service class <code>ProductService</code> that consumes the Fakestore API endpoints using WebClient. </p><pre class=""code"" id=""48c33b23-2860-49f9-95df-cb95f6606421""><code>@Service
public class ProductService {

    private final WebClient webClient;

    public ProductService() {
        // you may configure the base URL in applcation.properties 
        this.webClient = WebClient.create(""https://fakestoreapi.com"");
    }

    public Mono&lt;Product[]&gt; getProducts() {
        return webClient.get()
                .uri(""/products"")
                .retrieve()
                .bodyToMono(Product[].class);
    }

    public Mono&lt;Product&gt; getProductById(int productId) {
        return webClient.get()
                .uri(""/products/{id}"", productId)
                .retrieve()
                .bodyToMono(Product.class);
    }
}</code></pre><p class="""" id=""ce6eae9f-b994-4eb4-aa60-e293a6b09c09"">The <code>getProducts()</code> method uses WebClient to make a GET request to the <code>/products</code> endpoint.  The <code>retrieve()</code> method initiates the request and returns a <code>ClientResponse</code> object. The <code>bodyToMono()</code> method is then used to deserialize the response body into an array of <code>Product</code> objects.  Finally, the result is returned as a <code>Mono&lt;Product[]&gt;</code>.</p><p class="""" id=""4d3bc178-6add-4042-a553-07d9ea9942ff"">
</p><p class="""" id=""7eaff218-3d6c-4069-86ba-6f7717051c8f"">Now we can consume the ProductService and call <code>getProducts()</code> endpoint to return the list of products as follows:</p><pre class=""code"" id=""e48f9be0-003c-459f-ac96-2d85cddab20b""><code>Mono&lt;Product[]&gt; productsMono = productService.getProducts();
productsMono.subscribe(
        products -&gt; {
            //TODO write your logic to handle list of products repose
        },
        error -&gt; {
            // Handle error cases
            error.printStackTrace();
        }
);</code></pre><p class="""" id=""2168ac00-dc9c-4547-ad8d-9f63810eb5cb"">Similarly. we can call <code>getProductById()</code> method to return a product specified by Id.</p><pre class=""code"" id=""e64d84f8-9447-4406-88b1-f6c561b909b3""><code>Mono&lt;Product&gt; productMono = productService.getProductById(1);
productMono.subscribe(
        product -&gt; {
            //TODO write your logic to handle product response
        },
        error -&gt; {
            // Handle error cases
            error.printStackTrace();
        }
);</code></pre><h3 class="""" id=""87294d73-af10-4416-8d3c-c32d5b78d56f"">Consuming POST API in WebClient</h3><p class="""" id=""e5f79b8b-d2fb-408b-aea6-100a6b658498"">Now let us expand the <code>ProductService</code> class to add support for the <code>addProduct()</code> method. This method makes a POST request to the /products endpoint and sends the product information as the request body.</p><pre class=""code"" id=""2e86354c-1f38-4f9d-b043-9f6ed9709c67""><code>public Mono&lt;Product&gt; addProduct(Product product) {
    return webClient.post()
            .uri(""/products"")
            .contentType(MediaType.APPLICATION_JSON)
            .body(BodyInserters.fromValue(product))
            .retrieve()
            .bodyToMono(Product.class);
}</code></pre><p class="""" id=""65b87fd5-aeff-4be5-8c57-5df6ade15766"">The post() method is used to initiate the POST request, and the body() method with BodyInserters.fromValue() is used to set the request body with the provided product object. The <code>contentType()</code> method sets the request content type to <code>application/json</code> to indicate that the request body is in JSON format.</p><p class="""" id=""a269e027-dbc7-43b3-bff8-4c27b7187b49"">Now, to consume this new endpoint as follows:</p><pre class=""code"" id=""e7078db5-0e1e-4ec5-a993-e3e0a6897b4c""><code>Product product = new Product();
product.setTitle(""test product"");
product.setPrice(13.5);
product.setDescription(""lorem ipsum set"");
product.setImage(""https://i.pravatar.cc"");
product.setCategory(""electronic"");
Mono&lt;Product&gt; addedProductMono = productService.addProduct(product);
addedProductMono.subscribe(
        addedProduct -&gt; {
            //TODO Added product 
        },
        error -&gt; {
            // Handle error cases
            error.printStackTrace();
        }
);</code></pre><h3 class="""" id=""48359889-dd05-4c46-bd65-fd4cbeb5b10b"">Consuming DELETE API in WebClient</h3><p class="""" id=""1010af5e-a917-43df-9447-88c03b07622a"">Now to delete a product, add the following <code>deleteProduct()</code> method to the ProductService. </p><pre class=""code"" id=""b7904b67-c1ec-4dad-9e71-0a85ea60b539""><code>public Mono&lt;Void&gt; deleteProduct(int productId) {
    return webClient.method(HttpMethod.DELETE)
            .uri(""/products/{id}"", productId)
            .retrieve()
            .bodyToMono(Void.class);
}</code></pre><p class="""" id=""b77f2535-3bb2-4ef8-989a-48e81aa1feaf"">To consume this new endpoint and delete a product, you can use the ProductService as follows:</p><pre class=""code"" id=""e8f9dfe2-b5d5-4696-9ce7-d7762f1b1129""><code>Mono&lt;Void&gt; deletedProductMono = productService.deleteProduct(productId);
deletedProductMono.subscribe(
        response -&gt; {
            // TODO Product deleted successfully
        },
        error -&gt; {
            // Handle error cases
            error.printStackTrace();
        }
);</code></pre>
<h2 class="""" id=""45e411a6-09f2-427c-9a59-84ac5227daa2"">Implement Basic Authentication in WebClient</h2><p class="""" id=""de434764-32d7-41d8-9ff1-c55a1f2d0ee3"">To implement basic authentication with WebClient, we need to create a custom interceptor class that implements the <code>ExchangeFilterFunction</code> interface. The <code>ExchangeFilterFunction</code>  interface represents a functional contract for intercepting and modifying the exchange between the WebClient and the remote server during an HTTP request/response cycle. </p><p class="""" id=""50450fe6-370d-432b-957c-60a96443752d"">It allows applying custom logic such as modifying request headers, logging, adding authentication tokens, modifying the request body, handling retries, or performing custom transformations on the response.</p><p class="""" id=""3e14f3de-e1dc-447d-b587-4887d1c1abe2"">Let us create a <code>BasicAuthInterceptor</code> class that implements the <code>ExchangeFilterFunction</code> interface. </p><pre class=""code"" id=""aecebcd2-4800-4332-8592-c50a576d6e29""><code>import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.ClientRequest;
import org.springframework.web.reactive.function.client.ClientResponse;
import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
import org.springframework.web.reactive.function.client.ExchangeFunction;
import reactor.core.publisher.Mono;

class BasicAuthInterceptor implements ExchangeFilterFunction {
    private final String username;
    private final String password;

    public BasicAuthenticationInterceptor(String username, String password) {
        this.username = username;
        this.password = password;
    }

    @Override
    public Mono&lt;ClientResponse&gt; filter(ClientRequest request, ExchangeFunction next) {
        HttpHeaders headers = request.headers();
        headers.setBasicAuth(username, password);
        headers.setContentType(MediaType.APPLICATION_JSON);
        return next.exchange(request);
    }
}</code></pre><p class="""" id=""4ad5d018-dd98-4756-9e67-c1adde79c908"">Here's an example of how you can configure WebClient to use the Interceptor for doing the basic authentication:</p><pre class=""code"" id=""2f7b0b11-782d-4955-80a8-591f3ef875c9""><code>this.webClient = WebClient.builder()
        .baseUrl(""https://fakestoreapi.com"")
        .filter(new BasicAuthInterceptor(""username"", ""password""))
        .build();</code></pre><p class="""" id=""99c41eea-b557-4e20-8ed1-e0f7ca6147f3"">With this configuration, WebClient will automatically include the basic authentication credentials in the request headers for all requests made using that WebClient instance.</p><h2 class="""" id=""e11a3d5e-6a1a-4b1b-a1ba-0b53dc46092c"">Passsing X-API-Key Header in WebClient Request</h2><p class="""" id=""ed5c9b6f-5bf5-4093-9b48-a949638e3b11"">To pass an <code>X-API-Key</code> header in WebClient requests in Spring Boot, you can use the <code>header()</code> method provided by the WebClient's <code>mutate()</code> function. Here's an example of how you can include the <code>X-API-Key</code> header in WebClient requests:</p><pre class=""code"" id=""471860ab-764a-4a2d-a951-3da07b874d15""><code>WebClient webClient = WebClient.builder()
        .baseUrl(""https://fakestoreapi.com"")
        .build();

 return webClient.get()
        .uri(""/products"")
        .header(HttpHeaders.AUTHORIZATION, ""X-API-Key: YOUR_API_KEY"")
        .retrieve()
        .bodyToMono(Product[].class);</code></pre><p class="""" id=""bba77847-cc78-4463-be5f-ef209229780e"">
</p>",0,"standard","post"
"How to Build a Multi-Select GridView Layout in Flutter - A Step-by-Step Guide","how-to-build-a-multi-select-gridview-in-flutter","This article will walk you through the process of creating a multi-select grid view in Flutter. In this example, we will create a page that displays a list of products in a two-column layout and allows users to select or deselect items.","LIVE","<div class=""page-body""><p id=""33cd3b01-f171-4efa-9d13-13b7131b88c4"" class="""">This article will walk you through the process of creating a multi-select grid view in Flutter. In this example, we will create a page that displays a list of&nbsp;products in a&nbsp;two-column layout and allows users&nbsp;to select or deselect items. The HTTP package will be used to retrieve the product list from the Restful API.</p>

<p id=""50f7d0f9-4ad3-4b80-8eaf-a0b2fa179c07"" class="""">The list of products will be fetched from <code>https://fakestoreapi.com/products/category/electronics</code> API and here is how the JSON response is returned:</p><pre id=""4424fa4c-f599-49a7-8d93-407c1a6b9ba8"" class=""code""><code>[
    {
        ""id"": 9,
        ""title"": ""WD 2TB Elements Portable External Hard Drive - USB 3.0 "",
        ""price"": 64,
        ""description"": ""USB 3.0 and USB 2.0 Compatibility Fast data transfers "",
        ""category"": ""electronics"",
        ""image"": ""https://fakestoreapi.com/img/61IBBVJvSDL._AC_SY879_.jpg"",
    },
    {
        ""id"": 10,
        ""title"": ""SanDisk SSD PLUS 1TB Internal SSD - SATA III 6 Gb/s"",
        ""price"": 109,
        ""description"": ""Easy upgrade for faster boot-up, shutdown..."",
        ""category"": ""electronics"",
        ""image"": ""https://fakestoreapi.com/img/61U7T1koQqL._AC_SX679_.jpg"",
    }
]</code></pre><h2 id=""77f45969-15a2-447b-8867-cbd044ad1f7a"" class="""">Step 1: Setting up the Project</h2><p id=""75f1b7f9-0d0b-4b51-9bbc-762b206159bd"" class="""">Let’s get started! First, create a new Flutter project and add the following dependencies to the <code>pubspec.yaml</code> file</p><pre id=""b2bc5113-7d6d-4510-8676-6110fcbcb6fa"" class=""code code-wrap""><code>dependencies:
  flutter:
    sdk: flutter
  http: ^0.13.5</code></pre><p id=""827201ff-18c5-470a-9ead-47abdc39edd2"" class="""">Note that, we have added the <code>http: ^0.13.5</code> dependency to the <code>pubspec.yaml</code> file. This package will be used to make HTTP API calls. </p><h2 id=""106b0ae7-9103-4ba2-8b9c-25c3171a06d0"" class="""">Step 2: Defining the Model Classes</h2><p id=""a7fc9962-8631-4da7-abf9-1929bcb48241"" class="""">We need to create two models for this example. One to hold the product details returned from the API and the other to hold the selected state. </p><p id=""15012d21-e7e6-491d-935b-473991e941d1"" class="""">Here is what the <code>Product</code> model class looks like:</p><pre id=""24860595-9b12-4acc-a1eb-644037713952"" class=""code""><code>class Product {
  final int id;
  final String title;
  final num price;
  final String category;
  final String description;
  final String image;

  Product(
      {required this.id,
      required this.title,
      required this.price,
      required this.category,
      required this.description,
      required this.image});

  factory Product.fromJson(Map&lt;String, dynamic&gt; json) {
    return Product(
      id: json['id'],
      title: json['title'],
      price: json['price'],
      category: json['category'],
      description: json['description'],
      image: json['image'],
    );
  }
}</code></pre><p id=""6046cbe3-06e8-4cbd-92fa-f905ce134fa2"" class="""">The <code>fromJson()</code> function is a factory constructor that takes a JSON object and returns an object of the specified type. It is used to deserialise product JSON into a <code>Product</code> model object.</p><p id=""484c27f8-8c5d-40bd-b2ed-bc0290e5f104"" class="""">Now, let us create another model <code>MultiSelectItem</code> to represent a selectable item in a multi-select list. It has two properties: <code>value</code> and <code>selected</code>. The value property is the value of the item, and the selected property is a boolean value that indicates whether the item is selected.</p><pre id=""f3ad0556-2303-4811-8427-9e7c0c5bdaca"" class=""code""><code>class MultiSelectItem&lt;T&gt; {
  final T value;
  bool selected = false;

  MultiSelectItem(this.value);

}</code></pre><h2 id=""b3f1539b-02b8-45c1-b0ff-8da699addf31"" class="""">Step 3: Fetching Products from the API</h2><p id=""77e889c1-594d-4379-9020-038b2258e9c6"" class="""">Now that we have the models defined, let us now focus on fetching API data.  For that, we have created a <code>ProductRepository</code> class that fetches products from a fake store API. It uses the <code>http</code> package to make a GET request to the API endpoint. </p><p id=""7a62d231-5d6d-4c0c-b496-1769e93407df"" class="""">The response is then parsed into a list of <code>Product</code> objects using the <code>fromJson</code> factory constructor. </p><pre id=""1b558bab-2b2b-4bbc-bdd3-c320ed424d52"" class=""code""><code>import 'package:http/http.dart' as http;

class ProductRepository {

  Future&lt;List&lt;Product&gt;&gt; fetchProducts() async {
    final response = await http.get(Uri.parse(""https://fakestoreapi.com/products/category/electronics""));

    if (response.statusCode == 200) {
      final jsonList = json.decode(response.body) as List&lt;dynamic&gt;;
      List&lt;Product&gt; products = jsonList.map((json) =&gt; Product.fromJson(json)).toList();
      return products;
    } else {
      throw Exception('Failed to fetch products');
    }
  }
}</code></pre><h2 id=""4a85171a-c869-4d07-bca9-e73c5e7ae4a5"" class="""">Step 4: Building the Product Grid Page</h2><p id=""42f4e02d-1478-41eb-9559-41f2437e7c7e"" class="""">The <code>ProductsPage</code> class is a stateful widget that represents the product grid page. It has an <code>AppBar</code> and a <code>GridView</code>. </p><p id=""249f4b7a-6a74-4cd7-908c-bc9111bff00c"" class="""">The FutureBuilder widget displays a loading spinner while waiting for the products to be fetched. If an error occurs, an error message is shown. Otherwise, the grid view is displayed with the fetched products.</p><pre id=""bdfcf17a-61c2-43c5-ba18-31a3cdc1a4c4"" class=""code""><code>import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class ProductsPage extends StatefulWidget {
  const ProductsPage({super.key});

  @override
  State&lt;ProductsPage&gt; createState() =&gt; ProductsPageState();
}

class ProductsPageState extends State&lt;ProductsPage&gt; {
  List&lt;MultiSelectItem&lt;Product&gt;&gt; listItems = &lt;MultiSelectItem&lt;Product&gt;&gt;[];
  final ProductRepository productRepository = ProductRepository();
  late Future&lt;List&lt;Product&gt;&gt; _product
  get selectedCount =&gt; listItems.where((c) =&gt; c.selected == true).length;

  @override
  void initState() {
    super.initState();
    _products = productRepository.fetchProducts();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.green.shade600,
        title: const Text('Electronics',
            style: TextStyle(
              color: Colors.white,
              fontFamily: ""Outfit"",
              fontWeight: FontWeight.normal,
            )),
      ),
      body: FutureBuilder&lt;List&lt;Product&gt;&gt;(
        future: _products,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return const Center(child: Text('An error occurred while fetching products list.'));
          } else {
            bool isListInitialized = listItems.isNotEmpty;
            if (!isListInitialized) {
              listItems = snapshot.data!.map((e) =&gt; MultiSelectItem(e)).toList();
            }

            return GridView.builder(
              itemCount: listItems.length,
              shrinkWrap: false,
              padding: const EdgeInsets.all(12),
              physics: const ScrollPhysics(),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: (150.0 / 150.0),
                crossAxisSpacing: 8,
                mainAxisSpacing: 8,
              ),
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () {
                    setState(() {
                      listItems[index].selected = !listItems[index].selected;
                    });
                  },
                  child: Container(
                    child: getGridItem(listItems[index], index),
                  ),
                );
              },
            );
          }
        },
      ),
      bottomNavigationBar: SizedBox(
          width: double.infinity,
          child: Container(
            alignment: Alignment.center,
            color: Colors.grey.shade300,
            height: 84,
            padding: const EdgeInsets.fromLTRB(16, 16, 16, 16),
            child: Text(""$selectedCount items in cart"",
                style: const TextStyle(
                  color: Colors.black87,
                  fontFamily: ""Outfit"",
                  fontSize: 22,
                  fontWeight: FontWeight.w600,
                )),
          )),
    );
  }
}</code></pre><h2 id=""115bcb89-f594-4073-9b6f-8c47f070a2c1"" class="""">Step 6: Displaying Product Cards</h2><p id=""ff8d9a90-93b1-4b60-804d-ac7b06175c06"" class="""">Each item in the grid is displayed as a <code>Card</code> widget inside a <code>Container</code>. The <code>Container</code> has a colour that changes based on the selected state of the item. The <code>ListTile</code> widget inside the <code>Container</code> displays the product title and an icon indicating whether the product is selected or not.</p><pre id=""a18b26bc-2a87-4ea6-9f2f-961636f5d2d3"" class=""code""><code>Widget getGridItem(MultiSelectItem item, int index) {
    Product product = item.value;
    Color textColor = item.selected ? Colors.white : Colors.black87;
    Color bgColor = item.selected ? Colors.green.shade500 : Colors.yellow.shade400;
    Color borderColor = item.selected ? Colors.green.shade800 : Colors.yellow.shade800;
    Icon icon = item.selected
        ? const Icon(Icons.remove_shopping_cart_outlined, color: Colors.white)
        : Icon(Icons.add_shopping_cart_outlined, color: Colors.yellow.shade900);

    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(
        side: BorderSide(color: borderColor, width: 2),
      ),
      child: Container(
        padding: const EdgeInsets.all(6),
        color: bgColor,
        child: ListTile(
          trailing: icon,
          title: Text(
            product.title,
            maxLines: 6,
            style: TextStyle(
              color: textColor,
              fontFamily: ""Outfit"",
              fontSize: 18,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
      ),
    );
  }</code></pre><p id=""e4a6137f-9bb3-469f-a229-d14d4ae0318b"" class="""">That is all! Now we have a fully functional multi-selection grid view in Flutter. Feel free to enhance the page with additional features and customize the UI to match your app's design.</p></div>",0,"standard","post"
"How to Create and Customize the Floating Action Button in Flutter","creating-floating-action-button-in-flutter","The Floating Action Button represents the critical user action on that screen. In this article, we will discuss creating a Floating Action Button and various customization options available in flutter.","LIVE","<p id=""96bb8c85-2b82-41a7-a1cc-11732b890dfa"" class="""">
    The Floating Action Button (FAB) represents the critical user action on that screen. This widget looks like a round button floating in the bottom right corner of the screen and hence it is very accessible and within the reach of the users.
</p>

<h3 id=""7012b9dc-dd1d-4275-b604-4c14790073f7"" class="""">Creating a Floating Action Button</h3>
<p id=""fb48e644-e7b5-4633-839a-72efe1cfce20"" class="""">
    The <code>FloatingActionButton</code> widget class in Flutter can be used to create a floating button. The following code shows how to create a simple floating button in Flutter.
</p>
<pre id=""39df6e39-888e-4e6c-a978-8f1a278f3b03"" class=""code code-wrap""><code>import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        floatingActionButton: FloatingActionButton(
          child: const Icon(Icons.format_size_sharp, color: Colors.white),
          onPressed: () {
            // Do something
          },
        ),
      ),

    );
  }
}
</code></pre>
<p><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/regular-floating-action-button.png"" style=""width: 50%;""><br></p><h3 id=""4c672c4a-c96c-4712-a677-fb0f58b4d06c"" class="""">Customize the Floating Action Button</h3>
<p id=""6efad3e5-ddc6-42ad-a8f5-1d0bb2a7812e"" class="""">
    The <code>FloatingActionButton</code> widget has a number of properties that can be used to customize its appearance and behavior. For example, we can use the <code>backgroundColor</code> property to set the button background colour and the <code>onPressed</code> property to set a callback that is executed when the button is pressed.
</p>
<pre id=""3cc0953b-6e52-40ad-896d-7fbf4618c2be"" class=""code""><code>floatingActionButton: FloatingActionButton(
  tooltip: ""Settings"",
  backgroundColor: Colors.cyan.shade800,
  foregroundColor: Colors.white,
  elevation: 5,
  shape: RoundedRectangleBorder(
    borderRadius: BorderRadius.circular(18),
  ),
  onPressed: () {
    // Do something here.
  },
  child: const Icon(Icons.format_size_sharp, color: Colors.white),
),</code></pre><h3 id=""69ad2498-f9bc-4a08-9610-45883d6eb61e"" class="""">Displaying Icon and label on the floating action button</h3>
<pre id=""36ec0943-1760-4637-89c2-1c6383aac5fa"" class=""code""><code>floatingActionButton: FloatingActionButton.extended(
  tooltip: ""Settings"",
  backgroundColor: Colors.cyan.shade800,
  foregroundColor: Colors.white,
  elevation: 5,
  shape: RoundedRectangleBorder(
    borderRadius: BorderRadius.circular(18),
  ),
  onPressed: () {
    // Do something here.
  },
  icon: const Icon(Icons.format_size_sharp, color: Colors.white),
  label: const Text(""Settings""),
),</code></pre>
<p class=""""><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/floating-action-button-with-label.png"" style=""width: 50%;""><br></p><h3 id=""7257924a-604a-472c-b2a1-13a4ed4cf941"" class="""">Small Floating Action Button</h3>
<pre id=""7d4f502e-35f8-4488-8cc0-1dcb3fa89b7f"" class=""code""><code>floatingActionButton: FloatingActionButton.small(
  tooltip: ""Settings"",
  backgroundColor: Colors.cyan.shade800,
  foregroundColor: Colors.white,
  elevation: 5,
  shape: RoundedRectangleBorder(
    borderRadius: BorderRadius.circular(18),
  ),
  onPressed: () {
    // Do something here.
  },
  child: const Icon(Icons.format_size_sharp, color: Colors.white),
),</code></pre>
<p class=""""><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/small-floating-action-button.png"" class="""" style=""width: 50%;""></p><h3 class="""">Large Floating Action Button
</h3><pre id=""910f560e-70a8-4194-8035-6629721f0518"" class=""code""><code>floatingActionButton: FloatingActionButton.large(
  tooltip: ""Settings"",
  backgroundColor: Colors.cyan.shade800,
  foregroundColor: Colors.white,
  elevation: 5,
  shape: RoundedRectangleBorder(
    borderRadius: BorderRadius.circular(18),
  ),
  onPressed: () {
    // Do something here.
  },
  child: const Icon(Icons.format_size_sharp, color: Colors.white),
),</code></pre>
<p id=""8bb161c8-61e9-4cd8-b9fa-4d0da7b62539"" class=""""><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/large-floating-action-button.png"" style=""width: 50%;""><br></p>",0,"standard","post"
"How to Create and Customize Card Widget in Flutter","create-and-customize-card-widget-in-flutter","This article will explore how to create and customize a CardView in Flutter. In this tutorial, we will dive into the basics of creating a CardView and explore various customization options available in Flutter.","LIVE","<p id=""ea80547a-e25f-484e-b7e1-87fb91bf2919"" class="""">This article will explore how to create and customize a CardView
  in Flutter. In this tutorial, we will dive into the basics of creating a CardView and explore various customization
  options available in Flutter. </p>
<p id=""489caa0f-bf69-4358-a4dd-fd809810cb60"" class="""">A <code>CardView</code> is a rectangular panel with slightly
  rounded corners, usually containing the content and the action about a single subject.</p>
<p id=""d7bc8006-cf0e-4357-a4a3-72452cc2234b"" class="""">To learn more about the CardView UX guidelines and design
  principles, you can visit the official Google material design 3 website <a href=""https://m3.material.io/"">https://m3.material.io/</a>.</p>
<p id=""dd7aec53-024c-49e5-913f-2fd427263a4f"" class="""">Now without further delay, let us jump straight into the
  implementation.</p>
<h2 id=""315fb86f-a917-49a6-a83e-a022e72ee3bc"" class=""""><strong>Creating a Basic Flutter App</strong></h2>
<p id=""e52e0a52-e23d-4570-91fa-deabf1d3d444"" class="""">Let us start by creating a simple Flutter project. </p>
<pre id=""3936abcc-ce6b-46ae-ba7e-d6d249026e5c"" class=""code""><code>import 'package:flutter/material.dart';

class CardViewExample extends StatefulWidget {
 const CardViewExample({super.key});

 @override
 State&lt;CardViewExample&gt; createState() {
   return CardViewExampleState();
 }
}

class CardViewExampleState extends State&lt;CardViewExample&gt; {

 @override
 Widget build(BuildContext context) {

   return Scaffold(
       appBar: AppBar(
         backgroundColor: Colors.green.shade600,
         title: const Text('CardView',
             style: TextStyle(
               color: Colors.white,
               fontWeight: FontWeight.normal,
             )),
       ),

       body: const Center(
         child: Text(""Hello World!""),
       ));
 }
}</code></pre>
<p id=""b379ac2b-0b26-4620-a550-b9c78febbea8"" class="""">
</p>
<p id=""27381203-fd07-4575-bde7-8c7e77d5c7df"" class="""">In Flutter, a Scaffold is a widget that provides a basic Material
  Design layout structure. It is a container that can contain other widgets, such as an AppBar, a body, and a floating
  action button. The Scaffold also provides APIs for showing drawers, snack bars, and bottom sheets.</p>
<p id=""4b91b810-bff6-4178-80a0-41ca0469fa10"" class="""">In the code snippet above the page body contains a Text widget
  aligned to the centre of page.</p>
<h2 id=""515b098b-0cee-4d58-83cd-3fce96353295"" class=""""><strong>Creating a CardView</strong></h2>
<p id=""e6831b07-0e9b-480c-8489-a703863ef635"" class="""">Let us now add a basic CardView widget. </p>
<pre id=""f92ccdff-3edd-4a48-a456-0988f1728dbd"" class=""code""><code>body: const Card(
  margin: EdgeInsets.all(20),
  child: Text('Apple iPhone 14 Pro Max, 2021 128 GB',
    style: TextStyle(
      fontSize: 24,
      color: Colors.black87,
      height: 1.3,
      fontWeight: FontWeight.bold,
    ),
  ),
)</code></pre>
<p id=""7c20e331-e671-4661-ad97-23ad558c22c4"" class="""">The above code creates a Card widget with a margin of 20 pixels
  and a Text widget as its child. The text content displays ""Apple iPhone 14 Pro Max, 2021 128 GB"" with
  specific visual styles applied, including font size, color, line height, and font weight.</p>
<p id=""3dddff35-0fdd-4373-a85e-a4d718b73128"" class="""">Let us now add another text view ‘subtitle’ to the card.</p>
<p id=""9a6c5313-e164-43b3-a08a-615a198304ea"" class="""">The CardView in Flutter can contain only one direct child. Hence,
  If we want to have multiple child views, we need to wrap them inside a Column widget.</p>
<pre id=""95a5244c-6f4a-4acc-bf9a-1d0d8c66deaf"" class=""code""><code>Column(
  mainAxisSize: MainAxisSize.min,
  crossAxisAlignment: CrossAxisAlignment.stretch,
  children: [
    Text(
      ""Apple iPhone 14 Pro Max"",
      maxLines: 3,
      style: TextStyle(
        fontSize: 24,
        color: Colors.white,
        height: 1.3,
        fontWeight: FontWeight.bold,
      ),
    ),
    Text(
        'Powerful A14 Bionic chip, 5G capability, and a stunning Super',
        maxLines: 3,
        style: TextStyle(
          fontSize: 20,
          color: Colors.white70,
          height: 1.3,
          fontWeight: FontWeight.w500,
        ))
  ])</code></pre>
<hr id=""12d5d83d-56c2-4b3e-b30c-b19e401a398c"">
<p id=""e87559c4-dcd7-4853-8884-987a4fa982bb"" class="""">The CardView now has two text fields, one for the title and
  another for the subtitle. However, it still doesn’t look great as there is no inner padding around the CardView and
  also no padding between the title and subtitle.</p>
<h2 id=""2aaf0972-f3d7-4d11-8cdf-a4e11bf3c21d"" class=""""><strong>Apply Padding to CardView Elements</strong></h2>
<p id=""fc6f11bd-6a3e-4098-adc0-1fe7f577a0a9"" class="""">To add the padding around the CardView, we need to wrap the
  <code>Column</code> widget inside a <code>Padding</code> widget.</p>
<pre id=""4ea05d5d-6dcf-4af7-b959-63cdb0252cb9"" class=""code""><code>Padding(
    padding: EdgeInsets.all(20),
    child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Text(
            ""Apple iPhone 14 Pro Max"",
            maxLines: 3,
            style: TextStyle(
              fontSize: 24,
              color: Colors.white,
              height: 1.3,
              fontWeight: FontWeight.bold,
            ),
          ),
          SizedBox(
            height: 10,
          ),
          Text(
              'Powerful A14 Bionic chip, 5G capability, and a stunning Super Retina XDR display.',
              maxLines: 3,
              style: TextStyle(
                fontSize: 20,
                color: Colors.white70,
                height: 1.3,
                fontWeight: FontWeight.w500,
              ))
        ])
)</code></pre>
<p id=""64d7ce3d-744b-42bf-9464-a5b32015a02e"" class="""">You may notice another thing in the code snippet above. We have
  added a <code>SizedBox</code> widget between two Text components to allow some space between them. </p>
<h2 id=""0a40c7ca-a6ba-43d4-98d7-ba2d2d225d10"" class=""""><strong>Adding Image to CardView</strong></h2>
<p id=""d1ab200c-39f3-4913-ba61-54f1edcf8d62"" class="""">Let us use the <code>FadeInImage</code> widget to load the image
  from the URL into the Flutter card widget. </p>
<p id=""e2bdacc8-7f40-45b2-ba65-7020f59161cc"" class="""">The <code>FadeInImage</code> is a Flutter widget that displays an
  image with a placeholder while the image is loading. Once the image is loaded, the placeholder is faded out and the
  image is faded in.</p>
<p id=""21e0305e-82f8-42c9-b276-9c1169ba03a9"" class="""">This is quite a nice and handy feature for images that take a long
  time to load.</p>
<pre id=""e9d3ab72-69ea-4d6c-865b-8eaa08e5e401"" class=""code""><code>FadeInImage(
  fit: BoxFit.cover,
  height: 180,
  width: double.infinity,
  placeholder: AssetImage('assets/images/loading.gif'),
  image: NetworkImage(
      'https://images.unsplash.com/photo-1556656793-08538906a9f8'),
),</code></pre>
<h2 id=""9174e10a-3252-4a6e-8a65-57dcb2bcd2d2"" class=""""><strong>Styling Card Widget in Flutter</strong></h2>
<p id=""40cfabed-fda1-4e2d-9049-092116c0975d"" class="""">The Card widget in Flutter provides a number of customizations out
  of the box. Here are some of the properties that allow different customization options </p>
<ul id=""177e70f9-1eb5-40af-8eb8-0ef39a191ae8"" class=""bulleted-list"">
  <li style=""list-style-type:disc""><strong>elevation:</strong>&nbsp;This property controls the amount of shadow that is cast
    by the card. The higher the elevation, the darker the shadow will be.</li>
</ul>
<ul id=""68d00061-afdf-4f85-8e6f-0b47c1d5ef80"" class=""bulleted-list"">
  <li style=""list-style-type:disc""><strong>shape:</strong>&nbsp;This property determines the shape of the card. The default
    shape is a rounded rectangle, but you can also use a square, circle, or other shape.</li>
</ul>
<ul id=""c1e94dec-4046-4c0f-b639-16b43c2504c6"" class=""bulleted-list"">
  <li style=""list-style-type:disc""><strong>color:</strong>&nbsp;This property sets the background color of the card.</li>
</ul>
<ul id=""d26ba5f0-1f0e-44d9-aa08-3bd92c7d59a6"" class=""bulleted-list"">
  <li style=""list-style-type:disc""><strong>border:</strong>&nbsp;This property allows you to add a border to the card. You
    can specify the color, width, and style of the border.</li>
</ul>
<ul id=""08619527-16f4-4b99-9380-bd1322d23818"" class=""bulleted-list"">
  <li style=""list-style-type:disc""><strong>clipBehavior:</strong>&nbsp;This property controls how the card is clipped when it
    is overflowed by its content. The default <code>clipBehavior</code> is Clip.antiAlias, which means that the card
    will be clipped smoothly. You can also use Clip.hardEdge to clip the card with a sharp edge.</li>
</ul>
<ul id=""ead67044-55de-44b7-aab3-8cea5cbbb85b"" class=""bulleted-list"">
  <li style=""list-style-type:disc""><strong>child:</strong>&nbsp;This property is used to set the child widget that will be
    displayed inside the card.</li>
</ul>
<p id=""f848d274-656a-4127-8718-6a3d628dfb0a"" class="""">
</p>
<p id=""d5804a90-0b9f-434f-9ecf-bb68f2403297"" class="""">Here is an example of how to customize a Card widget in Flutter:
</p>
<pre id=""20a27586-dd7f-4e86-96e1-64576cd3b635"" class=""code""><code>import 'package:flutter/material.dart';

class CardViewExample extends StatefulWidget {
  const CardViewExample({super.key});

  @override
  State&lt;CardViewExample&gt; createState() {
    return CardViewExampleState();
  }
}

class CardViewExampleState extends State&lt;CardViewExample&gt; {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          backgroundColor: Colors.green.shade600,
          title: const Text('CardView',
              style: TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.normal,
              )),
        ),
        body: Card(
            elevation: 30,
            margin: const EdgeInsets.all(20),
            color: Colors.green.shade600,
            shape: RoundedRectangleBorder(
              borderRadius: const BorderRadius.all(Radius.circular(30)),
              side: BorderSide(color: Colors.yellow.shade800, width: 2)
            ),
            clipBehavior: Clip.antiAlias,
            child: const Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  FadeInImage(
                    fit: BoxFit.cover,
                    height: 180,
                    width: double.infinity,
                    placeholder: AssetImage('assets/images/loading.gif'),
                    image: NetworkImage(
                        'https://images.unsplash.com/photo-1556656793-08538906a9f8'),
                  ),
                  Padding(
                      padding: EdgeInsets.all(20),
                      child: Column(
                          mainAxisSize: MainAxisSize.min,
                          crossAxisAlignment: CrossAxisAlignment.stretch,
                          children: [
                            Text(
                              ""Apple iPhone 14 Pro Max"",
                              maxLines: 3,
                              style: TextStyle(
                                fontSize: 24,
                                color: Colors.white,
                                height: 1.3,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            SizedBox(
                              height: 10,
                            ),
                            Text(
                                'Powerful A14 Bionic chip, 5G capability, and a stunning Super Retina XDR display.',
                                maxLines: 3,
                                style: TextStyle(
                                  fontSize: 20,
                                  color: Colors.white70,
                                  height: 1.3,
                                  fontWeight: FontWeight.w500,
                                ))
                          ]))
                ])));
  }
}</code></pre>",0,"standard","post"
"How to Add Context Path to a Spring Boot Application","add-context-path-to-a-spring-boot-application","In this article, we will explore how to add a context path to your Spring Boot application.","LIVE","<p><span style=""font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;"">In a Spring Boot application, the context path represents the base URL for accessing your application. By default, it's set to '/',</span><br></p>
    <p id=""4a762757-b4a1-47df-bc17-d3642e636254"" class="""">For example, in the following code snippet</p>
    <pre id=""b42738e0-5081-4503-a1b1-66bc30674216"" class=""code"">      <code>@RestController
@RequestMapping(value = ""/products"")
public class ProductController {

    @GetMapping
    public List&lt;Product&gt; getProducts() {
        return ResponseEntity.ok(productService.getProducts());
    }

    @GetMapping(value = ""/{productId}"")
    public Product getProduct(@PathVariable(value = ""id"") Long id) {        
			//Your service logic goes here..
      return product;
    }</code>
    </pre>
    <p id=""7574bc4e-585d-4c51-ac71-58fbc1c3406f"" class="""">To test this locally, we need to hit </p>
    <pre id=""1e89ff9e-f12c-4d8f-ab6a-838e95099f28"" class=""code""><code>http://localhost:8080/products
http://localhost:8080/products/{productId}</code>
    </pre>
    <p id=""cf0bab4e-9764-4fda-9dca-860d2383bc0b"" class="""">But sometimes you might want to change the path to make it more meaningful or to avoid conflicts. So, how do we do that?”</p>
    <p id=""4e2697c4-2eaf-4a20-b76d-34725a28ee02"" class="""">To change the context path, you need to add the following property to your&nbsp;<code>application.properties</code>&nbsp;file.</p>
    <pre id=""606df389-132a-4a15-a343-9daaf5cc65a8"" class=""code code-wrap"">      <code>server.servlet.context-path=/api/1.0</code>
    </pre>



<p>Alternatively, if you're using the application.yaml file, you can do this</p>

<pre id=""606df389-132a-4a15-a343-9daaf5cc65a8"" class=""code code-wrap""><code>
server:
   servlet:
     context-path: '/api/1.0'
</code></pre><code>


    <p id=""52223864-922b-4981-a82c-4eb2a0f3d131"" class="""">Now with this, you run your application and you will be able to access the endpoints with a new URL</p>
    <pre id=""f5b70de7-49c3-417c-b2fe-ce85d77ff2f8"" class=""code"">      <code>http://localhhost:8080/api/1.0/products
http://localhhost:8080/api/1.0/products/{productId}</code>
    </pre>
    <p id=""ca493298-b384-4eb9-a22f-1a4d0a5ee8ca"" class="""">I hope this helps! Let me know if you have any other questions.</p>
    <p id=""7300deff-a6c4-4d69-babd-e5db1d3efd42"" class="""">
    </p></code>",0,"standard","post"
"How to Set up MongoDB within a Docker Container","how-to-set-up-mongodb-within-a-docker-container","A step-by-step tutorial that covers how to set up MongoDB within a Docker container effortlessly and expose the container port on your host machine.","LIVE","<p id=""5d97901d-4094-4e33-902b-96c97904d733"" class="""">
                    In this tutorial, we'll show you how to set up MongoDB in a Docker container. By containerizing MongoDB, you can quickly deploy and use MongoDB effortlessly for your local development.
                </p>
                <p id=""7bc4a543-fd4e-4e33-bf0a-a7ad2a175a66"" class="""">
                    Here is the step-by-step guide to setting up MongoDB within a Docker container:
                </p>
                <p id=""8f991568-4e2c-4690-a750-dca32c5b50ad"" class=""""></p>
                <h3 id=""40464f85-827e-46c7-9ac4-4de39f3c2966"" class="""">Install Docker</h3>
                <p id=""7f839c6c-1bb9-405f-9559-922540fead3b"" class="""">
                    First, make sure you have the Docker installed on your machine. If it is not installed, you can download the Docker Desktop from the official Docker website. Visit the website <a href=""https://docs.docker.com/engine/install/"" target=""_blank"">https://docs.docker.com/engine/install/</a> and download the package appropriate for your operating system.
                </p>
                <p id=""ee5cf871-c19e-4222-81c5-7c5e956be023"" class=""""></p>
                <h3 id=""c39cb809-3923-4bfe-a113-cb3b6e21a702"" class="""">Pull MongoDB Image</h3>
                <p id=""45c7e3be-ff30-4483-9a35-66ec4eccb7ce"" class="""">
                    Now, let us pull the official MongoDB docker image from the Docker Hub. For that, open your terminal and run the following command:
                </p>
                <pre id=""de506a54-0f77-4da6-ab7e-30fbdb448d82b"" class=""code""><code>$ docker pull mongo</code></pre>
                <p id=""dad2ba46-bdd1-4fba-9d92-639f221e8db9"" class=""""></p>
                <h3 id=""6bf61870-91d7-4943-af86-86f582575e0b"" class="""">Run MongoDB Container</h3>
                <p id=""774cd5d0-5cc7-4176-863f-feba1b63e71a"" class="""">
                    Now, run the following command to start a MongoDB in a container,
                </p>
                <pre id=""cac8add4-9f1f-42f9-a054-371771007e7d"" lang=""bash"">docker run
    -d
    --name mongodb
    -p 27017:27017
    -e MONGO_INITDB_ROOT_USERNAME=YOUR_USERNAME
    -e MONGO_INITDB_ROOT_PASSWORD=YOUR_PASSWORD
    mongo
</pre>
                <p id=""8995f793-7d6e-470c-b818-66376e366492"" class="""">Options:</p>
                <ul id=""bbbbcf05-4291-45f8-a910-5cbd84428f9b"" class=""bulleted-list"">
                    <li style=""list-style-type:disc"">
                        The <code>-d</code> option is used to run the container in the detached mode, meaning the container will run in the background and won't block your terminal.
                    </li>
                </ul>
                <ul id=""13819de5-dc80-4a1e-b981-11330557de48"" class=""bulleted-list"">
                    <li style=""list-style-type:disc"">
                        The <code>--name</code> options allow you to provide a name for your MongoDB container. I have use <code>mongodb</code> here but you can use anything you really want.
                    </li>
                </ul>
                <ul id=""b5409b5f-c10c-4e4a-9da0-b28e22576faa"" class=""bulleted-list"">
                    <li style=""list-style-type:disc"">
                        The <code>-p</code> option is used to map the container’s port into the host machine port. The port 27017 on the left-hand side of the colon (<code>:</code>) represents the port of the host machine. And the right-hand side port is the port of MongoDB. The default MongoDB port is 27017 .
                    </li>
                </ul>
                <ul id=""05592528-b576-4f0a-a2dd-a8a5c18c18db"" class=""bulleted-list"">
                    <li style=""list-style-type:disc"">
                        The default MongoDB user name and password can be set using the environment variable <code>MONGO_INITDB_ROOT_USERNAME</code> and <code>MONGO_INITDB_ROOT_PASSWORD</code>. The environment variables are provided with <code>-e</code> option.
                    </li>
                </ul>
                <p id=""5a878100-1b50-4bd5-966a-831abda77a7e"" class="""">
                    This command will start a Docker container named ""MongoDB"" and map the MongoDB default port 27017 from the container to the same port on your host machine.</p><p id=""5a878100-1b50-4bd5-966a-831abda77a7e"" class="""">
<h3>Verify Running Mongo Container</h3>
</p>
                <p id=""e6578ca7-be86-4c98-bf44-36b37ef38a0c"" class="""">
                    You can check if the container is running by executing the command:
                </p>
                <pre id=""330e693d-eb8f-46b9-b32e-5c654c85b7ef"" class=""code code-wrap""><code>docker ps</code></pre>
                <p id=""8e6d235e-3004-4f63-b350-398098ba3a41"" class="""">
                    It should display a list of running containers, and you should see the ""mongodb"" container in the list.
                </p>
                <h3 id=""ec5b6203-fd8d-4976-ad9b-2caa4ebbed45"" class="""">Stop Mongo Container</h3>
                <p id=""6550fa96-8611-427b-a9c9-198c915f8e70"" class="""">
                    To stop a MongoDB Docker container, you can use the following command:
                </p>
                <pre id=""ebdb25a0-ba2c-407c-907f-caf322b876dd"" class=""code""><code>docker stop mongodb</code></pre>
                <p id=""3fdb8912-1d57-4b46-b63a-07797d3d2fbb"" class="""">
                    To Start MongoDB again
                </p>
                <pre id=""30805eb6-98ca-44cc-973a-94534b6e0927"" class=""code""><code>docker start moongodb</code></pre>",0,"standard","post"
"How to Use Interceptor in Spring Boot Application","how-to-use-interceptor-in-spring-boot","Learn about Spring Boot Interceptors: Create Secure REST APIs with Real-Time Use Cases. Learn Filters vs. Interceptors, Implement & Register in Spring Boot, Define Execution Order, Set Path Patterns, and Check Basic Authentication.","LIVE","<h2 id=""edceeef9-535e-45c1-89ae-3474aebbe677"" class="""">Introduction to Interceptors </h2><p id=""19333af6-b317-4acd-a1a0-04187aa5acd7"" class="""">Spring Interceptors are used to intercept client requests before they are handled by the controller. They can also be used to intercept the response before the response is sent back to the client. </p><p id=""bdac4be2-810f-4907-a745-c523ff43d89e"" class="""">Interceptors are part of the Spring Web MVC framework and provide a way to add pre/post-processing logic to your application's request-response lifecycle.</p><h3 id=""4cff9726-06c2-4634-9277-e676ceb8e779"" class="""">Realtime Use Cases of Interceptors</h3><p id=""53ada25a-8c8c-42c0-8021-1573b82fc627"" class="""">Some of the the common use cases for interceptors include tasks, such as:</p><ul id=""5f78cf3c-b6a1-4aca-854a-1338bd095eb2"" class=""bulleted-list""><li style=""list-style-type:disc""><strong>Logging:</strong>&nbsp;Interceptors can be used to log HTTP requests and responses. This can be useful for debugging or tracking the performance of an application.</li></ul><ul id=""2e779466-4917-4fef-ba8a-ab9fa88829d7"" class=""bulleted-list""><li style=""list-style-type:disc""><strong>Security:</strong>&nbsp;Interceptors can be used to enforce security policies. For example, an interceptor could be used to check that a user is authenticated before allowing them to access a resource.</li></ul><ul id=""fccea7b2-42d6-470c-b11b-da396e120d31"" class=""bulleted-list""><li style=""list-style-type:disc""><strong>Caching:</strong>&nbsp;Interceptors can be used to cache HTTP requests and responses. This can improve the performance of an application by reducing the number of times that requests need to be made to the underlying resources.</li></ul><ul id=""ae1dce0b-778b-4b7b-a4d2-cccff6b395cb"" class=""bulleted-list""><li style=""list-style-type:disc""><strong>Transformation:</strong>&nbsp;Interceptors can be used to transform HTTP requests and responses. For example, an interceptor could be used to convert JSON requests to XML responses.</li></ul><h3 id=""ba4c1d28-9779-45b8-835e-d9e6cf713faf"" class="""">Spring Request/Response Life-Cycle</h3><p id=""bd935ffb-5eb5-4211-a047-617c8e106a7e"" class=""""><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/spring-request-response-lifecycle.png"" style=""width: 978px;""><br></p><p id=""3db291b2-1d23-4ca7-be6f-287ca45cb26d"" class="""">In a typical Spring Boot application flow, when the client sends an HTTP request to a specific endpoint(URL), the request is first received by the web server (e.g., Apache Tomcat or Jetty) and then forwarded to the Spring Boot application.</p><p id=""fa44e648-0690-477c-9621-06853448c940"" class="""">The Dispatcher Servlet is the entry point for incoming requests in the Spring Boot application. Once the DispatcherServlet receives the request, it consults the HandlerMapping. The HandlerMapping is responsible for determining which controller should process the incoming request based on the URL mapping defined within your controller. </p><h3 id=""eec0adbc-4648-471e-9f6d-b454cca97a5d"" class="""">Filters vs Interceptors</h3><p id=""db990c45-0c29-4307-bf66-d560921f00fd"" class="""">Similar to Interceptors, you can also use Servlet filters to intercept the request/response in Spring Boot. But Filters are part of the Servlet API and operate at a lower level. </p><p id=""11821ce1-2f80-4a70-8c1a-6b6fcd4ed317"" class="""">Filters are not specific to the Spring framework. However, you can still use Servlet filters in a Spring application because the Spring framework itself is built on top of the Servlet API.</p><p id=""8e455737-379a-4140-857d-530fc4677748"" class="""">Okay then, how do I decide which one to use?</p><ul id=""800aa8fa-9ab8-4df2-8ab6-af4cbaa000cc"" class=""bulleted-list""><li style=""list-style-type:disc"">If the task is specifically related to Spring MVC and requires access to the Spring application context, then interceptors are more suitable.</li></ul><ul id=""4c26db5b-1c95-4540-842d-cb03ab425286"" class=""bulleted-list""><li style=""list-style-type:disc"">If the task is not tied to Spring MVC and can be handled at the Servlet level, a filter might be a more straightforward and flexible option.</li></ul><h2 id=""ef2dfa57-0fcf-4589-bc48-3cfa7b971361"" class="""">Creating Interceptor in Spring Boot</h2><p id=""f3e2b869-2c71-4d61-8631-77b0e520d21e"" class="""">To create an interceptor in Spring Boot, you typically create a class that implements the <code><strong>HandlerInterceptor</strong></code> interface. </p><p id=""76c3fea0-802e-4256-8936-323e19042272"" class="""">The <code><strong>HandlerInterceptor</strong></code> interface has three methods:</p><ol type=""1"" id=""32b74c26-4813-4d7c-8977-ea56db741ba6"" class=""numbered-list"" start=""1""><li><code><strong>preHandle()</strong></code>: The preHandle() method is the most important method in the HandlerInterceptor. This method is executed before the actual controller method is called. It returns a boolean value indicating whether the request should continue to the controller or be stopped.</li></ol><ol type=""1"" id=""6245af73-7b34-4bf7-acc0-232498f5a1a2"" class=""numbered-list"" start=""2""><li><code><strong>postHandle()</strong></code>: This method is executed after the controller method is called but before the response is sent to the client. It allows you to modify the model and view before rendering the response. You can use this method to perform any tasks that you need to do after the request has been handled. For example, you could use the <code>postHandle()</code> method to add additional information to the response, or to log the response.</li></ol><ol type=""1"" id=""0df52232-ef27-46cd-adc6-908904326af9"" class=""numbered-list"" start=""3""><li><code><strong>afterCompletion()</strong></code>: This method is executed after the response has been sent to the client. This method is called even if an exception was thrown during the processing of the request. It's useful for cleanup or resource release tasks.</li></ol><h3 id=""dccf5431-4893-4168-b3bf-84f6acff81e4"" class="""">Create a Spring Boot REST API</h3><p id=""28c147ba-7a9d-4399-8f1e-cbdffe76fe8d"" class="""">For the demonstration purpose, we will implement a Spring boot REST API with the following endpoints:</p><ul id=""8b266105-8670-4ad9-8f5d-f7011c58b137"" class=""bulleted-list""><li style=""list-style-type:disc"">GET /products/list</li></ul><ul id=""6c69e225-acb8-4fd9-b9ba-7fceffeb5c97"" class=""bulleted-list""><li style=""list-style-type:disc"">POST /products/new that accepts the following JSON payload.</li></ul><pre id=""46ce0b5a-48dc-44b0-8c34-880146c9fcf0"" class=""code""><code>{
   ""id"": ""100"",
   ""name"": ""iPhone 12"",
   ""price: 1200.00
}</code></pre><p id=""11915a4c-b1bf-4111-8dec-6a64fb94b9f1"" class="""">First, let us generate a new Spring Boot project using a Spring Initializer and add the <code>spring-starter-web</code> and <code>lombook</code> dependencies. </p><h4 id=""81c5bfea-ab94-47ed-9f1a-c308828937e0"" class="""">The Product Model</h4><p id=""6130d06d-99df-4bd6-ad1a-88e3be9a01fe"" class="""">Let us create a new file <code>Product.java</code> and add the following code:  </p><pre id=""629f5425-522b-459f-90e3-25e972bb6676"" class=""code""><code>public class Product {

    Long id;
    String name;
    Double price;

    public Product(Long id, String name, Double price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }
}</code></pre><h4 id=""7d0e1ca9-669f-423c-b207-ae7bbbd923ff"" class="""">The Product Controller</h4><p id=""6f2d2f0d-73d3-4dd8-855e-8089d04e31aa"" class="""">Now, let us add a controller class <code>ProductController.java</code> and define the endpoint mappings:</p><pre id=""4bd8fefc-f173-4d50-a533-3be6d5fc6bf8"" class=""code""><code>@RestController
@RequestMapping(value = ""/products"",
        produces = {MediaType.APPLICATION_JSON_VALUE})
public class ProductController {

    @GetMapping(value=""/list"")
    public ResponseEntity&lt;List&lt;Product&gt;&gt; getProducts() {
        List&lt;Product&gt; products = List.of(
                new Product(1001L, ""iPhone 12"", 1200.0),
                new Product(1002L, ""iPhone 14"", 300.0)
        );

        return ResponseEntity.ok(products);
    }

    @PostMapping(value=""/new"")
    public ResponseEntity&lt;Product&gt; createProduct(
                @RequestBody Product product)throws URISyntaxException {
        return ResponseEntity.ok(product).build();
    }

}</code></pre><p id=""0d7edefe-433d-49c9-abb2-794110b1a89d"" class="""">Run your Spring Boot application now and verify if both endpoints are working. </p><h2 id=""d3f9c366-d563-469c-ae3d-a0f1db1c00f1"" class="""">Implementing Interceptor in Spring Boot</h2><p id=""a1bd91a0-beed-425c-93d4-cd8f451e5000"" class="""">Now that we have our Spring Boot application running let us now create an interceptor to print the logs when a request is made to our controller.</p><p id=""a45d2011-9edb-465c-94fc-04934fe026da"" class="""">To create a interceptor in Spring boot, let us now create a new class  <code>LogHandlerInterceptor</code>and  implement <code>HandlerInterceptor</code> interface.</p><pre id=""c07824ab-6322-4863-b2d0-83df115a61d2"" class=""code""><code>import lombok.extern.slf4j.Slf4j;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@Slf4j
public class LogHandlerInterceptor implements HandlerInterceptor {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
      log.info(""LogHandlerInterceptor::preHandle()"");
      return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        log.info(""LogHandlerInterceptor::postHandle()"");
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        log.info(""LogHandlerInterceptor::afterCompletion()"");
    }
}</code></pre><h2 id=""b902f45a-9454-4ddf-8615-189dcebce49b"" class="""">Registering the Logger Interceptor</h2><p id=""062c6dfb-2645-4651-9fa5-04895e032d39"" class="""">Once you have created your custom interceptor, you need to register it with the Spring Boot application using <code><strong>WebMvcConfigurer</strong></code> configuration:</p><pre id=""658c041a-5431-41a8-a678-c7b9b58b759e"" class=""code""><code>import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new LogHandlerInterceptor());
    }
}</code></pre><p id=""13ff435a-ee3d-4f5c-acf7-a698b6a24e6b"" class="""">With this configuration, your interceptor will be invoked for each incoming request, and you can implement your custom logic in the interceptor's methods accordingly.</p><h2 id=""bf684b8e-4f73-4ddf-9a06-c6866d538984"" class="""">Interceptor to Check Basic Authentication</h2><p id=""6dd3f2e7-0e62-46e3-b72f-4272d4423916"" class="""">Let us now add another interceptor to perform the basic authentication check. This interceptor will be invoked only for  <code>/products/new</code> endpoint and it will do the basic authentication check before allowing access to the controller.</p><p id=""02a3f98f-3c2b-4b23-a041-0d3faa71b186"" class="""">For this example, we will hardcode a username and password to verify the credentials passed by the user. </p><pre id=""d7c5c57a-82ad-47dd-982e-e846baa538c0"" class=""code""><code>import lombok.extern.slf4j.Slf4j;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

@Slf4j
public class BasicAuthInterceptor implements HandlerInterceptor {
    private static final String USERNAME = ""admin"";
    private static final String PASSWORD = ""admin"";

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        log.info(""BasicAuthInterceptor::preHandle()"");

        String authHeader = request.getHeader(""Authorization"");
        if (authHeader != null &amp;&amp; authHeader.startsWith(""Basic "")) {

            String base64Credentials = authHeader.substring(""Basic "".length());
            byte[] decodedCredentials = Base64.getDecoder().decode(base64Credentials);
            String credentials = new String(decodedCredentials, StandardCharsets.UTF_8);

            String[] parts = credentials.split("":"");
            String username = parts[0];
            String password = parts[1];

            if (USERNAME.equals(username) &amp;&amp; PASSWORD.equals(password)) {
                return true;
            }
        }

        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, ""Unauthorized"");
        return false;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        log.info(""BasicAuthInterceptor::postHandle()"");
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        log.info(""BasicAuthInterceptor::afterCompletion()"");
    }
}</code></pre><p id=""ca6ca049-6070-43d6-b796-3f24a794f037"" class="""">
</p><p id=""92e4300d-1f30-41af-ba9c-c857e2473fae"" class="""">Now, we need to register the BasicAuthInterceptor class by adding it to InterceptorRegistry</p><pre id=""d4a25f25-6f9a-4e6a-b7e7-a62637c7c181"" class=""code""><code>import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new LogHandlerInterceptor());
        registry.addInterceptor(new BasicAuthInterceptor())
                .addPathPatterns(""/products/new"");
    }
}</code></pre><p id=""1d95aa87-3f73-4a01-a859-57ef56bb739c"" class="""">The order of execution can be set for the interceptors using the <code>order()</code> method. </p><pre id=""466828ea-8738-43d1-bd74-0a1a348e494f"" class=""code""><code>registry.addInterceptor(new LogHandlerInterceptor()).order(1);</code></pre><p id=""4ee85daf-c48f-49a8-870b-568cd63dc8bc"" class="""">
</p>",0,"standard","post"
"Python: Introduction to Python and Installation","python-introduction-to-python","This lesson will help you get started with all the tools you need to begin writing your very lines of Python! Python has an interesting and specific syntax. Learn all about it with this overview on the language.","LIVE","<p></p><p><strong>Python</strong> is a general-purpose, dynamic, interpreted and object-oriented programming language. It is one of the most popular and fastest growing programming languages in the world. It is used in wide variety of applications including web development, data analysis, and running background tasks.</p>
<p>Python has a simple, easy to learn syntax, which emphasizes readability. Applications written in Python can run on almost any computer, including those running Windows, macOS, and all popular Linux distributions. The Python ecosystem has grown over the years and contains a wide range of development tools for writing, debugging, and publishing Python applications.</p>

<h2 id=""prerequisites"">Prerequisites</h2>
<ol>
<li>A computer that can install and run Python.</li>
<li>A desire to learn how to code!</li>
</ol>
<p>With that being said, let's get started!</p>

<h2 class="""">Python Interpreter</h2>
<p>Python is an interpreted language, which reduces the  edit-test-debug cycle because there's no compilation step required. In  order to run Python apps, you need a runtime interpreter to  execute the code.</p><p>The python code is compiled into a lower-level, and platform-independent byte code. The byte code compilation happens internally and hidden from developer. </p><p>The byte code then gets picked up by the Virtual Machine and executes the <strong class=""jf ih"">byte code</strong> instructions step by step to carry out their operations.</p><p><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/01_02.png"" style=""width: 698px;""><br></p>
<p></p><p></p><h2 id=""installing-python""></h2><h2 id=""installing-python"" class="""">Installing Python</h2>
<p></p><p>If you already have Python installed, you can skip this section. Otherwise, install the latest version of <strong>Python 3</strong>.</p>
<p>Head over to the <a href=""https://www.python.org/downloads/"">downloads page</a> to get your copy.</p>
<p>Please note that, Python comes bundled with Mac OS X. But the version that you have is quite likely an older version.  <a href=""http://www.python.org/download/mac/"">Download</a>  and install the the latest binary version of Python that runs on both Power PC and Intel systems.</p>
<p></p><p></p><p><br><img src=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/summernote/01-python.png"" style=""width: 698px;""></p><p>You can verify the installation by running the following command on your terminal.</p><p>Alternatively, you can type:
</p><p></p><pre class=""pre__block""><code class=""language-bash"">python3 -V</code>
</pre>
<p>This command will simply print the Python version installed in your computer.</p>
<pre class=""pre__block""><code class=""language-bash"">python -V
Python 3.10.6</code>
</pre>
<h2 id=""hello-world"" class="""">Writing Your First Python Program</h2>
<p>Create a new file titled <code>helloworld.py</code>. Inside the file, put this code in::</p>
<pre class=""pre__block""><code class=""language-python"">print(""Hello world!"")</code>
</pre>
<p>To run the program, type <code>python3 helloworld.py</code> command and hit Return.</p><pre class=""pre__block"">$ python3 helloworld.py
Hello World!</pre>
<p>Congratulations! You just wrote your first program in Python. As you can see, this was a pretty easy task. This is the beauty of the Python programming language.</p><h2 class="""">
Python Implementations</h2>
<p>Python is licensed under OSI open source license and there are multiple implementations available depending upon your requirements.</p>
<ul><li><strong>CPython:</strong> Commonly used for web development, application development and scripting.</li><li><strong>Anaconada:</strong> This distribution is used for scientific programming tasks such as data schience and machine learning.</li><li><strong>Iron Python:</strong> Open source implementation built for .NET runtime</li><li><strong>Jupyter Notebook:</strong> Jupyter Notebook is a web-based interactive programming environment that supports various programming languages, including Python. Used mainly for academic research and mathematical modeling, machine learning and for teaching.</li></ul>
<p></p>
<p>You now have everything you need to begin this class on Python! Let's get started with Python!</p>

<h2 class="""">Python Syntax and Indentation</h2>
<p>Indentation refers to the space used at the beginning of a code to improve readability. Unlike any other programming language, indentation in python is very important as it uses indentation to indicate a block of code.<br></p><p></p><p>For example, if we're writing a conditional statement using if statement, here's how we use spaces to indent the code.
</p><pre class=""pre__block"">if True:
    print(""True"")
else:
    print(""False"")
</pre>
<pre class=""pre__block"">True
</pre>
<p>If you're familiar with any other programming language like Java, or .NET, they use curly braces to indicate a code block. However, for Python you do not require curly braces, instead you're required to use indent your code adequately.</p>
<p>Here are examples of broken syntax in Python:</p>
<pre class=""pre__block"">if True:
print(""True"")
else:
print(""False"")
</pre>
<pre class=""pre__block"">if True:
    print(""True"")
        print(""True"")
            print(""True"")
</pre>
<p>For all the same reasons, code in Python needs to be perfectly indented or else it will not run.</p>

<h2>Comments in Python<br></h2>
<p>At some point down the road, you will want to leave comments in your code, either for yourself in the future, or for another developer working on the same project as you. Here is how comments in Python look like:</p>
<pre class=""pre__block""># First comment
print(""Hello world!"") # second comment
</pre>
<pre class=""pre__block"">Hello world!
</pre>
<p>Fairly straightforward! Comments in Python start with the # character and the following is the comment itself. Unlike most programming languages, Python does not support multi-line comments. However, nothing technically stops you from doing this:</p>
<pre class=""pre__block""># This
# is
# a
# multi-line
# comment
print(""Hello world!"")
</pre>
<pre class=""pre__block"">Hello world!
</pre>
<p>This works but keep in mind that comments in general should be short anyway, so using multi-line comments should be done sparingly, if at all.</p>



<h2 class="""">References</h2>
<ul><li><a href=""https://www.python.org/"">Python Homepage</a></li><li><a href=""https://www.python.org/downloads/"">Python Downloads Page</a></li></ul>
<p></p><p></p><p></p>",1,"standard","lesson"
"Python: Variables and Basic Data Types","python-variables-and-types","This lesson will go over variables and types, including how to declare them, initialize them, and what each kind is.","LIVE","<p>Variables are the one of the fundamental building blocks of Python that are used to hold data in memory. </p><p>Variables have two components, name and type. The data in the variables can be referenced by their names. Type defines what type of data it stores. </p><p>Let's start by creating one.
</p><h2>Declaration</h2>
<p>Declaring a variable is incredibly simple in Python. Unlike in other programming languages, you do not need to specify 
the type of variable, it is done automatically for you.</p><p>Example of variable declaration looks like this:</p>

<pre class=""pre__block"">name = ""John Doe""
x = 777
print(name)
print(x)
</pre>


The above code block prints

<pre class=""pre__block""><code class=""language-python"">John Doe
777
</code></pre>

<ul><li>A variable is declared and assigned a value using the assignment operator =<br></li><li>Python treats bool as a special type of integer. Technically, True has a value of 1 and False has a value of 0. <br></li><li>A
 string is a collection of zero or more characters. Strings are commonly
 declared using single quotation marks, but you can also use double 
quotation marks.<br></li><li>Python treats integer numbers and decimal numbers differently.</li></ul><p class=""""></p><h2>Variable Naming Rules</h2>
<p>Here are the rules for what are valid Python variable names:</p>
<ul>
<li>The variable name must begin with a letter or underscore</li>
<li>The variable name cannot begin with a number or symbol</li>
<li>Throughout the entire variable name, it can only contain alpha-numeric characters with the only exception being underscores</li>
</ul>
<p>With that in mind, here are some examples of valid Python variable names:</p>
<pre class=""pre__block""><code class=""language-python"">apples
_apples
_apples_</code>
</pre>
<p>And here are examples of invalid Python variable names:</p>
<pre class=""pre__block""><code class=""language-python"">1apples
app les
$apples
%apples</code>
</pre>
<aside class=""aside__warning"">
<p>    Keep in mind that variable names are case-sensitive!</p>
</aside>
<h2 id=""data-types"">Data Types</h2>
<p>Python supports five standard data types. We've already seen two of them already, <strong>Numbers</strong> and <strong>String</strong>. Here is the entire list:</p>
<ul>
<li>Numbers</li>
<li>String</li>
<li>List</li>
<li>Tuple</li>
<li>Dictionary</li>
</ul>
<p>It is useful to know that you can get the type of a variable by using the <code>type</code> method, like so:</p>
<pre class=""pre__block""><code class=""language-python"">name = ""John Doe""
print(type(name))
print(name)

pi = 3.1415926
print(type(pi))
print(pi)

x = 777
print(type(x))
print(x)

isSuccess = True
print(type(</code><code class=""language-python"">isSuccess</code><code class=""language-python"">))
print(</code><code class=""language-python"">isSuccess</code><code class=""language-python"">)</code></pre>

Output of the code prints:
<pre class=""pre__block""><code class=""language-python"">&lt;class 'str'&gt;
John Doe
&lt;class 'float'&gt;
3.1415926
&lt;class 'int'&gt;
777
&lt;class 'bool'&gt;
True
</code></pre>

We'll get into <strong>lists</strong>, <strong>tuples</strong>, and <strong>dictionaries</strong> in later lessons.",2,"standard","lesson"
"Python: Math Functions","python-math","Learn about how to do arithmetic and work with the basic math operators and functions provided by Python.","LIVE","<p>Python is used extensively in finance, simulation, data science, statistical analysis, and in many other mathematically-intensive fields of work. The reason being is that Python makes working with numbers very easy.</p>

<h2 id=""arithmetic-operators"">Arithmetic Operators</h2>
<p>Here are the most common <strong>arithmetic operators</strong> that allow you to manipulate numbers in Python.</p>

<h3>Addition</h3>
<p>You can add numbers in Python using the <code>+</code> operator.</p>
<pre class=""pre__block""><code class=""language-python"">x = 2
y = 5

total = x + y
print(total)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">7</code>
</pre>
<h3>Subtraction</h3>
<p>You can subtract numbers in Python using the <code>-</code> operator.</p>
<pre class=""pre__block""><code class=""language-python"">x = 8
y = 3

total = x - y
print(total)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">5</code>
</pre>

<h3>Multiplication</h3>
<p>You can multiply numbers in Python using the <code>*</code> operator.</p>
<pre class=""pre__block""><code class=""language-python"">x = 4
y = 6

total = x * y
print(total)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">24</code>
</pre>
<h3>Division</h3>
<p>You can divide numbers in Python using the <code>/</code> operator.</p>
<pre class=""pre__block""><code class=""language-python"">x = 54
y = 2

total = x / y
print(total)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">27.0</code>
</pre>

<h3>Modulus</h3>
<p>You can find the remainder of a division in Python using the <code>%</code> operator.</p>
<pre class=""pre__block""><code class=""language-python"">x = 64
y = 23

total = x % y
print(total)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">18.0</code>
</pre>
<h3>Exponents</h3>
<p>You can find the <strong>power</strong> of a number in Python using the <code>**</code> operator.</p>
<pre class=""pre__block""><code class=""language-python"">x = 2
y = 4

total = x ** y
print(total)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">16</code>
</pre>

<h3>Order of Operations</h3>
<p><strong>Order of Operations</strong>, also known as <strong>PEMDAS</strong>, is at play here, including with the use of parentheses.</p>
<pre class=""pre__block""><code class=""language-python"">x = (4 * 5) + 20 / 4
print(x)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">25</code>
</pre>
<h2 id=""python-number-types"">Python Number Types</h2>
<p>There are three kinds of numbers in Python, and they are as followed:</p>
<ul>
<li>int</li>
<li>float</li>
<li>complex</li>
</ul>
<pre class=""pre__block""><code class=""language-python"">a = 1337  # int
b = 13.37 # float
c = 1337j # complex

print(type(a))
print(type(b))
print(type(c))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">&lt;class 'int'&gt;
&lt;class 'float'&gt;
&lt;class 'complex'&gt;</code>
</pre>

<h3>int</h3>
<p><strong>Integers</strong> are whole numbers like <code>4</code> or <code>532</code>. They can be positive or negative, and they don't contain any decimals.</p>
<pre class=""pre__block""><code class=""language-python"">a = 423
b = 74
c = 87937595</code>
</pre>
<p>These are all valid integers.</p>
<h3>Float</h3>
<p><strong>Floating point numbers</strong> are numbers containing a decimal, and can also be positive or negative. Here are some examples:</p>
<pre class=""pre__block""><code class=""language-python"">a = 1.53
b = 3.1
c = -95.23</code>
</pre>

<h3>Complex</h3>
<p><strong>Complex</strong> numbers are Python's representation of imaginary numbers, and they use a <code>j</code> to represent the <code>i</code>.</p>
<pre class=""pre__block""><code class=""language-python"">a = 4+2j
b = 9j
c = -3j</code>
</pre>
<h2 id=""number-type-conversion"">Number Type Conversion</h2>
<p>Python offers built-in methods to convert between these types using the <code>float()</code>, <code>int()</code>, and <code>complex()</code> methods.</p>
<pre class=""pre__block""><code class=""language-python"">a = 5   # int
b = 3.3 # float
c = 7j  # complex

float = float(a)
int = int(b)
complex = complex(a)

print(float)
print(int)
print(complex)

print(type(float))
print(type(int))
print(type(complex))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">5.0
3
(5+0j)
&lt;class 'float'&gt;
&lt;class 'int'&gt;
&lt;class 'complex'&gt;</code>
</pre>
<aside class=""aside__tip"">
<p>    Keep in mind that you cannot convert complex numbers into anything else.</p>
</aside>

<h2 id=""math-methods"">Math Methods</h2>
<p>We mentioned before that Python is used heavily in any field that utilizes math. The built-in methods that Python provides is a large reason why. Here are some of the most common ones:</p>
<h3>Absolute Value</h3>
<p>Get the <strong>absolute value</strong> of a number by using the <code>abs()</code> method:</p>
<pre class=""pre__block""><code class=""language-python"">number = -34
print(abs(number))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">34</code>
</pre>

<h3>Floor</h3>
<p>Use the <code>floor()</code> method to get the number passed in rounded down to the nearest integer if it is not already an integer.</p>
<aside class=""aside__tip"">
<p>    For this and other math methods, you'll need to import the <code>math</code> module.</p>
</aside>
<pre class=""pre__block""><code class=""language-python"">import math

number = 6.21
print(math.min(number))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">6</code>
</pre>
<h3>Ceiling</h3>
<p>Use the <code>ceil()</code> method to get the number passed in rounded up to the next highest integer if it is not already an integer.</p>
<pre class=""pre__block""><code class=""language-python"">import math

number = 6.21
print(math.ceil(number))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">7</code>
</pre>

<h3>Natural Logarithm</h3>
<p>You can get the <strong>natural logarithms</strong> of a number using <code>log()</code>.</p>
<pre class=""pre__block""><code class=""language-python"">import math

number = 123
print(math.log(number))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">4.812184355372417</code>
</pre>
<h3>Base-10 Logarithm</h3>
<p>Alternatively, you can also get the <strong>base-10 logarithm</strong> of a number using <code>log10()</code>.</p>
<pre class=""pre__block""><code class=""language-python"">import math

number = 123
print(math.log10(number))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">2.089905111439398</code>
</pre>

<h3>Maximum</h3>
<p>You can get the <strong>maximum</strong> of two or more numbers using the <code>max()</code> method:</p>
<pre class=""pre__block""><code class=""language-python"">number1 = 123
number2 = 456
number3 = 789
print(max(number1, number2, number3))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">789</code>
</pre>
<h3>Minimum</h3>
<p>You can get the <strong>minimum</strong> of two or more numbers using the <code>min()</code> method:</p>
<pre class=""pre__block""><code class=""language-python"">number1 = 123
number2 = 456
number3 = 789
print(min(number1, number2, number3))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">123</code>
</pre>

<h3>Power</h3>
<p>You can take the <strong>power</strong> of a number using <code>pow</code>.</p>
<pre class=""pre__block""><code class=""language-python"">base = 3
exponent = 4
print(pow(base, exponent))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">81</code>
</pre>
<h3>Round</h3>
<p>You can <strong>round</strong> off any number to the nearest integer using <code>round()</code>.</p>
<pre class=""pre__block""><code class=""language-python"">number = 3.1459
places = 3
print(round(number, places))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">3.146</code>
</pre>

<h3>Square Root</h3>
<p>You can take the <strong>square root</strong> of a number using <code>sqrt()</code>.</p>
<pre class=""pre__block""><code class=""language-python"">import math

number = 81
print(math.sqrt(number))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">9</code>
</pre>
<h3>Random</h3>
<p>Generating random numbers in Python is easy. There's a module named <code>random</code> that has all we need. Call the <code>randrange()</code> method to get a number in between two other numbers you define:</p>
<pre class=""pre__block""><code class=""language-python"">import random

start = 1
end = 10
print(random.randrange(start, end))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">6</code>
</pre>
<aside class=""aside__warning"">
<p>    Keep in mind that it does NOT include the second parameter. In other words, because our second parameter was a 10, this is effectively only going to ever return a number between and including 1 and 9.</p>
</aside>

<h2 id=""math-constants"">Math Constants</h2>
<p>One last cool to point out is that Python's <code>math</code> module also comes with some predefined constants for us.</p>
<h3>Euler's Number</h3>
<p>One of the constants that the <code>math</code> module comes with is <strong>Euler's Number</strong>:</p>
<pre class=""pre__block""><code class=""language-python"">import math

e = math.e
print(e)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">2.718281828459045</code>
</pre>

<h3>Pi</h3>
<p>Python's <code>math</code> module also comes with a value for <strong>Pi</strong>, the ratio of the circumference of a circle relative to its diameter.</p>
<pre class=""pre__block""><code class=""language-python"">import math

pi = math.pi
print(pi)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">3.141592653589793</code>
</pre>",16,"standard","lesson"
"Python: Conditional Statements Ifs, Elifs, Elses","python-ifs-elifs-elses","Logic and conditionals are a fundamental part of programming and is how your program can make decisions.","LIVE","<p>Decision making is one of the core feature of any programming language. Python uses If keyword to take execution decisions based upon conditions known only during run time.</p>
<p>Here is the general form of the if statement:</p>

<pre class=""pre__block""><code class=""language-python"">if(condition1):
    # statemnt 1
else:
    # statemnt 2
</code>
</pre>

Here a statement can be a single statement or multiple statements. The statements inside the if condition needs to be indented properly for python to understand the code block.

In the above statement: If the condition1 is True, then statement1 is executed. Otherwise, statement2 is executed. In no case will both statements be executed.

At any point, if your program requires more then two conditional checks, you can use elif keyword. For example:
<pre class=""pre__block""><code class=""language-python"">if(condition1):
    # statemnt 1
elif(condition2):
    # statemnt 2
else:
    # statemnt 3</code>
</pre>

<h2>Comparison Operators</h2>
To use logic in our program, we'll need to learn about the comparison operates that Python offers.

<h3>Equality Operator</h3>
The most basic comparison operators we have is the equality operator. This simply checks if two values are equivalent or not. If they are the same, the result will be <code>True</code>, and if they are not equal, the result will be <code>False</code>.

<p>To use the equality operator, simply use two equal signs.</p>
<pre class=""pre__block""><code class=""language-python"">number1 = 3
number2 = 3
number3 = 6
print(number1 == number2)
print(number1 == number3)</code>
</pre>
<strong>Output</strong>
<pre class=""pre__block"">True
False
</pre>

<h3>Inequality Operator</h3>
<p>The <strong>inequality operator</strong> functions exactly like the equality operator we just saw but in reverse. If the two values are the same, it will result in <code>false</code>, and if they are different, it will result in <code>true</code>.</p>
<p>To use this operator, put an <strong>exclamation point</strong> in front of the equal sign, like so:</p>

<pre class=""pre__block""><code class=""language-python"">number1 = 3
number2 = 3
print(number1 != number2)</code>
</pre>
<pre class=""pre__block"">False
</pre>

<h3>Greater Than and Less Than Operators</h3>
<p>You can compare the values of two variables using the <strong>greater than</strong> and <strong>less than</strong> operators. Here is how to use them:</p>
<pre class=""pre__block""><code class=""language-python"">number1 = 3
number2 = 6
print(number1 &gt; number2) # greater than</code>
</pre>
<strong>Output</strong>
<pre class=""pre__block""><code class=""language-bash"">False</code>
</pre>

<pre class=""pre__block""><code class=""language-python"">number1 = 3
number2 = 6
print(number1 &lt; number2) # less than</code>
</pre>

<strong>Output</strong>
<pre class=""pre__block""><code class=""language-bash"">True</code>
</pre>

<h3>Or Equal To Operators</h3>
<p>In the case where you need to check if a value is <strong>either</strong> less than/greater than or equal to another value, Python also has an operator for that. It looks like a combination of the operators we saw before:</p>
<pre class=""pre__block""><code class=""language-python"">print(3 &lt;= 5)
print(3 &gt;= 5)
print(7 &lt;= 8)
print(7 &gt;= 9)</code>
</pre>
<strong>Output</strong>
<pre class=""pre__block""><code class=""language-bash"">True
False
True
False</code>
</pre>

<h2 id=""conditionals"">Conditionals</h2>
<p>Now that are able to compare two values, we can now do something with that result. Using <strong>conditionals</strong> we can now take different paths of code depending on if the value inside it is <code>true</code> or <code>false</code>.</p>
<h3>If</h3>
<p>Using the <strong>if</strong> keyword is very straightforward. If whatever you are checking is <code>true</code>, then whatever is inside the next block of code will run.</p>
<p>Let's see an example of this:</p>

<pre class=""pre__block""><code class=""language-python"">burritos = 6

if (burritos &gt; 5):
    print(""You ordered too many burritos."")</code>
</pre>

<strong>Output</strong>
<pre class=""pre__block""><code class=""language-bash"">You ordered too many burritos.</code>
</pre>
<p>Now let's order a correct number of burritos and see what happens:</p>
<pre class=""pre__block""><code class=""language-python"">burritos = 3

if (burritos &gt; 5):
    print(""You ordered too many burritos."")</code>
</pre>
<strong>Output</strong>
<pre class=""pre__block""><code class=""language-bash""></code>
</pre>
<p>Nothing happened! The code block did not execute because the value of <code>burrito</code> was not greater than <code>5</code>.</p>

<h2 id=""logical-operators"">Logical Operators</h2>
<p>So far we've seen how logic works when we only have a single conditional to work with. Eventually, you will need to use multiple conditionals to finally make the decision about what path of code you want to take. When you want to use multiple conditionals at once, you use a <strong>logical operator</strong>.</p>
<h3>And Operator</h3>
<p>By using the <strong>and</strong> operator, the block of code will only execute if both sides of the operator are true:</p>
<pre class=""pre__block""><code class=""language-python"">isHungry = True
foodAvailable = True

if (isHungry and foodAvailable):
    print(""Since I am hungry and there is food, I shall eat."")</code>
</pre>

<strong>Output</strong>
<pre class=""pre__block""><code class=""language-bash"">Since I am hungry and there is food, I shall eat.</code>
</pre>
<p>Since in this case both variables were <code>true</code>, the resulting code block was ran, and the print statement was displayed.</p>

<h3>Or Operator</h3>
<p>While using the <code>and</code> operator, both conditionals needed to be <code>true</code>, but with the <code>or</code> operator, only a <strong>single one</strong> needs to be <code>true</code>.</p>
<p>Consider this example:</p>
<pre class=""pre__block""><code class=""language-python"">sunny = False
bored = True

if (sunny or bored):
    print(""Since it is either sunny outside or I'm bored, I will go play basketball."")</code>
</pre>
<strong>Output</strong>
<pre class=""pre__block""><code class=""language-bash"">Since it is either sunny outside or I'm bored, I will go play basketball.</code>
</pre>
<p>Even though it is not sunny outside, because you are bored, you decided to play basketball anyway.</p>
<h3>Not Operator</h3>
<p>In our final logical operator, you can invert the results of a conditional entirely but using the <strong>not</strong> operator.</p>
<p>Let's look at an example:</p>
<pre class=""pre__block""><code class=""language-python"">temperature = 50
hot = temperature &gt; 70

if not (hot):
    print(""Since it isn't hot, I will wear boots today!"")</code>
</pre>
<strong>Output</strong>
<pre class=""pre__block""><code class=""language-bash"">Since it isn't hot, I will wear boots today!</code></pre>",4,"standard","lesson"
"Python: Working with Loops","python-loops","Learn about the two loops in Python, the for and while loop. Plus learn about the break and continue statements.","LIVE","<p>Loops are integral part of any programming language. Loop can simply be described as a situation in which you may need to execute the same block of code over and over.</p><p>Python supports two looping constructs:</p><ul>
<li>for loop</li>
<li>while loop</li>
</ul><h2>For Loop</h2><p>The basic syntax of the for loop in Python looks something similar to the one mentioned below.</p><pre><code class=""language-java"">for itarator in sequence:
	Statements
	. . .
	Statements
</code></pre><ul>
<li>The keyword <strong>for</strong> signifies the beginning of the for loop.</li>
<li>The <strong>iterator</strong> variable which iterates over the sequence and can be used within the loop to perform various functions</li>
<li>The <strong>in</strong> keyword in Python which tells the iterator variable to loop for elements within the sequence</li>
<li>And the <strong>sequence variable</strong> can be a list, a tuple or any other iterator types.</li>
<li>The statements part of the loop is where you can play around with the iterator variable and perform various function</li>
</ul><p>Let us now examine some of the examples;</p><h3>Example 1: <strong>Python for loop with range() function</strong></h3><p>The range() function is one of the built in function in Python. This is used when you want a loop to run for a specified number of iterations. For example, printing a number from 1 to 10</p><p>When you want the for loop to run for a specific number of times, or
you need to specify a range of objects to print out, the range function
works really well. Consider the following example where I want to print
the numbers 1, 2, and 3.</p><pre><code class=""language-python"">for i in range(0, 5):
    print(i)
</code></pre><p><strong>Output:</strong></p><pre><code class=""language-python"">0
1
2
3
4
</code></pre><h3>Example 2: <strong>Print all letters of a string using the for loop</strong></h3><pre><code class=""language-python"">for letter in ""stacktips.com"":
    print(letter)
</code></pre><p><strong>Output:</strong></p><pre><code>s
t
a
c
k
t
i
p
s
</code></pre><h3>Example 3: Using for loop to print all elements in List</h3><p>Lists and Tuples in python are iterable objects. The following example explains how to loop over the elements with in an iterable object.</p><pre><code class=""language-python"">week = [""Sunday"", ""Monday"", ""Tuesday"",
         ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]
for day in week:
	print(day)
</code></pre><p><strong>Output:</strong></p><pre><code class=""language-python"">Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
</code></pre><h3>Example 4: The break statement with for loop</h3><p>The break statement is used to terminate the loop prematurely. It is used to exit the loop when a specific condition is met.</p><p>For example, let us write a method to search an item from the list. The following code will iterate over all individual list items and if the given item found, it will break the loop.</p><pre><code class=""language-python"">numbers = [15, 30, 10, 6, 8, 12]

def search_item(numbers, search_key):
    found = False
    for number in numbers:        
        if (number == search_key):
            found = True
            break
    return found

print(""List contains 10:"" , search_item(numbers, 10))
print(""List contains 40:"", search_item(numbers, 40))
</code></pre><p><strong>Output:</strong></p><pre><code>List contains 10: True
List contains 40: False
</code></pre><h3>Example 5: The continue statement with for loop</h3><p>The continue statement in Python is used to skip the loop execution if a specific condition is satisfied.</p><p>For example, let us write a python function to add the sum of all positive numbers in the list.</p><pre><code class=""language-python"">numbers = [5, -3, -6, 4, 2, 1]
sum=0;
for number in numbers:
    if(number &lt; 0):
        continue
    sum+=number

print(""Sum of Positive Numbers:"", sum)
</code></pre><p><strong>Output:</strong></p><pre><code>Sum of Positive Numbers: 12
</code></pre><h3>Example 6: Python for loop with else block</h3><p>Unlike any other programming language, Python allows attaching an else block to the for loop.</p><p>When an else block is attached, it will executed the statement inside else block when the loop ends.</p><p>Else block is not executed, when a loop is terminated with <code>break</code> keyword.</p><p>In this example, we want to write a method to check if a string contains only alphabets and no other invalid characters.</p><pre><code class=""language-python"">def validate_name(name):
    for letter in name:
        if (letter.isalpha()):
            continue
        else:
            print(name, ""contains invalid characters"")
            break
    else:
        print(name, ""is a valid name"")

validate_name(""John"")
validate_name(""John007"")
</code></pre><p><strong>Output:</strong></p><pre><code>John is a valid name
John007 contains invalid characters
</code></pre><p>The above example, iterates through individual letters and checks for a valid alphabet, if it contains valid alphabets, the loop continuous. Otherwise it breaks the loop.</p><p>The else block gets executed at the end when the loops is completed successfully without the break clause being called</p><h2>While loop</h2><p>A <strong>while loop</strong> is an even simpler loop. A while loop takes a conditional and if that condition is <code>true</code>, it will continue with another loop. The iterator variable is placed outside the while loop.</p><p>Let's look at looping from 1 to 5 again but this time using a while loop:</p><pre><code class=""language-python"">count = 1

while count &lt;= 5:
    print(count)
    count += 1
</code></pre><p><strong>Output:</strong></p><pre><code>1
2
3
4
5
</code></pre><p>


















































</p><p>The for loop in Python is very similar to any other programming languages. We can use break and continue statements with for loop to alter the execution. However, in Python, we can have optional else block in for loop too.</p><p></p>",5,"standard","lesson"
"Python: Introduction to Functions","python-functions","Functions in Python are a great way to group together lines of code that aim to do a single task and make them reusable.","LIVE","<p>Function in Python is group of related statements that performs a specific task.</p><p>Functions are a great way to group related statements that is aimed to break a complex program into smaller and reusable chunks.</p><p>In Python a function is defined using the def keyword.</p><pre class=""language-python""><code>def function_name(parameter1, parameter2):
    print(""Hello from a function"")
</code></pre><p>You can pass data, known as parameters, into a function. A function can return data as a result.</p><p>As you have noticed above, we have defined a function but it was never invoked. Here is how we invoke a method.</p><pre><code class=""language-python"">def print_hello():
    print(""Hello from a function!"")

print_hello()
</code></pre><p><strong>Output:</strong></p><pre><code>Hello from a function!
</code></pre><h2>Arguments</h2><p>We can pass in pieces of data to the function so that it can perform different tasks. For example, in the following method definition greet, we are require to pass two arguments when invoking the function.</p><pre><code class=""language-python"">def greet(name, message):
    print(""Hello"", name + ', ' + message)

greet(""Adam"", ""Good morning!"") # Positional arguments
greet(message=""Good morning!"", name=""John"") # Named arguments
</code></pre><p><strong>Output:</strong></p><pre><code>Hello Adam, Good morning!
Hello John, Good morning!
</code></pre><ul>
<li>Notice that, in the first function call, the arguments are passed based on the <strong>position defined</strong> in the function definition.</li>
<li>However, Python also allows passing the <strong>named arguments</strong>. When arguments are passed by their names, the orders are ignored.</li>
</ul><p><strong>Output:</strong></p><pre><code>Result: 300
</code></pre><p>Note that the above function two numbers as parameters and returns the sum of two numbers.</p><h2>Default Parameter Values</h2><p>Python allows you to set a default values for the function parameters. If a function is defined with default parameter values, you don?t have to pass the parameters when invoking the function.</p><p>Let's apply this using our previous example:</p><pre><code class=""language-python"">def add_num(number1 = 0, number2 = 0):
    return number1 + number2

result = add_num(100, 200)
print(""Result:"", result)

result = add_num()
print(""Result:"", result)
</code></pre><p><strong>Output:</strong></p><pre><code>Result: 300
Result: 0
</code></pre><p>Because we set the default value for parameters to be 0, when we invoke the method <code>add_num</code> without passing the parameters, the values defaulted to 0.</p><h2>Arbitrary Arguments (*args)</h2><p>If the number of arguments that will be passed to a function is not known upfront, you can define a function with arbitrary arguments.  Just add a <code>* (asterisks)</code> before the argument name in your function definition.</p><p>For example:</p><pre><code class=""language-python"">def my_function(*args):
  print(""The third arg is:"", args[2])

my_function(""John"", ""Adam"", ""Prakash"")
</code></pre><p>Output:</p><pre><code>The third arg is: Prakash
</code></pre><h2>Arbitrary Keyword Arguments (**kwargs)</h2><p>If you do not know how many keyword arguments that will be passed into your function, add two asterisk: <code>**</code> before the parameter name in the function definition.</p><p>This way the function will receive a dictionary of arguments, and can access the items by their keys.</p><p>For example:</p><pre><code class=""language-python"">def my_function(**args):
  print(""The name2 arg is:"", args[""name2""])

my_function(name1=""John"", name2=""Adam"", name3=""Prakash"")
</code></pre><p><strong>Output:</strong></p><pre><code class=""language-python"">The name2 arg is: Adam
</code></pre><h2>The pass keyword</h2><p>A function defined in Python cannot have be empty. But for some reason if you don?t have a function definition, you can use the <code>pass</code> statement to avoid the compilation error.</p><pre><code class=""language-python"">def my_function():
	pass
</code></pre><h2>Function Recursion</h2><p>Python also accepts function recursion, which means a defined function can call itself.</p><p>Let us now define a method to calculate factorial for a given number.</p><p>?? Factorial is the process of multiplying all the integers less than or equal to a given number. So, 5! is equivalent to 5*4*3*2*1 which is 120. We can use a recursive function to do this work for us.</p><pre><code class=""language-python"">def factorial(num):
    if (num == 0):
        return 1
    else:
        return num * factorial(num - 1)

print('{}! is {}'.format(4, factorial(4)))
print('{}! is {}'.format(3, factorial(3)))
</code></pre><p><strong>Output:</strong></p><p>













































</p><pre><code class=""language-python"">4! is 24
3! is 6
</code></pre>",6,"standard","lesson"
"Python: Modules and Packages","python-modules","Modules in Python are a way to import external code for you to use in your own code like third-party libraries.","LIVE","<div><p>In Python, a file containing statements and definitions is referred as a module.</p>
<p>All the methods and variables defined in a Python module can be imported and accessed from another modules.</p>
<p>Let us create a module for performing the <code>math.py</code>.</p>
<pre><code class=""language-python""># Python Module example
def add(a, b):
   return a + b

def subtract(a, b):
   return a - b

def multiply(a, b):
   return a * b
</code></pre>
<p>Here, we have defined three functions inside the <code>math</code> module.</p>
<h2>How to Import a Module in Python?</h2>
<p>To import a module you need to use <code>import</code> statement</p>
<pre><code class=""language-python"">import math

sum = math.add(5, 10)
print(""Sum is:"", sum)

sum = math.subtract(15, 10)
print(""Sub is:"", sum)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Sum is: 15
Sub is: 5
</code></pre>
<p>You can also import the module by renaming as follows:</p>
<pre><code class=""language-python"">import math as m

sum = m.add(5, 10)
print(""Sum is:"", sum)

sum = m.subtract(15, 10)
print(""Sub is:"", sum)
</code></pre>
<p>Notice that in the above example, we have imported the entire module. Let's say you only wanted a specific function inside the module. We can do that too, like so:</p>
<pre><code class=""language-python"">from math import add
from math import subtract

sum = add(5, 10)
print(""Sum is:"", sum)

sub = subtract(15, 10)
print(""Sub is:"", sub)
</code></pre>
<h2>Python Built-in Modules</h2>
<p>Python has many built-in modules, and we've already used one extensively in this class, namely the <code>math</code> module.</p>
<p>Here are some other popular useful built-in modules that might be familiar to you:</p>
<table width=""100%"">
<tbody>
<tr>
<td width=""25%"">array</td>
<td width=""25%"">copy</td>
<td width=""25%"">html</td>
<td width=""25%"">http</td>
</tr>
<tr>
<td>email</td>
<td>fileinput</td>
<td>io</td>
<td>json</td>
</tr>
<tr>
<td>gc</td>
<td>gzip</td>
<td>ipaddress</td>
<td>numbers</td>
</tr>
<tr>
<td>pip</td>
<td>pipes</td>
<td>random</td>
<td>ssl</td>
</tr>
<tr>
<td>string</td>
<td>symbol</td>
<td>sys</td>
<td>time</td>
</tr>
</tbody>
</table>
<p>Definitely check out the documentation for these modules if you're curious about what functionality any of them offer!</p>
<h2>References</h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/modules.html"">Python Docs - Modules</a></li>
</ul></div>",7,"standard","lesson"
"Python: Working with Lists","python-lists","Learn about lists in Python which are collections that are ordered and changeable whenever you want.","LIVE","<p>Lists are used to store collection of items in a single variable. They are very similar to what other programming languages call Arrays.</p><p>Items stored in the list are ordered and changeable and can contain duplicates. List can contain any number of items and of any type.</p><p>Lists are created using square brackets:</p><h2>Creating a List</h2><p>Let us define a list to store all the days in a week:</p><pre><code class=""language-python"">week = [""Sunday"", ""Monday"", ""Tuesday"",
         ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]
print(week)
</code></pre><p><strong>Output:</strong></p><pre><code>['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
</code></pre><h2>Accessing List Items</h2><p>The syntax for <strong>accessing</strong> an item is also pretty standard, simply provide the <strong>index</strong> of the item you want to access. Note that the first item has an index of <code>0</code>:</p><pre><code class=""language-python"">week = [""Sunday"", ""Monday"", ""Tuesday"",
         ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]

print(week[0])   # prints Sunday
print(week[1])   # prints Monday
</code></pre><p>You can use the negative index to access the items from the end of the list. For example.</p><pre><code class=""language-python"">week = [""Sunday"", ""Monday"", ""Tuesday"",
         ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]
print(week[-1])    # prints Saturday
</code></pre><h2>Changing Items</h2><p>Lists defined in python are mutable. This means, we can update the values for a given index.</p><pre><code class=""language-python"">week = [""Sunday"", ""Monday"", ""Tuesday"",
         ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]

week[1] = ""MONDAY""
print(week) 
</code></pre><p><strong>Output:</strong></p><pre><code>['Sunday', 'MONDAY', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
</code></pre><h2>Appending Items to List</h2><p>You can append item to list using the built in <code>append()</code> function. This method will add the new item to the end of the list.</p><pre><code class=""language-python"">animals = [""elephant"", ""tiger"", ""lion""]
print(animals)

animals.append(""bear"")
print(animals)
</code></pre><p><strong>Output:</strong></p><pre><code>['elephant', 'tiger', 'lion']
['elephant', 'tiger', 'lion', 'bear']
</code></pre><h2>Deleting Items from List</h2><p>If you want to remove an item from the list, you can do that using the built in  <code>del</code> function and passing in the index.</p><pre><code class=""language-python"">animals = [""elephant"", ""tiger"", ""lion"", ""bear""]
print(animals)

del(animals[1])
print(animals)
</code></pre><p><strong>Output:</strong></p><pre><code>['elephant', 'tiger', 'lion', 'bear']
['elephant', 'lion', 'bear']
</code></pre><p>Alternatively, you can use the delete the item form list using the item value  using the <code>remove</code> method:</p><pre><code class=""language-python"">animals = [""elephant"", ""tiger"", ""lion"", ""bear""]
print(animals)

animals.remove(""tiger"")
print(animals)
</code></pre><p><strong>Output:</strong></p><pre><code>['elephant', 'tiger', 'lion', 'bear']
['elephant', 'lion', 'bear']
</code></pre><h2>Looping through a List</h2><p>Looping through a list is a very common operation and Python luckily makes this easy to do:</p><pre><code class=""language-python"">week = [""Sunday"", ""Monday"", ""Tuesday"",
         ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]
for day in week:
	print(day)
</code></pre><p><strong>Output:</strong></p><pre><code>Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
</code></pre><h2>Checking if an Item Exists in List</h2><p>Sometimes you might be working with huge lists or not even know what is inside the list, in the case of lists being returned from methods.</p><p>You can very easily check if a list contains a value you want, like this:</p><pre><code class=""language-python"">week = [""Sunday"", ""Monday"", ""Tuesday"",
        ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]

print(""Monday"" in week)
</code></pre><p><strong>Output:</strong></p><pre><code>True
</code></pre><h2>How to Check Length of a List?</h2><p>You can check the length of the list by using the  <code>len()</code> function:</p><pre><code class=""language-python"">week = [""Sunday"", ""Monday"", ""Tuesday"",
        ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]

print(len(week))
</code></pre><p><strong>Output:</strong></p><pre><code>7
</code></pre><h2>How to Join  Two Lists?</h2><p>Python has a simple syntax for combining lists, use the <code>+</code> operator</p><pre><code class=""language-python"">na = [""USA"", ""Canada"", ""Mexico""]
eu = [""UK"", ""France"", ""Germany""]

countries = na + eu
print(countries)
</code></pre><p><strong>Output:</strong></p><pre><code>['USA', 'Canada', 'Mexico', 'UK', 'France', 'Germany']
</code></pre><h2>Reverse a List</h2><p><strong>Reverse</strong> the order of the items in a list using the <code>reverse</code> function:</p><pre><code class=""language-python"">week = [""Sunday"", ""Monday"", ""Tuesday"",
        ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]

print(week)
week.reverse()
print(week)
</code></pre><p><strong>Output:</strong></p><pre><code>['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
['Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday', 'Sunday']
</code></pre><h2>Sort a list</h2><p>You can easily <strong>sort</strong> a list using the built-in <code>sort</code> function:</p><pre><code class=""language-python"">week = [""Sunday"", ""Monday"", ""Tuesday"",
        ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]

print(week)
week.sort()
print(week)
</code></pre><p><strong>Output:</strong></p><p>





























































</p><pre><code>['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
['Friday', 'Monday', 'Saturday', 'Sunday', 'Thursday', 'Tuesday', 'Wednesday']
</code></pre>",10,"standard","lesson"
"Python: Working with Tuples","python-tuples","Learn how to use tuples in Python which are collections that are ordered, unchangeable, and immutable.","LIVE","<p>A tuple represents a sequence of any objects separated by commas and enclosed in parentheses. A tuple is an <strong>immutable</strong> object, which means it cannot be changed, and we use it to represent fixed collections of items.</p><h2>Creating a Tuple</h2><p><strong>Creating</strong> a tuple is very similar to creating a list, unlike the lists where the values are enclosed with in the brackets, tuples use parenthesis.</p><pre><code class=""language-python"">week = (""Sunday"", ""Monday"", ""Tuesday"",
        ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"")

print(week)
</code></pre><p><strong>Output:</strong></p><pre><code>('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')
</code></pre><h2>Accessing items in a Tuple</h2><p>You can access an item in a tuple in the same way you do with lists:</p><pre><code class=""language-python"">week = (""Sunday"", ""Monday"", ""Tuesday"",
        ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"")

print(week[1]) # Prints Monday
</code></pre><p>Similar to list, we can also use negative indexes for accessing the elements from reverse order.</p><pre><code class=""language-python"">week = (""Sunday"", ""Monday"", ""Tuesday"",
        ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"")

print(week[-1])  # Prints Saturday
</code></pre><h2>Looping through a Tuple</h2><p>Here is how to iterate through a tuple:</p><pre><code class=""language-python"">week = (""Sunday"", ""Monday"", ""Tuesday"",
        ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"")

for day in week:
    print(day)
</code></pre><p><strong>Output:</strong></p><pre><code>Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
</code></pre><h2>Check if Item Exists in Tuple</h2><p>You can check if an item exists in a tuple like this:</p><pre><code class=""language-python"">week = (""Sunday"", ""Monday"", ""Tuesday"",
        ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"")

print(""Monday"" in week)
print(""Sat"" in week)
</code></pre><p><strong>Output:</strong></p><pre><code>True
False
</code></pre><h2>Tuple Length</h2><p>Get the length of a tuple using the built-in <code>len</code> function:</p><pre><code class=""language-python"">week = (""Sunday"", ""Monday"", ""Tuesday"",
        ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"")

print(len(week))
</code></pre><p><strong>Output:</strong></p><pre><code>7
</code></pre><h2>Combine Multiple Tuples</h2><p>Even though tuples are immutable, you can still combine them to create a third entirely new tuple. This is how:</p><pre><code class=""language-python"">na = (""USA"", ""Canada"", ""Mexico"")
eu = (""UK"", ""France"", ""Germany"")

countries = na + eu
print(countries)
</code></pre><p><strong>Output:</strong></p><pre><code>('USA', 'Canada', 'Mexico', 'UK', 'France', 'Germany')
</code></pre><h2>Converting a Tuple into a List</h2><p>When the situation arises that you indeed must make changes to the tuple, Python gives you the option to convert it to a list instead. Use the <code>list()</code> function to do just that:</p><pre><code class=""language-python"">week = (""Sunday"", ""Monday"", ""Tuesday"",
        ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"")

print(week)
week_list = list(week)
print(week_list)
</code></pre><p><strong>Output:</strong></p><pre><code>('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')
['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
</code></pre><p>



































</p><p>The second output enclosed with in the brackets indicate that it is a list and not a tuple!</p><aside class=""aside__tip"">
</aside>",11,"standard","lesson"
"Python: Working with Sets","python-sets","Learn about sets in Python which are a collections of elements that are unordered and unindexed with no duplicates.","LIVE","<p>Sets in Python are similar to list except that they do not allow for duplicate elements inside. Not only that but the collection is un-indexed, meaning there is no concept of indexes at all.</p><p>Sets are defined using curly braces.</p><h2>Creating a Set</h2><p><strong>Creating</strong> a set is similar to creating both a list and tuple:</p><pre><code class=""language-python"">colors = {""red"", ""white"", ""blue""}
print(colors)
</code></pre><p><strong>Output:</strong></p><pre><code>{'white', 'red', 'blue'}
</code></pre><p>Notice that the order of items printed in the output is different from the order defined. Because sets are unordered and without indexes, the order in which items appear can be in any order.</p><h2>Adding Items to a Set</h2><p>While you cannot change the items inside a set, you can still <strong>add new items</strong> to the set. To do this, use the <code>add()</code> method.</p><pre><code class=""language-python"">colors = {""red"", ""white"", ""blue""}
colors.add(""green"")
print(colors)
</code></pre><p><strong>Output:</strong></p><pre><code>{'white', 'red', 'green', 'blue'}
</code></pre><p>If you want to add multiple items to a set at once, Python also offers this functionality using the <code>update()</code> method:</p><pre><code class=""language-python"">colors = {""red"", ""white"", ""blue""}
colors.update([""orange"", ""black"", ""green""])
print(colors)
</code></pre><p><strong>Output:</strong></p><pre><code>{'red', 'green', 'orange', 'white', 'black', 'blue'}
</code></pre><h2>Looping through a Set</h2><p>Here is how you iterate over a set:</p><pre><code class=""language-python"">colors = {""red"", ""white"", ""blue"", ""orange""}

for color in colors:
    print(color)orange
white
red
blue
</code></pre><p><strong>Output:</strong></p><pre><code>    white
blue
red
</code></pre><h2>Delete an Item from a Set</h2><p>In addition to adding an item to a set, you can also <strong>remove items</strong> from it using the <code>remove</code> function.</p><pre><code>colors = {""red"", ""white"", ""blue"", ""orange""}
colors.remove(""blue"")
print(colors)
</code></pre><p><strong>Output:</strong></p><pre><code>{'orange', 'white', 'red'}
</code></pre><p>If the item you're trying to remove doesn't exist, an error will be raised.</p><p>If you want to safely try to remove an item from a set that you're not sure exists in the set or not, use the <code>discard</code>:</p><pre><code class=""language-python"">colors = {""red"", ""white"", ""blue"", ""orange""}
colors.discard(""green"")
print(colors)
</code></pre><pre><code>{'orange', 'white', 'red', 'blue'}
</code></pre><h2>Check if Item Exists in Set</h2><p>You can check if an item exists in a set using the <code>in</code> keyword:</p><pre><code class=""language-python"">colors = {""red"", ""white"", ""blue""}

print(""red"" in colors)
print(""yellow"" in colors)
</code></pre><p><strong>Output:</strong></p><pre><code>True
False
</code></pre><h2>Set Length</h2><p>Get the number of items in your set using the <code>len()</code> function:</p><pre><code class=""language-python"">colors = {""red"", ""white"", ""blue""}
print(len(colors))
</code></pre><p><strong>Output:</strong></p><pre><code>3
</code></pre><h2>Combining Multiple Sets</h2><p>When you have two sets and you want to combine them, Python gives you two options. You can either make a new set or add the items to an existing set. To make a new set entirely, use the <code>union()</code> function:</p><pre><code class=""language-python"">colors1 = {""red"", ""white"", ""blue""}
colors2 = {""red"", ""purple"", ""brown""}

colors3 = colors1.union(colors2)
print(colors3)
</code></pre><p><strong>Output:</strong></p><pre><code>{'white', 'brown', 'red', 'purple', 'blue'}
</code></pre><p>If you don't want to make a new set, and simply want to add the items from one set to another, use the <code>update()</code> function:</p><pre><code class=""language-python"">colors1 = {""red"", ""white"", ""blue""}
colors2 = {""red"", ""purple"", ""brown""}

colors1.update(colors2)
print(colors1)
</code></pre><p><strong>Output:</strong></p><p>
















































</p><pre><code>{'blue', 'purple', 'brown', 'red', 'white'}
</code></pre>",9,"standard","lesson"
"Python: Working with Dictionaries","python-dictionaries","Learn about dictionaries in Python, which are key-value pair collections that are unordered, indexed and changable.","LIVE","<p>Unlike all other collection types, dictionaries strictly contain key-value pairs.</p><p><strong>Dictionaries</strong> are collections that are unordered, changeable, and are indexed.</p><p>They are similar to lists but instead of the index being a number, you can instead use the key to access the element.</p><h2>Creating a Dictionary</h2><p>Here's how you <strong>create</strong> a dictionary:</p><pre><code class=""language-python"">queens = {
    ""city"": ""New York City"",
    ""state"": ""New York"",
    ""country"": ""United States""
}

print(queens)   
</code></pre><p><strong>Output:</strong></p><pre><code>{'city': 'New York City', 'state': 'New York', 'country': 'United States'}
</code></pre><h2>Accessing Items</h2><p>Items in a dictionary can be accessed using the key.</p><pre><code class=""language-python"">queens = {
    ""city"": ""New York City"",
    ""state"": ""New York"",
    ""country"": ""United States""
}

print(queens[""city""])
</code></pre><p><strong>Output:</strong></p><pre><code>New York
</code></pre><h2>Adding Items to Python Dictionary</h2><p>You can <strong>add</strong> items to a dictionary by setting a new key-value pair, like this:</p><pre><code class=""language-python"">company = {
    ""city"": ""New York City"",
    ""state"": ""New York"",
    ""country"": ""United States""
}
company[""name""] = ""ABC Inc""
print(company)
</code></pre><p><strong>Output:</strong></p><pre><code>{'city': 'New York City', 'state': 'New York', 'country': 'United States', 'name': 'ABC Inc'}
</code></pre><h2>Update Items in Python Dictionary</h2><p>Dictionaries allow you to <strong>change</strong> the value of an item if you refer to it directly:</p><pre><code class=""language-python"">company = {
    ""city"": ""New York City"",
    ""state"": ""New York"",
    ""country"": ""United States""
}
company[""city""] = ""London""
company[""country""] = ""GB""
print(company)
</code></pre><pre><code>{'city': 'London', 'state': 'New York', 'country': 'GB'}
</code></pre><h2>Looping through a Dictionary</h2><p>You can <strong>iterate</strong> through the keys of a dictionary, and then use that key to get the value. Here's how:</p><pre><code class=""language-python"">queens = {
    ""city"": ""New York City"",
    ""state"": ""New York"",
    ""country"": ""United States""
}
for key in queens:
    value = queens[key]
    print(""Key: "" + key + "" Value: "" + value)
</code></pre><p><strong>Output:</strong></p><pre><code>Key: city Value: New York City
Key: state Value: New York
Key: country Value: United Statess
</code></pre><h2>Checking if a Key Exists</h2><p>You can check if a <strong>key exists</strong> inside a dictionary like this:</p><pre><code class=""language-python"">queens = {
    ""city"": ""New York City"",
    ""state"": ""New York"",
    ""country"": ""United States""
}
print(""city"" in queens)
</code></pre><p><strong>Output:</strong></p><pre><code>True
</code></pre><h2>Removing Items</h2><p>You can <strong>remove</strong> items from a dictionary by using the <code>pop()</code> function and providing the key. Here's how that looks:</p><pre><code class=""language-python"">queens = {
    ""city"": ""New York City"",
    ""state"": ""New York"",
    ""country"": ""United States""
}

queens.pop(""city"")
print(queens)
</code></pre><pre><code>{'state': 'New York', 'country': 'United States'}
</code></pre><h2>Dictionary Length</h2><p>You can get the number of items that exist in your dictionary by using the <code>len()</code> function:</p><pre><code class=""language-python"">queens = {
    ""city"": ""New York City"",
    ""state"": ""New York"",
    ""country"": ""United States""
}
print(queens)
print(len(queens))
</code></pre><p><strong>Output:</strong></p><p>







































</p><pre><code>{'city': 'New York City', 'state': 'New York', 'country': 'United States'}
3
</code></pre>",8,"standard","lesson"
"Python: Classes and Objects, Inheritance and Super","python-classes-and-objects","Class are blueprints to create objects which represent a collection of related properties and methods. Inheritance is an important concept of OOP. It is a process by which a class can inherit properties from another class.","LIVE","<p>Class are blueprints to create objects which represent a collection of related properties and methods</p>
<p>Python is an object-oriented programming language.</p>
<p>Objects are an encapsulation of variables and functions into a single entity. Objects get their variables and functions from classes.</p>
<h2>Creating a Class in Python</h2>
<p>To define a class we can use class keyword and define the properties and methods inside it.</p>
<pre class=""language-python"">class Vehicle:
    number_of_wheels = 2
    color = ""red""
</pre>
<p>In the above code snippet, we have declared a class called <code>Vehicle</code> with two properties <code>color</code> and <code>number_of_wheels</code>with some default values.</p>
<p>Now that we have our class defined, let's create a object of the class <code>Vehicle</code>.</p>
<h2>Creating an Object</h2>
<p>To create a new object, simply reference the class you want to build the object out of. In this case, we'll use our previously defined <code>Person</code> class.</p>
<pre class=""language-python"">class Vehicle:
    number_of_wheels = 2
    color= ""red""

vehicle1 = Vehicle() # Creating object of class Vehicle
print(vehicle1)
print(""Vehicle1:"", vehicle1.color)
</pre>
<p><strong>Output:</strong></p>
<pre class=""nohighlight"">&lt;__main__.Vehicle object at 0x10ae31ae0&gt;
Vehicle1: red
</pre>

<p>Awesome, we created an object of class Vehicle and accessed the color property.</p>
<p>Let us now make our classes useful.</p>
<h2><strong>Python Class Constructor</strong></h2>
<p>Constructors are special kind of method, used for instantiating an object.</p>
<ul>
<li>The task of constructors is to initialize and assign values to the data members of the class when an object of the class is created.</li>
<li>In Python, the <code>__init__()</code>method is called the constructor and is always called when an object is created.</li>
<li>Python doesn?t support defining multiple constructors in a class. i.e constructor overloading is not supported by the language.</li>
<li>You can pass any number of parameters to the <strong>init</strong> method similar to how you can pass in parameters to functions. However, the first parameter should always be self.</li>
</ul>
<p>Let us now define a constructor for Vehicle class:</p>
<pre class=""language-python"">class Vehicle:

    def __init__(self, color, number_of_wheels):
        self.color = color
        self.number_of_wheels = number_of_wheels

vehicle1 = Vehicle(""Red"", 4)
print(vehicle1)
print(""Vehicle1:"", vehicle1.color)

vehicle2 = Vehicle(""Blue"", 2)
print(vehicle2)
print(""Vehicle2"", vehicle2.color)
</pre>

<p><strong>Output:</strong></p>
<pre class=""nohighlight"">&lt;__main__.Vehicle object at 0x114b0f3a0&gt;
Vehicle1: Red
&lt;__main__.Vehicle object at 0x114b0e470&gt;
Vehicle2 Blue
</pre>
<h2>Python Class Methods</h2>
<p>Strings and numbers aren't the only thing you can define in classes. Objects can also contain functions. Let's create one in our <code>Person</code> class.</p>
<pre class=""language-python"">class Vehicle:

    def __init__(self, color, number_of_wheels):
        self.color = color
        self.number_of_wheels = number_of_wheels

    def drive(self):
        print(""Drive mode on!"")

    def stop(self):
        print(""Drive mode off!"")

vehicle1 = Vehicle(""Red"", 4)
vehicle1.drive()
vehicle1.stop()
</pre>
<p><strong>Output:</strong></p>

<pre class=""nohighlight"">Drive mode on!
Drive mode off!
</pre>
<h3>Python-Inheritance and Super</h3>

<p>Inheritance is an important concept of OOP (Object Oriented Programming). It is a process by which a class inherit the properties and methods from another class (parent class).</p><p>The classes which are derived from parent class are called child classes.</p><p>For example. let us examine class Vehicle.</p><pre><code class=""language-python"">class Vehicle:
    def __init__(self, brand, color):
        self.brand = brand
        self.color = color

    def drive(self):
        print(f""Starting {{0}}"".format(self.brand))

    def stop(self):
        print(f""Stopping {{0}}"".format(self.brand))
</code></pre><p>Now that we have our parent class defined, let's create our child class <code>Car</code> which inherits class <code>Vehicle</code>.</p><pre><code class=""language-python"">class Car(Vehicle):
    def __init__(self, brand, color, fuel_type, number_of_seats):
        super().__init__(brand, color)
        self.fuel_type = fuel_type
        self.number_of_seats = number_of_seats
    
    def horn(self):
        print(""Beep Beep!!"")
</code></pre><p>A lot is going on here.</p><ul>
<li>First, <code>class Car(Vehicle):</code> is used for inheriting a Car class from a parent class <code>Vehicle</code>.</li>
<li>We can use <code>super()</code> to call the parent class constructor by passing the required parameters.</li>
<li>As the Car is inheriting the Vehicle class, all the properties and methods defined in Vehicle are now available to Car class.</li>
</ul><h2>Creating Objects</h2><p>Now that we have defined the Car class, let us now create few car objects and see it in action.</p><pre><code class=""language-python"">volkswagen = Car(""Volkswagen"", ""Red"", ""Petrol"", 5)
volkswagen.drive()
volkswagen.horn()
volkswagen.stop()

print(""======="")
tesla = Car(""Tesla"", ""White"", ""Electric"", 5)
tesla.drive()
tesla.horn()
tesla.stop()
</code></pre><p><strong>Output:</strong></p><pre><code>Starting Volkswagen
Beep Beep!!
Stopping Volkswagen
=======
Starting Tesla
Beep Beep!!
Stopping Tesla
</code></pre><h2>Overriding Methods in Python</h2><p>Method overriding is one of the object-oriented programming feature, that allows subclass to provide a specific implementation of a method that is already defined in its parent class.</p><p>When a method in a subclass has the same name, same parameters or signature, and same return type(or sub-type) as a method in its super-class, then the method in the subclass is said to&nbsp;override&nbsp;the method in the super-class.</p><p>One last cool feature of inheritance is the concept of <strong>overriding</strong> methods. This is creating</p><p>Let's see this in action:</p><pre><code class=""language-python"">class Vehicle:
    def __init__(self, brand, color):
        self.brand = brand
        self.color = color

    def drive(self):
        print(f""Starting {{0}}"".format(self.brand))

    def stop(self):
        print(f""Stopping {{0}}"".format(self.brand))

class Car(Vehicle):
    def __init__(self, brand, color, fuel_type, number_of_seats):
        super().__init__(brand, color)
        self.fuel_type = fuel_type
        self.number_of_seats = number_of_seats
    
    def drive(self):
        print(f""Starting {{0}}"".format(self.brand))
        print(""Activating auto-pilot mode"")
        print(""Engine rolling"")

    def horn(self):
        print(""Beep Beep!!"")

volkswagen = Vehicle(""Volkswagen"", ""Red"")
volkswagen.drive()
volkswagen.stop()

print(""====="")
tesla = Car(""Tesla"", ""White"", ""Electric"", 5)
tesla.drive()
tesla.horn()
tesla.stop()
</code></pre><p><strong>Output:</strong></p><pre><code>Starting Volkswagen
Stopping Volkswagen
=====
Starting Tesla
Activating auto-pilot mode
Engine rolling
Beep Beep!!
Stopping Tesla
</code></pre><p>Since we defined the <code>drive()</code> function with the same name as the parent class, Python automatically runs the one in the child.</p><p>

</p><p>Inheritance is a great way to organize your code and keep properties and functions where they belong.</p>",3,"standard","lesson"
"Python: Working with Files and Directories","python-working-with-files-in-python","Learn how to work with files in Python files and Directories including how to open, read, append, overwrite, write, and close a file.","LIVE","<p>Directories in a file system are just as important as files, and Python makes working with both pretty easy using the <code>os</code> module.</p>
<h2 id=""creating-a-new-directory"">Creating a new Directory</h2>
<p>You can create a new directory using the <code>mkdir</code> function, which is short for ""make directory"":</p>
<pre class=""pre__block""><code class=""language-python"">import os
os.mkdir(""new_folder"")</code>
</pre>
<p>Your new folder has been created!</p>

<h2 id=""getting-your-current-working-directory"">Getting your Current Working Directory</h2>
<p>Just like when you're using the command line, sometimes you just want to know what directory you are currently working off of so you know how to get to where you want to go.</p>
<p>There is a function you can run to print that out for you, the <code>getcwd()</code> function which stands for ""get current working directory"".</p>
<pre class=""pre__block""><code class=""language-python"">import os

print(os.getcwd())</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">C:\Users\Nilan\Desktop</code>
</pre>
<p>Easy enough!</p>
<h2 id=""changing-your-current-working-directory"">Changing your Current Working Directory</h2>
<p>Now that you know where you are, you might want to change it to work from another directory. You can do this using the <code>chdir()</code> function which stands for ""change directory"":</p>
<pre class=""pre__block""><code class=""language-python"">import os

print(os.getcwd())

os.chdir(""C:\Users\"")

print(os.getcwd())</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">C:\Users\Nilan\Desktop
C:\Users</code>
</pre>
<aside class=""aside__tip"">
<p>    Keep in mind that the double slashes are so that we can use slash literals, which is what we want in this case.</p>
</aside>

<h2 id=""deleting-a-directory"">Deleting a Directory</h2>
<p>You can delete a directory using the <code>rmdir()</code> function, which stands for ""remove directory"", and passing in the path to the directory you want removed:</p>
<pre class=""pre__block""><code class=""language-python"">import os

os.rmdir(""test"")</code>
</pre>
<p>There goes the <code>test</code> directory!</p>
<aside class=""aside__warning"">
<p>    Keep in mind that you can only remove empty folders!</p>
</aside>

<p>Python allows you to work with the file system, which includes both files and directories. Using the built-in system functions, you can access, manipulate, open, read, write, append, and close files.</p><h2 id=""opening-a-file"" class="""">Opening a File</h2><p>In Python, you can open a file using the built-in open function. This function accepts two required arguments: the name of the file you want to open and the mode in which you want to open it. </p><p>Here's an example:

</p><pre class=""pre__block""><code class=""language-python"">file = open(""example.txt"", ""r"")
</code></pre>

<p></p><p><span style=""font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;"">In the above code, ""example.txt"" is the name of the file you want to open and ""r"" is the mode.&nbsp;</span><span style=""font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;"">The mode ""r"" stands for ""read"" and it opens the file for reading.

There are several other modes you can use:</span><br></p><ul><li>
""r"": Read mode (default) - used for reading the contents of an existing file
""w"": Write mode - used for creating a new file or overwriting an existing file
</li><li>""a"": Append mode - used for appending data to an existing file
</li><li>""x"": Exclusive creation mode - used for creating a new file, but will raise an error if the file already exists
</li><li>""b"": Binary mode - used for reading or writing binary data
You can combine the modes with ""b"" to open a file in binary mode.</li></ul><p> For example,&nbsp;<span style=""font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;"">""rb"" means to open the file in binary read mode, and ""wb"" means to open the file in binary write mode.</span></p>

<h2 id=""reading-a-file"">Reading a File</h2>
<p></p><p><span style=""font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;"">Here's an example of how you can read the contents of a file:</span><br></p><pre class=""pre__block"" style=""font-size: 14px;""><code class=""language-python"">
file = open(""example.txt"", ""r"")
contents = file.read()
print(contents)
file.close()
</code></pre><p>In this example, the read method is used to read the contents of the file, and then the close method is used to close the file after you're done with it.&nbsp;<span style=""font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;"">It's a good idea to always close your files when you're done with them, to ensure that the resources they use are properly released.</span></p><p></p><p>You can also use the with statement to automatically close the file for you, like this:</p><p></p><pre class=""pre__block"" style=""font-size: 14px;"">with open(""example.txt"", ""r"") as file:
    contents = file.read()
    print(contents)
</pre><p>In this example, the file is automatically closed after the with block is exited, even if an exception is raised.</p>
<h2 id=""read-file-line-by-line"" class="""">Read File Line by Line</h2>
<p>Maybe instead of getting the entire file, you want to read it line by line. Thankfully, there is already a built-in function for this. The <code>readline()</code> function reads a file line by line each time. If you use it twice, the second time will return the second line.</p>
<pre class=""pre__block""><code class=""language-python"">file = open(""file.txt"", ""r"")
print(file.readline())
print(file.readline())</code>
</pre>
<pre class=""pre__block""><code class=""language-markup"">Hello!
Welcome to StackTips!</code>
</pre>
<p>Alternatively, you can just loop over the lines, like so:</p>
<pre class=""pre__block""><code class=""language-python"">file = open(""file.txt"", ""r"")
for line in file:
    print(line)</code>
</pre>
<pre class=""pre__block""><code class=""language-markup"">Hello!
Welcome to StackTips!
Have fun!</code>
</pre>

<h2 id=""closing-a-file"">Closing a File</h2>
<p><strong>Closing</strong> a file is important because it is sometimes needed to ensure any changes to a file are propagated in the file system.</p>
<p>This is how to close a file once you're finished with it:</p>
<pre class=""pre__block""><code class=""language-python"">file = open(""file.txt"", ""r"")
for line in file:
    print(line)
file.close()</code>
</pre>
<p>Our file is now closed!</p>
<h2 id=""appending-to-existing-file"">Appending to Existing File</h2>
<p>You can append text to an existing file pretty easily. Simply switch the mode when you open and use the <code>write()</code> function:</p>
<pre class=""pre__block""><code class=""language-python"">file = open(""file.txt"", ""a"")
file.write(""Coding is fun!"")
file.close()

file = open(""file.txt"", ""r"")
print(file.read())</code>
</pre>
<pre class=""pre__block""><code class=""language-markup"">Hello!
Welcome to StackTips!
Have fun!
Coding is fun!</code>
</pre>

<h2 id=""overwriting-an-existing-file"">Overwriting an Existing File</h2>
<p>The only difference between appending and <strong>overwriting</strong> an existing file is the mode. Here is how you overwrite a file entirely:</p>
<pre class=""pre__block"">	<code class=""language-python"">file = open(""file.txt"", ""w"")
file.write(""Coding is fun!"")
file.close()

file = open(""file.txt"", ""r"")
print(file.read())</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Coding is fun!</code>
</pre>
<aside class=""aside__tip"">
<p>    Keep in mind that if the file does not exist, a new one will be created.</p>
</aside>
<h2 id=""creating-new-empty-files"">Creating new Empty Files</h2>
<p>You can create a brand new file without any content in it by changing the mode to <code>x</code>:</p>
<pre class=""pre__block""><code class=""language-python"">file = open(""file.txt"", ""x"")
file.close()</code>
</pre>
<p>A new blank file has been created!</p>

<h2 id=""renaming-a-file"">Renaming a File</h2>
<p>To <strong>rename</strong> a file using Python, we must import the <code>os</code> module, then use its <code>rename()</code> function.</p>
<p>Here's how that looks:</p>
<pre class=""pre__block""><code class=""language-python"">import os
os.rename(""old_name.txt"", ""new_name.txt"")</code>
</pre>
<p>Pretty simple!</p>
<h2 id=""deleting-a-file"">Deleting a File</h2>
<p><strong>Deleting</strong> a file also requires the use of the <code>os</code> module.</p>
<p>Here's how you do it:</p>
<pre class=""pre__block""><code class=""language-python"">import os

os.remove(""file.txt"")</code>
</pre>
<aside class=""aside__warning"">
<p>    Keep in mind that this will throw an error if the file doesn't exist.</p>
</aside>

<h2 id=""check-if-a-file-exists"">Check if a File Exists</h2>
<p>To avoid an error with trying to remove a file that does not exist, you should check if the file exists before trying to remove it.</p>
<p>This is how you do it:</p>
<pre class=""pre__block""><code class=""language-python"">import os

path = ""file.txt""

if os.path.exists(path):
    os.remove(path)
else:
    print(""This path does not exist: "" + path)</code></pre><ul>
</ul>",13,"standard","lesson"
"Python: Working with Date and Times","python-working-with-date","Learn how to express and work with dates and moments in time using Python's built-in date and time functionality.","LIVE","<p>Python offers us easy-to-use functions inside the <code>datetime</code> and <code>time</code> modules to manipulate, convert, and display dates and time.</p>

<h2 id=""getting-the-date"">Getting the Date</h2>
<p>We can use the <code>datetime</code> module to get the exact date and time at the point of running the program:</p>
<pre class=""pre__block""><code class=""language-python"">import datetime

now = datetime.datetime.now()
print(now)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">2019-12-01 00:00:00.000000</code>
</pre>

<h2 id=""getting-information-from-the-date"">Getting Information from the Date</h2>
<p>Once you have a date project, you can get specific pieces of information out of it by accessing the properties, like so:</p>
<pre class=""pre__block""><code class=""language-python"">import datetime

now = datetime.datetime.now()

day = now.day
month = now.month
year = now.year

print(""Day: "" + str(day))
print(""Month: "" + str(month))
print(""Year: "" + str(year))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Day: 1
Month: 12
Year: 2019</code>
</pre>
<h2 id=""creating-a-date"">Creating a Date</h2>
<p>We can create a new date object by using the <code>datetime</code> function and passing in the values we want:</p>
<pre class=""pre__block""><code class=""language-python"">import datetime

future = datetime.datetime(2030, 6, 18)

day = future.day
month = future.month
year = future.year

print(""Day: "" + str(day))
print(""Month: "" + str(month))
print(""Year: "" + str(year))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Day: 18
Month: 6
Year: 2030</code>
</pre>

<h2 id=""formatting-a-date"">Formatting a Date</h2>
<p>Once you get or create your date object, you can print it out in a readable format using the <code>strftime</code> function:</p>
<pre class=""pre__block""><code class=""language-python"">import datetime

future = datetime.datetime(2030, 6, 18)

print(future.strftime(""%A""))</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Tuesday</code>
</pre>
<p>Curious about that <code>%A</code>? Here are all the other symbols you can use to format your string:</p>
<ul>
<li><code>%a</code>: Weekday (short)</li>
<li><code>%A</code>: Weekday (full)</li>
<li><code>%w</code>: Weekday (number)</li>
<li><code>%d</code>: Day of Month</li>
<li><code>%b</code>: Month (short)</li>
<li><code>%B</code>: Month (full)</li>
<li><code>%m</code>: Month (number)</li>
<li><code>%y</code>: Year (short)</li>
<li><code>%Y</code>: Year (full)</li>
<li><code>%H</code>: Hour (00-23)</li>
<li><code>%I</code>: Hour (00-12)</li>
<li><code>%p</code>: AM/PM</li>
<li><code>%M</code>: Minute</li>
<li><code>%S</code>: Second</li>
<li><code>%f</code>: Microsecond</li>
<li><code>%z</code>: UTC offset</li>
<li><code>%Z</code>: Timezone</li>
<li><code>%j</code>: Day of Year</li>
<li><code>%U</code>: Week Number (starting from Sunday)</li>
<li><code>%W</code>: Week Number (starting from Monday)</li>
<li><code>%c</code>: Local date and time</li>
<li><code>%x</code>: Local date</li>
<li><code>%X</code>: Local time</li>
</ul>

<ul>
</ul><p><a href=""https://docs.python.org/3/library/datetime.html"" rel=""noopener"" target=""_blank"">Python Docs - Datetime</a></p><ul>
</ul>",14,"standard","lesson"
"Python: Serialising and Deserialising JSON","python-serialising-and-deserialising-json","JSON is the language of data transfer. Learn how to encode and decode JSON in Python using the json module.","LIVE","<p>JSON stands for JavaScript Object Notation and it is one of the most popular data formats to store and transfer data between two points. Python has a built-in module called <code>json</code> that we can use to work with JSON.</p>
<h2 id=""parsing-json"">Deserialising JSON in Python</h2>
<p>We can parse a string of JSON into a Python dictionary using the <code>loads()</code> function in the <code>json</code> module:</p>
<pre class=""pre__block""><code class=""language-python"">import json

json_str = '{ ""name"": ""Timmy Turner"", ""age"": 10, ""show"": ""The Fairly OddParents""}'

parsed = json.loads(json_str)<br>
print(parsed)</code>
</pre>
<pre class=""pre__block""><code class=""language-json"">{'name': 'Timmy Turner', 'age': 10, 'show': 'The Fairly OddParents'}</code>
</pre>
<p>While it looks the same as the input, because it is a dictionary, you can access it like you would any dictionary:</p>
<pre class=""pre__block""><code class=""language-python"">import json

json_str = '{ ""name"": ""Timmy Turner"", ""age"": 10, ""show"": ""The Fairly OddParents""}'

parsed = json.loads(json_str)<br>
print(parsed[""name""])
print(parsed[""age""])
print(parsed[""show""])</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Timmy Turner
10
The Fairly OddParents</code>&nbsp;</pre>

<h2 id=""converting-to-json""><span style=""font-size: 2rem; font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;;"">Serialising Object</span>&nbsp;to JSON in Python</h2>
<p>You can do the reverse and <strong>convert</strong> a Python object into a string of JSON using the <code>dumps()</code> function:</p>
<pre class=""pre__block""><code class=""language-python"">import json

obj = {
    ""name"": ""Timmy Turner"",
    ""age"": 10,
    ""show"": ""The Fairly OddParents""
}

converted = json.dumps(obj)

print(converted)</code>
</pre>
<pre class=""pre__block""><code class=""language-json"">{""name"": ""Timmy Turner"", ""age"": 10, ""show"": ""The Fairly OddParents""}</code>
</pre>
<h2 id=""formatting-json"">Formatting JSON</h2>
<p>When you are outputting to JSON, you can pass optional parameters to the <code>dumps()</code> function to format the output for us.</p>
<p>Here's how to indent the string to make it more readable:</p>
<pre class=""pre__block""><code class=""language-python"">import json

obj = {
    ""name"": ""Timmy Turner"",
    ""age"": 10,
    ""show"": ""The Fairly OddParents""
}

converted = json.dumps(obj, indent=4)

print(converted)</code>
</pre>
<pre class=""pre__block""><code class=""language-json"">{
    ""name"": ""Timmy Turner"",
    ""age"": 10,
    ""show"": ""The Fairly OddParents""
}</code>
</pre>
<aside class=""aside__tip"">
<p>    </p><p>It's a good show that we hope you have watched!</p>
</aside>


<ul>
<li><a href=""https://docs.python.org/3/library/json.html"" rel=""noopener"" target=""_blank"">Python Docs - JSON</a></li>
</ul>",17,"standard","lesson"
"Python: Working with Mails","python-working-with-mails","Learn how to send text and HTML mail dynamically in Python using its built-in mail module and functions.","LIVE","<p></p><p>To send email in Python using the smtplib module, you'll need to have a working SMTP server that you can connect to. You'll also need the email address of the sender and the recipient, as well as the message content.

Here's an example of how to send an email using smtplib:</p><p></p><p>Python offers the <code>smtplib</code> module that allows us to use the Simple Mail Transfer Protocol (SMTP) to send mail between mail servers.</p>

<pre class=""pre__block""><code class=""language-python"">
import smtplib

# Set up the SMTP server
smtp_server = ""smtp.gmail.com""
smtp_port = 587
smtp_username = ""your_username@gmail.com""
smtp_password = ""your_password""
server = smtplib.SMTP(smtp_server, smtp_port)
server.starttls()
server.login(smtp_username, smtp_password)

# Set up the email message
from_email = ""your_username@gmail.com""
to_email = ""recipient@example.com""
subject = ""Test email""
body = ""This is a test email sent from Python.""
message = f""Subject: {subject}\n\n{body}""

# Send the email
server.sendmail(from_email, to_email, message)

# Close the connection
server.quit()
</code>
</pre>

In this example, we're using Gmail as the SMTP server, but you can use any SMTP server that you have access to. Make sure to replace your_username@gmail.com and your_password with your actual Gmail email address and password.

The starttls method enables encryption for the SMTP connection, and the login method authenticates the connection using the email address and password.

The from_email and to_email variables specify the email addresses of the sender and recipient. <p></p><p>The subject variable specifies the subject of the email, and the body variable contains the text of the message.

</p><p>The message variable combines the subject and body of the email into a single string that can be sent using the sendmail method. </p>
<p>The sendmail method takes three arguments: the sender's email address, the recipient's email address, and the message content.</p>

<p>After the email is sent, the quit method is called to close the connection to the SMTP server.</p>

<p>I hope this helps you get started with sending emails using smtplib in Python!</p>

<h2>Sending HTML Email</h2>

To send an HTML email in Python using smtplib, you can use the email.mime module to create a message with the MIMEMultipart and MIMEText classes. Here's an example of how to send an HTML email:

<pre class=""pre__block""><code class=""language-python"">
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# Set up the SMTP server
smtp_server = ""smtp.gmail.com""
smtp_port = 587
smtp_username = ""your_username@gmail.com""
smtp_password = ""your_password""
server = smtplib.SMTP(smtp_server, smtp_port)
server.starttls()
server.login(smtp_username, smtp_password)

# Set up the email message
from_email = ""your_username@gmail.com""
to_email = ""recipient@example.com""
subject = ""HTML email""
html = ""<h1>This is a test HTML email</h1><p>This email was sent using Python.</p>""
message = MIMEMultipart(""alternative"")
message[""Subject""] = subject
message[""From""] = from_email
message[""To""] = to_email
html_part = MIMEText(html, ""html"")
message.attach(html_part)

# Send the email
server.sendmail(from_email, to_email, message.as_string())

# Close the connection
server.quit()
</code></pre>

<p>In this example, we're creating an HTML message using the MIMEMultipart and MIMEText classes from the email.mime module. The html variable contains the HTML code for the email message.</p>

<p>We're then creating a MIMEMultipart message with the Subject, From, and To headers. The html_part variable contains the HTML message as a MIME text object, which we then attach to the MIMEMultipart message using the attach method.</p>

<p>We then send the email using the sendmail method, passing the from_email, to_email, and message.as_string() as arguments.</p>

<p>Finally, we close the connection to the SMTP server using the quit method.</p>

<p>I hope this helps you get started with sending HTML emails using smtplib in Python!</p>",18,"standard","lesson"
"Python: Regular Expressions","python-regular-expressions","Learn how to use regular expressions search patterns in Python to match text and do advanced find and replace operations.","LIVE","<p>Regular expressions are a formatted sequence or pattern of characters that can be used in a search operation. They are written in a specific syntax and then are usually used to search for patterns in other text, or returning whether or not that text has met the pattern.</p>
<p>Python has a built-in module just for this, the <code>re</code> module.</p>
<h2 id=""using-regular-expressions-functions"">Using Regular Expressions Functions</h2>
<p>Here are the functions that the <code>re</code> module offers to us:</p>
<ul>
<li><code>findall</code>: Returns a list with all the matches</li>
<li><code>search</code>: Returns a Match object if a match was found</li>
<li><code>split</code>: Returns a list of the string split at every match</li>
<li><code>sub</code>: Substitutes all the matches with a string</li>
</ul>
<p>Let's see these all in action.</p>

<h2 id=""findall-function"">findall Function</h2>
<p>Use the <code>findall()</code> function when you want to find all the matches you have described:</p>
<pre class=""pre__block""><code class=""language-python"">import re

example = ""I pledge allegiance.""
results = re.findall(""le"", example)
print(results)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">['le', 'le']</code>
</pre>
<p>Python found <code>le</code> twice. If nothing was found, the list returned will be empty. You can take the length of this list to the number of results found.</p>
<h2 id=""search-function"">search Function</h2>
<p>The <code>search()</code> function searches the string for a match. It returns back a <code>re.Match</code> object.</p>
<pre class=""pre__block""><code class=""language-python"">import re

example = ""I pledge allegiance.""

results = re.search(""le"", example)
print(results)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">&lt;re.Match object; span=(18, 20), match='le'&gt;</code>
</pre>
<p>Using this <code>re.Match</code> object, you can get the index of the first match, like this:</p>
<pre class=""pre__block""><code class=""language-python"">import re

example = ""I pledge allegiance.""

results = re.search(""le"", example)
print(results.start())</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">3</code>
</pre>

<h2 id=""split-function"">split Function</h2>
<p>The <code>split()</code> function returns the string split at every match.</p>
<pre class=""pre__block""><code class=""language-python"">import re

example = ""I pledge allegiance.""

results = re.split(""le"", example)
print(results)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">['I p', 'dge al', 'giance.']</code>
</pre>
<p>Pretty straightforward, it cuts out all the string passed in when matched, and splits the string at that point.</p>
<h2 id=""sub-function"">sub Function</h2>
<p>The <code>sub()</code> function substitutes a match with a string of your choice:</p>
<pre class=""pre__block""><code class=""language-python"">import re

example = ""I pledge allegiance.""

results = re.sub(""le"", ""ABC"", example)
print(results)</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">I pABCdge alABCgiance.</code>
</pre>

<h2 id=""special-sequences"">Special Sequences</h2>
<p>In addition to string literals, you can use <strong>special sequences</strong> in your regular expressions to make them more powerful.</p>
<p>Here is a list of the special sequences you can use:</p>
<ul>
<li><code>.</code>: Matches any character</li>
<li><code>\w</code>: Matches an alphanumeric character (includes underscores)</li>
<li><code>\W</code>: Matches a non-alphanumeric character (excludes underscores)</li>
<li><code>\b</code>: Space between word and non-word characters</li>
<li><code>\s</code>: Matches a single whitespace character</li>
<li><code>\S</code>: Matches a non-whitespace character</li>
<li><code>\t</code>: Matches a tab</li>
<li><code>\n</code>: Matches a newline</li>
<li><code>\r</code>: Matches a return</li>
<li><code>\d</code>: Matches a numeric character</li>
<li><code>\^</code>: Matches the start of a string</li>
<li><code>\$</code>: Matches the end of a string</li></ul><ul>
</ul>

<ul>
</ul><ul>
</ul>",15,"standard","lesson"
"Python: Exception Handling","python-exceptions","Learn how to gracefully handle and recover from exceptions and errors in Python when they arise in your code.","LIVE","<p>Exceptions are errors in our program that causes Python to stop and display an error message. Exceptions are handled using the try-except-finally block.</p>

<h2 id=""exception-handling"">Exception Handling</h2>
<p>As mentioned before, we handle exceptions using the try-except-finally block. The <code>try</code> block is where you put the code that could potentially throw an exception. The <code>except</code> block is where you can gracefully perform an action if an exception was indeed thrown. Lastly, the <code>finally</code> block allows you to run code no matter if an exception was thrown or not.</p>
<p>Let's look at a very simple exception:</p>
<pre class=""pre__block""><code class=""language-python"">try:
    print(myVar)<br>except:
    print(""An exception occurred."")</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">An exception occurred.</code>
</pre>
<p>In our piece of code, the variable <code>myVar</code> was purposely not defined. This threw an exception which we handled inside our <code>except</code> block.</p>
<p>Notice how we didn't use a <code>finally</code> block because they are entirely optional. However, we could use one anyway like this:</p>
<pre class=""pre__block""><code class=""language-python"">try:
    print(myVar)<br>except:
    print(""An exception occurred."")
finally:
    print(""Moving on!"")</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">An exception occurred.
Moving on!</code>
</pre>

<h2 id=""multiple-exceptions"">Multiple Exceptions</h2>
<p>You can handle multiple exceptions by chaining the <code style="""">except</code> blocks and specifying what error you want to handle.</p>
<p>Here's how that looks:</p>
<pre class=""pre__block""><code class=""language-python"">try:
    print(myVar)<br>except OverflowError:
    print(""An overflow occurred."")
except:
    print(""An exception occurred."")
finally:
    print(""Moving on!"")</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">An exception occurred.
Moving on!</code>
</pre>
<h2 id=""else"">Else</h2>
<p>You can use the <code>else</code> block to run code when no exceptions were thrown. This is similar to the <code>finally</code> block except that the <code>finally</code> block runs no matter what whereas the <code>else</code> block runs only when the code was exception-free.</p>
<pre class=""pre__block""><code class=""language-python"">try:
    print(""Hello!"")
except OverflowError:
    print(""An overflow occurred."")
except:
    print(""An exception occurred."")
else:
    print(""Great, no errors!"")
finally:
    print(""Moving on!"")</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Hello!
Great, no errors!
Moving on!</code>
</pre>

<h2 id=""raising-exceptions"">Raising Exceptions</h2>
<p>When the situation arises, you might want to raise an exception yourself. This is done using the <code>raise</code> keyword:</p>
<pre class=""pre__block""><code class=""language-python"">raise Exception(""Sorry, this is an exception!"")</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Traceback (most recent call last):
File ""C:\Users\Nilan\example.py"", line 1, in &lt;module&gt;
raise Exception(""Sorry, this is an exception!"")
Exception: Sorry, this is an exception!</code>
</pre>
<p>This is useful especially if you're writing your own module because it allows users of your module to then handle your exceptions themselves and handle it however they want.</p>

<ul>
</ul><p><a href=""https://docs.python.org/3/tutorial/errors.html"" rel=""noopener"" target=""_blank"">Python Docs - Errors and Exceptions</a></p><ul>
</ul>",12,"standard","lesson"
"Introduction to Java","introduction-to-java","This is the beginning of the Java class. Here we will install the prerequisites for java development and get started with writing our first Java code!","LIVE","<p></p><p>Java is a high-level, cross-platform, mature, object-oriented programming language. Java is extremely popular due to its flexibility and ability to run anywhere. It abstracts away a lot of details that we don't need to worry about which allows us to focus on the logic in our code.</p>
<h3 class="""">Prerequisites</h3><p>Here are the prerequisites for working with Java:</p><p><span><b>Java Development Kit (JDK):</b> This is the essential software that contains the compiler, tools, and libraries needed to develop Java applications.</span></p><p><span><b>Integrated Development Environment:</b> This is completely optional, but highly recommended. An IDE provides a user-friendly interface for writing, editing, debugging, and running Java code. Here are some of the popular choices:</span></p><ul>
<ul><li>IntelliJ IDEA</li><li>Eclipse</li><li>NetBeans</li><li>Visual Studio Code (with Java extensions)</li></ul>
</ul>
<p>If you've got these two things, you're ready to start this class!</p>
<h3 class="""">Installing Java</h3>
<p><span>If you don't already have Java installed, you can do that using our <a href=""https://stacktips.com/articles/how-to-install-java-for-macos-and-windows"" target=""_blank"">Java installation guide</a>.&nbsp;</span><span style=""font-size: 1rem;"">To test that you installed Java correctly, run this command:</span></p>
<pre class=""pre__block""><code class=""language-bash"">java --version</code>
</pre>
<p>You should get an output similar to this:</p>
<pre class=""pre__block""><code class=""language-bash"">openjdk 17.0.7 2023-04-18 LTS
OpenJDK Runtime Environment Microsoft-7626293 (build 17.0.7+7-LTS)
OpenJDK 64-Bit Server VM Microsoft-7626293 (build 17.0.7+7-LTS, mixed mode)</code>
</pre>
<p>If you have Java installed, you're good to go.</p>
<h3 class="""">Installing a IDE</h3>
<p><span>You will most likely need a Java IDE to write, compile and run your Java code, at least if you don't want to do all of this in the command line. </span><span>We recommend IntelliJ IDEA but the choice is entirely yours. Follow the <a href=""https://www.jetbrains.com/help/idea/installation-guide.html"" target=""_blank"">installation steps</a> from official IntelliJ website.</span></p><p><span>At this point, we will assume you have the Java and an IDE installed.&nbsp;</span><span>Let's move on to writing Java code!</span></p>
<h3 class="""">Hello World</h3>
<p>The classic example to starting any programming language has got to be printing out <code>Hello World!</code>, so let's do just that in Java.&nbsp;<span style=""font-size: 1rem;"">First create a file called </span><code>HelloWorld.java</code></p>
<pre class=""pre__block""><code class=""language-java"">public class HelloWorld {
    public static void main(String[] args) {
        System.out.println(""Hello World!"");
    }
}</code>
</pre>
To run this, you first need to compile your code. We can do that using javac<p></p><p> 

</p><pre class=""pre__block""><code class=""language-bash"">javac HelloWorld.java</code>
</pre>
<p>This will compile your code and generate another file HelloWorld.class. To run this file, you need following command:</p><pre class=""pre__block""><code class=""language-bash"">java HelloWorld</code></pre><p>Notice, this will print&nbsp;</p><pre class=""pre__block""><code class=""language-bash"">HelloWorld!</code></pre><p></p>",1,"standard","lesson"
"Overview of Java Syntax and Comments","java-overview-syntax-and-comments","Get an overview of Java in this lesson including the syntax and how to leave single and multi-line comments.","LIVE","<p>Java is an object-oriented programming language. What this means is that basically everything is an object. We'll learn more about what an object is and why it's important later in this class.</p>
<p class=""""><span style=""font-size: 1rem;"">Let's look at how we printed </span><code>Hello World!</code><span style=""font-size: 1rem;""> again:</span><br></p>
<pre class=""pre__block""><code class=""language-java"">public class HelloWorld {
    public static void main(String[] args) {
        System.out.println(""Hello World!"");
    }
}</code>
</pre>
<p>There's definitely a lot going on here, however for the purposes of this class, there's only a few things you need to take away from this for now:</p><ul><li>This code defines the <code>main()</code> method, which is the starting point for any Java program.</li><li>When you run this code, the JVM(Java Virtual Machine) calls the <code>main()</code> method and executes its contents.</li><li>The line <code>System.out.println(""Hello World!"");</code> prints the message ""Hello World!"" to the console, demonstrating basic output functionality.</li><li>When it comes to the syntax, every line of code in Java must end in a semicolon. Unlike some programming languages like Python, indentation doesn't matter here.</li></ul>

<h3 class="""">Comments in Java</h3>
<p>Comments are useful in programming languages to leave yourself or another developer a note of some kind. This is also called documenting your code. Comments are entirely ignored by the compiler so they do not affect the execution or performance of your code.</p>
<p>Here's how a single-line comment looks like:</p>
<pre class=""pre__block""><code class=""language-java"">public class HelloWorld {
    public static void main(String[] args) {
        // this is a single-line comment!
        System.out.println(""Hello World!"");
    }
}</code>
</pre>
<p>You can leave a comment spanning multiple lines like this:</p>
<pre class=""pre__block""><code class=""language-java"">public class HelloWorld {<br>    public static void main(String[] args) {
        /* this is a
           multi-line comment!
          */
        System.out.println(""Hello World!"");
    }
}</code></pre>",2,"standard","lesson"
"Introduction to Java Variables and Types","java-variables-and-types","Variables and constants hold data and information. Learn how to declare, initialize, and reassign them in Java.","LIVE","<p>Variables are a fundamental part of any programming language, including Java. Variables are used to store pieces of data and give them a name. When we want to use these variables in some way, we can refer to them by their name.</p>
<h3 class="""">Data Types</h3>
<p>Define the kind of data a variable can hold and the operations that can be performed on it. Java has two main categories of data types:</p><ol><li>Primitive Data Types:</li><li>Non-Primitive Data Types (Reference Types)<br></li></ol><h4 class=""""><span style=""font-family: Inter, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;"">Primitive Data Types</span></h4><p class=""""><span style=""font-size: 1rem;"">Let's explore the primitive types of data that variables can hold.</span></p><table class=""table table-bordered""><tbody><tr><td><b>Type</b></td><td><b>Description</b></td><td><b>Storage space</b></td></tr><tr><td><span style=""color: rgb(232, 62, 140); font-family: SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; font-size: 14px;"">byte</span><br></td><td>Store whole&nbsp;<span style=""font-family: Inter, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;"">number between&nbsp;</span><code style=""font-size: 14px;"">-128</code><span style=""font-family: Inter, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;"">&nbsp;and&nbsp;</span><code style=""font-size: 14px;"">127.&nbsp;</code>Useful for memory-efficient storage of small integers<br></td><td>8 bits (1 byte)<br></td></tr><tr><td><span style=""color: rgb(232, 62, 140); font-family: SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; font-size: 14px;"">short</span><br></td><td><span style=""font-family: Inter, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;"">Store whole number between&nbsp;</span><code style=""font-size: 14px;"">-32,768</code><span style=""font-family: Inter, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;"">&nbsp;and&nbsp;</span><code style=""font-size: 14px;"">32,767.&nbsp;</code>Used for larger integer values than those held by byte<br></td><td><span style=""color: rgb(31, 31, 31); font-family: &quot;Google Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;"">16 bits (2 bytes)</span><br></td></tr><tr><td><span style=""color: rgb(232, 62, 140); font-family: SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; font-size: 14px;"">int</span><br></td><td>The most common integer type,<span style=""color: rgb(31, 31, 31); font-family: &quot;Google Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;"">&nbsp;storing whole numbers from</span><span style=""font-family: Inter, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;"">&nbsp;</span><code style=""font-size: 14px;"">-2,147,483,648</code><span style=""font-family: Inter, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;"">&nbsp;and&nbsp;</span><code style=""font-size: 14px;"">2,147,483,647</code><br></td><td><span style=""color: rgb(31, 31, 31); font-family: &quot;Google Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;"">32 bits (4 bytes)</span><br></td></tr><tr><td><span style=""color: rgb(232, 62, 140); font-family: SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; font-size: 14px;"">long</span><br></td><td>Stores even larger whole numbers,&nbsp;<span style=""font-family: Inter, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;"">between -</span><code style=""font-size: 14px;"">9,223,372,036,854,775,808</code><span style=""font-family: Inter, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;"">&nbsp;to&nbsp;</span><code style=""font-size: 14px;"">9,223,372,036,854,775,807</code><br></td><td><span style=""color: rgb(31, 31, 31); font-family: &quot;Google Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;"">64 bits (8 bytes)</span><br></td></tr><tr><td><span style=""color: rgb(232, 62, 140); font-family: SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; font-size: 14px;"">float</span><br></td><td>Represents single-precision floating-point numbers (numbers with decimals). Used for approximate real numbers where precision isn't critical.<br></td><td><span style=""color: rgb(31, 31, 31); font-family: &quot;Google Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;"">32 bits (4 bytes)</span><br></td></tr><tr><td><span style=""color: rgb(232, 62, 140); font-family: SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; font-size: 14px;"">double</span><br></td><td>Represents double-precision floating-point numbers, offering more precision than float. Used for accurate scientific calculations or measurements.<br></td><td><span style=""color: rgb(31, 31, 31); font-family: &quot;Google Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;"">64 bits (8 bytes)</span><br></td></tr><tr><td><span style=""color: rgb(232, 62, 140); font-family: SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; font-size: 14px;"">char</span><br></td><td>Stores a single unicode character. Used for representing text and symbols.<br></td><td><span style=""color: rgb(31, 31, 31); font-family: &quot;Google Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;"">16 bits (2 bytes)</span><br></td></tr><tr><td><span style=""color: rgb(232, 62, 140); font-family: SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; font-size: 14px;"">boolean</span><br></td><td>Represents logical values: true or false. It is used for conditional statements and decision-making.&nbsp;<br></td><td>1 bit (but occupies 1 byte in memory for efficiency)<br></td></tr></tbody></table>
<h4 class="""">Non-Primitive Data Types (Reference Types)</h4><p>The reference types are the objects or instances of classes. Some of the Non-Primitive Data Types in Java includes:</p><ul><li><span style=""font-size: 1rem;"">String (not a primitive, but a common reference type)</span><br></li><li>Arrays</li><li>Classes</li><li>Interfaces</li></ul><p>Now that we know the data types supported in Java, let's declare our variables.</p><h3 class="""">Types of Variables:</h3><ul><li><span style=""font-size: 1rem;""><b>Local Variables:</b> Declared within a method or block, accessible only within that scope.</span><br></li><li><b>Instance Variables:</b> Declared within a class, outside of any method, each object of the class has its own copy.</li><li><b>Static Variables:</b> Declared with the static keyword, shared by all objects of the class.</li></ul><h3 class="""">Declaring</h3>
<p>Declaring a variable is how you create them. Here's an example featuring all of the primitive data types:</p>
<pre class=""pre__block""><code class=""language-java"">public class HelloWorld {
    public static void main(String[] args) {
        byte b = 6;
        System.out.println(b);

        short c = 1337;
        System.out.println(c);

        int d = 12345;
        System.out.println(d);

        long e = 13371337;
        System.out.println(e);

        float f = 13.37f;
        System.out.println(f);

        double g = 13.37;
        System.out.println(g);

        char h = 'a';
        System.out.println(h);

        boolean i = true;
        System.out.println(i);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">6
1337
12345
13371337
13.37
13.37
a
true</code>
</pre>
<p>In general, to declare a variable, you must start off with their type, then an equal sign, then the value. This is the general syntax:</p>
<pre class=""pre__block""><code class=""language-java"">type name = value;</code>
</pre>
<p>Since Java is strongly typed, it requires you to give every variable their type.</p>
<h3 class="""">Variable Naming Rules</h3>
<p>There are rules in place for naming Java variables, and here they are:</p>
<ul>
<li>The variable name can only contain alphanumeric characters, underscores, and dollar signs</li>
<li>The variable name must start with a letter, dollar sign, or underscore</li>
<li>The variable name cannot contain spaces</li>
</ul>
<p>With that in mind, here are some examples of valid Java variable names:</p>
<pre class=""pre__block""><code class=""language-java"">apples
_apples
_apples_
$apples</code>
</pre>
<p>And here are some examples of invalid Java variables names:</p>
<pre class=""pre__block""><code class=""language-java"">1apples
app les
&amp;apples
%apples</code>
</pre>
<aside class=""aside__warning"">
<p>    Keep in mind that variable names are case-sensitive. Also, reserved keywords cannot be used as variable names since they will clash.</p>
</aside>",3,"standard","lesson"
"Perform Math Operations in Java","java-math","Learn about how to do arithmetic and work with the basic math operators and methods provided by Java.","LIVE","<p>Java makes working with math straightforward and simple. It offers the usual arithmetic operators you expect, in addition to mathematical functions and properties so that we don't need to implement them ourselves. This lets us focus on the core logic of our application.</p>

<h3 class="""">Arithmetic Operators</h3>
<p>Arithmetic operators are what you use to manipulate the value of numerical variables and numbers. Here are the ones you can use:</p>

<p class=""""><b>Addition</b></p>
<pre class=""pre__block""><code class=""language-java"">// adding numbers
int cakes = 5;
int cookies = 7;

int total = cakes + cookies;
System.out.println(""Total: "" + total);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Total: 12</code><b>
</b></pre>
<p class=""""><b>Subtraction</b></p>
<pre class=""pre__block""><code class=""language-java"">// subtracting numbers
int cakes = 14;
int eaten = 7;

int total = cakes - eaten;
System.out.println(""Total: "" + total);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Total: 7</code><b>
</b></pre>

<p class=""""><b>Multiplication</b></p>
<pre class=""pre__block""><code class=""language-java"">// multiplying numbers
int cakes = 3;
int people = 7;

int total = cakes * people;
System.out.println(""Total: "" + total);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Total: 21</code><b>
</b></pre>
<p class=""""><b>Division</b></p>
<pre class=""pre__block""><code class=""language-java"">// dividing numbers
int cakes = 100;
int people = 5;

int total = cakes / people;
System.out.println(""Total: "" + total);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Total: 20</code><b>
</b></pre>

<p class=""""><b>Modulus</b></p>
<pre class=""pre__block""><code class=""language-java"">// modulus operator
int cakes = 100;
int people = 7;

int remainder = cakes / people;
System.out.println(""Remainder: "" + remainder);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Total: 14</code>
</pre>
<h3 class="""">Order of Operations</h3>
<p>Order of Operations, also known as PEMDAS, works just as you would expect, including parentheses:</p>
<pre class=""pre__block""><code class=""language-java"">// order of operations
int result = (5 * 6) + 40 / 2;

System.out.println(""Result: "" + result);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Result: 50</code>
</pre>

<h3 class="""">Math Methods</h3>
<p>Java offers many useful math methods for numbers that are commonly used in calculations.</p>
<p class=""""><b>Absolute Value</b></p>
<p>Get the absolute number of a number using the</p>
<pre class=""pre__block""><code class=""language-java"">int number = -34;
System.out.println(""Number: "" + Math.abs(number));</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Number: 34</code><b>
</b></pre>

<p class=""""><b>Floor</b></p>
<p>Use the <code>floor</code> method to round any number down to the nearest whole number:</p>
<pre class=""pre__block""><code class=""language-java"">double number = 856.234;
System.out.println(""Number: "" + Math.floor(number));</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Number: 856.0</code><b>
</b></pre>
<p class=""""><b>Ceiling</b></p>
<p>Use the <code>ceil</code> method to round any number up to the nearest whole number:</p>
<pre class=""pre__block""><code class=""language-java"">double number = 856.234;
System.out.println(""Number: "" + Math.ceil(number));</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Number: 857.0</code><b>
</b></pre>

<p class=""""><b>Natural Logarithm</b></p>
<p>You can get the natural logarithm of a number using the <code style="""">log()</code> function:</p>
<pre class=""pre__block""><code class=""language-java"">int number = 43;
System.out.println(""Number: "" + Math.log(number));</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Number: 3.7612001156935624</code><b>
</b></pre>
<p class=""""><b>Base-10 Logarithm</b></p>
<p>You can get the base-10 logarithm of a number using the <code style="""">log10()</code> function:</p>
<pre class=""pre__block""><code class=""language-java"">int number = 43;
System.out.println(""Number: "" + Math.log10(number));</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Number: 1.6334684555795864</code><b>
</b></pre>

<p class=""""><b>Maximum</b></p>
<p>Get the highest value of a set of numbers using the <code>max()</code> function:</p>
<pre class=""pre__block""><code class=""language-java"">int number1 = 53;
int number2 = 64;
System.out.println(""Number: "" + Math.max(number1, number2));</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Number: 64</code><b>
</b></pre>
<p class=""""><b>Minimum</b></p>
<p>Get the lowest value of a set of numbers using the <code>min()</code> function:</p>
<pre class=""pre__block""><code class=""language-java"">int number1 = 53;
int number2 = 64;
System.out.println(""Number: "" + Math.min(number1, number2));</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Number: 53</code><b>
</b></pre>

<p class=""""><b>Power</b></p>
<p>You can calculate the value of one number risen to the power of another number using the <code>pow</code> method:</p>
<pre class=""pre__block""><code class=""language-java"">int base = 5;
int exp = 4;

System.out.println(""Number: "" + Math.pow(base, exp));</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Number: 625.0</code><b>
</b></pre>
<p class=""""><b>Random</b></p>
<p>You can get a random number between <code style="""">0</code> and <code style="""">1</code> using the <code style="""">random()</code> function:</p>
<pre class=""pre__block""><code class=""language-java"">double random = Math.random();
System.out.println(""Random: "" + random);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Random: 0.5497127671041443</code>
</pre>
<p>You can then manipulate this value to do other things like getting a random number between two other numbers, like so:</p>
<pre class=""pre__block""><code class=""language-java"">int min = 4;
int max = 29;
double result = (Math.random() * ((max - min) + 1)) + min;
System.out.println(""Result: "" + result);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Result: 9.63955715156336</code><b>
</b></pre>

<p class=""""><b>Round</b></p>
<p>You can round a number to the nearest integer with <code style="""">round()</code>:</p>
<pre class=""pre__block""><code class=""language-java"">double value = 9.63955715156336;
long result = Math.round(value);
System.out.println(""Result: "" + result);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Result: 10</code><b>
</b></pre>
<p class=""""><b>Square Root</b></p>
<p>You can take the square root of a number using the <code style="""">sqrt()</code> function:</p>
<pre class=""pre__block""><code class=""language-java"">int value = 245;
double result = Math.sqrt(value);
System.out.println(""Result: "" + result);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Result: 15.652475842498529</code></pre>",19,"standard","lesson"
"Decision Making in Java using Ifs, Else Ifs, Switch","java-ifs-else-ifs-switch","Logic and conditionals are a fundamental part of Java and is how your program can make decisions on what to do.","LIVE","<p class=""""><span style=""font-size: 1rem;"">When writing code in any programming language, you will need to account for situations where you need to decide on a path to take given the value of the variables at that point in time. Your program needs to compare values to each other to decide what code to run next.&nbsp;</span><span style=""font-size: 1rem;"">This is called </span><span style=""font-size: 1rem;"">logic</span><span style=""font-size: 1rem;"">.</span></p>
<p>Let's look at the comparison operators at our disposal in Java!</p>

<h3>Equality Operator</h3>
<p>The <strong>equality operator</strong> is the most basic of comparison operators. If the two values being tested are the same, the result will be <code>true</code>, otherwise, the result will be <code>false</code>.</p>
<p>To use this operator, use <strong>two equal signs</strong>:</p>
<pre class=""pre__block""><code class=""language-java"">System.out.println(3 == 4);
System.out.println(6 == 6);
System.out.println(43 == 454);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">false
true
false</code>
</pre>
<aside class=""aside__tip"">
<p>    If you want to check strings for equality, use the <code>equals()</code> method, like this:</p>
<pre class=""pre__block""><code class=""language-java"">boolean equal = string1.equals(string2);</code>
</pre>
</aside>
<h3>Inequality Operator</h3>
<p>The inequality operator is the exact opposite of the equality operator. If the two values being tested are the same, the result will be <code style="""">false</code>. Otherwise, if the values are different, the result will be <code style="""">true</code>.</p>
<p>To use this operator, use an exclamation point, followed by an equal sign.</p>
<pre class=""pre__block""><code class=""language-java"">System.out.println(3 != 4);
System.out.println(6 != 6);
System.out.println(43 != 454);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">true
false
true</code>
</pre>

<h3>Greater Than and Less Than Operators</h3>
<p>You can check if one value is greater than or less than another using the greater than and less than operators.</p>
<p>This is how you use them:</p>
<pre class=""pre__block""><code class=""language-java"">System.out.println(3 &gt; 4);
System.out.println(6 &lt; 6);
System.out.println(43 &lt; 454);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">false
false
true</code>
</pre>
<h3>Or Equal To Operators</h3>
<p>In the case where you need to check either that the values are equal or that one is less than/greater than another value, there is a specific operator for just that.</p>
<p>This is how you can use the greater than or equal to operator and the less than or equal to operators:</p>
<pre class=""pre__block""><code class=""language-java"">System.out.println(3 &gt;= 4);
System.out.println(6 &lt;= 6);
System.out.println(43 &lt;= 454);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">false
true
true</code>
</pre>

<h3 class="""">Conditionals</h3>
<p>With the ability to return <code style="""">true</code> or <code style="""">false</code> now, we can now try and act on these values. We can do this by utilizing what are called conditionals.</p>
<h4 class="""">If Conditional</h4>
<p>Using <code>if</code> is very simple. If the condition inside is <code>true</code> then the code block will run. If it is <code>false</code>, the code block will not run.</p>
<p>Let's say if you eat 3 burgers or more, you win a competition.</p>
<pre class=""pre__block""><code class=""language-java"">int burgersEaten = 4;

if (burgersEaten &gt;= 3) {
    System.out.println(""You've won the competition!"");
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">You've won the competition!</code>
</pre>
<p>But watch what happens if you do not eat at least <code>3</code> burgers:</p>
<pre class=""pre__block""><code class=""language-java"">int burgersEaten = 2;

if (burgersEaten &gt;= 3) {
    System.out.println(""You've won the competition!"");
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-bash""></code>
</pre>
<p>Nothing was printed. That is because the condition inside the <code>if</code> block resulted in <code>false</code>. The code block was skipped entirely and thus the line to print it never executed.</p>

<h4 class="""">Else</h4>
<p>With the <code>else</code> keyword, you can run block of code if the accompanying <code>if</code> condition returned <code>false</code>.</p>
<p>Let's see how this looks in action:</p>
<pre class=""pre__block""><code class=""language-java"">int burgersEaten = 2;

if (burgersEaten &gt;= 3) {
    System.out.println(""You've won the competition!"");
} else {
    System.out.println(""You've lost the competition. :("");
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">You've lost the competition. :(</code>
</pre>
<p>Simply put, the because the first <code>if</code> returned <code>false</code>, the first block of code was skipped, leaving the second block of code to run.</p>
<p>Now what if you wanted to have multiple code paths instead?</p>
<h4 class="""">Else If</h4>
<p>This is where <code>else if</code> comes in to play. These keywords are sandwiched after an <code>if</code> and before the <code>else</code>:</p>
<pre class=""pre__block""><code class=""language-java"">int burgersEaten = 2;

if (burgersEaten &gt;= 3) {
    System.out.println(""You've won the competition!"");
} else if (burgersEaten == 2) {
    System.out.println(""You almost won the competition!"");
} else if (burgersEaten == 1) {
    System.out.println(""You gave it a good try!"");
} else {
    System.out.println(""You didn't come close. :("");
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">You almost won the competition!</code>
</pre>
<p>When you use <code>if</code> and <code>else if</code>, the first block of code where the condition is <code>true</code> will run, and the rest will be ignored entirely, so order does matter!</p>

<h4 class="""">Ternary Operator</h4>
<p>The ternary operator is a shorthand way to represent an <code style="""">if/else</code> block. It checks a condition and if <code style="""">true</code>, returns the left side, otherwise it will return the right side.</p>
<pre class=""pre__block""><code class=""language-java"">int number = 45;
boolean isEven = number % 2 == 0 ? true : false;

System.out.println(""isEven: "" + isEven);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">false</code>
</pre>
<p>Ternary operators are really useful for when you want to condense an entire conditional into a single line.</p>
<h3>Switch Statement</h3>
<p>You can use a switch statement whenever you want to check for many different possible values of something, and run code if there is a match. They are similar to using <code style="""">else if</code> except they can sometimes be more concise and cleaner.</p>
<p>Let's look at one:</p>
<pre class=""pre__block""><code class=""language-java"">int number = 4;
switch (number) {
    case 1:
        System.out.println(""one"");
        break;
    case 2:
        System.out.println(""two"");
        break;
    case 3:
        System.out.println(""three"");
        break;
    case 4:
        System.out.println(""four"");
        break;
    case 5:
        System.out.println(""five"");
        break;
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">four</code>
</pre>
<p>The basic syntax is simple. You put what you want to switch on after the <code>switch</code> keyword, then you list all your cases below. If there is a match, the code inside will be executed. Once there is a match, the <code>break</code> ensures that once the block of code is run, no more checks are performed.</p>

<h3 class="""">Logical Operators</h3>
<p>So far we have seen how to check a single condition and then do something with the result. In the real world, you will often times need to combine the results of multiple conditions before you can make your decision.</p>
<p>To combine the results of more than one condition, you will need to use a <strong>logical operator</strong>.</p>
<h4 class="""">And (&amp;&amp;)</h4>
<p>The and operator, will only result in <code style="""">true</code> if both conditions are <code style="""">true</code>:</p>
<pre class=""pre__block""><code class=""language-java"">boolean isCold = true;
boolean hasJacket = true;

if (isCold &amp;&amp; hasJacket) {
    System.out.println(""I will put on my jacket since I am cold!"");
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">I will put on my jacket since I am cold!</code>
</pre>
<p>Since both of the conditions were <code>true</code>, the code block executed.</p>

<h4 class="""">Or (||)</h4>
<p>Sometimes you don't need both conditions to be <code>true</code> and instead are okay with just one of the two being <code>true</code>. This is where the <strong>or</strong> logical operator comes in to play.</p>
<pre class=""pre__block""><code class=""language-java"">boolean thereAreTacos = true;
boolean thereIsPizza = false;

if (thereAreTacos || thereIsPizza) {
    System.out.println(""I'm glad there's good food here!"");
}</code>
</pre>
<pre class=""pre__block""><span style=""color: inherit; font-family: SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; font-size: inherit;"">I'm glad there's good food here!</span><br></pre>
<p>Even though in this case there was no pizza in the house, because there were still tacos, the print statement executed and you were very happy as a result. ??????</p>
<h4 class="""">Not (!)</h4>
<p>The last logical operator we'll take a look at is the <strong>not</strong> operator. This is used when you simply want to negate the value of the condition.</p>
<p>Let's look at an example:</p>
<pre class=""pre__block""><code class=""language-java"">boolean thereAreTacos = false;
boolean thereIsPizza = false;

boolean thereIsGoodFood = thereAreTacos || thereIsPizza;

if (!thereIsGoodFood) {
    System.out.println(""There is no good food here :("");
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">There is no good food here :(</code>
</pre>
<p>In this case, there were neither tacos nor pizza. That made <code style="""">thereIsGoodFood</code> to be <code style="""">false</code>. However, since we used the not operator to negate it, the entire condition was <code style="""">true</code> and we were able to get the print statement to execute!</p>",6,"standard","lesson"
"Loops in Java for, while and do-while","java-loops","Learn how to shorten and improve your code by utilizing loops like for loops, while loops, and do while loops.","LIVE","<p>Loops are a fundamental part of programming languages, and definitely for Java. Loops are extremely powerful, allowing you to condense blocks of code, and making things more readable.&nbsp;<span style=""font-size: 1rem;"">If you ever find yourself copy and pasting code because you need to repeat their execution, chances are you instead should be using a loop to accomplish that task.</span></p>

<p>Let's look at all the different kinds of loops we can use.</p>
<h3 class="""">For Loop</h3>
<p><b>The for loop is the classic loop, and probably the most commonly used one. It is made up of three different parts:</b></p>
<ul>
<li><strong>Initial Value</strong>: This is the inital value set to the variable we will use to control the loop's progression, usually <code>i</code>.</li>
<li><strong>Condition</strong>: This condition is checked before running the next iteration of the loop.</li>
<li><strong>Iteration</strong>: This part is how you advance further in the loop.</li>
</ul>
<p>Let's look at loops by showing how to print the numbers <code>1</code> to <code>10</code>:</p>
<pre class=""pre__block""><code class=""language-java"">for (int i = 1; i &lt;= 10; i++) {
    System.out.println(i);
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">1
2
3
4
5
6
7
8
9
10</code>
</pre>
<p>So first we initialize our variable <code>i</code> to be <code>1</code>. That way when the first print statement is executed, the value <code>1</code> is printed. Then we increment the value of it thanks to:</p>
<pre class=""pre__block""><code class=""language-markup"">i++</code>
</pre>
<p>This will keep on going until <code>i</code> exceeds the value of <code>10</code>. When that happens, the loop stops executing and we finish our printing.</p>

<h3 class="""">While Loop</h3>
<p>A while loop is a much simpler but equally as powerful loop when compared to a for loop. The structure of a while loop is just a single condition that if it evaluates to <code style="""">true</code> will cause it it to execute. The condition is checked at the end of an iteration and will continue until the condition eventually results in a <code style="""">false</code>.</p>
<p>Looks look at the same example as before but with a while loop instead:</p>
<pre class=""pre__block""><code class=""language-java"">int i = 1;

while (i &lt;= 10) {
    System.out.println(i);
    i++;
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">1
2
3
4
5
6
7
8
9
10</code>
</pre>
<p>The functionality is exactly the same just using a different loop. We are defining the same variable and giving it the same initial value, <code>1</code>. From there we check that <code>i</code> is equal to or less than <code>10</code>. If so, we execute the print statement and increment the value of <code>i</code>. This repeats until the value of <code>i</code> reaches <code>11</code> and the loop terminates.</p>
<h2 id=""do-while-loop"">Do While Loop</h2>
<p>The do while is exactly the same as a normal while loop except that the code block in the loop is guaranteed to run at least once no matter what the condition results in. This can be useful for when you want the code to run once, then repeat it if the condition is <code style="""">true</code>.</p>
<p>Let's look at an example:</p>
<pre class=""pre__block""><code class=""language-java"">int cupcakes = 5;

do {
    System.out.println(""Since there are still "" + cupcakes + "" cupcakes left, I'll eat one."");
    cupcakes--;
} while (cupcakes &gt; 0);

System.out.println(""All cupcakes gone!"");</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Since there are still 5 cupcakes left, I'll eat one.
Since there are still 4 cupcakes left, I'll eat one.
Since there are still 3 cupcakes left, I'll eat one.
Since there are still 2 cupcakes left, I'll eat one.
Since there are still 1 cupcakes left, I'll eat one.
All cupcakes gone!</code>
</pre>
<p>On the first pass, the code is executed without checking the condition. We eat a cupcake, and then the condition is checked. Since cupcakes remained, the loop executed again. This process repeated itself until finally we ran out of cupcakes. When this happened, the code continued to execute to the final print statement letting us know that the cupcakes officially ran out.</p>

<h3 class="""">Break</h3>
<p>The <code>break</code> statement is useful when you want to end a loop prematurely for any reason you want. Let's say counting to <code>10</code> like before but use a <code>break</code> to stop the loop for no reason:</p>
<pre class=""pre__block""><code class=""language-java"">for (int i = 1; i &lt;= 10; i++) {
    System.out.println(i);

    if (i == 5) {
        break;
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">1
2
3
4
5</code>
</pre>
<p>Even though this loop would have continued printing up until the number <code>10</code>, to demonstrate the power of <code>break</code> statements, we used it once the value of <code>i</code> was <code>5</code>. At that point, we exited the loop and no further print statements executed.</p>
<h3 class="""">Continue</h3>
<p>The <code style="""">continue</code> statement is similar to the <code style="""">break</code> except that instead of ending the loop entirely, it continues to the next iteration of the loop.&nbsp;<span style=""font-size: 1rem;"">This is useful for when you don't want to run the rest of the loop's code block, but you also don't want to terminate the loop entirely.</span></p>
<p>Let's look at it in action:</p>
<pre class=""pre__block""><code class=""language-java"">for (int i = 1; i &lt;= 10; i++) {
    if (i == 2 || i == 6) {
        continue;
    }
    System.out.println(i);
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">1
3
4
5
7
8
9
10</code>
</pre>
<p>For absolutely no particular reason, we have decided that when the value of <code>i</code> is either <code>2</code> or <code>6</code>, we will continue on to the next iteration of the loop, instead of printing the value out.&nbsp;</p><p><span style=""font-size: 1rem;"">Because of this, we still got the other values printed out as expected, but at the same time, the entire loop didn't terminate.&nbsp;</span><span style=""font-size: 1rem;"">Knowing when to use </span><code>break</code><span style=""font-size: 1rem;""> and </span><code>continue</code><span style=""font-size: 1rem;""> can make already powerful loops even more powerful!</span></p>",7,"standard","lesson"
"Working with Methods in Java","java-methods","Methods in Java allow you to reuse a code block and reduce code repetition which ensures cleaner and more modular code.","LIVE","<p>Methods, sometimes called functions, are blocks or sections of code, usually named, that can be executed over and over again. methods are great for reducing duplication of code, improving readability, and reducing complexity. Divide up larger chunks of code so that they become easier to manage.</p>
<h3 class="""">Creating a method</h3>
<p>Let's look at a method that simply prints out a greeting:</p>
<pre class=""pre__block""><code class=""language-java"">public static void introduction() {
    System.out.println(""Hello, my name is Jackie."");
}</code>
</pre>
<p>You can ignore what <code>public</code> and <code>static</code> means for now. The important part to take away is the return type is <code>void</code>. Methods can return things back to you, like a <code>String</code> or <code>int</code>, but in this case, we are only printing some text, so we can set the method to return nothing.</p>
<p>Finally we just have the actual code that is being run, the print statement.</p>

<h3 class="""">Invoking a method</h3>
<p>Now that we have defined our method, we just need to invoke or call it. This causes the method to execute:</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    public static void main(String[] args) {
        introduction();
    }

    public static void introduction() {
        System.out.println(""Hello, my name is Jackie."");
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Hello, my name is Jackie.</code>
</pre>
<p>This is cool and all, but what if you wanted to customize the name instead of it being hardcoded?</p>
<h3 class="""">Parameters</h3>
<p>Parameters are pieces of data you can pass into a method that you can then use to perform that method's task. In this case, we want to customize the name that appears, so let's add the name as a parameter:</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    public static void main(String[] args) {
        introduction(""Nia"");
    }

    public static void introduction(String name) {
        System.out.println(""Hello, my name is "" + name + ""."");
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Hello, my name is Nia.</code>
</pre>

<h3 class="""">Return Types</h3>
<p>As mentioned before, methods can optionally return something back to you. In Java, <code>void</code> makes it so that it returns nothing, but setting it with a type makes it return that type.</p>
<p>Let's look at the getting the area of a triangle:</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    public static void main(String[] args) {
        int sideLength = 3;
        int area = getAreaOfSquare(sideLength);

        System.out.println(area);
    }

    public static int getAreaOfSquare(int side) {
        return side * side;
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">9</code>
</pre>
<p>We created a method called <code>getAreaOfSquare()</code> that takes the side length of a square. It then calculates the area and returns it as an <code>int</code>. Now we use that value to set the value of the variable named <code>area</code> which we then print out.</p>",4,"standard","lesson"
"Working with Java Arrays","java-arrays","Arrays are a list of data in Java. In this lesson, learn how to create, add elements to, remove elements from, and iterate over arrays.","LIVE","<p>One of the most common collections in Java are arrays. Arrays can be thought of as simply a list of data, and that data can take the form of numbers, strings, objects, even arrays themselves.</p>
<h3 class="""">Defining an Array</h3>
<p><strong>Creating</strong> an array in Java is pretty straightforward. Let's create one that contains strings:</p>
<pre class=""pre__block""><code class=""language-java"">String[] colors = { ""red"", ""green"", ""blue"" };</code>
</pre>
<p>That right there is an array of 3 <code>string</code> elements assigned to the variable <code>colors</code>.</p>
<p>Arrays in Java have a set size. You can either initialize it like previously shown, or like this:</p>
<pre class=""pre__block""><code class=""language-java"">String[] colors = new String[3];</code>
</pre>
<p>In both cases, an array of size <code>3</code> is created.</p>

<h3 class="""">Retrieve Array Element</h3>
<p>Now that we can create arrays, let's learn how to get an element back when we want to use it. Arrays in Java start counting from <code>0</code>. This means that the 3rd element in the array has an index of <code>2</code>.</p>
<p>With this in mind, let's get the second element from our original array:</p>
<pre class=""pre__block""><code class=""language-java"">String[] colors = { ""red"", ""green"", ""blue"" };

System.out.println(colors[1]);</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">green</code>
</pre>
<p>You can take this further and print the entire array, like this:</p>
<pre class=""pre__block""><code class=""language-java"">String[] colors = { ""red"", ""green"", ""blue"" };

for (int i = 0; i &lt; colors.length; i++) {
    System.out.println(colors[i]);
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">red
green
blue</code>
</pre>
<p>We simply iterate through all the values between <code>0</code> and the length of the array to get every element in that array.</p>
<h3 class="""">Array Reassignment</h3>
<p>Once you have initialized an array with values, you can modify each individual element pretty easily. Simply <strong>reassign</strong> the element's value like you would any variable:</p>
<pre class=""pre__block""><code class=""language-java"">String[] colors = { ""red"", ""green"", ""blue"" };
colors[1] = ""yellow""; // reassignment

for (int i = 0; i &lt; colors.length; i++) {
    System.out.println(colors[i]);
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">red
yellow
blue</code>
</pre>

<h3 class="""">Sorting Array</h3>
<p>You can easily sort a Java array by calling the <code style="""">sort()</code> method:</p>
<pre class=""pre__block""><code class=""language-java"">String[] colors = { ""red"", ""green"", ""blue"" };
Arrays.sort(colors);

for (int i = 0; i &lt; colors.length; i++) {
    System.out.println(colors[i]);
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">blue
green
red</code>
</pre>
<aside class=""aside__tip"">
<p>    Keep in mind that you might need to import the Arrays class, like this: <code>import java.util.Arrays;</code></p>
</aside>",5,"standard","lesson"
"Enums in Java","java-enums","Enums in Java are a group of constants that you can define. Learn how to define them, get their value, and iterate over them.","LIVE","<p>Enums, short for enumerations in Java are a group of named constants that you can define in an array-like structure. They are useful for when you want to create a bunch of related values.</p>
<h3 class="""">Defining an Enum</h3>
<p>Let's dive straight into it and define an enum using the <code>enum</code> keyword:</p>
<pre class=""pre__block""><code class=""language-java"">enum Fruit {
    APPLE,
    ORANGE,
    BANANA
}</code>
</pre>
<p>This enum we have created is named <code>Fruit</code> and it contains three items in it. Keep in mind that it is convention to capitalize all the names.&nbsp;<span style=""font-size: 1rem;"">Inside a class, it can look like this:</span></p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    enum Fruit {
        APPLE,
        ORANGE,
        BANANA
    }

    public static void main(String[] args) {

    }
}</code>
</pre>

<h3 class="""">Using an Enum value</h3>
<p>Now that we have our enum, we can decide to use it. A common way enums are used are inside a switch statement.&nbsp;<span style=""font-size: 1rem;"">Let's see how that looks:</span></p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    enum Fruit {
        APPLE,
        ORANGE,
        BANANA
    }

    public static void main(String[] args) {
        Fruit fruit = Fruit.APPLE;
        switch(fruit) {
            case APPLE:
                System.out.println(""An apple was found!"");
                break;
            case ORANGE:
                System.out.println(""An orange was found!"");
                break;
            case BANANA:
                System.out.println(""A banana was found!"");
                break;
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">An apple was found!</code>
</pre>
<h3 class="""">Looping through Enums</h3>
<p>Instead of using an enum one at a time, you can loop through them all by using the <code>values()</code> method which returns an array of all the enum values. This then allows you to loop over all of them:</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    enum Fruit {
        APPLE,
        ORANGE,
        BANANA
    }

    public static void main(String[] args) {
        for (Fruit fruit : Fruit.values()) {
            System.out.println(fruit);
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">APPLE
ORANGE
BANANA</code>
</pre>
<p>For the most part, enums are used when you know the value of them will not change and there's a finite number of them, since they are constant. Real world examples of good cases to use enums include the months in a year, a list of US states, time zones, and the planets in our solar system, to name a few.</p>",12,"standard","lesson"
"Classes and Objects in Java","java-classes-and-objects","Java is an object-oriented programming language and because of this, classes and objects are a fundamental feature of the language.","LIVE","<p>Java is an object-oriented programming language. What this means is that basically everything in Java can be thought of as an object. An object is a collection of properties and methods that describe a single entity. A class is a blueprint for creating those objects.</p>
<h3 class="""">Creating a Class</h3>
<p>Creating a class is simple. Simply use the <code>class</code> keyword and then give it a name.</p>
<p>Let's create a <code>Pet</code> class inside <code>Pet.java</code>:</p>
<pre class=""pre__block""><code class=""language-java"">public class Pet {

}</code>
</pre>
<p>That's it, a class is defined. Of course, it is empty, so let's give it some properties to work with:</p>
<pre class=""pre__block""><code class=""language-java"">public class Pet {
    String name;
    int weight;
}</code>
</pre>
<p>Great, now that we have two properties that make up a pet, let's create objects using this class.</p>

<h3 class="""">Creating an Object</h3>
<p>Once we have a class defined, creating an object is easy, just use the <code style="""">new</code> keyword, like this:</p>
<pre class=""pre__block""><code class=""language-java"">Pet pet = new Pet();</code>
</pre>
<p>We now have an object of type <code>Pet</code>. We still haven't actually been able to set the values of <code>name</code> and <code>weight</code> just yet, so let's do that now.</p>
<h3 class="""">Using a Constructor</h3>
<p>A constructor is a special method that literally constructs an object given the parameters you pass in. If all we want to do is set the value of <code style="""">name</code> and <code style="""">weight</code>, this is how the class would look like:</p>
<pre class=""pre__block""><code class=""language-java"">public class Pet {
    String name;
    int weight;

    Pet(String name, int weight) {
        this.name = name;
        this.weight = weight;
    }
}</code>
</pre>
<p>The constructor takes in the parameters needed to build the object, initializes the values it needs to, and then returns an instance of that class which essentially is now a separate object.</p>
<p>Now you can create a new <code>Pet</code> object like this:</p>
<pre class=""pre__block""><code class=""language-java"">Pet pet = new Pet(""Scooby"", 4);</code>
</pre>
<p>Let's throw a method in this class so we can see our objects in action.</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    public static class Pet {
        String name;
        int weight;

        Pet(String name, int weight) {
            this.name = name;
            this.weight = weight;
        }

        void printInfo() {
            System.out.println(""Name: "" + name + "" Weight: "" + weight + "" pounds."");
        }
    }

    public static void main(String[] args) {
        Pet pet = new Pet(""Scooby"", 4);
        pet.printInfo();
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Name: Scooby Weight: 4 pounds.</code>
</pre>
<aside class=""aside__tip"">
<p>    This is all in one file for the sake of example but in practice this should probably be in two files like <code>Pet.java</code> and <code>Main.java</code>.</p>
</aside>

<h3 class="""">Multiple Objects</h3>
<p>Because classes are just blueprints for objects, we can create multiple objects without any interference between each other. Let's create multiple pets to illustrate this:</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    public static class Pet {
        String name;
        int weight;

        Pet(String name, int weight) {
            this.name = name;
            this.weight = weight;
        }

        void printInfo() {
            System.out.println(""Name: "" + name + "" Weight: "" + weight + "" pounds."");
        }
    }

    public static void main(String[] args) {
        Pet scooby = new Pet(""Scooby"", 4);
        scooby.printInfo();

        Pet spark = new Pet(""Spark"", 6);
        spark.printInfo();
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Name: Scooby Weight: 4 pounds.
Name: Spark Weight: 6 pounds.</code>
</pre>",8,"standard","lesson"
"Access Modifiers in Java","java-instances-and-access-modifiers","Creating a new object creates a new instance of that class. Learn about what that means, including the different access modifiers.","LIVE","<p>Creating a new object creates a new instance of that class. Because two different objects are separate instances, things can happen inside each one without affecting the other. We've already seen many cases where instances matter. For example, inside the constructor, like this:</p>
<pre class=""pre__block""><code class=""language-java"">public class Pet {
    String name;
    int weight;

    Pet(String name, int weight) {
        this.name = name;
        this.weight = weight;
    }
}</code>
</pre>
<p>The <code style="""">this</code> keyword refers to the current instance of the class. Sometimes, you will want data or methods to remain inaccessible to other classes. This is where access modifiers come in to play.</p>
<h3 class="""">Access Modifiers</h3>
<p>Access modifiers change how a class, method, or property can be accessed by other classes. For example, we can restrict direct access to <code>name</code> and <code>weight</code> by marking them as private:</p>
<pre class=""pre__block""><code class=""language-java"">public class Pet {
    private String name;
    private int weight;

    Pet(String name, int weight) {
        this.name = name;
        this.weight = weight;
    }
}</code>
</pre>
<p>Of course, these are properties you want accessible in some fashion. This is why getters (and setter) methods exist:</p>
<pre class=""pre__block""><code class=""language-java"">public class Pet {
    private String name;
    private int weight;

    Pet(String name, int weight) {
        this.name = name;
        this.weight = weight;
    }

    public String getName() {
        return name;
    }

    public int getWeight() {
        return weight;
    }
}</code>
</pre>
<p>Which lets you get things like this:</p>
<pre class=""pre__block""><code class=""language-java"">pet.getName();
pet.getWeight();</code>
</pre>
<p>In this particular instance, it doesn't really add much value, but sometimes you want to do some validation or calculations using the property. In that case, you definitely want to restrict direct access of a property and instead make users go through specific methods.</p>

<h4 class="""">Public Access Modifier</h4>
<p>The <code>public</code> access modifier is usable on classes, properties, methods, and constructors. This makes them accessible for all classes:</p>
<pre class=""pre__block""><code class=""language-java"">public class Pet {
    public String name;
    public int weight;

    Pet(String name, int weight) {
        this.name = name;
        this.weight = weight;
    }
}</code>
</pre>
<h4 class="""">Private Access Modifier</h4>
<p>The <code>private</code> access modifier is usable on properties, methods, and constructors. They make the code only accessible within that class:</p>
<pre class=""pre__block""><code class=""language-java"">public class Pet {
    private String name;
    private int weight;

    Pet(String name, int weight) {
        this.name = name;
        this.weight = weight;
    }
}</code>
</pre>
<p>To access these values, the class needs to provide a public method inside that returns that value.</p>

<h4 class="""">Protected Access Modifier</h4>
<p>The <code>protected</code> access modifier is usable on properties, methods, and constructors. They make the code only accessible within that class and any class that extends it:</p>
<pre class=""pre__block""><code class=""language-java"">public class Pet {
    protected String name;
    protected int weight;

    Pet(String name, int weight) {
        this.name = name;
        this.weight = weight;
    }
}

public class Cat extends Pet {
    Cat(String name, int weight) {
        super(name, weight);
    }
}</code>
</pre>
<h3 class="""">Static</h3>
<p>The <code>static</code> makes properties and methods available for use without the need for instances or objects:</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    public static void main(String[] args) {
        hello();
    }

    public static void hello() {
        System.out.println(""Hello"");
    }
}</code>
</pre>

<h3 class="""">Final</h3>
<p>The <code>final</code> keyword makes it so that a defined property cannot be overridden:</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    final static int example = 0;

    public static void main(String[] args) {
        example = 1; // this would fail
    }
}</code>
</pre>",11,"standard","lesson"
"Encapsulation in Java","java-encapsulation","Encapsulation is the principle of wrapping data inside an object to protect it from unwanted accesses or manipulation.","LIVE","<p class=""""><span style=""font-size: 1rem;"">Encapsulation</span><span style=""font-size: 1rem;""> is the principle of wrapping data inside an object to protect it from unwanted accesses or manipulation. The point of encapsulating the data inside an object is to ensure that the data inside is properly read and written to.</span><br></p>
<p>Encapsulation is achieved by setting the data inside a class to <code>private</code>. This makes the fields inaccessible directly from outside the class. Then we define getter and setter methods whose job it is to ensure data is read and written to in a safe and valid way.</p>

<h3 class="""">Getter Methods</h3>
<p>Here is an example showing the usefulness of controlling how data is accessed as well using <strong>getter</strong> methods:</p>
<pre class=""pre__block""><code class=""language-java"">public class Length {
    private int millimeters;

    public Length(int millimeters) {
        this.millimeters = millimeters;
    }

    public int getMillimeters() {
        return millimeters;
    }

    public int getCentimeters() {
        return millimeters / 100;
    }

    public int getMeters() {
        return millimeters / 1000;
    }
}</code>
</pre>
<p>Now instead of having to remember conversions, like this:</p>
<pre class=""pre__block""><code class=""language-java"">Length length = new Length(345964);
int centimeters = length.millimeters / 100;

System.out.println(centimeters);</code>
</pre>
<p>You can just write the conversion method once, and call it anytime you want, completely skipping direct access of <code>millimeters</code>:</p>
<pre class=""pre__block""><code class=""language-java"">Length length = new Length(345964);
int centimeters = length.getCentimeters();

System.out.println(centimeters);</code>
</pre>
<h3 class="""">Setter Methods</h3>
<p>Here is an example of encapsulation using a <strong>setter</strong> method:</p>
<pre class=""pre__block""><code class=""language-java"">public class BankAccount {
    private int balance;

    public int getBalance() {
        return balance;
    }

    public void deposit(int amount) {
        if (amount &lt; 0) {
            // show error
            return;
        }
        this.balance += amount;
    }
}</code>
</pre>
<p>In this example, our class just has a single field, <code>balance</code> that was set to <code>private</code>.&nbsp;<span style=""font-size: 1rem;"">Now, instead of allowing this:</span></p>
<pre class=""pre__block""><code class=""language-java"">BankAccount account = new BankAccount();
int depositAmount = 5;

account.balance += depositAmount;</code>
</pre>
<p>Users of this class must use the internal method to manipulate the <code>balance</code>:</p>
<pre class=""pre__block""><code class=""language-java"">BankAccount account = new BankAccount();
int depositAmount = 5;

account.deposit(depositAmount);</code>
</pre>
<p>Using setter methods prevents negative amount deposits from happening:</p>
<pre class=""pre__block""><code class=""language-java"">BankAccount account = new BankAccount();
int depositAmount = -5;

account += depositAmount;</code>
</pre>
<p>Because we can have additional checks and improved data integrity by forcing all desired changes to use setter methods. This is ultimately the beauty and point of utilizing encapsulation. You can have more control over your data and ensure that only valid operations are performed with it.</p>",10,"standard","lesson"
"Inheritance in Java","java-inheritance","Inheritance is the mechanism in which a class is able to access all of the properties and methods of a parent class.","LIVE","<p>Inheritance is the process in which a class is able to access and utilize the properties, methods, and fields of a parent class. This is useful for when you don't want to define multiple classes that share functionality because you can just have the parent hold that functionality and allow children classes to specialize wherever needed.</p>
<h3 class="""">Inheriting from a Parent Class</h3>
<p>Sticking to our <code>Pet</code> class example, let's define two kinds of pets, <code>Cat</code> and <code>Dog</code>. Given that both of these animals tend to be pets, it makes sense to have them be children of the <code>Pet</code> class.</p>
<p>Declare children to be parents of another class by using the <code>extends</code> keyword:</p>
<pre class=""pre__block""><code class=""language-java"">public static class Cat extends Pet {
    Cat(String name, int weight) {
        super(name, weight);
    }

    void meow() {
        System.out.println(""Meow!"");
    }
}

public static class Dog extends Pet {
    Dog(String name, int weight) {
        super(name, weight);
    }

    void bark() {
        System.out.println(""Bark!"");
    }
}</code>
</pre>
<p>For reference, this is how the parent <code>Pet</code> class looks like:</p>
<pre class=""pre__block""><code class=""language-java"">public static class Pet {
    String name;
    int weight;

    Pet(String name, int weight) {
        this.name = name;
        this.weight = weight;
    }

    void printInfo() {
        System.out.println(""Name: "" + name + "" Weight: "" + weight + "" pounds."");
    }
}</code>
</pre>
<p>Both children classes, <code>Cat</code> and <code>Dog</code>, extend the <code>Pet</code> class. What this means is that now both of them have access to the same properties that <code>Pet</code> has defined, namely <code>name</code>, <code>weight</code>, and <code>printInfo()</code>.</p>
<p>If you were wondering about what <code>super</code> does, that just calls the constructor of the parent class and passes in the necessary parameters up the chain. This ensures that the child class is still a valid type of its parent.</p>

<h3 class="""">Creating Children objects</h3>
<p>Now that we have the parent and children classes defined, we can create objects from them and truly illustrate the usefulness of inheritance in Java.</p>
<p>Let's put it all together and create both a cat and dog.</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    public static class Pet {
        String name;
        int weight;

        Pet(String name, int weight) {
            this.name = name;
            this.weight = weight;
        }

        void printInfo() {
            System.out.println(""Name: "" + name + "" Weight: "" + weight + "" pounds."");
        }
    }

    public static class Cat extends Pet {
        Cat(String name, int weight) {
            super(name, weight);
        }

        void meow() {
            System.out.println(""Meow!"");
        }
    }

    public static class Dog extends Pet {
        Dog(String name, int weight) {
            super(name, weight);
        }

        void bark() {
            System.out.println(""Bark!"");
        }
    }

    public static void main(String[] args) {
        Dog dog = new Dog(""Scooby"", 4);
        dog.bark();
        dog.printInfo();

        Cat cat = new Cat(""Tinkerbell"", 9);
        cat.meow();
        cat.printInfo();
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Bark!
Name: Scooby Weight: 4 pounds.
Meow!
Name: Tinkerbell Weight: 9 pounds.</code>
</pre>
<p>Notice what happened here. Only a dog can bark and only a cat can meow, so it makes sense that only those classes can call those respective methods. But notice how both objects were able to call <code>printInfo()</code>, which uses <code>name</code> and <code>weight</code>? That is, of course, because <code>Dog</code> and <code>Cat</code> are still valid instance of <code>Pet</code> and thus have access to those sames properties just like any <code>Pet</code>.</p>
<p>Using inheritance, we were able to create specialized children classes that inherit functionality from the parent class that they extend from for free. This helps keep logically connected classes linked by their parent which helps structure our overall program much better.</p>",14,"standard","lesson"
"Java Polymorphism - Method Overloading, Method Overriding","java-polymorphism","Polymorphism is the concept that objects can take many forms, particularly when it is extending from a parent class.","LIVE","<p class=""""><span style=""font-size: 1rem;"">Polymorphism is the concept that an object can take the form of many different types. We touched upon polymorphism a little with our previous </span><code>Pet</code><span style=""font-size: 1rem;"">, </span><code>Dog</code><span style=""font-size: 1rem;""> and </span><code>Cat</code><span style=""font-size: 1rem;""> classes. Specifically, how both cats and dogs can use properties and methods from their parent class since they are also pets:</span><br></p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    public static class Pet {
        String name;
        int weight;

        Pet(String name, int weight) {
            this.name = name;
            this.weight = weight;
        }

        void printInfo() {
            System.out.println(""Name: "" + name + "" Weight: "" + weight + "" pounds."");
        }
    }

    public static class Cat extends Pet {
        Cat(String name, int weight) {
            super(name, weight);
        }

        void meow() {
            System.out.println(""Meow!"");
        }
    }

    public static class Dog extends Pet {
        Dog(String name, int weight) {
            super(name, weight);
        }

        void bark() {
            System.out.println(""Bark!"");
        }
    }

    public static void main(String[] args) {
        Dog dog = new Dog(""Scooby"", 4);
        dog.bark();
        dog.printInfo();

        Cat cat = new Cat(""Tinkerbell"", 9);
        cat.meow();
        cat.printInfo();
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Bark!
Name: Scooby Weight: 4 pounds.
Meow!
Name: Tinkerbell Weight: 9 pounds.</code>
</pre>

<h3 class="""">Method Overloading</h3>
<p>Method overloading is when you create multiple methods with the same name but different parameters. This is useful for when you want to have optional parameters.</p>
<p>Here's an example of method overloading:</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    public static void main(String[] args) {
        int squareSideLength = 3;
        int squareArea = getAreaOfRectangle(squareSideLength);

        System.out.println(squareArea);

        int rectangleWidthLength = 5;
        int rectangleHeightLength = 6;
        int rectangleArea = getAreaOfRectangle(rectangleWidthLength, rectangleHeightLength);

        System.out.println(rectangleArea);
    }

    public static int getAreaOfRectangle(int width, int height) {
        return width * height;
    }

    public static int getAreaOfRectangle(int length) {
        return length * length;
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">9
30</code>
</pre>
<p>In this example of method overloading, we have the same method name, <code>getAreaOfRectangle()</code> twice, but depending on which one you use, the method will function slightly different.</p>
<h3 class="""">Method Overriding</h3>
<p>Method overriding is when you define a method with the same name and parameters as one used by the parent class. When you do this, calling that method will result in the child's class method being run and not the parent's.</p>
<p>Let's take a look at how this looks in practice:</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    public static class Pet {
        String name;
        int weight;

        Pet(String name, int weight) {
            this.name = name;
            this.weight = weight;
        }

        void printInfo() {
            System.out.println(""Name: "" + name + "" Weight: "" + weight + "" pounds."");
        }
    }

    public static class Cat extends Pet {
        Cat(String name, int weight) {
            super(name, weight);
        }

        void printInfo() {
            System.out.println(""Cat Name: "" + name + "" Cat Weight: "" + weight + "" pounds."");
        }
    }

    public static void main(String[] args) {
        Pet pet = new Pet(""Scooby"", 4);
        pet.printInfo();

        Cat cat = new Cat(""Tinkerbell"", 9);
        cat.printInfo();
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Name: Scooby Weight: 4 pounds.
Cat Name: Tinkerbell Cat Weight: 9 pounds.</code>
</pre>
<p>We defined <code>printInfo()</code> in both the child and parent class. Since they both were named the same with the same parameters, Java automatically used the children's implementation, which includes a different string at the start. Overriding methods is super useful for when you want to have specialized behavior in a child object when compared to the more general parent object.</p>",15,"standard","lesson"
"Abstract Classes in Java","java-abstract-classes","Abstract classes are classes in Java that contain abstract methods and let children classes provide the implementation.","LIVE","<p>Abstract classes are classes in Java that contain abstract methods which let children classes provide the implementation. Defining abstract classes is useful for when you want different implementation for the same method.</p>
<h3 class="""">Creating an Abstract Class</h3>
<p>Let's say we are trying to get from point A to point B. This is represented by our abstract class <code>Transportation.java</code>:</p>
<pre class=""pre__block""><code class=""language-java"">public abstract class Transportation {
    public abstract void travel();
}</code>
</pre>
<p>Our new <code>Transportation</code> class is abstract which means you cannot actually make an object directly from it.</p>

<h3 class="""">Extending an Abstract Class</h3>
<p>While you can't make objects directly from an abstract class, you can make objects from the classes that extend it.&nbsp;<span style=""font-size: 1rem;"">Let's define two different modes of transportation, by extending that abstract class:</span></p>
<pre class=""pre__block""><code class=""language-java"">public class Train extends Transportation {
    public void travel() {
        System.out.println(""Choo choo!"");
    }
}

public class Car extends Transportation {
    public void travel() {
        System.out.println(""Beep beep!"");
    }
}</code>
</pre>
<p>Our classes <code>Train</code> and <code>Car</code> extend our abstract class <code>Transportation</code>, which forced both of them to provide an implementation for the <code>travel()</code> abstract method.</p>
<p>Now we can use our new classes, like this:</p>
<pre class=""pre__block""><code class=""language-java"">public class Main {

    public static void main(String[] args) {
        Train train = new Train();
        train.travel();

        Car car = new Car();
        car.travel();
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Choo choo!
Beep beep!</code>
</pre>
<p>This right here is the power of abstract classes. Their job is just to define a contract, and any class that extends it agrees to that contract. In this case, the contract is that if you want to be a mode of transportation, you must be able to travel. Both <code>Train</code> and <code>Car</code> implemented that method and thus became valid types of transportation.</p>",13,"standard","lesson"
"Interfaces in Java","java-interfaces","Java interfaces are templates for classes to achieve abstraction and polymorphism similar to abstract classes.","LIVE","<p>An interface is a template for another class to follow. It defines strictly all of the abstract methods that any class that wants to implement must include. Interfaces are similar to abstract classes except that every method in an interface must be abstract, it does not contain a constructor, and it does not contain instance fields.</p>
<h3 class="""">Declaring Instances</h3>
<p>To declare a new instance, use the <code>instance</code> keyword:</p>
<pre class=""pre__block""><code class=""language-java"">public interface Phone {
    public void call();
    public void text();
}</code>
</pre>
<p>Let's say we want to represent phones in our code. Phones can both call and text, but each phone does it slightly differently. This interface defines the methods that all phones need to do, so any class that implements this interface, will need to include their version of it.</p>

<h3 class="""">Implementing Interfaces</h3>
<p>Now let's create classes that implement our <code>Phone</code> interface using the <code>implements</code> keyword:</p>
<pre class=""pre__block""><code class=""language-java"">public class iPhone implements Phone {

   public void call() {
      System.out.println(""iPhone call"");
   }

   public void text() {
      System.out.println(""iPhone Text"");
   }
}

public class Pixel implements Phone {

   public void call() {
      System.out.println(""Pixel call"");
   }

   public void text() {
      System.out.println(""Pixel Text"");
   }
}</code>
</pre>
<p>Now we can create actual <code>Phone</code> objects and invoke their interface methods:</p>
<pre class=""pre__block""><code class=""language-java"">Phone iPhone = new iPhone();
iPhone.call();
iPhone.text();

Phone pixel = new Pixel();
pixel.call();
pixel.text();</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">iPhone call
iPhone Text
Pixel call
Pixel Text</code>
</pre>
<aside class=""aside__tip"">
<p>    Keep in mind that a single class can implement multiple interfaces!</p>
</aside>
<p>And just like that, we can define multiple instances of <code>Phone</code> and be guaranteed that each one will have the methods outlined in the interface.</p>",12,"standard","lesson"
"Working with Packages in Java","java-packages","Packages are the namespace conventions that Java follows to avoid naming collisions and organize files.","LIVE","<p>Java packages are used to organize our code and to avoid naming conflicts. Packages strongly resemble folders like the ones found in file directory. Every package has a unique name so that class names can still be duplicated and still be used properly if you import it from the right package. There are two kinds of packages, the built-in ones and the ones you can create yourself.</p>

<h3 class="""">Creating a Package</h3>
<p>Create a package using the <code>package</code> keyword, and then the name of the package. Ensure that this is the top of the file.</p>
<pre class=""pre__block""><code class=""language-java"">package devices;

public class Phone {
    private String name;

    public Phone(String name) {
        this.name = name;
    }

    public int getName() {
        return name;
    }
}</code>
</pre>
<p>This class now lives inside the <code>devices</code> package.</p>

<h3 class="""">Importing Package</h3>
<p>You can import a class of your choosing by using the <code>import</code> keyword and specifying the exact package and class name:</p>
<pre class=""pre__block""><code class=""language-java"">import java.lang.Math;</code>
</pre>
<p>That, for example, imports the <code>Math</code> class only. This makes everything from <code>Math</code> available in whatever class you imported it into.</p>
<p>If you find yourself using multiple classes from the same package, you can just import an entire package to get all the classes inside available:</p>
<pre class=""pre__block""><code class=""language-java"">import java.lang.*;</code>
</pre>
<p>This imports all the classes inside the <code>java.lang</code> package.</p>",9,"standard","lesson"
"Working with Java Collections","java-collections","The Collections framework in Java defines numerous different data structures in which you can store, group, and retrieve objects.","LIVE","<p>The collections framework in Java defines numerous different data structures in which you can store, group, and retrieve objects. Located inside the <code style="""">java.util</code> package, the collections framework contains numerous different classes and interfaces including <code style="""">ArrayList</code>, <code style="""">LinkedList</code>, <code style="""">Queue</code>, <code style="""">HashSet</code>, <code style="""">HashMap</code>, amongst others.</p>
<p>All of these support adding, removing, getting the total size, clearing, checking if an item exists, whether or not it is empty, and many others. In this lesson, we'll dive into some of these collections and learn how to do the basic operations in each.</p>
<h3 class="""">ArrayList</h3>
<p>An <code>ArrayList</code> is similar to a normal Java array except that the size here is dynamically and automatically adjusted as the size of the collection changes. Remember that normal arrays have a fixed size that cannot change. With <code>ArrayList</code>, you don't need to worry about the size. Import the class you're good to go:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.ArrayList;</code>
</pre>
<p>Let's look at how to use an <code>ArrayList</code>.</p>

<h4 class="""">Creating an ArrayList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList&lt;String&gt; countries = new ArrayList&lt;String&gt;();
    }
}</code>
</pre>
<p>Put the type of objects you want to collect inside the diamond operator like shown above and you're good to go.</p>
<h4 class="""">Adding items to an ArrayList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList&lt;String&gt; countries = new ArrayList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        System.out.println(countries);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">[United States of America, United Kingdom, Canada]</code>
</pre>

<h4 class="""">Accessing an Item in an ArrayList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList&lt;String&gt; countries = new ArrayList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        System.out.println(countries.get(1));
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">United Kingdom</code>
</pre>
<h4 class="""">Changing an Item in an ArrayList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList&lt;String&gt; countries = new ArrayList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");
        countries.set(1, ""Australia"");
        System.out.println(countries.get(1));
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Australia</code>
</pre>

<h4 class="""">Removing an Item in an ArrayList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList&lt;String&gt; countries = new ArrayList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        countries.remove(1);
        System.out.println(countries);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">[United States of America, Canada]</code><b>
</b></pre>
<h4 class="""">Get Size of an ArrayList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList&lt;String&gt; countries = new ArrayList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        System.out.println(countries.size());
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">3</code>
</pre>

<h4 class="""">Check if Item exists in ArrayList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList&lt;String&gt; countries = new ArrayList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        boolean contains = countries.contains(""Canada"");

        System.out.println(contains);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">true</code>
</pre>
<h4 class="""">Iterate over an ArrayList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList&lt;String&gt; countries = new ArrayList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        for (int i = 0; i &lt; countries.size(); i++) {
          System.out.println(countries.get(i));
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">United States of America
United Kingdom
Canada</code>
</pre>

<h3 class="""">LinkedList</h3>
<p>A <code>LinkedList</code> is similar to an <code>ArrayList</code> except the way the data is stored in memory. Where an <code>ArrayList</code> uses a normal array to store elements, a <code>LinkedList</code> uses a doubly linked list to store elements. What this means is that each item knows where the next and previous items are, instead of in an array where you simply increment or decrement the index. </p><p>In general, a <code>LinkedList</code> is better when you're manipulating data, but an <code>ArrayList</code> is superior when it comes to simply storing and accessing that data.&nbsp;<span style=""font-size: 1rem;"">To start using a </span><code>LinkedList</code><span style=""font-size: 1rem;"">, import the class you're good to go:</span></p>
<pre class=""pre__block""><code class=""language-java"">import java.util.LinkedList;</code>
</pre>
<h4 class="""">Creating a LinkedList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList&lt;String&gt; countries = new LinkedList&lt;String&gt;();
    }
}</code>
</pre>

<h4 class="""">Adding items to LinkedList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList&lt;String&gt; countries = new LinkedList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        System.out.println(countries);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">[United States of America, United Kingdom, Canada]</code>
</pre>
<h4 class="""">Removing an Item in an LinkedList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList&lt;String&gt; countries = new LinkedList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        countries.remove(1);

        System.out.println(countries);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">[United States of America, Canada]</code>
</pre>

<h4 class="""">Get Size of LinkedList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList&lt;String&gt; countries = new LinkedList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        System.out.println(countries.size());
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">3</code>
</pre>
<h4 class="""">Check if Item exists in LinkedList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList&lt;String&gt; countries = new LinkedList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        boolean contains = countries.contains(""Canada"");

        System.out.println(contains);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">true</code>
</pre>

<h4 class="""">Iterate over an LinkedList</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList&lt;String&gt; countries = new LinkedList&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        for (int i = 0; i &lt; countries.size(); i++) {
          System.out.println(countries.get(i));
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">United States of America
United Kingdom
Canada</code>
</pre>
<h3 class="""">HashSet</h3>
<p>A Java <code>HashSet</code> is a collection that uses a hash table for storage. Elements are stored by hashing and as a result only supports unique elements only. Unlike most collections, a <code>HashSet</code> does not keep track of order. As a result, using a <code>HashSet</code> is best when you simply want to search data.</p>
<p>Import the class you're good to go:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashSet;</code>
</pre>

<h4 class="""">Creating a HashSet</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet&lt;String&gt; countries = new HashSet&lt;String&gt;();
    }
}</code>
</pre>
<h4 class="""">Adding items to a HashSet</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet&lt;String&gt; countries = new HashSet&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        System.out.println(countries);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">[Canada, United States of America, United Kingdom]</code>
</pre>
<aside class=""aside__tip"">
<p>    Notice the order is different here? Items are inserted by their hashcode, not their order.</p>
</aside>

<h4 class="""">Removing an Item in a HashSet</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet&lt;String&gt; countries = new HashSet&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        countries.remove(""United Kingdom"");

        System.out.println(countries);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">[Canada, United States of America]</code>
</pre>
<h4 class="""">Get Size of HashSet</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet&lt;String&gt; countries = new HashSet&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        System.out.println(countries.size());
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">3</code>
</pre>

<h4 class="""">Check if Item exists in HashSet</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet&lt;String&gt; countries = new HashSet&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        boolean contains = countries.contains(""Canada"");

        System.out.println(contains);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">true</code>
</pre>
<h4 class="""">Iterate over a HashSet</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashSet;
import java.util.Iterator;

public class Main {
    public static void main(String[] args) {
        HashSet&lt;String&gt; countries = new HashSet&lt;String&gt;();
        countries.add(""United States of America"");
        countries.add(""United Kingdom"");
        countries.add(""Canada"");

        Iterator&lt;String&gt; iterator = countries.iterator();
        while(iterator.hasNext()) {
            System.out.println(iterator.next());
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Canada
United States of America
United Kingdom</code>
</pre>
<aside class=""aside__tip"">
<p>    All collections support iterators. We need to use an iterator when we use a <code>HashSet</code> to iterate since it doesn't support indexes.</p>
</aside>

<h3 class="""">HashMap</h3>
<p>A <code>HashMap</code> works fundamentally different than the other collections we've seen here. A <code>HashMap</code> uses key-value pairs to insert and access items. All keys must be unique and this, like a <code>HashSet</code> does not maintain order. HashMaps are great when you know the key of the item you want to access.</p>
<p>Import the class you're good to go:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashMap;</code>
</pre>
<h4 class="""">Creating a HashMap</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap&lt;String, Integer&gt; population = new HashMap&lt;String, Integer&gt;();
    }
}</code>
</pre>

<h4 class="""">Adding items to a HashMap</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap&lt;String, Integer&gt; population = new HashMap&lt;String, Integer&gt;();
        population.put(""United States of America"", 327200000);
        population.put(""United Kingdom"", 66440000);
        population.put(""Canada"", 37590000);

        System.out.println(population);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">{Canada=37590000, United States of America=327200000, United Kingdom=66440000}</code>
</pre>
<aside class=""aside__tip"">
<p>    Note that like mentioned before, order is not preserved in a <code>HashMap</code>.</p>
</aside>
<h4 class="""">Accessing an Item in a HashMap</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap&lt;String, Integer&gt; population = new HashMap&lt;String, Integer&gt;();
        population.put(""United States of America"", 327200000);
        population.put(""United Kingdom"", 66440000);
        population.put(""Canada"", 37590000);

        System.out.println(population.get(""United Kingdom""));
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">66440000</code>
</pre>

<h4 class="""">Changing an Item in a HashMap</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap&lt;String, Integer&gt; population = new HashMap&lt;String, Integer&gt;();
        population.put(""United States of America"", 327200000);
        population.put(""United Kingdom"", 66440000);
        population.put(""Canada"", 37590000);

        population.replace(""United States of America"", 100000000); // uh oh

        System.out.println(population.get(""United States of America""));
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">100000000</code>
</pre>
<h4 class="""">Removing an Item in a HashMap</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap&lt;String, Integer&gt; population = new HashMap&lt;String, Integer&gt;();
        population.put(""United States of America"", 327200000);
        population.put(""United Kingdom"", 66440000);
        population.put(""Canada"", 37590000);

        population.remove(""United States of America"");

        System.out.println(population);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">{Canada=37590000, United Kingdom=66440000}</code>
</pre>

<h4 class="""">Get Size of a HashMap</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap&lt;String, Integer&gt; population = new HashMap&lt;String, Integer&gt;();
        population.put(""United States of America"", 327200000);
        population.put(""United Kingdom"", 66440000);
        population.put(""Canada"", 37590000);

        System.out.println(population.size());
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">3</code>
</pre>
<h4 class="""">Check if Item exists in HashMap</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap&lt;String, Integer&gt; population = new HashMap&lt;String, Integer&gt;();
        population.put(""United States of America"", 327200000);
        population.put(""United Kingdom"", 66440000);
        population.put(""Canada"", 37590000);

        boolean contains = population.containsKey(""Canada"");

        System.out.println(contains);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">true</code>
</pre>

<h4 class="""">Iterate over a HashMap</h4>
<pre class=""pre__block""><code class=""language-java"">import java.util.Map;
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap&lt;String, Integer&gt; population = new HashMap&lt;String, Integer&gt;();
        population.put(""United States of America"", 327200000);
        population.put(""United Kingdom"", 66440000);
        population.put(""Canada"", 37590000);

        for (Map.Entry&lt;String, Integer&gt; country : population.entrySet()) {
            System.out.println(""Name: "" + country.getKey() + "", Population: "" + country.getValue());
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Name: Canada, Population: 37590000
Name: United States of America, Population: 327200000
Name: United Kingdom, Population: 66440000</code>
</pre>
<p>Alternatively, you can iterate over either just the keys or just the values:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.Map;
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap&lt;String, Integer&gt; population = new HashMap&lt;String, Integer&gt;();
        population.put(""United States of America"", 327200000);
        population.put(""United Kingdom"", 66440000);
        population.put(""Canada"", 37590000);

        // just keys
        for (String name : population.keySet()) {
            System.out.println(name);
        }

        // just values
        for (int pop : population.values()) {
            System.out.println(pop);
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Canada
United States of America
United Kingdom
37590000
327200000
66440000</code>
</pre>",17,"standard","lesson"
"Working with Date, Time in Java","java-date-work-with-moments-in-time","Learn how to express dates and moments in time using Java's built-in date and time functions and variables.","LIVE","<p>Java provides a useful and versatile <code>Date</code> class in its <code>java.time</code> package. This class allows us to represent moments in time and dates, and manipulate them however we want with just a few lines of code.</p>

<h3 class="""">Creating a Date</h3>
<p>Creating a date is pretty easy. Simply create a <code>Date</code> object and print it out:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Date now = new Date();
        System.out.println(now.toString());
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Sun Dec 15 00:00:00 UTC 2019</code>
</pre>

<h3 class="""">Date Formatting</h3>
<p>You can format a date object using the <code>SimpleDateFormat</code> class and calling its <code>format()</code> method:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.Date;
import java.text.SimpleDateFormat;

public class Main {
    public static void main(String[] args) {
        Date now = new Date();
        SimpleDateFormat format =
 new SimpleDateFormat (""E yyyy-MM-dd 'at' hh:mm:ss a zzz"");

        System.out.println(format.format(now));
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Sun 2019-12-15 at 00:00:00 AM UTC</code>
</pre>
<p>If you're curious about what those characters do and if there are any others, here are all the characters that you can use when formatting your dates:</p>
<ul>
<li><code>G</code>: Era (AD/BC)</li>
<li><code>y</code>: Year in four digits (2020)</li>
<li><code>M</code>: Month (June)</li>
<li><code>d</code>: Day in month (17)</li>
<li><code>h</code>: Hour from 1-12</li>
<li><code>H</code>: Hour from 0-23</li>
<li><code>m</code>: Minute</li>
<li><code>s</code>: Second</li>
<li><code>S</code>: Millisecond</li>
<li><code>E</code>: Day in week (Friday)</li>
<li><code>D</code>: Day in year (100)</li>
<li><code>F</code>: Day of week in month (2nd Friday in June)</li>
<li><code>w</code>: Week in year (23)</li>
<li><code>W</code>: Week in month (3)</li>
<li><code>a</code>: AM/PM</li>
<li><code>k</code>: Hour in day from 1-24</li>
<li><code>K</code>: Hour from 0-11</li>
<li><code>Z</code>: Timezone</li>
</ul>
<h3 class="""">Unix Time</h3>
<p>Unix time is a concept in computer science that refers to the number of milliseconds that have elapsed since the arbitrarily decided midnight on January 1st, 1970.&nbsp;<span style=""font-size: 1rem;"">Here's how to get that value in Java:</span></p>
<pre class=""pre__block""><code class=""language-java"">import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Date now = new Date();
        System.out.println(now.getTime());
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">1576146483561</code>
</pre>

<h3 class="""">Parsing Strings into Dates</h3>
<p>When you have a string that represents a date, you can try and parse it into one:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Main {
    public static void main(String[] args) {
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"");
        String input = ""1990-01-01"";

        try {
            Date parsed = format.parse(input);
            System.out.println(parsed.toString());
        } catch (ParseException e) {
            // error parsing
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Mon Jan 01 00:00:00 UTC 1990</code>
</pre>",19,"standard","lesson"
"Working With File System and IO in Java","java-file-system-and-io","Learn how to work with the file system in Java including how to open, read, write, and close a file.","LIVE","<p>Java offers packages that make working with the file system as easy and painless as possible. These packages enable you to access, manipulate, open, read, write, append, and close files and folders.</p>

<h3 class="""">Opening a File</h3>
<p>To open a file, you will need to utilize the <code>File</code> class and specify the name of the file to the constructor. Also, don't forget to import the package:</p>
<pre class=""pre__block""><code class=""language-java"">import java.io.File;

public class HelloWorld {<br>
    public static void main(String[] args) {
        File file = new File(""myfile.txt"");
    }
}</code>
</pre>
<p>For the purposes of this tutorial, let's assume the contents of <code>myfile.txt</code> looks like this:</p>
<pre class=""pre__block""><code class=""language-bash"">Welcome
to
stacktips.com!</code>
</pre>
<p>After this, you are ready to use your new <code>File</code> object to do numerous different operations.</p>

<h3 class="""">Reading a File</h3>
<p>Now that you have opened a file, you can now read from it. The most common way you'll want to read a file, especially a text file, is line by line. We will need to import the <code style="""">Scanner</code> class that specializes in read text files. This how you do that in Java:</p>
<pre class=""pre__block""><code class=""language-java"">import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class HelloWorld {<br>
    public static void main(String[] args) {
        try {
            File file = new File(""myfile.txt"");
            Scanner reader = new Scanner(file);

            while (reader.hasNextLine()) {
                String line = reader.nextLine();
                System.out.println(line);
            }

            reader.close();
        } catch (FileNotFoundException exception) {
            exception.printStackTrace();
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Welcome
to
stacktips.com!</code>
</pre>
<p>Our reader needs a <code>File</code> instance to initialize itself, so we passed it our previously defined one. Then using a while loop, we keep checking if the text file has another line left, if so, we read it and print it. After that is over, we close our reader. All of this needs to be wrapped in a <code>try-catch</code> block for safety.</p>
<h3 class="""">Creating a File</h3>
<p>You can create a file easily in Java using the <code>createNewFile()</code> method. It will return to you a boolean value indicating whether or not the creation attempt was successful.</p>
<pre class=""pre__block""><code class=""language-java"">import java.io.File;
import java.io.IOException;

public class HelloWorld {<br>
    public static void main(String[] args) {
        try {
            File file = new File(""myfile.txt"");
            if (file.createNewFile()) {
                // file created
            } else {
                // file already exists
            }
        } catch (IOException exception) {
            exception.printStackTrace();
        }
    }
}</code>
</pre>
<p>You can also create a new file in an entirely different directory by specifying the full path inside your <code>File</code> object, like this if you're on windows.</p>
<pre class=""pre__block""><code class=""language-java"">import java.io.File;
import java.io.IOException;

public class HelloWorld {<br>
    public static void main(String[] args) {
        try {
            File file = new File(""C:\Users\myfile.txt"");
            if (file.createNewFile()) {
                // file created
            } else {
                // file already exists
            }
        } catch (IOException exception) {
            exception.printStackTrace();
        }
    }
}</code>
</pre>

<h3 class="""">Writing to a File</h3>
<p>To write to file, we'll need to use the <code style="""">FileWriter</code> class.</p>
<pre class=""pre__block""><code class=""language-java"">import java.io.FileWriter;
import java.io.IOException;

public class HelloWorld {<br>
    public static void main(String[] args) {
        try {
            File writer = new FileWriter(""myfile.txt"");
            writer.write(""This is new content!"");
            writer.close();
        } catch (IOException exception) {
            exception.printStackTrace();
        }
    }
}</code>
</pre>
<aside class=""aside__tip"">
<p>    Keep in mind that this will write a new file entirely!</p>
</aside>
<h3 class="""">Appending to a File</h3>
<p>To append to a file, it's almost identical to when writing to a new file, except we pass an extra parameter to the <code style="""">FileWriter</code> constructor:</p>
<pre class=""pre__block""><code class=""language-java"">import java.io.FileWriter;
import java.io.IOException;

public class HelloWorld {<br>
    public static void main(String[] args) {
        try {
            File writer = new FileWriter(""myfile.txt"", true);
            writer.write(""This is new content being appended!"");
            writer.close();
        } catch (IOException exception) {
            exception.printStackTrace();
        }
    }
}</code>
</pre>

<h3 class="""">Renaming a File</h3>
<p>To rename a file, just call the <code style="""">renameTo</code> method using two <code style="""">File</code> instances:</p>
<pre class=""pre__block""><code class=""language-java"">import java.io.File;

public class HelloWorld {<br>
    public static void main(String[] args) {
        File from = new File(""from.txt"");
        File to = new File(""to.txt"");

        boolean success = from.renameTo(to);
    }
}</code>
</pre>
<p>It's as simple as that!</p>
<h3 class="""">Deleting a File</h3>
<p>To delete a file, use the <code style="""">delete()</code> method. It will return back a boolean value indicating whether or not the deletion attempt was successful.</p>
<pre class=""pre__block""><code class=""language-java"">import java.io.File;

public class Main {

    public static void main(String[] args) {
        File file = new File(""myfile.txt"");
        if (file.delete()) {
            // deleted successfully
        } else {
            // failure to delete
        }
    }
}</code>
</pre>

<h3 class="""">Checking if a File exists</h3>
<p>Before performing a file operation, you can check if it exists using the <code style="""">exists()</code> method which returns a boolean value indicating whether or not the file exists.</p>
<pre class=""pre__block""><code class=""language-java"">import java.io.File;

public class HelloWorld {<br>
    public static void main(String[] args) {
        File file = new File(""myfile.txt"");
        boolean exists = file.exists();
    }
}</code>
</pre>",18,"standard","lesson"
"Regular Expressions in Java","java-regular-expressions","Learn how to use regular expressions search patterns to match text and do advanced find and replace operations.","LIVE","<p>Regular expressions in Java are a special sequence of characters used to define a search pattern or manipulate strings. Regular expressions are extremely powerful and are used in a wide variety of applications like searching and replacing, finding numerous occurrences of a string, and for validation. </p><p>Java offers us the <code>java.util.regex</code> package just for regular expressions.</p>
<h3 class="""">Matching a Single Character</h3>
<p>You can match a single character in a bigger string. To do so, we'll need to use the <code style="""">Matcher</code> and <code style="""">Pattern</code> classes:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HelloWorld {<br>
    public static void main(String[] args) {
        String line = ""I pledge allegiance to the Flag of the United States of America."";
        String pattern = ""F"";

        Pattern regex = Pattern.compile(pattern);
        Matcher match = regex.matcher(line);

        if (match.find()) {
            System.out.println(match.group(0));
        } else {
            // no matches found
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">F</code>
</pre>
<p>Our regular pattern was looking for any instance of the character <code>F</code>. It found a match in the word <code>Flag</code>. Calling <code>match.group</code> returned the first instance (and only instance).</p>

<h3 class="""">Using Meta Characters</h3>
<p>With regular expressions, we aren't limited simply to plain text for our search patterns. We can use <strong>meta character</strong> to enhance our patterns.</p>
<p>Let's use a meta character to match a more complex string:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HelloWorld {<br>
    public static void main(String[] args) {
        String line = ""I pledge allegiance to the Flag of the United States of America."";
        String pattern = ""St.tes"";

        Pattern regex = Pattern.compile(pattern);
        Matcher match = regex.matcher(line);

        if (match.find()) {
            System.out.println(match.group(0));
        } else {
            // no matches found
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">States</code>
</pre>
<p>In this case, we are searching for any string that starts with <code>St</code>, ends with <code>tes</code>, with any character in the middle. In this case, the <code>.</code> matches any character. Of course, the string <code>States</code> fits the bill.</p>
<p>Here are all the meta characters that you can use:</p>
<ul>
<li><code>.</code>: Matches any character</li>
<li><code>\d</code>: Matches any digit</li>
<li><code>\D</code>: Matches and non-digit</li>
<li><code>\s</code>: Matches any whitespace character</li>
<li><code>\S</code>: Matches any non-whitespace character</li>
<li><code>\w</code>: Matches any alpha character</li>
<li><code>\W</code>: Matches any non-alpha character</li>
<li><code>\b</code>: Matches a word boundary</li>
<li><code>\B</code>: Matches a non word boundary</li>
</ul>
<h3 class="""">Replacing the first occurrence</h3>
<p>You can use regular expressions to replace the first occurrence in a string:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HelloWorld {<br>
    public static void main(String[] args) {
        String line = ""I pledge allegiance to the Flag of the United States of America."";
        String pattern = ""United States of America"";
        String replace = ""Canada"";

        Pattern regex = Pattern.compile(pattern);
        Matcher match = regex.matcher(line);
        line = match.replaceFirst(replace);

        System.out.println(line);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">I pledge allegiance to the Flag of the Canada.</code>
</pre>

<h2 id=""replacing-all-occurrences"">Replacing all occurrences</h2>
<p>You can use regular expressions to <strong>replace all occurrence</strong> in a string:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HelloWorld {<br>
    public static void main(String[] args) {
        String line = ""I pledge allegiance to the Flag of the United States of America."";
        String pattern = ""a"";
        String replace = ""X"";

        Pattern regex = Pattern.compile(pattern);
        Matcher match = regex.matcher(line);
        line = match.replaceAll(replace);

        System.out.println(line);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">I pledge XllegiXnce to the FlXg of the United StXtes of AmericX.</code>
</pre>
<h3 class="""">Finding all occurrences</h3>
<p>You can find all occurrences of a string, and the index in which they appear:</p>
<pre class=""pre__block""><code class=""language-java"">import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HelloWorld {<br>
    public static void main(String[] args) {
        String line = ""I pledge allegiance to the Flag of the United States of America."";
        String pattern = ""of"";

        Pattern regex = Pattern.compile(pattern);
        Matcher match = regex.matcher(line);

        while (match.find()) {
            System.out.println(""Match found ("" + match.group() + "") starting at index "" +
match.start() + "" and ending at index "" + match.end());
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Match found (of) starting at index 32 and ending at index 34
Match found (of) starting at index 53 and ending at index 55</code>
</pre>
<p>And just like that, we were able to get the starting and ending index of every occurrence of that search pattern in our search string.</p>",20,"standard","lesson"
"Exceptions Handling in Java","java-exceptions","Learn how to gracefully handle and recover from critical exceptions in Java when they arise in your code.","LIVE","<p>Exceptions are interruptions in the normal flow of program thanks to an error and other exceptional issue. If you don't handle it properly, it can cause your entire program to terminate and output an error.</p>
<p>Examples of when exceptions can occur:</p>
<ul>
<li>when a divide by zero operation was attempted</li>
<li>a network connection being interrupted</li>
<li>a user entering incorrect data</li>
</ul>
<p>In this lesson, we'll learn how to safely and gracefully handle an exception so that your program can continue running properly.</p>

<h3 class="""">Try Catch Block</h3>
<p>Exceptions in Java are handled using the <code>try-catch</code> block. The <code>try</code> block is where the code that could throw an exception is run, whereas the <code>catch</code> block is the code that you want to run if an exception is indeed thrown.</p>
<p>This is the format for catching exceptions:</p>
<pre class=""pre__block""><code class=""language-java"">try {
    // code to try
} catch(Exception e) {
    // code to handle exception
}</code>
</pre>
<p>Now let's look at a basic example:</p>
<pre class=""pre__block""><code class=""language-java"">public class HelloWorld {

    public static void main(String[] args) {
        try {
            int test = 1 / 0;
        } catch(ArithmeticException e) {
            System.out.println(e);
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">java.lang.ArithmeticException: / by zero</code>
</pre>

<h3 class="""">Finally Block</h3>
<p>When you want to run code no matter if an exception was thrown or not, you can use the <code>finally</code> block:</p>
<pre class=""pre__block"">	<code class=""language-java"">public class Main {

    public static void main(String[] args) {
        try {
            int test = 1 / 0;
        } catch(ArithmeticException e) {
            System.out.println(""An ArithmeticException was thrown!"");
        } finally {
            System.out.println(""Moving on!"");
        }
    }
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-bash"">An ArithmeticException was thrown!
Moving on!</code>
</pre>
<h3 class="""">Multiple Exceptions</h3>
<p><b>You can handle multiple exceptions by chaining the <code>catch</code> blocks:</b></p>
<pre class=""pre__block""><code class=""language-java"">public class HelloWorld {

    public static void main(String[] args) {
        try {
            String str = null;
            str.length();
        } catch(ArithmeticException e) {
            System.out.println(""An ArithmeticException was thrown!"");
        } catch(NullPointerException e) {
            System.out.println(""A NullPointerException was thrown!"");
        } finally {
            System.out.println(""Moving on!"");
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">A NullPointerException was thrown!
Moving on!</code>
</pre>
<p>In the above code, we have defined multiple <code>catch</code> blocks and the correct one was ran when that exception was thrown.</p>

<h3 class="""">Throwing an Exception</h3>
<p>You can throw an exception by using the <code style="""">throw</code> keyword:</p>
<pre class=""pre__block""><code class=""language-java"">public class HelloWorld {

    public static void main(String[] args) {
        try {
            throw new NullPointerException(""NULL"");
        } catch(NullPointerException e) {
            System.out.println(""A NullPointerException was thrown!"");
        } finally {
            System.out.println(""Moving on!"");
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">A NullPointerException was thrown!
Moving on!</code>
</pre>
<p>We can throw our own exceptions! Now if you're wondering why this is useful, well, you can use exceptions to ensure that things in your program are progressing correctly, like this:</p>
<pre class=""pre__block""><code class=""language-java"">public class HelloWorld {

    static void checkMoney(int money) {
        if (money &lt; 200) {
            throw new ArithmeticException(""You must have at least $200."");
        } else {
            System.out.println(""You have enough money!"");
        }
    }

    public static void main(String[] args) {
        int money = 100;

        checkMoney(money);
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">Exception in thread ""main"" java.lang.ArithmeticException: You must have at least $200.
    at Main.checkMoney(Main.java:5)
    at Main.main(Main.java:14)</code>
</pre>
<p>Now that the method <code>checkMoney</code> can throw an exception of its own, you can choose to handle it like any other risky piece of code:</p>
<pre class=""pre__block""><code class=""language-java"">public class HelloWorld {<br>
    static void checkMoney(int money) {
        if (money &lt; 200) {
            throw new ArithmeticException(""You must have at least $200."");
        } else {
            System.out.println(""You have enough money!"");
        }
    }

    public static void main(String[] args) {
        int money = 100;

        try {
            checkMoney(money);
        } catch(ArithmeticException e) {
            System.out.println(""You must have at least $200."");
        }
    }
}</code>
</pre>
<pre class=""pre__block""><code class=""language-bash"">You must have at least $200.</code>
</pre>
<p>Not only is that a much cleaner output, but you can fully control it entirely, and even run more code if needed.</p>",16,"standard","lesson"
"Java-Conclusion and Wrap Up","java-conclusion-and-wrap-up","Congratulations on finishing this class on Java. This lesson is the last lesson of the class on Java and serves as the conclusion of the class.","DRAFT","
<p><strong>Congratulations on finishing this class on Java!</strong></p>
<p>Java is an extremely flexible and popular programming language, and with the skills and techniques learned in this class, you are ready to write some really great programs.</p>
<p>If you learned something, definitely feel free to share this with anybody you think could also benefit from reading this.</p>
<p>Thank you for reading!</p>
<figure>
<img alt=""You're awesome, and you should feel awesome."" height=""225"" loading=""lazy"" src=""https://sabe.io/classes/java/conclusion/celebration.gif"" width=""395""/>
<figcaption>You're awesome, and you should feel awesome.</figcaption>
</figure>



",0,"standard","lesson"
"JavaScript-Introduction to JavaScript","javascript-introduction-to-javascript","This lesson is the start of the Javascript class. Get setup and ready to start writing code for the web!","DRAFT","

<p>The modern web today is dynamic, vibrant, and offers many rich experiences. A lot of that is thanks to <strong>JavaScript</strong>.</p>
<p>JavaScript is an easy-to-learn scripting language that allows you to make your websites more interactive, including changing the content on your page, creating cookies, validating forms, adding custom effects, reacting to user actions, and much more.</p>
<p>JavaScript is used in almost every website you browse and helps bring your pages to life.</p>
<p>In this <strong>JavaScript</strong> class, we will dive into all of these to help you understand a major component that makes the web tick the way it does. We will cover the basics of JavaScript, how to use it, and how to make it work for you.</p>
<h2 id=""prerequisites"">Prerequisites</h2>
<ol>
<li>Intermediate knowledge of HTML, which you can obtain from this class on HTML.</li>
<li>Basic knowledge of CSS since we'll be using it lightly.</li>
<li>A desire to learn how to code!</li>
</ol>
<p>With that being said, let's get started!</p>

<h2 id=""selecting-a-text-editor"">Selecting a Text Editor</h2>
<p>Since JavaScript is ultimately just plain text, you can use any text editor for this class. However, we suggest using  <a href=""https://code.visualstudio.com/"" rel=""noopener"" target=""_blank"">Visual Studio Code</a>. It will support the operating system you're running on, and its syntax highlighting makes writing JavaScript a blast!</p>
<p>Of course, feel free to use whatever text editor you might already be using.</p>
<figure>
<img alt=""Visual Studio Code"" height=""601"" loading=""lazy"" src=""https://sabe.io/classes/javascript/introduction/visual-studio-code.png"" width=""800""/>
<figcaption>Visual Studio Code</figcaption>
</figure>
<h2 id=""hello-world"">Hello World</h2>
<p>Create a brand new file in your editor, and type this in:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Intro to JavaScript&lt;/title&gt;
        &lt;script&gt;
            alert(""Hello World"");
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>Save this as <code>index.html</code> and then open it with your browser of choice. You should see something like this if successful:</p>
<figure>
<img alt=""Hello World in browser."" height=""469"" loading=""lazy"" src=""https://sabe.io/classes/javascript/introduction/hello-world.png"" width=""635""/>
<figcaption>Hello World in browser.</figcaption>
</figure>
<p>If you see the alert dialog at the top, you have everything you need to begin this class on JavaScript!</p>
<figure>
<img alt=""Let's roll."" height=""336"" loading=""lazy"" src=""https://sabe.io/classes/javascript/introduction/im-ready.gif"" width=""448""/>
<figcaption>Let's roll.</figcaption>
</figure>



",0,"standard","lesson"
"JavaScript-Adding JavaScript to your Page","javascript-adding-javascript-to-your-page","Learn how to add JavaScript to your page using the three available ways, external, internal and inline.","DRAFT","

<p>Browsers support three different ways of adding JavaScript to your page. The different ways are <strong>external</strong>, <strong>inline</strong>, and <strong>internal</strong>. Let's take a look at each of these three ways.</p>
<h2 id=""external"">External</h2>
<p>You can include any <strong>external</strong> JavaScript file (a file with the <code>.js</code> extension) by giving the <code>script</code> tag a <code>src</code> attribute. The <code>src</code> attribute specifies the location of the JavaScript file. The <code>src</code> attribute can be used to include JavaScript files from the local file system or from the web. The <code>src</code> attribute can also be used to include JavaScript files from a CDN.</p>
<p>The value of <code>src</code> is just the path to the file you want to include. This path can be both <strong>relative</strong>, like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;script src=""javascript.js""&gt;&lt;/script&gt;</code>
</pre>
<p>or <strong>absolute</strong>, like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;script src=""https://sabe.io/js/javascript.js""&gt;&lt;/script&gt;</code>
</pre>
<p>Place your <code>script</code> tag <strong>right before</strong> the closing <code>body</code> tag, and you're good to go!</p>
<p>Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;External JavaScript&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Content here&lt;/h1&gt;

        &lt;!-- place JavaScript here --&gt;
        &lt;script src=""javascript.js""&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>

<h2 id=""internal"">Internal</h2>
<p><strong>Internal</strong> JavaScript is embedding the code directly inside <code>script</code> tags inside the <code>head</code> tag.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Internal JavaScript&lt;/title&gt;
        &lt;script&gt;
            alert(""I am internal JavaScript!"");
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>The code inside the <code>script</code> tags will be executed by the browser right away.</p>
<h2 id=""inline"">Inline</h2>
<p>You can also embed JavaScript <strong>inline</strong>, for example when it comes to handling events. Here's how you can add a click listener to a link:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;a href=""#"" onclick=""alert('Hi');""&gt;Click Me&lt;/a&gt;</code>
</pre>

<h2 id=""console"">Console</h2>
<p>It is important to be aware that your <strong>browser</strong> can run JavaScript via its built-in <strong>console</strong>.</p>
<p>To access your console on Chrome (and most browsers in general), right-click on the page, and select <strong>Inspect</strong>.</p>
<figure>
<img alt=""Accessing Developer Tools via Inspect."" height=""488"" loading=""lazy"" src=""https://sabe.io/classes/javascript/adding-javascript-external-internal-inline/inspect.png"" width=""783""/>
<figcaption>Accessing Developer Tools via Inspect.</figcaption>
</figure>
<p>What you see now is your <strong>Developer Tools</strong> window. From here you can do many cool things such as monitor how much data has been transferred between you and the server, how long that has taken, and adjust CSS styles on the fly.</p>
<figure>
<img alt=""The Developer Tools window in Chrome."" height=""570"" loading=""lazy"" src=""https://sabe.io/classes/javascript/adding-javascript-external-internal-inline/developer-tools.png"" width=""820""/>
<figcaption>The Developer Tools window in Chrome.</figcaption>
</figure>
<p>However, what we are interested in right now is getting to the console. To do so select the <strong>Console</strong> tab at the top.</p>
<p>Once selected, you can write and execute JavaScript right away, for example like printing output using <code>console.log()</code>.</p>
<figure>
<img alt=""An example of using Console Log."" height=""570"" loading=""lazy"" src=""https://sabe.io/classes/javascript/adding-javascript-external-internal-inline/console-log.png"" width=""820""/>
<figcaption>An example of using Console Log.</figcaption>
</figure>
<aside class=""aside__tip"">
<p>    The console is extremely useful for many reasons and hopefully you will grow to become comfortable to using it!</p>
</aside>
<h2 id=""comments"">Comments</h2>
<p>Leaving <strong>comments</strong> (basically text inside a JavaScript file that the browser ignores) in JavaScript is pretty straight forward.</p>

<h3>Single Line Comments</h3>
<p>To add a single line comment, you just prepend what you want as a comment with two slashes, like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const x = 0; // this is a comment</code>
</pre>
<h3>Multiple Line Comments</h3>
<p>When you need your comments to span multiple lines, simply place your comment after <code>/*</code> and before <code>*/</code>. Everything that gets put inside of those two will be ignored by the browser.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const y = 1;
/*  this
    is
    also
    a
    comment
    */</code>
</pre>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript"" rel=""noopener"" target=""_blank"">JavaScript - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Variables and Constants","javascript-variables-and-constants","Variables and constants hold data. Learn how to declare, initialize, and reassign them in JavaScript.","DRAFT","

<p>Pretty much every single piece of software requires the use of <strong>variables</strong>. Variables are a fundamental part of any programming language, and JavaScript is no different.</p>
<h2 id=""variables"">Variables</h2>
<p>Variables are containers that you give a name to that hold any piece of information or data for you. Variables are used to store data in memory, and to access that data later.</p>
<p>The two main parts of a variable are the <strong>name</strong> and its <strong>value</strong>. Because they are variables, their value is meant to <strong>vary</strong> over time, in other words change. Let's create our first one.</p>

<h2 id=""declaration"">Declaration</h2>
<p>When you want to create a variable, you need to <strong>declare</strong> it. This tells JavaScript ""hey, I want this name to represent a variable"".</p>
<p>Let's say you want a variable to hold the number of apples you eat every day. It may look something like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let apples;</code>
</pre>
<p>You have now <strong>declared</strong> a variable called <code>apples</code>, but have yet to give it a <strong>value</strong>.</p>
<h2 id=""variable-naming-guidelines"">Variable Naming Guidelines</h2>
<p>Below are the rules for how to name your variables.</p>
<ol>
<li>The first character has to be a letter, an underscore, or a dollar sign.</li>
<li>After the first character, you are now free to use numbers if you'd like, however, you cannot start with a number.</li>
</ol>
<p>Examples of valid JavaScript variable names:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let apples;
let $apples;
let _apples;
let app_les;
let apples4eva;
let apple$;</code>
</pre>
<p>And examples of invalid JavaScript variable names:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let 1apples;
let app les;
let #apples;
let apple%;</code>
</pre>
<p>Also important to note is that variable names are case-sensitive, so <code>Apples</code> and <code>apples</code> are <strong>different variables</strong>.</p>

<h2 id=""initialization"">Initialization</h2>
<p>After you have declared a variable with a valid name, you can now <strong>initialize</strong> it, which is to give the variable its <strong>initial value</strong>. This is the value that it will have when you first declare it.</p>
<p>The syntax for this is simple and intuitive. Let's say you look at a modest <strong>384 memes</strong> a day. Here is how you would initialize your variable.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let memes = 384;</code>
</pre>
<p>Likewise, if your variable is a string, like for example, the name of something, it would look like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let website = ""Sabe"";</code>
</pre>
<p>How do you know if the variable initialization worked? Try running this in your console:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const memes = 384;
const website = ""Sabe"";

console.log(""I view "" + memes + "" memes a day."");
console.log(""I use "" + website + "" every day."");</code>
</pre>
<p>You should get this as your output:</p>
<pre class=""pre__block"">	<code class=""language-markup"">I view 384 memes a day.
I use Sabe every day.</code>
</pre>
<h2 id=""assignment"">Assignment</h2>
<p>After a variable has been declared and initialized, you can always give it a new value by <strong>assigning</strong> it one. Because you already declared it, you don't need to declare it again.</p>
<p>To give the variables <code>memes</code> and <code>website</code> new values, it would look like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">memes = 463;
website = ""Google"";</code>
</pre>
<p>Thus, when you run this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let memes = 384;
let website = ""Sabe"";

console.log(""I view "" + memes + "" memes a day."");
console.log(""I use "" + website + "" every day."");

memes = 463; // assigning a new value to memes
website = ""Google""; // assigning a new value to website

console.log(""I view "" + memes + "" memes a day."");
console.log(""I use "" + website + "" every day."");</code>
</pre>
<p>Your output looks like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">I view 384 memes a day.
I use Sabe every day.
I view 463 memes a day.
I use Google every day.</code>
</pre>

<h2 id=""constants"">Constants</h2>
<p><strong>Constants</strong> in JavaScript are basically variables except that their values are meant to be unchanging after being initialized. Instead of using the <code>let</code> keyword, they are declared using <code>const</code>.</p>
<p>The rules for naming constants are the same for variables, however, it is common practice to capitalize all the letters. Here is an example of two constants:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const MEMES = 100;
const WEBSITE = ""Twitter"";

console.log(""I view "" + MEMES + "" memes a day."");
console.log(""I use "" + WEBSITE + "" every day."");</code>
</pre>
<figure>
<img alt=""The output using constants."" height=""341"" loading=""lazy"" src=""https://sabe.io/classes/javascript/variables-constants/constants.png"" width=""732""/>
<figcaption>The output using constants.</figcaption>
</figure>
<h2 id=""difference-between-let-and-const"">Difference between let and const</h2>
<p>You might be wondering, what is the difference between <code>let</code> and <code>const</code>? The difference between <code>let</code> and <code>const</code> is that <code>const</code> is a <strong>constant</strong>, meaning that it cannot be changed. This is different from <code>let</code> which is a <strong>variable</strong>. Once you assign a value to a <code>const</code>, you cannot change it, however, you can change the value of a <code>let</code> variable. If you know you value will never change, you can use <code>const</code> instead of <code>let</code>. The use of <code>var</code> is deprecated in JavaScript, so you should avoid using it in your code.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"" rel=""noopener"" target=""_blank"">Let - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"" rel=""noopener"" target=""_blank"">Const - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Primitive Data Types","javascript-primitive-data-types","Primitive data types are the fundamental building blocks of data. This lesson will go over all the primitive data types supported in JavaScript.","DRAFT","

<p>Let's explore all of JavaScript's <strong>primitive data types</strong>. A data type describes what kind of data is being held, and the reason why the following data types are referred to as <em>primitive</em> is because they are considered basic building blocks of the programming language. JavaScript has a number of primitive data types, each one with its own unique properties and methods.</p>
<h2 id=""number"">Number</h2>
<p><strong>Numbers</strong> are pretty self-explanatory. After you declare a variable, you can initialize it with a number of any kind, and it will retain that value.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const cars = 7;

console.log(cars);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-bash"">7</code>
</pre>
<p>Numbers are used extensively in JavaScript, as they are one of the most common data types.</p>

<h2 id=""string"">String</h2>
<p><strong>Strings</strong> in JavaScript are text that you can assign to a variable. You can <strong>concatenate</strong> (combine) two strings by using the <code>+</code> operator. Under the hood, strings are just arrays of characters.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const city = ""New York City"";

console.log(""The greatest city in the world is "" + city + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The greatest city in the world is New York City.</code>
</pre>
<h3>Template Literals</h3>
<p>An alternate way to work with strings in JavaScript is <strong>template literals</strong>. Template literals are useful because they support multiple lines and string interpolation (being able to insert variables).</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(`Look how
cool this string is.
It is on multiple lines!`);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Look how
    cool this string is.
    It is on multiple lines!</code>
</pre>
<p>Template literals allow you to avoid using the newline character, or needing to escape anything.</p>

<h3>String Interpolation</h3>
<p><strong>String interpolation</strong> lets you easily use variables inside your strings via its <code>${variable}</code> syntax. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const restaurant = ""Chipotle"";
console.log(`My favorite restaurant is ${restaurant}!`);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">My favorite restaurant is Chipotle!</code>
</pre>
<p>String interpolation is useful for inserting variables into strings and are recommended over concatenation because it's easier to read and maintain.</p>
<h3>ToLowerCase</h3>
<p>Calling <code>toLowerCase</code> on a string will return the same string with any uppercased letters replaced with lowercase letters.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const place = ""Mexico City"";

console.log(place.toLowerCase());</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">mexico city</code>
</pre>

<h3>ToUpperCase</h3>
<p>On the other hand, to do the reverse and capitalize all letters in a string, simply call <code>toUpperCase</code> on it. This will return the same string with all lowercase letters replaced with uppercase letters.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const place = ""Mexico City"";

console.log(place.toUpperCase());</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">MEXICO CITY</code>
</pre>
<h3>Repeat</h3>
<p>You can repeat a string as many times as you want using the <code>repeat</code> method. It takes a number as the parameter representing how many times you'd like the string to repeat. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const phrase = "" time and"";
const sentence = ""I dominate in Fortnite"" + phrase.repeat(3) + "" time again."";

console.log(sentence);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I dominate in Fortnite time and time and time and time again.</code>
</pre>

<h3>Replace</h3>
<p>There will be times when you will want to replace a certain substring with another substring inside a string.</p>
<p>For example, let's say you want to replace the word <code>red</code> with <code>blue</code>:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const sentence = ""The house is red."";
const newSentence = sentence.replace(""red"", ""blue"");

console.log(newSentence);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">The house is blue.</code>
</pre>
<aside class=""aside__warning"">
<p>    Keep in mind that using <code>replace</code> will only work on the first instance of the substring you're trying to replace.</p>
</aside>
<h3>Includes</h3>
<p>The last JavaScript string method we'll take a look at is the <code>includes</code> method. This method checks to see if a substring exists inside another string, and returns <code>true</code> if it does or <code>false</code> if it does not. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const sentence = ""The house is red."";

console.log(sentence.includes(""house""));
console.log(sentence.includes(""tiger""));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">true
false</code>
</pre>
<aside class=""aside__warning"">
<p>    Keep in mind that <code>includes</code> is case-sensitive!</p>
</aside>

<h2 id=""boolean"">Boolean</h2>
<p>A <strong>boolean</strong> is a data type that has only two values, <code>true</code> or <code>false</code>. <strong>True</strong> generally means ""correct"" or ""yes"" while <strong>false</strong> generally means ""incorrect"" or ""no"".</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const pizzaIsGood = true;
const wholeFoodsIsCheap = false;</code>
</pre>
<h2 id=""symbols"">Symbols</h2>
<p><strong>Symbols</strong> are tokens that serve as unique IDs. Because each one is different, you can use this to your advantage.</p>
<p>For example, you can use them to give values to constants that you define. Let's say you run a company that makes shirts. You can use symbols to keep track of all the sizes you sell:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const SIZE_XSMALL = Symbol();
const SIZE_SMALL  = Symbol();
const SIZE_MEDIUM = Symbol();
const SIZE_LARGE  = Symbol();
const SIZE_XLARGE = Symbol();</code>
</pre>
<p>In the real world, each size is distinct, and so will each value in these constants. Now with this, you can write elegant code like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function getShirtsLeftInSize(size) {
    if (size === SIZE_XSMALL) {
        return 4;
    } else if (size === SIZE_SMALL) {
        return 6;
    } else if (size === SIZE_MEDIUM) {
        return 3;
    } else if (size === SIZE_LARGE) {
        return 7;
    } else if (size === SIZE_XLARGE) {
        return 12;
    }
}

const mySize = SIZE_SMALL;
console.log(""There are "" + getShirtsLeftInSize(mySize) + "" shirts left in your size."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">There are 6 shirts left in your size.</code>
</pre>
<p>Sure, you could do this without using symbols like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const SIZE_XSMALL = ""XSMALL"";
const SIZE_SMALL  = ""SMALL"";
const SIZE_MEDIUM = ""MEDIUM"";
const SIZE_LARGE  = ""LARGE"";
const SIZE_XLARGE = ""XLARGE"";</code>
</pre>
<p>But the problem with that is that none of the values of these constants can be <strong>guaranteed to be unique</strong>. Nothing would stop anybody from just creating a new string variable and assigning it a valid size name:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const mySize = ""SMALL"";</code>
</pre>
<p>That would still work, but it requires knowing the <strong>exact value</strong> of the constant, whereas with symbols, you just need the <strong>name</strong> of it. This is why symbols are so useful.</p>

<h2 id=""null"">Null</h2>
<p><strong>Null</strong> is a special value in JavaScript that essentially means <strong>nothing</strong>. It's often used to indicate that a variable has no value.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const pears = null;</code>
</pre>
<p>The variable <code>pears</code> is empty and void of a value.</p>
<h2 id=""undefined"">Undefined</h2>
<p><strong>Undefined</strong> is another special value in JavaScript. When a variable is declared but not initialized, its value is undefined, because no value was given to that variable, not even the value <code>null</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const pineapples;

console.log(pineapples);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">undefined</code>
</pre>
<p>Each primitive data type has a use-case and it's important to know when to use each one.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Glossary/Primitive"" rel=""noopener"" target=""_blank"">Primitive - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Math","javascript-math","Learn about how to do arithmetic and work with the properties and methods provided in the Math library!","DRAFT","

<p>JavaScript makes working with math easy. It provides us with the <strong>arithmetic operators</strong> you'd expect from a programming language, and offers us a useful built-in <strong>Math library</strong> that does a lot of work for us so that we can focus on writing great code instead.</p>
<figure>
<img alt=""Math is easy."" height=""445"" loading=""lazy"" src=""https://sabe.io/classes/javascript/math/math-is-easy.png"" width=""680""/>
<figcaption>Math is easy.</figcaption>
</figure>
<h2 id=""arithmetic-operators"">Arithmetic Operators</h2>
<p>Here are some of the many <strong>arithmetic operators</strong> that allow you to manipulate numbers in JavaScript.</p>

<h3>Addition</h3>
<p>You can add two numbers together using the <code>+</code> operator. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const blueCars = 4;
const redCars = 5;

const totalCars = blueCars + redCars;

console.log(""I have "" + totalCars + "" cars!"");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 9 cars!</code>
</pre>
<p>You can add <code>1</code> to a number using the <strong>increment</strong> operator. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let burritos = 4;
burritos++; // adds 1

console.log(""I have "" + burritos + "" burritos!"");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 5 burritos!</code>
</pre>
<p>You can add an arbitrary number by using <strong>addition assignment</strong>. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let books = 10;
books += 20; // adds 20 books

console.log(""I have read "" + books + "" books!"");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have read 30 books!</code>
</pre>
<h3>Subtraction</h3>
<p>You can subtract two numbers using the <code>-</code> operator. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const bobsApples = 13;
const stolenApples = 7;

const remainingApples = bobsApples - stolenApples;

console.log(""After getting robbed, he was left with "" + remainingApples + "" apples."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">After getting robbed, he was left with 6 apples.</code>
</pre>
<p>You can subtract <code>1</code> from a number using the <strong>decrement</strong> operator. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let waterBottles = 4;
waterBottles--;

console.log(""I am down to "" + waterBottles + "" water bottles!"");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I am down to 3 water bottles!</code>
</pre>
<p>You can subtract an arbitrary number by using <strong>subtraction assignment</strong>. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let apples = 50;
apples -= 30; // subtracts 30 apples

console.log(""I have "" + apples + "" apples left!"");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 20 apples left!</code>
</pre>

<h3>Multiplication</h3>
<p>You can multiply two numbers together using the <code>*</code> operator. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">// multiplying numbers
const tacosPerPerson = 3;
const people = 20;

const tacosNeeded = tacosPerPerson * people;

console.log(""We need "" + tacosNeeded + "" tacos for the party."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">We need 60 tacos for the party.</code>
</pre>
<p>You can multiply by an arbitrary number by using <strong>multiplication assignment</strong>. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let boxes = 2;
boxes *= 5; // multiplies the value by 5

console.log(""I have "" + boxes + "" boxes left!"");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 10 boxes left!</code>
</pre>
<h3>Division</h3>
<p>You can divide two numbers together using the <code>/</code> operator. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const totalSkittles = 75;
const kids = 5;

const skittlesPerKid = totalSkittles / kids;

console.log(""Each kid gets "" + skittlesPerKid + "" skittles."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Each kid gets 15 skittles.</code>
</pre>
<p>You can divide by an arbitrary by using <strong>division assignment</strong>. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let peanuts = 100;
peanuts /= 20; // divides the value by 20

console.log(""I have "" + peanuts + "" peanuts left!"");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 5 peanuts left!</code>
</pre>

<h3>Modulus</h3>
<p>You can find the remainder of a division by using the <code>%</code> operator. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const people = 20;
const peoplePerCar = 6;

const peopleInLastCar = people % peoplePerCar;

console.log(""The last car will have "" + peopleInLastCar + "" people in it."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The last car will have 2 people in it.</code>
</pre>
<p>You can find the remainder of an arbitrary number by using <strong>modulus assignment</strong>. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let slices = 45;
slices %= 7; // does modulus 7

console.log(""I have "" + slices + "" slices leftover!"");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 3 slices leftover!</code>
</pre>
<h3>Order of Operations</h3>
<p><strong>Order of Operations</strong>, also known as <strong>PEMDAS</strong>, is at play here, including with the use of parentheses. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const x = (5 * 3) + 10 / 2;

console.log(""The value of x is "" + x + ""."");</code>
</pre>
<p>The order of operations is very important because it determines how the numbers are calculated and how the values are displayed. For example, the above expression is evaluated as <code>(5 * 3) + (10 / 2)</code> which is <code>20</code> because the <code>*</code> operator has higher precedence than the <code>+</code> operator.</p>

<h2 id=""math-properties"">Math Properties</h2>
<p>JavaScript's <strong>Math</strong> library, among other things, gives us access to mathematical properties that are commonly used so that we do not need to implement this ourselves. Let's look some examples below:</p>
<h3>Euler's Number - Math.E</h3>
<p>One of these constants is <strong>Euler's Number</strong>, via <code>Math.E</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const euler = Math.E;
console.log(euler);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">2.718281828459045</code>
</pre>

<h3>Pi - Math.PI</h3>
<p><strong>Pi</strong> is the ratio of the circumference of a circle relative to its diameter, and is accessed in JavaScript using <code>Math.PI</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const pi = Math.PI;
console.log(pi);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">3.141592653589793</code>
</pre>
<h2 id=""math-methods"">Math Methods</h2>
<p>Likewise with properties, JavaScript also implements some commonly used mathematical methods that we can use anytime we want.</p>

<h3>Absolute Value</h3>
<p>Getting the absolute value of a number is easy. Simple pass a number to <code>Math.abs()</code> and it will return what you expect. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const a = 6;
const b = -13;

console.log(""Absolute value of a is "" + Math.abs(a) + ""."");
console.log(""Absolute value of b is "" + Math.abs(b) + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Absolute value of a is 6.
Absolute value of b is 13.</code>
</pre>
<h3>Floor</h3>
<p>The <strong>floor</strong> method rounds a number down to the nearest integer. Put a number inside <code>Math.floor()</code> and you're good to go. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const decimal = 24.942;
const floor = Math.floor(decimal);
console.log(""The value of floor is "" + floor + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The value of floor is 24.</code>
</pre>

<h3>Ceiling</h3>
<p>The <strong>ceiling</strong> method rounds a number up to the nearest integer. Put a number inside <code>Math.ceil()</code> and you're good to go. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const decimal = 13.37;
const ceiling = Math.ceil(decimal);
console.log(""The value of ceiling is "" + ceiling + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The value of ceiling is 14.</code>
</pre>
<h3>Logarithm</h3>
<p>You can get the <strong>natural logarithm</strong> of a number using the <code>Math.log()</code> method. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const number = Math.log(1);
console.log(""The value of number is "" + number + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The value of number is 0.</code>
</pre>

<h3>Maximum</h3>
<p>You can get the <strong>maximum</strong> of two numbers using the <code>Math.max()</code> method. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const number = Math.max(14, 349);
console.log(""The value of number is "" + number + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The value of number is 349.</code>
</pre>
<h3>Minimum</h3>
<p>You can get the <strong>minimum</strong> of two numbers using the <code>Math.min()</code> method. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const number = Math.min(53, 94);
console.log(""The value of number is "" + number + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The value of number is 53.</code>
</pre>

<h3>Power</h3>
<p>You can take the <strong>power</strong> of a number by using <code>Math.pow()</code>. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const number = Math.pow(3, 2);
console.log(""The value of number is "" + number + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The value of number is 9.</code>
</pre>
<aside class=""aside__tip"">
<p>    The first value is the <strong>base</strong> and the second value is the <strong>exponent</strong>. In the example, we are basically just squaring <code>3</code> to get <code>9</code>.</p>
</aside>
<h3>Random</h3>
<p>To get a <strong>random number</strong> in JavaScript, there's a <code>Math.random()</code> method for that. By itself, it just returns a number between <code>0</code> and <code>1</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const random = Math.random();
console.log(""The value of random is "" + random + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The value of random is 0.2156683652500082.</code>
</pre>
<p>However, you can manipulate this fact to get a random number between two other numbers, like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function randomBetween(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
const random = randomBetween(5, 25);

console.log(""The value of random is "" + random + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The value of random is 15.</code>
</pre>

<h3>Round</h3>
<p>You can <strong>round</strong> a number to the nearest integer using <code>Math.round()</code>. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const rounded = Math.round(3.14159);
console.log(""The value of rounded is "" + rounded + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The value of rounded is 3.</code>
</pre>
<h3>Square Root</h3>
<p>You can take the <strong>square root</strong> of a number with <code>Math.sqrt()</code>. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const root = Math.sqrt(49);
console.log(""The value of root is "" + root + ""."");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">The value of root is 7.</code>
</pre>
<p>That's all we got for math! ??????</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math"" rel=""noopener"" target=""_blank"">Math - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Ifs, Else Ifs, Switch","javascript-ifs-else-ifs-switch","Logic and conditionals are a fundamental part of JavaScript and is how your program or script can make decisions.","DRAFT","

<h2 id=""logic"">Logic</h2>
<p>When writing a program in any programming language, there will be situations where you will need to decide on what path to take depending on the current state of the program. You want the program to be able to compare values with one another to determine what to do next. This is called <strong>logic</strong>.</p>
<p>To get started we first need to learn about the <strong>comparison operators</strong> at our disposal.</p>

<h3>Equality Operator</h3>
<p>With the <strong>equality operator</strong>, we can now check if two values are equal or not.</p>
<p>If two values are equal, using the equality operator on them will result in <code>true</code>, and if they are not equal, it will result in <code>false</code>.</p>
<p>Using this operator is simple, just use <strong>two equal signs</strong>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(5 == 5);

const pears = 40 / 2;
console.log(20 == pears);

console.log(17 == 10);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true
true
false</code>
</pre>
<h3>Strict Equality Operator</h3>
<p>The <strong>strict equality operator</strong> is used to check if two values are strictly equal. This means that the values have to be the same type, and the same value. What is the difference between the <strong>strict equality operator</strong> and the <strong>equality operator</strong>? The difference is that the <strong>strict equality operator</strong> will not use type coercion to convert the values to the same type, whereas the <strong>equality operator</strong> will.</p>
<p>To use the <strong>strict equality operator</strong>, just use <strong>three equal signs</strong> with a space in between.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(23 === 23);

const pears = 50 / 2;
console.log(25 === pears);

console.log(13 === 561);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true
true
false</code>
</pre>
<p>Let's see how the equality operator is different from the strict equality operator.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(23 === '23');

const pears = 50 / 2;
console.log(25 === '25');

console.log(13 === '561');</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">false
false
false</code>
</pre>
<p>All of these comparisons are <code>false</code>, because the values are not strictly equal. The left-hand side of the comparison is a number, and the right-hand side is a string, so the types are not strictly equal. However, if we use type coercion, the values will be converted to the same type, and the comparison will be true.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(23 == '23');

const pears = 50 / 2;
console.log(25 == '25');</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true
true</code>
</pre>
<p>Even though the values are not strictly equal, the comparison is still true because the values are converted to the same type, and the comparison is true. That is the difference between the <strong>strict equality operator</strong> and the <strong>equality operator</strong>.</p>

<h3>Inequality Operator</h3>
<p>The <strong>inequality operator</strong> works basically like the equality operator but in the reverse. If two values are the same, it will result in <code>false</code>, while if two values are different, it will result in <code>true</code>.</p>
<p>To use this operator, you use a <strong>single exclamation point followed by an equal sign</strong>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(9 != 7);

const oranges = 5 * 6;
console.log(30 != oranges);

console.log(57 != 57);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true
false
false</code>
</pre>
<h3>Strict Inequality Operator</h3>
<p>The <strong>strict inequality operator</strong> is used to check if two values are strictly different. Let's see an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(9 !== 7);

const oranges = 5 * 6;
console.log(30 !== oranges);

console.log(57 !== 57);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true
false
false</code>
</pre>
<p>Like before, the values are being strictly compared, meaning that the types are not being converted.</p>

<h3>Greater Than Operator</h3>
<p>You can check whether a value is greater than than another one. This allows you to <strong>compare</strong> the two values.</p>
<p>Use the <strong>greater than</strong> operator via the greater than symbol.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(6 &lt; 4);
console.log(8 &lt; 13);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">false
true</code>
</pre>
<h3>Less Than Operator</h3>
<p>You can check whether a value is less than another one. Use the <strong>less than</strong> operator via the less than symbol.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const books = 32;

console.log(books &gt; 30);
console.log(books &gt; 50);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true
false</code>
</pre>

<h3>Or Equal To Operators</h3>
<p>In the case that you need to check if a value is <strong>either</strong> less than/greater than or equal to another value, JavaScript has operators for that too.</p>
<p>Check for <strong>greater than or equal to</strong> via a greater than symbol followed by an equal sign, and check for <strong>less than or equal to</strong> via a less than symbol followed by equal sign.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(29 &lt;= 94);
console.log(13 &lt;= 9);

console.log(32 &gt;= 32);
console.log(42 &gt;= 85);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true
false
true
false</code>
</pre>
<h2 id=""conditionals"">Conditionals</h2>
<p>Now that we know how to return <code>true</code> or <code>false</code> when we compare two values, we are now ready to act on that result. In other words, we want to do one thing if the result is <code>true</code> and another thing if the result is <code>false</code>.</p>
<p>This is called a <strong>conditional</strong>.</p>

<h3>If</h3>
<p>Using <strong>if</strong> is extremely intuitive. If whatever condition you're checking returns <code>true</code> then the next block of code will run.</p>
<p>Let's say if you eat <strong>100 candies or more</strong>, you will get a cavity.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const candy = 110;

if (candy &gt;= 100) {
    console.log(""You got a cavity!"");
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">You got a cavity!</code>
</pre>
<p>Since you're a rebel, you decide to eat 110 candies and as a result, you got a cavity over it.</p>
<p>But watch what happens if you only eat 80 candies.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const candy = 80;

if (candy &gt;= 100) {
    console.log(""You got a cavity!"");
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup""></code>
</pre>
<p>The output is blank now because 80 is <strong>not</strong> greater than or equal to 100, and thus, the code inside did not run and so the output is blank.</p>
<h3>Else</h3>
<p>You might have thought ""well, I want to output a message if they didn't get a cavity"", and you can do that using <strong>else</strong>.</p>
<p>Else is used when the if before it resulted in <code>false</code>. Let's see it in action.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const candy = 80;

if (candy &gt;= 100) {
    console.log(""You got a cavity!"");
} else {
    console.log(""You didn't get a cavity! Nice!"");
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">You didn't get a cavity! Nice!</code>
</pre>
<p>Keeping the candies at <strong>80</strong> like before, the first log didn't appear because 80 is <strong>not</strong> greater than or equal to 100, and so the block inside <strong>else</strong> ran instead.</p>
<p>What if instead of two paths, you wanted <strong>multiple</strong> paths?</p>

<h3>Else If</h3>
<p><strong>Else If</strong> is the combination of an if and an else. They are sandwiched between the two and you can have as many as you'd like.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const candy = 80;

if (candy &gt;= 100) {
    console.log(""You got a cavity!"");
} else if (candy &gt;= 95) {
    console.log(""You almost got a cavity. Be careful!"");
} else if (candy &gt;= 75) {
    console.log(""You should eat less candy!"");
} else {
    console.log(""You didn't get a cavity! Nice!"");
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">You should eat less candy!</code>
</pre>
<p>The browser first compares 80 and 100, that returns <code>false</code>, and so it moves on to the first <code>else if</code>.</p>
<p>Because 80 is still not greater than or equal to 95, it moves on to the second <code>else if</code>.</p>
<p>At last, since 80 is greater than or equal to 75, that code block gets executed and the remaining <code>else</code> is ignored entirely.</p>
<h3>Ternary Operator</h3>
<p>The <strong>ternary operator</strong> is a shorthand way to represent a conditional that returns a value that you can then use to assign to a variable.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const number = 25;
const isEven = (number % 2 === 0) ? ""Yes"" : ""No"";

console.log(""Is "" + number + "" an even number? "" + isEven);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Is 25 an even number? No</code>
</pre>
<p>If the number is even, the variable <code>isEven</code> gets a string value of <code>Yes</code>. Otherwise, it gets <code>No</code>.</p>
<p>Ternary operators are useful for condensing an entire conditional into a single line. They are also useful for returning a value from a function.</p>

<h2 id=""switch-statement"">Switch Statement</h2>
<p>We know that when we want to test for multiple different conditions, we can chain them using <code>else if</code>. Another way to test for many different conditions is using a <strong>switch statement</strong>. They work like else ifs except that the code can be more concise and cleaner.</p>
<p>Let's see a switch statement in action:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function getFruitByColor(color) {
    switch (color) {
        case ""red"":
            return ""apple"";
        case ""yellow"":
            return ""banana"";
        case ""orange"":
            return ""orange"";
        case ""green"":
            return ""pear"";
        default:
           return ""grape"";
    }
}

const favoriteColor = ""yellow"";
const fruit = getFruitByColor(favoriteColor);

console.log(""I want to eat a "" + fruit);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I want to eat a banana</code>
</pre>
<p>In the <code>getFruitByColor</code> function, we have a switch statement that switches on the <code>color</code> variable. In the <strong>case</strong> that the variable is equal to <code>red</code>, we return the string <code>apple</code> then break to prevent the function from checking further cases.</p>
<p>If <code>color</code> does not equal <code>red</code>, the function moves on to check if it matches <code>yellow</code>. This continues until the end where, if there are no cases that match <code>color</code>, it will follow the <code>default</code> path and return <code>grape</code>.</p>
<h2 id=""logical-operators"">Logical Operators</h2>
<p>So far, we've only been checking a single condition, and then acting upon it. There will be times where you need to check multiple conditions before being able to make a decision.</p>
<p>If you wanted to write a program to check whether or not you should tie your shoe, you can, for example, first check that you're even wearing shoes at all, but then also check if they need to be tied.</p>
<p>To check both conditions at the same time, we can use a <strong>logical operator</strong>.</p>

<h3>And (&amp;&amp;)</h3>
<p>By using the <strong>and</strong> operator, the code block will only execute if <strong>both</strong> conditions are true:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const wearingShoes = true;
const needsTying = true;

if (wearingShoes &amp;&amp; needsTying) {
    console.log(""I should tie my shoes!"");
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I should tie my shoes!</code>
</pre>
<p>As mentioned before, both conditions need to evaluate to <code>true</code> for the code block to execute, and since both were set to true, we got our expected output.</p>
<h3>Or (||)</h3>
<p>In other cases, you might not need both conditions to be true to want to proceed with the code block. Maybe just <strong>one</strong> being true is all you need.</p>
<p>Consider the case where you want some candy but don't really care what kind. This is a perfect opportunity to use the <strong>or</strong> logical operator. It will only execute if <strong>one</strong> of the conditions is true.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const thereIsSnickers = false;
const thereIsSkittles = true;

if (thereIsSnickers || thereIsSkittles) {
    console.log(""I'm glad there's candy in this house!"");
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I'm glad there's candy in this house!</code>
</pre>
<p>Because you only want candy, regardless of the brand, you are happy with <strong>either one</strong>. Only one of two need to be <code>true</code> for the entire conditional to be <code>true</code> and for the following code to execute.</p>

<h3>Not (!)</h3>
<p>In our final logical operator, you can test the opposite value of an outcome by using the <strong>not</strong> operator. Let's say you only wear boots when it <strong>isn't hot</strong>.</p>
<p>This scenario is easily represented like so:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const temperature = 50;
const itIsHot = temperature &gt; 70;

if (!itIsHot) {
    console.log(""I will wear my boots today!"");
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I will wear my boots today!</code>
</pre>
<p>You would only wear boots if the temperature for the day doesn't exceed <code>70</code> degrees. Since today is only <code>50</code> degrees, it <strong>isn't</strong> too hot to wear boots and therefore you wear them today.</p>
<aside class=""aside__warning"">
<p>    The units are in fahrenheit!</p>
</aside>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators"" rel=""noopener"" target=""_blank"">Expressions and Operators - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Loops","javascript-loops","Learn how to shorten your code by utilizing loops like for loops, while loops, do while loops, and for in loops.","DRAFT","

<p><strong>Loops</strong> are an important part of programming languages. They give you the ability to execute the same code block over and over which keeps your code smaller and more readable.</p>
<p>If you find yourself copy and pasting the same code for the purpose of executing them multiple times, there's a chance loops might be useful for you.</p>
<p>In this lesson, we'll take a look at the different kinds of loops in JavaScript and also loop control for flow.</p>
<h2 id=""for-loop"">For Loop</h2>
<p>A <strong>for loop</strong> is a loop that contains three major parts.</p>
<ol>
<li><strong>Initial Value</strong>: This is the value assigned to the variable that will keep track of the progression in the loop, usually called <code>i</code>.</li>
<li><strong>Condition</strong>: This is the conditional that will get re-evaluated to check if the code inside the loop should run again.</li>
<li><strong>Iteration</strong>: This is how you advance in progress every time you complete one loop.</li>
</ol>
<p>A common way to demonstrate for loops is counting from 1 to 10.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">for (let i = 1; i &lt;= 10; i++) {
    console.log(i);
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1
2
3
4
5
6
7
8
9
10</code>
</pre>
<p>Let's break down what's going on here.</p>
<p>First, we create a variable called <code>i</code> and initialize its value to be <code>1</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let i = 1;</code>
</pre>
<p>Second, we say ""hey, as long as the variable <code>i</code> is less than or equal to 10, you're good to loop again"".</p>
<pre class=""pre__block"">	<code class=""language-javascript"">i &lt;= 10</code>
</pre>
<p>Finally, after the code inside the loop executes, we want to increment the value of <code>i</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">i++</code>
</pre>
<p>Put this all together, and what we're saying is this:</p>
<p>""Start <code>i</code> at 1, log it to our console, increment the value of <code>i</code> by 1, then check that we're still equal to or less than 10, if so, repeat. Once the value of <code>i</code> reaches <code>11</code>, we can stop looping since <code>11</code> is greater than <code>10</code>.""</p>

<h2 id=""while-loop"">While Loop</h2>
<p>A <strong>while loop</strong> is a kind of loop that takes a single condition and evaluates it. If it evaluates to <strong>true</strong>, it will run again, otherwise if it evaluates to <strong>false</strong> it stops running.</p>
<p>Let's look at the same situation we tackled above but using a while loop instead.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let i = 1;

while (i &lt;= 10) {
    console.log(i);
    i++;
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1
2
3
4
5
6
7
8
9
10</code>
</pre>
<p>While the output is exactly the same, we accomplished it with a while loop and not a for loop, but let's break this down as well.</p>
<p>First, we create a variable called <code>i</code> and initialize its value to <code>1</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let i = 1;</code>
</pre>
<p>Second, we say ""<strong>while</strong> <code>i</code> is still less than or equal to <code>10</code>, loop once more"".</p>
<pre class=""pre__block"">	<code class=""language-javascript"">while (i &lt;= 10) {</code>
</pre>
<p>Finally, the code inside the loop simply logs the variable <code>i</code> then increments its value.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(i);
i++;</code>
</pre>
<p>Eventually, the value of <code>i</code> will exceed <code>10</code>, causing the loop to terminate.</p>
<h2 id=""do-while-loop"">Do While Loop</h2>
<p>A <strong>do while</strong> loop is very similar to a normal while loop except that the block of code being looped over is guaranteed to <strong>run at least once</strong>.</p>
<p>This is because it first <strong>does</strong> the code inside the loop, <strong>then</strong> checks the condition to determine if it needs to loop again or not.</p>
<p>Consider the situation where you're really hungry and so you bought a family-sized bag of Doritos. They come with <strong>100 chips</strong> and since you're starving, each time you go to grab some, you pull out <strong>20 at a time</strong>.</p>
<p>Here's how you would demonstrate this using a do while loop.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let doritos = 100;

do {
    console.log(""With "" + doritos + "" Doritos left, I can eat."");
    doritos -= 20;
} while (doritos &gt; 0);

console.log(""My Doritos are gone now. I am sad. :("");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">With 100 doritos left, I can eat.
With 80 doritos left, I can eat.
With 60 doritos left, I can eat.
With 40 doritos left, I can eat.
With 20 doritos left, I can eat.
My Doritos are gone now. I am sad. :(</code>
</pre>
<p>First, we create a variable to hold how many Doritos are in the bag, and initialize it to <strong>100 chips</strong>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let doritos = 100;</code>
</pre>
<p>Second, since we just opened the bag, we know there are chips inside and so we immediately eat some. Since we eat <strong>20 chips</strong> at a time, so we can subtract it from the total.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">do {
    console.log(""With "" + doritos + "" doritos left, I can eat."");
    doritos -= 20;
}</code>
</pre>
<p>Now that we have eaten some for the first time, we can now check if there are Doritos left in the bag, and we do so with this conditional:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">while (doritos &gt; 0);</code>
</pre>
<p><strong>While</strong> we still have some Doritos in the bag, we are free to go in for more. Eventually, we will run out of Doritos, and that conditional will evaluate to <strong>false</strong>.</p>
<p>Once that happens, we no longer loop again because we ran out of Doritos to eat.</p>

<h2 id=""for-in-loop"">For In Loop</h2>
<p>A <strong>for in</strong> loop iterates through the properties of an <strong>object</strong> and the positions in an <strong>array</strong>.</p>
<p>Here is iterating through a small array, printing out all the values inside it.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let colors = [""red"", ""white"", ""blue""];

for (let i in colors) {
    console.log(colors[i]);
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">red
white
blue</code>
</pre>
<p>All the values inside the <code>colors</code> array were printed, one on each line.</p>
<p>Now, here is a <strong>for in</strong> loop iterating over the properties of an object:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let person = {
    name: ""Tom"",
    weight: ""150"",
    age: 40
};

for (let property in person) {
    console.log(""This person's "" + property + "" is "" + person[property] + ""."");
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">This person's name is Tom.
This person's weight is 150.
This person's age is 40.</code>
</pre>
<p>Like with before, the <strong>for in</strong> loop iterated over what is <strong>inside</strong> the <code>person</code> object. Each property was printed out on a separate line along with the value. This is a very common way to iterate over objects.</p>
<h2 id=""break"">Break</h2>
<p>While you are inside of a loop of any kind, JavaScript allows you to terminate the loop whenever you want via the <code>break</code> statement.</p>
<p>Let's try it by counting to 10 like before, but <strong>breaking</strong> after we output <strong>5</strong>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">for (let i = 1; i &lt;= 10; i++) {
    console.log(i);
    if (i == 5) {
        break;
    }
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1
2
3
4
5</code>
</pre>
<p>This for loop <em>would</em> have printed out every number from 1 to 10, but we told it to <strong>break out</strong> of the loop if <code>i</code> were equal to <code>5</code>.</p>
<p>Once that was the case, the loop terminated, and we were left with just the numbers from 1 to 5.</p>

<h2 id=""continue"">Continue</h2>
<p>With the <code>continue</code> statement, you can tell the browser to <strong>continue</strong> on to the next loop, without finishing the rest of the code block.</p>
<p>Let's say while printing the numbers from 1 to 10, you didn't want the numbers <strong>3</strong> and <strong>7</strong> to appear.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">for (let i = 1; i &lt;= 10; i++) {
    if (i == 3 || i == 7) {
        continue;
    }
    console.log(i);
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1
2
4
5
6
8
9
10</code>
</pre>
<p>This time, before outputting anything, we first check if <code>i</code> is equal to either <strong>3</strong> or <strong>7</strong>. If so, we <strong>continue</strong> to the next iteration, otherwise, we print out the value of <code>i</code>.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration"" rel=""noopener"" target=""_blank"">Loops - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Functions","javascript-functions","Functions in JavaScript are a great way to group together lines of code that aim to do a single task and make them reusable.","DRAFT","

<h2 id=""functions"">Functions</h2>
<p><strong>Functions</strong> are blocks of code that can be reused over and over again. By creating a function, you can eliminate the need to write the code multiple times, and it helps your programs become more modular and easier to work with.</p>
<p>You can divide up larger tasks into smaller chunks so that your code doesn't grow out of control. Let's start with a simple function, say you want to display an introduction.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function introduction() {
    console.log(""Hello, my name is Jessica."");
}</code>
</pre>
<p>To create a function, use the <code>function</code> keyword, followed by the name of the function. In our example, the name is of this function is <code>introduction</code>.</p>

<h2 id=""arrow-functions"">Arrow Functions</h2>
<p>Another way to create a function is to use the <strong>arrow function syntax</strong>. Here is the same function using the newer syntax.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const introduction = () =&gt; {
    console.log(""Hello, my name is Jessica."");
};</code>
</pre>
<p>In this case, we have actually set the function to a new <code>const</code> instead. You can even do this in one line:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const introduction = () =&gt; console.log(""Hello, my name is Jessica."");</code>
</pre>
<h2 id=""invoking"">Invoking</h2>
<p>Now that we have created a function, we now need to <strong>invoke</strong> the function, also known as <strong>calling</strong> the function. In other words, we want to use it.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function introduction() {
    console.log(""Hello, my name is Jessica."");
}

introduction();</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Hello, my name is Jessica.</code>
</pre>
<p>There you have it, you invoked the <code>introduction</code> function successfully! What if, however, your name isn't <strong>Jessica</strong>, and you want to be able to pass in both a custom greeting and your own name?</p>

<h2 id=""parameters"">Parameters</h2>
<p>You can pass in data to your functions. These pieces of data are called <strong>parameters</strong>, or <strong>arguments</strong>.</p>
<p>Let's pass a custom greeting and name to our <code>introduction</code> function, and then invoke it.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function introduction(greeting, name) {
    console.log(greeting + "", my name is "" + name + ""."");
}

introduction(""Hi"", ""Nabeed"");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Hi, my name is Nabeed.</code>
</pre>
<p>Our new <code>introduction</code> function now takes a <strong>greeting</strong> and <strong>name</strong>, and concatenates it with other strings to make a new introduction that works with anybody!</p>
<h2 id=""return-values"">Return Values</h2>
<p>Functions can <strong>return</strong> data to us. In our <code>introduction</code> function, there was nothing to return because we just printed some text and that was it.</p>
<p>Let's say instead we want to write a function that returns the area of a circle by providing it with the radius as a parameter.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function getAreaOfCircle(radius) {
    return radius * radius * Math.PI;
}

const radius = 3;
const area = getAreaOfCircle(radius);
console.log(""A circle with a radius of "" + radius + "" has an area of "" + area + ""."");</code>
</pre>
<p>Our <code>getAreaOfCircle</code> function has the radius as its only parameter. It takes it, squares it by multiplying it by itself, then multiplies the whole thing by the value of Pi.</p>
<p>The function then <strong>returns</strong> that value, which is assigned to the <code>area</code> variable here:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const area = getAreaOfCircle(radius);</code>
</pre>
<p>Now with the value of <code>radius</code> being <code>3</code> and the value of <code>area</code> being <code>28.274333882308138</code>, we can now print out the values of both variables.</p>
<pre class=""pre__block"">	<code class=""language-markup"">A circle with a radius of 3 has an area of 28.274333882308138.</code>
</pre>
<aside class=""aside__tip"">
<p>    A function can return pretty much anything; a string, a boolean, a number, null, you name it! Just make sure to declare a variable to receive that value if you need it later on.</p>
</aside>
<p>Functions are a powerful tool in your code, and they can be used to <strong>modify</strong> data, <strong>create</strong> new data, or <strong>delete</strong> data. You can even <strong>combine</strong> functions together to create more complex programs.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"" rel=""noopener"" target=""_blank"">Functions</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Arrays","javascript-arrays","Arrays are a list of data in JavaScript. In this lesson, learn how to create, add elements to, remove elements from, and iterate over arrays.","DRAFT","

<p>Let's take a look at a very common data type which consists of a collection of other data types called <strong>arrays</strong>. Using arrays, you can store numbers, strings, objects, even other arrays, inside a single variable.</p>
<h2 id=""creation"">Creation</h2>
<p>When you want to handle a collection of the same data type, you'll want to <strong>create</strong> an array. Here's an example of how to create one.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const drinks = [""water"", ""juice"", ""milk"", ""soda""];</code>
</pre>
<p>Just like that, you've created a new array with four <strong>elements</strong> in them, and initiated the value of <code>drinks</code> with it. You can also create an array with a single element, like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const drinks = [""water""];</code>
</pre>
<p>Elements are the individual items in the array.</p>

<h2 id=""retrieval"">Retrieval</h2>
<p>Now that you've put data inside the array, how do you retrieve it? If you specify the <strong>index</strong>, you can get the value at that index back.</p>
<p>Because JavaScript is zero-based (it starts counting from <code>0</code> instead of <code>1</code>), <code>water</code> is actually at position <code>0</code> in the array, not <code>1</code>.</p>
<p>So, if you wanted to get back the first element in the array, it would be like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(drinks[0]);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">water</code>
</pre>
<p>You can take this a step further and iterate over the entire array using a for loop.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const drinks = [""water"", ""juice"", ""milk"", ""soda""];

for (let i = 0; i &lt; drinks.length; i++) {
    console.log(drinks[i]);
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">water
juice
milk
soda</code>
</pre>
<p>We are initializing the value of <code>i</code> to be <code>0</code>, and then looping until that value is equal to the number of elements in the array, in this case, <code>4</code>.</p>
<p>As the value goes from <code>0</code> to <code>1</code>, to <code>2</code>, and then to <code>3</code>, the values at each of those indexes is being logged to our console.</p>
<p>Another way to do this is to use the <strong>forEach</strong> method and arrow functions.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const drinks = [""water"", ""juice"", ""milk"", ""soda""];

drinks.forEach((drink) =&gt; {
    console.log(drink);
});</code>
</pre>
<p>You can even do this in one line:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const drinks = [""water"", ""juice"", ""milk"", ""soda""];

drinks.forEach((drink) =&gt; console.log(drink));</code>
</pre>
<h2 id=""reassignment"">Reassignment</h2>
<p>After you have initialized an array, you can modify the values at an index pretty easily. Say you want to replace <code>milk</code> with <code>coffee</code>, it is as simple as this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const drinks = [""water"", ""juice"", ""milk"", ""soda""];

drinks[2] = ""coffee"";

console.log(drinks);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""water"", ""juice"", ""coffee"", ""soda""]</code>
</pre>
<p>All you need to do is provide the index you want to reassign and then set it equal to your new value.</p>

<h2 id=""sort"">Sort</h2>
<p>You can <strong>sort</strong> you array by calling the <code>sort</code> method on it.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const drinks = [""water"", ""juice"", ""milk"", ""soda""];

const sortedDrinks = drinks.sort();

console.log(sortedDrinks);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""juice"", ""milk"", ""soda"", ""water""]</code>
</pre>
<p>In the case of strings, it will sort the items alphabetically. Here's how to sort an array of numbers numerically:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const numbers = [31, 99, 2, 6, 27, 64];

numbers.sort(function(a, b) {
    return a - b;
});</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">(6) [2, 6, 27, 31, 64, 99]</code>
</pre>
<p>We can pass to <code>sort</code> a compare function that takes two items, compares them, and then returns <code>true</code> or <code>false</code> to determine which element should be in front of the other. In our case, since we are working with numbers, we simply get the difference between the two values. A positive difference returns <code>true</code> and a negative difference returns <code>false</code>. This sorts the array of numbers as we want to.</p>
<h2 id=""push"">Push</h2>
<p>With <strong>push</strong>, you can easily add new items to the end of your array. Just call <code>push</code> on your array with the new item you want to add. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const drinks = [""water"", ""juice"", ""milk"", ""soda""];

drinks.push(""tea""); // add ""tea"" to the end of this array

console.log(drinks);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""water"", ""juice"", ""milk"", ""soda"", ""tea""]</code>
</pre>

<h2 id=""pop"">Pop</h2>
<p><strong>Pop</strong> is the opposite of push. Call <code>pop</code> on your array to <strong>remove</strong> the last item in your array. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const drinks = [""water"", ""juice"", ""milk"", ""soda""];

drinks.pop(); // remove the last item in this array

console.log(drinks);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""water"", ""juice"", ""milk""]</code>
</pre>
<h2 id=""shift"">Shift</h2>
<p>The <code>shift</code> method removes the first element of an array and then returns that element to you. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const chocolates = [""Snickers"", ""Kit-Kat"", ""Twix""];

const snack = chocolates.shift();

console.log(snack);
console.log(chocolates);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">Snickers
[""Kit-Kat"", ""Twix""]</code>
</pre>

<h2 id=""unshift"">Unshift</h2>
<p>The <code>unshift</code> method adds elements to the beginning of the array and returns the new array's length to you. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const chocolates = [""Snickers"", ""Kit-Kat"", ""Twix""];

const newLength = chocolates.unshift(""Milky Way"", ""3 Musketeers"");

console.log(newLength);
console.log(chocolates);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">5
[""Milky Way"", ""3 Musketeers"", ""Snickers"", ""Kit-Kat"", ""Twix""]</code>
</pre>
<h2 id=""concat"">Concat</h2>
<p>You can create a new array by <strong>concatenating</strong> two existing arrays. All you need to do is call <code>concat</code> on one array, with the second array being the parameter. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const healthyDrinks = [""water"", ""milk""];
const unhealthyDrinks = [""juice"", ""soda""];

const allDrinks = healthyDrinks.concat(unhealthyDrinks);
console.log(allDrinks);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""water"", ""milk"", ""juice"", ""soda""]</code>
</pre>

<h2 id=""slice"">Slice</h2>
<p>Using <code>slice</code>, you can return a <strong>brand new</strong> array containing elements from a slice of the original array. Simply provide the method with the starting and ending indexes and it will do the rest.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const colors = [""purple"", ""red"", ""white"", ""blue"", ""gold""];

const slice = colors.slice(1, 4);
console.log(slice);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""red"", ""white"", ""blue""]</code>
</pre>
<p>If you only provide one parameter, it will use that number as the starting point, and copy the rest of the array.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const colors = [""purple"", ""red"", ""white"", ""blue"", ""gold""];

const slice = colors.slice(3);
console.log(slice);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""blue"", ""gold""]</code>
</pre>
<p>Finally, if you provide a negative index, it will just start from the end and go backwards to reach the starting index. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const colors = [""purple"", ""red"", ""white"", ""blue"", ""gold""];

const slice = colors.slice(-3);
console.log(slice);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""white"", ""blue"", ""gold""]</code>
</pre>
<h2 id=""splice"">Splice</h2>
<p>The <code>splice</code> method accomplishes a similar task as <code>slice</code> except that <code>splice</code> returns the elements removed instead of the elements requested. <code>splice</code> also changes the original array, whereas <code>slice</code> creates an entirely new one.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const foods = [""burger"", ""pizza"", ""donut"", ""bread"", ""pasta""];

foods.splice(2);
console.log(foods);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""burger"", ""pizza""]</code>
</pre>
<p>If you provide a second parameter, you can specify the number of elements to remove from the array starting from that index.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const foods = [""burger"", ""pizza"", ""donut"", ""bread"", ""pasta""];

foods.splice(2, 1);
console.log(foods);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""burger"", ""pizza"", ""bread"", ""pasta""]</code>
</pre>
<p>In this case we are going to index <code>2</code>, which is <code>donut</code>, then removing <code>1</code> element. Thus, the new <code>food</code> array is every item except for <code>donut</code>.</p>

<h2 id=""split"">Split</h2>
<p>The <code>split</code> method is used when you want to take a string and chop it into an array every time a certain character is encountered in that string. For example, here is splitting on the comma character:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const string = ""peanut,butter,jelly,time"";
const array = string.split("","");

console.log(array);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">(4) [""peanut"", ""butter"", ""jelly"", ""time""]</code>
</pre>
<p>The text has been split up by the character we passed in. The first item in the array is the first word, the second item is the second word, and so on.</p>
<h2 id=""join"">Join</h2>
<p>The <code>join</code> method is the opposite of the <code>split</code> method. It takes an array of strings and concatenates them while inserting a character in between all the array elements to return a new string.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const array = [""peanut"", ""butter"", ""jelly"", ""time""];
const string = array.join("","");

console.log(string);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">peanut,butter,jelly,time</code>
</pre>

<h2 id=""indexof"">indexOf</h2>
<p>The <code>indexOf</code> method returns to you the index in the array where the item you pass as a parameter is found. Simply put, pass along what you want to find and <code>indexOf</code> will tell you where it's at. Let's see an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const array = [""Tilted Towers"", ""Pleasant Park"", ""Greasy Grove"", ""Fatal Fields""];
const index = array.indexOf(""Greasy Grove"");

console.log(index);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">2</code>
</pre>
<p>In our example, we had an array of 4 elements, and we wanted to know what index <code>Greasy Grove</code> was in. Upon calling <code>indexOf</code>, the result was <code>2</code>. That makes sense when you remember that the first element in an array has an index of <code>0</code> and not <code>1</code>. That is why the third element in the array has an index of <code>2</code>.</p>
<aside class=""aside__warning"">
<p>    Keep in mind that <code>indexOf</code> returns the index of the <strong>first</strong> time an element appears in the array. If there are multiple instances of the same element, the first/lowest index will be returned.</p>
</aside>
<h2 id=""lastindexof"">lastIndexOf</h2>
<p>As you might imagine, <code>lastIndexOf</code> is very similar to <code>indexOf</code> except instead of returning the first/lowest index the element appears in, it returns the last. Let's try using the method to search for an element found multiple times.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const array = [""Tilted Towers"", ""Pleasant Park"", ""Greasy Grove"", ""Fatal Fields"", ""Pleasant Park"", ""Loot Lake""];
const index = array.lastIndexOf(""Pleasant Park"");

console.log(index);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">4</code>
</pre>
<p>The element we used <code>lastIndexOf</code> with appears twice in our array, but since the method returns the last index, it returned <code>4</code> instead of <code>1</code>.</p>

<h2 id=""includes"">includes</h2>
<p>The <code>includes</code> method return a boolean indicating if the element you pass in as a parameter exists in the array. It will return <code>true</code> if the element exists, or <code>false</code> if it does not.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const array = [""Tilted Towers"", ""Pleasant Park"", ""Greasy Grove"", ""Fatal Fields"", ""Pleasant Park"", ""Loot Lake""];
const a = array.includes(""Tilted Towers"");
const b = array.includes(""Retail Row"");

console.log(a);
console.log(b);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true
false</code>
</pre>
<h2 id=""find"">find</h2>
<p>The <code>find</code> method is a pretty useful method that returns the first element that passes a test that you define. You define a test as a function that takes an element as a parameter and returns <code>true</code> if the element passed the test or <code>false</code> if the element failed the test. The first element to pass the test gets returned. Let's see an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const ages = [43, 24, 37, 28, 49, 68, 63, 21, 63, 79];

function canRetire(number) {
    return number &gt;= 65;
}

console.log(ages.find(canRetire));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">68</code>
</pre>
<p>Since <code>68</code> was the first element in the array to pass the test, which was to be equal to or greater than <code>65</code>, that number was returned.</p>
<aside class=""aside__tip"">
<p>    If no elements pass the test, it will return <code>undefined</code>.</p>
</aside>

<h2 id=""findindex"">findIndex</h2>
<p>The <code>findIndex</code> method simply returns the index of the element you would have gotten if you used <code>find</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const ages = [43, 24, 37, 28, 49, 68, 63, 21, 63, 79];

function canRetire(number) {
    return number &gt;= 65;
}

console.log(ages.findIndex(canRetire));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">5</code>
</pre>
<p>The sixth element with the index of <code>5</code> was returned since it was the first element to pass the test.</p>
<aside class=""aside__tip"">
<p>    If no elements passes the test, it will return <code>-1</code>.</p>
</aside>
<h2 id=""reverse"">Reverse</h2>
<p>You can reverse all the elements of an array by calling JavaScript's <code>reverse</code> method on an array.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const cities = [""New York"", ""Boston"", ""Los Angeles"", ""Houston"", ""Miami"", ""Chicago""];
cities.reverse();

console.log(cities);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">(6) [""Chicago"", ""Miami"", ""Houston"", ""Los Angeles"", ""Boston"", ""New York""]</code>
</pre>

<h2 id=""every"">Every</h2>
<p>The method <code>every</code> can be used to ensure that <strong>every</strong> element in the array meets a certain criteria. You can define this criteria by passing in a function the returns a boolean representing whether or not that criteria was met. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const ages = [23, 52, 42, 32, 19];

function isAnAdult(age) {
    return age &gt;= 18;
}

console.log(ages.every(isAnAdult));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true</code>
</pre>
<p>Since every number is equal to or greater than <code>18</code>, the <code>every</code> method returned <code>true</code>. Watch when a single value does not meet the criteria though:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const ages = [23, 52, 15, 32, 19];

function isAnAdult(age) {
    return age &gt;= 18;
}

console.log(ages.every(isAnAdult));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">false</code>
</pre>
<p>As you might expect, because a single number in the entire array did not meet the criteria of being greater than or equal to <code>18</code>, the <code>every</code> method returned <code>false</code>.</p>
<h2 id=""some"">Some</h2>
<p>The <code>some</code> method is sort of like the inverse of the <code>every</code> method. While <code>every</code> requires that all elements meet the criteria, the <code>some</code> method only requires a single element to meet the criteria. In other words, only <strong>some</strong>, even a single element, need to meet the criteria for the entire method to return <code>true</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const numbers = [64, 23, 86, 38, 47, 119];

function isTripleDigit(number) {
    return number &gt;= 100;
}

console.log(numbers.some(isTripleDigit));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true</code>
</pre>
<p>Since we had a single element that was a triple-digit number, <code>119</code>, the method returned <code>true</code>, but watch when we do not have a single element that meets the criteria:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const numbers = [64, 23, 86, 38, 47, 32];

function isTripleDigit(number) {
    return number &gt;= 100;
}

console.log(numbers.some(isTripleDigit));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">false</code>
</pre>
<p>No elements in our array was a triple-digit number so the <code>some</code> method returned <code>false</code>.</p>

<h2 id=""foreach"">forEach</h2>
<p>The <code>forEach</code> method calls a function you provide on every element in your array, in the order they appear in the array. It automatically passes in the element and index for you. This is another way you can iterate across an entire array and do something with each element.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const greetings = [""hello"", ""hola"", ""ciao"", ""bonjour""];

function logGreeting(element, index) {
    console.log(index, element);
}

greetings.forEach(logGreeting);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">0 ""hello""
1 ""hola""
2 ""ciao""
3 ""bonjour""</code>
</pre>
<h2 id=""map"">Map</h2>
<p>The <code>map</code> function creates a new array from an existing one after calling a function on every element. Consider this scenario:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const names = [""Bill"", ""Kelly"", ""John""];

const intros = names.map(function(name) {
    return ""My name is "" + name;
});

console.log(intros);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""My name is Bill"", ""My name is Kelly"", ""My name is John""]</code>
</pre>
<p>It took every element from the <code>names</code> array, pre-pended every string element with <code>My name is </code> and the result was a new array with three brand-new strings.</p>
<p>This function does not alter the original array.</p>

<h2 id=""filter"">Filter</h2>
<p>The <code>filter</code> method is useful for, well, filtering out elements you don't want from an array to form a new one.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const numbers = [1, 2, 3, 4, 5, 6, 7, 8];

const odd = numbers.filter(function(number) {
    return number % 2 == 1;
});

console.log(odd);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[1, 3, 5, 7]</code>
</pre>
<p>Essentially, your filter function simply needs to return <code>true</code> or <code>false</code>. Only elements that cause the function to return <code>true</code> end up moving on to the new array, and the rest are filtered out.</p>
<h2 id=""reduce"">Reduce</h2>
<p>The <code>reduce</code> method goes over every element and collects some information about each element, and then finally returns the collective result.</p>
<p>A simple way to demonstrate <code>reduce</code> is to use it to sum up all the numbers in an array.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const numbers = [1, 2, 3, 4, 5, 6, 7, 8];

const total = numbers.reduce(function(total, number) {
    return total + number;
});

console.log(total);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">36</code>
</pre>
<p>Instead of adding the numbers together, you can do anything you'd like and <code>reduce</code> will return the final result for you.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"" rel=""noopener"" target=""_blank"">Array</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Objects, Properties and Methods","javascript-objects-properties-and-methods","Objects in JavaScript represent a collection of properties and methods that belong to the same entity.","DRAFT","

<p>An <strong>object</strong> in JavaScript is a collection of attributes that collectively describe a ""thing"". That ""thing"" could be anything you want: a pencil, a person, a hat, or a car.</p>
<p>An object represents a single entity that can manipulate its own data and interact with the rest of your program.</p>
<h2 id=""creation"">Creation</h2>
<p><strong>Creating</strong> an object is pretty easy, you just need to determine what attributes it has, like any primitive data types, arrays, functions or other objects that make it up.</p>
<p>Let's create a <strong>dog</strong> object. A dog can have a <code>name</code>, an <code>age</code>, and can <code>bark</code>. Here's how a dog object could look like:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const dog = {
    name: ""Cooper"",
    age: 3,
    bark: function () {
        console.log(""BORK BORK"");
    }
};</code>
</pre>
<p>This creates a new object with the properties <code>name</code>, <code>age</code>, and <code>bark</code>, and initializes the variable <code>dog</code> to that. <code>name</code> is a string, <code>age</code> is a number, and <code>bark</code> is a function.</p>

<h2 id=""retrieval"">Retrieval</h2>
<p>To retrieve data back from your object, or invoke any functions from them, you can use the <strong>dot syntax</strong>. This prints out the <code>name</code> and <code>age</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(dog.name);
console.log(dog.age);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Cooper
3</code>
</pre>
<p>Great, we got back the data that we put in, but now what about for functions? Well for those, all you need to do is <strong>invoke</strong> the functions.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">dog.bark();</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">BORK BORK</code>
</pre>
<h2 id=""reassignment"">Reassignment</h2>
<p>Assigning existing properties to a new value is very easy. Let's say you forgot your dog's birthday and he's actually 4 years old, this is how you correct that:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">dog.age = 4;</code>
</pre>
<p>This reassigns the property <code>age</code> to the value <code>4</code>.</p>
<p>If <code>age</code> was a property that didn't exist before, it would have created it. In other words, adding brand new properties after you created the object is as easy as this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">dog.weight = 20;</code>
</pre>
<p>Now your <code>dog</code> object has a new property <code>weight</code> with a value of <code>20</code>.</p>
<p>Feel free to print out your object, which will list out all of the properties and methods that it contains.</p>
<figure>
<img alt=""Printing out an object."" height=""430"" loading=""lazy"" src=""https://sabe.io/classes/javascript/objects/object-console-log.png"" width=""736""/>
<figcaption>Printing out an object.</figcaption>
</figure>

<h2 id=""functions"">Functions</h2>
<p>Similar to arrays, JavaScript provides built-in functions to make working with <strong>objects</strong> easier, and below are a few of the most useful ones.</p>
<h3>HasOwnProperty</h3>
<p>As the name implies, the <code>hasOwnProperty</code> method lets you check if an object has a property or not. It's useful for checking if an object has a property that you're looking for.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const dog = {
    name: ""Cooper"",
    age: 3,
    bark: function () {
        console.log(""BORK BORK"");
    }
};

console.log(dog.hasOwnProperty(""name""));
console.log(dog.hasOwnProperty(""weight""));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">true
false</code>
</pre>
<p>Because <code>dog</code> has a <code>name</code> but not a <code>weight</code>, the first method call returned <code>true</code> and the second returned <code>false</code>.</p>

<h3>Keys</h3>
<p>If instead of checking a single key you want all the keys, use the <code>keys</code> method. This method returns an array containing all of the object's keys.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const dog = {
    name: ""Cooper"",
    age: 3,
    bark: function () {
        console.log(""BORK BORK"");
    }
};

console.log(Object.keys(dog));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""name"", ""age"", ""bark""]</code>
</pre>
<aside class=""aside__warning"">
<p>    Keep in mind that the keys might not always be in order.</p>
</aside>
<h3>Values</h3>
<p>If you want to get back all the values of an object instead of the keys, there's the <code>values</code> method. This method returns an array containing all the values of the JavaScript object.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const dog = {
    name: ""Cooper"",
    age: 3,
    bark: function () {
        console.log(""BORK BORK"");
    }
};

console.log(Object.values(dog));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">[""Cooper"", 3, ?]</code>
</pre>
<p>The <code>?</code> there is representing the <code>bark</code> function.</p>
<aside class=""aside__warning"">
<p>    As with the <code>keys</code> method, the array returned by <code>values</code> might not necessarily be in order.</p>
</aside>

<h3>Entries</h3>
<p>Finally, if you just want both the keys and the values of an object, you can retrieve all the entries using the <code>entries</code> function.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const dog = {
    name: ""Cooper"",
    age: 3,
    bark: function () {
        console.log(""BORK BORK"");
    }
};

const entries = Object.entries(dog);
console.log(entries);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">0: [""name"", ""Cooper""]
1: [""age"", 3]
2: [""bark"", ?]</code>
</pre>
<p>You can use <code>entries</code> to iterate over the object's keys and values.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const dog = {
    name: ""Cooper"",
    age: 3,
    bark: function () {
        console.log(""BORK BORK"");
    }
};

for (const [key, value] of Object.entries(dog)) {
    console.log(`${key}: ${value}`);
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">name: Cooper
age: 3
bark: ?</code>
</pre>
<p>As you might imagine, objects are extremely flexible, versatile, and useful in JavaScript and you will soon find yourself using them pretty often.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" rel=""noopener"" target=""_blank"">Object - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Classes","javascript-classes","Classes in JavaScript provide a blueprint for the creation of objects which helps organize our code and reduce complexity.","DRAFT","<p><strong>Classes</strong> in JavaScript provide a blueprint for the creation of objects. This means that once you define a class (including its member variables and methods), you can endlessly create new objects from it. This is useful because it allows us to reduce the amount of code we need to write when we want multiple objects that are similar to one another. This is also useful because it allows us to reuse code.</p>
<h2 id=""defining-a-class"">Defining a Class</h2>
<p><strong>Defining a class</strong> in JavaScript is simple thanks to the built-in <code>class</code> keyword. Let's say we run a pet store and want a JavaScript object to represent each pet. Thus, we can create a <code>Pet</code> class.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">class Pet {

}
const pet = new Pet();
console.log(pet);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Pet {}</code>
</pre>
<p>We have created a new <code>Pet</code> object using our defined class, assigned it to the <code>pet</code> variable, and printed it out.</p>
<aside class=""aside__tip"">
<p>    Since we didn't define anything inside <code>Pet</code>, the objects created out of the class are essentially useless.</p>
</aside>
<p>But let's make our <code>Pet</code> class useful.</p>

<h2 id=""constructing-a-class"">Constructing a Class</h2>
<p>How you construct a class is just going to depend on what you need the class to do. In our case, since they represent a pet in a pet store, we should probably have variables for the pet's name, weight (in pounds) and price (in USD).</p>
<pre class=""pre__block"">	<code class=""language-javascript"">class Pet {
    constructor(name, weight, price) {
        this.name = name;
        this.weight = weight;
        this.price = price;
    }

    printInfo() {
        return ""Hi, my name is "" + this.name + "". I weigh "" + this.weight + "" pounds and cost $"" + this.price + ""."";
    }
}
const pet = new Pet(""Fluffy"", 20, 200);
console.log(pet);
console.log(pet.printInfo());</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Pet {
    name: ""Fluffy"",
    weight: 20,
    price: 200
}
Hi, my name is Fluffy. I weigh 20 pounds and cost $200.</code>
</pre>
<p>In this case, we are using the <code>constructor</code> keyword. You can think of <code>constructor</code> as just a special function that asks for the data required to create a new object out of the class. Since we want every pet to have a name, weight and price, we are specifying that in our constructor.</p>
<aside class=""aside__tip"">
<p>    Our constructor is just setting the object's name, weight and price properties to that values we passed in.</p>
</aside>
<p>If you noticed, we also defined a <code>printInfo</code> function that simply returns back a user-friendly string that describes the pet.</p>
<p>As mentioned before, the cool thing about classes is that you no longer need to define multiple objects but instead can use one common class. Look how easy it would be to define three different pets:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">class Pet {
    constructor(name, weight, price) {
        this.name = name;
        this.weight = weight;
        this.price = price;
    }

    printInfo() {
        return ""Hi, my name is "" + this.name + "". I weigh "" + this.weight + "" pounds and cost $"" + this.price + ""."";
    }
}

const pet1 = new Pet(""Oreo"", 15, 300);
console.log(pet1.printInfo());

const pet2 = new Pet(""Dashy"", 25, 400);
console.log(pet2.printInfo());

const pet3 = new Pet(""Ninja"", 20, 350);
console.log(pet3.printInfo());</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Hi, my name is Oreo. I weigh 15 pounds and cost $300.
Hi, my name is Dashy. I weigh 25 pounds and cost $400.
Hi, my name is Ninja. I weigh 20 pounds and cost $350.</code>
</pre>
<h2 id=""class-inheritance"">Class Inheritance</h2>
<p>While our current solution works for now, it can certainly be improved upon. Our <code>Pet</code> class doesn't offer any distinction between a cat or a dog, which each would have additional information that doesn't apply to the other. Luckily for us, JavaScript offers <strong>class inheritance</strong>, which means we can create new classes that inherit everything from another, but adds unique information for itself.</p>
<p>This means that since a dog is still a pet, we can just inherit from the <code>Pet</code> class and add any dog-specific stuff in the <code>Dog</code> class. To keep things basic, let's add the ability to bark if it's a dog.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">class Dog extends Pet {
    bark() {
        console.log(""BARK BARK BARK"");
    }
}

const dog = new Dog(""Cooper"", 20, 200);
console.log(dog.printInfo());

dog.bark();</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Hi, my name is Cooper. I weigh 20 pounds and cost $200.
BARK BARK BARK</code>
</pre>
<p>We created a new <code>Dog</code>, but since it is still a pet because we <strong>inherited</strong> from the <code>Pet</code> class, it was able to both <code>bark</code>, something only dogs can do, but also return back info thanks to the <code>printInfo</code> function, something any pet can do.</p>
<p>The information we passed to the <code>Dog</code> class is automatically passed to the <code>Pet</code> class which is how <code>printInfo</code> worked as expected.</p>

<h2 id=""function-overriding-and-super-keyword"">Function Overriding and Super Keyword</h2>
<p>To serve as an introduction to another useful JavaScript feature, let's create a <code>Cat</code> class. This time, we'll have all cats have a unique feature that they each have a favorite brand of cat food, and thus will need a string to keep track of that.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">class Cat extends Pet {
    constructor(name, weight, price, brand) {
        super(name, weight, price);
        this.brand = brand;
    }
    getFavoriteBrand() {
        return this.brand;
    }
    printInfo() {
        return ""Hi, I'm a cat named "" + this.name + "" and I like "" + this.brand +  "". I weigh "" + this.weight + "" pounds and cost $"" + this.price + ""."";
    }
}

const honey = new Cat(""Honey"", 15, 300, ""Purina"");
console.log(honey.printInfo());
console.log(honey.getFavoriteBrand());</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Hi, I'm a cat named Honey and I like Purina. I weigh 15 pounds and cost $300.
Purina</code>
</pre>
<p>A couple of very interesting things is happening here. First, in the constructor for <code>Cat</code>, you'll notice the <code>super</code> keyword. This is simply <strong>manually</strong> calling the constructor of the class that <code>Cat</code> is inheriting from, in this case, the <code>Pet</code> class. The only reason this is needed is because we added a new parameter to the constructor of <code>Cat</code>, and that is the <code>brand</code> string.</p>
<p>Since <code>brand</code> is unique to cats, we assign it under the <code>super</code> call.</p>
<p>The second interesting thing that is happening here is that we defined a <code>printInfo</code> function inside <code>Cat</code>, even though there is already one inside <code>Pet</code>. When we do this, we are <strong>overriding</strong> the function, which means that cats will use the one defined in <code>Cat</code> instead of <code>Pet</code>, which is what we want.</p>
<aside class=""aside__tip"">
<p>    This is why when we call <code>honey.printInfo()</code>, we get the customized string that includes the cat's favorite brand of food, a feature not available to dogs (or really any non-cat pet because it is only defined in <code>Cat</code>).</p>
</aside>
<p>Classes in JavaScript are extremely useful and versatile, as these examples have hopefully shown. You can define base classes (the <code>Pet</code> class) and create an endless number of classes that inherit from it (the <code>Dog</code> and <code>Cat</code> classes) which have their own unique features and functionality only private to them, which still retaining the features and functionality available to all.</p>
<p>You could even go further and have different breeds of dogs and cats have their own classes that inherit from the <code>Dog</code> and <code>Cat</code> class!</p>
<h2 id=""private-class-fields"">Private Class Fields</h2>
<p>Relatively new to JavaScript are <strong>private class fields</strong>. A class field is a variable that is maintained inside a class. Previously, there was no way to denote that a field should only be accessible to the class itself and not for outsiders. We got around this limitation by adding an underscore in the variable name. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">class Number {
    _value = 0;

    increment() {
        this._value++;
    }
}</code>
</pre>
<p>To other developers, the underscore would imply that the variable is only meant to be accessed internally, but nothing prevented you from doing this in another file:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const number = new Number();
console.log(number._value);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">0</code>
</pre>
<p>However, with the introduction of truly private class fields, we can let JavaScript enforce this for us:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">class Number {
    #value = 0;

    increment() {
        this.#value++;
    }
}</code>
</pre>
<p>Now if you try doing the same thing as before and try to access the variable directly, you will get an error:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const number = new Number();
console.log(number.#value);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Uncaught SyntaxError: Private field '#value' must be declared in an enclosing class</code>
</pre>
<aside class=""aside__tip"">
<p>    Enforcing privacy is a great way to ensure that data inside your class is only manipulated using functions that are defined in the class.</p>
</aside>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"" rel=""noopener"" target=""_blank"">Classes - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Sets","javascript-sets","Sets in JavaScript are collections of elements that only allow unique values and ignores any duplicates.","DRAFT","

<p><strong>Sets</strong> are an object type that let you create a collection of values that <strong>must be unique</strong>. This is useful in cases when you are faced with potential duplicates, but only want to store a single instance of that value. Any duplicates are ignored.</p>
<figure>
<img alt=""Sets are like these buckets: they're unique."" height=""595"" loading=""lazy"" src=""https://sabe.io/classes/javascript/sets/sets.png"" width=""800""/>
<figcaption>Sets are like these buckets: they're unique.</figcaption>
</figure>
<h2 id=""creating-a-set"">Creating a Set</h2>
<p><strong>Creating a set</strong>, like creating any object is extremely simple in JavaScript.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const set = new Set();</code>
</pre>
<p>That's it, you're now ready to add elements to your set.</p>

<h2 id=""add"">Add</h2>
<p>Once you have created your set, adding elements to it is similar to adding elements to an array. Simply call the <code>add</code> method on your set with the element you want to add. The element will be added to the set.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const set = new Set();

set.add(""Facebook"");
set.add(""Twitter"");
set.add(""LinkedIn"");

console.log(set);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">{""Facebook"", ""Twitter"", ""LinkedIn""}</code>
</pre>
<p>Great, you added elements to your set, but watch what happens if you try adding <code>Facebook</code> twice.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const set = new Set();

set.add(""Facebook"");
set.add(""Twitter"");
set.add(""LinkedIn"");
set.add(""Facebook""); // duplicate

console.log(set);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">{""Facebook"", ""Twitter"", ""LinkedIn""}</code>
</pre>
<p>Just as expected, the second <code>Facebook</code> was ignored because it <strong>already existed</strong> in the set, and therefore was a duplicate.</p>
<h2 id=""size"">Size</h2>
<p>Sets give you a very straight-forward way to get back the <strong>size</strong> of your set. Simply use the <code>size</code> property.</p>
<p>Using the same scenario above:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const set = new Set();

set.add(""Facebook"");
set.add(""Twitter"");
set.add(""LinkedIn"");
set.add(""Facebook""); // duplicate

console.log(set.size);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">3</code>
</pre>
<p>Our set only contains <code>3</code> elements despite having added four elements because one was a duplicate.</p>

<h2 id=""has"">Has</h2>
<p>When you want to check if a set contains an element, call the <code>has</code> method on it. This method will return <code>true</code> if the element is in the set, and <code>false</code> if it's not.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const set = new Set();

set.add(""Cake"");
set.add(""Muffin"");
set.add(""Donut"");

console.log(set.has(""Donut""));
console.log(set.has(""Cookie""));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">true
false</code>
</pre>
<h2 id=""delete"">Delete</h2>
<p><strong>Deleting</strong> an element from a set is as simple as calling the <code>delete</code> method, and passing in the element you want removed. This will return <code>true</code> if the element was deleted, and <code>false</code> if it wasn't.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const set = new Set();

set.add(""Cake"");
set.add(""Muffin"");
set.add(""Donut"");

console.log(set);

set.delete(""Cake"");

console.log(set);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">{""Cake"", ""Muffin"", ""Donut""}
{""Muffin"", ""Donut""}</code>
</pre>

<h2 id=""clear"">Clear</h2>
<p>To wipe a set clean of all of its elements, call the <code>clear</code> method on it. It resets a set as if you had just created a new one. This is useful if you want to start fresh.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const set = new Set();

set.add(""Cake"");
set.add(""Muffin"");
set.add(""Donut"");

set.clear(); // RIP elements

console.log(set);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">{}</code>
</pre>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"" rel=""noopener"" target=""_blank"">Set - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Maps","javascript-maps","Maps in JavaScript are collections of key-value pairs that adds new entries to the data structure like a dictionary.","DRAFT","

<p><strong>Maps</strong> in JavaScript are an object type that allow you to store collections in key-value pairs. You can think of how a dictionary works in the sense that if you want to know the definition of a word (the value), you only need to locate the word itself (the key).</p>
<figure>
<img alt=""Use maps when you want to store key-value pairs."" height=""319"" loading=""lazy"" src=""https://sabe.io/classes/javascript/maps/maps.png"" width=""500""/>
<figcaption>Use maps when you want to store key-value pairs.</figcaption>
</figure>
<h2 id=""creating-a-map"">Creating a Map</h2>
<p><strong>Creating a map</strong> in JavaScript is the same as creating any object; using the <code>new</code> keyword.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const map = new Map();</code>
</pre>
<p>With your map defined, you can move on to adding elements to it.</p>

<h2 id=""set"">Set</h2>
<p>Adding an element to a map is done by <strong>setting</strong> an element. The idea here is that you're ""setting"" an entry into your map. The syntax is:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const map = new Map();

map.set(""red"", ""apple"");
map.set(""blue"", ""blueberry"");
map.set(""green"", ""pear"");

console.log(map);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">0: {""red"" =&gt; ""apple""}
1: {""blue"" =&gt; ""blueberry""}
2: {""green"" =&gt; ""pear""}</code>
</pre>
<p>Keep in mind that there can only be a single value assigned to each key. If you set <code>red</code> to <code>cherry</code>, the old value of <code>apple</code> is lost. Let's see what happens if you try to set <code>red</code> to <code>cherry</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const map = new Map();

map.set(""red"", ""apple"");
map.set(""red"", ""cherry"");

console.log(map);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">0: {""red"" =&gt; ""cherry""}</code>
</pre>
<p>The value of <code>red</code> is now <code>cherry</code> instead of <code>apple</code>.</p>
<h2 id=""get"">Get</h2>
<p>After you have populated a map with some elements, you can <strong>get</strong> them back by using the <code>get</code> method and passing in the key. The value that is returned is the value that was set for that key.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const map = new Map();

map.set(""red"", ""apple"");
map.set(""blue"", ""blueberry"");
map.set(""green"", ""pear"");

const item = map.get(""blue"");
console.log(item);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">blueberry</code>
</pre>
<p>Great, we got back the value for the given key.</p>

<h2 id=""size"">Size</h2>
<p>Getting the <strong>size</strong> of a map is as simple as just using the <code>size</code> property. The size of a map is the number of elements that are in the map. The following example shows how to get the size of a map:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const map = new Map();

map.set(""red"", ""apple"");
map.set(""blue"", ""blueberry"");
map.set(""green"", ""pear"");

console.log(map.size);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">3</code>
</pre>
<h2 id=""has"">Has</h2>
<p>Instead of getting an element and then checking if it is <code>null</code> or even if it exists at all, you can use the <code>has</code> method to check if a map has a key and it returns <code>true</code> if it exists and <code>false</code> if not. The following example shows how to use the <code>has</code> method:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const map = new Map();

map.set(""red"", ""apple"");
map.set(""blue"", ""blueberry"");
map.set(""green"", ""pear"");

console.log(map.has(""red""));
console.log(map.has(""yellow""));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">true
false</code>
</pre>

<h2 id=""delete"">Delete</h2>
<p>To get rid of an element in a map after it has been set, call the <code>delete</code> method on it and pass in the key. The following example shows how to use the <code>delete</code> method:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const map = new Map();

map.set(""red"", ""apple"");
map.set(""blue"", ""blueberry"");
map.set(""green"", ""pear"");

map.delete(""blue"");

console.log(map);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">0: {""red"" =&gt; ""apple""}
1: {""green"" =&gt; ""pear""}</code>
</pre>
<p>With <code>blue</code> deleted, only <code>red</code> and <code>green</code> exist.</p>
<h2 id=""clear"">Clear</h2>
<p><strong>Clearing</strong> a map will delete all elements inside it, resetting it to a state as if it were a brand-new map. The following example shows how to use the <code>clear</code> method:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const map = new Map();

map.set(""red"", ""apple"");
map.set(""blue"", ""blueberry"");
map.set(""green"", ""pear"");

map.clear();

console.log(map);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">{}</code>
</pre>
<p>Use maps when you want to store key-value pairs and you want to be able to get the value back from a key.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"" rel=""noopener"" target=""_blank"">Map - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Timeouts and Intervals","javascript-timeouts-and-intervals","Timeouts and intervals are used when you want to control exactly when and how often a function is invoked.","DRAFT","

<p>Timeouts and intervals allow you to control when and how often a function is invoked. The two are similar in usage but their functionalities are different, and we'll learn the difference between timeout and interval, along with how to cancel, or clear, them when we are done with them.</p>
<h2 id=""set-timeout"">Set Timeout</h2>
<p>A <strong>timeout</strong> lets you run a function after a certain amount of time has elapsed. This is done with the <code>setTimeout</code> function that takes as its parameters the function to run and in how much time into the future (in milliseconds). The function will be invoked once the time has elapsed.</p>
<p>For example, you can set a timeout to make a function execute <strong>five seconds into the future</strong>:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function sayHello() {
    console.log(""Hello!"");
}

const timeout = setTimeout(sayHello, 5 * 1000);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Hello!</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">function sayHello() {
    console.log(""Hello!"");
}

const timeout = setTimeout(sayHello, 5 * 1000);</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>If you run the code, you will notice that the logging will not happen until five seconds pass. That's the power of timeouts, being able to run code in the future.</p>

<h2 id=""clear-timeout"">Clear Timeout</h2>
<p>So what if we change our mind about running that function in the future? We can <strong>clear</strong> it using the <code>clearTimeout</code> function. This function takes the timeout as its parameter and cancels it.</p>
<p>Let's say we set it to print but immediately change our minds:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function sayHello() {
    console.log(""Hello!"");
}

const timeout = setTimeout(sayHello, 5 * 1000);

clearTimeout(timeout);</code>
</pre>
<p>Because we used <code>clearTimeout</code> on our timeout, it was cleared and no longer active. It will basically act as if it never existed and therefore nothing will get printed on the screen.</p>
<aside class=""aside__warning"">
<p>    Keep in mind that the clearing has to happen before the function is set to execute! Otherwise if the clearing happens afterwards the function will still execute.</p>
</aside>
<h2 id=""set-interval"">Set Interval</h2>
<p><strong>Intervals</strong> are a simpler way of making the same code repeat over and over again, with a set amount of time in between, the interval time. You can think of intervals as basically timeouts that call themselves at the end to start the cycle all over again.</p>
<p>Let's create an interval using <code>setInterval</code> to build a basic timer:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let seconds = 0;

function printTime() {
    seconds++;
    console.log(""Seconds elapsed: "" + seconds);
}

const interval = setInterval(printTime, 1000);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Seconds elapsed: 1
Seconds elapsed: 2
Seconds elapsed: 3
Seconds elapsed: 4
Seconds elapsed: 5</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">let seconds = 0;

function printTime() {
    seconds++;
    console.log(""Seconds elapsed: "" + seconds);
}

const interval = setInterval(printTime, 1000);</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>We are calling <code>printTime</code> once every second and inside that function we are both incrementing the <code>seconds</code> variable and printing it out. As this continues on, it serves as a basic way to keep track of how much time has passed since the page has loaded.</p>

<h2 id=""clear-interval"">Clear Interval</h2>
<p>As with <code>clearTimeout</code>, <code>clearInterval</code> is a way you can <strong>clear your intervals</strong> and prevent it from continuing on forever. Sticking with our timer example, let's say you wanted to stop repeating once you hit <strong>10 seconds</strong>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">let seconds = 0;

function printTimeUntil10() {
    seconds++; // increment seconds by 1
    console.log(""Seconds elapsed: "" + seconds);

    if (seconds === 10) {
        console.log(""10 seconds has elapsed!"")
        clearInterval(interval); // we're done, clear it!
    }
}

const interval = setInterval(printTimeUntil10, 1000);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Seconds elapsed: 1
Seconds elapsed: 2
Seconds elapsed: 3
Seconds elapsed: 4
Seconds elapsed: 5
Seconds elapsed: 6
Seconds elapsed: 7
Seconds elapsed: 8
Seconds elapsed: 9
Seconds elapsed: 10
10 seconds has elapsed!</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">let seconds = 0;

function printTimeUntil10() {
    seconds++; // increment seconds by 1
    console.log(""Seconds elapsed: "" + seconds);

    if (seconds === 10) {
        console.log(""10 seconds has elapsed!"")
        clearInterval(interval); // we're done, clear it!
    }
}

const interval = setInterval(printTimeUntil10, 1000);</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>We have a nifty condition that checks if we finally hit 10 seconds, and once we do, we <strong>clear</strong> the interval so it stops repeating and print out a nice message letting us know that we hit the desired number of seconds.</p>



",0,"standard","lesson"
"JavaScript-Dates","javascript-dates","Learn how to express dates and moments in time using JavaScript's built-in Date object and associated methods.","DRAFT","

<p>JavaScript provides a useful <strong>Date</strong> object that abstracts away a lot of the nitty gritty of working with dates directly. This is great because it allows us to represent moments in time and manipulate them with just a few lines of code.</p>
<figure>
<img alt=""JavaScript makes working with dates easy."" height=""534"" loading=""lazy"" src=""https://sabe.io/classes/javascript/date/calendar.png"" width=""800""/>
<figcaption>JavaScript makes working with dates easy.</figcaption>
</figure>
<h2 id=""creating-a-date"">Creating a Date</h2>
<p><strong>Creating a date</strong> is extremely easy. Simply create a new Date object:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const date = new Date();
console.log(date);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Fri Sep 01 2017 00:00:00 GMT-0400 (Eastern Daylight Time)</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">const date = new Date();
console.log(date);</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>Because no parameters were passed in, JavaScript will just return the <strong>current date and time</strong>. This is a useful default, but it's also possible to create a date with a specific date and time.</p>

<h2 id=""datestring"">Datestring</h2>
<p>You can optionally pass in a string or a number to <code>Date</code> and it will give you back a different date and time. If you pass in a string, or a <strong>Datestring</strong>, it will be parsed with the <code>Date.parse()</code> method to give you back the Date object.</p>
<p>Let's say instead of today you wanted <strong>March 4, 2017</strong>, just pass it in:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const date = new Date(""March 4, 2017"");
console.log(date);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Sat Mar 04 2017 00:00:00 GMT-0500 (Eastern Standard Time)</code>
</pre>
<h2 id=""unix-time"">Unix Time</h2>
<p>In the field of computer science, there is a concept of <strong>Unix time</strong>. This arbitrarily decided moment in time is set to <strong>midnight on January 1st, 1970</strong>.</p>
<p>With that frame of reference in mind, if you pass in a number to a Date object, that number represents the number of milliseconds that have elapsed since then.</p>
<p>Here is <strong>one trillion milliseconds</strong> since then:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const date = new Date(1000000000000);
console.log(date);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Sat Sep 08 2001 21:46:40 GMT-0400 (Eastern Daylight Time)</code>
</pre>
<p>The beauty of this format is that you can represent exact moments in time with a single number, and not have to worry about dates and strings and timezones, as you can derive all the information you need whenever you want. This is a great format for storing data in databases and cookies because it is just a number.</p>

<h2 id=""multiple-parameters"">Multiple Parameters</h2>
<p>Another way of creating new Date objects is by passing in <strong>7 numbers</strong>. These numbers represent, in order, the year, month, day, hour, minute, second, and millisecond.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const date = new Date(2000, 5, 8, 12, 0, 0, 0);
console.log(date);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Thu Jun 08 2000 12:00:00 GMT-0400 (Eastern Daylight Time)</code>
</pre>
<aside class=""aside__tip"">
<p>    The last 4 parameters are optional!</p>
</aside>
<h2 id=""manipulating-dates"">Manipulating Dates</h2>
<p>After you have created your dates, you can manipulate them by either retrieving data from them or setting data in them.</p>

<h3>Getters</h3>
<p>Here are all the methods for getting information from your Date object:</p>
<ul>
<li><strong>getDate()</strong>: Returns the day in the month</li>
<li><strong>getDay()</strong>: Returns the day in the week</li>
<li><strong>getMonth()</strong>: Returns the month</li>
<li><strong>getFullYear()</strong>: Returns the year</li>
<li><strong>getHours()</strong>: Returns the hour</li>
<li><strong>getMinutes()</strong>: Returns the minutes</li>
<li><strong>getSeconds()</strong>: Returns the seconds</li>
<li><strong>getMilliseconds()</strong>: Returns the milliseconds</li>
<li><strong>getTime()</strong>: Returns the milliseconds elapsed since Unix time</li>
</ul>
<p>If you would like to easily test all of these out using the current time, try this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const date = new Date();
console.log(""Date: "" + date);
console.log(""getDate(): "" + date.getDate());
console.log(""getDay(): "" + date.getDay());
console.log(""getMonth(): "" + date.getMonth());
console.log(""getFullYear(): "" + date.getFullYear());
console.log(""getHours(): "" + date.getHours());
console.log(""getMinutes(): "" + date.getMinutes());
console.log(""getSeconds(): "" + date.getSeconds());
console.log(""getMilliseconds(): "" + date.getMilliseconds());
console.log(""getTime(): "" + date.getTime());</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">const date = new Date();
console.log(""Date: "" + date);
console.log(""getDate(): "" + date.getDate());
console.log(""getDay(): "" + date.getDay());
console.log(""getMonth(): "" + date.getMonth());
console.log(""getFullYear(): "" + date.getFullYear());
console.log(""getHours(): "" + date.getHours());
console.log(""getMinutes(): "" + date.getMinutes());
console.log(""getSeconds(): "" + date.getSeconds());
console.log(""getMilliseconds(): "" + date.getMilliseconds());
console.log(""getTime(): "" + date.getTime());</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<aside class=""aside__tip"">
<p>    Keep in mind that the month value in <code>getMonth()</code> starts at <code>0</code> instead of <code>1</code>. For example, the 6th month in our calendar (June) returns a value of <code>5</code>!</p>
</aside>
<h3>Setters</h3>
<p>Here are all the methods for setting information in your Date object:</p>
<ul>
<li><strong>setMonth()</strong>: Sets the month</li>
<li><strong>setDate()</strong>: Sets the day in the month</li>
<li><strong>setFullYear()</strong>: Sets the year</li>
<li><strong>setHours()</strong>: Sets the hour</li>
<li><strong>setMinutes()</strong>: Sets the minutes</li>
<li><strong>setSeconds()</strong>: Sets the seconds</li>
<li><strong>setMilliseconds()</strong>: Sets the milliseconds</li>
<li><strong>setTime()</strong>: Sets the milliseconds elapsed since Unix time</li>
</ul>

<h2 id=""time-between-two-dates"">Time between two dates</h2>
<p>You can calculate the time between two dates by using the <code>Date.getTime()</code> method. Here's an example of getting the days between two dates:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const date1 = new Date(""09/01/2017"");
const date2 = new Date();
const differenceInDays = (date2.getTime() - date1.getTime()) / (1000 * 3600 * 24);
console.log(Math.floor(differenceInDays) + "" days"");</code>
</pre>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"" rel=""noopener"" target=""_blank"">Date - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Document Object Model","javascript-document-object-model","The Document Object Model describes how pages are structured and how you can alter, add, and remove elements.","DRAFT","

<p>The first step to beginning JavaScript for the web is to learn about the <strong>Document Object Model</strong>, or DOM. The DOM is a model that describes how pages are structured, and how you can manipulate that structure.</p>
<p>In other words, understanding the basics of the DOM will make our lives easier in the future when we're creating new elements, altering them, styling them, and deleting them using JavaScript.</p>
<h2 id=""structure"">Structure</h2>
<p>If you noticed from the class on HTML, the tags you wrote were almost always nested inside another tag. For example, your <code>h1</code> tag was nested inside <code>body</code>, and then <code>body</code> was nested inside <code>html</code>.</p>
<p>The tree-like structure with children acting as branches is why the DOM is also referred to as the <strong>DOM tree</strong>.</p>
<p>You can clearly see the defined structure of any page by opening your Developer Tools. As a reminder, right-click and select <strong>Inspect</strong>.</p>
<figure>
<img alt=""Reminder on how to access Developer Tools via Inspect."" height=""415"" loading=""lazy"" src=""https://sabe.io/classes/javascript/document-object-model/inspect.png"" width=""562""/>
<figcaption>Reminder on how to access Developer Tools via Inspect.</figcaption>
</figure>
<p>All of what you see that makes up the page is the <strong>document</strong>. Using JavaScript, you can access the elements on the page via the <code>document</code> object that is exposed to you by your browser.</p>
<p>If you remember from our lesson on objects, you can very easily modify the properties of an object and the <code>document</code> object is no exception.</p>

<h2 id=""getting-elements"">Getting Elements</h2>
<p>Modern browsers allow you to easily get elements from the page. You can choose to get back a single element, and then perform some actions on it, or get back an entire list of elements and then perform multiple actions on them. You can also get back a list of elements that match a certain criteria.</p>
<h3>Single Elements</h3>
<p>Getting back a single element from the page is as easy as using the <code>querySelector</code> method on the <code>document</code> object. This method requires a string which is the selector you want to target.</p>
<p>Below is an example of how to get back an element by its ID, by its tag name, and by its class name.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;querySelector&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id=""apple""&gt;Apples taste good.&lt;/div&gt;
        &lt;div class=""pears""&gt;Pears also taste good.&lt;/div&gt;
        &lt;span&gt;Same goes with oranges.&lt;/span&gt;
        &lt;script&gt;
            const apples = document.querySelector(""#apple"");
            const pears = document.querySelector("".pears"");
            const oranges = document.querySelector(""span"");

            console.log(apples);
            console.log(pears);
            console.log(oranges);
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div id=""apple""&gt;Apples taste good.&lt;/div&gt;
&lt;div class=""pears""&gt;Pears also taste good.&lt;/div&gt;
&lt;span&gt;Same goes with oranges.&lt;/span&gt;</code>
</pre>
<figure>
<img alt=""The output of printing the results of querySelector."" height=""425"" loading=""lazy"" src=""https://sabe.io/classes/javascript/document-object-model/query-selector.png"" width=""772""/>
<figcaption>The output of printing the results of querySelector.</figcaption>
</figure>
<p>Because <code>querySelector</code> takes a string containing the selector, you can do everything you normally can do with CSS, including chaining them.</p>
<p>The method was designed to be flexible and versatile which puts you in full control of what element you want returned back.</p>
<aside class=""aside__tip"">
<p>    Keep in mind that <code>querySelector</code> will return back the first instance of an element that fits your selector, even if there are multiple.</p>
</aside>

<h3>Multiple Elements</h3>
<p>Getting back a list of multiple elements is just as easy as getting back a single one. Just use <code>querySelectorAll</code> and give it the selector you want to target, and if there is more than one element that is targeted, they will all be returned back to you in a nice array.</p>
<p>Let's look at a simple example of this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;querySelectorAll&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""fruit""&gt;Apples taste good.&lt;/div&gt;
        &lt;div class=""fruit""&gt;Pears also taste good.&lt;/div&gt;
        &lt;div class=""fruit""&gt;Same goes with oranges.&lt;/div&gt;
        &lt;script&gt;
            const fruits = document.querySelectorAll("".fruit"");
            console.log(fruits);
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">(3) [div.fruit, div.fruit, div.fruit]</code>
</pre>
<figure>
<img alt=""The output of printing the results of querySelectorAll."" height=""446"" loading=""lazy"" src=""https://sabe.io/classes/javascript/document-object-model/query-selector-all.png"" width=""755""/>
<figcaption>The output of printing the results of querySelectorAll.</figcaption>
</figure>
<p>When you print out <code>fruits</code> it was an array of three elements because there were three elements on the page with the class <code>fruit</code>, the same class we targeted inside <code>querySelectorAll</code>.</p>
<aside class=""aside__tip"">
<p>    Feel free to expand on each element further to see what kind of properties each of them contain!</p>
</aside>
<h2 id=""creating-elements"">Creating Elements</h2>
<p>Elements can be <strong>created</strong> by appending them to an existing element using JavaScript. Let's look at a simple example of creating a new <code>span</code> tag.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Date&lt;/title&gt;
        &lt;style&gt;
            .date {
                font-weight: bold;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;span&gt;Today's date is &lt;/span&gt;
        &lt;script&gt;
            const span = document.createElement(""span"");
            span.setAttribute(""class"", ""date"");
            span.textContent = new Date().toDateString();
            document.body.appendChild(span);
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Adding the date to the page."" height=""322"" loading=""lazy"" src=""https://sabe.io/classes/javascript/document-object-model/date.png"" width=""458""/>
<figcaption>Adding the date to the page.</figcaption>
</figure>
<p>In just a couple of lines of code, we created a new element with the tag <code>span</code>, gave it the class attribute with a value of <code>date</code>, set its text to be today's date converted to a readable string, and then appended it to the body of the page.</p>
<p>If you were to open that file on a different day, the date would reflect that.</p>
<aside class=""aside__tip"">
<p>    Even though we called <code>appendChild</code> on <code>body</code>, the method works on any element, so you can append new elements deep inside the DOM tree.</p>
</aside>

<h2 id=""removing-elements"">Removing Elements</h2>
<p>Just like you can create new elements, you can also remove elements from the DOM tree.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Removing Elements&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""parent""&gt;
            &lt;span class=""kid""&gt;I am a kid that will be removed.&lt;/span&gt;
            &lt;span class=""teen""&gt;I am a teen that will be removed.&lt;/span&gt;
        &lt;/div&gt;
        &lt;script&gt;
            const parent = document.querySelector("".parent"");

            // Method #1
            const kid = document.querySelector("".kid"");
            parent.removeChild(kid);

            // Method #2
            const teen = document.querySelector("".teen"");
            teen.parentNode.removeChild(teen);
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""The page after removing elements."" height=""243"" loading=""lazy"" src=""https://sabe.io/classes/javascript/document-object-model/removing-elements.png"" width=""453""/>
<figcaption>The page after removing elements.</figcaption>
</figure>
<p>There are two ways to remove elements, and both were shown. The <code>kid</code> was removed via <strong>method #1</strong>, where you simply tell the parent element to remove the child you specify.</p>
<p><strong>Method #2</strong>, which is how the <code>teen</code> element was removed, didn't reference the parent directly. It simply called it's own property called <code>parentNode</code> which gets the parent, then you can pass itself as the child to be removed.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model"" rel=""noopener"" target=""_blank"">Document Object Model - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Classes, Properties, Attributes, Styles","javascript-classes-properties-attributes-styles","Using JavaScript, you can manipulate, add, and remove an element's classes, properties, attributes and styles.","DRAFT","

<p>Individual elements in the document object model are the pieces that make up your webpage. Using JavaScript, after you query for them, you can manipulate them to your liking, and we'll go over the most-used manipulations.</p>
<h2 id=""adding-classes"">Adding Classes</h2>
<p>For many different scenarios, you'll want to be able to add a CSS class to an element. After you have queried for your element, like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""apple""&gt;Apples are tasty.&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">const fruit = document.querySelector("".apple"");</code>
</pre>
<p>You can <strong>add a class</strong> to the element, like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const fruit = document.querySelector("".apple"");
fruit.classList.add(""tasty"");</code>
</pre>
<p>Now the element looks like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""apple tasty""&gt;Apples are tasty.&lt;/div&gt;</code>
</pre>

<h2 id=""removing-classes"">Removing Classes</h2>
<p><strong>Removing a class</strong> is the same process in reverse. Once you have an element, you can remove a class from its class list, like so:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const fruit = document.querySelector("".apple"");
fruit.classList.remove(""tasty"");</code>
</pre>
<p>The class is no longer there.</p>
<h2 id=""check-if-element-contains-class"">Check if element contains class</h2>
<p>Finally, to check if an element <strong>contains a class or not</strong>, simply call the <code>contains</code> function on the element's class list.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const fruit = document.querySelector("".apple"");
fruit.classList.add(""tasty"");

if (fruit.classList.contains(""tasty"")) {
    console.log(""This fruit is tasty!"");
} else {
    console.log(""This fruit is not tasty!"");
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">This fruit is tasty!</code>
</pre>

<h2 id=""setting-properties"">Setting Properties</h2>
<p>Properties on DOM elements can be manipulated in JavaScript because they are simply object properties. These are examples of some properties to work with:</p>
<ul>
<li><code>value</code>: The value of a tag (usually found on input tags).</li>
<li><code>href</code>: The link of an anchor.</li>
<li><code>alt</code>: The alternative text of an image.</li>
<li><code>title</code>: Information about an element.</li>
</ul>
<p>Let's say you want to dynamically <strong>set</strong> an anchor tag's <code>href</code> tag:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;a&gt;Click here to go to Sabe.io&lt;/a&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">const link = document.querySelector(""a"");
link.href = ""https://sabe.io"";</code>
</pre>
<p>When the code runs, you'll get this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;a href=""https://sabe.io""&gt;Click here to go to Sabe.io&lt;/a&gt;</code>
</pre>
<h2 id=""getting-properties"">Getting Properties</h2>
<p>Now, let's say you want to get the value of a input text field for a username.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""text"" class=""username""&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">const usernameInput = document.querySelector("".username"");</code>
</pre>
<p>Now that you've gotten the element, all you need to do is access its <code>value</code> property, like so:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const usernameInput = document.querySelector("".username"");
const usernameValue = usernameInput.value;

console.log(usernameValue);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Pikachu</code>
</pre>
<aside class=""aside__tip"">
<p>    Of course, this would only be the case if <code>Pikachu</code> was the username that was typed into the field prior to the code executing!</p>
</aside>
<p>Since this is JavaScript after all, if you really wanted to, you could create your own properties.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;span&gt;Halloween is my favorite holiday.&lt;/span&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">const span = document.querySelector(""span"");
span.holiday = ""Halloween"";

console.log(span.holiday);</code>
</pre>
<p>This would result in the following output on your console:</p>
<pre class=""pre__block"">	<code class=""language-markup"">Halloween</code>
</pre>

<h2 id=""deleting-properties"">Deleting Properties</h2>
<p>If you've created a new property but then decide that you no longer want it, you can use the <code>delete</code> statement on it to get rid of it.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const span = document.querySelector(""span"");
span.holiday = ""Halloween"";
console.log(span.holiday);

delete span.holiday;

console.log(span.holiday);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Halloween
undefined</code>
</pre>
<h2 id=""getting-attributes"">Getting Attributes</h2>
<p>Similar to properties, you can also manipulate an element's attributes. The only difference is that instead of accessing it as a property, this time you are using methods.</p>
<p>To <strong>get an attribute</strong>, simply use <code>getAttribute</code> and then pass in the name of the attribute you want.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;img src=""https://sabe.io/cat.png""&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">const animal = document.querySelector(""img"");
console.log(animal.getAttribute(""src""));</code>
</pre>
<p>Since we are asking for the <code>src</code> attribute, that is what we get back:</p>
<pre class=""pre__block"">	<code class=""language-markup"">https://sabe.io/cat.png</code>
</pre>

<h2 id=""setting-attributes"">Setting Attributes</h2>
<p><strong>Setting</strong> an attribute is just as easy as getting them. Use the <code>setAttribute</code> method which takes two parameters, the name of the attribute, and then its value.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;img src=""https://sabe.io/cat.png""&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">const animal = document.querySelector(""img"");
animal.setAttribute(""alt"", ""This is a picture of a cat."");</code>
</pre>
<p>Running this code gives you this element:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;img src=""https://sabe.io/cat.png"" alt=""This is a picture of a cat.""&gt;</code>
</pre>
<h2 id=""removing-attributes"">Removing Attributes</h2>
<p>Finally, to remove an attribute from an element, use <code>removeAttribute</code> and pass in the name of the attribute you want gone.</p>
<p>Let's remove the <code>alt</code> attribute we just added:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const animal = document.querySelector(""img"");
animal.removeAttribute(""alt"");</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;img src=""https://sabe.io/cat.png""&gt;</code>
</pre>

<h2 id=""dynamically-applying-styles-to-elements"">Dynamically Applying Styles to Elements</h2>
<p>Dynamically applying styles to an element is one of the most powerful techniques you can use when done correctly.</p>
<p>With some basic markup like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div&gt;This is sample text.&lt;/div&gt;</code>
</pre>
<p>You can print out all of the styles being applied to this element and their values with <code>getComputedStyle</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const div = document.querySelector(""div"");
const style = getComputedStyle(div, null);

console.log(style);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">CSSStyleDeclaration</code>
</pre>
<aside class=""aside__tip"">
<p>    The actual output of that console log is way too long to show here. This is definitely something you'll want to try out for yourself! ??</p>
</aside>
<p>Because the styles are all nicely organized for us as properties, adjusting or reading the styles of elements becomes extremely easy.</p>
<p>For example, this is how to turn that <code>div</code>'s background color to red:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const div = document.querySelector(""div"");
div.style.backgroundColor = ""red"";</code>
</pre>
<figure>
<img alt=""Before background color change."" height=""273"" loading=""lazy"" src=""https://sabe.io/classes/javascript/elements/before-background-color.png"" width=""443""/>
<figcaption>Before background color change.</figcaption>
</figure>
<figure>
<img alt=""After background color change."" height=""273"" loading=""lazy"" src=""https://sabe.io/classes/javascript/elements/after-background-color.png"" width=""443""/>
<figcaption>After background color change.</figcaption>
</figure>
<p>This works for every style property, but here are some others you can try out:</p>
<ul>
<li><code>backgroundColor</code>: Adjust the background color.</li>
<li><code>display</code>: Adjust the display value.</li>
<li><code>color</code>: Adjust the text color.</li>
<li><code>border-radius</code>: Adjust the border's radius.</li>
<li><code>padding</code>: Adjust the padding inside an element.</li>
<li><code>margin</code>: Adjust margins around an element.</li>
</ul>
<p>The possibilities here are limited only by your imagination.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents"" rel=""noopener"" target=""_blank"">Manipulating Documents - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Browser Events and Event Listeners","javascript-browser-events-and-event-listeners","Learn how to attach listeners to events triggered by the user and then execute code when those events occur.","DRAFT","

<p>Whenever a user interacts with the page, this action is considered an event. An example of an event can be a click, a hover, a page load, a keypress, and many others things.</p>
<p>Working with events is a large part of creating <strong>interactivity</strong> on your page.</p>
<h2 id=""listening-for-events"">Listening for Events</h2>
<p>To perform an action when an event triggers, you first need to <strong>listen</strong> to it. Listening to an event is basically telling the browser ""hey, when this event occurs, I want to execute this piece of code"".</p>
<p>That piece of code is packaged in the form of a function called the <strong>callback</strong> function, and is provided to the browser.</p>
<p>The browser now listens for the event and once it occurs it will run the callback function, doing whatever it is that you want to happen.</p>

<h2 id=""adding-an-event-listener"">Adding an Event Listener</h2>
<p>The secret that makes this all work is the <code>addEventListener</code> function that is called on an element of your choosing.</p>
<p>The function takes the name of the event you want to listen to as the first parameter, and the function to run when that event happens as the second parameter.</p>
<p>Let's see this in action with a simple click event listener.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Click Event Listener&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;button id=""button""&gt;Click here for a console log!&lt;/button&gt;
        &lt;script&gt;
            // first, get the button
            const button = document.querySelector(""#button"");

            // second, define what you want to happen
            const clickCallback = function(event) {
                console.log(""You've clicked on the button!"");
            }

            // third, add the event listener on the click event
            button.addEventListener(""click"", clickCallback);
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">You've clicked on the button!</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><button id=""button"">Click here for a console log!</button></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">// first, get the button
const button = document.querySelector(""#button"");

// second, define what you want to happen
const clickCallback = function(event) {
    console.log(""You've clicked on the button!"");
}

// third, add the event listener on the click event
button.addEventListener(""click"", clickCallback);</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""Clicking on the button three times."" height=""381"" loading=""lazy"" src=""https://sabe.io/classes/javascript/events/click-listener.png"" width=""490""/>
<figcaption>Clicking on the button three times.</figcaption>
</figure>
<p>By attaching an event listener to our button, the code defined inside <code>clickCallback</code> runs every time we click on the button.</p>
<p>In case you missed it, the callback function receives an object detailing what happened, and it's named <code>event</code>. Here is some of the data when you print out the object:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const clickCallback = function(event) {
    console.log(""You've clicked on the button!"");
    console.log(event);
}</code>
</pre>
<figure>
<img alt=""The MouseEvent has a lot of information."" height=""563"" loading=""lazy"" src=""https://sabe.io/classes/javascript/events/event-console-log.png"" width=""675""/>
<figcaption>The MouseEvent has a lot of information.</figcaption>
</figure>
<p>With the information provided inside <code>event</code>, you can use it to customize the path your code takes inside the function.</p>
<p>Some useful information found in the <code>Mouse Event</code> object include:</p>
<ul>
<li><code>type</code>: What event occurred.</li>
<li><code>timeStamp</code>: When the event occurred.</li>
<li><code>x</code>: The x value of the point where the user clicked on.</li>
<li><code>y</code>: The y value of the point where the user clicked on.</li>
<li><code>target</code>: What element was the targeted element.</li>
</ul>
<h2 id=""inline-event-listeners"">Inline Event Listeners</h2>
<p>An alternative way to accomplish the above is by using <strong>inline event listeners</strong>. That is, to give elements special <strong>attributes</strong> that the browser can interpret to then run your code whenever an event fires.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Click Event Listener&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;button id=""button"" onclick=""clickCallback()""&gt;Click here for a console log!&lt;/button&gt;
        &lt;script&gt;
            function clickCallback(event) {
                console.log(""You've clicked on the button!"");
            }
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">You've clicked on the button!</code>
</pre>
<p>We gave the <code>button</code> element an <code>onclick</code> attribute, with the name of the function we want executed inside and the browser took care of the rest.</p>
<aside class=""aside__warning"">
<p>    In general, however, this approach is not recommended because it violates the <strong>separation</strong> between HTML and JavaScript. Use only when necessary!</p>
</aside>

<h2 id=""more-native-events"">More Native Events</h2>
<p>A click event isn't the only event you can listen to. There are many events you can choose from to create some really great experiences.</p>
<ul>
<li><code>click</code>: When the element has been clicked.</li>
<li><code>keydown</code>: When the user presses down on a key.</li>
<li><code>change</code>: When the element has changed.</li>
<li><code>mouseover</code>: When the element is hovered over.</li>
<li><code>mouseout</code>: When the element is no longer hovered over.</li>
<li><code>mousemove</code>: When the mouse moves while hovered over the element.</li>
<li><code>load</code>: When the document or element has finished loading.</li>
</ul>
<h2 id=""custom-events"">Custom Events</h2>
<p>In addition to the native browser events, you can define, dispatch, and listen to your own custom events. This allows you to create some pretty unique functionality. Let's say you want an event for eating food:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const event = new Event(""eat"");

element.addEventListener(""eat"", function(event) {
    console.log(""Eating food!"");
}, false);

element.dispatchEvent(event);</code>
</pre>
<p>The first bit defines a new event with the name <code>eat</code>. The second bit adds an event listener for that event, and so when that event is fired, the callback function is executed. The last bit is the line of code that dispatches, or fires, the event. Once fired, the listener will pick up on it and run the callback function, logging <code>Eating food!</code> to the console.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"" rel=""noopener"" target=""_blank"">addEventListener - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-JSON","javascript-json","Learn all about JSON, the lightweight and readable data transfer format that powers the web you know today.","DRAFT","

<h2 id=""introduction-to-json"">Introduction to JSON</h2>
<p><strong>JSON</strong> stands for JavaScript Object Notation and is a data format meant to store and transfer data. You've seen a format very similar to it any time you've logged JavaScript objects in your console.</p>
<p>You can think of JSON as a string-representation of the data inside a JavaScript object. As such, JSON supports the following values:</p>
<ul>
<li>string</li>
<li>number</li>
<li>object</li>
<li>array</li>
<li>boolean</li>
<li>null</li>
</ul>
<p>Here's an example of some JSON containing data about a random fictional person:</p>
<pre class=""pre__block"">	<code class=""language-json"">{
    ""name"": ""Josh"",
    ""weight"": 175,
    ""age"": 40,
    ""eyecolor"": ""brown"",
    ""cars"": [ ""Chevy"", ""Toyota"", ""Honda"" ],
    ""favoriteBook"": {
        ""title"": ""When the Fire Nation Attacked"",
        ""author"": ""Nickelodeon"",
        ""released"": ""02-21-2005""
    }
}</code>
</pre>
<p>Javascript and JSON work really together thanks to the methods <code>stringify</code> and <code>parse</code>, provided by the <code>JSON</code> object.</p>
<p>These two methods convert a JavaScript object to JSON and back, so no matter which one you have, you can easily generate the other.</p>

<h2 id=""stringify"">Stringify</h2>
<p>You can use the <code>stringify</code> method to convert a JavaScript object to JSON.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const dog = {
  ""name"": ""Sophie"",
  ""age"": 3,
  ""weight"": 20
}
const dogJSON = JSON.stringify(dog);
console.log(dogJSON);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">{""name"":""Sophie"",""age"":3,""weight"":20}</code>
</pre>
<figure>
<img alt=""Using stringify on a JavaScript object."" height=""380"" loading=""lazy"" src=""https://sabe.io/classes/javascript/json/stringify.png"" width=""542""/>
<figcaption>Using stringify on a JavaScript object.</figcaption>
</figure>
<p><strong>Stringify</strong> took the <code>dog</code> JavaScript object and converted it into a string. That string is now valid JSON and can be saved to a file or transferred over the network.</p>
<h2 id=""parse"">Parse</h2>
<p>To get a JavaScript object from JSON, you must <strong>parse</strong> it, essentially the reverse of using <code>stringify</code>. Using the results we got above, let's parse that JSON and turn it into a JavaScript object:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const json = '{""name"":""Sophie"",""age"":3,""weight"":20}';
const dog = JSON.parse(json);
console.log(dog);</code>
</pre>
<figure>
<img alt=""Parsing JSON into a JavaScript object."" height=""444"" loading=""lazy"" src=""https://sabe.io/classes/javascript/json/parse.png"" width=""542""/>
<figcaption>Parsing JSON into a JavaScript object.</figcaption>
</figure>
<p>Now that <code>dog</code> is a normal JavaScript object, you can now use it as if it were created without JSON at all.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON"" rel=""noopener"" target=""_blank"">JSON - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-AJAX and Fetch","javascript-ajax-and-fetch","Learn what AJAX and fetch is and how to use them to help deliver powerful and real-time experiences to your page.","DRAFT","

<h2 id=""ajax"">AJAX</h2>
<p><strong>AJAX</strong> is a technique for sending or requesting data without have to perform a page load. If you've ever used a single-page application like Gmail and Google Maps, this is how you're able to go through your inbox and navigate through the map without changing the page you're on.</p>
<p>AJAX stands for <strong>Asynchronous JavaScript and XML</strong>. Asynchronous code is code that runs in parallel with something else, so in this case, you can request or send data without affecting your browsing experience.</p>

<h2 id=""xml"">XML</h2>
<p><strong>XML</strong>, standing for <strong>eXtensible Markup Language</strong>, is similar to HTML but is used for data transfer, just like JSON. The only problem is that XML is typically heavily, harder to read and doesn't integrate as gracefully as JSON does with JavaScript.</p>
<p>Here's an example of some XML:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;dog&gt;
    &lt;name&gt;Sophie&lt;/name&gt;
    &lt;age&gt;3&lt;/age&gt;
    &lt;weight&gt;20&lt;/weight&gt;
&lt;/dog&gt;</code>
</pre>
<p>Because of XML's downsides, AJAX, originally created to be used in conjunction with XML, is now more popularly used with JSON instead.</p>
<h2 id=""making-ajax-calls-with-fetch"">Making AJAX Calls with Fetch</h2>
<p>Instead of making AJAX calls using the original method, via an <strong>XMLHttpRequest</strong>, we'll be using the more modern <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"" rel=""noopener"" target=""_blank"">fetch</a> instead.</p>
<p>We'll be using <a href=""https://jsonplaceholder.typicode.com"" rel=""noopener"" target=""_blank"">JSONPlaceholder</a> as the source of the information, and get their posts. If you were to <a href=""https://jsonplaceholder.typicode.com/posts"" rel=""noopener"" target=""_blank"">click here</a>, you'll see the data that we're going to try and fetch.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">// base url
const base = 'https://jsonplaceholder.typicode.com';

// use fetch on the /posts route, then pass the response along
fetch(base + ""/posts"").then(response =&gt; {
    // with the response, convert it to JSON, then pass it along
    response.json().then(json =&gt; {
        // print that JSON
        console.log(json);
    });
});</code>
</pre>
<figure>
<img alt=""The result of using fetch."" height=""417"" loading=""lazy"" src=""https://sabe.io/classes/javascript/ajax-fetch/fetch.png"" width=""617""/>
<figcaption>The result of using fetch.</figcaption>
</figure>
<p>With that data, you can then do whatever it is that you'd like with it. You can add it to the page, perform calculations on it, or pretty much anything.</p>
<aside class=""aside__tip"">
<p>    An important thing to note here is that since this is <strong>asynchronous</strong>, the request for data will run in parallel with the rest of the code running in your browser, which is a good thing!</p>
</aside>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started"" rel=""noopener"" target=""_blank"">AJAX - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"" rel=""noopener"" target=""_blank"">Fetch - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Cookies","javascript-cookies","Cookies let you store small pieces of information on the client. Learn how to create, edit, and delete them in this lesson.","DRAFT","

<p>In the same way that the server can store information about an individual user, the browser, too, can store information. One way to do this is with the use of <strong>cookies</strong>. Cookies are small pieces of information that are stored on the user's computer.</p>
<figure>
<img alt=""Cookies are nice."" height=""362"" loading=""lazy"" src=""https://sabe.io/classes/javascript/cookies/cookies.png"" width=""580""/>
<figcaption>Cookies are nice.</figcaption>
</figure>
<p><strong>Cookies</strong> are a great way to store data about a user on their machine, which you can retrieve whenever you want and perform some action on it.</p>
<p>For example, you can use cookies to remember preferences from the user, displaying their name, or show the last time they visited the website.</p>
<p>Cookies are strings of key/value pairs in a comma-separated list, and therefore requires a bit of work on our end to manipulate them safely. We'll cover this in more detail in the next section.</p>
<h2 id=""creating-a-cookie"">Creating a Cookie</h2>
<p><strong>Creating</strong> a cookie is as easy as setting the value of <code>document.cookie</code> to a string.</p>
<p>Because the string cannot contain any spaces, commas or semicolons, we use the <code>escape()</code> function which removes all of that for us. We also need to add the <code>;</code> at the end of the string, which tells the browser that the cookie is finished.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Creating a Cookie&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script&gt;
            function createCookie(key, value) {
                const cookie = escape(key) + ""="" + escape(value) + "";"";
                document.cookie = cookie;
                console.log(cookie);
                console.log(""Creating new cookie with key: "" + key + "" value: "" + value);
            }
            createCookie(""sport"", ""basketball"");
            createCookie(""icecream"", ""vanilla"");
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Output of creating cookies."" height=""275"" loading=""lazy"" src=""https://sabe.io/classes/javascript/cookies/cookies-developer-tools.png"" width=""543""/>
<figcaption>Output of creating cookies.</figcaption>
</figure>
<p>We created two cookies successfully, and you can check that claim by heading over to the <strong>Application</strong> tab and checking under <strong>Cookies</strong>.</p>
<figure>
<img alt=""List of cookies in the Application tab."" height=""478"" loading=""lazy"" src=""https://sabe.io/classes/javascript/cookies/list-of-cookies.png"" width=""788""/>
<figcaption>List of cookies in the Application tab.</figcaption>
</figure>
<p>Great, so we create two cookies, but look under <code>Expires / Max-Age</code>, you'll see the word <strong>Session</strong>.</p>
<p>What this means is that the cookie will only remain for as long as the user doesn't close the browser window and end the session. Sometimes, you want cookies to remain even after they have ended the connection.</p>
<p>To accomplish this, you have to set a custom expiration date.</p>

<h2 id=""setting-an-expiration-date-on-cookies"">Setting an Expiration date on Cookies</h2>
<p>Setting the <strong>expiration date</strong> on cookies is as simple as giving the cookie a key/value pair where the key is <code>expires</code> and the value is when you want that cookie to expire.</p>
<p>Replace the contents of your <code>script</code> tag with this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function createCookie(key, value, date) {
    const expiration = new Date(date).toUTCString();
    const cookie = escape(key) + ""="" + escape(value) + "";expires="" + expiration + "";"";
    document.cookie = cookie;
    console.log(cookie);
    console.log(""Creating new cookie with key: "" + key + "" value: "" + value + "" expiration: "" + expiration);
}
createCookie(""sport"", ""basketball"", Date.UTC(2017, 8, 1));
createCookie(""icecream"", ""vanilla"", Date.UTC(2017, 8, 1));</code>
</pre>
<figure>
<img alt=""List of cookies in the Application tab."" height=""478"" loading=""lazy"" src=""https://sabe.io/classes/javascript/cookies/expiration-date-cookies.png"" width=""788""/>
<figcaption>List of cookies in the Application tab.</figcaption>
</figure>
<p>When you check the <strong>Applications</strong> tab, you should now see the same cookies created before, but now they have expiration dates, set to expire on <strong>September 1st, 2017</strong>, in this case.</p>
<h2 id=""reading-cookies"">Reading Cookies</h2>
<p><strong>Reading</strong> cookies takes a bit of work because of the format they are stored in. We'll have to use some string manipulation to read them properly.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function readCookie(name) {
    let key = name + ""="";
    let cookies = document.cookie.split("";"");
    for (let i = 0; i &lt; cookies.length; i++) {
        let cookie = cookies[i];
        while (cookie.charAt(0) === "" "") {
            cookie = cookie.substring(1, cookie.length);
        }
        if (cookie.indexOf(key) === 0) {
            return cookie.substring(key.length, cookie.length);
        }
    }
    return null;
}</code>
</pre>
<p>Basically what this function is doing is using the <code>split</code> method to <strong>split</strong> up the entire cookie text into their individual key/value pairs. Then, it is checking each pair to see if it matches with the name provided. If it matches, it returns that value, if not, it returns <code>null</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function createCookie(key, value, date) {
    const expiration = new Date(date).toUTCString();
    console.log(expiration);
    const cookie = escape(key) + ""="" + escape(value) + "";expires="" + expiration + "";"";
    document.cookie = cookie;
    console.log(cookie);
    console.log(""New cookie with key: "" + key + "" value: "" + value + "" expiration: "" + expiration);
}

function readCookie(name) {
    let key = name + ""="";
    let cookies = document.cookie.split("";"");
    for (let i = 0; i &lt; cookies.length; i++) {
        let cookie = cookies[i];
        while (cookie.charAt(0) === "" "") {
            cookie = cookie.substring(1, cookie.length);
        }
        if (cookie.indexOf(key) === 0) {
            return cookie.substring(key.length, cookie.length);
        }
    }
    return null;
}

createCookie(""sport"", ""basketball"", Date.UTC(2017, 8, 1));
createCookie(""icecream"", ""vanilla"", Date.UTC(2017, 8, 1));

console.log(readCookie(""icecream""));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Fri, 01 Sep 2017 00:00:00 GMT
sport=basketball;expires=Fri, 01 Sep 2017 00:00:00 GMT;
New cookie with key: sport value: basketball expiration: Fri, 01 Sep 2017 00:00:00 GMT
Fri, 01 Sep 2017 00:00:00 GMT
icecream=vanilla;expires=Fri, 01 Sep 2017 00:00:00 GMT;
New cookie with key: icecream value: vanilla expiration: Fri, 01 Sep 2017 00:00:00 GMT
vanilla</code>
</pre>
<p>And there you have it, we set a cookie with the key <code>icecream</code> and value <code>vanilla</code>, and then successfully read it.</p>
<aside class=""aside__warning"">
<p>    Don't forget to set an expiration date for the cookies to be sometime in the <strong>future</strong> otherwise it will already be expired!</p>
</aside>

<h2 id=""deleting-cookies"">Deleting Cookies</h2>
<p><strong>Deleting</strong> cookies is extremely easy. All you need to do is set a cookie's <code>expires</code> value to a date in the past. The browser will automatically handle the rest.</p>
<p>Using our previous function <code>createCookie</code>, deleting a cookie is as easy as this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function deleteCookie(name) {
    createCookie(name, """", -1);
}</code>
</pre>
<p>The <code>-1</code> for the cookie's expiration date ensures that the date is in the past, and therefore making the cookie already having expired. The value we pass in doesn't matter because the cookie is being removed anyways.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"" rel=""noopener"" target=""_blank"">HTTP Cookies - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Local Storage and Session Storage","javascript-local-storage-and-session-storage","Local Storage and Session Storage let you store information across sessions or for just a single session.","DRAFT","

<p>The Web Storage API, which includes local storage and session storage, offers us a way to store key value pairs in a more intuitive way than using cookies, even though they all do similar things (store data client-side). With that being said, a major difference between cookies and web storage is that the server can read cookies from a user's browser, but cannot read from local/session storage directly. Therefore, the two have slightly different use cases.</p>
<aside class=""aside__tip"">
<p>    The difference between local and session storage is that local storage persists across multiple sessions whereas session storage only persists for <strong>that single session</strong>.</p>
<p>    The following code will be presented using local storage but you can use session storage simply by replacing <code>localStorage</code> with <code>sessionStorage</code>.</p>
</aside>
<h2 id=""saving-data"">Saving Data</h2>
<p><strong>Saving data</strong> using local storage is straightforward. You simply use the <code>setItem</code> method on the <code>localStorage</code> object. The parameters it takes are the key and values, just like cookies.</p>
<p>Let's save your favorite fast-food restaurant as <code>chipotle</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">localStorage.setItem(""restaurant"", ""chipotle"");</code>
</pre>
<p>That's it. You have now saved an <strong>item</strong> with the key <code>restaurant</code> and value of <code>chipotle</code> locally.</p>
<p>Because the value has to be a string, you can use our friend <code>JSON.stringify</code> to convert a complex JavaScript object into a string suitable for use in local storage.</p>
<p>Here's how you save an object:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const game = {
    ""name"": ""Rocket League"",
    ""release"": 2015,
    ""developer"": ""Psyonix""
};
const gameJSON = JSON.stringify(game);
localStorage.setItem(""game"", gameJSON);</code>
</pre>
<p>If you were to run this, you will have saved a JSON representation of a JavaScript object in local storage.</p>
<figure>
<img alt=""Saving an item in Local Storage."" height=""531"" loading=""lazy"" src=""https://sabe.io/classes/javascript/localstorage-sessionstorage/saving-local-storage.png"" width=""725""/>
<figcaption>Saving an item in Local Storage.</figcaption>
</figure>
<p>To confirm, check your <strong>Application</strong> tab and look under <strong>Local Storage</strong>, and you should see what is shown in the image above.</p>

<h2 id=""reading-data"">Reading Data</h2>
<p><strong>Reading data</strong> from local storage is the same process as saving data, but in the reverse. Instead of <code>setItem</code>, you use <code>getItem</code>.</p>
<p>If you know the value isn't JSON, you can just read it without needing to parse anything.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const restaurant = localStorage.getItem(""restaurant"");

console.log(restaurant);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">chipotle</code>
</pre>
<p>In the case that you know the value is JSON, you just simply need to parse the value to get back your original JavaScript object.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const gameJSON = localStorage.getItem(""game"");
const game = JSON.parse(gameJSON);

console.log(game);</code>
</pre>
<figure>
<img alt=""Reading an item from Local Storage."" height=""448"" loading=""lazy"" src=""https://sabe.io/classes/javascript/localstorage-sessionstorage/reading-local-storage.png"" width=""640""/>
<figcaption>Reading an item from Local Storage.</figcaption>
</figure>
<p>You can make some pretty cool features built around local and session storage, you just need to figure out which one is best for you, and give it a shot.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API"" rel=""noopener"" target=""_blank"">Web Storage API - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Regular Expressions","javascript-regular-expressions","Learn how to use regular expressions search patterns in JavaScript to match text and do advanced find and replace operations.","DRAFT","

<p><strong>Regular expressions</strong> is the technique of defining a sequence of characters to be used in a search pattern. Regular expressions are written in a specific syntax and then usually applied on a larger string of text to see if the string meets the conditions defined in the regular expression. Regular expressions have the general syntax of a pattern and modifier, like so:</p>
<pre class=""pre__block"">	<code class=""language-markup"">/pattern/modifiers</code>
</pre>
<p>The pattern is the sequence of characters and the modifier is a single letter which changes the entire behavior of the regular expression.</p>
<h2 id=""matching-a-single-character"">Matching a Single Character</h2>
<p>Let's start with <strong>matching a single character</strong> (searching a string of text to see if it contains it) as it is the most basic of search patterns. We'll use the United States Pledge of Allegiance as our sample text. Let's say we wanted to see if the character <code>a</code> existed:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const text = ""I pledge allegiance to the Flag of the United States of America, and to the Republic for which it stands, one Nation under God, indivisible, with liberty and justice for all."";
const regex = /a/;

console.log(text.match(regex));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">[
    ""a"",
    index: 9,
    input: ""I pledge allegiance to the Flag of the United States of America, and to the Republic for which it stands, one Nation under God, indivisible, with liberty and justice for all.""
]</code>
</pre>
<p>The resulting log is the pattern used, the index where it was first found, and then the entire input text used. In other words, we found our pattern, <code>a</code>, at the 9th index in our text.</p>

<h2 id=""using-meta-characters"">Using Meta Characters</h2>
<p>With regular expressions we aren't limited to just straight text for our search patterns. We can utilize something called <strong>meta characters</strong> which are characters that have a special meaning. For example, a dot <code>.</code> will match any character:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const text = ""Staten Island isn't a real borough."";
const regex = /rea./;

console.log(text.match(regex));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">[
    ""real"",
    index: 22,
    input: ""Staten Island isn't a real borough.""
]</code>
</pre>
<p>Notice how even though the search pattern didn't include the full word <code>real</code>, the <code>.</code> filled in for the last letter and found <code>real</code> at index <code>22</code>.</p>
<p>Here is a list of meta characters you can use in your regular expressions:</p>
<ul>
<li><code>.</code>:	Any character</li>
<li><code>?</code>:	Makes the previous character optional</li>
<li><code>\w</code>: A word character</li>
<li><code>\W</code>: A non-word character</li>
<li><code>\d</code>: A digit</li>
<li><code>\D</code>: A non-digit character</li>
<li><code>\s</code>: A whitespace character</li>
<li><code>\S</code>: A non-whitespace character</li>
<li><code>\b</code>: A match at the beginning/end of a word</li>
<li><code>\B</code>: A match not at the beginning/end of a word</li>
<li><code>\0</code>: A NUL character</li>
<li><code>\n</code>: A new line character</li>
<li><code>\f</code>: A form feed character</li>
<li><code>\r</code>: A carriage return character</li>
<li><code>\t</code>: A tab character</li>
<li><code>\v</code>: A vertical tab character</li>
</ul>
<h2 id=""using-pattern-modifiers"">Using Pattern Modifiers</h2>
<p>So far, our regular expressions have just been matching the first occurrence of our pattern. Sometimes that is just fine, but sometimes you want to find all occurrences of it. This is where <strong>modifiers</strong> come into play. You can use the global modifier to make your pattern search all of the text. For example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const text = ""Fifteen minutes could save you fifteen percent or more on car insurance."";
const regex = /fifteen/gi;

console.log(text.match(regex));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">(2) [""Fifteen"", ""fifteen""]</code>
</pre>
<p>In this case, we searched for the word <code>fifteen</code> using the global <code>g</code> modifier. However, we also used the case-insensitive modifier so that we could also match <code>Fifteen</code> despite having a capital <code>F</code>. As expected, thanks to both modifiers, we found the word twice.</p>
<p>Here is the list of modifiers you can use:</p>
<ul>
<li><code>i</code>: This makes the searching case-insensitive</li>
<li><code>g</code>: This makes the searching global which prevents it from stopping after the first match</li>
<li><code>m</code>: This makes the searching multiline instead of a single line</li>
</ul>

<h2 id=""matching-using-sets"">Matching using Sets</h2>
<p>In our previous examples, we saw how to match against text and meta characters. We can, however, also match against <strong>sets</strong>, which are characters enclosed inside brackets. For example, the set <code>[123]</code> will match either <code>1</code>, <code>2</code>, or <code>3</code>:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const text = ""I think that 15% is a lot."";
const regex = /[123]/;

console.log(text.match(regex));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">[
    ""1"",
    index: 13,
    input: ""I think that 15% is a lot.""
]</code>
</pre>
<p>This regular expression matched the <code>1</code> at index 13. We can also <strong>negate</strong> this set with the <code>^</code> character:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const text = ""I think that 15% is a lot."";
const regex = /[^123]/;

console.log(text.match(regex));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">[
    ""I"",
    index: 0,
    input: ""I think that 15% is a lot.""
]</code>
</pre>
<p>Because the first character <code>I</code>, is NOT either <code>1</code>, <code>2</code>, or <code>3</code>, it was matched right away. Another way to represent <code>[123]</code> is to create a <strong>range</strong>, like <code>[1-3]</code>. This is useful for trying to match any number or any letter:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const number = /[0-9]/;
const letter = /[a-z]/;</code>
</pre>
<h2 id=""matching-words-and-sentences"">Matching Words and Sentences</h2>
<p>In addition to matching sets and characters, you can also <strong>match words and sentences</strong> by taking advantage of new symbols that denote <strong>repetition</strong>. After all, words and sentences are just repetitions of letters, with some punctuation.</p>
<p>Let's break down what it would mean to match sentences. A sentence starts off with a capital letter, so our regular expression can look like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const regex = /[A-Z]/g;</code>
</pre>
<p>After the capital letter, we don't really care what comes after that, so we can use a <code>.</code> to match anything after that.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const regex = /[A-Z]./g;</code>
</pre>
<p>Now, we need to use repetition to repeat that <code>.</code> as often as needed. We do that using the <code>+</code> sign, which simply repeats the previous set or character.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const regex = /[A-Z].+/g;</code>
</pre>
<p>Now we must define what ends a sentence. For the most part, the end of a sentence is the presence of either a period, question mark, or exclamation point. To represent ""period, or question mark, or exclamation point"", we can add this to our regular expression:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">(\.|?|!)</code>
</pre>
<aside class=""aside__warning"">
<p>    We need to escape the period and question mark by using <code>\</code> so that it gets interpreted as a literal period and not as a meta character.</p>
</aside>
<p>Our regular expression is almost done and now looks like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const regex = /[A-Z].+(\.|\?|!)/g;</code>
</pre>
<p>There is just one final problem left unresolved. The way we have currently defined the regular expression, it will match all our text as one giant sentence, because technically it still begins with a capital letter and ends with either a period, question mark or exclamation point. We need to signal that we as soon as there is a match, to take it and move on. We do this with a <code>question mark</code> meta character.</p>
<p>Our final regular expression looks like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const text = ""Hello. I am sample text! How are you?""
const regex = /[A-Z].+?(\.|\?|!)/g;

console.log(text.match(regex));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">0: ""Hello.""
1: ""I am sample text!""
2: ""How are you?""</code>
</pre>
<p>Here are all the repetition-related symbols, called <strong>quantifiers</strong>:</p>
<ul>
<li><code>+</code>: This repeats the previous character or set one or more times</li>
<li><code>*</code>: This repeats the previous character or set zero or more times</li>
<li><code>?</code>: This repeats the previous character or set zero or one time</li>
<li><code>{a}</code>: This repeats the previous character exactly <code>a</code> number of times</li>
<li><code>{a, b}</code>: This repeats the previous character any number between <code>a</code> and <code>b</code></li>
</ul>
<aside class=""aside__warning"">
<p>    Remember that if you want your regular expression to stop as soon as it finds a match, you must append a <code>?</code> right after it. Otherwise you regular expression will keep going until it finds the last match.</p>
</aside>

<h2 id=""testing-and-validation"">Testing and Validation</h2>
<p>Another popular use case for regular expressions comes from the <code>test</code> function, which, when used on a string, returns a boolean indicating whether or not a match was found. This is great for validating whether or not a string fits a specific format like a URL, email address, username, password, and much more. To test an entire line using a regular expression, you must indicate that with a <code>^</code> character at the start and a <code>$</code> character at the end of the regular expression.</p>
<p>Let's practice by validating a username. For example, let's say your usernames must follow the following two rules:</p>
<ol>
<li>Alphanumeric characters plus dots and dashes only</li>
<li>6 to 12 characters in length</li>
</ol>
<p>You can fulfill the first case using this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const regex = /^[a-zA-Z0-9.-]$/;</code>
</pre>
<p>What we did here was create a set that only includes lowercase <code>a-z</code>, uppercase <code>A-Z</code>, the numbers <code>0-9</code> and then the two extra characters <code>.</code> and <code>-</code>. Then to indicate that we want this to apply to the entire string, we wrapped it with a <code>^</code> and <code>$</code>.</p>
<p>Now we enforce the size using one of the quantifiers we learned about above:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const regex = /^[a-zA-Z0-9.-]{6,12}$/;</code>
</pre>
<p>We added <code>{6,12}</code> so that the regex only matches when the length is within those constraints. Now let's actually test this out:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const regex = /^[a-zA-Z0-9.-]{6,12}$/;
const usernames = ['Username',
                'U.sername',
                'U53RN4M3',
                'user',
                '<a class=""__cf_email__"" data-cfemail=""4c393f293e220c2129"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>',
                'usernamezzzzz'];
for (let name in usernames) {
    console.log(usernames[name] + "": "" + regex.test(usernames[name]));
}</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Username: true
U.sername: true
U53RN4M3: true
user: false
<a class=""__cf_email__"" data-cfemail=""fe8b8d9b8c90be939b"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>: false
usernamezzzzz: false</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">const regex = /^[a-zA-Z0-9.-]{6,12}$/;
const usernames = ['Username',
                'U.sername',
                'U53RN4M3',
                'user',
                'usern@me',
                'usernamezzzzz'];
for (let name in usernames) {
    console.log(usernames[name] + "": "" + regex.test(usernames[name]));
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>When the username contained only the characters we defined and was between 6 and 12 characters in length, the <code>test</code> method returned <code>true</code> and otherwise returned <code>false</code>.</p>
<h2 id=""search-and-replace"">Search and Replace</h2>
<p>One last popular use for regular expressions is that they allow you to define powerful <strong>search and replace</strong> operations. Instead of the standard replacing one string with another, you can instead use regular expression to precisely match the text you want to replace, and then, using a callback function, precisely define what you would like to happen when text is matched.</p>
<p>To do this, we must learn one last new concept with regular expressions. If you wrap a pattern inside parenthesis, that defines a new <strong>group</strong>. The first group can then be referenced using <code>$1</code>, the second group, if there is one, with <code>$2</code>, and so on.</p>
<p>Here's a basic example of using groups to reverse the order of 3 words.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const text = ""i love you""
const regex = /(\w+) (\w+) (\w+)/;

console.log(text.replace(regex, ""$3 $2 $1""));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">you love i</code>
</pre>
<p>We created three groups, each one matching to a single word which was mapped to <code>$1</code>, <code>$2</code>, and <code>$3</code>. Then in our <code>replace</code> method, we referenced them in reverse, effectively flipping all the words around.</p>
<p>Finally, let's try using the <code>replace</code> method by passing in a callback function which will perform whatever operation we want on the matched text. Let's capitalize the word <code>love</code>.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const text = ""i love you""
const regex = /(\w+) (\w+) (\w+)/;

const result = text.replace(regex, function(string, group1, group2, group3) {
    return group1 + "" "" + group2.toUpperCase() + "" "" + group3;
});

console.log(result);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">i LOVE you</code>
</pre>
<p>The regular expression itself remained the same. We're still dividing up <code>i love you</code> into individual groups. However, this time we passed in a callback function. This function contained four parameters, the entire original string, and then the three defined groups. From there we just construct our desired output by applying the uppercase method on the word <code>love</code> and then combining all three words together to form a new string.</p>

<h2 id=""conclusion"">Conclusion</h2>
<p>The power of regular expressions is great and there is a quite a lot more you can still learn regarding them. As a closer for this lesson, here's a few more examples of usages that might be useful to you:</p>
<h3>Find all words between five and seven characters</h3>
<pre class=""pre__block"">	<code class=""language-javascript"">const text = ""I pledge allegiance to the Flag of the United States of America, and to the Republic for which it stands, one Nation under God, indivisible, with liberty and justice for all."";
const regex = /\b\w{5,7}\b/g;

console.log(text.match(regex));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">(10) [""pledge"", ""United"", ""States"", ""America"", ""which"", ""stands"", ""Nation"", ""under"", ""liberty"", ""justice""]</code>
</pre>

<h3>Find all words longer than eight characters</h3>
<pre class=""pre__block"">	<code class=""language-javascript"">const text = ""I pledge allegiance to the Flag of the United States of America, and to the Republic for which it stands, one Nation under God, indivisible, with liberty and justice for all."";
const regex = /\b\w{9,}\b/g;

console.log(text.match(regex));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">(3) [""allegiance"", ""Republic"", ""indivisible""]</code>
</pre>
<h3>Find all words exactly five characters long</h3>
<pre class=""pre__block"">	<code class=""language-javascript"">const text = ""I pledge allegiance to the Flag of the United States of America, and to the Republic for which it stands, one Nation under God, indivisible, with liberty and justice for all."";
const regex = /\b\w{5}\b/g;

console.log(text.match(regex));</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">(2) [""which"", ""under""]</code>
</pre>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"" rel=""noopener"" target=""_blank"">Regular Expressions - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Errors, Exceptions, and Debugging","javascript-errors-exceptions-and-debugging","Learn how to effectively and quickly deal with errors, exceptions, and bugs by properly debugging your code.","DRAFT","

<p>No matter how carefully and slowly you code, if the program is large and complex enough, <strong>errors and bugs</strong> will arise. You need to be equipped with the skills to be able to handle those situations. Being able to handle errors and how to debug properly is very important so that you can improve your code and make it safer.</p>
<h2 id=""errors"">Errors</h2>
<p>An <strong>error</strong>, or <strong>exception</strong> is a way for JavaScript to let you know that something has gone wrong. When an error occurs, it is also said to be <strong>thrown</strong>.</p>
<p>You might have come across them on your own by accident, but here's a simple example of an error.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">console.log(x);</code>
</pre>
<figure>
<img alt=""An example of a reference error."" height=""416"" loading=""lazy"" src=""https://sabe.io/classes/javascript/errors-exceptions-debugging/reference-error.png"" width=""658""/>
<figcaption>An example of a reference error.</figcaption>
</figure>
<p>This is where catching exceptions is very important.</p>

<h2 id=""catching-exceptions"">Catching Exceptions</h2>
<p><strong>Catching</strong> an exception that was thrown is a way for you to <strong>handle</strong> what to do when it occurs. To catch an exception, you need to wrap the code that you think is prone to exceptions with a <strong>try-catch</strong> block.</p>
<p>The code inside the <code>try</code> block is the code you want to try executing successfully and the code inside the <code>catch</code> block is the code that you want to run if an exception is thrown.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">try {
    console.log(x);
} catch (error) {
    console.log(error.message);
}</code>
</pre>
<figure>
<img alt=""Catching an exception."" height=""409"" loading=""lazy"" src=""https://sabe.io/classes/javascript/errors-exceptions-debugging/catching-exception.png"" width=""632""/>
<figcaption>Catching an exception.</figcaption>
</figure>
<p>Recall that before the try-catch block, the exception would just be thrown. Now that we caught it thanks to the try-catch block, we can now do whatever we want with it (in this case, we just logged the message provided by the error).</p>
<h2 id=""debugging"">Debugging</h2>
<p><strong>Debugging</strong> is an inevitable part of programming and it is the act of both finding and fixing bugs. There are many different ways in which you can debug your JavaScript code, and we'll go over two popular methods.</p>

<h3>Logging Variables</h3>
<p>A very basic method of debugging code is to simply add print statements.</p>
<p>Let's say you <strong>quickly</strong> wrote a function that returns <code>true</code> if a number is single digit (excluding decimals) and <code>false</code> if not.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function isSingleDigit(number) {
    return number &lt;= 10;
}
const number = (3 * 3) + 1;
const result = isSingleDigit(number);
console.log(result);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true</code>
</pre>
<p>You realized there was a bug in this code because the number <code>10</code> should have resulted in <code>false</code> but it instead resulted in <code>true</code>.</p>
<p>Well, an easy way to debug this is to just confirm what number is being passed into <code>isSingleDigit</code> and then see if it returns what you expect.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function isSingleDigit(number) {
    return number &lt;= 10;
}
const number = (3 * 3) + 1;
console.log(number);
const result = isSingleDigit(number);
console.log(result);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">true
10</code>
</pre>
<p>Because now you saw that <code>10</code> was printed, you can confirm that giving <code>isSingleDigit</code> the value of <code>10</code> results in an <strong>incorrect</strong> result.</p>
<p>Thus, you can now dive into the function and resolve the issue, which is the use of <code>&lt;=</code> when it should read <code>&lt;</code>.</p>
<h3>Breakpoints</h3>
<p>Every modern browser today comes with a JavaScript debugger that lets you more easily debug your code. A very useful feature of these debuggers is being able to set <strong>breakpoints</strong> in your code. Breakpoints pause the executing of your code so that you can see the current values of the variables.</p>
<p>From there you can determine whether or not they seem normal, if so, you can continue on with the program, if not, then you know the problem is occurring earlier rather than later.</p>
<p>Suppose you created a simple calculator that only supports division, and it is being fed random positive integer values.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function getPositiveInteger() {
    return Math.floor(Math.random() * 5)
}
const dividend = getPositiveInteger();
const divisor = getPositiveInteger();
const quotient = dividend / divisor;

console.log(dividend + "" / "" + divisor + "" = "" + quotient);</code>
</pre>
<p>The <code>getPositiveInteger</code> function returns a positive integer from 1 to 5, or <em>does it</em>? The first couple of times when you run this, everything looks good. You get output like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">2 / 4 = 0.5
3 / 2 = 1.5
1 / 4 = 0.25
3 / 1 = 3</code>
</pre>
<p>Everything still looks good, but out of nowhere, you get this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">2 / 0 = Infinity</code>
</pre>
<p>Clearly something went wrong, and so it's time to debug using breakpoints!</p>
<p>Open your Developer Tools and go to the <strong>Sources</strong> tag. Locate the file you want to debug, and click on the line number on the left corresponding to <strong>where you want to inspect the values of the variables</strong>.</p>
<figure>
<img alt=""Setting a breakpoint."" height=""695"" loading=""lazy"" src=""https://sabe.io/classes/javascript/errors-exceptions-debugging/setting-breakpoint.png"" width=""825""/>
<figcaption>Setting a breakpoint.</figcaption>
</figure>
<p>In our case, <strong>line 13</strong> works great because it's the line we are doing the dividing. When you see that blue symbol appear (on Chrome), the breakpoint has been set.</p>
<p>Refresh the page and watch what happens.</p>
<figure>
<img alt=""Paused in debugger."" height=""695"" loading=""lazy"" src=""https://sabe.io/classes/javascript/errors-exceptions-debugging/paused-in-debugger.png"" width=""825""/>
<figcaption>Paused in debugger.</figcaption>
</figure>
<p>You can see that code execution has paused because if you look at the bottom it says <code>Paused on breakpoint</code>. The line of code where it paused at is now highlighted in blue above. All that's left to do now is inspect the values of the two variables to see what the problem is.</p>
<figure>
<img alt=""Inspecting value of variables."" height=""695"" loading=""lazy"" src=""https://sabe.io/classes/javascript/errors-exceptions-debugging/inspecting-value.png"" width=""825""/>
<figcaption>Inspecting value of variables.</figcaption>
</figure>
<p>And there's our problem! The value of <code>divisor</code> is <code>0</code>. This means that JavaScript is now trying to divide by <code>0</code>, giving us <code>Infinity</code>.</p>
<p>Clearly, if <code>divisor</code>'s value is <code>0</code>, then the problem is likely from <code>getPositiveInteger</code>. Upon closer look, you can see that because we are using <code>Math.floor</code>, there will be cases where the number is just below <code>1</code>, therefore being floored to <code>0</code>.</p>
<p>You can easily fix <code>getPositiveInteger</code> to work properly by using the JavaScript method <code>Math.ceil</code> instead.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function getPositiveInteger() {
    return Math.ceil(Math.random() * 5)
}
const dividend = getPositiveInteger();
const divisor = getPositiveInteger();
const quotient = dividend / divisor;
console.log(dividend + "" / "" + divisor + "" = "" + quotient);</code>
</pre>
<p>You used breakpoints to inspect the values of the variables to then trace back the core issue to <code>getPositiveInteger</code>, then corrected the problem at the source.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const bug = ""squashed"";</code>
</pre>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/web/javascript/reference/global_objects/error"" rel=""noopener"" target=""_blank"">Error - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Callbacks, Promises, Async, Await","javascript-callbacks-promises-async-await","Learn how to avoid callback hell in JavaScript by taking advantage of modern features like Promises, Async, and Await.","DRAFT","

<p>In JavaScript, you oftentimes need to perform tasks that will take an undetermined amount of time. Because of this, you want to allow your code to continue running instead of waiting until the task completes. This is called <strong>asynchronous programming</strong>.</p>
<h2 id=""callback-functions"">Callback Functions</h2>
<p>One of the most popular ways to employ asynchronous programming is through the use of <strong>callback functions</strong>. As the name implies, a callback function is a function that is called after another function has completed.</p>
<p>Let's look at a simple example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function doChore(chore, callback) {
    alert(""Started "" + chore + ""."");
    callback();
}

function finished() {
    alert(""Finished my chore!"");
}

doChore(""cleaning"", finished);</code>
</pre>
<p>Here you have a function <code>doChore</code>, that takes two parameters, the name of the chore you are doing, and then a function that it will call after the chore is done. We are passing a function that simply alerts the user that the chore is complete, the <code>finished()</code> function. As you would expect, this is the end result:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">alert(""Started cleaning."");
alert(""Finished my chore!"");</code>
</pre>
<p>In reality, anything can happen inside <code>doChore</code> before the callback function is called. Maybe you need to make a request to another server or read a file from disk. The point to get out of this is that the callback function is only called after the rest of function is finished.</p>
<p>We can see this better illustrated when we use the <code>setTimeout</code> function which can add a delay to our code:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function doChore(chore, callback) {
    alert(""Started "" + chore + ""."");
    setTimeout(callback, 3000);
}

function finished() {
    alert(""Finished my chore after 3 seconds!"");
}

doChore(""cleaning"", finished);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">alert(""Started cleaning."");
alert(""Finished my chore after 3 seconds!"");</code>
</pre>

<h2 id=""promises"">Promises</h2>
<p><strong>Promises</strong> are used to handle the results of an asynchronous operation, for example like making an API call or reading from disk. We want to continue to allow the code to continue to run and promises are a structured way to handle asynchronous operations.</p>
<h3>Creating a Promise</h3>
<p>Creating a promise is easy, simply create it like you would any object. It takes a callback function with two parameters, a <code>resolve</code> function and a <code>reject</code> function.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const promise = new Promise((resolve, reject) =&gt; {
    // implementation here
});</code>
</pre>
<p>Promises only have three possible states they can be in:</p>
<ul>
<li>Pending: A pending Promise hasn't begun its operations yet.</li>
<li>Fulfilled: When a promise resolves after its operations finished.</li>
<li>Rejected: When a promise fails to complete its operations successfully.</li>
</ul>
<p>Let's look at an example promise mocking an API call:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const success = true;
const data = new Promise((resolve, reject) =&gt; {
    if (success) {
        const results = {
            message: ""This was a success!""
        };

        resolve(results);
    } else {
        const results = {
            message: ""This failed!""
        };

        reject(results);
    }
});</code>
</pre>
<p>In this bare-bones example, we are controlling whether or not this mock API data call succeeded with a boolean. Depending on that value, it will determine whether the promise resolves or is rejected.</p>

<h3>Using Promises</h3>
<p>Now that we have defined our promise, let's try actually using it:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const success = true;
const data = new Promise((resolve, reject) =&gt; {
    if (success) {
        const results = {
            message: ""This was a success!""
        };

        resolve(results);
    } else {
        const results = {
            message: ""This failed!""
        };

        reject(results);
    }
});

data.then(success =&gt; {
    console.log(success.message);
}).catch(error =&gt; {
    console.log(error.message);
})</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">This was a success!</code>
</pre>
<p>When you use the <code>then</code> function, it receives the value passed in to the <code>resolve</code> function. Likewise, the <code>catch</code> function receives the value passed into the <code>reject</code> function. That is why we are able to immediately access the <code>message</code> value that we passed in earlier.</p>
<h2 id=""async-keyword"">Async Keyword</h2>
<p><strong>Async</strong> is keyword in JavaScript that allow you to write promises in an easier and more visually appealing manner. Let's start by declaring a normal function as asynchronous.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">async function apiSuccess() {
    const results = {
        message: ""This was a success!""
    };

    return results;
}</code>
</pre>
<p>The above code is the equivalent to this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function apiSuccess() {
    const results = {
        message: ""This was a success!""
    };

    return Promise.resolve(results);
}</code>
</pre>
<p>Both of the above functions will resolve to the same exact thing. On the other hand, you can do the same in the reverse:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">async function apiFailure() {
    const results = {
        message: ""This failed!""
    };

    throw new Error(results);
}</code>
</pre>
<p>That is equivalent to doing this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">function apiFailure() {
    const results = {
        message: ""This failed!""
    };

    return Promise.reject(results);
}</code>
</pre>

<h3>Await Keyword</h3>
<p>The <strong>await</strong> keyword is used with asynchronous functions to ensure that all the promises are completed and synchronized. This can help remove the need to use callbacks via <code>.then()</code> and <code>.catch()</code>. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">async function getAPIData(url) {
    try {
        const response = await fetch(url);
        const data = await response.json();

        console.log(data);
    } catch(error) {
        // catches errors in all async functions
        console.log(error);
    }
}

const url = ""https://jsonplaceholder.typicode.com/todos/1"";
getAPIData(url);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">{
    userId: 1,
    id: 1,
    title: ""delectus aut autem"",
    completed: false
}</code>
</pre>
<p>Our asynchronous API call was successful and we got our data! Alternatively, if you simply wanted to return the data instead of print it out, you can write it like this:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">async function getAPIData(url) {
    try {
        const response = await fetch(url);
        const data = await response.json();

        return data;
    } catch(error) {
        return error;
    }
}

const url = ""https://jsonplaceholder.typicode.com/todos/1"";
const data = await getAPIData(url);

console.log(data);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">{
    userId: 1,
    id: 1,
    title: ""delectus aut autem"",
    completed: false
}</code>
</pre>
<p>Finally, if you want to call an async function from a non-async function, you can use the <code>then</code> method. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">async function getAPIData(url) {
    try {
        const response = await fetch(url);
        const data = await response.json();

        return data;
    } catch(error) {
        return error;
    }
}

function printAPIData(url) {
    getAPIData(url).then(result =&gt; {
        console.log(result);
    });
}

const url = ""https://jsonplaceholder.typicode.com/todos/1"";
printAPIData(url);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-javascript"">{
    userId: 1,
    id: 1,
    title: ""delectus aut autem"",
    completed: false
}</code>
</pre>
<h2 id=""conclusion"">Conclusion</h2>
<p>Hopefully you have seen how useful JavaScripts asynchronous features can be. They allow you to rewrite code that previously were constant callbacks into something much more readable and semantic. They also allow you to write code that is easier to test and maintain.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous"" rel=""noopener"" target=""_blank"">Asynchronous JavaScript - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"" rel=""noopener"" target=""_blank"">await - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"JavaScript-Conclusion and Wrap Up","javascript-conclusion-and-wrap-up","This lesson is the last lesson of the class on JavaScript and serves as the conclusion of the class.","DRAFT","
<p><strong>Congratulations on making it to the end of this class on JavaScript!</strong></p>
<p>JavaScript is extremely versatile and flexible, and with this class completed, you really do have so many different routes you can take moving forward.</p>
<p>After pure JavaScript, you can move on to front-end frameworks such as Vue, and React.</p>
<p>Thank you for your time and I hope you have learned quite a bit!</p>
<p>If you've enjoyed this class, do make sure to share this on Facebook, Twitter, LinkedIn or anywhere! It helps us grow and allows for more people to enjoy this as well! ??????</p>
<figure>
<img alt=""Congrats on finishing this class!"" height=""375"" loading=""lazy"" src=""https://sabe.io/classes/javascript/conclusion/congrats.gif"" width=""500""/>
<figcaption>Congrats on finishing this class!</figcaption>
</figure>



",0,"standard","lesson"
"Introduction to Maven","introduction-to-maven","Chapter 1, Introduction to Maven, introduces Maven and discusses the overview of the features Maven offers and why to use the Maven build tool for your projects.","LIVE","<p class=""""><span>Maven is a popular build automation tool used primarily for Java projects. It is designed to manage a project's
   build process, including the compilation, packaging, and deployment of software components, as well as managing
   dependencies and generating reports.</span><br/></p>
<p class=""MsoNormal"">
   Maven provides a structured and standardized approach to building Java applications, making it easier for developers
   to manage the project dependencies. It uses a declarative approach to project configuration and uses an XML file
   called a <span class=""PreStyle""><span>pom.xml</span></span> <i>(Project Object Model).</i> Maven
   will automatically download any required dependencies from a central repository, compile the code, and create a
   packaged executable (<b>JAR</b> or <b>WAR</b> file) for deployment.
</p>
<p class="""">
   In summary, Maven is a build automation tool that simplifies the process of building and managing Java projects. It
   provides a standard way of handling dependencies and project configuration, which makes it easier for developers to
   manage and maintain their code.
</p>
<h2>
<a name=""_Toc155476916"">Why Use Maven?</a>
</h2>
<p class=""MsoNormal"">
   Maven was originally started as an attempt to allow developer to simplify the build process and to comprehend the
   complete state of a development effort in the shortest period. Maven provides several benefits, including:
</p>
<ul>
<li>
<b>Easy build
      automation:</b><span> Maven
      automates the build process, including compiling the code, running tests, and packaging the application into
      a distributable format.</span>
</li>
<li>
<b>Dependency
      management:</b><span> Maven makes
      it easy to manage dependencies for your project, including downloading and including libraries from remote
      repositories.</span>
</li>
<li>
<b>Consistent
      project structure:</b><span> Maven
      provides a standard project structure that makes it easy to organize your code and resources.</span>
</li>
<li>
<b>Plugin
      system:</b><span> Maven has a
      powerful plugin system that can be used to extend the functionality of the build process, such as generating
      documentation or deploying the application to a server.</span>
</li>
<li>
<b>Easy project
      setup:</b><span> Maven
      provides archetypes that can be used to quickly set up a new project with a predefined structure and
      dependencies.</span>
</li>
<li>
<b>Reproducible
      builds:</b><span> Maven
      provides a way to create reproducible builds, which means that the build process is consistent across
      different machines and environments.</span>
</li>
<li>
<b>Integration
      with IDEs:</b><span> Maven
      integrates with popular Java IDEs, such as Eclipse and IntelliJ, making it easy to import and work with
      Maven projects.</span>
</li>
</ul>
<p>
   Overall, Maven can help improve the productivity of developers and make it easier to manage complex Java projects by
   automating common tasks and providing a standardized way to structure and build projects.
</p>
<h2>
<a name=""_Toc155476917"">Project Object Model</a>
</h2>
<p class=""MsoNormal"">
   The pom.xml file is used to define the project's configuration, including its dependencies, plugins, and other
   settings. The POM file is typically stored in the project's root directory.
</p>
<h3 class=""""><a name=""_Toc155476918"">Project Identifiers in Maven</a></h3>
<p class=""MsoNormal"">
   In Maven, a project is identified by three main identifiers (also known as coordinates):
</p>
<ul>
<li>
<b>Group
      Id:</b><span> A unique
      identifier for the group or organization that the project belongs to. Typically, this is a reversed domain
      name, such as </span><span class=""PreStyle""><span>com.example</span></span><span>.</span>
</li>
<li>
<b>Artifact
      Id:</b><span> A unique
      identifier for the project itself. This is the name that identifies the project and is used to generate the
      name of the JAR file.</span>
</li>
<li>
<b>Version:</b><span> A version
      number that identifies a specific release of the project. Versions are typically formatted as three or four
      numbers separated by periods, such as 1.0 or 1.0.1.</span>
</li>
</ul>
<p class=""Listspaced"">
</p>
<p class=""MsoNormal"">
   Together, these three identifiers form the project's GAV (Group, Artifact, Version) coordinates, which uniquely
   identify the project and its releases. <span>In addition to the GAV coordinates,
   there are also other identifiers that can be used in Maven, including:</span>
</p>
<ul>
<li>
<b>Packaging:
      </b><span>The
      type of artifact that the project produces, such as a </span><b>JAR (Java
      archive)</b><span>, </span><b>WAR (Web
      archive)</b><span>, or
      </span><b>EAR
      (Enterprise archive)</b><span>
      file.</span>
</li>
<li>
<b>Classifier:</b><span> A string
      that is used to distinguish between different versions of an artifact. For example, you could have multiple
      versions of a JAR file that are classified as ""</span><b>sources</b><span>"" or
      ""</span><b>javadoc</b><span>"".</span>
</li>
</ul>
<p class=""MsoNormal"">
<span>JAR (Java Archive) </span>files are used to package and distribute
   standalone Java applications. They contain a set of classes, resources, and other files that are required to run the
   application. JAR files are typically self-contained, meaning that they do not require any additional dependencies to
   be installed on the system where they are run.
</p>
<p class=""MsoNormal"">
<span>WAR (Web Archive) </span>files are a specific type of JAR file that is used
   to package and distribute web applications. They contain all the files that are required to run the web application,
   including the Java classes, web pages, static resources, and deployment descriptor files. WAR files are typically
   deployed to a web server, where they are run in a servlet container.
</p>
<p class=""Listspaced"">
</p>
<p class=""MsoNormal"">
   By using these identifiers, Maven can manage dependencies between projects, download and cache dependencies from
   remote repositories, and automate the build and deployment process.
</p>",1,"standard","lesson"
"Installing and Configuring Maven","installing-and-configuring-maven","Chapter 2, Installing and Configuring Maven, discusses the prerequisites for using Maven, and guides through the Maven installation process. It also discusses briefly about the Maven ecosystem and the Apache Software License.","LIVE","<div class=""page-body"">
<figure class=""block-color-gray_background callout"" id=""863792e0-38bd-4efc-baa1-ddc5b75e0818"">
<div><span class=""icon"">💡</span></div>
<div><em><strong>Chapter 2</strong></em>, <em>Installing and Configuring
							Maven</em>, discusses the prerequisites for using Maven, and guides through the Maven
						installation process. It also discusses briefly about the Maven ecosystem and the Apache
						Software License.</div>
</figure>
<p class="""" id=""117e580d-7bd9-45aa-81a6-d4fb1600694b"">Maven is currently distributed in several formats
					for your convenience. This chapter contains instructions for installing Maven for different
					platforms. If you are interested in the details of your Maven installation, this entire chapter will
					give you an overview of what you’ve installed and the Apache Software License.</p>
<h2 class="""" id=""d7a17ae6-7449-4387-94c7-1c236f5096c4"">2.1 Prerequisites</h2>
<p class="""" id=""954228ac-977f-461f-a03e-076f649a69fc"">As Maven is a Java tool, before proceeding with
					using Maven you need to ensure the Java JDK is installed in your computer. At the time of writing
					this e-book, the latest stable Java release of Java is JDK 17.</p>
<p class="""" id=""e6acb37d-7cdc-4fe6-959b-b8021e7db50d"">You have two choices when it comes to installing
					Java. You either use the Oracle JDK or Open JDK. Oracle JDK offers all the features of Open JDK,
					plus some proprietary features and commercial support from Oracle. The Open JDK is the open-source
					version of Java, and it is free to use for both personal and commercial projects.</p>
<p class="""" id=""8d0e0db4-8b72-45db-bff6-f015a8c59475"">There are many different distributions of OpenJDK
					available, some of the popular distributions are Amazon Corretto, Microsoft JDK, Azul Zulu, Red Hat
					OpenJDK, etc. You can install any of the OpenJDK distributions for working with Maven, but before
					you do, It is recommended that you read and understand the Licence agreements and terms of use from
					these distributors.</p>
<p class="""" id=""aa4458ab-c4af-4790-aedc-86ccda7b1a00"">For installation, we have many different
					approaches, we can install Java using a package manager such as Homebrew or SDKMan. Alternatively,
					we can use the manual installation process.</p>
<p class="""" id=""fad57b18-ab7e-4f4f-bf9f-7672ada3ca27"">This chapter covers the Java installation process
					using the SDKMan and Homebrew. For installation in Windows, we have a section with relevant links.
				</p>
<h3 class="""" id=""3d9b927e-4127-4677-9f67-2dd51f387db3"">2.1.1 Installing Java JDK using SDKMan</h3>
<p class="""" id=""00d929a6-8095-4389-bebe-4f03c9692b34"">SDKMan is a command line utility used for
					installing and managing multiple versions of the SDKs. This works for MacOS and Linux, Windows WSL.
					The SDKMan simplifies the installation, management, and switching between different versions of Java
					SDK effortlessly.</p>
<figure class=""block-color-gray_background callout"" id=""d4412154-357c-418d-b903-800ad831766a"">
<div><span class=""icon"">💡</span></div>
<div>If you don’t have SDKMan installed, follow the official installation guide
						from <a href=""https://sdkman.io/install"">https://sdkman.io/install</a> to install the SDKMan
						package manager. Once installed, you can continue with this chapter.</div>
</figure>
<p class="""" id=""fae180a0-58d2-4213-ab35-62f23436a9de"">Before we install let us first get the list of
					available Java versions. You can do that using the following command:</p>
<pre class=""code language-shell"" id=""cb0b80ee-2b01-46af-9dbd-c69ecd5a4f10"" tabindex=""0""><code class=""language-shell"">sdk list java</code></pre>
<p class="""" id=""1105892a-4ea4-4fa4-90a6-0a1b5377d4ac"">This will return a list of all available Java
					versions.</p>
<figure class=""image"" id=""4d7bd438-13df-4fc6-9ed9-f6bd61628ea2""><a href=""https://media.stacktips.com/media/uploads/summernote/install_java_in_mac_using_homebrew-min.png""><img src=""https://media.stacktips.com/media/uploads/summernote/install_java_in_mac_using_homebrew-min.png""/></a>
<figcaption>Figure 2.1 - List of available Java versions</figcaption>
</figure>
<p class="""" id=""ef982e09-1b27-4fa1-8454-e9a7d01749e5"">You can filter a specific Java version using the
					<strong>grep</strong> command.</p>
<pre class=""code language-shell"" id=""76da8871-10a0-43e0-9878-08d09b45852c"" tabindex=""0""><code class=""language-shell"">sdk list java | grep 17</code></pre>
<p class="""" id=""ef1f9f9d-91eb-4ab2-b379-1f7217f9b6b0"">To install a specific version, you need to use the
					distribution identifier.</p>
<pre class=""code language-shell"" id=""0f0795a8-0122-415f-9f3f-c70cbbcee2da"" tabindex=""0""><code class=""language-shell"">sdk install java 21-amzn</code></pre>
<p class="""" id=""f05bd4cd-e7cd-4108-b7f1-dc9e08b1f23a"">To check the list of installed Java versions</p>
<pre class=""code language-shell"" id=""b4b1a108-e68f-450a-8f5e-f24304e4f625"" tabindex=""0""><code class=""language-shell"">sdk list java | grep installed</code></pre>
<p class="""" id=""8ed607d6-2e9b-4128-a726-25de6efa6680"">To use specific versions of Java</p>
<pre class=""code language-shell"" id=""c5893e46-fb12-4cf7-827d-b55348ab8f0a"" tabindex=""0""><code class=""language-shell"">sdk use java 21-amzn</code></pre>
<p class="""" id=""95d66d63-a100-4f81-bf3c-b4cac0ce5160"">Check if you have Java installed using the
					following command.</p>
<pre class=""code language-shell"" id=""fc76af3b-3970-4b0b-a170-415290baead7"" tabindex=""0""><code class=""language-shell"">java --version</code></pre>
<h3 class="""" id=""42f9d5b4-9ca2-46b4-9e5d-5bb57ac2954b"">2.1.2 Installing Java JDK using Homebrew</h3>
<p class="""" id=""510aaa48-1b81-47ff-a357-bc5bbd5b3043"">Homebrew is a free and open-source software
					package manager that simplifies the installation of software on MacOS (and supports Linux systems to
					some extent). Think of it like a one-stop shop for accessing tools and applications you might need
					for development, server management, homebrew experiments, or just general use.</p>
<figure class=""block-color-gray_background callout"" id=""90b30c88-febb-4317-a966-eada876442c3"">
<div><span class=""icon"">💡</span></div>
<div>If you don’t have Homebrew installed, follow the official installation guide
						from <a href=""https://sdkman.io/install"">https://sdkman.io/install</a> to install the Homebrew
						package manager. Once installed, you can continue with this chapter.</div>
</figure>
<p class="""" id=""040c3397-edc9-40f1-954e-e68c86a68218"">Type brew search <code>openjdk</code> to find all
					available Java-related formulas.</p>
<pre class=""code language-shell"" id=""8fef618c-0b9e-4fd2-a440-761550e3dac7"" tabindex=""0""><code class=""language-shell"">$ brew search openjdk
==&gt; Formulae
openjdk ✔         openjdk@11        openjdk@17 ✔     openjdk@8

==&gt; Casks
adoptopenjdk       homebrew/cask-versions/adoptopenjdk8
microsoft-openjdk  homebrew/cask-versions/microsoft-openjdk11
openkey</code></pre>
<p class="""" id=""482732f7-28bf-4023-883e-9315ac07b67b"">To show the formula details, you can use the brew
					info command. The Java formula always contains the latest OpenJDK version; at the time of writing,
					the latest is JDK 17.</p>
<p class="""" id=""d282a7c5-add4-4e23-8c06-152be032c0cd"">The openjdk@17 formula contains the Java 17LTS
					version.</p>
<pre class=""code language-shell"" id=""b47353f0-5d99-4f55-911a-28fbb3094285"" tabindex=""0""><code class=""language-shell"">$ brew info openjdk@17
==&gt; openjdk@17: stable 17.0.4.1 (bottled) [keg-only]
Development kit for the Java programming language
https://openjdk.java.net/
/usr/local/Cellar/openjdk@17/17.0.4.1_1 (639 files, 305.6MB)
  Poured from bottle on 2023-09-25 at 00:00:57
From: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/openjdk@17.rb
License: GPL-2.0-only with Classpath-exception-2.0
==&gt; Dependencies
Build: autoconf ✘
==&gt; Requirements
Build: Xcode ✔
==&gt; Caveats
For the system Java wrappers to find this JDK, symlink it with
  sudo ln -sfn /usr/local/opt/openjdk@17/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-17.jdk

openjdk@17 is keg-only, which means it was not symlinked into /usr/local,
because this is an alternate version of another formula.

If you need to have openjdk@17 first in your PATH, run:
  echo 'export PATH=""/usr/local/opt/openjdk@17/bin:$PATH""' &gt;&gt; ~/.zshrc

For compilers to find openjdk@17 you may need to set:
  export CPPFLAGS=""-I/usr/local/opt/openjdk@17/include""

==&gt; Analytics
install: 30,649 (30 days), 82,462 (90 days), 154,946 (365 days)
install-on-request: 20,080 (30 days), 52,615 (90 days), 88,978 (365 days)
build-error: 65 (30 days)</code></pre>
<p class="""" id=""ab802e8e-493b-4533-ae3f-62d986da0420"">To install the Open JDK 17, you can type the
					following command.</p>
<pre class=""code language-shell"" id=""ea3c7be6-9be5-4707-a65f-af0d799887c0"" tabindex=""0""><code class=""language-shell"">brew install openjdk@17</code></pre>
<p class="""" id=""7eb09abe-fbd7-455d-b4d0-c6fc697716e5"">Check if you have Java installed using the
					following command.</p>
<pre class=""code language-shell"" id=""0c68d6cf-aa73-4951-8f00-302ef6aac4cc"" tabindex=""0""><code class=""language-shell"">java --version</code></pre>
<h3 class="""" id=""3ab0aa14-d9dc-42ae-bc54-9d2b5b92bd0b"">2.1.3 Install Java in Windows OS</h3>
<p class="""" id=""e16025f2-c925-461b-a0fd-7845ed8788d6"">There are several choices for installing Java on
					Windows OS; we can install using the graphical PKG and MSI installers, or through package managers
					WinGet, Homebrew, apt, and yum.</p>
<p class="""" id=""c422fc2d-8ddc-49b9-b915-fa111f2cd96e"">Referee the official refer the official
					Installation guide. <a href=""https://learn.microsoft.com/en-us/java/openjdk/install"">https://learn.microsoft.com/en-us/java/openjdk/install</a>
</p>
<p class="""" id=""1cdcd6a9-db45-4b2c-9b69-20475d9d907a"">To ensure that Java is installed correctly, open a
					Command Prompt or PowerShell window and enter the following command.</p>
<pre class=""code language-shell"" id=""bd2ad8fb-81e3-439f-ba84-dde357592672"" tabindex=""0""><code class=""language-shell"">java -version</code></pre>
<h2 class="""" id=""64c516a1-cfc2-41b5-99b5-78fc2da1d9ba"">2.2 Install Maven on Windows</h2>
<p class="""" id=""59088d63-0176-4b5d-84bb-a7998725ade5"">This section will drive you thought the steps to
					install and configure Maven on Windows Operating System.</p>
<ul class=""bulleted-list"" id=""b0b03ec2-eda0-46ea-83ac-85d17d43e7d1"">
<li>Download Maven from the official website: <a href=""https://maven.apache.org/download.cgi"">https://maven.apache.org/download.cgi</a>.
						Choose the latest binary zip archive for Windows and download it to your preferred directory.
						When downloading Maven, make sure you choose the latest version of Apache Maven from the
						website. The latest version of Maven at the time of this writing is Maven 3.9.x.</li></ul><p><img src=""https://media.stacktips.com/media/uploads/summernote/Download_maven_versions.png""/><br/></p><ul class=""bulleted-list"" id=""b0b03ec2-eda0-46ea-83ac-85d17d43e7d1"">
</ul>
</div><div class=""page-body""><figure class=""image"" id=""3a6c6482-152e-47cd-82e8-83bbea8ecc35""><a href=""Chapter%202-Installing%20and%20Configuring%20Maven%20ce901c071a9c4038820947bb4648204c/Screenshot_2024-01-05_at_16.37.19.png""><img src=""Chapter%202-Installing%20and%20Configuring%20Maven%20ce901c071a9c4038820947bb4648204c/Screenshot_2024-01-05_at_16.37.19.png""/></a>
<figcaption>Figure 2.2 - Download maven versions</figcaption>
</figure>
<ul class=""bulleted-list"" id=""e5c71161-173e-4a13-a78e-9d1e28136e95"">
<li>Extract the downloaded zip file to a directory on your system. For
						example, you could extract it to the ""<strong>C:\Program Files</strong>"" directory.
					</li>
</ul>
<ul class=""bulleted-list"" id=""c9e26ecb-36c5-41ab-8e05-bad096372c2b"">
<li>Set the environment variables for Maven. Open the Start menu and
						search for ""<strong>Environment Variables</strong>"". Click on ""<strong>Edit the
							system environment variables</strong>"".</li>
</ul>
<ul class=""bulleted-list"" id=""3c8577a8-19a7-4dd4-a287-5a9a7dd1e036"">
<li>In the System Properties window, click on the
						""<strong>Environment Variables</strong>"" button.</li>
</ul>
<ul class=""bulleted-list"" id=""592fcf64-a158-4f96-bb8b-a68a7db86da4"">
<li>Under the System Variables section, click on ""New"" to
						create a new variable. Set the variable name as MAVEN_HOME and the variable value as the path to
						your Maven installation directory. For example, <strong>""C:\Program
							Files\apache-maven-3.9.0"".</strong></li>
</ul>
<ul class=""bulleted-list"" id=""709c5930-95e7-43a5-aa45-44c45add91fa"">
<li>Next, find the ""Path"" variable under System Variables and
						click ""<strong>Edit</strong>"".</li>
</ul>
<ul class=""bulleted-list"" id=""2618df3c-a97b-4847-9c58-8ab5a88fb3ba"">
<li>In the Edit environment variable window, click
						""<strong>New</strong>"" and add the path to the ""bin"" directory within your
						Maven installation directory. For example, <strong>""C:\Program
							Files\apache-maven-3.9.0\bin"".</strong></li>
</ul>
<ul class=""bulleted-list"" id=""1ae36694-d7a9-42f0-aa5c-230f1fa1de2b"">
<li>Click ""<strong>OK</strong>"" on all the windows to save
						the changes.</li>
</ul>
<ul class=""bulleted-list"" id=""6a6d864e-01b8-448b-b616-ebfc69b5e989"">
<li>Open a new command prompt window and run the command
						<code>mvn -version</code> to verify that Maven is installed correctly. You should see the
						version of Maven printed on the console.</li>
</ul>
<pre class=""code language-shell"" id=""d362905f-b669-47f3-b615-a42f166f0644"" tabindex=""0""><code class=""language-shell"">mvn -version</code></pre>
<h2 class="""" id=""e124c76c-20c7-44d0-be15-25697ab41201"">2.3 Install Maven on MacOS using Homebrew</h2>
<p class="""" id=""86fdd274-4624-4849-9de9-fe5bd32bc926"">To install and configure Maven on MacOS, you can
					follow these steps:</p>
<ol class=""numbered-list"" id=""fac21506-9909-4799-b928-3a9d6094cec7"" start=""1"" type=""1"">
<li>Open the Terminal on your Mac.</li>
</ol>
<ol class=""numbered-list"" id=""571ddbc3-2f83-4422-b894-87159b195d70"" start=""2"" type=""1"">
<li>Install the Homebrew package manager by running the following command in the terminal. This step
						is required only if Homebrew is not installed on your machine.</li>
</ol>
<pre class=""code language-shell"" id=""f2212a6f-70b2-4302-846a-c0495c8a584b"" tabindex=""0""><code class=""language-shell"">/bin/bash -c ""$(curl -fsSL &lt;https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&gt;)""</code></pre>
<ol class=""numbered-list"" id=""163b2b36-ff52-41b0-a348-47e092477ea7"" start=""3"" type=""1"">
<li>Install Maven by running the following command in the terminal:</li>
</ol>
<pre class=""code language-shell"" id=""053adf69-e054-443c-ba1e-40cd5d1b33a7"" tabindex=""0""><code class=""language-shell"">brew install maven</code></pre>
<ol class=""numbered-list"" id=""d41f2776-51fb-4558-be2a-c29d0f44b736"" start=""4"" type=""1"">
<li>Verify that Maven has been installed by running the following command in the terminal:</li>
</ol>
<pre class=""code language-shell"" id=""2c212347-1e4a-4e87-9afe-e44353dbca46"" tabindex=""0""><code class=""language-shell"">mvn -version</code></pre>
<ol class=""numbered-list"" id=""87e68ef3-2ec0-4e50-bd71-1a6508a32be3"" start=""5"" type=""1"">
<li>Set the environment variables for Maven by adding the following lines to the
						<strong>.bash_profile</strong> file in your home directory:</li>
</ol>
<pre class=""code language-shell"" id=""fda00e50-85cd-442a-bba3-a72e570d9522"" tabindex=""0""><code class=""language-shell"">export M2_HOME=/usr/local/Cellar/maven/{VERSION}/libexec
export PATH=$PATH:$M2_HOME/bin</code></pre>
<p class="""" id=""97153479-7111-4517-b048-784fea594e3e"">Replace <code>{VERSION}</code> with the actual
					version of Maven that you installed.</p>
<ol class=""numbered-list"" id=""60055228-d21c-4613-820f-be3e7b2af776"" start=""6"" type=""1"">
<li>Reload the .bash_profile file by running the following command in the terminal:</li>
</ol>
<pre class=""code language-shell"" id=""22e9eef5-d9d4-41b0-bacd-b04e478ecc7d"" tabindex=""0""><code class=""language-shell"">source ~/.bash_profile</code></pre>
<ol class=""numbered-list"" id=""65080c7a-34e2-4f26-9490-97e3bf76b3a7"" start=""7"" type=""1"">
<li>Verify that Maven has been configured correctly by running the following command in the
						terminal:</li>
</ol>
<pre class=""code language-shell"" id=""d0dddb84-c41f-42f3-bf77-075e6f7ebd90"" tabindex=""0""><code class=""language-shell"">echo $M2_HOME</code></pre>
<p class="""" id=""2020194a-b0da-471d-9ec3-d72c6168f27b"">You should see the path to your Maven installation
					printed on the console.</p>
<p class="""" id=""bceab1d7-3a31-4442-b9c5-05a351aa588d"">Congratulations, you have successfully installed
					and configured Maven on your MacOS system!</p>
<h2 class="""" id=""8e39a754-20f4-4326-9f56-9cb75def885f"">2.4 Testing a Maven Installation</h2>
<p class="""" id=""492a7ed1-155d-45e6-b358-3c8b8ef9883f"">Once Maven is installed, you can verify if it is
					installed properly by running <code>mvn -v</code> from the command line. If Maven has been
					installed, you should see something resembling the following output:</p>
<pre class=""code language-shell"" id=""dda44a1a-dde5-438e-a28b-7f65b470cceb"" tabindex=""0""><code class=""language-shell"">~ mvn -version
Apache Maven 3.9.6 (bc0240f3c744dd6b6ec2920b3cd08dcc295161ae)
Maven home: /opt/homebrew/Cellar/maven/3.9.6/libexec
Java version: 17.0.8, vendor: Microsoft, runtime: /Users/nilan /.sdkman/candidates/java/17.0.8-ms
Default locale: en_GB, platform encoding: UTF-8
OS name: ""mac os x"", version: ""14.1.2"", arch: ""aarch64"", family: ""mac""</code></pre>
<p class="""" id=""0aee8ca1-3061-4c00-9c76-73644db318c0"">If you do not see this output and your operating
					system cannot find the maven command, make sure that your PATH and M2_HOME environment variables
					have been properly set.</p>
<h2 class="""" id=""90b205a9-7987-44fb-93e8-536ebc5907f0"">2.5 Getting Help with Maven</h2>
<p class="""" id=""636789dc-1077-473e-b95d-73891b835b1e"">This book is not a comprehensive reference for
					Maven but just a starting point. The core of Maven is very simple, however the real work in Maven
					happens in the plugins, and there are tons of plugins available for you to use. Should you encounter
					any problem with Maven or have any Maven plugin-related issues; you can search for answers from the
					official Maven website <a href=""http://maven.apache.org/"">http://maven.apache.org</a>.</p>
<h2 class="""" id=""d6af4552-0c4c-4c9c-bdbd-a952a9c7d17f"">2.6 The Apache Software License</h2>
<p class="""" id=""979c014c-2a33-4511-b5b0-17312a9ec68c"">Apache Maven is released under the Apache Software
					License, Version 2.0. If you want to read this license, you can read ${M2_HOME}/LICENSE.txt or read
					this license on the Open-Source Initiative’s website at <a href=""https://opensource.org/license/apache-2-0/"">https://opensource.org/license/apache-2-0/.</a>
</p>
<p class="""" id=""444e6a06-555d-4745-8caf-9bdb974c95e4"">There’s a good chance that, if you are reading
					this book, you are not a lawyer. If you are wondering what the Apache License, Version 2.0 means,
					the Apache Software Foundation has assembled a very helpful Frequently Asked Questions (FAQ) page
					about the license available at <a href=""https://www.apache.org/foundation/license-faq.html"">https://www.apache.org/foundation/license-faq.html</a>.
				</p>
</div>",2,"standard","lesson"
"Creating Java Project using Maven Command Line","creating-java-project-using-maven-commandline","Chapter 3, Creating Java Project using Maven, walks you through a step-by-step process to create a Maven project using the Maven command line utility and discusses building and running Java applications. It also discusses briefly about the maven build life cycle.","LIVE","<div class=""page-body"">
<figure class=""block-color-gray_background callout"" id=""a4a98f00-013a-42dc-83ad-131ffaba32ae"">
<div><span class=""icon"">💡</span></div>
<div><em><strong>Chapter 3</strong></em><strong>,</strong> <em>Creating Java
							Project using Maven</em>, walks you through a step-by-step process to create a Maven project
						using the Maven command line utility and discusses building and running Java applications. It
						also discusses briefly about the maven build life cycle.</div>
</figure>
<p class="""" id=""1e01f31b-9e4c-4828-ad87-6a5107f59d7a"">Maven has several archetypes predefined, you can
					use any of those archetypes and build a basic project in a few seconds. In this chapter, we will use
					the maven-archetype-quickstart, archetype to create a basic Java project with maven directories
					conventions.</p>
<h2 class="""" id=""d135f051-7eb2-4325-8776-64a80d8182e6"">3.1 Creating a Maven Project</h2>
<p class="""" id=""5bcecef5-d63c-4cd4-bffd-c504a2a1bf41"">Before you create a Java project using the maven
					command line, first create a new directory for your project. For example, create a directory called
					<strong>""maven-hello-world”</strong></p>
<pre class=""code"" id=""81678e27-d778-49de-8bc3-31be2309c9ef""><code class=""language-Shell"">mkdir maven-hello-world</code></pre>
<p class="""" id=""68b9feb7-309a-405f-99d1-dbc6edf0b28a"">Navigate to the newly created directory in your
					terminal:</p>
<pre class=""code"" id=""88cf689e-f143-4ec7-ab96-72dcadd72222""><code class=""language-Shell"">cd maven-hello-world</code></pre>
<p class="""" id=""687c1d52-5e6a-4387-8cae-7140c2e34e45"">We can generate a maven project from the terminal
					using the <code>mvn archetype:generate</code> command. This command generates a new Maven project
					based on the template or archetype selected. For example, in this case we will use the
					<code>maven-archetype-quickstart</code> archetype to generate a simple Java project.</p>
<pre class=""code"" id=""d68f1cc5-94a0-4088-b6e4-f1a33a9802c1""><code class=""language-Shell"">mvn archetype:generate
     -DgroupId=com.stacktips
     -DartifactId=maven-hello-world
     -DarchetypeArtifactId=maven-archetype-quickstart
     -DinteractiveMode=false</code></pre>
<p class="""" id=""41c4ec9f-6751-4dc5-84c9-30356b7e0876"">You don’t have to remember each of the parameters
					provided above. Just use the <code>interactiveMode=true</code>, so that Maven asks for all the
					required parameters.</p>
<figure class=""image"" id=""0a6a16ca-6f15-491f-aae1-8ed8c5529de0""><a href=""https://media.stacktips.com/media/uploads/summernote/creating-maven-project.png""><img src=""https://media.stacktips.com/media/uploads/summernote/creating-maven-project.png""/></a>
<figcaption>Figure 3.1 - creating java project using Maven command line</figcaption>
</figure>
<p class="""" id=""75e150fc-f54f-46c5-ba02-b185e2cdfbaa"">In this command, the groupId and
					<code>artifactId</code> are the unique identifiers for your project. The
					<code>archetypeArtifactId</code> specifies the archetype to use, which in this case is the
					<code>maven-archetype-quickstart</code> archetype, which creates a simple Java project with a main
					class.</p>
<h2 class="""" id=""3dac9368-3934-44df-9972-78009857cbb1"">3.2 Building the Maven Project</h2>
<p class="""" id=""73e8cd37-179d-44ff-bf93-691fe09e8aef"">You can build your project in a shell environment
					but is better to work inside of a Java IDE such as IntelliJ, Eclipse, or VS Code. An Integrated
					<b>Development Environment (IDE)</b> is a tool that helps to streamline the coding, debugging, and project
					management for developers. It offers features like code editing, refactoring, debugging, integrated
					terminal, and many other features to support application development. </p><p class="""" id=""73e8cd37-179d-44ff-bf93-691fe09e8aef"">Eclipse and VS Code have good
					support for Java development, but IntelliJ is one of the strong contenders with a wide range of
					features to boost Java developer productivity. Throughout this book, we will use the IntelliJ code
					editor for working with the Maven project.</p>
<p class="""" id=""be5df976-5adb-49db-81db-39b11a56955a"">IntelliJ offers two versions of the IDE, IntelliJ
					IDEA Community (Free) and IntelliJ Ultimate (Licensed). A few of the features are limited only to
					the Ultimate edition, but the Free community version is sufficient for Java development.</p>
<p class="""" id=""17b8e434-d795-48e0-9910-fb5d2953d2e6"">If you haven’t installed it, you can follow the
					official installation guide to download and install for your Operating System: <a href=""https://www.jetbrains.com/idea/download/"">https://www.jetbrains.com/idea/download/</a></p>
<p class="""" id=""0caaf8de-eeed-4fe5-a595-67dfded0ef26"">When the project is opened in IntelliJ, the
					project will be recognized by the IDE as a maven project and all the dependencies will be resolved
					and added to the <strong>“classpath”</strong> automatically. The following screenshot depicts the
					project structure created by the above command.</p>
<figure class=""image"" id=""fa497f98-e431-4e0c-aad2-b6e1d89edd12""><a href=""https://media.stacktips.com/media/uploads/summernote/mave-java-project-structure.png""><img src=""https://media.stacktips.com/media/uploads/summernote/mave-java-project-structure.png""/></a>
<figcaption>Figure 3.2 Maven Java project structure </figcaption>
</figure>
<p class="""" id=""4c5da2ff-0cce-4f81-a9b3-fc8f26cfe187"">The dependencies and maven configuration are
					defined inside the maven configuration file pom.xml, pom means <strong>Project Object
						Model</strong>.</p>
<p class="""" id=""13f4e9b6-1583-42de-af0c-f7e3e747f1e4"">Navigate to the project directory and build the
					project using the <code>mvn package</code> command.</p>
<pre class=""code"" id=""83b8f9a2-b7db-4e0e-b764-1e990a6e3ec9""><code class=""language-Shell"">mvn package</code></pre>
<p class="""" id=""10f3f07a-dcbc-4c3f-971a-86c8243011ea"">This will compile the project, run the tests,
					package will generate JAR/WAR as per the build configuration defined in the POM file. You can see a
					console output as follows:</p>
<pre class=""code"" id=""c4be781a-7327-4e4d-a4a6-738a78ff5c08""><code class=""language-Shell"">[INFO] Scanning for projects...
[INFO] 
[INFO] ------------------&lt; com.stacktips:maven-hello-world &gt;-------------------
[INFO] Building maven-hello-world 1.0-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- resources:3.3.1:resources (default-resources) @ maven-hello-world ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /Users/nilanchal.panigrahy/Documents/github/StackTipsLab/maven-beginners-guide/maven-hello-world/src/main/resources
[INFO] 
[INFO] --- compiler:3.11.0:compile (default-compile) @ maven-hello-world ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- resources:3.3.1:testResources (default-testResources) @ maven-hello-world ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /Users/nilanchal.panigrahy/Documents/github/StackTipsLab/maven-beginners-guide/maven-hello-world/src/test/resources
[INFO] 
[INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ maven-hello-world ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- surefire:3.2.2:test (default-test) @ maven-hello-world ---
[INFO] Using auto detected provider org.apache.maven.surefire.junit.JUnit3Provider
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.stacktips.AppTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 s -- in com.stacktips.AppTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jar:3.3.0:jar (default-jar) @ maven-hello-world ---
[INFO] Building jar: /Users/nilanchal.panigrahy/Documents/github/StackTipsLab/maven-beginners-guide/maven-hello-world/target/maven-hello-world-1.0-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  1.629 s
[INFO] Finished at: 2024-01-06T20:02:48Z
[INFO] ------------------------------------------------------------------------</code></pre>
<p class="""" id=""9f9d63e3-9cc7-4837-bd8d-04ec6f0276a6"">Run the project: You can run the project using the
					java -cp target/my-app-1.0-SNAPSHOT.jar com.example.app.App command. This will execute the main
					method in the App class.</p>
<pre class=""code"" id=""f53aca77-39bb-40da-be04-708128194e9a""><code class=""language-Shell"">java -cp target/maven-hello-world-1.0-SNAPSHOT.jar com.stacktips.App</code></pre>
<p class="""" id=""b4244840-d4ec-4025-ac11-1ae363e0c3e5"">Congratulations! You have created and built your
					first Java project using the Maven command line!</p>
<h2 class="""" id=""6b892280-5b0a-4401-bdeb-8fa4a174296b"">3.3 Maven Build Lifecycle</h2>
<p class="""" id=""6d187b44-4af7-4857-9ab4-6c797ab16657"">Maven build lifecycles are a series of phases that
					define the build process of a Maven project. There are three build lifecycles in Maven:</p>
<ul class=""bulleted-list"" id=""df4e80fc-6937-4e1d-9455-6fce7e23c218"">
<li><strong>default</strong>: This is the main build lifecycle in
						Maven. It includes the following phases: <code>validate</code>, <code>compile</code>,
						<code>test</code>, <code>package</code>, <code>verify</code>, and install. These phases are
						executed in order when you run the maven command with no arguments.</li>
</ul>
<ul class=""bulleted-list"" id=""5286775a-54d8-4de6-8aa6-08a0a9089103"">
<li><strong>clean</strong>: This lifecycle is used to clean the build
						directory of a project. It includes the following phases: <code>pre-clean</code>,
						<code>clean</code>, and <code>post-clean</code>.</li>
</ul>
<ul class=""bulleted-list"" id=""43bd3dde-2d30-4862-82e7-372271402202"">
<li><strong>site</strong>: This lifecycle is used to generate project
						documentation. It includes the following phases: <code>pre-site</code>, <code>site</code>,
						<code>post-site</code>, <code>site-deploy</code>. The site-deploy phase is optional and is used
						to deploy the generated documentation to a web server.</li>
</ul>
<p class="""" id=""d5ca85d7-f198-4306-8f52-ec53e7cdb1c6"">Each lifecycle consists of a set of phases, which
					are executed in order. When you run a specific phase, all previous phases in that lifecycle are also
					executed. For example, when you run the package phase in the default lifecycle, the validate,
					compile, and test phases are also executed.</p>
<figure class=""image"" id=""019590a5-f6f4-4ce7-84d8-49d94360b6b4""><a href=""https://media.stacktips.com/media/uploads/summernote/dependencies-Page-2.drawio.png""><img src=""https://media.stacktips.com/media/uploads/summernote/dependencies-Page-2.drawio.png""/></a>
<figcaption>Figure 3.3 Maven build lifecycle </figcaption>
</figure>
<p class="""" id=""dae25272-834f-47e4-ae1d-9b655cd9a128"">Here's a brief description of each phase in
					the default lifecycle:</p>
<ul class=""bulleted-list"" id=""9354944c-3f06-4006-80f0-28a71e892d54"">
<li><strong>validate:</strong> It validates the project is correct and
						all necessary information is available.</li>
</ul>
<ul class=""bulleted-list"" id=""f4569f95-7a17-47d1-a474-e060e111153e"">
<li><strong>compile:</strong> It compiles the source code of the
						project.</li>
</ul>
<ul class=""bulleted-list"" id=""92023478-1d1f-438a-83f4-9e9e06e5db0e"">
<li><strong>test:</strong> It tests the compiled source code using a
						suitable unit testing framework.</li>
</ul>
<ul class=""bulleted-list"" id=""75560318-3466-423f-9af4-a4b5336b579b"">
<li><strong>package:</strong> It takes the compiled code and packages
						it in its distributable format, such as a JAR file.</li>
</ul>
<ul class=""bulleted-list"" id=""952c8a82-ae50-4df8-b58d-db0ca4e44fea"">
<li><strong>verify:</strong> To run any checks to verify the package is
						valid and meets quality criteria.</li>
</ul>
<ul class=""bulleted-list"" id=""cf21a5bd-5745-4b30-b669-59d6bd754751"">
<li><strong>install:</strong> To install the package into the local
						repository, for use as a dependency in other projects.</li>
</ul>
<ul class=""bulleted-list"" id=""c208cd88-edaf-4c80-8f85-44b83572e498"">
<li><strong>deploy:</strong> To copy the final package to the remote
						repository for sharing with other developers and projects.</li>
</ul>
<p class="""" id=""7965495d-28b3-4d1b-8566-80fff2455955"">
</p>
</div>",3,"standard","lesson"
"Dependency Management in Maven","dependency-management-in-maven","Chapter 4, Dependency Management in Maven, this chapter discusses one of the most important concepts of dependency management, direct and transitive dependencies, and discusses various maven scopes.","LIVE","<div class=""page-body"">
<figure class=""block-color-gray_background callout"" id=""cff36e31-57c8-46c8-a034-5ba15bdb691d"">
<div><span class=""icon"">💡</span></div>
<div><em><strong>Chapter 4</strong></em><strong>,</strong> <em>Dependency
							Management in Maven</em>, this chapter discusses one of the most important concepts of
						dependency management, direct and transitive dependencies, and discusses various maven scopes.
					</div>
</figure>
<p class="""" id=""8f43f2bb-50e1-4a71-9ab7-31dad209fc7a"">One of the key features of Maven is its dependency
					management system, which allows you to declare the external libraries and other projects that your
					project depends on. Maven just not support dependencies for a single project, but it can manage the
					dependencies for multi-module projects by maintaining a high degree of control and stability.</p>
<h2 class="""" id=""25bd5169-a61d-4fdb-a570-a7a40faf9c6e"">4.1 Dependency Management</h2>
<p class="""" id=""0e74bff2-44e4-4a7f-abfd-cf77b8b0905f"">In Maven, a project is a collection of source
					code, build scripts, configuration files, and resources that are organized into a standard directory
					structure. The project directory contains a file called pom.xml, which is the <strong>Project Object
						Model (POM)</strong> that defines the project's dependencies, build settings, and other
					configuration details.</p>
<p class="""" id=""a401fc6a-8289-4776-99b0-ced31f41e311"">Maven uses the <code>pom.xml</code> file to manage
					dependencies, and it provides several benefits, including:</p>
<ul class=""bulleted-list"" id=""dd9d837f-ccc8-426c-ac4a-0e6def50ac3f"">
<li><strong>Automatic download</strong> and caching of dependencies
						from remote repositories.</li>
</ul>
<ul class=""bulleted-list"" id=""1017510e-d1b3-41fc-b3ca-c82bdb46e97a"">
<li><strong>Transitive dependency</strong> resolution, which means that
						Maven can automatically download and include the dependencies of your dependencies.</li>
</ul>
<ul class=""bulleted-list"" id=""694e125e-c8ad-4174-8cc9-bf20b2d00202"">
<li><strong>Dependency conflict resolution</strong>, which means that
						Maven can automatically resolve conflicts when multiple dependencies require different versions
						of the same library.</li>
</ul>
<ul class=""bulleted-list"" id=""641a01e8-f888-4fc7-98b2-460ce1058c33"">
<li><strong>Consistent version management</strong> means that you can
						specify a range of acceptable versions for a dependency, and Maven will automatically select the
						highest compatible version.</li>
</ul>
<p class="""" id=""5057ae66-9911-4a6c-ab6c-3eef9a088c0e"">To declare a dependency in Maven, you simply add a
					dependency tag to the pom.xml file, specifying the group ID, Artifact ID, and version of the library
					that you want to use. For example, the following code declares a dependency on the Apache Commons
					Lang and jUnit library.</p>
<pre class=""code"" id=""62705b90-eab2-4f89-9c30-a509b73c4cfc""><code class=""language-XML"">&lt;project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd""&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;com.stacktips&lt;/groupId&gt;
  &lt;artifactId&gt;maven-hello-world&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;maven-hello-world&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
  
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
      &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;
      &lt;version&gt;3.12.0&lt;/version&gt;
    &lt;/dependency&gt;

  &lt;/dependencies&gt;
&lt;/project&gt;</code></pre>
<p class="""" id=""ff9eb869-8781-47b0-ace0-f3502b3d7150"">When you build the project using Maven, it will
					automatically download the <code>commons-lang3-3.12.0.jar</code> file from the remote repository and
					include it in your project's <strong>classpath</strong>.</p>
<h3 class="""" id=""ec3e8501-5b49-4f3f-bdc0-b95eb53074fb"">4.1.1 Transitive Dependency</h3>
<p class="""" id=""23d13ad4-ac5c-46a5-ae9f-0cecf690c4c6"">There are primary two types of dependencies:
					direct dependency and transitive dependencies.  Direct dependencies are the packages that are
					defined in your dependency descriptor or pom.xml file. </p>
<p class="""" id=""30ce52f9-0bca-49fd-b4ad-6678875e00a9"">Transitive dependencies are the direct
					dependencies of your direct dependencies. For example, in the following figure, package A depends
					directly on B and D; they are called direct dependencies. However, package B depends on package C,
					and though you have not included it directly in your project, you will need that for package B to
					work correctly. The package C is considered a transitive dependency for package A.</p>
<figure class=""image"" id=""1c3ce3eb-a4a6-4f33-8571-5c384c7e15ed""><a href=""https://media.stacktips.com/media/uploads/summernote/Chapter_4-_Dependency_Management_in_Maven.png""><img src=""https://media.stacktips.com/media/uploads/summernote/Chapter_4-_Dependency_Management_in_Maven.png""/></a>
<figcaption>Figure 4.2 Direct and Transitive Dependencies Maven</figcaption>
</figure>
<p class="""" id=""fb9b869e-e719-46e5-8472-7c37bc44feb0""><strong>Automatic Transitive Dependencies
						resolution:</strong> Maven has an inbuilt feature that automatically resolves the Transitive
					Dependencies for your project. What that means is that, if your project is dependent on some
					libraries and those libraries are dependent on other libraries, you only specify your project’s
					dependencies, and Maven takes care of other dependencies.</p>
<p class="""" id=""b181df20-1cb1-4411-bd46-7bf5b96f0514""><strong>Cyclic dependency:</strong> There is no
					limit to the levels that dependencies can be gathered from and will only cause a problem if cyclic
					dependency is discovered. If your project depends on A and A depends on C, and C depends on B and B
					depends on A.</p>
<p class="""" id=""3e61a17b-5fc4-4f98-bd91-b46c8df67c8d""><strong>Dependency Mediation:</strong> When
					multiple versions of a package are encountered, you can always guarantee a version by declaring it
					explicitly in the project’s POM. If two dependency versions are at the same depth in the dependency
					tree, the order in the declaration that counts, the first declaration wins.</p>
<p class="""" id=""d5315931-c4a4-4873-8454-f78f55bfae8d""><strong>Excluded Dependencies:</strong> If Project
					X depends on project Y, and project Y depends on project Z, project X can explicitly exclude project
					Z as a dependency using the exclusion element.</p>
<p class="""" id=""695437e5-8d37-492b-a46f-d3a55f1d72f1"">Overall, Maven's project and dependency
					management features make it easy to create and manage complex Java projects, while minimising the
					amount of manual configuration and maintenance required.</p>
<h3 class="""" id=""3fee181f-a220-4aab-a1e9-d171a3765046"">4.1.2 Dependency Scope</h3>
<p class="""" id=""f7fc420b-045c-416a-a123-257825ee08f2"">The Dependency scope controls when and where a
					dependency is included in your project. It is used to restrict the transitivity of a dependency,
					whether a dependency's dependencies are also included or not. There are 6 scopes available:</p>
<ul class=""bulleted-list"" id=""f825020e-92e6-4f9c-9a8b-72a13f46d9be"">
<li><code>compile</code> - This is the default scope. The dependencies
						defined with this scope are available in all (compilation, testing, runtime)
						<strong>classpaths</strong> of a project.</li>
</ul>
<ul class=""bulleted-list"" id=""fd86bd3b-f595-4c4a-9a34-1b9340e2415d"">
<li><code>provided</code> - This is used when JDK or the runtime
						environment such as the servlet container is going to provide a dependency at runtime. These
						dependencies are not packaged with your application.</li>
</ul>
<ul class=""bulleted-list"" id=""d11447bc-ba40-423c-a8b8-4cccf392e289"">
<li><code>runtime</code> - This scope indicates that the dependency is
						not required for compilation but is needed at runtime.</li>
</ul>
<ul class=""bulleted-list"" id=""f52cc13b-e034-456e-9771-a192f9839176"">
<li><code>test</code> - This scope indicates the dependency is required
						during the test compilation and execution phases.</li>
</ul>
<ul class=""bulleted-list"" id=""18002ecb-f697-4fc8-bf57-a2d06a95081d"">
<li><code>system</code> - This scope is like provided except that you
						must explicitly provide a JAR file and not looked up in the repository.</li>
</ul>
<ul class=""bulleted-list"" id=""063cbe7e-7494-45b8-a6eb-74b0a4499dbb"">
<li><code>import</code> - This is used inside a
						<code>dependencymanagement</code> It indicates that the specified POM should be replaced with
						the dependencies in that POM’s <code>dependencymanagement</code> section.</li>
</ul>
<p class="""" id=""3f3a176c-8741-417b-99aa-ad1f4dea6bd2"">For specifying the scope in pom.xml file we can
					use the syntax as follows:</p>
<pre class=""code"" id=""9e951c22-4ebc-4e66-9424-1909501bb55b""><code class=""language-XML"">&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;
    &lt;version&gt;2.19.0&lt;/version&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;junit&lt;/groupId&gt;
    &lt;artifactId&gt;junit&lt;/artifactId&gt;
    &lt;version&gt;4.13.2&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre>
<p class="""" id=""646110ee-48db-43bc-ab6f-77bed69f0fdb"">System dependencies are specified with systemPath
					under system scope, and they are always available and are not looked up in the repository. Here is
					how you can use system scope.</p>
<pre class=""code"" id=""621f44a1-bcab-49ff-8729-2c631b73306a""><code class=""language-XML"">&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;com.provider&lt;/groupId&gt;
    &lt;artifactId&gt;artifact-id&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;scope&gt;system&lt;/scope&gt;
    &lt;systemPath&gt;${home}/lib/external-lib-1.0.0.jar&lt;/systemPath&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre>
<h2 class="""" id=""50f4b623-c15b-463e-a247-4118e41e9ea8"">4.2 Maven Properties</h2>
<p class="""" id=""a19ed77b-77a1-4a05-9af2-9a7f22b45029"">Properties in Maven can be used to simplify the
					configuration of your project, making it more maintainable, and reducing the amount of duplicated
					code.</p>
<p class="""" id=""36cc6622-0dce-4eed-91ca-8423e93596f4"">For example, you can create a property defining
					the version of a commonly used library, and then use that property throughout your pom.xml file. If
					you need to update the library version in the future, you can simply change the property value,
					rather than updating it in multiple places all over the <code>pom.xml</code> file.</p>
<p class="""" id=""0512842b-352b-4e90-aed5-cc7719ccd35a"">The properties in Maven are defined using the
					<code>&lt;properties&gt;</code> element and are referenced using the <code>${property}</code>
					syntax.</p>
<p class="""" id=""cf7b21cd-cb03-4a0c-a990-2dc45fac05ed"">Here's an example of how to define and use a
					property in a pom.xml file:</p>
<pre class=""code"" id=""92c940d5-7c46-4928-88ec-f702a9b97557""><code class=""language-XML"">&lt;project&gt;
  &lt;groupId&gt;com.stacktips&lt;/groupId&gt;
  &lt;artifactId&gt;your-artifact-id&lt;/artifactId&gt;
  &lt;version&gt;1.0.0&lt;/version&gt;
  &lt;properties&gt;
    &lt;junit.version&gt;4.13.2&lt;/junit.version&gt;
  &lt;/properties&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;${junit.version}&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;</code></pre>
<p class="""" id=""4c1bc71d-2b69-46f8-9536-511e1d014f97"">In this example, the <code>junit.version</code>
					property is defined in the <code>&lt;properties&gt;</code> element, and is given the value 4.13.2.
					Later in the file, the <code>${junit.version}</code> syntax is used to reference the property value
					as the version number for the JUnit dependency.</p>
<h2 class="""" id=""802c13b2-b97e-4485-9c43-3595a657b46d"">4.3 Build Element in Maven</h2>
<p class="""" id=""dc4f0ccf-a829-448f-889a-1640332e4bd9"">The build element in Maven is used to define the
					build process for a project. It contains a set of configuration options that control how the project
					is compiled, tested, and packaged. The Maven project we have generated in the previous chapter has a
					very straightforward structure and dependencies. </p>
<p class="""" id=""6f8bba67-e6d7-4d37-9c5f-3784bfbee58d"">Maven uses default build configuration and
					provides a sensible default for simple Java projects. Hence, you don’t see the
					<code>&lt;build&gt;</code> element inside our pom.xml file.</p>
<p class="""" id=""8a292cde-6c83-4580-8ce6-8c90ce346e69"">However, as the complexity increases you will be
					required to customize your build configurations to maintain consistency in the build process for all
					developers working on the same project. Here are some of the common elements that can be defined
					within the build element in Maven:</p>
<ul class=""bulleted-list"" id=""626c119a-74f7-4e68-85de-0f537817a0d9"">
<li><code>plugins</code>: Maven plugins are used to extend the build
						process with additional functionality. The plugins element is used to configure the plugins that
						should be used for this project.</li>
</ul>
<ul class=""bulleted-list"" id=""f22423ce-55e6-439d-8f6a-a27b93dc2997"">
<li>The <code>sourceDirectory</code> and
						<code>testSourceDirectory</code>: These elements specify the location of the source code and
						test code directories for the project.</li>
</ul>
<ul class=""bulleted-list"" id=""eb61dda8-33bf-492d-9758-3d0aa68b69f3"">
<li>The resources and <code>testResources</code>, elements specify
						additional resources that should be included in the project, such as configuration files or data
						files.</li>
</ul>
<ul class=""bulleted-list"" id=""a81b76d2-e43c-4496-ae59-8a296c97aeca"">
<li>The plugins element is used to configure the plugins that should be
						used for this project. Plugins can be used for a variety of tasks, such as running tests,
						generating documentation, or creating executable JAR files.</li>
</ul>
<ul class=""bulleted-list"" id=""8566cbbf-b330-4a46-bbc7-647e8913c4d7"">
<li>The extensions element is used to specify Maven extensions, which
						are used to modify or enhance the build process. Extensions are like plugins, but they are
						loaded before the plugins and can modify the behavior of the core Maven system.</li>
</ul>
<p class="""" id=""3b6f66cc-02f4-478e-8a39-cf0c18c3eb51"">Here's an example of a build element in a
					pom.xml file:</p>
<pre class=""code"" id=""03277965-bb39-42ce-887b-db3a5dadb1f1""><code class=""language-XML"">&lt;build&gt;
  &lt;sourceDirectory&gt;src/main/java&lt;/sourceDirectory&gt;
  &lt;testSourceDirectory&gt;src/test/java&lt;/testSourceDirectory&gt;
  &lt;resources&gt;
    &lt;resource&gt;
      &lt;directory&gt;src/main/resources&lt;/directory&gt;
    &lt;/resource&gt;
  &lt;/resources&gt;
  &lt;testResources&gt;
    &lt;testResource&gt;
      &lt;directory&gt;src/test/resources&lt;/directory&gt;
    &lt;/testResource&gt;
  &lt;/testResources&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;configuration&gt;
        &lt;source&gt;1.8&lt;/source&gt;
        &lt;target&gt;1.8&lt;/target&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;</code></pre>
<p class="""" id=""2bfd1c75-eca1-4166-84d6-17ad60f2e487"">In this example, the build element is used to
					define the source code and test code directories, as well as the resources and test resources
					directories. Additionally, the maven-compiler-plugin is configured with a specific source and target
					version.</p>
</div>",4,"standard","lesson"
"Local, Central, and Remote Repository in Maven","local-central-remote-maven-repository","Chapter 5, Local, Central, and Remote Maven Repository, walks you through the various repository types and how they can be configured in the settings.xml file. It also covers the order maven attempts to resolve the dependency from different repositories.","LIVE","<div class=""page-body"">
<figure class=""block-color-gray_background callout"" id=""08ea2dcd-7556-4c8e-9fcc-c48a1e792bea"">
<div><span class=""icon"">💡</span></div>
<div><em><strong>Chapter 5</strong></em><strong>,</strong> <em>Local, Central,
							and Remote Maven Repository</em>, walks you through the various repository types and how
						they can be configured in the settings.xml file. It also covers the order maven attempts to
						resolve the dependency from different repositories.</div>
</figure>
<p class="""" id=""ffc4676c-5b4b-469f-9e10-2b924a9a5d59"">Maven uses a centralised repository of software
					libraries called the Maven Repository to manage and download project dependencies. The Maven
					Repository is divided into three types: Local, Central, and Remote.</p>
<h2 class="""" id=""54d54fda-65d2-4709-82c8-e0648be9e2cb"">3.1 Local Maven Repository</h2>
<p class="""" id=""b0a56881-cbff-4286-a528-5da4ff5cf9be"">The local repository is a directory on the
					developer's machine where all the dependencies for a specific project are stored. When a
					developer builds a project, Maven checks for the required dependencies in the local repository. If
					the dependency is not available, it is downloaded from a remote repository and stored in the local
					repository for future use. This reduces the build time when you build your project very often.</p>
<p class="""" id=""bcf35818-0c07-4991-91a5-8a3401a862ee"">The local repository in Maven is usually located
					in the user's home directory under the .m2 folder.</p>
<h3 class="""" id=""184419f0-d527-4624-a083-52aa676de7fd"">3.1.1 Change the Local Maven Repository Path</h3>
<p class="""" id=""ddc6ea6c-3847-41aa-9b02-58d433e4416c"">However, you can change the path to the local
					repository by modifying the <strong>settings.xml</strong> file, which is in the
					<strong>conf</strong> directory of your Maven installation.</p>
<p class="""" id=""89883b60-0675-47bf-a729-50a1316cd44e"">Here are the steps to change the Local Maven
					Repository path:</p>
<ol class=""numbered-list"" id=""9a405c87-c189-461c-bec7-898511db65bf"" start=""1"" type=""1"">
<li>Locate the XML file in the <strong>conf</strong> directory of your Maven installation.</li>
</ol>
<ol class=""numbered-list"" id=""6d3408ae-6115-41fd-81da-d2001a79c2a1"" start=""2"" type=""1"">
<li>Open the XML file in a text editor.</li>
</ol>
<ol class=""numbered-list"" id=""84e6771d-cdeb-4530-bf9a-15716fa7e363"" start=""3"" type=""1"">
<li>Search for the <code>&lt;localRepository&gt;</code> tag in the file. If the tag is not present,
						you can add it to the file.</li>
</ol>
<ol class=""numbered-list"" id=""f7741f99-546e-4869-ab4c-1dbe9ada2f03"" start=""4"" type=""1"">
<li>Modify the value of the &lt;localRepository&gt; tag to the desired location. For example, if you
						want to change the local repository to a folder named my-local-repo in the
						<code>D:\\drive</code>, the tag's value would be
						<code>&lt;localRepository&gt;D:\\my-local-repo&lt;/localRepository&gt;</code>.</li>
</ol>
<ol class=""numbered-list"" id=""f590033c-f508-459b-b80b-68da55607f2c"" start=""5"" type=""1"">
<li>Save the changes to the XML file.</li>
</ol>
<p class="""" id=""6aefdac4-dca1-4ac0-bd8c-7b1f6f700dda"">Once you have saved the changes to the
					settings.xml file, the new location will be used for all future Maven builds. Any dependencies that
					were previously downloaded to the old local repository will not be automatically moved to the new
					location, so you may need to copy them manually if required.</p>
<h2 class="""" id=""54531d1f-aa64-43b1-bdfb-bb23cfa09658"">3.2 Central Maven Repository</h2>
<p class="""" id=""f4526aab-b5d8-40fc-9228-63d1277ea3ce"">The Central Repository is the default remote
					repository used by Maven. It contains a vast collection of open-source libraries and dependencies,
					making it a one-stop shop for most projects. When Maven needs to download a dependency, it first
					looks in the local repository and then in the Central Repository.</p>
<p class="""" id=""7f925502-fbeb-4956-8048-f3410a716c14"">The <strong>central maven repository</strong> is
					managed by the Apache community. There are almost all Java libraries that exist in it. You can
					browse it at <a href=""https://repo1.maven.org/maven2/"">https://repo1.maven.org/maven2/</a>.</p>
<p class="""" id=""9eac17dd-ad40-4352-ad75-38218c617ced"">When building a project, if it cannot find any
					dependent jars in the local Maven repository it will search in the central Maven repository and
					download those jars if found. You can also search for an artifact at <a href=""http://search.maven.org/"">http://search.maven.org</a>  if you want to download the
					artifact’s pom or jars.</p>
<h2 class="""" id=""d15cf64d-d2fb-41f5-9229-ce6847335aa6"">3.3 Remote Maven Repository</h2>
<p class="""" id=""bd853928-77a3-439b-ad40-a60b0dc41ed1"">A remote repository is a repository of
					dependencies located on a remote server, typically managed by a third-party organization. Maven can
					be configured to use multiple remote repositories, and dependencies can be downloaded from these
					repositories as needed. Developers can also publish their artifacts to a remote repository for use
					by other projects.</p>
<p class="""" id=""f7745f77-5efa-42b8-aba0-2a1b5bd53d40"">Here's an example of how to use a remote
					Maven repository in a Java project:</p>
<ol class=""numbered-list"" id=""a19e3e1d-037b-4e3d-83af-8dc35d7da276"" start=""1"" type=""1"">
<li>Open your project's XML file in a text editor.</li>
</ol>
<ol class=""numbered-list"" id=""87fba96a-5665-4f85-a354-dbcdd6020c2a"" start=""2"" type=""1"">
<li>Add a new <code>&lt;repositories&gt;</code> section to the file, if it doesn't exist
						already. For example:</li>
</ol>
<pre class=""code"" id=""7f304980-07cd-4206-a006-eeffee81be69""><code class=""language-XML"">&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;central&lt;/id&gt;
        &lt;name&gt;Central Repository&lt;/name&gt;
        &lt;url&gt;&lt;https://repo.maven.apache.org/maven2&gt;&lt;/url&gt;
    &lt;/repository&gt;
    &lt;repository&gt;
        &lt;id&gt;jcenter&lt;/id&gt;
        &lt;name&gt;JCenter&lt;/name&gt;
        &lt;url&gt;&lt;https://jcenter.bintray.com&gt;&lt;/url&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;</code></pre>
<p class="""" id=""618362a9-49f6-44f4-9c1f-81519f8a2d92"">In this example, we have added two remote
					repositories - the Central Repository and JCenter. These repositories are identified by a unique ID,
					which is used to reference them in the project's dependencies.</p>
<ol class=""numbered-list"" id=""03f8eadc-9c5d-4b25-83d1-8e8faef8fc4c"" start=""3"" type=""1"">
<li>Now you can add dependencies to your project that are hosted in these remote repositories. For
						example:</li>
</ol>
<pre class=""code"" id=""30485217-e715-485b-a1aa-cb5d967eae57""><code class=""language-XML"">&lt;dependencies&gt;
&lt;dependency&gt;
    &lt;groupId&gt;junit&lt;/groupId&gt;
    &lt;artifactId&gt;junit&lt;/artifactId&gt;
    &lt;version&gt;4.13.2&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;
    &lt;artifactId&gt;guava&lt;/artifactId&gt;
    &lt;version&gt;30.1.1-jre&lt;/version&gt;
&lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre>
<p class="""" id=""737bb051-81e3-4c0f-8e7e-ac2ea599f018"">In this example, we are adding two dependencies to
					the project - JUnit and Guava. JUnit is hosted in the Central Repository, while Guava is hosted in
					JCenter.</p>
<h2 class="""" id=""670c9813-cafb-42e4-bac6-fce12cf81b6e"">3.4 Order of Dependency Search in Maven</h2>
<p class="""" id=""679ff91b-3d20-4637-85e7-0441b13bb4f5"">The order in which Maven searches for dependencies
					in the local and remote repositories is as follows:</p>
<ol class=""numbered-list"" id=""4b470e1a-f5f6-4f79-942e-3e8ea7f31683"" start=""1"" type=""1"">
<li>First, Maven looks for the dependency in the local repository. If the dependency is not found,
						it proceeds to the next step.</li>
</ol>
<ol class=""numbered-list"" id=""9e492e8f-10ce-4183-a8db-e16c54ced3f8"" start=""2"" type=""1"">
<li>Next, Maven looks at the remote repositories in the order they are defined in the XML file. If
						the dependency is found in a remote repository, it is downloaded and stored in the local
						repository for future use.</li>
</ol>
<ol class=""numbered-list"" id=""1f313675-6def-4303-aee5-a59973612e37"" start=""3"" type=""1"">
<li>If the dependency is not found in any of the remote repositories, Maven will report a build
						error.</li>
</ol>
<p class="""" id=""1c682a81-8549-4e25-8eeb-92ac64c1a758"">So, in summary, the dependency search order in
					Maven is first the local repository, followed by the remote repositories in the order they are
					defined in the <code>pom.xml</code> file.</p>
<p class="""" id=""1025d759-768d-4284-9495-c45f04396ead"">In summary, the local repository is where Maven
					stores project-specific dependencies, while the remote repository is where Maven can retrieve
					dependencies from third-party organizations. The central repository is the default remote repository
					used by Maven, which provides access to a vast collection of open-source libraries and dependencies.
				</p>
</div>",5,"standard","lesson"
"Popular Maven Commands Cheat Sheet","maven-commands-cheat-sheet","Chapter 6, lists some of the most popular Maven commands with their use that every Java developer must know. Using these commands, you can easily build, test, and deploy your Java projects, and manage their dependencies and documentation.","LIVE","<p>
                    Here are some of the most popular Maven commands that every Java developer must know:
                </p>
<ul>
</ul><p>
<code>mvn clean</code>: This command is used to clean the project's target directory, which contains the compiled classes and generated artifacts. It removes all files generated during the build process.
                    </p><ul>
</ul>
<ul>
</ul><p>
<code>mvn compile</code>: This command is used to compile the source code of the project.
                    </p><ul>
</ul>
<ul>
</ul><p>
<code>mvn test</code>: This command is used to run the tests for the project.
                    </p><ul>
</ul>
<ul>
</ul><p>
<code>mvn package</code>: This command is used to create an executable JAR or WAR file of the project.
                    </p><ul>
</ul>
<ul>
</ul><p>
<code>mvn install</code>: This command is used to install the project's JAR or WAR file into the local Maven repository.
                    </p><ul>
</ul>
<ul>
</ul><p>
<code>mvn deploy</code>: This command is used to deploy the project's JAR or WAR file to a remote Maven repository.
                    </p><ul>
</ul>
<ul>
</ul><p>
<code>mvn dependency:tree</code>: This command is used to display the project's dependency tree, showing all the dependencies and their transitive dependencies.
                    </p><ul>
</ul>
<ul>
</ul><p>
<code>mvn help</code>: This command is used to display the Maven help information, including the available commands and their descriptions.
                    </p><ul>
</ul>
<ul>
</ul><p>
<code>mvn archetype:generate</code>: This command is used to generate a new Maven project based on a specified project template, also known as an archetype.
                    </p><ul>
</ul>
<ul>
</ul><p>
<code>mvn site</code>: This command is used to generate the project's documentation site, including reports on code quality, test results, and more.
                    </p><ul>
</ul>
<p>
                    These are just a few of the most popular Maven commands, but there are many more available.
                </p>
<p>
                    By using these commands, you can easily build, test, and deploy your Java projects, and manage their dependencies and documentation.
                </p>",6,"standard","lesson"
"Working with Profiles in Maven","working-with-profiles-in-maven","Chapter 7- Working with Profiles in Maven, delves into managing profiles in Maven to customize the project’s build configuration for different environments or conditions.","LIVE","<div class=""page-body"">
<figure class=""block-color-gray_background callout"" id=""c9e073fe-3034-48b9-bbe6-1ee969b5765d"">
<div><span class=""icon"">💡</span></div>
<div><em><strong>Chapter 7- Working with Profiles in Maven</strong></em>, delves
						into managing profiles in Maven to customize the project’s build configuration for different
						environments or conditions.</div>
</figure>
<p class="""" id=""301391c6-385c-4dde-8463-6d37061d0b5e"">Maven allows you to customize a project’s build
					configuration for different environment or conditions. This can be done through profiles.</p>
<p class="""" id=""e451f000-3db2-4a25-b425-34b55e8e71af"">Profiles allow you to define a set of
					configuration options that are activated only under certain conditions, such as a specific
					environment or build context. Profiles can be defined in a project's pom.xml file, or an
					external XML file. Here's an example of a profile defined in a <code>pom.xml</code> file:</p>
<pre class=""code code-wrap"" id=""3ad8c4cd-cd22-4ecc-b3b2-2dec1bf7b5da""><code class=""language-XML"">&lt;project&gt;
  ...
  &lt;profiles&gt;
    
    &lt;profile&gt;
      &lt;id&gt;dev&lt;/id&gt;
      &lt;activation&gt;
        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
      &lt;/activation&gt;
      &lt;properties&gt;
        &lt;database.driver&gt;com.mysql.jdbc.Driver&lt;/database.driver&gt;
        &lt;database.url&gt;jdbc:mysql://localhost/devdb&lt;/database.url&gt;
        &lt;database.username&gt;devuser&lt;/database.username&gt;
        &lt;database.password&gt;devpass&lt;/database.password&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;

    &lt;profile&gt;
      &lt;id&gt;prod&lt;/id&gt;
      &lt;properties&gt;
        &lt;database.driver&gt;com.mysql.jdbc.Driver&lt;/database.driver&gt;
        &lt;database.url&gt;jdbc:mysql://localhost/proddb&lt;/database.url&gt;
        &lt;database.username&gt;produser&lt;/database.username&gt;
        &lt;database.password&gt;prodpass&lt;/database.password&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;

  ...
&lt;/project&gt;</code></pre>
<p class="""" id=""8ee1787f-ef43-4015-9562-9d0907dc255b"">In this example, two profiles are defined:
					<code>dev</code> and <code>prod</code>. The <code>dev</code> profile is active by default and sets
					the database configuration properties for a development environment. The <code>prod</code> profile
					sets the database configuration properties for a production environment.</p>
<p class="""" id=""d9d69864-53aa-4637-8fba-300173e36022"">To activate a profile, you can use the
					<code>-P</code> command line option when running Maven. For example, to activate the
					<code>prod</code> profile, you can run the following command:</p>
<pre class=""code code-wrap"" id=""7a06c00d-fabd-48dd-b15b-adce7e9c0dee""><code class=""language-Plain Text"">mvn clean install -Pprod</code></pre>
<p class="""" id=""10e6c894-098a-4903-8f4d-f6b6653618ab"">This will activate the <code>prod</code> profile,
					and use the database configuration properties defined in that profile.</p>
<p class="""" id=""725143d2-26ed-4950-abd1-3ee58c1fef1c"">In addition to property settings, profiles can
					also define other configuration options such as plugin configurations, build profiles, and more. By
					using profiles, you can create a flexible and customizable build configuration that can be tailored
					to different environments and situations.</p>
<h2>Wrap up</h2>
<p>The Maven course is an essential training program for Java developers to create robust, maintainable, and scalable Java applications. Hope this course helps you to to learn maven build process for your next Java application.</p>
</div>",7,"standard","lesson"
"HTML-Introduction to HTML","html-introduction-to-html","This lesson will help you get started with all the tools you need to begin writing your very first HTML documents!","DRAFT","

<p>The web is made up of three major components, HTML, CSS and JavaScript. This class will help you become familiar with the most basic component of them all, <strong>HTML</strong>.</p>
<p>HTML is the language of the web. It is the building block that is written both to give meaning to the content that is inside, but to also give pages structure.</p>
<p>HTML handles everything from placing images, to the text you see here, to where to load styles and scripts from.</p>
<aside class=""aside__tip"">
<p>    HTML stands for HyperText Markup Language!</p>
</aside>
<h2 id=""prerequisites"">Prerequisites</h2>
<ol>
<li>A computer and internet connection.</li>
<li>A desire to tackle on the web!</li>
</ol>
<p>Writing your very first HTML file is easier than you think, so let's get started.</p>

<h2 id=""selecting-a-text-editor"">Selecting a Text Editor</h2>
<p>While you can write and edit HTML with any text editor, we highly suggest using <a href=""https://code.visualstudio.com/"" rel=""noopener"" target=""_blank"">Visual Studio Code</a>. (Fun fact: the editor is actually written using HTML!) It supports pretty much every operating system and you'll love how simple and pretty it looks. Of course, feel free to use whatever text editor you are already comfortable with.</p>
<figure>
<img alt=""Visual Studio Code"" height=""601"" loading=""lazy"" src=""https://sabe.io/classes/html/introduction/visual-studio-code.png"" width=""800""/>
<figcaption>Visual Studio Code</figcaption>
</figure>
<h2 id=""hello-world"">Hello World</h2>
<p>Create a brand new file in your editor, and type this in:</p>
<pre class=""pre__block"">	<code class=""language-markup"">Hello world!</code>
</pre>
<p>Save it as <code>index.html</code>, and make sure you save it with the <code>.html</code> extension instead of <code>.txt</code>. Navigate to where you saved the file and open it with your browser of choice.</p>
<p>If done correctly, you should see something like this:</p>
<figure>
<img alt=""Hello World in your browser."" height=""226"" loading=""lazy"" src=""https://sabe.io/classes/html/introduction/hello-world.png"" width=""328""/>
<figcaption>Hello World in your browser.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false"">hello world</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>If so, congratulations, you have written your very first HTML document!</p>
<figure>
<img alt=""When you open the file and it actually renders."" height=""332"" loading=""lazy"" src=""https://sabe.io/classes/html/introduction/celebration.gif"" width=""638""/>
<figcaption>When you open the file and it actually renders.</figcaption>
</figure>



",0,"standard","lesson"
"HTML-Tags, Attributes, and Elements","html-tags-attributes-and-elements","Learn about the very basics of HTML including head, body, title tags, and what elements and attributes are.","DRAFT","

<p>Let's learn the difference between HTML elements, tags, and attributes. We'll also take a look at a very basic HTML document.</p>
<h2 id=""elements"">Elements</h2>
<p><strong>Elements</strong> are the building blocks of HTML. They are the smallest units of content and you use them to build larger elements. Elements can be nested to create more complex content.</p>
<p>Here's an example of an HTML element:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;p&gt;This is a paragraph.&lt;/p&gt;</code>
</pre>
<p>Notice that the element is surrounded by angle brackets (&lt; and &gt;). This element is using a <code>p</code> tag, and its content is ""This is a paragraph.""</p>

<h2 id=""tags"">Tags</h2>
<p><strong>Tags</strong> are the names of the elements. They are used to identify the type of element that you are creating. An opening and closing tags makes a complete element, however, you can also use self-closing tags. Self-closing tags are used to create elements that don't contain content.</p>
<p>Here is an example of a self-closing tag:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;br /&gt;</code>
</pre>
<p>Here's a look at the syntax of any generic tag:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;tag&gt;The opening tag is on the left, closing tag on the right.&lt;/tag&gt;</code>
</pre>
<p>Here are some other examples of tags:</p>
<ul>
<li><code>a</code></li>
<li><code>p</code></li>
<li><code>h1</code></li>
<li><code>div</code></li>
<li><code>span</code></li>
</ul>
<h2 id=""attributes"">Attributes</h2>
<p>In addition to tags, HTML has another way of helping you give meaning to your content, called <strong>attributes</strong>.</p>
<p>Attributes describe the tags that they are placed inside of. The syntax for attributes is extremely simple. A valid attribute is a name-value pair, separated by an equals sign.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""special""&gt;I am a special heading!&lt;/div&gt;</code>
</pre>
<p>In this example, <code>class</code> is the attribute, and <code>special</code> is the value. Attributes describe tags because now this <code>div</code> tag might act or look differently than another <code>div</code> tag with another class attribute, or no class attribute at all.</p>
<p>The following is a generic example of how an attribute with a value can be applied to a tag.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;tag attribute=""value""&gt;I am a generic example.&lt;/tag&gt;</code>
</pre>
<p>Hopefully now you know the difference between HTML tags, attributes and elements!</p>
<figure>
<img alt=""HTML is fun!"" height=""252"" loading=""lazy"" src=""https://sabe.io/classes/html/tags-attributes-elements/typing.gif"" width=""498""/>
<figcaption>HTML is fun!</figcaption>
</figure>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element"" rel=""noopener"" target=""_blank"">HTML Elements - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes"" rel=""noopener"" target=""_blank"">HTML Attributes - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Basic HTML Page","html-basic-html-page","Let's learn how to write a basic HTML page, including the head, body, author, descroption tags, and setting a DOCTYPE.","DRAFT","

<p>HTML is a very simple language to learn. It is a markup language, which means that it is a language for describing documents as a sequence of markup elements. Let's look at a very basic HTML page, what a DOCTYPE is, the difference between a head tag and a body tag is, how to add a class, and what an ID is.</p>
<h2 id=""doctype"">DOCTYPE</h2>
<p>Before we dive into a basic HTML page, it's important to know what <strong>DOCTYPE</strong> is. This declaration appears at the very top of every HTML document and it tells the browser that what follows next is <strong>HTML 5</strong>, as opposed to an earlier version of HTML, and it looks like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;</code>
</pre>

<h2 id=""a-basic-html-page"">A basic HTML page</h2>
<p>Creating a <em>real</em> HTML document requires the use of HTML tags. HTML tags are used to describe and give meaning to whatever content is inside the tag, which gives the page structure.</p>
<p>Let's start with a very basic HTML document.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Look at this title!&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;I am very important!&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>You can see that the <code>html</code> tag encompasses the entire document. This tells the browser ""hey, everything between these two tags is an HTML document, so please render it"".</p>
<p>After that, pretty much every website you browse will then contain two more tags, a <code>head</code> and <code>body</code> tag.</p>
<h2 id=""head-tag"">Head tag</h2>
<p>The <code>head</code> tag allows you to add metadeta describing your HTML page. Metadata is data that describes other pieces of data. The metadata you provide is useful for the browser to further understand what your page is about.</p>
<p>Things that are typically included in the <code>head</code> tag include the page title you see at the top, links to any external files like CSS and JavaScript files, a description for the page, adding a favicon, and much more.</p>

<h2 id=""setting-a-page-title"">Setting a Page Title</h2>
<p>You can set the page title by adding a <code>title</code> tag inside the <code>head</code> tag. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;title&gt;Using Tags, Attributes and Elements&lt;/title&gt;</code>
</pre>
<p>Titles are important both to the user and search engines. The title of a page is what the user sees at the top of the browser window.</p>
<h2 id=""adding-a-description"">Adding a description</h2>
<p>You can add a description to your page by adding a <code>meta</code> tag with a <code>name</code> with <code>descriptiont</code> as the value inside the <code>head</code> tag. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;meta name=""description"" content=""Learn about HTML!""&gt;</code>
</pre>

<h2 id=""adding-a-favicon"">Adding a favicon</h2>
<p>Favicons are small icons that are used to identify your website in search engines and tabs. You can add a favicon to your page by adding a <code>link</code> tag with a <code>rel</code> with <code>icon</code> as the value inside the <code>head</code> tag. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;link rel=""icon"" href=""/images/favicons/favicon.ico""&gt;</code>
</pre>
<h2 id=""setting-an-author"">Setting an author</h2>
<p>You can set the author of your page by adding a <code>meta</code> tag with a <code>name</code> with <code>author</code> as the value inside the <code>head</code> tag. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;meta name=""author"" content=""John Cena""&gt;</code>
</pre>
<p>Authors are important because they are used to identify who created the page.</p>

<h2 id=""body-tag"">Body tag</h2>
<p>The <strong>body tag</strong>, on the other hand, is where the content you will see displayed on your screen resides. You need to put anything you want actually rendered on the page between the opening and closing <code>body</code> tags.</p>
<p>In an earlier example here, you saw a header with some text in between. The <code>h1</code> tag stands for <code>header1</code>, and is reserved for the <strong>most important header</strong>. There are many others like <code>h2</code>, <code>h3</code>, <code>h4</code>, and so on.</p>
<p>Save this file and open it in your browser.</p>
<figure>
<img alt=""This is how it should look for you."" height=""342"" loading=""lazy"" src=""https://sabe.io/classes/html/basic-html-page/demo.png"" width=""531""/>
<figcaption>This is how it should look for you.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><!DOCTYPE html>

<html>
    <head>
        <title>Look at this title!</title>
    </head>
    <body>
        <h1>I am very important!</h1>
    </body>
</html></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<h2 id=""class"">Class</h2>
<p><code>class</code> is an important attribute in HTML. It can be applied to pretty much every tag, which then makes it easy to apply styles to with CSS. The value of this attribute can be repeated as many times as you want. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;p class=""red""&gt;I am red&lt;/p&gt;
&lt;p class=""red""&gt;I am also red&lt;/p&gt;</code>
</pre>

<h2 id=""id"">ID</h2>
<p>Another important attribute in HTML is <code>id</code>. On a valid HTML page, the values of this attribute must all be unique. If you give a tag an ID of <code>first</code>, no other tag may have that same ID. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;p id=""first""&gt;I am first&lt;/p&gt;
&lt;p id=""second""&gt;I am second&lt;/p&gt;</code>
</pre>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Glossary/Doctype"" rel=""noopener"" target=""_blank"">Doctype - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Comments, Emphasis, Paragraphs, Line Breaks","html-comments-emphasis-paragraphs-line-breaks","Learn how to work with content tags in HTML like paragraphs, line breaks, emphasis, and strong tags.","DRAFT","

<p>Let's learn about how to add comments in HTML, how to italicize and bold your text, how to add paragraphs and line breaks to your page.</p>
<h2 id=""comments"">Comments</h2>
<p>Sometimes while writing HTML, you want to leave a comment, either for yourself or for another person. Keep in mind that, being comments, they will <strong>not be rendered at all</strong> and will in fact be completely ignored by the browser. You can think of comments as just little notes that do not affect anything else.</p>
<p>You can achieve this in HTML like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Comments&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        This is content.
        &lt;!-- This is a comment. --&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>You can also comment in the middle of a sentence, or have comments that span multiple lines, like so:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Multi-line Comments&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        This is &lt;!-- Comment inside. --&gt; some content.
        &lt;!--
        I am
        a multiple line
        comment --&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>Comments are useful depending on how you use them, but they are completely optional.</p>

<h2 id=""emphasis"">Emphasis</h2>
<p>Adding emphasis to content is a great way to highlight that selection over the surrounding content. HTML gives you two ways to give <strong>emphasis</strong> to content.</p>
<p>You have the <code>em</code> tag, which stands for <strong>emphasis</strong>, and the <code>strong</code> tag, which is to give content a <strong>strong importance</strong>. You can use both of these tags to emphasize content.</p>
<p>Load this up in your browser to see for yourself:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Emphasis&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        I &lt;em&gt;really&lt;/em&gt; think that HTML is &lt;strong&gt;awesome!&lt;/strong&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example using emphasis and strong."" height=""271"" loading=""lazy"" src=""https://sabe.io/classes/html/content/emphasis.png"" width=""434""/>
<figcaption>An example using emphasis and strong.</figcaption>
</figure>
<h2 id=""multiline-content"">Multiline Content</h2>
<p>Working with multiline content in HTML is pretty easy, but it is not like simply pressing enter on a Word document. For example, this will not give you the expected outcome:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Multiline Content&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        I am on the first line
        and I am on the second line.
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>They will render <strong>on the same line</strong>!</p>
<figure>
<img alt=""Without tags, content will render inline."" height=""271"" loading=""lazy"" src=""https://sabe.io/classes/html/content/multiline-content.png"" width=""434""/>
<figcaption>Without tags, content will render inline.</figcaption>
</figure>

<h2 id=""paragraph-tags"">Paragraph Tags</h2>
<p>The reason for this is the way HTML is eventually parsed by the browser. With no tags separating the two lines, the content is essentially treated as being together, and are thus rendered together, on the same line.</p>
<p>To get the desired effect in this case, you will need to use the paragraph tag, or <code>p</code> tag.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Paragraph Tags&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;I am on the first line&lt;/p&gt;
        &lt;p&gt;and I am on the second line.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Paragraph tags start on a new line."" height=""271"" loading=""lazy"" src=""https://sabe.io/classes/html/content/paragraph-tags.png"" width=""434""/>
<figcaption>Paragraph tags start on a new line.</figcaption>
</figure>
<p>With each line being encompassed by their own paragraph tag, the browser treats them as separate pieces of content and renders them as such. Paragraph tags are used for writing, well, paragraphs, which each paragraph being neatly separated from each other as you would expect.</p>
<h2 id=""line-break-tags"">Line Break Tags</h2>
<p>There is another way to accomplish a similar effect as above. It is usually discouraged unless in very specific cases, but that case might come up for you.</p>
<p>If you use a <strong>line break</strong> tag, or <code>br</code> tag, you can tell the browser to start a new line and render the rest of the content there instead.</p>
<p>Using a line break tag, we get this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Line Break Tags&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        I am on the first line&lt;br&gt;
        and I am on the second line.
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Line break tags force a new line."" height=""271"" loading=""lazy"" src=""https://sabe.io/classes/html/content/line-break-tags.png"" width=""434""/>
<figcaption>Line break tags force a new line.</figcaption>
</figure>
<p>Our content renders on separate lines, and we are now happy campers! We can now write content that is more readable and easier to read.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Comment"" rel=""noopener"" target=""_blank"">HTML Comments - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Headings","html-headings","Adding heading tags to your pages is a great way to help describe what your page is about and add hierarchy.","DRAFT","
<p>Page headings are important. They help set the tone for the rest of the page, and they are usually in a bigger font, so users notice them. Not only that, but headings are important for search engines too. Let's learn about the different types of headings, what the different levels mean, and how to use them.</p>
<h2 id=""headings"">Headings</h2>
<p>Whenever you want to give your page a heading, HTML has you covered as you have many tags at your disposal.</p>
<p>HTML offers you <strong>six different tags</strong>, to be more precise. They are:</p>
<ol>
<li><code>h1</code> tag</li>
<li><code>h2</code> tag</li>
<li><code>h3</code> tag</li>
<li><code>h4</code> tag</li>
<li><code>h5</code> tag</li>
<li><code>h6</code> tag</li>
</ol>
<aside class=""aside__tip"">
<p>    The lower the number, the more important that heading should be. Also, the lower the number, the fewer of them you should have on your page.</p>
</aside>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Headings&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;I am an h1 header&lt;/h1&gt;
        &lt;h2&gt;I am an h2 header&lt;/h2&gt;
        &lt;h3&gt;I am an h3 header&lt;/h3&gt;
        &lt;h4&gt;I am an h4 header&lt;/h4&gt;
        &lt;h5&gt;I am an h5 header&lt;/h5&gt;
        &lt;h6&gt;I am an h6 header&lt;/h6&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""All the heading tags."" height=""368"" loading=""lazy"" src=""https://sabe.io/classes/html/headings/headings.png"" width=""434""/>
<figcaption>All the heading tags.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><!DOCTYPE html>

<html>
    <head>
        <title>Headings</title>
    </head>
    <body>
        <h1>I am an h1 header</h1>
        <h2>I am an h2 header</h2>
        <h3>I am an h3 header</h3>
        <h4>I am an h4 header</h4>
        <h5>I am an h5 header</h5>
        <h6>I am an h6 header</h6>
    </body>
</html></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>Headings are important because they help describe what the page is about and help you establish hierarchy in your page. Do not use them for styling, only for describing how important the heading is in your page.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements"" rel=""noopener"" target=""_blank"">HTML Headings - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Unordered, Ordered, and Description Lists","html-unordered-ordered-and-description-lists","Learn how to create all kinds of lists in HTML including unordered lists, ordered lists and definition lists!","DRAFT","

<figure>
<img alt=""Lists, lists and more lists!"" height=""240"" loading=""lazy"" src=""https://sabe.io/classes/html/lists/lists.png"" width=""359""/>
<figcaption>Lists, lists and more lists!</figcaption>
</figure>
<p>Lists in HTML are used to organize related items in a semantic and well-structured way. These are the three types of lists that are used in HTML:</p>
<ul>
<li>Unordered lists</li>
<li>Ordered lists</li>
<li>Description lists</li>
</ul>
<p>What is the difference between an ordered list and unordered list? The difference between an <strong>ordered</strong> list and an <strong>unordered</strong> list, is that an ordered list will have its items ordered by number, whereas unordered lists will have just bullet points.</p>
<aside class=""aside__tip"">
<p>    Keep in mind that you can add images, links, and other elements inside a list item. This is a very useful feature, as it allows you to create a list with a lot of different kinds of content.</p>
</aside>
<h2 id=""unordered-lists"">Unordered Lists</h2>
<p>Making your own unordered list is straightforward. You just wrap an unordered list tag, or <code>ul</code> tag, around your list items, which use <code>li</code> tags. This will create a list of related items without being in a particular order.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Unordered List&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Things that are cool:&lt;/h1&gt;
        &lt;ul&gt;
            &lt;li&gt;Memes&lt;/li&gt;
            &lt;li&gt;Food&lt;/li&gt;
            &lt;li&gt;Coding&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""How an unordered list looks like."" height=""311"" loading=""lazy"" src=""https://sabe.io/classes/html/lists/unordered-list.png"" width=""431""/>
<figcaption>How an unordered list looks like.</figcaption>
</figure>

<h2 id=""ordered-lists"">Ordered Lists</h2>
<p>To turn our unordered list into an ordered one requires just changing the wrapper tag from ul (for unordered list) to an <code>ol</code> tag (ordered list). This will create an ordered list of related items.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Ordered List&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;How to become a great developer:&lt;/h1&gt;
        &lt;ol&gt;
            &lt;li&gt;Read all the content on Sabe&lt;/li&gt;
            &lt;li&gt;Practice, practice, practice.&lt;/li&gt;
            &lt;li&gt;Stay curious. Ask questions. Never stop learning.&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""How an ordered list looks like."" height=""311"" loading=""lazy"" src=""https://sabe.io/classes/html/lists/ordered-list.png"" width=""493""/>
<figcaption>How an ordered list looks like.</figcaption>
</figure>
<h2 id=""description-lists"">Description Lists</h2>
<p>Description lists are used whenever you have a word or some text, and you want to describe or define that text using multiple items, thus forming a list.</p>
<p>The outer-most tag is the description list tag, or <code>dl</code>. Following that is the term you want to describe, the <code>dt</code> tag. The descriptions are then placed inside <code>dd</code> tags.</p>
<p>Let's see an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Description List&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Here is a description list!&lt;/h1&gt;
        &lt;dl&gt;
            &lt;dt&gt;Computer&lt;/dt&gt;
            &lt;dd&gt;An electronic device for storing and processing data, typically in binary form, according to instructions given to it in a variable program.&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""How a description list looks like."" height=""311"" loading=""lazy"" src=""https://sabe.io/classes/html/lists/description-list.png"" width=""433""/>
<figcaption>How a description list looks like.</figcaption>
</figure>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul"" rel=""noopener"" target=""_blank"">The Unordered List element - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li"" rel=""noopener"" target=""_blank"">The List Item element - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl"" rel=""noopener"" target=""_blank"">The Description List element - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Links","html-links","Learn how pages on the web are connected to one another with absolute links, relative link, and ID links.","DRAFT","
<h2 id=""links"">Links</h2>
<p><strong>Links</strong>, hyperlinks, or anchor elements, on the web are the primary form of navigation. Without them, the web as we know it would be a very different place. Links are used to navigate to other pages on the web, files, email addresses, or to navigate to other parts of the same page. Let's learn what the difference between absolute and relative links is, and what ID links are.</p>

<h3>Absolute Links</h3>
<p><strong>Absolute links</strong> are links that are given an exact destination to a web page. Creating an absolute link can be done with an anchor tag, or <code>a</code> tag. These tags require a destination which is where you want the user to go to upon clicking it.</p>
<p>Giving your anchor tag a destination is done by giving a value to the <code>href</code> attribute. Here is how to create a hyperlink:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Absolute Links&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Search the web!&lt;/h1&gt;
        &lt;p&gt;
            &lt;a href=""https://www.google.com""&gt;Google&lt;/a&gt;
        &lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""This is how a link looks like."" height=""311"" loading=""lazy"" src=""https://sabe.io/classes/html/links/absolute-link.png"" width=""433""/>
<figcaption>This is how a link looks like.</figcaption>
</figure>
<p>In our case, since we provided a <strong>absolute link</strong> to Google's homepage, that is where clicking the link will take us.</p>
<h3>Relative Links</h3>
<p>What if you just want to link to a file in the same page/directory/folder? This is where <strong>relative links</strong> come into play. Relative links are links that are given a destination that is relative to the current page.</p>
<p>For example, if you have two files in the same directory/folder, <code>index.html</code> and <code>food.html</code>, you can link from <code>index.html</code> to <code>food.html</code> by doing something like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;a href=""food.html""&gt;This is a link to food.html!&lt;/a&gt;</code>
</pre>
<aside class=""aside__tip"">
<p>    Keep in mind that the value inside the <code>href</code> attribute does not need to be pointing to an HTML file. It can point to any file.</p>
</aside>
<p>If you want your relative link to be relative <strong>to the root</strong> instead of the current, folder/directory, start the link off with a <code>/</code>.</p>
<p>Also important to know, if you want to make your links <strong>open a new tab</strong>, give it a <code>target</code> attribute with the value of <code>_blank</code>, like so:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;a href=""food.html"" target=""_blank""&gt;This link will open in a new tab.&lt;/a&gt;</code>
</pre>

<h3>ID Links</h3>
<p>Another popular use of the anchor tag is giving the <code>href</code> attribute a value of an id of another element on the page. This will create a link to the anchor element with the same id.</p>
<p>Clicking on this link will make your browser scroll to that element on the page. This is useful for skipping large sections of your page. For example, if you have a large section of text on your page, you can link to that section by giving it an id, then, when you click on the link, your browser will scroll to that section of the page.</p>
<p>Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;ID Link&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;
            &lt;a href=""#cereal""&gt;Click here to scroll to a good cereal.&lt;/a&gt;
        &lt;/p&gt;
        &lt;p id=""cereal""&gt;Corn Flakes&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""If you make your browser window small enough vertically, you will see that it does work."" height=""264"" loading=""lazy"" src=""https://sabe.io/classes/html/links/id-link.png"" width=""433""/>
<figcaption>If you make your browser window small enough vertically, you will see that it does work.</figcaption>
</figure>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a"" rel=""noopener"" target=""_blank"">HTML Anchor Element - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Images","html-images","Learn how to add an image using the img tag in HTML, how to add alt text, width and height to images.","DRAFT","

<p>Images on the web are great. They can help improve the visual appearance of a website. Let's learn about images in HTML, including how to add alt text to an image, how to set a width and height size to images, and how to add a caption to an image using the <code>&lt;figcaption&gt;</code> element.</p>
<h2 id=""images"">Images</h2>
<p>This is how you add images to a page, the <strong>image tag</strong>, <code>img</code>. Here's an example usage of an img tag:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;img src=""cat.png"" alt=""Picture of a cute cat.""&gt;</code>
</pre>
<figure>
<img alt=""Picture of a cute cat. ??????"" height=""534"" loading=""lazy"" src=""https://sabe.io/classes/html/images/cat.png"" width=""800""/>
<figcaption>Picture of a cute cat. ??????</figcaption>
</figure>
<p>The <code>src</code> attribute in <code>img</code> tags works like the <code>href</code> attribute on <code>a</code> tags. They can have an absolute or relative path. In this case, we are linking to the relative file <code>cat.png</code> to display.</p>

<h3>Alt Text</h3>
<p>The <code>alt</code> attribute is for <strong>alternate text</strong>. You can describe what the image is about in text which allows screen readers and search engines to understand what the image is about. It provides helpful information for those who cannot or choose not to see the image.</p>
<p>In our example, we are using the <code>alt</code> attribute to describe the image.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;img src=""cat.png"" alt=""Picture of a cute cat.""&gt;</code>
</pre>
<p>The <code>alt</code> attribute here is used to describe the image and says <code>Picture of a cute cat.</code>.</p>
<h2 id=""image-size-width-and-height"">Image Size: Width and Height</h2>
<p>Another set of attributes that might be helpful is the <code>width</code> and <code>height</code> attributes. They take the size of the image as their values and it lets the browser allocate that much space on the page before the image actually loads. This helps prevent the page jumping around after the image loads.</p>
<pre class=""pre__block"">	<code class=""language-markup""> &lt;img width=""1000"" height=""667"" src=""cat.png"" alt=""Picture of a cute cat."" /&gt;</code>
</pre>
<p>Our image is 1000 pixels wide and 667 pixels tall and the browser will allocate space for it.</p>

<h3>Figures and Captions</h3>
<p>There are times where you want to give your image a <strong>caption</strong>. You can accomplish this by nesting your image, along with a figure caption tag, <code>figcaption</code> inside a <code>figure</code> tag, like so:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;figure&gt;
    &lt;img src=""cat.png""&gt;
    &lt;figcaption&gt;Picture of a cute cat.&lt;/figcaption&gt;
&lt;/figure&gt;</code>
</pre>
<p>This is a more semantic way of adding a caption to an image because it ties the caption to the image inside the figure tag.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML"" rel=""noopener"" target=""_blank"">HTML Image Tag - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Scalable Vector Graphics","html-scalable-vector-graphics","Learn how to work with Scalable Vector Graphics in HTML, also known as SVGs by creating common shapes.","DRAFT","

<h2 id=""svg-graphics"">SVG Graphics</h2>
<p>SVG stands for <strong>Scalable Vector Graphics</strong>, and it is a standard used to describe a graphic in a XML-based format. Let's learn how to create SVGs by creating circles, rectangles, rounded rectangles, stars, and learn the difference between SVGs and images in HTML.</p>

<h2 id=""creating-an-svg"">Creating an SVG</h2>
<p>Creating an SVG requires the use of the <code>svg</code> tag. The <code>width</code> and <code>height</code> attributes are required because they define the size of the SVG. Here's an example of a SVG with a width of 100 and a height of 100:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;svg width=""100"" height=""100""&gt;
&lt;/svg&gt;</code>
</pre>
<p>It won't render anything because the SVG is empty. Let's add some content to it now.</p>
<h2 id=""creating-a-svg-circle"">Creating a SVG Circle</h2>
<p>You can create an SVG circle. We can do this by using the <code>circle</code> tag.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><svg height=""200"" width=""200"">
    <circle cx=""100"" cy=""100"" fill=""blue"" r=""75"" stroke=""red"" stroke-width=""5""></circle>
</svg></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""An SVG circle."" height=""311"" loading=""lazy"" src=""https://sabe.io/classes/html/svg/svg-circle.png"" width=""443""/>
<figcaption>An SVG circle.</figcaption>
</figure>
<p>After creating a new SVG, we used the <code>circle</code> tag to define a new circle with the following attributes:</p>
<ul>
<li><code>cx</code>: The X position of the circle's center.</li>
<li><code>cy</code>: The Y position of the circle's center.</li>
<li><code>r</code>: The length of the circle's radius.</li>
<li><code>stroke</code>: The color of the stroke on the circle.</li>
<li><code>stroke-width</code>: The thickness of the stroke on the circle.</li>
<li><code>fill</code>: The color of the circle.</li>
</ul>

<h2 id=""creating-a-svg-rectangle"">Creating a SVG Rectangle</h2>
<p>You can create an SVG rectangle. We can do this by using the <code>rect</code> tag.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><svg height=""200"" width=""400"">
    <rect height=""100"" style=""fill:rgb(100, 0, 100); stroke-width: 5; stroke: black;"" width=""300"" x=""25"" y=""25""></rect>
</svg></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""An SVG rectangle."" height=""311"" loading=""lazy"" src=""https://sabe.io/classes/html/svg/svg-rectangle.png"" width=""463""/>
<figcaption>An SVG rectangle.</figcaption>
</figure>
<h2 id=""creating-an-svg-rounded-rectangle"">Creating an SVG Rounded Rectangle</h2>
<p>You can create an SVG rounded rectangle. We can do this by using the <code>rect</code> tag but with the <code>rx</code> and <code>ry</code> attributes.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><svg height=""200"" width=""400"">
    <rect height=""100"" rx=""10"" ry=""10"" style=""fill:rgb(100, 0, 100); stroke-width: 5; stroke: black;"" width=""300"" x=""25"" y=""25""></rect>
</svg></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<h2 id=""creating-an-svg-star"">Creating an SVG Star</h2>
<p>You can create an SVG star. We can do this by using the <code>polygon</code> tag.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><svg height=""200"" width=""400"">
    <polygon points=""100,10 40,198 190,78 10,78 160,198"" style=""fill:blue;stroke:red;stroke-width:5;fill-rule:evenodd;""></polygon>
</svg></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<h2 id=""difference-between-svg-and-images"">Difference Between SVG and Images</h2>
<p>The difference between an SVG and image in HTML is that an SVG file is simply <strong>describing</strong> a graphic whereas an image is the graphic itself. With an SVG, it is the browser's job to actually parse those XML-like instructions and render something on the page.</p>
<p>There some advantages to using an SVG graphic over a traditional image. Because they are meant to be scalable, they will look crisp at any resolution. They are written in plain text so they are easily editable using any text editor. Finally, because it doesn't take too much text to describe a simple graphic, they are very tiny compared to a similar graphic in a traditional image format.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/SVG"" rel=""noopener"" target=""_blank"">SVGs - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Tables","html-tables","Learn how to create and manipulate tables, including table headers and rows, to properly display tabular data.","DRAFT","

<p>Tables in HTML let you organize and arrange data into a set number of rows and columns of cells. They are very useful whenever you want to display tabular data.</p>
<figure>
<img alt=""Not those kind."" height=""240"" loading=""lazy"" src=""https://sabe.io/classes/html/tables/tables.png"" width=""660""/>
<figcaption>Not those kind.</figcaption>
</figure>
<p>Let's learn how to create a table in HTML, how to add rows and columns, captions, table headers and footers.</p>
<h2 id=""create-an-html-table"">Create an HTML table</h2>
<p>To create your very first <strong>table</strong>, use the <code>table</code> tag. Tables use multiple tags to render properly, and they are as follows:</p>
<ul>
<li><strong>table</strong>: Surrounds and defines the table's start and end.</li>
<li><strong>tr</strong>: Stands for a table row. It surrounds a row.</li>
<li><strong>th</strong>: Stands for a table header.</li>
<li><strong>td</strong>: Stands for a cell of table data.</li>
</ul>
<p>To get a better idea of how tables work, here is the structure of a simple 3 by 3 table:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Table&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;I am a 3x3 table.&lt;/h1&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;th&gt;Column Heading 1&lt;/th&gt;
                &lt;th&gt;Column Heading 2&lt;/th&gt;
                &lt;th&gt;Column Heading 3&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;(1, 1)&lt;/td&gt;
                &lt;td&gt;(1, 2)&lt;/td&gt;
                &lt;td&gt;(1, 3)&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;(2, 1)&lt;/td&gt;
                &lt;td&gt;(2, 2)&lt;/td&gt;
                &lt;td&gt;(2, 3)&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;(3, 1)&lt;/td&gt;
                &lt;td&gt;(3, 2)&lt;/td&gt;
                &lt;td&gt;(3, 3)&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""A basic table in HTML."" height=""330"" loading=""lazy"" src=""https://sabe.io/classes/html/tables/table.png"" width=""440""/>
<figcaption>A basic table in HTML.</figcaption>
</figure>

<h2 id=""row-and-column-span"">Row and Column span</h2>
<p>There are two <strong>optional</strong> attributes you can give to your <code>td</code> tags, and they are <code>colspan</code> and <code>rowspan</code>. The <code>colspan</code> attribute defines how many columns a cell spans. The <code>rowspan</code> attribute defines how many rows a cell spans. The <code>colspan</code> and <code>rowspan</code> attributes are useful when you want to create a table that has multiple cells that are the same.</p>
<p>You can make cells span either <strong>multiple rows</strong> or <strong>multiple columns</strong>. This is perhaps better illustrated with an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;Column Heading 1&lt;/th&gt;
        &lt;th&gt;Column Heading 2&lt;/th&gt;
        &lt;th&gt;Column Heading 3&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;(1, 1)&lt;/td&gt;
        &lt;td colspan=""2""&gt;(1, 2) AND (1, 3)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=""2""&gt;(2, 1) AND (3, 1)&lt;/td&gt;
        &lt;td&gt;(2, 2)&lt;/td&gt;
        &lt;td&gt;(2, 3)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;(3, 2)&lt;/td&gt;
        &lt;td&gt;(3, 3)&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code>
</pre>
<figure>
<img alt=""Cells spanning multiple columns and rows."" height=""312"" loading=""lazy"" src=""https://sabe.io/classes/html/tables/table-span.png"" width=""466""/>
<figcaption>Cells spanning multiple columns and rows.</figcaption>
</figure>
<h2 id=""captions"">Captions</h2>
<p>Tables can have <strong>captions</strong>, which you can define by using the <code>caption</code> tag right after the <code>table</code> tag. The caption can be used to describe the table. Captions are not required, but they are recommended.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;table&gt;
    &lt;caption&gt;This is a table caption.&lt;/caption&gt;
    &lt;tr&gt;
        &lt;th&gt;Column Heading 1&lt;/th&gt;
        &lt;th&gt;Column Heading 2&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;(1, 1)&lt;/td&gt;
        &lt;td&gt;(1, 2)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;(2, 1)&lt;/td&gt;
        &lt;td&gt;(2, 2)&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code>
</pre>

<h2 id=""table-headers-and-footers"">Table Headers and Footers</h2>
<p>If your table is particularly large, or you just want a row to be rendered at the top or bottom of the table, you can utilize the <code>thead</code> (for table header) and <code>tfoot</code> (for table footer) tag. However, once you use these tags, you should then also use the <code>tbody</code> tag to define the body of the table. The <code>thead</code> and <code>tfoot</code> tags are not required, but they are recommended.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;table&gt;
    &lt;caption&gt;This is a table caption.&lt;/caption&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Column Heading 1&lt;/th&gt;
            &lt;th&gt;Column Heading 2&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;(1, 1)&lt;/td&gt;
            &lt;td&gt;(1, 2)&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;tfoot&gt;
        &lt;tr&gt;
            &lt;td&gt;(2, 1)&lt;/td&gt;
            &lt;td&gt;(2, 2)&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tfoot&gt;
&lt;/table&gt;</code>
</pre>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Basics"" rel=""noopener"" target=""_blank"">HTML Tables - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Forms and Inputs","html-forms-and-inputs","Learn how to collect data from your users by creating a form and using many different kinds of inputs.","DRAFT","

<p>Let's learn how to create a form with the <code>form</code> tag, how to collect user input using the <code>input</code> tag, the different types of <code>input</code> tags, and how to submit the form.</p>
<h2 id=""forms"">Forms</h2>
<p>When you want to collect data from your users, <strong>forms</strong> in HTML are a great way to accomplish that. The surrounding tag for forms is the <code>form</code> tag. In addition, it will require two attributes, the <code>action</code> attribute and the <code>method</code> attribute.</p>

<h3>Action</h3>
<p>The <code>action</code> attribute is simply the location that the information from the form is being sent to. The value of this attribute will therefore be a <strong>URL</strong> of some kind. The <code>action</code> attribute is optional, but if you want to make sure that the information is being sent to a specific location, you should set it.</p>
<h3>Method</h3>
<p>The <code>method</code> attribute defines <strong>how</strong> the form is going to send the information. The two most used values for this attribute is <code>get</code> and <code>post</code>.</p>
<p>If you try doing a Google search, and look at the URL at the top afterwards, you will see the text you typed before hitting search. This is an example of <strong>get</strong>. Using <code>get</code> will make the data inputted in a form get appended to the end of the URL.</p>
<p>On the other hand, using <code>post</code> will still send the data like <code>get</code>, but the only main difference is that you will <strong>not see it</strong> in the URL. Using <code>post</code> is recommended for submissions that require <strong>heightened security</strong> like passwords and personal information.</p>
<p>Put it all together, and you get this form:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Forms&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;form action=""destination"" method=""get""&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>While that is a completely valid form, without any way for the user to input or submit data, it is essentially useless on its own. We'll explore the many ways in which you can collect data from the user.</p>

<h2 id=""textarea"">Textarea</h2>
<p><strong>Textareas</strong> are multiple-line text boxes where you can input text. They support multiple lines of text with optional attributes to control the size of them, the <code>rows</code> and <code>cols</code> attributes. The <code>rows</code> attribute defines the number of rows that the textarea will have, and the <code>cols</code> attribute defines the number of columns that the textarea will have.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;textarea rows=""8"" cols=""64""&gt;This is the initial value.&lt;/textarea&gt;</code>
</pre>
<figure>
<img alt=""Textareas are boxes of text."" height=""304"" loading=""lazy"" src=""https://sabe.io/classes/html/forms-inputs/textarea.png"" width=""438""/>
<figcaption>Textareas are boxes of text.</figcaption>
</figure>
<h2 id=""select"">Select</h2>
<p><strong>Select</strong> boxes is a dropdown menu where you can select one of the options. They are used to select a single option from a list of options.</p>
<p>The <code>select</code> tag is the outermost tag, and inside you can define the options to choose from, using the <code>option</code> tag.</p>
<p>Let's look at an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;p&gt;Favorite color?&lt;/p&gt;
&lt;select&gt;
    &lt;option&gt;Red&lt;/option&gt;
    &lt;option&gt;Blue&lt;/option&gt;
    &lt;option&gt;Green&lt;/option&gt;
&lt;/select&gt;</code>
</pre>
<figure>
<img alt=""Select with 3 options."" height=""304"" loading=""lazy"" src=""https://sabe.io/classes/html/forms-inputs/select.png"" width=""438""/>
<figcaption>Select with 3 options.</figcaption>
</figure>
<p>If you would like an option to be selected by default, you can add a <strong>value-less</strong> <code>selected</code> attribute.</p>
<p>For example, if you wanted <code>Blue</code> to be pre-selected, you would do this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;p&gt;Favorite color?&lt;/p&gt;
&lt;select&gt;
    &lt;option&gt;Red&lt;/option&gt;
    &lt;option selected&gt;Blue&lt;/option&gt;
    &lt;option&gt;Green&lt;/option&gt;
&lt;/select&gt;</code>
</pre>

<h3>Option Groups</h3>
<p>If your options feel better if they were <strong>grouped together</strong>, you can use the <code>optgroup</code> tag, with its accompanying <code>label</code> attribute. Here's a simple example of it:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;p&gt;Favorite color?&lt;/p&gt;
&lt;select&gt;
    &lt;optgroup label=""Dark Colors""&gt;
        &lt;option&gt;Brown&lt;/option&gt;
        &lt;option&gt;Black&lt;/option&gt;
        &lt;option&gt;Purple&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;optgroup label=""Light Colors""&gt;
        &lt;option&gt;Yellow&lt;/option&gt;
        &lt;option&gt;White&lt;/option&gt;
        &lt;option&gt;Pink&lt;/option&gt;
    &lt;/optgroup&gt;
&lt;/select&gt;</code>
</pre>
<figure>
<img alt=""Option groups can be useful."" height=""304"" loading=""lazy"" src=""https://sabe.io/classes/html/forms-inputs/option-groups.png"" width=""438""/>
<figcaption>Option groups can be useful.</figcaption>
</figure>
<h2 id=""input-element"">Input Element</h2>
<p>The <code>input</code> element is the most commonly used element inside HTML forms. The <code>input</code> tag can turn into <strong>many</strong> different things due to its versatile <code>type</code> attribute. Since this tag doesn't surround any content, it does not require a closing tag.</p>
<p>Let's go through all of the main types.</p>

<h3>Text</h3>
<p>When <code>type</code> is set to <code>text</code>, it will be a single-line textfield. It will accept any text input.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""text""&gt;</code>
</pre>
<p>The <code>value</code> attribute is used to set the default value of the textfield. For example, if you wanted to set the default value to <code>""Hello World!""</code>, you would do this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""text"" value=""Hello World!""&gt;</code>
</pre>
<h3>Password</h3>
<p>When <code>type</code> is set to <code>password</code>, it functions the same as if type is set to <code>text</code>, except that any text inputted will be <strong>visually overridden</strong> by dots or stars as you would expect when entering a password. It is recommended that you use this type of input when you want to collect sensitive information.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""password""&gt;</code>
</pre>

<h3>Checkbox</h3>
<p>When <code>type</code> is set to <code>checkbox</code>, it becomes a <strong>checkbox</strong> that has two states. A checkbox can either be checked and not checked.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""checkbox""&gt;</code>
</pre>
<p>You have the option to give this a <strong>value-less</strong> <code>checked</code> attribute, which will set the initial state of the checkbox to be checked.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""checkbox"" checked&gt;</code>
</pre>
<h3>Radio</h3>
<p>When <code>type</code> is set to <code>radio</code>, it turns it into a <strong>radio</strong> button, which is similar to a checkbox except that only one option can be selected in a group of them.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""radio""&gt;</code>
</pre>

<h3>Number</h3>
<p>When <code>type</code> is set to <code>number</code>, it turns into a single-line input field where you can select a <strong>number</strong>. You have optional <code>min</code> and <code>max</code> attributes to constrain the value to a certain range. For example, if you wanted to constrain the number to be between 1 and 10, you would do this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""number"" min=""1"" max=""10""&gt;</code>
</pre>
<h3>Submit</h3>
<p>When <code>type</code> is set to <code>submit</code>, it becomes a button that, when clicked, <strong>submits</strong> the form to the destination defined in the <code>action</code> attribute.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""submit""&gt;</code>
</pre>
<p>The optional <code>value</code> attribute defines the text displayed on the button. For example, if you wanted to submit the form with the text <code>""Submit""</code>, you would do this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""submit"" value=""Submit""&gt;</code>
</pre>
<figure>
<img alt=""There are many more input types."" height=""378"" loading=""lazy"" src=""https://sabe.io/classes/html/forms-inputs/inputs.png"" width=""461""/>
<figcaption>There are many more input types.</figcaption>
</figure>

<h2 id=""button"">Button</h2>
<p>The last input type in the list above was <code>submit</code>, which is the button the user presses to submit the form. However, there is another way to make a generic button that can do whatever you want (sometimes requiring a little JavaScript).</p>
<p>For example, with the <code>button</code> tag, you can easily make a button the <strong>resets the form</strong> to its initial values by giving it a <code>type</code> attribute with the value of <code>reset</code>.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;form action=""/destination"" method=""get""&gt;
     &lt;button type=""reset""&gt;Reset Form&lt;/button&gt;
&lt;/form&gt;</code>
</pre>
<p>In general though, you can just make a generic button like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;button type=""button""&gt;I currently do nothing!&lt;/button&gt;</code>
</pre>
<figure>
<img alt=""An HTML button that does nothing."" height=""224"" loading=""lazy"" src=""https://sabe.io/classes/html/forms-inputs/button.png"" width=""436""/>
<figcaption>An HTML button that does nothing.</figcaption>
</figure>
<p>If you gave the button an <code>onClick</code> attribute, it will run JavaScript once pressed.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;button type=""button"" onclick=""doSomething();""&gt;I currently do something!&lt;/button&gt;</code>
</pre>
<p>In this case, it will run a function called <code>doSomething()``</code></p>
<h2 id=""required"">Required</h2>
<p><strong>Required</strong> is an attribute you can add to any of the aforementioned tags that will make giving it a value <em>required</em> for form submission.</p>
<p>For example, if you tried to submit the following form:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Forms&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;form action=""/destination"" method=""get""&gt;
            &lt;input type=""text"" required&gt;
            &lt;input type=""submit"" value=""Submit this Form""&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>Without giving it a value, the browser will <strong>automatically</strong> prevent all submission attempts until the user inputs something in the tags given the <code>required</code> attribute.</p>
<p>This is useful for things like account registration where you <strong>need</strong> a username/email and password to proceed.</p>
<figure>
<img alt=""You need to enter a value for required inputs."" height=""233"" loading=""lazy"" src=""https://sabe.io/classes/html/forms-inputs/required.png"" width=""465""/>
<figcaption>You need to enter a value for required inputs.</figcaption>
</figure>

<h2 id=""labels"">Labels</h2>
<p>When it comes time to submit the data, you will want to use the the <code>name</code> attribute. The <code>name</code> attribute is used to identify the data in the form.</p>
<p>Add one like so:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""text"" name=""username""&gt;</code>
</pre>
<p>Or this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""password"" name=""password""&gt;</code>
</pre>
<p>After you have given the tags <code>name</code> attributes, it is also good practice to give them visible labels, using the <code>label</code> tag.</p>
<p>Using our above examples, using <code>label</code> can look like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;label for=""username""&gt;Please enter your username:&lt;/label&gt;
&lt;input type=""text"" name=""username""&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;label for=""password""&gt;Please enter your password:&lt;/label&gt;
&lt;input type=""password"" name=""password""&gt;</code>
</pre>
<figure>
<img alt=""They help the user tremendously."" height=""270"" loading=""lazy"" src=""https://sabe.io/classes/html/forms-inputs/labels.png"" width=""460""/>
<figcaption>They help the user tremendously.</figcaption>
</figure>
<h2 id=""field-sets-and-legends"">Field sets and legends</h2>
<p>With <strong>field sets</strong> and <strong>legends</strong> elements, you can give labels to groups of tags, using the <code>fieldset</code> tag to group them, and the <code>legend</code> tag to label it.</p>
<p>For example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;fieldset&gt;
    &lt;legend&gt;Name&lt;/legend&gt;
    &lt;label for=""first""&gt;First Name:&lt;/label&gt;
    &lt;input type=""text"" name=""first""&gt;
    &lt;label for=""last""&gt;Last Name:&lt;/label&gt;
    &lt;input type=""text"" name=""last""&gt;
&lt;/fieldset&gt;</code>
</pre>
<figure>
<img alt=""Example of field sets and legends."" height=""264"" loading=""lazy"" src=""https://sabe.io/classes/html/forms-inputs/field-sets.png"" width=""438""/>
<figcaption>Example of field sets and legends.</figcaption>
</figure>

<h2 id=""submitting"">Submitting</h2>
<p>Submitting the data you have collected can be processed by the server. The <code>action</code> attribute defines where the data will be sent, and so a server will receive it and process it.</p>
<aside class=""aside__tip"">
<p>    If you want to see an example of how a server can access HTML form data, see our example in Forms in PHP.</p>
</aside>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form"" rel=""noopener"" target=""_blank"">HTML Forms - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Div and Span","html-div-and-span","Tags are suppose to give meaning to content, but that's not always the case, like with div and span tags!","DRAFT","

<p>HTML tags are supposed to give meaning to the content inside, but not in the case with <code>div</code> and <code>span</code> tags. They exist mostly to be able to apply CSS styles or target with JavaScript by applying a <code>class</code> or <code>id</code> attribute to them. Here we will learn the difference between <code>div</code> and <code>span</code> tags, and how to use them in your HTML pages.</p>
<h2 id=""div-vs-span"">Div vs Span</h2>
<p>So what is the difference between <code>div</code> and <code>span</code> tags? The difference between <code>div</code> and <code>span</code> tags is that <code>div</code> tags can contain other HTML tags, while <code>span</code> tags cannot. <code>div</code> tags are used to create sections of content, while <code>span</code> tags are used to create inline text.</p>

<h2 id=""division-tag"">Division Tag</h2>
<p>The <code>div</code> tag represents a <strong>generic</strong> container. The reason why it is a container is because it defaults to a block. As a <strong>block-level element</strong>, it starts on its own new line, similar to how <code>p</code> tags work. The <code>div</code> tag is also used to create sections of content.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Div&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;Division 1&lt;/div&gt;
        &lt;div&gt;Division 2&lt;/div&gt;
        &lt;div&gt;Division 3&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Dividers are block elements."" height=""229"" loading=""lazy"" src=""https://sabe.io/classes/html/div-span/div.png"" width=""436""/>
<figcaption>Dividers are block elements.</figcaption>
</figure>
<h2 id=""span-tag"">Span Tag</h2>
<p>The <code>span</code> tag accomplishes the same thing as a <code>div</code> tag except that it is an <strong>inline element</strong>, which essentially means that it wraps content but remains inside the same line, and does not start on its own line.</p>
<p>This means you can do something like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Span&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;The &lt;span class=""space""&gt;Solar System&lt;/span&gt; is a cool place.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Span are inline elements."" height=""229"" loading=""lazy"" src=""https://sabe.io/classes/html/div-span/span.png"" width=""436""/>
<figcaption>Span are inline elements.</figcaption>
</figure>
<p>You can now apply styles to your <code>space</code> class and it will only affect the text ""Solar System"".</p>

<h2 id=""conclusion"">Conclusion</h2>
<p>In general, these tags should be used as rarely as possible, as they do not describe the content inside them at all. Whenever possible, and when it makes sense, use alternative tags to give meaning to the content between the tags.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"" rel=""noopener"" target=""_blank"">Division Element - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span"" rel=""noopener"" target=""_blank"">Span Element - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Article, Section, and Aside","html-article-section-and-aside","HTML 5 introduced to us many new semantic tags, and we'll go over the main ones and where to use them.","DRAFT","

<p>HTML offers some semantic tags that help add meaning to our content. Whenever possible use these tags to help search engines and browsers understand the structure of your page. Let's look at some of these semantic tags like <code>article</code>, <code>section</code>, <code>aside</code>, <code>header</code>, <code>nav</code> and <code>footer</code>.</p>
<h2 id=""articles-and-sections"">Articles and Sections</h2>
<figure>
<img alt=""They still make these, right?"" height=""385"" loading=""lazy"" src=""https://sabe.io/classes/html/article-section-aside/newspaper.png"" width=""727""/>
<figcaption>They still make these, right?</figcaption>
</figure>
<p>You can think of an <strong>article</strong> as standalone content. Like in articles you might see in a newspaper, articles will ideally contain sections like introductions, the main content, and then perhaps a footer with some closing notes. You can also think of an <strong>article</strong> as a collection of sections. For example, you might have an article that contains a section for the introduction, a section for the main content, and a section for the closing notes.</p>
<p>Let's see an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Article&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;article&gt;
            &lt;section class=""header""&gt;
                &lt;h1&gt;Article heading&lt;/h1&gt;
                &lt;p&gt;Hello there!&lt;/p&gt;
            &lt;/section&gt;
            &lt;section class=""main""&gt;
                &lt;p&gt;This is the main content&lt;/p&gt;
            &lt;/section&gt;
            &lt;section class=""footer""&gt;
                &lt;p&gt;Good-bye!&lt;/p&gt;
            &lt;/section&gt;
        &lt;/article&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>As you can probably tell, <code>section</code> tags are used to split up the article into smaller, more cohesive parts. <code>section</code> tags act like <code>div</code> tags in that they're both blocks, but <code>section</code> tells the browser that whatever is inside is just a piece of the larger puzzle.</p>
<p>We used <code>section</code> tags for headers and footers, but there are actually tags made specifically for this.</p>

<h2 id=""header-and-footer-tags"">Header and Footer tags</h2>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Article&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;article&gt;
            &lt;header&gt;
                &lt;h1&gt;Article heading&lt;/h1&gt;
                &lt;p&gt;Hello there!&lt;/p&gt;
            &lt;/header&gt;
            &lt;section class=""main""&gt;
                &lt;p&gt;This is the main content&lt;/p&gt;
            &lt;/section&gt;
            &lt;footer&gt;
                &lt;p&gt;Good-bye!&lt;/p&gt;
            &lt;/footer&gt;
        &lt;/article&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>The <code>header</code> tag defines the <strong>header</strong> of an article or section, while the <code>footer</code> tag defines the <strong>footer</strong>.</p>
<h2 id=""asides"">Asides</h2>
<p>If you find yourself wanting to go into a bit of detail about the topic at hand, like for example a <strong>quick little snippet</strong>, use the <code>aside</code> tag. It's a little bit like a <code>section</code> tag, but it's not a block.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;article&gt;
    &lt;header&gt;
        &lt;h1&gt;Article heading&lt;/h1&gt;
        &lt;p&gt;Hello there!&lt;/p&gt;
    &lt;/header&gt;
    &lt;section class=""main""&gt;
        &lt;p&gt;This is the main content&lt;/p&gt;
        &lt;aside&gt;
            &lt;h2&gt;This is a small snippet!&lt;/h2&gt;
            &lt;p&gt;Snippet text goes here.&lt;/p&gt;
        &lt;/aside&gt;
    &lt;/section&gt;
    &lt;footer&gt;
        &lt;p&gt;Good-bye!&lt;/p&gt;
    &lt;/footer&gt;
&lt;/article&gt;</code>
</pre>
<figure>
<img alt=""The magic isn't something you can see visually!"" height=""395"" loading=""lazy"" src=""https://sabe.io/classes/html/article-section-aside/aside.png"" width=""431""/>
<figcaption>The magic isn't something you can see visually!</figcaption>
</figure>
<aside class=""aside__tip"">
<p>    This text is an example of an aside that happens to be styled!</p>
</aside>

<h2 id=""navigation"">Navigation</h2>
<p>To more semantically define where your user can find <strong>navigation</strong> on your site, take advantage of the <code>nav</code> tag. Surround the links used for navigation with this tag and you're good to go.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Navigation&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;nav&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=""/page1""&gt;Page 1&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""/page2""&gt;Page 2&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""/page3""&gt;Page 3&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/nav&gt;
        &lt;article&gt;(Article content here)&lt;/article&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>Semantic tags can be a powerful way to help your users find what they're looking for.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Glossary/Semantics"" rel=""noopener"" target=""_blank"">Semantic HTML Elements</a></li>
</ul>



",0,"standard","lesson"
"HTML-Audio","html-audio","Learn how to add audio to your HTML pages including how to set the MIME type, add fallback text, and controls.","DRAFT","

<p>The web supports adding audio files to your page. To embed an <strong>audio</strong> file on your page, use the <code>audio</code> tag. This tag has many different attributes to know. Let's go over each one in detail.</p>
<h2 id=""src"">Src</h2>
<p>The most important attribute is the source of your audio file, the <code>src</code> attribute. This tells the browser where to get the audio file from. The <code>src</code> attribute can be a local file, a remote file, or a data URI.</p>
<p>You can display a message to the user in case the audio file failed to embed inside the opening and closing tags.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;audio src=""music.mp3"" /&gt;</code>
</pre>

<h2 id=""fallback"">fallback</h2>
<p>When the browser does not support the video tag, it will display the content inside of the <code>video</code> tag. This is called a <strong>fallback</strong>. Simply add text in between the <code>video</code> tags.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;audio src=""music.mp3""&gt;
    This browser does not support this tag.
&lt;/audio&gt;</code>
</pre>
<h2 id=""controls"">Controls</h2>
<p>The <code>controls</code> attribute is boolean that controls whether or not to display basic controls like play, pause and volume. It is a boolean value, so you can use either <code>true</code> or <code>false</code>.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;audio src=""music.mp3""&gt;
    This browser does not support this tag.
&lt;/audio&gt;</code>
</pre>
<p>Keep in mind that if the audio file is missing, the audio file will not be displayed.</p>

<h2 id=""autoplay"">Autoplay</h2>
<p>The <code>autoplay</code> attribute will make the audio to play automatically. It is a boolean value, so you can use either <code>true</code> or <code>false</code>.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;audio src=""music.mp3"" autoplay=""true""&gt;
    This browser does not support this tag.
&lt;/audio&gt;</code>
</pre>
<aside class=""aside__tip"">
<p>    Because this doesn't require any user input, only use <code>autoplay</code> in situations where it makes sense. Very few people like automatically playing audio!</p>
</aside>
<h2 id=""muted"">Muted</h2>
<p>The <code>muted</code> attribute will make the audio to play in the muted state initially. It is a boolean value, so you can use either <code>true</code> or <code>false</code>. It defaults to <code>false</code> meaning it will play in the unmuted state unless you set this value to be <code>true</code>. This is useful for when you want to play the audio without the user having to click the mute button.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;audio src=""music.mp3"" muted=""true""&gt;
    This browser does not support this tag.
&lt;/audio&gt;</code>
</pre>

<h2 id=""loop"">Loop</h2>
<p>If you would like the audio file to loop endlessly, add the <code>loop</code> attribute. It is a boolean value, so you can use either <code>true</code> or <code>false</code>. It defaults to <code>false</code> meaning it will not loop.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;audio src=""music.mp3"" controls loop=""true""&gt;
    This browser does not support this tag.
&lt;/audio&gt;</code>
</pre>
<h2 id=""type"">type</h2>
<p>The <code>type</code> attribute is a string that tells the browser what type of audio file it is, or the MIME type. It is a string value, so for example, you can use <code>audio/mpeg</code> or <code>audio/ogg</code>. It defaults to <code>audio/mpeg</code>.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;audio src=""music.mp3"" type=""audio/mpeg""&gt;
    This browser does not support this tag.
&lt;/audio&gt;</code>
</pre>

<h2 id=""single-audio-source"">Single Audio Source</h2>
<p>If you only have a single source for your audio, you have two options. You can use the <code>src</code> attribute or you can use the <code>source</code> tag.</p>
<p>Here's how to use the <code>src</code> tag.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;audio src=""music.mp3"" controls loop=""true""&gt;
    This browser does not support this tag.
&lt;/audio&gt;</code>
</pre>
<p>Here's how to use the <code>source</code> tag.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;audio&gt;
    &lt;source src=""music.mp3"" type=""audio/mpeg""&gt;
        This browser does not support this tag.
    &lt;/source&gt;
&lt;/audio&gt;</code>
</pre>
<h2 id=""multiple-audio-sources"">Multiple Audio Sources</h2>
<p>If you would like to provide multiple file formats for the browser to select the <strong>best one</strong>, you can use the <code>source</code> tag with a <code>src</code> and <code>type</code> attribute, like so:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;audio controls autoplay loop&gt;
    &lt;source src=""music.mp3"" type=""audio/mpeg""&gt;
    &lt;source src=""music.ogg"" type=""audio/ogg""&gt;
    &lt;source src=""music.wav"" type=""audio/wav""&gt;
    &lt;p&gt;This browser does not support this tag.&lt;/p&gt;
&lt;/audio&gt;</code>
</pre>
<p>This is useful for when you have multiple audio files and you want to make sure the browser selects the best one for the user. Not all formats are supported by all browsers so you should always check the browser's support before using this feature or you may end up with a browser that doesn't support the audio file you want to display.</p>
<figure>
<img alt=""Default HTML audio player."" height=""240"" loading=""lazy"" src=""https://sabe.io/classes/html/audio/audio.png"" width=""410""/>
<figcaption>Default HTML audio player.</figcaption>
</figure>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio"" rel=""noopener"" target=""_blank"">HTML Audio - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Video","html-video","Learn how to add video to your HTML pages including how to set the MIME type, loop, add controls, and mute.","DRAFT","

<p>You can embed a video in your HTML page by using the <code>video</code> tag. The <code>video</code> tag has many attributes that can be used to customize the experience. Let's go through each one of them.</p>
<figure>
<img alt=""We all love video."" height=""385"" loading=""lazy"" src=""https://sabe.io/classes/html/video/youtube.gif"" width=""480""/>
<figcaption>We all love video.</figcaption>
</figure>
<h2 id=""src"">src</h2>
<p>Embedding <strong>video</strong> is pretty easy. Simply use a <code>video</code> tag and give it a <code>src</code> attribute. The <code>src</code> attribute is where you tell the browser where to find the video. The <code>src</code> attribute can be a URL or a path to a local file. Let's see how to embed a video on our page.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;video src=""video.mp4"" /&gt;</code>
</pre>

<h2 id=""fallback"">fallback</h2>
<p>When the browser does not support the video tag, it will display the content inside of the <code>video</code> tag. This is called a <strong>fallback</strong>. Simply add text in between the <code>video</code> tags. This text will be displayed when the browser does not support the video tag. Let's see how to do that.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;video src=""video.mp4""&gt;
    This browser does not support this tag.
&lt;/video&gt;</code>
</pre>
<h2 id=""controls"">controls</h2>
<p>By default, the browser will not show any controls like volume, play/pause, etc. To show the controls, simply add the <code>controls</code> attribute. This is a boolean so you can use <code>true</code> or <code>false</code>. Let's see how to add the controls to our video.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;video src=""video.mp4"" controls=""true""&gt;
    This browser does not support this tag.
&lt;/video&gt;</code>
</pre>

<h2 id=""poster"">poster</h2>
<p>By default, the first image of a video will be the first frame of the video in the <code>src</code> attribute. To change this, you can use the <code>poster</code> attribute. This is a string that points to an image. Let's see how to change the poster image of a video.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;video src=""video.mp4"" poster=""video-poster.jpg""&gt;
    This browser does not support this tag.
&lt;/video&gt;</code>
</pre>
<h2 id=""type"">type</h2>
<p>You can specify the type of the video by using the <code>type</code> attribute. This tells the browser the video's MIME type. This is a string that can be <code>video/mp4</code>, <code>video/ogg</code>, <code>video/webm</code>, etc. Let's see how to change the type of a video.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;video src=""video.mp4"" type=""video/mp4""&gt;
    This browser does not support this tag.
&lt;/video&gt;</code>
</pre>

<h2 id=""autoplay"">autoplay</h2>
<p>A video will not play automatically when it is loaded. To play the video automatically, you can use the <code>autoplay</code> attribute. This is a boolean so you can use <code>true</code> or <code>false</code>. Let's see how to play the video automatically.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;video src=""video.mp4"" autoplay=""true""&gt;
    This browser does not support this tag.
&lt;/video&gt;</code>
</pre>
<h2 id=""muted"">muted</h2>
<p>You can control whether the video is muted or not by using the <code>muted</code> attribute. This is a boolean so you can use <code>true</code> or <code>false</code>. Sometimes this attribute is needed to autoplay the video in some browsers. Let's see how to mute the video at the start.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;video src=""video.mp4"" muted=""true""&gt;
    This browser does not support this tag.
&lt;/video&gt;</code>
</pre>

<h2 id=""loop"">loop</h2>
<p>You can infinitely loop the video by using the <code>loop</code> attribute. This is a boolean so you can use <code>true</code> or <code>false</code>. If it is not set, the video will play once and then stop. Let's see how to loop the video.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;video src=""video.mp4"" loop=""true""&gt;
    This browser does not support this tag.
&lt;/video&gt;</code>
</pre>
<h2 id=""width-and-height"">width and height</h2>
<p>You can control the width and height of the video by using the <code>width</code> and <code>height</code> attributes. These are both integers. Let's see how to change the width and height of the video.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;video src=""video.mp4"" width=""640"" height=""480""&gt;
    This browser does not support this tag.
&lt;/video&gt;</code>
</pre>

<h2 id=""adding-multiple-sources"">Adding multiple sources</h2>
<p>You can add multiple sources to a video by using <code>source</code> tags. Each tag must have a <code>src</code> attribute and a <code>type</code> attribute. The browser will then choose the best source to play. Let's see how to add multiple sources to our video.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;video width=""640"" height=""480"" poster=""poster.png""&gt;
    &lt;source src=""video.mp4"" type=""video/mp4""&gt;
    &lt;source src=""video.ogg"" type=""video/ogg""&gt;
    &lt;source src=""video.webm"" type=""video/webm""&gt;
&lt;/video&gt;</code>
</pre>
<figure>
<img alt=""Default HTML video player."" height=""615"" loading=""lazy"" src=""https://sabe.io/classes/html/video/video.png"" width=""700""/>
<figcaption>Default HTML video player.</figcaption>
</figure>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video"" rel=""noopener"" target=""_blank"">Video Element - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Canvas","html-canvas","Learn how to add canvas to your HTML pages including how to draw lines, rectangles, circles using JavaScript.","DRAFT","

<p>The HTML <code>canvas</code> element is used to draw graphics using JavaScript. It gives you the ability to draw things like lines, arcs, rectangles, and images. A canvas, created using the <code>canvas</code> tag, only represents the container for where the graphics will be drawn. Let's take a look at how to define a canvas in HTML, and look at examples of how to draw on it.</p>
<h2 id=""defining-a-canvas"">Defining a Canvas</h2>
<p>To create a canvas, we need to create a <code>canvas</code> element. We can do this by using the <code>canvas</code> tag.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;canvas&gt;&lt;/canvas&gt;</code>
</pre>
<figure>
<img alt=""Default HTML canvas."" height=""353"" loading=""lazy"" src=""https://sabe.io/classes/html/canvas/canvas.png"" width=""496""/>
<figcaption>Default HTML canvas.</figcaption>
</figure>
<p>Nothing appears because a canvas is an invisible element.</p>

<h2 id=""width-and-height"">Width and Height</h2>
<p>We can set the width and height of the canvas using the <code>width</code> and <code>height</code> attributes. Let's take a look at how to set the width and height of the canvas.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;canvas width=""400"" height=""200""&gt;
&lt;/canvas&gt;</code>
</pre>
<h2 id=""change-background-color"">Change background color</h2>
<p>You can change the background color of a canvas using CSS:</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><canvas height=""200"" width=""400""></canvas></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">canvas {
    background-color: lightgreen;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<h2 id=""get-the-context-of-the-canvas"">Get the context of the canvas</h2>
<p>To draw on a canvas, we need to get the context of the canvas. We can do this by using the <code>getContext</code> method.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const canvas = document.getElementById(""canvas"");
const context = canvas.getContext(""2d"");</code>
</pre>
<p>Here are the value values when you use <code>getContext</code>:</p>
<ul>
<li><code>2d</code>: This stands for <code>CanvasRenderingContext2D</code></li>
<li><code>webgl</code>: This stands for <code>WebGLRenderingContext</code></li>
<li><code>webgl2</code>: This stands for <code>WebGL2RenderingContext</code></li>
<li><code>bitmaprenderer</code>: This stands for <code>ImageBitmapRenderingContext</code></li>
</ul>
<h2 id=""drawing-a-line"">Drawing a line</h2>
<p>You can draw a line by using the <code>lineTo</code> method. Let's take a look at how to draw a line on a canvas. We'll create a line from the top left corner of the canvas to the bottom right corner.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><canvas id=""canvas"" style=""border: 1px solid #000000;""></canvas></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">const canvas = document.getElementById(""canvas"");
const ctx = canvas.getContext(""2d"");
ctx.beginPath();
ctx.moveTo(5, 50);
ctx.lineTo(100, 75);
ctx.stroke();</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<h2 id=""drawing-a-rectangle"">Drawing a rectangle</h2>
<p>You can draw a rectangle by using the <code>rect</code> method. Let's take a look at how to draw a rectangle on a canvas. We'll create a rectangle from the top left corner of the canvas to the bottom right corner.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><canvas id=""canvas"" style=""border: 1px solid #000000;""></canvas></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">const canvas = document.getElementById(""canvas"");
const ctx = canvas.getContext(""2d"");
ctx.fillStyle = 'red';
ctx.fillRect(10, 10, 100, 100);</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<h2 id=""drawing-a-circle"">Drawing a Circle</h2>
<p>You can draw a circle by using the <code>arc</code> method. Let's take a look at how to draw a circle on a canvas.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><canvas id=""canvas"" style=""border: 1px solid #000000;""></canvas></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">const canvas = document.getElementById(""canvas"");
const ctx = canvas.getContext(""2d"");
ctx.beginPath();
ctx.arc(95, 50, 40, 0, 2 * Math.PI);
ctx.stroke();</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<h2 id=""drawing-text"">Drawing Text</h2>
<p>You can draw text by using the <code>fillText</code> method. Let's take a look at how to draw text on a canvas.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><canvas id=""canvas"" style=""border: 1px solid #000000;""></canvas></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">const canvas = document.getElementById(""canvas"");
const ctx = canvas.getContext(""2d"");
ctx.font = ""24px Times New Roman"";
ctx.fillText(""Hello from Sabe.io!"", 12, 40);</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<h2 id=""drawing-stroke-text"">Drawing Stroke Text</h2>
<p>You can draw stroke text by using the <code>strokeText</code> method. Let's take a look at how to draw stroke text on a canvas.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><canvas id=""canvas"" style=""border: 1px solid #000000;""></canvas></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">const canvas = document.getElementById(""canvas"");
const ctx = canvas.getContext(""2d"");
ctx.font = ""24px Times New Roman"";
ctx.strokeText(""Hello from Sabe.io!"", 12, 40);</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<h2 id=""drawing-linear-gradients"">Drawing Linear Gradients</h2>
<p>You can draw linear gradients by using the <code>createLinearGradient</code> method. Let's take a look at how to draw linear gradients on a canvas.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><canvas id=""canvas"" style=""border: 1px solid #000000;""></canvas></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">const canvas = document.getElementById(""canvas"");
const ctx = canvas.getContext(""2d"");

const gradient = ctx.createLinearGradient(0, 0, 200, 0);
gradient.addColorStop(0, ""red"");
gradient.addColorStop(1, ""blue"");

ctx.fillStyle = gradient;
ctx.fillRect(8, 8, 100, 75);</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<h2 id=""drawing-radial-gradients"">Drawing Radial Gradients</h2>
<p>You can draw radial gradients by using the <code>createRadialGradient</code> method. Let's take a look at how to draw radial gradients on a canvas.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><canvas id=""canvas"" style=""border: 1px solid #000000;""></canvas></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">const canvas = document.getElementById(""canvas"");
const ctx = canvas.getContext(""2d"");

const gradient = ctx.createRadialGradient(70, 55, 10, 100, 50, 90);
gradient.addColorStop(0, ""red"");
gradient.addColorStop(1, ""blue"");

ctx.fillStyle = gradient;
ctx.fillRect(8, 8, 100, 75);</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial"" rel=""noopener"" target=""_blank"">Canvas tutorial - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Time, Mark, Abbreviation, Quote, Pre, Code","html-time-mark-abbreviation-quote-pre-code","Learn about miscellaneous and rarely used tags such as time, mark, abbreviations, quotes, pre, and code!","DRAFT","

<p>In this lesson, we'll explore some tags that are rarely used but are still useful to know! These include <code>quotes</code>, <code>time</code>, <code>abbreviations</code>, <code>mark</code>, <code>pre</code>, and <code>code</code>.</p>
<h2 id=""quotes"">Quotes</h2>
<p>There will come a time where you'll want to include some words said or written by somebody else, in other words, <strong>quoting</strong>. HTML offers a great solution to this via the <code>q</code> tag for in-line quotes and the <code>blockquote</code> tag for quotes that are likely to be longer.</p>
<p>Both tags have the <code>cite</code> attribute where you can specify the URL of the source.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;p&gt;According to Wikipedia, there are &lt;q cite=""https://en.wikipedia.org/wiki/Wikipedia:Size_comparisons""&gt;5,438,053 articles of any length&lt;/q&gt; for the English language.&lt;/p&gt;
&lt;blockquote cite=""https://en.wikipedia.org/wiki/Wikipedia:Size_comparisons""&gt;
    &lt;p&gt;Currently, the English Wikipedia alone has over 5,442,205 articles of any length, and the combined Wikipedias for all other languages greatly exceed the English Wikipedia in size, giving more than 27 billion words in 40 million articles in 293 languages.&lt;/p&gt;
&lt;/blockquote&gt;</code>
</pre>
<figure>
<img alt=""Cite your sources!"" height=""337"" loading=""lazy"" src=""https://sabe.io/classes/html/time-mark-abbreviation-quote-pre-code/quotes.png"" width=""669""/>
<figcaption>Cite your sources!</figcaption>
</figure>

<h2 id=""time"">Time</h2>
<p>When you want to display a <strong>time or date</strong>, the <code>time</code> tag helps you do so semantically. The browser isn't going to render the content any differently, but it allows you to exactly define the time or date you are referring to. This is useful for things like displaying the time a post was made, or the time a comment was made. The <code>datetime</code> attribute is used to specify the time or date.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;time datetime=""2017-09-01""&gt;Friday, September 1, 2017&lt;/time&gt;</code>
</pre>
<p>The <code>pubdate</code> attribute is used to specify that the time or date is the date the post was published.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;time pubdate=""2017-09-01""&gt;Friday, September 1, 2017&lt;/time&gt;</code>
</pre>
<figure>
<img alt=""The day Sabe launched!"" height=""221"" loading=""lazy"" src=""https://sabe.io/classes/html/time-mark-abbreviation-quote-pre-code/time.png"" width=""432""/>
<figcaption>The day Sabe launched!</figcaption>
</figure>
<h2 id=""abbreviations"">Abbreviations</h2>
<p>You can define your own <strong>abbreviations</strong> and let the user hover over the text if they want to know what is stands for. You do so with the <code>abbr</code> tag and a <code>title</code> attribute which contains the full phrase or word.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;p&gt;This future is every site using &lt;abbr title=""Hypertext Transfer Protocol Secure""&gt;HTTPS&lt;/abbr&gt;.&lt;/p&gt;</code>
</pre>
<figure>
<img alt=""Ain't nobody got time to memorize every abbreviation ever."" height=""337"" loading=""lazy"" src=""https://sabe.io/classes/html/time-mark-abbreviation-quote-pre-code/abbreviations.png"" width=""669""/>
<figcaption>Ain't nobody got time to memorize every abbreviation ever.</figcaption>
</figure>

<h2 id=""mark"">Mark</h2>
<p>You've used a <strong>highlighter</strong> before, right? Well, this is exactly what <code>mark</code> does. Wrap it around some text to see it highlighted! The visual style of this can be changed using CSS, which makes this tag even cooler.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;p&gt;Look at how this &lt;mark&gt;text&lt;/mark&gt; is highlighted!&lt;/p&gt;</code>
</pre>
<figure>
<img alt=""Your very own digital highlighter!"" height=""301"" loading=""lazy"" src=""https://sabe.io/classes/html/time-mark-abbreviation-quote-pre-code/mark.png"" width=""460""/>
<figcaption>Your very own digital highlighter!</figcaption>
</figure>
<h2 id=""pre"">Pre</h2>
<p>Anything you put inside <code>pre</code> tags, which stands for <strong>preformatted text</strong>, will retain all the same spaces and tabs. This is a key distinction from how content within tags normally work in that the browser will just ignore the original formatting.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><pre>
    This
        text
            will
                remain
                    this
                        way.
</pre></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""Pretty neat, eh?"" height=""279"" loading=""lazy"" src=""https://sabe.io/classes/html/time-mark-abbreviation-quote-pre-code/pre.png"" width=""497""/>
<figcaption>Pretty neat, eh?</figcaption>
</figure>

<h2 id=""code"">Code</h2>
<p>Whenever you want to share code on a web page, there's a useful <code>code</code> tag you can use. The <code>code</code> can be used both inline or as a block if you combine it with the aforementioned <code>pre</code> tag.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;code&gt;const x = 1337;&lt;/code&gt;</code>
</pre>
<p>Or you can have a block of code, like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;pre&gt;
    &lt;code&gt;
        const x = 1337;
        const y = 1337 * 2;
        console.log(y);
    &lt;/code&gt;
&lt;/pre&gt;</code>
</pre>
<figure>
<img alt=""Code is love. Code is life."" height=""253"" loading=""lazy"" src=""https://sabe.io/classes/html/time-mark-abbreviation-quote-pre-code/code.png"" width=""472""/>
<figcaption>Code is love. Code is life.</figcaption>
</figure>
<aside class=""aside__tip"">
<p>    In fact, the page you're viewing right now uses <code>pre</code> and <code>code</code> heavily. It's how we are showcasing to you <strong>beautiful</strong> code snippets!</p>
</aside>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote"" rel=""noopener"" target=""_blank"">Blockquotes - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time"" rel=""noopener"" target=""_blank"">Time - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr"" rel=""noopener"" target=""_blank"">Abbreviations - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark"" rel=""noopener"" target=""_blank"">Mark - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre"" rel=""noopener"" target=""_blank"">Preformatted Text - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code"" rel=""noopener"" target=""_blank"">Code - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"HTML-Conclusion and Wrap Up","html-conclusion-and-wrap-up","This lesson is the conclusion and wrap up of this class on HTML! Congratulations on completing the class!","DRAFT","
<p><strong>Congratulations on making it to the end of this class!</strong></p>
<p>By now, you should already be a lot better than most at HTML, which is awesome! If you ever get stuck or need a quick refresher on a certain topic, feel free to revisit the lesson.</p>
<aside class=""aside__tip"">
<p>    The <strong>key</strong> for all this knowledge to stick with you is for you to <strong>practice</strong>. Mess around with your page. Add more content to it and see how the browser renders it!</p>
</aside>
<p>Thank you for your time, and we hope you look at our other classes, specifically our class on <strong>CSS</strong> and <strong>JavaScript</strong>!</p>
<p>If you've enjoyed this class, do make sure to share this on Facebook, Twitter, LinkedIn or anywhere! It helps us grow and allows for more people to enjoy it as well! ??????</p>
<figure>
<img alt=""You're on to bigger things now."" height=""200"" loading=""lazy"" src=""https://sabe.io/classes/html/conclusion/congrats.gif"" width=""500""/>
<figcaption>You're on to bigger things now.</figcaption>
</figure>



",0,"standard","lesson"
"PHP-Introduction to PHP","php-introduction-to-php","This is the beginning of the Getting Started with PHP class. In here you will get started with writing PHP code!","DRAFT","

<p>PHP is the most popular and widely-used server-side scripting language and powers million of websites on the internet. The chances are really high that many of your favorite websites use PHP. PHP is used on the server to create interactive and dynamic websites as opposed to static never-changing pages.</p>
<p>PHP scripts are executed on the server and returns to the user the HTML, CSS, and JavaScript that our browsers need to render a page. Because of this, the browser never actually comes in contact with or understands PHP at all. When you access a PHP-powered website, the URL you request will trigger the server to execute one or many <code>.php</code> files. These PHP files will ultimately generate HTML, CSS, and JavaScript, depending on the PHP code logic.</p>
<figure>
<img alt=""The logo for the PHP language."" height=""312"" loading=""lazy"" src=""https://sabe.io/classes/php/introduction/php-logo.png"" width=""600""/>
<figcaption>The logo for the PHP language.</figcaption>
</figure>
<p>In this <strong>Diving into PHP</strong> class, learn everything from the syntax for PHP, handling form data, sending emails, using cookies, making database calls, and much more. But first, make sure you meet the prerequisites for this class.</p>
<h2 id=""prerequisites"">Prerequisites</h2>
<ul>
<li>Intermediate knowledge of HTML. Luckily for you, we have a great class on that</li>
<li>An environment to run PHP. This can be Internet Information Services (IIS), Apache, or your own web server</li>
</ul>
<p>With that being said, let's dive into PHP!</p>

<h2 id=""selecting-a-text-editor"">Selecting a Text Editor</h2>
<p>Since PHP is ultimately just plain text, you can use any text editor you want for this class. With that being said, we suggest using  <a href=""https://code.visualstudio.com/"" rel=""noopener"" target=""_blank"">Visual Studio Code</a>. It will support the operating system you're running on, and its syntax highlighting makes writing PHP fun!</p>
<p>Of course, feel free to use whatever text editor you might already be using.</p>
<figure>
<img alt=""Visual Studio Code"" height=""601"" loading=""lazy"" src=""https://sabe.io/classes/php/introduction/visual-studio-code.png"" width=""800""/>
<figcaption>Visual Studio Code</figcaption>
</figure>
<h2 id=""hello-world"">Hello World</h2>
<p>The easiest way to get started with PHP is to just do a <code>Hello World</code> example. Create a new file called <code>index.php</code>. The <code>.php</code> file extension lets the server know that this is a PHP file and that it should run any code that happens to be in the file. Inside the file, and enter this:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Diving into PHP&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;?php
        // Display the text 'Hello World'
        echo('Hello World');
    ?&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>Save the file and access it in your browser. As you might expect, you get an otherwise blank page with the text <code>Hello World</code> in it. If you were able to see:</p>
<figure>
<img alt=""Hello World in PHP"" height=""234"" loading=""lazy"" src=""https://sabe.io/classes/php/introduction/hello-world-php.png"" width=""459""/>
<figcaption>Hello World in PHP</figcaption>
</figure>
<p>You have everything you need to continue on with this class on PHP!</p>
<figure>
<img alt=""That feeling when you're ready to start learning PHP"" height=""257"" loading=""lazy"" src=""https://sabe.io/classes/php/introduction/im-ready.png"" width=""497""/>
<figcaption>That feeling when you're ready to start learning PHP</figcaption>
</figure>



",0,"standard","lesson"
"PHP-Syntax and Comments","php-syntax-and-comments","Learn the basic syntax of PHP in this lesson including how to echo text on the page and leaving comments.","DRAFT","
<h2 id=""syntax"">Syntax</h2>
<p>As you saw in our previous lesson where we did a simple <code>Hello World</code>, like so:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Diving into PHP&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;?php
            // Display the text 'Hello World'
            echo('Hello World');
        ?&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Hello World in PHP"" height=""234"" loading=""lazy"" src=""https://sabe.io/classes/php/syntax-comments/hello-world-php.png"" width=""459""/>
<figcaption>Hello World in PHP</figcaption>
</figure>
<p>The core syntax of PHP is actually quite simple. To declare PHP code, simply begin the code with <code>&lt;?php</code> and end it with <code>?&gt;</code>. Whatever is inside that will be interpreted as PHP code by the web server and executed.</p>
<aside class=""aside__warning"">
<p>    Keep in mind that all statements in PHP must end in a semi-colon <code>;</code>. This tells the web server ""this line of code is finished"".</p>
</aside>
<p>In our example, the actual code being executed is a call to the PHP <code>echo</code> function. What this function does is simply take whatever it is given and echo it on the page. That is why you saw <code>Hello World</code> on the page even though the text wasn't included in a raw HTML form. Because PHP can and is commonly embedded within HTML pages, the final output will appear no different to the user than if the HTML had that text written directly, or hardcoded.</p>

<h2 id=""comments"">Comments</h2>
<p>If you noticed above the call to <code>echo</code>, there was this:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    // Display the text 'Hello World'
?&gt;</code>
</pre>
<p>That is a <strong>comment</strong> in PHP. A comment is text that will be completely ignored by the web server as if it were never placed there in the first place. Comments are useful for leaving notes both to yourself and others about the surrounding code.</p>
<p>A comment spanning a single line is done with two slashes <code>//</code> or the hash symbol <code>#</code>, like so:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    // I am a single-line comment
    # I am also a single-line comment
?&gt;</code>
</pre>
<p>But you can also write a comment that spans multiple lines by creating a block comment, like so:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    /*
        I
        am
        a
        block
        comment
    */
?&gt;</code>
</pre>
<p>Great, that covers basic PHP syntax and how to leave comments!</p>



",0,"standard","lesson"
"PHP-Variables and Constants","php-variables-and-constants","Variables and constants hold data for us. Learn how to declare, initialize, and reassign them in PHP.","DRAFT","

<h2 id=""variables"">Variables</h2>
<p>A <strong>variable</strong> in PHP is used to store a value for us. We give the variable a name and it holds whatever information we assign to it, for example like a string of text, a number, an array, and much more. These named variables can then be used later on in our PHP code by simply referring to the variable's name.</p>
<p>Let's create a variable in PHP:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $apples = 5;
    echo($apples);
?&gt;</code>
</pre>
<p>Variables in PHP begin with a dollar sign <code>$</code>. By using the equal sign <code>=</code>, we are not only declaring, or creating, a new variable, but now we are assigning that variable a value. In our example, the variable name is <code>$apple</code> and we set its value to <code>5</code>. Now when we echo our variable, we get this for the output:</p>
<pre class=""pre__block"">	<code class=""language-markup"">5</code>
</pre>

<h2 id=""variable-naming-guidelines"">Variable Naming Guidelines</h2>
<p>As with every programming language, there are certain rules and guidelines for how you can name a variable in PHP, and they are as follows:</p>
<ul>
<li>Variables must begin with a dollar sign <code>$</code>.</li>
<li>After the dollar sign <code>$</code>, the first character must either be a letter or underscore <code>_</code></li>
<li>After the first character, only alpha-numeric characters and underscores <code>_</code> are allowed. This rules out spaces being used at all.</li>
</ul>
<p>Examples of valid PHP variable names:</p>
<pre class=""pre__block"">	<code class=""language-php"">$apples;
$_apples;
$app_les;
$apples4eva;</code>
</pre>
<p>Examples of invalid PHP variable names:</p>
<pre class=""pre__block"">	<code class=""language-php"">$1apples;
$app les;
$#apples;
$apple%;</code>
</pre>
<p>Also keep in mind that variable names in PHP are case-sensitive. This means that <code>$apple</code> and <code>$Apple</code> are <strong>different</strong> variables entirely.</p>
<h2 id=""constants"">Constants</h2>
<p>A <strong>constant</strong> is like a normal variable in PHP in every way except that they store fixed-values instead of a value that can be changed whenever you want. Once you give a constant a value, that value cannot be changed moving forward. Because of this, constants are perfect for defining things that you know will never change and therefore you can safely use them in your scripts moving forward with confidence that the value hasn't be altered.</p>
<p>You can create constants by using the built-in <code>define()</code> function that takes two parameters, the name of the constant and its value. After you define the constant, you can access it whenever you like as you would a normal variable.</p>
<p>Let's create our own constant:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    // Defining a new constant
    define('URL', 'https://sabe.io');

    // Using the constant
    echo('Thank you for visiting ');
    echo(URL);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Thank you for visiting https://sabe.io</code>
</pre>
<p>First we echo <code>Thank you for visiting </code> then the <code>URL</code> constant. Together, the two echos displayed <code>Thank you for visiting https://sabe.io</code>.</p>
<p>Constant names also follow the same guidelines and rules for variable names except that they don't need to start with a dollar sign <code>$</code>.</p>
<aside class=""aside__tip"">
<p>    By convention, the name of a constant is uppercased to make them easier to identify and read. This isn't required, but it explains why our constant was named <code>URL</code> and not <code>url</code>.</p>
</aside>



",0,"standard","lesson"
"PHP-Primitive Data Types","php-primitive-data-types","Primitive data types are the fundamental building blocks of data. This lesson will go over all the primitive data types supported in PHP.","DRAFT","

<p><strong>Primitive data types</strong> refers to the type of data that can be held in a variable or constant. They are called primitive because the data type is fundamental to the language and cannot be broken down any further. This includes strings of text, numbers, booleans, and more. Let's go over each one and see how they're used.</p>
<h2 id=""integer"">Integer</h2>
<p><strong>Integers</strong> are numbers that don't contain a decimal point, or whole numbers. They can also be positive or negative numbers. Here's how to declare them:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $red = 4;
    $blue = -6;

    echo($red);
    echo($blue);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">4
-6</code>
</pre>

<h2 id=""string"">String</h2>
<p><strong>Strings</strong> are a sequence of characters that ultimately make up text of some sort. Strings themselves can contain numbers in them and are declared by enclosing your text with either single or double quotes:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string1 = 'I have 9 pieces of gum.';
    $string2 = 'My favorite genre of music is hip hop.';

    echo($string1);
    echo($string2);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 9 pieces of gum.
My favorite genre of music is hip hop.</code>
</pre>
<h3>Concatenation</h3>
<p>You can <strong>concatenate</strong>, or combine, strings together by using the concatenation operator, like so:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string1 = 'I have 9 pieces of gum.';
    $string2 = 'My favorite genre of music is hip hop.';
    $string3 = $string1 . ' ' . $string2;
    echo($string3);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 9 pieces of gum. My favorite genre of music is hip hop.</code>
</pre>
<p><code>$string3</code> was a new string made from two existing strings that were combined thanks to concatenation. On that note, PHP provides a number of built-in functions to work with strings. Let's explore the more popular ones.</p>

<h3>strlen</h3>
<p>To get the length of a string, that is, how many characters make up the entire string, use the <code>strlen</code> function, which stands for string length.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string = 'This is an example string.';

    echo(strlen($string));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">26</code>
</pre>
<h3>str_word_count</h3>
<p>The <code>str_word_count</code> function is used to count how many words are in a string. Here it is used on the same string as before:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string = 'This is an example string.';

    echo(str_word_count($string));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">5</code>
</pre>

<h3>str_replace</h3>
<p>The <code>str_replace</code> function is used to replace all occurrences of the first string you pass in as a parameter with the second string you pass in as a parameter. Let's look at an example:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string = 'Fast cars are better than slow cars.';

    echo(str_replace('cars', 'trains', $string));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Fast trains are better than slow trains.</code>
</pre>
<p>We replaced both occurrences of <code>cars</code> with <code>trains</code> to get our new string.</p>
<h3>strrev</h3>
<p>The <code>strrev</code> function reverses the order of the string of characters:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string = 'Fast cars are better than slow cars.';

    echo(strrev($string));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">.srac wols naht retteb era srac tsaF</code>
</pre>

<h3>strtolower</h3>
<p>The <code>strtolower</code> function takes a string and lowercases it entirely.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string = 'Fast cars are better than slow cars.';

    echo(strtolower($string));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">fast cars are better than slow cars.</code>
</pre>
<h3>strtoupper</h3>
<p>The <code>strtoupper</code> function takes a string and uppercases it entirely.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string = 'Fast cars are better than slow cars.';

    echo(strtoupper($string));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">FAST CARS ARE BETTER THAN SLOW CARS.</code>
</pre>

<h3>str_repeat</h3>
<p>The <code>str_repeat</code> function takes a string and repeats it as many times as you want. The first parameter is the string you want repeated and the second parameter is the number of times you want it to be repeated.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string = 'ha';

    echo(str_repeat($string, 5));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">hahahahaha</code>
</pre>
<h2 id=""floating-point-number"">Floating Point Number</h2>
<p>Unlike integers, which are whole numbers, <strong>floating point numbers</strong> are decimals or fractional numbers. They otherwise aren't too different from integers and can be initialized the same way:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $decimal = 3.14159;

    echo($decimal);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">3.14159</code>
</pre>

<h2 id=""boolean"">Boolean</h2>
<p><strong>Booleans</strong> are a very simple data type that only have two valid values, <code>true</code> or <code>false</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $hungry = true;

    echo($hungry);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1</code>
</pre>
<aside class=""aside__tip"">
<p>    Under the hood, PHP represents <code>true</code> or <code>false</code> as <code>1</code> or <code>0</code>. That is why when we used <code>echo</code>, you saw <code>1</code> instead of <code>true</code>.</p>
</aside>
<h2 id=""null"">Null</h2>
<p>The <strong>null</strong> value is strange. It actually represents nothing at all. You can assign <code>NULL</code> to a variable, but it literally means that it is empty.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $strange = NULL;

    echo($strange);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup""></code>
</pre>
<p>Nothing appears because <code>$strange</code> has no real value assigned to it. The assignment we just did is equivalent to if we declare a variable but not assign it any value, like so:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $strange;

    echo($strange);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup""></code>
</pre>



",0,"standard","lesson"
"PHP-Math: Operators, Properties, and Methods","php-math-operators-properties-and-methods","Learn about how to do arithmetic and work with the math properties and methods provided natively by PHP.","DRAFT","

<p>PHP makes working with math very easy. Not only does it offer the <strong>arithmetic operators</strong> you would expect from a programming language, but it also offers mathematical properties and functions so we do not have to implement them ourselves. This lets you focus on writing the logic of your program and not reinventing the wheel.</p>
<h2 id=""arithmetic-operators"">Arithmetic Operators</h2>
<p><strong>Arithmetic operators</strong> are what let you manipulate numbers in PHP. Here are ones it offers.</p>

<h3>Addition</h3>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    // adding numbers
    $cats = 4;
    $dogs = 3;

    $pets = $cats + $dogs;
    echo('I have ' . $pets . ' pets');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 7 pets</code>
</pre>
<p>Here is a shorthand way to add a <code>1</code> to the value of a variable:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $cats = 4;
    $cats++; // adds 1

    echo('I have ' . $cats . ' cats');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 5 cats</code>
</pre>
<p>Here is the shorthand way to add an arbitrary number:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $cats = 4;
    $cats += 2; // adds 2 cats

    echo('I have ' . $cats . ' cats');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 6 cats</code>
</pre>
<h3>Subtraction</h3>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    // subtracting numbers
    $candy = 12;
    $eaten = 3;

    $left = $candy - $eaten;

    echo('I have ' . $left . ' candies left');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 9 candies left</code>
</pre>
<p>Here's the shorthand way to subtract <code>1</code>:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $candy = 12;
    $candy--; // subtracts 1

    echo('I have ' . $candy . ' candies');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 11 candies</code>
</pre>
<p>Here's the shorthand way to subtract an arbitrary number:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $candy = 12;
    $candy -= 7; // subtracts 7 candies

    echo('I have ' . $candy . ' candies');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I have 5 candies</code>
</pre>

<h3>Multiplication</h3>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    // multiplying numbers
    $tacos = 2;
    $guests = 20;
    $needed = $guests * $tacos;

    echo('I need ' . $needed . ' tacos');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I need 40 tacos</code>
</pre>
<p>Here is the shorthand way to multiple a variable:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $tacos = 2;
    $tacos *= 20; // multiplies the value by 20

    echo('I need ' . $tacos . ' tacos');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I need 40 tacos</code>
</pre>
<h3>Division</h3>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    // dividing numbers
    $burgers = 12;
    $guests = 6;
    $each = $burgers / $guests;

    echo('Each guest can eat ' . $each . ' burgers');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Each guest can eat 2 burgers</code>
</pre>
<p>Here's the shorthand way to divide:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $burgers = 12;
    $burgers /= 6; // divides the value by 6

    echo('Each guest can eat ' . $burgers . ' burgers');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Each guest can eat 2 burgers</code>
</pre>

<h3>Modulus</h3>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    // modulus operator
    $bottles = 14;
    $people = 4;
    $extra = $bottles % $people;

    echo('There are ' . $extra . ' extra bottles');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">There are 2 extra bottles</code>
</pre>
<p>Here is the shorthand way to perform modulus:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $bottles = 14;
    $bottles %= 4; // does modulus 4

    echo('There are ' . $bottles . ' extra bottles');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">There are 2 extra bottles</code>
</pre>
<h3>Order of Operations</h3>
<p><strong>Order of Operations</strong>, sometimes known as <strong>PEMDAS</strong>, is respected in PHP. Here's an example of it in action:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $x = (5 * 3) + 10 / 2;

    ('x is ' . $x;
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">x is 20</code>
</pre>

<h2 id=""math-properties"">Math Properties</h2>
<p>To avoid making people define it themselves, PHP provides many useful mathematical constants that we can use whenever applicable.</p>
<h3>Euler's Number</h3>
<p><strong>Euler's number</strong> is provided to us via the <code>M_E</code> constant.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo(M_E);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">2.718281828459</code>
</pre>

<h3>Pi</h3>
<p>The much known and beloved <strong>pi</strong> is provided via the <code>M_PI</code> constant.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo(M_PI);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">3.1415926535898</code>
</pre>
<h3>Euler's Constant</h3>
<p><strong>Euler's constant</strong> is provided to us via the <code>M_EULER</code> constant.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo(M_EULER);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">0.57721566490153</code>
</pre>

<h2 id=""math-functions"">Math Functions</h2>
<p>In addition to mathematical properties, PHP also implements some commonly used mathematical functions that we can use whenever we want.</p>
<h3>Absolute Value</h3>
<p>Get the <strong>absolute value</strong> of a number by passing in the number to <code>abs()</code> function:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $number1 = 3;
    $number2 = -6;

    echo(abs($number1) . ' ' . abs($number2));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">3 6</code>
</pre>

<h3>Floor</h3>
<p>Round any number down to the nearest whole number by calling the <code>floor()</code> function on it:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $number = 3.1415;

    echo(floor($number));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">3</code>
</pre>
<h3>Ceiling</h3>
<p>Round any number up to the nearest whole number by calling the <code>ceil()</code> function on it:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $number = 3.1415;

    echo(ceil($number));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">4</code>
</pre>

<h3>Logarithm</h3>
<p>Get the <strong>natural logarithm</strong> of a number by using the <code>log()</code> function:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $number = 3.1415;

    echo(log($number));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1.1447003928609</code>
</pre>
<h3>Maximum</h3>
<p>Get the highest number from a set of numbers by using the <code>max()</code> function:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo(max(35, 23, 52, 34, 74, 43));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">74</code>
</pre>

<h3>Minimum</h3>
<p>Get the lowest number from a set of numbers by using the <code>min()</code> function:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo(min(35, 23, 52, 34, 74, 43));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">23</code>
</pre>
<h3>Power</h3>
<p>Calculate the power of a number by using the <code>pow()</code> function. The first parameter is the base and the second parameter is the exponent.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo(pow(5, 3));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">125</code>
</pre>

<h3>Random</h3>
<p>Return a random number between a range that you define by using the <code>rand()</code> function:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $roll = rand(1, 6);
    echo('I just rolled a ' . $roll);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I just rolled a 6</code>
</pre>
<h3>Round</h3>
<p>Round a number to the nearest integer by using the <code>round()</code> function on it:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $number1 = 13.37;
    $number2 = 82.65;

    echo(round($number1) . ' ' . round($number2));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">13 83</code>
</pre>

<h3>Square Root</h3>
<p>Calculate the square root of a number by using the <code>sqrt()</code> function:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo(sqrt(1337));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">36.565010597564</code>
</pre>
<p>That's the end of it for Math in PHP! ??????</p>



",0,"standard","lesson"
"PHP-Ifs, Else Ifs, Switch","php-ifs-else-ifs-switch","Logic and conditionals are a fundamental part of PHP and is how your program or script can make decisions.","DRAFT","

<h2 id=""logic"">Logic</h2>
<p><strong>Logic</strong> in any programming language is the ability for your program to make decisions and choose a path to take depending on the state. For example, if you're writing a calculator, you're going to have to perform different operations depending on what button the user presses.</p>
<p>In this lesson, we'll learn all the ways to express logic in our PHP code by first learning about the comparison operators that make it possible.</p>

<h3>Equality Operator</h3>
<p>Using the <strong>equality operator</strong>, we can check if two numbers or ""things"" are equal to one another or not.</p>
<p>If the things we are comparing are equal, using the equality operator on them will result in <code>true</code>, and if they are not equal, it will result in <code>false</code>.</p>
<p>Using this operator is straightforward, simply use <strong>three equal signs</strong>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo(7 === 7);

    $peanuts = 48 / 4;

    echo($peanuts === 12);

    echo(63 === 42);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">11</code>
</pre>
<aside class=""aside__tip"">
<p>    As mentioned before, PHP uses <code>1</code> for <code>true</code> and <code>0</code> for <code>false</code>. However, when you try to echo out <code>false</code>, <a href=""https://www.php.net/manual/language.types.string.php#language.types.string.casting"" rel=""noopener"" target=""_blank"">it will return nothing</a>. To get around this, we will use <code>var_dump</code>, a function that dumps the values of a variable, to better illustrate booleans.</p>
</aside>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    var_dump(7 === 7);

    $peanuts = 48 / 4;
    var_dump($peanuts === 12);

    var_dump(63 === 42);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">bool(true)
bool(true)
bool(false)</code>
</pre>
<h3>Inequality Operator</h3>
<p>The <strong>inequality operator</strong> works in a similar fashion but in the reverse. If what you're comparing is the same, the result will be <code>false</code>, otherwise it will return <code>true</code>.</p>
<p>To use this operator, use a <strong>single exclamation point followed by two equal signs</strong>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    var_dump(9 !== 9);
    var_dump(57 !== 26);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">bool(false)
bool(true)</code>
</pre>

<h3>Greater Than and Less Than Operators</h3>
<p>You can check if a numerical value is greater than or less than another one using the <strong>greater than</strong> and <strong>less than</strong> operators.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    var_dump(4 &lt; 3);
    var_dump(34 &gt; 19);

    $variable = 62;
    var_dump($variable &gt; 25);
    var_dump($variable &gt; 131);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">bool(false)
bool(true)
bool(true)
bool(false)</code>
</pre>
<h3>Or Equal To Operators</h3>
<p>In the case you need to check if a number is <strong>either</strong> equal to or greater/less than another number, there are operators specifically for that as well.</p>
<p>To check if a number is <strong>greater than or equal to</strong> another number, use a greater than symbol followed by equal sign. On the flip side, to check if a number is <strong>less than or equal to</strong> another number, use a less than symbol followed by an equal sign.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    var_dump(34 &lt;= 61);
    var_dump(43 &lt;= 20);

    var_dump(76 &gt;= 76);
    var_dump(83 &gt;= 92);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">bool(true)
bool(false)
bool(true)
bool(false)</code>
</pre>

<h2 id=""conditionals"">Conditionals</h2>
<p>Now that we are able to compare things together and get back a boolean as a result, we are ready to make our program make decisions based off of that result. When we made decisions based off of the results of something, that is called a <strong>conditional</strong>.</p>
<h3>If</h3>
<p>The <strong>if</strong> statement is very straightforward. If whatever condition you are checking returns <strong>true</strong>, then the next block of code will execute.</p>
<p>Let's say <strong>if you eat 4 or more donuts, you will become sleepy</strong>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $donuts = 5;

    if ($donuts &gt;= 4) {
        echo('I am sleepy!');
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I am sleepy!</code>
</pre>
<p>Clearly you could care less about being sleepy, because you ate <strong>5 whole donuts</strong>. But what if you had some self-control and only ate <strong>3 donuts</strong>?</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $donuts = 3;

    if ($donuts &gt;= 4) {
        echo('I am sleepy!');
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup""></code>
</pre>
<p>Nothing was printed because the code block did not run. The reason it did not run was because the conditional returned <code>false</code>, as 3 is not greater than or equal to 4.</p>

<h3>Else</h3>
<p>When you want to run a code block if the original conditional returns <code>false</code>, you can utilize the <strong>else</strong> keyword.</p>
<p>Let's add an else block to our original situation.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $donuts = 3;

    if ($donuts &gt;= 4) {
        echo('I am sleepy!');
    } else {
        echo('I can eat another donut!');
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I can eat another donut!</code>
</pre>
<p>Because this time we added the else code block, when the <code>$donuts &lt;= 4</code> conditional returned false, it skipped the first code block and executed the second code block.</p>
<h3>Else If</h3>
<p>The <strong>else if</strong> keywords are a combination of both an if and an else block. You use these <strong>in between</strong> an if and an else statement and it serves as an additional path your code can take.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $donuts = 2;

    if ($donuts &gt;= 4) {
        echo('I am sleepy!');
    } else if ($donuts === 3) {
        echo('I can eat another donut!');
    } else if ($donuts === 2) {
        echo('I really want another donut!');
    } else {
        echo('I NEED donuts');
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I really want another donut!</code>
</pre>
<p>First it compares 2 to 4, that's <code>false</code> so it moves on. Now it compares 2 to 3, that's also <code>false</code> so it continues on. Now it compares 2 with 2, and since that's <code>true</code>, the code executes. The final else is never called and the entire program moves on.</p>

<h3>Ternary Operator</h3>
<p>The <strong>ternary operator</strong> is the shorthand way to write an entire conditional on a single line. Use ternary operators to assign a variable a value depending on the outcome of the conditional.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $donuts = 4;
    $sleepy = ($donuts &gt;= 4) ? 'Yes' : 'No';

    echo('Am I sleepy? ' . $sleepy);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Am I sleepy? Yes</code>
</pre>
<p>If you eat 4 or more donuts, the value of <code>$sleepy</code> will be <code>Yes</code>, otherwise it will be <code>No</code>.</p>
<aside class=""aside__tip"">
<p>    Ternary operators are best used when the logic is simple to read and understand. If it requires too much effort to comprehend, a regular if-else statement is recommended.</p>
</aside>
<h2 id=""switch-statement"">Switch Statement</h2>
<p>The <strong>switch statement</strong> offers us an alternative way to express a situation where you might have multiple else-ifs. A switch statement is similar to a traditionally else-if as you will see in the below example:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $weather = 'cloudy';

    switch ($weather) {
        case 'rainy':
            echo('I do not like this weather.');
            break;
        case 'cloudy':
            echo('This weather is okay.');
            break;
        case 'sunny':
            echo('This is great weather!');
            break;
        default:
            echo('This is a new kind of weather!');
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">This weather is okay.</code>
</pre>
<p>In our switch statement, we are <strong>switching</strong> on the <code>$weather</code> variable. If the value in it happens to match any of the cases we listed, the corresponding code block will execute. That is why it skipped over <code>rainy</code> and executed the code block under <code>cloudy</code>, as that was the value of <code>$weather</code>.</p>
<p>The <code>break</code> statement is there to end the switch statement from continuing on to more cases. If none of the cases we defined match, we can add a <code>default</code> case so that something executes, no matter what.</p>

<h2 id=""logical-operators"">Logical Operators</h2>
<p>The conditions we have been evaluating so far have been pretty simple. However, there are cases where we'll want to evaluate multiple conditions at once before making a decision.</p>
<p>There are many ways to combine and evaluate more than one condition at once, and we'll look at the <strong>logical operators</strong> that make that possible.</p>
<h3>And (&amp;&amp;)</h3>
<p>The <strong>and</strong> operator evaluates multiple conditions and only returns <code>true</code> if <strong>both</strong> conditions return <code>true</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $lunch_time = true;
    $is_hungry = true;

    if ($lunch_time &amp;&amp; $is_hungry) {
        echo('Since it is lunch time AND I am hungry, I should eat food now.');
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Since it is lunch time AND I am hungry, I should eat food now.</code>
</pre>
<p>Since both conditions were <code>true</code>, the echo inside was executed.</p>

<h3>Or (||)</h3>
<p>When you want the entire condition to be <code>true</code> if <strong>either</strong> condition is <code>true</code>, then what you want to use is the <strong>or</strong> logical operator.</p>
<p>The or operator only requires a single condition to be <code>true</code> for the entire condition to be true:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $pizza_available = true;
    $burger_available = false;

    if ($pizza_available || $burger_available) {
        echo('There is something to eat!');
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">There is something to eat!</code>
</pre>
<p>Even though there was no burgers available, because there was pizza, the condition returned <code>true</code> and you were able to eat something.</p>
<aside class=""aside__tip"">
<p>    The condition will return <code>false</code> if both conditions are also <code>false</code>. In this case, if there was neither burgers nor pizza, you would have nothing to eat.</p>
</aside>
<h3>Not (!)</h3>
<p>The <strong>not</strong> operator negates the outcome of whatever condition it is placed in front of. If the original condition returned <code>false</code>, then adding a not operator in front would make it act as if it returned <code>true</code>, and vice-versa.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $weather = 'sunny';
    $is_raining = $weather === 'rain';

    if (!$is_raining) {
        echo('Since it is not raining, I can play basketball outside!');
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Since it is not raining, I can play basketball outside!</code>
</pre>
<p>You cannot play basketball outside in the rain, so first you check if it's raining via the <code>$is_raining</code> variable. Since the weather is <code>sunny</code> and therefore not raining, you are able to play!</p>
<p>??????</p>



",0,"standard","lesson"
"PHP-Loops","php-loops","Learn how to shorten and improve your code by utilizing loops like for loops, while loops, do while loops, and for in loops.","DRAFT","

<p><strong>Loops</strong> are a fundamental feature of programming languages. They enable you the ability to run the same code over and over again in a compact syntax.</p>
<p>Loops are used to control the flow of your program and if you find yourself needing to copy and paste functions to keep executing them, perhaps you need to take advantage of loops.</p>
<h2 id=""for-loop"">For Loop</h2>
<p>A <strong>for loop</strong> is a loop that consists of three major parts.</p>
<ul>
<li><strong>Initial Value</strong>: This is where we define the loop's counter variable and assign it an initial value, typically named <code>i</code>.</li>
<li><strong>Condition</strong>: This is the expression that is evaluated to determine if the loop should run again.</li>
<li><strong>Iteration</strong>: This is the operation to be done at every iteration and is how you progress further with your loop.</li>
</ul>
<p>Let's take a look at loops by printing out the numbers 1 to 10:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    for ($i = 1; $i &lt;= 10; $i++) {
        echo($i . ' ');
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1 2 3 4 5 6 7 8 9 10</code>
</pre>
<p>First we create a new variable <code>$i</code> and we assign it a value of <code>1</code>, like so:</p>
<pre class=""pre__block"">	<code class=""language-php"">$i = 1;</code>
</pre>
<p>Now we define our loop to keep looping until that variable's value as long as the variable's value remains less than or equal to <code>10</code>, found here:</p>
<pre class=""pre__block"">	<code class=""language-php"">$i &lt;= 10</code>
</pre>
<p>Finally, after the loop successfully iterates, we increment the value of <code>$i</code> to ensure that we only go a single number at a time and that the loop eventually ends.</p>
<p>At each iteration from 1 to 10, we are simply echoing the value of <code>$i</code> plus a space at the end. This gives us the expected final results we saw earlier.</p>

<h2 id=""while-loop"">While Loop</h2>
<p>A <strong>while loop</strong> is another loop you may use to execute code over and over again. Compared to a for loop, a while loop is simpler in syntax but otherwise accomplishes the same task. For a while loop, you only need to provide it with a condition that it will evaluate at every iteration to determine if it needs to run again or not. If the condition returns <code>true</code>, it will run again, but otherwise it will stop running.</p>
<p>Let's repeat the last example using a while loop:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $i = 1;

    while ($i &lt;= 10) {
        echo($i . ' ');
        $i++;
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1 2 3 4 5 6 7 8 9 10</code>
</pre>
<p>The output is the same but we accomplished it using a different loop. First we declared a new variable, <code>i</code>, and initialized it to <code>1</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">$i = 1;</code>
</pre>
<p>Now we want our while loop to continue looping as long as the variable's value is less than or equal to <code>10</code>, which we do like so:</p>
<pre class=""pre__block"">	<code class=""language-php"">while ($i &lt;= 10) {</code>
</pre>
<p>Now we both do what we need to do inside the loop while also incrementing the value of <code>$i</code> so that its value eventually reaches <code>11</code> terminating the loop:</p>
<pre class=""pre__block"">	<code class=""language-php"">echo($i . ' ');
$i++;</code>
</pre>
<h2 id=""do-while"">Do While</h2>
<p>A <strong>do while</strong> loop operates the same way as a normal while loop except that the condition to be tested to determine if the loop should iterate again is done after the code block, not before. This means that with a do while loop, your code is guaranteed to run at least one time.</p>
<p>Let's illustrate this by writing a program that simulates you eating pizza:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $slices = 8;

    do {
        echo('With ' . $slices . ' left, I shall eat one.');
        $slices--;
    } while ($slices &gt; 0);

    echo('I have ran out of pizza!');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">With 8 left, I shall eat one.
With 7 left, I shall eat one.
With 6 left, I shall eat one.
With 5 left, I shall eat one.
With 4 left, I shall eat one.
With 3 left, I shall eat one.
With 2 left, I shall eat one.
With 1 left, I shall eat one.
I have ran out of pizza!</code>
</pre>
<p>First, we initialize a variable to hold the slices of pizza:</p>
<pre class=""pre__block"">	<code class=""language-php"">$slices = 8;</code>
</pre>
<p>Then, since we know there is definitely pizza available, we help ourselves to a slice inside the do code block:</p>
<pre class=""pre__block"">	<code class=""language-php"">do {
    echo('With ' . $slices . ' left, I shall eat one.');
    $slices--;</code>
</pre>
<p>Now that we've eaten a slice, we check to see if there is anymore slices left. If so, we can repeat the loop and eat another one. Otherwise, we ran out and cannot eat anymore:</p>
<pre class=""pre__block"">	<code class=""language-php"">} while ($slices &gt; 0);</code>
</pre>

<h2 id=""foreach-loop"">Foreach Loop</h2>
<p>A <strong>foreach loop</strong> is a loop that iterates once for every element, or item, in an array. If you're unfamiliar with what an array is, there's a lesson on that, but for now you can consider it a list of items.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $languages = ['English', 'French', 'Spanish'];

    foreach ($languages as $language) {
        echo('I can speak ' . $language);
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I can speak English
I can speak French
I can speak Spanish</code>
</pre>
<p>If your array contains key and value pairs as elements, a foreach loop can also iterate over that as well:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $languages = [
        'English' =&gt; 'England',
        'French' =&gt; 'France',
        'Spanish' =&gt; 'Spain'
    ];

    foreach ($languages as $language =&gt; $country) {
        echo($language . ' originated in ' . $country);
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">English originated in England
French originated in France
Spanish originated in Spain</code>
</pre>
<h2 id=""break"">Break</h2>
<p>The <strong>break statement</strong> can be used inside any loop. When used, it stops the iteration of the loop entirely, no matter what the condition of the loop is.</p>
<p>Let's try counting from <code>1</code> to <code>10</code> but break after the number <code>5</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $i = 1;

    while ($i &lt;= 10) {
        echo($i . ' ');

        if ($i == 5) {
            break;
        }

        $i++;
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1 2 3 4 5</code>
</pre>
<p>We've seen most of the code already, except the <code>break</code> statement:</p>
<pre class=""pre__block"">	<code class=""language-php"">if ($i == 5) {
    break;
}</code>
</pre>
<p>Simply put, as soon as the value of <code>$i</code> reaches 5, we asked to break out of the loop and terminate it. That is why the last number echoed was 5.</p>

<h2 id=""continue"">Continue</h2>
<p>The <strong>continue</strong> keyword is used whenever you want to skip ahead to the next iteration of the loop immediately, instead of finishing the rest of the code block.</p>
<p>Let's say in our previous example you didn't want to echo out any multiples of 3:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $i = 0;

    while ($i &lt; 10) {
        $i++;

        if ($i % 3 == 0) {
            continue;
        }

        echo($i . ' ');
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1 2 4 5 7 8 10</code>
</pre>
<p>Every time the value of <code>$i</code> was a multiple of 3, we are using the continue statement before the echo so it is never shown:</p>
<pre class=""pre__block"">	<code class=""language-php"">if ($i % 3 == 0) {
    continue;
}

echo($i . ' ');</code>
</pre>
<p>As you've seen, loops are extremely useful for making the same code block repeat over and over again in a compact and readable fashion.</p>



",0,"standard","lesson"
"PHP-Functions","php-functions","Functions in PHP allow you to reuse a code block and reduce code repetition which ensures cleaner and more modular code.","DRAFT","

<p><strong>Functions</strong> are self-contained blocks of code that can be called over and over again. Functions help your program become easier to understand and more modular while also reducing the amount of code you need to write to accomplish the same thing.</p>
<p>By dividing up more complicated logic into small pieces, functions help ensure your code doesn't grow out of control. Let's look at a simple function in PHP:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function introduction() {
        echo('Hello, I am from New York City.');
    }
?&gt;</code>
</pre>
<p>In general, to create a function, start with the <code>function</code> keyword, then the name of the function, in this case <code>introduction</code>.</p>
<aside class=""aside__warning"">
<p>    Function names in PHP must begin with a letter or underscore, but not a number. After that, you are free to use letters, numbers, and underscores. Also important to keep in mind is that function names are <strong>case-insensitive</strong>.</p>
</aside>
<h2 id=""invoking"">Invoking</h2>
<p>By itself, a function doesn't do anything. For the code inside of it to be executed, the function must be <strong>called</strong>, also known as <strong>invoking</strong> the function. Let's invoke our function from earlier:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function introduction() {
        echo('Hello, I am from New York City.');
    }

    introduction();
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Hello, I am from New York City.</code>
</pre>
<p>And just like that, the <code>introduction</code> function was invoked, causing whatever is inside to executing, giving us the text on our screen.</p>
<p>This is all nice, but what if you aren't actually from New York City and wanted your function to be a little more flexible?</p>

<h2 id=""parameters"">Parameters</h2>
<p>Functions support the passing in of information necessary for the function to execute its code. This information is called <strong>parameters</strong> or <strong>arguments</strong>.</p>
<p>Let's pass in a custom greeting and location to our <code>introduction</code> function.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function introduction($greeting, $location) {
        echo($greeting . ', I am from ' . $location . '.');
    }

    introduction('Hi', 'Los Angeles');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Hi, I am from Los Angeles.</code>
</pre>
<p>Our new and improved <code>introduction</code> function takes two parameters now, <code>$greeting</code> and <code>$location</code>. It then uses these two to create a brand new string from it. It takes the greeting, appends text to keep the format of the introduction identical, then appends the custom location at the end.</p>
<p>Now this function can work for anybody, no matter where they live!</p>
<h2 id=""return-values"">Return Values</h2>
<p>In addition to making our code more flexible and reusable, functions can also <strong>return values</strong> to us. In our previous examples, the <code>introduction</code> function didn't return any data to us because its only job was to print text.</p>
<p>Let's create a function that takes in a parameter but also returns back data by calculating the circumference of a circle given a specified radius.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function get_circumference($radius) {
        return 2 * $radius * M_PI;
    }

    $radius = 4;
    $circumference = get_circumference($radius);

    echo('A circle with a radius of ' . $radius . ' has a circumference of ' . $circumference);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">A circle with a radius of 4 has a circumference of 25.132741228718</code>
</pre>
<p>Pretty cool, right? Our <code>get_circumference</code> function takes the radius that we pass in and returns the calculated circumference back to us. We assign that value to the variable <code>$circumference</code> so that we can use it in our code.</p>
<aside class=""aside__tip"">
<p>    Keep in mind that a function can return more than just a number. It can also return a string, boolean, null, really anything you'd like. Just make sure to declare a variable to hold the value if you actually need to use the return value later in your code.</p>
</aside>



",0,"standard","lesson"
"PHP-Arrays","php-arrays","Arrays are a list of data in PHP. In this lesson, learn how to create, add elements to, remove elements from, and iterate over arrays.","DRAFT","

<p>PHP arrays allow us to store multiple values under a single variable name. This means that instead of needing to define a variable for each item, you can store them all together using a single variable.</p>
<p>Arrays are populated in key-value pairs. You have to provide what you want to store in the array, the value, and then a unique identifier, or ID, for the item, called the key. Providing back the ID is how you can access the value you stored in the array.</p>
<p>There are three different kinds of arrays that you can create in PHP:</p>
<ul>
<li>Numeric Arrays</li>
<li>Associative Arrays</li>
<li>Multidimensional Arrays</li>
</ul>
<p>Let's learn about the differences between these types of arrays.</p>
<h2 id=""numeric-arrays"">Numeric Arrays</h2>
<p><strong>Numeric arrays</strong> are arrays that use a number as the key. That is, when you want to store an item in the array, give it a number as the key and it will be stored there. Keep in mind that the first element in the array has an index of <code>0</code>, not <code>1</code>.</p>
<p>Let's define a numeric array:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $transportation[0] = 'car';
    $transportation[1] = 'bike';
    $transportation[2] = 'skates';
?&gt;</code>
</pre>
<p>Our array is named <code>$transportation</code> and the number in the brackets is the item's key. We set that to the value we want to store in the array.</p>
<p>We can also let PHP automatically fill in the keys in order by using this syntax:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $transportation = ['car', 'bike', 'skates'];
?&gt;</code>
</pre>
<p>The end result is the exact same thing. To get back an item from either array, simply call the array and pass in a key:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $transportation = ['car', 'bike', 'skates'];
    echo($transportation[1]);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">bike</code>
</pre>

<h2 id=""associative-arrays"">Associative Arrays</h2>
<p><strong>Associative arrays</strong> are very similar to numeric arrays except that instead of the keys being numbers, the keys are simply another value of some kind. This means that the value can be, for example, a string.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $schools['Bob'] = 'NYU';
    $schools['Jack'] = 'Columbia';
    $schools['Jasmine'] = 'Yale';
?&gt;</code>
</pre>
<p>Depending on the situation, you can also opt to define associative arrays in this syntax as well:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $schools = ['Bob' =&gt; 'NYU', 'Jack' =&gt; 'Columbia', 'Jasmine' =&gt; 'Yale'];
?&gt;</code>
</pre>
<p>As with before, getting back an array element is as easy as passing in the key.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $person = 'Jasmine';
    $schools = ['Bob' =&gt; 'NYU', 'Jack' =&gt; 'Columbia', 'Jasmine' =&gt; 'Yale'];

    echo($person . ' attends ' . $schools[$person]);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Jasmine attends Yale</code>
</pre>
<h3>Checking for Existence of Keys</h3>
<p>Sometimes you won't actually know if the associative array contains the key you want to access. If you try to access it anyways, you'll get an error. To avoid this, check for the existence of the key using the <code>isset()</code> function:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $person = 'Jasmine';
    $schools = ['Bob' =&gt; 'NYU', 'Jack' =&gt; 'Columbia', 'Jasmine' =&gt; 'Yale'];

    if (isset($schools[$person])) {
        echo($person . ' attends ' . $schools[$person]);
    } else {
        // the key does not exist
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Jasmine attends Yale</code>
</pre>
<p>The <code>isset()</code> function can be used on anything, not just for checking keys in an associative arrays. You can also check for the existence of variables in general that may have been defined in other files. The function will return a boolean indicating whether or not the variable exists and has a value.</p>

<h2 id=""multidimensional-arrays"">Multidimensional Arrays</h2>
<p><strong>Multidimensional arrays</strong> is an array in which each element is an array itself. Following our earlier example, we can store an entire array of information, instead of just the name of the school they attend.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $students = [
        [
            'name' =&gt; 'Bob',
            'school' =&gt; 'NYU',
            'graduation' =&gt; 2019
        ],
        [
            'name' =&gt; 'Jack',
            'school' =&gt; 'Columbia',
            'graduation' =&gt; 2021
        ],
        [
            'name' =&gt; 'Jasmine',
            'school' =&gt; 'Yale',
            'graduation' =&gt; 2020
        ]
    ];

    $student_id = 1;
    $student = $students[$student_id];

    echo($student['name'] . ' is attending ' . $student['school'] . ' and graduating in ' . $student['graduation']);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Jack is attending Columbia and graduating in 2021</code>
</pre>
<p>Alternatively, instead of using their student id as the key, you can also use their name:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $students = [
        'Bob' =&gt; [
            'school' =&gt; 'NYU',
            'graduation' =&gt; 2019
        ],
        'Jack' =&gt; [
            'school' =&gt; 'Columbia',
            'graduation' =&gt; 2021
        ],
        'Jasmine' =&gt; [
            'school' =&gt; 'Yale',
            'graduation' =&gt; 2020
        ]
    ];

    $student_name = 'Bob';
    $student = $students[$student_name];

    echo($student_name . ' is attending ' . $student['school'] . ' and graduating in ' . $student['graduation']);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Bob is attending NYU and graduating in 2019</code>
</pre>
<h2 id=""functions"">Functions</h2>
<p>PHP provides us built-in functions that make working with arrays much easier. Let's take a look at a few of these.</p>

<h3>print_r</h3>
<p>The <code>print_r</code>, meaning to print in human-readable form, can print out the entire array for us.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $students = [
        'Bob' =&gt; [
            'school' =&gt; 'NYU',
            'graduation' =&gt; 2019
        ],
        'Jack' =&gt; [
            'school' =&gt; 'Columbia',
            'graduation' =&gt; 2021
        ],
        'Jasmine' =&gt; [
            'school' =&gt; 'Yale',
            'graduation' =&gt; 2020
        ]
    ];

    print_r($students);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [Bob] =&gt; Array ( [school] =&gt; NYU [graduation] =&gt; 2019 ) [Jack] =&gt; Array ( [school] =&gt; Columbia [graduation] =&gt; 2021 ) [Jasmine] =&gt; Array ( [school] =&gt; Yale [graduation] =&gt; 2020 ) )</code>
</pre>
<h3>Sort</h3>
<p><strong>Sorting</strong> arrays in PHP can be complicated given how many functions there are for it, but once you find the one you need, it gets the job done. Here are just some of the sorting functions available to you:</p>
<ul>
<li><code>sort()</code>: Sorts a numeric array by key, low to high.</li>
<li><code>rsort()</code>: Sorts a numeric array by key, high to low.</li>
<li><code>array_multisort()</code>: Sorts multi-dimensional arrays by value.</li>
<li><code>asort()</code>: Sorts associative arrays by value, low to high.</li>
<li><code>arsort()</code>: Sorts associative arrays by value, high to low.</li>
<li><code>ksort()</code>: Sorts an array by key, low to high.</li>
<li><code>krsort()</code>: Sorts an array by key, high to low.</li>
</ul>
<p>Let's sort our earlier array:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $students = [
        'Bob' =&gt; [
            'school' =&gt; 'NYU',
            'graduation' =&gt; 2019
        ],
        'Jack' =&gt; [
            'school' =&gt; 'Columbia',
            'graduation' =&gt; 2021
        ],
        'Jasmine' =&gt; [
            'school' =&gt; 'Yale',
            'graduation' =&gt; 2020
        ]
    ];

    arsort($students);

    print_r($students);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [Jasmine] =&gt; Array ( [school] =&gt; Yale [graduation] =&gt; 2020 ) [Bob] =&gt; Array ( [school] =&gt; NYU [graduation] =&gt; 2019 ) [Jack] =&gt; Array ( [school] =&gt; Columbia [graduation] =&gt; 2021 ) )</code>
</pre>

<h3>array_push</h3>
<p>Use <code>array_push()</code> to append elements to the end of an array.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $colors = ['red', 'blue'];
    array_push($colors, 'green', 'yellow');
    print_r($colors);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [0] =&gt; red [1] =&gt; blue [2] =&gt; green [3] =&gt; yellow )</code>
</pre>
<h3>array_pop</h3>
<p>To remove and return the last element in an array, use <code>array_pop()</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $colors = ['red', 'blue', 'green', 'yellow'];
    $last = array_pop($colors);
    print_r($colors);
    echo($last);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [0] =&gt; red [1] =&gt; blue [2] =&gt; green )
yellow</code>
</pre>

<h3>array_shift</h3>
<p>To instead remove the first element in an array, use <code>array_shift()</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $colors = ['red', 'blue', 'green', 'yellow'];
    $first = array_shift($colors);
    print_r($colors);
    echo($first);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [0] =&gt; blue [1] =&gt; green [2] =&gt; yellow )
red</code>
</pre>
<h3>array_unshift</h3>
<p>To add an element to be beginning of an array, use <code>array_unshift()</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $colors = ['red', 'blue', 'green', 'yellow'];
    array_unshift($colors, 'purple');
    print_r($colors);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [0] =&gt; purple [1] =&gt; red [2] =&gt; blue [3] =&gt; green [4] =&gt; yellow )</code>
</pre>

<h3>array_merge</h3>
<p>To <strong>merge</strong> two or more arrays together, use <code>array_merge()</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $some_colors = ['red', 'blue', 'green', 'yellow'];
    $more_colors = ['purple', 'brown', 'white'];
    $colors = array_merge($some_colors, $more_colors);
    print_r($colors);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [0] =&gt; red [1] =&gt; blue [2] =&gt; green [3] =&gt; yellow [4] =&gt; purple [5] =&gt; brown [6] =&gt; white )</code>
</pre>
<h3>array_slice</h3>
<p>You can return a selected part, or <strong>slice</strong> of an array using <code>array_slice()</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $colors = ['red', 'blue', 'green', 'yellow', 'orange'];
    print_r(array_slice($colors, 1, 2));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [0] =&gt; blue [1] =&gt; green )</code>
</pre>
<p>The first parameter is the array you want to slice. The second parameter is the index you want to begin at. The third parameter is the number of elements you want returned back, or the new length.</p>
<aside class=""aside__tip"">
<p>    If you leave out the length, PHP will just return the entire rest of the array. You can also use a negative number for the starting index and it will start counting backwards from the end of the array.</p>
</aside>

<h3>array_splice</h3>
<p>You can replace selected elements of an array with another array using <code>array_splice()</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $words = ['a' =&gt; 'apple', 'b' =&gt; 'book', 'c' =&gt; 'car', 'd' =&gt; 'dark'];
    $replace = ['a' =&gt; 'amazing', 'b' =&gt; 'bacon'];
    array_splice($words, 0, 2, $replace);
    print_r($words);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [0] =&gt; amazing [1] =&gt; bacon [c] =&gt; car [d] =&gt; dark )</code>
</pre>
<h3>explode</h3>
<p>Use the <code>explode()</code> function to take a string and divide it up into an array of elements. Let's say you wanted to break up a text by a comma, also known as the <strong>delimiter</strong>:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $text = 'oh,say,can,you,see';
    $words = explode(',', $text);
    print_r($words);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [0] =&gt; oh [1] =&gt; say [2] =&gt; can [3] =&gt; you [4] =&gt; see )</code>
</pre>

<h3>implode</h3>
<p>The opposite of <code>explode()</code>, <code>implode()</code> takes an array of strings and returns a single new string, joined by whatever text you want, your delimiter.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $array = ['oh', 'say', 'can', 'you', 'see'];
    $text = implode(',', $array);
    print_r($text);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">oh,say,can,you,see</code>
</pre>
<h3>array_search</h3>
<p>Search through an array via a value and get back the key it was associated with using <code>array_search()</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $colors = ['red', 'blue', 'green', 'yellow', 'orange'];
    echo(array_search('green', $colors));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">2</code>
</pre>
<p>The color <code>green</code> was found in the third spot which has an index of <code>2</code>.</p>

<h3>in_array</h3>
<p>Simply put, the <code>in_array</code> function tells you if your value is in the array or not.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $colors = ['red', 'blue', 'green', 'yellow', 'orange'];
    if (in_array('orange', $colors)) {
        echo('Color found!');
    } else {
        echo('Color not found!');
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Color found!</code>
</pre>
<h3>array_unique</h3>
<p>Remove all duplicate values from an array using <code>array_unique()</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $colors = ['red', 'blue', 'red', 'blue'];
    print_r(array_unique($colors));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [0] =&gt; red [1] =&gt; blue )</code>
</pre>

<h3>array_reverse</h3>
<p>You can <strong>reverse</strong> the elements in an array using <code>array_reverse</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $words = ['a' =&gt; 'apple', 'b' =&gt; 'book', 'c' =&gt; 'car', 'd' =&gt; 'dark'];
    print_r(array_reverse($words));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [d] =&gt; dark [c] =&gt; car [b] =&gt; book [a] =&gt; apple )</code>
</pre>
<h3>array_map</h3>
<p>Use <code>array_map</code> when you want to apply a function to every element in an array to return a new array with them. For example, let's say you wanted to double every number in an array:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $numbers = [1, 2, 3, 4, 5];

    function double($number) {
      return $number * 2;
    }

    print_r(array_map('double', $numbers));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [0] =&gt; 2 [1] =&gt; 4 [2] =&gt; 6 [3] =&gt; 8 [4] =&gt; 10 )</code>
</pre>

<h3>array_filter</h3>
<p>Use the <code>array_filter</code> function to keep or remove elements from an array depending on whether or not that element fulfills a condition you define. Let's say you only want odd numbers:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $numbers = [1, 2, 3, 4, 5];

    function odd($number) {
        return $number % 2 == 1;
    }

    print_r(array_filter($numbers, 'odd'));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array ( [0] =&gt; 1 [2] =&gt; 3 [4] =&gt; 5 )</code>
</pre>
<p>Your function returns <code>true</code> if the element should remain or <code>false</code> if the element should be filtered out.</p>
<h3>array_reduce</h3>
<p>The <code>array_reduce</code> function is useful for when you want to perform a single operation across an entire array and return a single end result. A perfect example is taking a sum of an array of numbers:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $numbers = [1, 2, 3, 4, 5];

    function sum($carry, $number) {
        $carry += $number;
        return $carry;
    }

    print_r(array_reduce($numbers, 'sum'));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">15</code>
</pre>
<p>The way this function works is rather simple. The <code>$carry</code> variable <strong>carries</strong> over the value of the all the previous iterations. So when we call <code>$carry += $number;</code>, we are adding the current number's value, then returning it to be used in the next element's iteration.</p>



",0,"standard","lesson"
"PHP-Classes and Objects","php-classes-and-objects","Classes in PHP provide a blueprint for the creation of objects which helps organize our code and reduce complexity.","DRAFT","

<p><strong>Classes</strong> and <strong>Objects</strong> are fundamental to many programming languages, and PHP is no different. In this lesson we'll learn about what the two are and how you can use them to improve your PHP code.</p>
<p>A <strong>Class</strong> in PHP is a blueprint that you define that can then be used to create individual <strong>Objects</strong>. A class typically has variables associated to them, called <strong>properties</strong>, and functions that are internally defined that belong to that class.</p>
<h2 id=""defining-a-class"">Defining a Class</h2>
<p><strong>Defining a class</strong> in PHP is done with the built-in <code>class</code> keyword. Let's say you run a farm and you want to keep track of all the fruits you harvested. Let's create a class that represents a single fruit:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    class Fruit {

    }
?&gt;</code>
</pre>
<p>That's literally it. We have now defined a new class called <code>Fruit</code> to use to keep track of every fruit. Now, let's make this class useful!</p>

<h2 id=""constructing-a-class"">Constructing a Class</h2>
<p>In most cases, to create a new instance of the class, or object, you will need to call the <strong>constructor</strong> for the class. This function can optionally take any parameters needed to create a new instance and will create the instance and return it to you. Let's give our <code>Fruit</code> class a constructor and create a new fruit with it.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    class Fruit {

        // Declare class properties
        public $weight = 0;

        // Declare constructor to create new Fruit
        public function __construct($weight) {
            $this-&gt;weight = $weight;
        }

        // Public function to get the weight
        public function getWeight() {
            return 'This fruit weighs ' . $this-&gt;weight . ' grams.';
        }
    }

    $fruit = new Fruit(250);
    var_dump($fruit);

    echo($fruit-&gt;getWeight());
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">object(Fruit)#1 (1) { [""weight""]=&gt; int(250) }
This fruit weighs 250 grams.</code>
</pre>
<p>Okay let's break down what's going on here.</p>
<p>At the top of the class we are defining a single property for the class, the weight of the fruit. Then we are defining the constructor that will automatically get called when we run <code>new Fruit()</code>. The constructor will take the weight we passed in and set it to the new fruit's weight. Finally, we create a function that returns a string containing the fruit's weight.</p>
<p>To show what the values are, we then use <code>var_dump()</code> on the entire variable, then use <code>echo()</code> on the return value of the <code>getWeight()</code> function.</p>
<p>Now let's illustrate just how useful classes are by creating three fruits:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    class Fruit {

        public $weight = 0;

        public function __construct($weight) {
            $this-&gt;weight = $weight;
        }

        public function getWeight() {
            return 'This fruit weighs ' . $this-&gt;weight . ' grams.';
        }
    }

    $fruit1 = new Fruit(250);
    echo($fruit1-&gt;getWeight());


    $fruit2 = new Fruit(300);
    echo($fruit2-&gt;getWeight());

    $fruit3 = new Fruit(150);
    echo($fruit3-&gt;getWeight());
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">This fruit weighs 250 grams.
This fruit weighs 300 grams.
This fruit weighs 150 grams.</code>
</pre>
<p>It just takes a single additional line of code to create an entirely new <code>Fruit</code> object, each with their own independent weights. Also, feel free to easily modify an object's property values either directly or through a function:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    class Fruit {

        public $weight = 0;

        public function __construct($weight) {
            $this-&gt;weight = $weight;
        }

        public function getWeight() {
            return 'This fruit weighs ' . $this-&gt;weight . ' grams.';
        }

        public function setWeight($newWeight) {
            $this-&gt;weight = $newWeight;
        }
    }

    $fruit = new Fruit(250);
    echo($fruit-&gt;getWeight());

    $fruit-&gt;weight = 300; // changing value directly
    echo($fruit-&gt;getWeight());

    $fruit-&gt;setWeight(400); // changing value through a function
    echo($fruit-&gt;getWeight());
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">This fruit weighs 250 grams.
This fruit weighs 300 grams.
This fruit weighs 400 grams.</code>
</pre>
<h2 id=""class-inheritance"">Class Inheritance</h2>
<p><strong>Class inheritance</strong> is used to create classes that inherit the properties and functions defined in another class. Using class inheritance, you can define a new ""child"" class that is more specific than its ""parent"" class. In our scenario, let's make a class to represent an apple. An apple is also a fruit, so it makes sense to inherit from the <code>Fruit</code> class we defined earlier.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    class Apple extends Fruit {

        public function getType() {
            return 'I am an apple!';
        }
    }

    $apple = new Apple(300);

    echo($apple-&gt;getType());
    echo($apple-&gt;getWeight());
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">I am an apple!
This fruit weighs 300 grams.</code>
</pre>
<p>How cool is that? Even though we created a new apple, because we extended the <code>Fruit</code> class, our apple is also a fruit, just like they are in real life. That means that it gets access to both the properties and functions defined in the <code>Apple</code> class, but also the properties and functions defined in the <code>Fruit</code> class, which is why we were still able to do:</p>
<pre class=""pre__block"">	<code class=""language-php"">echo($apple-&gt;getWeight());</code>
</pre>
<aside class=""aside__tip"">
<p>    PHP <strong>automatically</strong> called the constructor for the <code>Fruit</code> with the value we passed in.</p>
</aside>

<h2 id=""overriding"">Overriding</h2>
<p>Let's expand on the functionality of the <code>Apple</code> class by defining a property only accessible to it. Since apples can be red, green, or yellow, let's allow ourselves to give our apples a color:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    class Fruit {

        public $weight = 0;

        public function __construct($weight) {
            $this-&gt;weight = $weight;
        }

        public function getWeight() {
            return 'This fruit weighs ' . $this-&gt;weight . ' grams.';
        }
    }

    class Apple extends Fruit {

        public $color = """";

        function __construct($weight, $color) {
            // this will call the parent constructor
            parent::__construct($weight);
            $this-&gt;color = $color;
        }

        public function getColor() {
            return 'This apple is ' . $this-&gt;color . '.';
        }

        public function getWeight() {
            return 'This apple weighs ' . $this-&gt;weight . ' grams.';
        }
    }

    $apple = new Apple(300, 'red');

    echo($apple-&gt;getWeight());
    echo($apple-&gt;getColor());
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">This apple weighs 300 grams.
This apple is red.</code>
</pre>
<p>Quite a few interesting things are happening in the above code. First off, if you noticed in the constructor for <code>Apple</code>, we are <strong>manually</strong> calling the constructor for <code>Fruit</code> to pass in the apple's weight. This is what, from PHP's perspective, allows the apple to also be a fruit, since we are fulfilling all the requirements for it to be a fruit. The second parameter, <code>red</code>, gives the apple its color by setting its <code>$color</code> property.</p>
<p>Also, in the <code>Apple</code> class, we are defining a function named <code>getWeight()</code>, which is the exact same name of the function in the <code>Fruit</code> class. This is called <strong>overriding</strong> a function, because PHP will use the child's implementation of the function, instead of the parent one. That is why the string read <code>This apple weighs 300 grams.</code> instead of <code>This fruit weighs 300 grams.</code>.</p>
<p>Classes and Objects in PHP are very versatile and useful at representing data in a compact and easy-to-work-with package. You just define a class, maybe define another class that inherits from that one, and you can create endless objects from them!</p>



",0,"standard","lesson"
"PHP-Date and Time","php-date-and-time","Learn how to express and work with dates and time using PHP's built-in date and time classes and functions.","DRAFT","

<p>With its powerful classes and functions, PHP makes it easy to work with dates and time. In this lesson, we'll learn how to extract and format dates and time, and to convert between timestamps.</p>
<h2 id=""creating-a-date"">Creating a Date</h2>
<p><strong>Creating a date</strong> in PHP is super straightforward. Just use the built-in <code>date()</code> function.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo(date('d/m/Y'));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">09/01/2018</code>
</pre>
<p>This returns the current date. However, you can also create a new date using your own values using the <code>DateTime</code> class. Afterwards, you can then format the object using the <code>date_format()</code> function by passing in the object, plus your desired format.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $date = new DateTime('09/01/2018');
    echo(date_format($date, 'd/m/Y'));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">09/01/2018</code>
</pre>

<h2 id=""formatting-a-date"">Formatting a Date</h2>
<p>As for those letters used in the parameter, the <code>date()</code> function requires a format to return back the date. Here's a list of some of the characters you can use to get back a formatted string from a date:</p>
<ul>
<li><code>d</code>: Day of the month with leading zeros (01, 31)</li>
<li><code>j</code>: Day of the month without leading zeros</li>
<li><code>D</code>: Short text of day (Mon, Sun)</li>
<li><code>l</code>: Full text of day (Monday, Sunday)</li>
<li><code>N</code>: Number of day of the week (1, 7)</li>
<li><code>w</code>: Number of day of the week (0, 6)</li>
<li><code>z</code>: Day of the year (0, 365)</li>
<li><code>W</code>: The week number (0, 52)</li>
<li><code>F</code>: Full month name (January, December)</li>
<li><code>m</code>: Month number with leading zeros (01, 12)</li>
<li><code>M</code>: Short text of month (Jan, Dec)</li>
<li><code>n</code>: Number of month without leading zeros (1, 12)</li>
<li><code>Y</code>: Full year (1994, 2018)</li>
<li><code>y</code>: Two digit year (94, 18)</li>
</ul>
<p>Here's another example:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo('Today is ' . date('F j, Y') . '.');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Today is September 1, 2018.</code>
</pre>
<h2 id=""unix-time"">Unix Time</h2>
<p>In the field of computer science, there is this concept called <strong>Unix time</strong>. Unix time is the number of seconds that have elapsed since <strong>midnight on January 1st, 1970</strong>. With this frame of reference in mind, dates and times can be expressed in this new format.</p>
<p>For example, here is one billion seconds in Unix time:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $timestamp = 1000000000;
    $date = new DateTime('@' . $timestamp);

    echo(date_format($date, 'd/m/Y'));
    echo(date('F d, Y h:i:s', $timestamp));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">09/09/2001
September 09, 2001 01:46:40</code>
</pre>
<p>If you noticed, you can also format the time using special characters. Here are all the characters you can use for time:</p>
<ul>
<li><code>g</code>: 12-hour number without leading zeros</li>
<li><code>G</code>: 24-hour number without leading zeros</li>
<li><code>h</code>: 12-hour number with leading zeros</li>
<li><code>H</code>: 24-hour number with leading zeros</li>
<li><code>i</code>: Minutes with leading zeros</li>
<li><code>s</code>: Seconds with leading zeros</li>
<li><code>v</code>: Milliseconds</li>
<li><code>u</code>: Microseconds</li>
<li><code>a</code>: Lowercase am or pm</li>
<li><code>A</code>: Uppercase AM or PM</li>
</ul>
<p>You can also get the current unix time by doing this:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $timestamp = time();
?&gt;</code>
</pre>

<h2 id=""mktime"">mktime</h2>
<p>The <code>mktime()</code>, standing for make time, lets you get a custom unix time by manually passing in values in the following syntax:</p>
<pre class=""pre__block"">	<code class=""language-php"">mktime(hour, minute, second, month, day, year);</code>
</pre>
<p>Here's a concrete example:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo(mktime(0, 0, 0, 9, 1, 2017));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1504224000</code>
</pre>
<p>The cool thing about this format is that you can represent exact moments in time using a single number. Then you can use this number to convert to a readable string later down the road.</p>

<ul>
<li>Getting Started with Moment.js Tutorial</li>
</ul>



",0,"standard","lesson"
"PHP-Forms","php-forms","Learn how to make your website more dynamic by handling input data from forms using GET and POST requests!","DRAFT","
<p><strong>Forms</strong> are a critical part of the web. They allow websites to collect information from their users and then process it to perform actions. For example, when you submit a username and password combination, a website can then log you in.</p>
<p>If you need a refresher on forms, check out our HTML lesson on it. In this lesson, we'll learn how to create forms, the different ways to submit data, and how to handle and validate that data.</p>
<h2 id=""the-form-get-method"">The Form GET Method</h2>
<p>The <strong>GET</strong> method is pretty simple, and you've seen it before. The data is sent in the URL itself. Here's an example from Google:</p>
<figure>
<img alt=""A Google search for Sabe.io"" height=""221"" loading=""lazy"" src=""https://sabe.io/classes/php/forms/google-search.png"" width=""526""/>
<figcaption>A Google search for Sabe.io</figcaption>
</figure>
<p>The data in</p>
<pre class=""pre__block"">	<code class=""language-markup"">https://www.google.com/search?q=sabe.io</code>
</pre>
<p>is found here:</p>
<pre class=""pre__block"">	<code class=""language-markup"">q=sabe.io</code>
</pre>
<p>The GET method uses key-value pairs and in this case, the <code>q</code>, standing for query, is the key, and <code>sabe.io</code> is the value. This is how Google knows what you searched in the box.</p>
<p>We can replicate the same ourselves in PHP. Here is a very simple example of using GET. The first is the HTML, then followed by the PHP that is handling the request.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;form action=""/search.php"" method=""GET""&gt;
    &lt;input type=""text"" name=""query"" /&gt;
    &lt;input type=""submit"" /&gt;
&lt;/form&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo($_GET['query']);
?&gt;</code>
</pre>
<figure>
<img alt=""A form being submit via a GET request."" height=""262"" loading=""lazy"" src=""https://sabe.io/classes/php/forms/get-request.png"" width=""495""/>
<figcaption>A form being submit via a GET request.</figcaption>
</figure>
<figure>
<img alt=""Using variables from a GET request."" height=""262"" loading=""lazy"" src=""https://sabe.io/classes/php/forms/get-variables.png"" width=""495""/>
<figcaption>Using variables from a GET request.</figcaption>
</figure>
<p>Notice the URL? When you hit submit, the browser knows to automatically take all the data in the form and send it to whatever is the <code>action</code>, in this case, to <code>search.php</code>. Then, <code>search.php</code> can handle the request itself.</p>
<p>In PHP, you read all GET variables using the <code>$_GET</code> array. Since the value of the <code>name</code> attribute was <code>query</code>, that is the same value used to access the data. Since we are just calling <code>echo()</code> with that data, that is why we see our query on the page.</p>
<p>Here are some more information about using the GET method:</p>
<ul>
<li>Using the GET method allows you to bookmark a URL since the data is self-contained within the URL itself.</li>
<li>Because the data is included in the URL, it is not recommended that you pass in sensitive data, since it can be easily read.</li>
<li>There is a limit of 1024 characters.</li>
<li>You technically do not need a form to send the data to the server. Simply enter new data right into the URL and hit enter!</li>
</ul>

<h2 id=""the-form-post-method"">The Form POST Method</h2>
<p>The <strong>POST</strong> method works almost in the exact same way except that the data is sent in the request made to the server and not the URL. That means that the data isn't visible in the URL like a GET request. It otherwise works exactly the same. Here is the same implementation of the earlier example using a POST request.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;form action=""/search.php"" method=""POST""&gt;
    &lt;input type=""text"" name=""query"" /&gt;
    &lt;input type=""submit"" /&gt;
&lt;/form&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo($_POST['query']);
?&gt;</code>
</pre>
<figure>
<img alt=""A form being submit via a POST request."" height=""262"" loading=""lazy"" src=""https://sabe.io/classes/php/forms/post-request.png"" width=""495""/>
<figcaption>A form being submit via a POST request.</figcaption>
</figure>
<figure>
<img alt=""Using variables from a POST request."" height=""262"" loading=""lazy"" src=""https://sabe.io/classes/php/forms/post-variables.png"" width=""495""/>
<figcaption>Using variables from a POST request.</figcaption>
</figure>
<p>In pretty much every single way, this example is the same as before. Since the form was set to use the <code>POST</code> method, the data was sent with the request. You can then access those POST variables using <code>$_POST</code> and then passing in the name of the piece of data you're trying to access.</p>
<p>Here are some more information about using the POST method:</p>
<ul>
<li>It is recommended for use with more sensitive information since the data is never shown in the URL itself.</li>
<li>You can post more than just text including images and video.</li>
<li>You cannot bookmark a page that requires POST data since the data isn't there.</li>
</ul>
<p>Many websites and applications depend on forms so becoming familiar with them is very useful if you want to build your own feature-rich website!</p>



",0,"standard","lesson"
"PHP-File Include and Require","php-file-include-and-require","PHP allows you to include the contents of another PHP file anywhere you want by using the include and require functions.","DRAFT","

<p>PHP allows you to include the contents of another PHP file anywhere you want. By doing so, you can re-use files you've already written in multiple places and break up a more complex site into smaller pieces.</p>
<p>The code will execute exactly as if you had copy and pasted the contents of the file. Because of this lack of repetition, you can save a lot of time and work by taking advantage of file inclusion. The two main functions to do this is called <code>include()</code> and <code>require()</code>.</p>
<h2 id=""include"">include</h2>
<p>The <code>include()</code> function is pretty easy to use. Simply pass in the path to the file you want included as the parameter. A great use case for <code>include()</code> is having a your page header separately inside <code>header.php</code> so that you can use it across multiple pages.</p>
<p>Here are three files, <code>page1.html</code>, <code>page2.html</code> and then our header inside <code>header.php</code>:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Page 1&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;?php include('header.php'); ?&gt;
        &lt;h1&gt;I am page 1!&lt;/h1&gt;
        &lt;p&gt;Here is page 1 content.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-php"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Page 2&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;?php include('header.php'); ?&gt;
        &lt;h1&gt;I am page 2!&lt;/h1&gt;
        &lt;p&gt;Here is page 2 content.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-php"">&lt;nav&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=""page1.html""&gt;Page 1&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""page2.html""&gt;Page 2&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/nav&gt;</code>
</pre>
<figure>
<img alt=""A look at page 1."" height=""292"" loading=""lazy"" src=""https://sabe.io/classes/php/include-require/page-1.png"" width=""437""/>
<figcaption>A look at page 1.</figcaption>
</figure>
<figure>
<img alt=""A look at page 2."" height=""292"" loading=""lazy"" src=""https://sabe.io/classes/php/include-require/page-2.png"" width=""437""/>
<figcaption>A look at page 2.</figcaption>
</figure>
<p>Because we asked our server to fetch the file called <code>header.php</code>, it did so and inserted the markup that lived inside that file. Now, changing the header like adding a new page is straightforward since you're only editing a single file instead of two. It might not seem like a big deal in this example, but imagine having a larger site with hundreds or thousands of pages. You're not going to want to be that person tasked with editing all of them!</p>
<aside class=""aside__tip"">
<p>    In our simple example, <code>header.php</code> had no real PHP code, but any code there would execute like any script.</p>
</aside>

<h2 id=""require"">require</h2>
<p>The <code>require()</code> function works almost exactly like the <code>include()</code> function except that if the file inclusion attempt fails, <code>require()</code> will throw an error and stop further execution of your scripts whereas <code>include()</code> will simply throw a warning before continuing on as if nothing happened.</p>
<p>Because of this difference, it is usually recommended that you only use <code>require()</code> on files that absolutely must be on the page.</p>
<p>For example, let's say for legal reasons you must include a copyright in your footer. Here's how the <code>index.html</code> and <code>footer.php</code> for that might look like:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Homepage&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;I am the homepage!&lt;/h1&gt;
        &lt;?php require('footer.php'); ?&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-php"">&lt;div&gt;Copyright &amp;copy; 2017-&lt;?= date('Y');?&gt;&lt;/div&gt;</code>
</pre>
<figure>
<img alt=""A dynamic footer displaying a copyright with the current year."" height=""292"" loading=""lazy"" src=""https://sabe.io/classes/php/include-require/dynamic-footer.png"" width=""437""/>
<figcaption>A dynamic footer displaying a copyright with the current year.</figcaption>
</figure>
<p>Using <code>require()</code>, the copyright is guaranteed to show or else an error will be thrown. As an added bonus, the footer's copyright text will display the current year so you never have to update it! Now every page where the line</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php require('footer.php'); ?&gt;</code>
</pre>
<p>is placed will have that cool footer.</p>
<h2 id=""includeonce-and-requireonce"">include_once and require_once</h2>
<p>Sometimes, depending on the code in them, including the same file multiple times can cause some issues. That is why PHP offers us two functions, <code>include_once()</code> and <code>require_once()</code>. These functions work exactly like <code>include()</code> and <code>require()</code> except that they only include the file a single time.</p>
<p>Even if you call the function again, that file will not be included again. These two functions are recommended to be used for things like configuration files or settings since you almost never need to redefine the variables in these files more than once.</p>



",0,"standard","lesson"
"PHP-File System and IO","php-file-system-and-io","Learn how to work with the file system in PHP including how to open, read, write, append, and close a file.","DRAFT","

<p>PHP allows you to work with the files and directories in the file system that it's being run on. With its built-in file system functions, it allows you to access, manipulate, open, read, write, append, and close files and folders.</p>
<figure>
<img alt=""Ain't nobody got time for these files."" height=""533"" loading=""lazy"" src=""https://sabe.io/classes/php/file-system/files.png"" width=""800""/>
<figcaption>Ain't nobody got time for these files.</figcaption>
</figure>
<h2 id=""opening-a-file"">Opening a File</h2>
<p>The <code>fopen</code> function is what you use to <strong>open</strong> a file on your file system. You need to open a file before you can perform any work on it. This is the general syntax for this function:</p>
<pre class=""pre__block"">	<code class=""language-php"">$file = fopen(path, mode);</code>
</pre>
<p>This function, if successful, returns to you a <code>File</code> object that you can then use further in your code.</p>

<h2 id=""reading-a-file"">Reading a File</h2>
<p>Now that you know how to open a file, let's actually read from it. You <strong>read</strong> from a file using the <code>fread</code> function. This is the basic syntax for the function:</p>
<pre class=""pre__block"">	<code class=""language-php"">fread($file, $length);</code>
</pre>
<p>Using both functions, here's an example of how to read a text file and output all of its contents on the page:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $path = ""document.txt"";
    $file = fopen($path, ""r"");

    $size = filesize($path);
    $contents = fread($file, $size);

    fclose($file);

    echo($contents);
?&gt;</code>
</pre>
<p>The mode in our <code>fopen</code> function, <code>r</code>, tells PHP that we are intending to simply <strong>read</strong> from the file. Since <code>fread()</code> requires a length to read, we pass in the entire size of the file by calling <code>filesize()</code> with the path to the same file.</p>
<p>Now with our <code>$file</code> object and <code>$size</code> we can pass in both to <code>fread()</code> to get the contents of the file.</p>
<p>Then we close the file using <code>fclose()</code> so that it is freed up and can be used by another process or program, then call <code>echo()</code> on the contents.</p>
<aside class=""aside__tip"">
<p>    PHP will technically automatically close any open files when the script finishes running, but it is still considered good practice to close them yourself after you are finished with them.</p>
</aside>
<h2 id=""reading-a-file-line-by-line"">Reading a File Line by Line</h2>
<p>Instead of reading an entire file, you can also choose to <strong>read a file line by line</strong>. This is done easily using the <code>fgets</code> function:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $file = fopen(""document.txt"", ""r"");

    while (!feof($file)) {
        $line = fgets($file);
        echo($line . ""&lt;br&gt;"");
    }

    fclose($file);
?&gt;</code>
</pre>
<p>The <code>feof()</code> function returns a boolean indicating if the <code>File</code> object is at the end. That means that the while loop will continue running for as long as there is still more left in the file. Then inside the loop we use <code>fgets()</code> with the <code>File</code> object which returns to us a single line at a time. All we do is simply use <code>echo()</code> on that line.</p>

<h2 id=""reading-an-entire-file"">Reading an Entire File</h2>
<p>Alternatively, you can choose to read an entire file without needing to open it using <code>file_get_contents()</code>. When you pass in the path to the file you want to read, it will return back the contents of the file:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $content = file_get_contents(""file.txt"");
    echo($content);
?&gt;</code>
</pre>
<p>From there you can choose to output it yourself or do anything you want with it.</p>
<h2 id=""reading-and-outputting-an-entire-file"">Reading and Outputting an Entire File</h2>
<p>PHP offers a separate function that both reads and automatically outputs the entire file for you. This function is called <code>readfile()</code> and it takes the path to the file as the parameter:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    readfile(""file.txt"");
?&gt;</code>
</pre>
<p>That single function call will look for <code>file.txt</code> and output it directly.</p>

<h2 id=""reading-entire-file-into-array"">Reading Entire File into Array</h2>
<p>Finally, PHP offers another function to read files, <code>file()</code>, that works similarly to <code>file_get_contents()</code> except that the result is in an array and not the entire file as one giant string. This can be useful as you can then iterate over the array line by line and process the data however you want. Here's an example of using <code>file()</code> and iterating over the result:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $lines = file(""file.txt"");

    foreach($lines as $line) {
        echo($line);
    }
?&gt;</code>
</pre>
<p>As you can clearly tell, PHP offers a wide range of functions for reading a file and it is up to you to pick the one that makes the most sense for what you're trying to do!</p>
<h2 id=""writing-a-file"">Writing a File</h2>
<p>PHP provides a function to <strong>write to a new file</strong>. That function is <code>fwrite()</code>. Here is an example:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
   $file = fopen(""new.txt"", ""w"");
   fwrite($file, ""Here is some text."");
   fclose($file);
?&gt;</code>
</pre>
<p>It's that simple. Notice that the second parameter for the <code>fopen</code> function is <code>w</code>. This tells PHP that you're going to be writing to this file. When this script runs, you will have a new <code>new.txt</code> file with the text <code>Here is some text.</code> inside.</p>
<aside class=""aside__warning"">
<p>    If the file didn't already exist, PHP will create a new file, then add your text. If the file already existed, PHP will <strong>overwrite the entire file</strong> with your desired text!</p>
</aside>

<h2 id=""writing-to-a-file-without-opening-it"">Writing to a File Without Opening it</h2>
<p>As with reading, there are also alternatives to writing to a file. Namely, you can use <code>file_put_contents()</code> to write a new file or overwrite an existing file with some content:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
   file_put_contents(""file.txt"", ""Here is some text."");
?&gt;</code>
</pre>
<p>That will either create a new file called <code>file.txt</code> with your text, or overwrite it if it already exists.</p>
<h2 id=""appending-to-a-file"">Appending to a File</h2>
<p><strong>Appending</strong> to a file is almost exactly like writing to a file. You're only changing a single letter, the mode, from <code>w</code> for writing to <code>a</code> to appending:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
   $file = fopen(""existing.txt"", ""a"");
   fwrite($file, ""I want to append this."");
   fclose($file);
?&gt;</code>
</pre>
<p>This will open the file <code>existing.txt</code> and append the text <code>I want to append this.</code> to it.</p>

<h2 id=""appending-to-a-file-without-opening-it"">Appending to a File without Opening it</h2>
<p>Remember <code>file_put_contents()</code>? Well, you can use it for appending as well as for writing. If you pass the <code>FILE_APPEND</code> flag as the third parameter, it will simply append your text to the file instead of overwriting it.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
   file_put_contents(""file.txt"", ""Append this text."", FILE_APPEND);
?&gt;</code>
</pre>
<h2 id=""renaming-a-file"">Renaming a File</h2>
<p><strong>Renaming a file</strong> is straightforward in PHP. Simply call the <code>rename()</code> function with the current path and new path.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    rename(""old.txt"", ""new.txt"");
?&gt;</code>
</pre>
<aside class=""aside__tip"">
<p>    The <code>rename()</code> function returns a boolean indicating whether or not the renaming attempt was successful!</p>
</aside>

<h2 id=""deleting-a-file"">Deleting a File</h2>
<p><strong>Deleting a file</strong> is also similarly straightforward in PHP. The function to delete a file is called <code>unlink()</code> and it requires a path to the file to delete. Here's an example of using it:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    unlink(""junk.txt"");
?&gt;</code>
</pre>
<aside class=""aside__tip"">
<p>    Just like the <code>rename()</code> function, the <code>unlink()</code> function also returns a boolean indicating the success of the operation.</p>
</aside>
<h2 id=""checking-if-a-file-exists"">Checking if a File Exists</h2>
<p>More often than not you're going to want to check <strong>if a file exists before</strong> performing any critical operations on them. For that PHP offers you the <code>file_exists()</code> function. Pass in a file you want to check and it will return a boolean indicating if the file exists or not.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $path = ""file.txt"";

    if (file_exists($path)) {
        // file exists at that path
    } else {
        // file does not exist at that path
    }
?&gt;</code>
</pre>
<aside class=""aside__tip"">
<p>    The <code>file_exists()</code> function is useful since it allows your script to do something else if the file you're trying to access doesn't exist.</p>
</aside>

<h2 id=""file-modes"">File Modes</h2>
<p>In this lesson, you saw the modes <code>r</code> for reading and <code>w</code> for writing a file. However, there are more modes that you can use. Here is a list of them:</p>
<ul>
<li><code>r</code>: Reading the file.</li>
<li><code>r+</code>: Reading and writing the file start at the beginning.</li>
<li><code>w</code>: Writing the file.</li>
<li><code>w+</code>: Reading and writing the file entirely.</li>
<li><code>a</code>: Reading and appending the file.</li>
<li><code>a+</code>: Reading the file.</li>
<li><code>x</code>: Writing a brand new file.</li>
<li><code>x+</code>: Reading and writing a brand new file.</li>
</ul>
<h2 id=""further-reading"">Further Reading</h2>
<ul>
<li><a href=""https://www.php.net/manual/ref.filesystem.php"" rel=""noopener"" target=""_blank"">Filesystem Functions on PHP.net</a></li>
</ul>



",0,"standard","lesson"
"PHP-Encoding and Decoding JSON","php-encoding-and-decoding-json","JSON is a lightwweight and readable data transfer format. Learn how to encode and decode JSON in PHP.","DRAFT","
<p>JSON stands for JavaScript Object Notation and is the standard format to store and transfer data on the web. The format is easy to work with in PHP thanks to its built-in functions to parse, encode, and decode it.</p>
<p>JSON is a string-representation of data that supports the following values:</p>
<ul>
<li>string</li>
<li>number</li>
<li>object</li>
<li>array</li>
<li>boolean</li>
<li>null</li>
</ul>
<p>Here's some sample JSON containing data about a country:</p>
<pre class=""pre__block"">	<code class=""language-json"">{
    name: ""Wakanda"",
    popualation: ""6000000"",
    continent: ""Africa"",
    tribes: [""Panther Tribe"", ""Border Tribe"", ""Mining Tribe"", ""River Tribe"", ""Merchant Tribe""],
    leader: {
        name: ""T'Challa"",
        gender: ""Male""
    }
}</code>
</pre>
<p>In general, as you can see above, data is stored in JSON format using key/value pairs.</p>
<h2 id=""encoding-json-in-php"">Encoding JSON in PHP</h2>
<p>You can <strong>encode data to JSON</strong> using PHP's built-in <code>json_encode()</code> function. You can encode most things, including arrays and any primitive types.</p>
<p>Here's an example of encoding an array:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $data = [""Hello"" =&gt; 1, ""World"" =&gt; 2];
    $json = json_encode($data);
    echo($json);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-json"">{""Hello"":1,""World"":2}</code>
</pre>
<p>Here's an example of encoding an object:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $person-&gt;name = ""Blake"";
    $person-&gt;age = 26;
    $person-&gt;city = ""New York City"";
    $json = json_encode($person);
    echo($json);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-bash"">{""name"":""Blake"",""age"":26,""city"":""New York City""}</code>
</pre>
<p>In both cases, <code>$json</code> contains a string of valid JSON that you can then do anything you want with it, including sending it to the client or writing it to a file.</p>

<h2 id=""decoding-json-in-php"">Decoding JSON in PHP</h2>
<p>Just like you can encode JSON, you can also <strong>decode JSON</strong> using PHP's built-in <code>json_decode()</code> function. Pass in a string of JSON and PHP will give you back a PHP object:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $json = '{""name"":""Blake"",""age"":26,""city"":""New York City""}';
    $object = json_decode($json);
    var_dump($object);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">object(stdClass)#1 (3) { [""name""]=&gt; string(5) ""Blake"" [""age""]=&gt; int(26) [""city""]=&gt; string(13) ""New York City"" }</code>
</pre>
<p>From here you can then access a single value or iterate through all the values, like with any object:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $json = '{""name"":""Blake"",""age"":26,""city"":""New York City""}';
    $object = json_decode($json);

    echo($object-&gt;name  . ""&lt;br&gt;"");

    foreach ($object as $key =&gt; $value) {
        echo($key . ""=&gt;"" . $value . ""&lt;br&gt;"");
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-bash"">Blake
name=&gt;Blake
age=&gt;26
city=&gt;New York City</code>
</pre>
<p>Alternatively, if you want an associative array as the return value instead of an object, you can specify that by passing in <code>true</code> as a second parameter. This tells PHP to give you the return value as an associative array. The default value is <code>false</code>.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $json = '{""name"":""Blake"",""age"":26,""city"":""New York City""}';
    $array = json_decode($json, true);
    var_dump($array);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">array(3) { [""name""]=&gt; string(5) ""Blake"" [""age""]=&gt; int(26) [""city""]=&gt; string(13) ""New York City"" }</code>
</pre>
<p>Like before, you can access data from the array like any associative array:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $json = '{""name"":""Blake"",""age"":26,""city"":""New York City""}';
    $array = json_decode($json, true);

    echo($array[""city""] . ""&lt;br&gt;"");

    foreach ($array as $key =&gt; $value) {
        echo($key . ""=&gt;"" . $value . ""&lt;br&gt;"");
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-bash"">New York City
name=&gt;Blake
age=&gt;26
city=&gt;New York City</code>
</pre>



",0,"standard","lesson"
"PHP-Cookies","php-cookies","Cookies are small pieces of data that you can store on the client. Learn how to work with them in PHP.","DRAFT","

<p><strong>Cookies</strong> are small pieces of data that can be stored on the client/browser. Once stored, they are automatically sent from the browser to the server with every request, allowing us to manipulate them using PHP.</p>
<p>Cookies are stored in a key-value pair and are used very commonly on the web, especially for things like user settings and preferences.</p>
<figure>
<img alt=""A look at delicious cookies in real life."" height=""450"" loading=""lazy"" src=""https://sabe.io/classes/php/cookies/cookies-in-real-life.png"" width=""800""/>
<figcaption>A look at delicious cookies in real life.</figcaption>
</figure>
<h2 id=""setting-a-cookie-in-php"">Setting a Cookie in PHP</h2>
<p><strong>Set a cookie</strong> using PHP's built-in <code>setcookie()</code> function. Here's the syntax for the function:</p>
<pre class=""pre__block"">	<code class=""language-php"">setcookie(name, value, expiry, path, domain, security);</code>
</pre>
<p>Here is some information on the meaning of these parameters:</p>
<ul>
<li><strong>name</strong>: The name/key of the cookie.</li>
<li><strong>value</strong>: The value of the cookie</li>
<li><strong>expiry</strong>: The time the cookie should expire on in Unix time.</li>
<li><strong>path</strong>: The path that this cookie should be available on.</li>
<li><strong>domain</strong>: The domain the cookie should be available on.</li>
<li><strong>security</strong>: The boolean indicating if the cookie should only be sent over HTTPS.</li>
</ul>
<aside class=""aside__tip"">
<p>    The default value for the expiry of a cookie is <code>0</code>, meaning the cookie will expire after the browser closes and terminates the session.</p>
</aside>
<p>Now let's look at an example of setting a cookie in PHP:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $name = ""city"";
    $value = ""Miami"";
    $duration = 60 * 60 * 24 * 30; // 30 days

    setcookie($name, $value, time() + $duration);
?&gt;</code>
</pre>
<p>This creates a cookie set to expire in 30 days with the name <code>city</code> and value <code>Miami</code>.</p>
<p>You can validate that the cookie has been set by right-clicking anywhere on the page and hitting <strong>Inspect Element</strong> (or just opening your Developer Tools). Then head on over to the <strong>Application</strong> tap at the top, then checking under the <strong>Cookies</strong> section under <strong>Storage</strong> on the left. This window displays all of our cookies and you should see the one you created here.</p>
<figure>
<img alt=""A look at cookies set in PHP."" height=""303"" loading=""lazy"" src=""https://sabe.io/classes/php/cookies/cookies-set-in-php.png"" width=""771""/>
<figcaption>A look at cookies set in PHP.</figcaption>
</figure>

<h2 id=""accessing-cookie-values-in-php"">Accessing Cookie Values in PHP</h2>
<p>Now that the cookie is set, the browser will now automatically send the entire cookie with every request for as long as the cookie isn't expired. This means we can now access the cookie on the server since it has been sent to us with the request.</p>
<p>PHP automatically creates an associative array with all the cookies sent in the request in the superglobal variable named <code>$_COOKIE</code>. This means that you can access the value of any cookie by passing in the key/name, just like you would access any associative array in PHP.</p>
<p>Accessing the cookie we set earlier is as easy as this:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    echo($_COOKIE['city']);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Miami</code>
</pre>
<p>Keep in mind that cookies can be manipulated by the user. This means that while they're useful, they cannot be trusted to hold sensitive information. This also means that you cannot expect any cookie to come from the client with a 100% certainty. Because of this, it is recommended that you first check if the cookie exists before trying to access it.</p>
<p>Here's an example of that:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    if (isset($_COOKIE['city'])){
        echo($_COOKIE['city']);
    } else {
        // the cookie doesn't exist
    }
?&gt;</code>
</pre>
<p>Since cookies are provided to us in an associative array, you can also display every single one like could with any associative array. This can be useful for debugging any code that uses cookies.</p>
<p>Print all your cookies out like so:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    print_r($_COOKIE);
?&gt;</code>
</pre>
<h2 id=""deleting-cookies-in-php"">Deleting Cookies in PHP</h2>
<p>You can delete a cookie by using the same function used to set them in the first place, the <code>setcookie()</code> function. Remember that browsers will automatically remove expired cookies. That means all you need to do is set the expiration date to any time in the past, and the browser will take care of the rest.</p>
<p>All you need is the name of the cookie and exactly where the cookie was set to be active, along with any time in the past:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $name = ""city"";

    setcookie($name, """", time() - 60);
?&gt;</code>
</pre>
<p>This takes our <code>city</code> cookie and sets its time to 60 seconds in the past. Once that happens, the browser will recognize that this cookie has expired and remove it for us.</p>



",0,"standard","lesson"
"PHP-Sessions","php-sessions","PHP sessions allow you to store temporary information about a user on the server like logged-in state or username.","DRAFT","

<p>PHP sessions allow you to store temporary information about a user on the server like logged-in state or username. They're similar to cookies except that this data is stored on the server instead of the client.</p>
<p>When a session is created in PHP, a temporary file is created on the server with the information about that session and the values for that session. This makes it so that the data is available to all pages on the site. At the same time, PHP sends the client a cookie containing their session identifier (SID). Now that each user has their own unique SID, when they make any requests to the server, the server can take this SID, map it to the temporary file, and access whatever data we put in to that file.</p>
<aside class=""aside__tip"">
<p>    The session identifier is a randomly generated 32 character long hexadecimal string. A cookie with the name <code>PHPSESSID</code> is then sent to the user with this identifier as the value.</p>
</aside>
<p>Because the only thing the client gets is their ID, sessions are much safer than cookies for handling sensitive information, since that sensitive data lives on the server instead of the client.</p>
<h2 id=""starting-a-php-session"">Starting a PHP Session</h2>
<p>To <strong>start a PHP session</strong>, use the <code>session_start()</code> function. This function first checks if a session already exists with this user by checking their session identifier. If there is a match, it simply retrieves the information in their temporary file. Otherwise it will initiate a brand new session, generating a new session identifier and sending the cookie to the user.</p>
<p>Here's how to start a session in PHP:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    session_start();
?&gt;</code>
</pre>

<h2 id=""storing-session-data"">Storing Session Data</h2>
<p>Now that we have initiated a session, we can now <strong>store data</strong>. All session data is available in the superglobal <code>$_SESSION</code> associative array.</p>
<p>Let's store a username with our session:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    session_start();

    $_SESSION['username'] = 'Bob';
?&gt;</code>
</pre>
<p>It's that simple. We have now stored <code>Bob</code> as the value with the key <code>username</code>.</p>
<h2 id=""accessing-session-data"">Accessing Session Data</h2>
<p>With both a session initiated and some data stored in it, we can now <code>access</code> that data whenever we want. Here is how easily you can access somebody's username:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    session_start();

    $username = $_SESSION['username'];

    echo($username);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Bob</code>
</pre>
<p>How easy was that? You can access session variables in PHP just like you would any associative array. Alternatively, you can choose to check if the session variable exists before trying to work with it, like so:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    session_start();

    if (isset($_SESSION['username'])) {
        // username exists
    } else {
        // username does not exist
    }
?&gt;</code>
</pre>

<h2 id=""destroying-a-session"">Destroying a Session</h2>
<p>You can <strong>destroy</strong> individual session variables by using the <code>unset()</code> function. This will remove a single variable from the associative array.</p>
<p>Let's say we wanted to remove the set username:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    session_start();

    if (isset($_SESSION['username'])) {
        unset($_SESSION['username']);
    }
?&gt;</code>
</pre>
<p>First we check that it even exists at all and if so we simply unset the value. However, if you would like to simply destroy the entire session altogether, PHP offers us a specific function for that called <code>session_destroy()</code>.</p>
<p>Using this function requires no parameters:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    session_start();

    session_destroy();
    // session is destroyed
?&gt;</code>
</pre>
<p>Sessions are a powerful way to add awesome functionality to your site including user preferences, settings, usernames, and other useful features!</p>



",0,"standard","lesson"
"PHP-Mail","php-mail","Learn how to send text and HTML mail dynamically in PHP using its built-in mail functions and variables.","DRAFT","
<p>Sending mail is a very common thing to do for a dynamic application or website. You want to inform your users of critical events like a successful sign up, major updates or changes, a successful purchase, and any changes in status of their accounts. Sending mail in PHP is done with the <code>mail()</code> function, which both builds and sends the email from your server.</p>
<p>Here is the basic syntax for the function:</p>
<pre class=""pre__block"">	<code class=""language-php"">mail(destination, subject, message, headers, parameters);</code>
</pre>
<p>Here is the explanations for each parameter:</p>
<ul>
<li><strong>destination</strong>: The recipient's email address to send the email to.</li>
<li><strong>subject</strong>: The subject line of the email.</li>
<li><strong>message</strong>: The content of the email.</li>
<li><strong>headers</strong>: Additional headers like ""From"", ""Cc"", and ""Bcc"".</li>
<li><strong>parameters</strong>: Any additional parameters.</li>
</ul>
<aside class=""aside__tip"">
<p>    The last 2 parameters for the <code>mail()</code> function are optional.</p>
</aside>
<h2 id=""sending-plain-text-emails"">Sending Plain Text Emails</h2>
<p>The simplest email to send is a <strong>plain text</strong> email. That is, the body of the email is just normal text. Here's an example of sending a plain text email:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $destination = ""<a class=""__cf_email__"" data-cfemail=""3940564c794a585b5c175056"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>"";
    $subject = ""Hello there, from Sabe"";
    $message = ""Hello, thanks for registering on our forum!"";

    $from = ""<a class=""__cf_email__"" data-cfemail=""660e030a0a092615070403480f09"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>"";
    $headers = ""From: $from"";

    mail($destination, $subject, $message, $headers);
?&gt;</code>
</pre>
<p>That's all you need to do to send a plain text email. An important thing to note is that the <code>mail()</code> function will return a boolean indicating if sending the email was successful or not. That means you can run different code if it fails, like this:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $destination = ""<a class=""__cf_email__"" data-cfemail=""6811071d281b090a0d460107"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>"";
    $subject = ""Hello there, from Sabe"";
    $message = ""Hello, thanks for registering on our forum!"";

    $from = ""<a class=""__cf_email__"" data-cfemail=""ea828f868685aa998b888fc48385"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>"";
    $headers = ""From: $from"";

    $success = mail($destination, $subject, $message, $headers);

    if ($success) {
        // sending was successful
    } else {
        // sending was not successful
    }
?&gt;</code>
</pre>

<h2 id=""sending-html-emails"">Sending HTML Emails</h2>
<p>Sending HTML emails requires a bit more work to ensure it renders properly. To accomplish this, we simply need to pass additional headers with our emails so that the user's email client knows to render the email as an HTML page.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $destination = ""<a class=""__cf_email__"" data-cfemail=""5e27312b1e2d3f3c3b703731"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>"";
    $subject = ""Hello there, from Sabe"";

    $from = ""<a class=""__cf_email__"" data-cfemail=""6b030e0707042b180a090e450204"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>"";

    $headers  = 'MIME-Version: 1.0' . ""\r\n"";
    $headers .= 'Content-type: text/html; charset=iso-8859-1' . ""\r\n"";
    $headers .= 'From: ' . $from . ""\r\n"";

    $message = '&lt;html&gt;';
    $message .= '&lt;body&gt;';
    $message .= '&lt;h1 style=""color:#333;""&gt;Hello from Sabe.io!&lt;/h1&gt;';
    $message .= '&lt;p style=""color:#088;""&gt;Thanks for registering on our forum!&lt;/p&gt;';
    $message .= '&lt;/body&gt;';
    $message .= '&lt;/html&gt;';

    mail($destination, $subject, $message, $headers);
?&gt;</code>
</pre>
<aside class=""aside__warning"">
<p>    For security reasons, many email clients including Gmail will strip out the CSS from the <code>head</code> tags. That means that sending HTML emails typically require you to add the styles inline, which is what you see above.</p>
</aside>
<p>Your HTML email would then look something like this:</p>
<figure>
<img alt=""An example of an HTML email."" height=""124"" loading=""lazy"" src=""https://sabe.io/classes/php/mail/html-email.png"" width=""290""/>
<figcaption>An example of an HTML email.</figcaption>
</figure>
<p>Emails are a powerful way to connect with your users and keep them up-to-date with the most important information. Now you know how to send both plain text and HTML emails dynamically with your server using PHP!</p>



",0,"standard","lesson"
"PHP-Regular Expressions","php-regular-expressions","Learn how to use regular expressions search patterns in PHP to match text and do advanced find and replace operations.","DRAFT","

<p><strong>Regular expressions</strong> are a formatted sequence or pattern of characters that can be used in a search operation. They are written in a specific syntax and then are usually used to search for patterns in other text, or returning whether or not that text has met the pattern.</p>
<h2 id=""matching-a-single-word"">Matching a Single Word</h2>
<p>PHP offers us many different built-in functions to use regular expressions. Let's look at an example of matching a single word using <code>preg_match()</code>:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string = 'Cheesecakes taste good.';
    $pattern = '/cake/';
    echo(preg_match($pattern, $string));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1</code>
</pre>
<p>That means the string <code>cake</code> was found in the string <code>Cheesecakes taste good.</code>.</p>
<p>In general, the syntax for <code>preg_match()</code> is:</p>
<pre class=""pre__block"">	<code class=""language-php"">preg_match($pattern, $string);</code>
</pre>

<h2 id=""using-meta-characters"">Using Meta Characters</h2>
<p>Regular expressions aren't limited to just straight text. Our search patterns can utilize <strong>meta characters</strong>. Meta characters are characters that can be used in our regular expressions that have special meaning to them.</p>
<p>For example, a dot <code>.</code> character will match any single character:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string = 'Cheesecakes taste good.';
    $pattern = '/t.ste/';
    echo(preg_match($pattern, $string));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1</code>
</pre>
<p>Notice how even though our pattern read <code>t.aste</code> that it was still able to match the string <code>taste</code>? The <code>.</code> matched the <code>a</code>.</p>
<p>Here's a list of all the meta characters you can use in your PHP regular expressions.</p>
<ul>
<li><code>.</code>:	Any character</li>
<li><code>?</code>:	Makes the previous character optional</li>
<li><code>\w</code>: A word character</li>
<li><code>\W</code>: A non-word character</li>
<li><code>\d</code>: A digit</li>
<li><code>\D</code>: A non-digit character</li>
<li><code>\s</code>: A whitespace character</li>
<li><code>\S</code>: A non-whitespace character</li>
<li><code>\b</code>: A match at the beginning/end of a word</li>
<li><code>\B</code>: A match not at the beginning/end of a word</li>
<li><code>\0</code>: A NUL character</li>
<li><code>\n</code>: A new line character</li>
<li><code>\f</code>: A form feed character</li>
<li><code>\r</code>: A carriage return character</li>
<li><code>\t</code>: A tab character</li>
<li><code>\v</code>: A vertical tab character</li>
</ul>
<h2 id=""using-pattern-modifiers"">Using Pattern Modifiers</h2>
<p>A <strong>pattern modifier</strong> allows you to change the way a pattern match works. A modifier is just a character put at the end of the pattern that tells PHP to alter it's behavior.</p>
<p>Here's how to do a case-insensitive global search for a string inside another string:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $pattern = ""/apple/i"";
    $text = ""Apples can be different colors, like a red apple, a yellow apple, and a green apple."";

    $matches = preg_match_all($pattern, $text, $array);
    echo($matches . "" matches were found."");
    print_r($array);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">4 matches were found.
Array ( [0] =&gt; Array ( [0] =&gt; Apple [1] =&gt; apple [2] =&gt; apple [3] =&gt; apple ) )</code>
</pre>
<p>We found the word <code>apple</code> in our string four times, including the first match which was the uppercase <code>Apple</code> because we added <code>i</code> at the end of the pattern, which instructed PHP to ignore cases.</p>
<p>We also used a new function called <code>preg_match_all()</code> which is the same as the earlier <code>preg_match()</code> function except it will return all matches. Here's the basic syntax for <code>preg_match_all()</code>:</p>
<pre class=""pre__block"">	<code class=""language-php"">preg_match_all($pattern, $text, $array);</code>
</pre>
<aside class=""aside__tip"">
<p>    The <code>preg_match_all()</code> function will return the number of matches from the search and return all the individual matches as an array.</p>
</aside>
<p>Here are other modifiers you can use:</p>
<ul>
<li><code>i</code>: This makes the searching case-insensitive</li>
<li><code>g</code>: This makes the searching global which prevents it from stopping after the first match</li>
<li><code>o</code>: This evaluates the expression only once.</li>
<li><code>m</code>: This makes the searching multiline instead of a single line</li>
<li><code>s</code>: This makes dot <code>.</code>  characters match all characters.</li>
</ul>

<h2 id=""matching-using-sets"">Matching using Sets</h2>
<p><strong>Sets</strong> allow you to match against a set of characters that you enclose between brackets. You can think of it as like using the dot <code>.</code> except you define exactly what characters can be matched.</p>
<p>Let's look at a set that matches the first three integers:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string = 'I pay 15% in tips.';
    $pattern = '/[123]/';
    echo(preg_match($pattern, $string));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1</code>
</pre>
<p>A match was found because the number <code>1</code> as part of <code>15%</code> matched one of the characters we defined in the set, <code>[123]</code>.</p>
<p>You can also do the inverse of the set by <strong>negating</strong> it. This is done by placing a <code>^</code>character right after the opening bracket. Let's match any character that is <strong>not</strong> one of those three numbers:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $string = 'I pay 15% in tips.';
    $pattern = '/[^123]/';
    echo(preg_match($pattern, $string));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1</code>
</pre>
<p>Because the very first character, <code>I</code>, was not any of the first three numbers in our set, there was an immediate match.</p>
<p>Alternatively, you can express a set as a range between two values. For example, this is how you can match any number using a set:</p>
<pre class=""pre__block"">	<code class=""language-php"">$number = '/[0-9]/';</code>
</pre>
<h2 id=""matching-words-and-sentences"">Matching Words and Sentences</h2>
<p>In addition to matching individual characters and sets of characters, you can also <strong>match words and sentences</strong> using symbols that represent <strong>repetition</strong>. This takes advantage of the fact that words and sentences are simply repetitions of letters, with some punctuation.</p>
<p>Let's say we define a sentence as a string that begins with a capital letter. So far this makes our pattern look like this:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $pattern = '/[A-Z]/';
?&gt;</code>
</pre>
<p>After the capital letter, we can match anything afterwards to continue the pattern. If you remember, this is done with the dot <code>.</code> symbol. Our pattern now looks like this:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $pattern = '/[A-Z]./';
?&gt;</code>
</pre>
<p>Finally, we need to tell PHP to keep matching the previous symbol. In other words, we want to keep matching anything after the first capital letter. This is done with the plus <code>+</code> sign. This pattern now matches a capital letter plus anything afterwards:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $pattern = '/[A-Z].+/';
?&gt;</code>
</pre>
<p>Finally, to end the sentence, we can define it as the presence of either a period, question mark, or exclamation point. Now our pattern looks like this:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $pattern = '/[A-Z].+(\.|\?|!)/';
?&gt;</code>
</pre>
<aside class=""aside__tip"">
<p>    To tell PHP that we are trying to use a literal period and not the meta character for it, we escape the period by using a slash <code>\</code>.</p>
</aside>
<p>We just have one final issue to resolve. As of now, this pattern will match multiple sentences as one giant one since technically the start will be a capital letter and the end will be some kind of punctuation. We need to tell PHP to take a match as soon as it is available and continue searching for more matches. We do this with a question mark <code>?</code> meta character.</p>
<p>Finally, our regular expression can match sentences:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $pattern = '/[A-Z].+?(\.|\?|!)/';
    $text = ""Hello. I am sample text! How are you?"";

    $matches = preg_match_all($pattern, $text, $array);
    echo($matches . "" matches were found."");
    print_r($array);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">3 matches were found.
Array ( [0] =&gt; Array ( [0] =&gt; Hello. [1] =&gt; I am sample text! [2] =&gt; How are you? ) [1] =&gt; Array ( [0] =&gt; . [1] =&gt; ! [2] =&gt; ? ) )</code>
</pre>
<p>Now you can access each individual match found by accessing the different elements in the array.</p>
<p>Here are all the repetition-related symbols, called <strong>quantifiers</strong>:</p>
<ul>
<li><code>+</code>: This repeats the previous character or set one or more times</li>
<li><code>*</code>: This repeats the previous character or set zero or more times</li>
<li><code>?</code>: This repeats the previous character or set zero or one time</li>
<li><code>{a}</code>: This repeats the previous character exactly <code>a</code> number of times</li>
<li><code>{a, b}</code>: This repeats the previous character any number between <code>a</code> and <code>b</code></li>
</ul>

<h2 id=""testing-and-validation"">Testing and Validation</h2>
<p>Another popular use case for regular expressions is <strong>testing</strong> whether or not a match was found on the string provided. This is awesome for trying to validate whether or not the string is in a specific format that we want, such as a valid email address, username, password, URL, and others.</p>
<p>To test an entire string for a match, you must begin the regular expression pattern with <code>^</code> and end it with <code>$</code>.</p>
<p>Let's practice by trying to validate a username for a website. Let's define a valid username as the following two rules:</p>
<ol>
<li>Alphanumeric characters plus periods and dashes only</li>
<li>6 to 12 characters in length</li>
</ol>
<p>The first rule can be fulfilled using this pattern:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $pattern = '/^[a-zA-Z0-9.-]$/';
?&gt;</code>
</pre>
<p>Pretty simply put, we have defined three sets here <code>a-z</code>, <code>A-Z</code>, plus our two additional characters <code>.</code> and <code>-</code>. Combined this allows for the pattern to check for lowercase letters, uppercase letters, numbers, periods, and dashes.</p>
<p>Now let's enforce the second rule which is a length size in our pattern. Using one of the quantifiers we learned about above, we have our final pattern:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $pattern = '/^[a-zA-Z0-9.-]{6,12}$/';
    $array = ['Username',
                'U.sername',
                'U53RN4M3',
                'user',
                '<a class=""__cf_email__"" data-cfemail=""f68385938498b69b93"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>',
                'usernamezzzzz'];
    foreach ($array as $value) {
        echo(preg_match($pattern, $value));
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">1
1
1
0
0
0</code>
</pre>
<p>Just like that we are able to define a pattern, test it on the entire string, then return a boolean indicating whether or not the string met those rules. Now you can have some logic to send back the user a message if their username isn't up to par!</p>
<h2 id=""search-and-replace"">Search and Replace</h2>
<p>Yet another popular use for regular expressions is performing <strong>search and replace</strong> operations. Instead of the typical search and replace function where you hand it a string to replace it with another string, you can instead pass in a regular expression and it'll replace all matches with your new string.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $pattern = '/(\w+) (\w+) (\w+)/';
    $text = 'i love you';
    $replacement = '$3 $2 $1';
    echo(preg_replace($pattern, $replacement, $text));
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">you love i</code>
</pre>
<p>To understand what is going on here, you must be introduced to a new concept in regular expressions called <strong>groups</strong>. By wrapping three different patterns in parenthesis, we have defined three different groups, each being able to be referenced by <code>$1</code>, <code>$2</code>, and <code>$3</code>.</p>
<p>Now we can create a new string as the <strong>replacement</strong> that will define the final output.</p>
<p>Because the replacement string just references the three groups in reverse order, the output was simply the three words from the original string in reverse order. That is why <code>i love you</code> became <code>you love i</code>.</p>
<p>Groups are a powerful way to create a new string using another string where you can fully control the final output.</p>

<h2 id=""conclusion"">Conclusion</h2>
<p>Regular expressions are widely used in pretty much every programming language because of how powerful and flexible they are. They allow you to do everything from matching a single character, to entire words and sentences, testing and validating, and search and replaces.</p>



",0,"standard","lesson"
"PHP-MySQL Database","php-mysql-database","Learn how to use PHP with MySQL databases, the most popular database management software, with PDO and its functions.","DRAFT","

<p>A dynamic and complex website is usually driven by a database of some sort. In this lesson, we'll learn how to work with a database of our own, using one of the most popular database management systems around, MySQL.</p>
<h2 id=""overview-of-mysql"">Overview of MySQL</h2>
<p><strong>MySQL</strong> is used so widely with PHP because it is easy-to-use, fast, secure, scalable and extremely powerful. In addition, it runs on a wide range of operating systems and therefore is the ideal database management system to use for applications and websites of all sizes.</p>
<figure>
<img alt=""The logo of MySQL."" height=""544"" loading=""lazy"" src=""https://sabe.io/classes/php/database/mysql-logo.png"" width=""800""/>
<figcaption>The logo of MySQL.</figcaption>
</figure>
<p>MySQL databases store their data into individual tables, each divided up into rows and columns. Columns define what kind of data the rows hold, and each row represents an entry into that table.</p>
<p>Here's an example of how a table is structured in MySQL:</p>
<pre class=""pre__block"">	<code class=""language-markup"">+----+------------+----------------------------------+
| id | username   | email                            |
+----+------------+----------------------------------+
|  1 | AceHood    | <a class=""__cf_email__"" data-cfemail=""58393b3d3037373c1835393134763b3735"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                 |
|  2 | JohnCena   | <a class=""__cf_email__"" data-cfemail=""2b41444345484e454a6b464a424705484446"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                |
|  3 | Drake      | <a class=""__cf_email__"" data-cfemail=""c8acbaa9a3ad88a5a9a1a4e6aba7a5"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                   |
|  4 | Beyonce    | <a class=""__cf_email__"" data-cfemail=""4527203c2a2b26200528242c296b262a28"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                 |
|  5 | Nas        | <a class=""__cf_email__"" data-cfemail=""07696674476a666e6b2964686a"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                     |
+----+------------+----------------------------------+</code>
</pre>
<p>In this example table, we have three columns:</p>
<ol>
<li><code>id</code>: The user's identification number.</li>
<li><code>username</code>: The username of the account.</li>
<li><code>email</code>: The user's email address.</li>
</ol>
<p>Then we have five rows, each row being a completely separate user.</p>
<aside class=""aside__tip"">
<p>    To keep things simple, we'll only be working with strings and numbers, but MySQL supports a wide range of data types, include timestamps, bits, and many more.</p>
</aside>

<h2 id=""connecting-to-a-mysql-server"">Connecting to a MySQL Server</h2>
<p>To work with a MySQL database, we first must be able to <strong>connect to a MySQL server</strong>. Thankfully, this is a relatively simple thing to do. The basic syntax for it looks like this:</p>
<pre class=""pre__block"">	<code class=""language-php"">new PDO('mysql:host=localhost;', $username, $password);</code>
</pre>
<p>You simply pass in a string containing the MySQL server name and then the username and password of the account you're trying to access that server with.</p>
<p>Create a separate file called <code>database.php</code> to hold our database details, and put this in it:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $host = 'localhost';
    $username = 'username';
    $password = 'password';

    $pdo = new PDO('mysql:host=$host;', $username, $password);
?&gt;</code>
</pre>
<p>Fill in the variables with your own details and you should be good to go and ready to work with your MySQL database by simply importing this file whenever you want to use the newly created <code>$pdo</code> variable:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    include 'database.php';

    // you can now access $pdo
?&gt;</code>
</pre>
<h2 id=""creating-a-mysql-database-and-table"">Creating a MySQL Database and Table</h2>
<p>Unless you already did so, you'll need to <strong>create a database</strong> on the database server. This is because a single server can host many different databases. Let's create a database using PHP.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    include 'database.php';

    $database_name = 'app';
    $query = ""CREATE DATABASE IF NOT EXISTS "" . $database_name;
    $pdo-&gt;exec($query);

    echo('Database created successfully.');
?&gt;</code>
</pre>
<p>The text you see here, <code>CREATE DATABASE IF NOT EXISTS</code> is something called <strong>SQL</strong>, which stands for <strong>Structured Query Language</strong>. Simply put, it is how we can describe commands for MySQL to follow and do the stuff we want it to do.</p>
<p>In this case, we are telling MySQL to create a new database if one with that same name does not already exist, and then telling it the name of the database to create, <code>app</code>.</p>
<p>Now <code>app</code> is an empty database on our database server. We need to define a table for our users on it. Here's how to create a <code>users</code> table with our three columns on our <code>app</code> database:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    include 'database.php';

    $table_name = 'users';
    $query = ""CREATE TABLE `"" . $table_name . ""` (
        `id` INT NOT NULL AUTO_INCREMENT,
        `username` VARCHAR(45) NULL,
        `email` VARCHAR(45) NULL,
        PRIMARY KEY (`id`));"";
    $pdo-&gt;exec($query);

    echo('Table created successfully.');
?&gt;</code>
</pre>
<p>Without getting too complicated, that command used the <code>CREATE TABLE</code> to create a table with our desired name, <code>users</code>. Then it added a column named <code>id</code> as an integer that auto-increments (each new entry gets a unique number that is just the increment of the row's id), followed by some text for the username and some more text for the email. Finally, the query was executed and our table was created successfully!</p>

<h2 id=""deleting-a-mysql-database-and-table"">Deleting a MySQL Database and Table</h2>
<p>Before moving on to the fun stuff, it is worth learning how to undo what we just did. In other words, we should learn how to <strong>delete</strong> a MySQL database and table.</p>
<p>Here's how to delete, or drop, the MySQL table we just created:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    include 'database.php';

    $table_name = 'users';
    $query = ""DROP TABLE IF EXISTS "" . $table_name;
    $pdo-&gt;exec($query);

    echo('Table dropped successfully.');
?&gt;</code>
</pre>
<p>Running that script will drop the database with the name you provided. Now here's how to delete the entire database, along with every table that might exist on it:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    include 'database.php';

    $database_name = 'app';
    $query = ""DROP DATABASE IF EXISTS "" . $database_name;
    $pdo-&gt;exec($query);

    echo('Database dropped successfully.');
?&gt;</code>
</pre>
<p>As you can tell, the commands to drop a table and database are basically identical, and therefore you should be very careful when using either command!</p>
<h2 id=""inserting-data-into-a-mysql-database-table"">Inserting Data into a MySQL Database Table</h2>
<p>Assuming we still have both our MySQL database and table, let's learn how to <strong>insert data</strong> into them. Inserting data involves specifying the columns you want to insert data into, and then providing the values for each column.</p>
<p>Let's add a new user to our app's database:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    include 'database.php';

    $username = 'Biggie';
    $email = '<a class=""__cf_email__"" data-cfemail=""791b101e1e101c3914181015571a1614"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>';

    $query = 'INSERT INTO
        users (username, email)
        VALUES (:username, :email)';

    $params = [
        'username' =&gt; $username,
        'email' =&gt; $email
    ];

    $statement = $pdo-&gt;prepare($query);
    $statement-&gt;execute($params);

    echo('User added successfully.');
?&gt;</code>
</pre>
<p>First we manually defined the values that we wanted to insert. In a real application, this might come from user input. After that, we define the query to run. Since we are inserting data, we use the <code>INSERT INTO</code> SQL statement and pass in the table we want to use, <code>users</code>. Then we define the two columns we want to insert data into, the <code>username</code> and <code>email</code> columns, along with two placeholder variables, <code>:username</code> and <code>:email</code>. The value of these variables are then provided by the following <code>$params</code> array.</p>
<p>Finally we can <strong>prepare</strong> the statement and then execute it using the desired parameters.</p>
<p>If all went well, your database should now have a new entry at the bottom and look like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">+----+------------+----------------------------------+
| id | username   | email                            |
+----+------------+----------------------------------+
|  1 | AceHood    | <a class=""__cf_email__"" data-cfemail=""99f8fafcf1f6f6fdd9f4f8f0f5b7faf6f4"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                 |
|  2 | JohnCena   | <a class=""__cf_email__"" data-cfemail=""177d787f7974727976577a767e7b3974787a"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                |
|  3 | Drake      | <a class=""__cf_email__"" data-cfemail=""e18593808a84a18c80888d"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>.com                   |
|  4 | Beyonce    | <a class=""__cf_email__"" data-cfemail=""f496918d9b9a9791b499959d98da979b99"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                 |
|  5 | Nas        | <a class=""__cf_email__"" data-cfemail=""711f1002311c10181d5f121e1c"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                     |
|  6 | Biggie     | <a class=""__cf_email__"" data-cfemail=""f0929997979995b09d91999cde939f9d"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                  |
+----+------------+----------------------------------+</code>
</pre>
<aside class=""aside__tip"">
<p>    Because we set the <code>id</code> column to <strong>auto-increment</strong>, we don't have to pass in a value for it. MySQL adds the correct value for us.</p>
</aside>

<h2 id=""getting-data-from-a-mysql-database-table"">Getting Data from a MySQL Database Table</h2>
<p>Great, now let's learn how to <strong>get data from a MySQL table</strong> now that we've inserted some. To get some data back, we use the <code>SELECT</code> SQL statement and define the condition for it. Let's say we want the first user in our table:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    include 'database.php';

    $id = 1;

    $query = 'SELECT
        id,
        username,
        email
        FROM users
        WHERE id = :id';

    $statement = $pdo-&gt;prepare($query);
    $statement-&gt;bindParam(':id', $id);

    $statement-&gt;execute();
    $data = $statement-&gt;fetch(PDO::FETCH_ASSOC);

    print_r($data);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Array (
    [id] =&gt; 1
    [username] =&gt; AceHood
    [email] =&gt; <a class=""__cf_email__"" data-cfemail=""dfbebcbab7b0b0bb9fb2beb6b3f1bcb0b2"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>
)</code>
</pre>
<p>We're using the <code>SELECT</code> SQL statement, passing along the exact columns we want from the row, specify the table as <code>FROM users</code> then use a <code>WHERE</code> SQL statement to define that we only want the row <strong>where</strong> the <code>id</code> matches the value we defined, <code>1</code>.</p>
<p>Our code prepares the statement, the binds the parameter, executes it, then returns the data in an array that we put in the <code>$data</code> variable. Finally, we print out that variable to see that contents are exactly what we wanted.</p>
<h2 id=""updating-data-on-a-mysql-database-table"">Updating Data on a MySQL Database Table</h2>
<p>You can <strong>update data</strong> on a MySQL database table by using the <code>UPDATE</code> SQL statement.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    include 'database.php';

    $id = 1;
    $username = 'Common';
    $email = '<a class=""__cf_email__"" data-cfemail=""23404c4e4e4c4d634e424a4f0d404c4e"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>';

    $query = 'UPDATE users SET
        username = :username,
        email = :email
        WHERE id = :id';

    $params = [
        'id' =&gt; $id,
        'username' =&gt; $username,
        'email' =&gt; $email
    ];

    $statement = $pdo-&gt;prepare($query);
    $statement-&gt;execute($params);

    echo('User updated successfully.');
?&gt;</code>
</pre>
<p>As usual, the values are provided in a variable for demonstration purposes, but in a more developed application, this might come from user input. We are setting new data on the row whose <code>id</code> is equal to <code>1</code>. By the end of this script, our database should look like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">+----+------------+----------------------------------+
| id | username   | email                            |
+----+------------+----------------------------------+
|  1 | Common     | <a class=""__cf_email__"" data-cfemail=""e4878b89898b8aa489858d88ca878b89"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                  |
|  2 | JohnCena   | <a class=""__cf_email__"" data-cfemail=""02686d6a6c61676c63426f636b6e2c616d6f"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                |
|  3 | Drake      | <a class=""__cf_email__"" data-cfemail=""93f7e1f2f8f6d3fef2faffbdf0fcfe"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                   |
|  4 | Beyonce    | <a class=""__cf_email__"" data-cfemail=""6f0d0a1600010c0a2f020e0603410c0002"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                 |
|  5 | Nas        | <a class=""__cf_email__"" data-cfemail=""3e505f4d7e535f5752105d5153"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                     |
|  6 | Biggie     | <a class=""__cf_email__"" data-cfemail=""6b09020c0c020e2b060a020745080406"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                  |
+----+------------+----------------------------------+</code>
</pre>

<h2 id=""deleting-data-from-mysql-database-table"">Deleting Data from MySQL Database Table</h2>
<p>When you want to delete data, you're usually only trying to <strong>delete data within a table</strong>, not the entire table nor the entire database. For this case, we can use the <code>DELETE FROM</code> SQL statement.</p>
<p>Let's say we want to delete our last entry in our table, the 6th entry:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    include 'database.php';

    $id = 6;
    $query = 'DELETE FROM users WHERE id = :id';

    $params = [
        'id' =&gt; $id
    ];

    $statement = $pdo-&gt;prepare($query);
    $statement-&gt;execute($params);

    echo('User deleted successfully.');
?&gt;</code>
</pre>
<p>By now the syntax should be familiar. We are asking MySQL to delete data from the <code>users</code> table wherever the row's <code>id</code> column is equal to <code>6</code>. That deletes the 6th entry in our table, leaving the table finally looking like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">+----+------------+----------------------------------+
| id | username   | email                            |
+----+------------+----------------------------------+
|  1 | Common     | <a class=""__cf_email__"" data-cfemail=""97f4f8fafaf8f9d7faf6fefbb9f4f8fa"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                  |
|  2 | JohnCena   | <a class=""__cf_email__"" data-cfemail=""a6ccc9cec8c5c3c8c7e6cbc7cfca88c5c9cb"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                |
|  3 | Drake      | <a class=""__cf_email__"" data-cfemail=""5c382e3d37391c313d3530723f3331"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                   |
|  4 | Beyonce    | <a class=""__cf_email__"" data-cfemail=""0765627e68696462476a666e6b2964686a"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                 |
|  5 | Nas        | <a class=""__cf_email__"" data-cfemail=""422c2331022f232b2e6c212d2f"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>                     |
+----+------------+----------------------------------+</code>
</pre>
<h2 id=""conclusion"">Conclusion</h2>
<p>Database management systems are powerful and flexible tools that allow for dynamic and robust websites and applications. They manage and store our data, following the commands we give them for manipulating and serving that data to us. This was just an introduction to the world of databases, but hopefully this helped you get started with the basics of working with MySQL in PHP!</p>


<ul>
<li><a href=""https://www.php.net/manual/book.pdo.php"" rel=""noopener"" target=""_blank"">PHP Data Objects on php.net</a></li>
<li><a href=""https://dev.mysql.com/doc/apis-php/en/apis-php-pdo-mysql.html"" rel=""noopener"" target=""_blank"">PHP Data Objects interface on dev.mysql.com</a></li>
</ul>



",0,"standard","lesson"
"PHP-Error Handling","php-error-handling","No code is ever perfect, so you'll need to know how to handle and log errors and exceptions when they occur.","DRAFT","

<p>No code is perfect, so you'll need to know how to handle errors when they occur. Thankfully, PHP gives us many different ways in which we can deal with errors gracefully to ensure the proper continuation of our code.</p>
<h2 id=""handling-errors"">Handling Errors</h2>
<p>There are a multitude of reasons why a script would throw an error while being run. Examples of these include a lack of disk space, attempting to access an API that is down, using incorrect or malicious user input, accessing a file or data from a database that doesn't exist, insufficient permissions to perform an operation, and many more.</p>
<p>Let's look at a basic example that could throw an error and then handle it when it does. Let's say we attempt to access a file that doesn't exist:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    $file = fopen(""file.txt"", ""r"");
?&gt;</code>
</pre>
<p>Assuming that file does not exist, you will get an error. However, you can avoid this by checking if the file exists before trying to open it, and if not, use the PHP <code>die()</code> function. This function stops the execution of a script and display whatever text is passed in, usually a user-friendly string of text to alert the user to what occurred.</p>
<p>Here is our new piece of code:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    if (file_exists(""file.txt"")) {
        $file = fopen(""file.txt"", ""r"");
    } else {
        die(""Sorry, the file you are trying to access does not exist!"");
    }
?&gt;</code>
</pre>
<p>Now if the file doesn't exist you will just see:</p>
<pre class=""pre__block"">	<code class=""language-markup"">Sorry, the file you are trying to access does not exist!</code>
</pre>

<h2 id=""creating-a-custom-error-handler"">Creating a Custom Error Handler</h2>
<p>Sometimes, simply terminating the script and displaying a message isn't nearly enough. Sometimes you simply need to just run additional logic and keep the script going. For that we can create <strong>custom error handlers</strong>.</p>
<p>Custom error handlers, because they are custom, give you much more flexibility over how to handle the error. For example, you can choose to display a message to the user, display nothing and just take an alternative path, log it to a file or database, retry the operation, ignore the error, or terminate the script anyways.</p>
<p>Here is the basic syntax for a custom error handler function:</p>
<pre class=""pre__block"">	<code class=""language-php"">error_function($errno, $errstr,  $errfile, $errline, $errcontext);</code>
</pre>
<p>Only the first two parameters are required. The last three are optional. Here is a breakdown of what each parameter means:</p>
<ul>
<li><code>errno</code>: This is the error level you want to handle. More about this below.</li>
<li><code>errstr</code>: This is the error in a string.</li>
<li><code>errfile</code>: This is the name of the file that the error occurred on.</li>
<li><code>errline</code>: This is the line number that the error occurred on.</li>
<li><code>errcontext</code>: This is an array of the variable and values that were in use when the error occurred.</li>
</ul>
<h2 id=""error-levels"">Error Levels</h2>
<p>The first parameter, the <code>errno</code>, is an integer that specifies the error level you want to handle. Here are all the constants that represent an integer value that you can use as your error level:</p>
<ul>
<li><code>E_ERROR</code>: Errors that cause the script to terminate.</li>
<li><code>E_WARNING</code>: Warnings that don't terminate the script.</li>
<li><code>E_PARSE</code>: Errors generated at compile-time.</li>
<li><code>E_NOTICE</code>: Notices that might indicate a problem, but not necessarily.</li>
<li><code>E_CORE_ERROR</code>: Errors that occur when PHP starts-up.</li>
<li><code>E_CORE_WARNING</code>: Warnings that occur when PHP starts-up.</li>
<li><code>E_USER_ERROR</code>: This is an error created by you, the coder.</li>
<li><code>E_USER_WARNING</code>: This is a warning created by you, the coder.</li>
<li><code>E_USER_NOTICE</code>: This is a notice created by you, the coder.</li>
<li><code>E_STRICT</code>: These are notices sent by PHP as suggestions for you to improve you code.</li>
<li><code>E_RECOVERABLE_ERROR</code>: This is an error that can be recovered from if the user catches and handles it.</li>
<li><code>E_ALL</code>: This is all errors and warnings.</li>
</ul>

<h2 id=""using-a-custom-error-handler"">Using a Custom Error Handler</h2>
<p>Now that we know how to create a custom error handler, and how error levels work, let's actually define and use one.</p>
<p>Let's create a basic custom error handler that only uses the two required parameters:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function custom_error_handler($errno, $errstr) {
        echo(""&lt;strong&gt;Error $errno&lt;/strong&gt;: $errstr"");
    }
?&gt;</code>
</pre>
<p>This simple error handler simply displays to us the error level that occurred and then the error itself. Now all we need to do is tell PHP to use this function when an error occurs. This is done using the <code>set_error_handler()</code> function and passing in the name of the handler function you'd like to use:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function custom_error_handler($errno, $errstr) {
        echo(""&lt;strong&gt;Error $errno&lt;/strong&gt;: $errstr"");
    }

    set_error_handler(""custom_error_handler"");
?&gt;</code>
</pre>
<p>Now that we have defined our custom error handler and set it, let's try it out:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function custom_error_handler($errno, $errstr) {
        echo(""[Error $errno]: $errstr"");
    }

    set_error_handler(""custom_error_handler"");

    echo($handle_this);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">[Error 8]: Undefined variable: handle_this</code>
</pre>
<p>How cool is that?</p>
<h2 id=""error-triggering"">Error Triggering</h2>
<p>To better control the flow of your program, PHP lets you <strong>trigger errors</strong> manually instead of letting it happen normally. This is useful for when you detect that the state of your application is invalid and needs to change course. Triggering an error is done using the <code>trigger_error</code> function:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function custom_error_handler($errno, $errstr) {
        echo(""[Error $errno]: $errstr"");
    }

    set_error_handler(""custom_error_handler"");

    trigger_error(""This is a manually triggered error!"");
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">[Error 1024]: This is a manually triggered error!</code>
</pre>
<p>Keep in mind that you can also define precisely what error level you want to trigger and also define in your custom error handler what error level you want to handle. Here's an example of specifying the error level on both the trigger call and the handler:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function custom_error_handler($errno, $errstr) {
        echo(""[Error $errno]: $errstr"");
    }

    set_error_handler(""custom_error_handler"", E_USER_WARNING);

    trigger_error(""This is a manually triggered error!"", E_USER_WARNING);
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">[Error 512]: This is a manually triggered error!</code>
</pre>
<aside class=""aside__tip"">
<p>    The error number changed because we triggered a warning instead of an error!</p>
</aside>

<h2 id=""error-logging"">Error Logging</h2>
<p>When errors occur, it's usually not enough to simply tell the user that it has occurred. For the purposes of maintenance and improving the quality of your code, you're going to want to know that the error occurred at all. A great way to do this is by logging your errors using PHP's built-in <code>error_log()</code> function.</p>
<p>Used by itself, it will log an error that occurred to a file on your web server. Here is the basic syntax for it:</p>
<pre class=""pre__block"">	<code class=""language-php"">error_log($message, $message_type, $destination, $extra_headers);</code>
</pre>
<p>Here are the message types that you can use:</p>
<ul>
<li><code>0</code>: This is the default option and will write it the log file on disk.</li>
<li><code>1</code>: This is used to send an email to the destination address.</li>
<li><code>2</code>: This option is no longer available.</li>
<li><code>3</code>: This appends the message to the file provided as the destination.</li>
<li><code>4</code>: This sends the message straight to the Server API.</li>
</ul>
<p>Let's log an error to the disk using the message type <code>3</code> and pass in a file path:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function custom_error_handler($errno, $errstr) {
        error_log(""[Error $errno]: $errstr"", 3, ""errors.log"");
    }

    set_error_handler(""custom_error_handler"", E_USER_WARNING);

    trigger_error(""This is a manually triggered error!"", E_USER_WARNING);
?&gt;</code>
</pre>
<p>Now if you check the file <code>errors.log</code>, you should see:</p>
<pre class=""pre__block"">	<code class=""language-markup"">[Error 512]: This is a manually triggered error!</code>
</pre>
<p>Now let's send ourselves an email whenever this error occurs:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function custom_error_handler($errno, $errstr) {
        error_log(""[Error $errno]: $errstr"", 1, ""<a class=""__cf_email__"" data-cfemail=""2d4e41444843596d404c4441034e4240"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>"", ""From: <a class=""__cf_email__"" data-cfemail=""82f1e7f0f4e7f0c2efe3ebeeace1edef"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>"");
    }

    set_error_handler(""custom_error_handler"", E_USER_WARNING);

    trigger_error(""This is a manually triggered error!"", E_USER_WARNING);
?&gt;</code>
</pre>
<p>And just like that if you had access to <code><a class=""__cf_email__"" data-cfemail=""0a6966636f647e4a676b636624696567"" href=""/cdn-cgi/l/email-protection"">[email protected]</a></code> you would see the error emailed. The fourth parameter here is the email's subject.</p>



",0,"standard","lesson"
"PHP-Exception Handling","php-exception-handling","Learn how to handle exceptions so that when they happen you can recover gracefully and allow for the script to continue.","DRAFT","

<p><strong>Exceptions</strong> are a special kind of error that require specific code to handle. They are errors that occur after the failure of other code, and PHP offers us ways to gracefully recover and change the normal flow of the script.</p>
<figure>
<img alt=""A Windows blue screen of death, the ultimate fatal error."" height=""398"" loading=""lazy"" src=""https://sabe.io/classes/php/exception-handling/fatal-error.png"" width=""720""/>
<figcaption>A Windows blue screen of death, the ultimate fatal error.</figcaption>
</figure>
<p>To help wrap your head around exception handling, there are a few keywords you should know:</p>
<ul>
<li><code>try</code>: Any function that can throw an exception should be inside a <code>try</code> block. This block is used to tell PHP that the code you are trying to run can potentially fail entirely. If nothing fails, the code continues to execute normally.</li>
<li><code>catch</code>: If a failure occurs and an exception is thrown, PHP moves on to execute the code in the <code>catch</code> block, and gives us a useful object with information about what happened. This code block is ignored if no exception was thrown.</li>
<li><code>throw</code>: This keyword is how you manually throw an exception of your own.</li>
</ul>
<h2 id=""throwing-an-exception"">Throwing an Exception</h2>
<p>Let's <strong>throw an exception</strong> just so we can see PHP's try-catch mechanism at play:</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    try {
        $error = ""This is an exception message!"";
        throw new Exception($error);
    } catch (Exception $e) {
        echo(""Message: "" . $e-&gt;getMessage());
        echo(""File: "" . $e-&gt;getFile());
        echo(""Line: "" . $e-&gt;getLine());
        echo(""Code: "" . $e-&gt;getCode());
        echo(""Trace: "" . $e-&gt;getTraceAsString());
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Message: This is an exception message!
File: file.php
Line: 3
Code: 0
Trace: #0 {main}</code>
</pre>
<p>Since an exception was thrown inside a <code>try</code> block, PHP automatically ran the <code>catch</code> block and provided us the Exception object that we named <code>$e</code>. From there we extracted some of the information inside the object that can help us understand what went wrong.</p>

<h2 id=""custom-exceptions-and-exception-handlers"">Custom Exceptions and Exception Handlers</h2>
<p>You can create your own <strong>custom exceptions</strong> and <strong>custom exception handlers</strong> in PHP. These are useful for when you want to specialize what exactly should happen when a specific exception is thrown.</p>
<p>Let's create an custom exception handler that is thrown whenever a number that isn't even is passed in by extending PHP's basic Exception class.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    class NotEvenNumberException extends Exception {
        public function error_message() {
            return ""even_number must be an even number!"";
        }
    }

    $even_number = 5;

    try {
        if ($even_number % 2 != 0) {
            throw new NotEvenNumberException();
        }
    } catch (NotEvenNumberException $nene) {
        echo(""Error Message: "" . $nene-&gt;error_message());
    }
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Error Message: even_number must be an even number!</code>
</pre>
<p>As expected, because the value for <code>$even_number</code> wasn't actually an even number, we threw our custom exception, <code>NotEvenNumberException</code>. Then inside our <code>catch</code> block we are watching for any <code>NotEvenNumberException</code> that are thrown, and once one was, our <code>$nene</code> object had access to the custom function we defined, <code>error_message()</code>.</p>
<h2 id=""global-exception-handlers"">Global Exception Handlers</h2>
<p>You can set a global exception handler to catch any exceptions that aren't caught by other parts of your code. This is useful because it allows you to ensure that at least some code will run if an exception is thrown.</p>
<pre class=""pre__block"">	<code class=""language-php"">&lt;?php
    function customExceptionHandler($exception) {
        echo('Exception Message: ' . $exception-&gt;getMessage());
    }

    set_exception_handler('customExceptionHandler');

    throw new Exception('A random exception!');
    echo('hi!');
?&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">Exception Message: A random exception!</code>
</pre>
<p>Notice how you didn't see the <code>echo</code> function execute? Because we still didn't catch the exception, the script still terminated. The script will only continue to execute after an exception is thrown if the exception is caught using a try-catch block like the ones shown before.</p>
<p>We hope this lesson has helped you become familiar with exceptions in PHP, how to catch them, and what to do once you've caught one!</p>



",0,"standard","lesson"
"PHP-Conclusion and Wrap Up","php-conclusion-and-wrap-up","This lesson is the last lesson of the Getting Started with PHP class and serves as the conclusion of the class.","DRAFT","<p><strong>Congratulations on making it to the end of this class on PHP!</strong></p>
<p>PHP is extremely versatile and flexible, and powers millions of websites on the internet, and with this class completed, you can now go off and create dynamic and sophisticated web applications.</p>
<p>Feel free to leave a comment below if you have any questions or comments on any of the lessons in this class, you will receive a response!</p>
<p>Thank you for your time and I hope you have learned quite a bit!</p>
<p>If you've enjoyed this class, do make sure to share this on Facebook, Twitter, LinkedIn or anywhere! It helps us grow and allows for more people to enjoy this as well! ??????</p>
<figure>
<img alt=""This is you right now, admit it."" height=""534"" loading=""lazy"" src=""https://sabe.io/classes/php/conclusion/happy-coders.png"" width=""800""/>
<figcaption>This is you right now, admit it.</figcaption>
</figure>



",0,"standard","lesson"
"CSS-Introduction to CSS","css-introduction-to-css","Get introduced to the world of CSS and get setup so you are ready to begin styling your HTML documents.","DRAFT","<p>CSS exists for one reason and one reason only: to make your pages look all <strong>nice and pretty</strong>.</p>
<p>CSS, standing for <strong>Cascading Style Sheets</strong>, is how you tell your browser how to display and style the page. This includes how to layout the page, the color of text, how big the font size is, and much more. Without CSS, the browser would just render HTML documents with the default styles on, but with CSS, <strong>we can create magic</strong>.</p>
<h2 id=""prerequisites"">Prerequisites</h2>
<ol>
<li>Intermediate knowledge of HTML, which you can learn from this class on HTML.</li>
<li>A desire to learn CSS and some design.</li>
</ol>

<h2 id=""selecting-a-text-editor"">Selecting a Text Editor</h2>
<p>Any editor works, however we recommend using <a href=""https://code.visualstudio.com/"" rel=""noopener"" target=""_blank"">Visual Studio Code</a>. It will run on the operating system you are currently running on, and the syntax highlighting makes writing CSS really painless.</p>
<figure>
<img alt=""Visual Studio Code"" height=""601"" loading=""lazy"" src=""https://sabe.io/classes/css/introduction/visual-studio-code.png"" width=""800""/>
<figcaption>Visual Studio Code</figcaption>
</figure>
<h2 id=""basic-setup"">Basic Setup</h2>
<p>Create a brand new file in your editor, and put this in:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Intro to CSS&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;I am a header.&lt;/h1&gt;
        &lt;h2&gt;I am a subheader.&lt;/h2&gt;
        &lt;p&gt;I am a paragraph.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>Save this as <code>index.html</code> and if you did this step correctly, open it with your browser and you should see this:</p>
<figure>
<img alt=""Unstyled HTML document."" height=""310"" loading=""lazy"" src=""https://sabe.io/classes/css/introduction/basic-setup.png"" width=""466""/>
<figcaption>Unstyled HTML document.</figcaption>
</figure>
<p>If so, congratulations, you are ready to learn CSS!</p>



",0,"standard","lesson"
"CSS-Adding CSS Styles to your Page","css-adding-css-styles-to-your-page","Learn the many different ways in which you can apply CSS styles to your HTML, including with external, internal and inline styles.","DRAFT","<p>So you might be wondering? How do you apply styles to HTML? When you want to apply styles to your HTML markup, there are three different ways to go about it, each with their pros and cons. Let's go through each one.</p>
<h2 id=""inline-styles"">Inline Styles</h2>
<p><strong>Inline styles</strong> are styles that are within the lines of HTML. To style an HTML tag, you use the <code>style</code> attribute, with the value being your CSS.</p>
<p>In our setup example, let's say we wanted our header <code>h1</code> to be blue. Here's how you would do that inline:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Applying CSS Styles&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1 style=""color: blue;""&gt;I am a blue header.&lt;/h1&gt;
        &lt;h2&gt;I am a subheader.&lt;/h2&gt;
        &lt;p&gt;I am a paragraph.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Example of inline styles."" height=""310"" loading=""lazy"" src=""https://sabe.io/classes/css/applying-css-styles/inline-styles.png"" width=""466""/>
<figcaption>Example of inline styles.</figcaption>
</figure>
<p>Inline styles are great for styling elements that are within the HTML markup, but they are not as powerful or flexible as other methods of applying CSS styles.</p>

<h2 id=""internal-styles"">Internal Styles</h2>
<p><strong>Internal styles</strong> are styles placed in the <code>head</code> tag and are applied to the entire page. Unlike inline styles which only affect the element they are placed on, internal styles have the potential to affect multiple elements.</p>
<p>Creating your own internal styles is as easy as placing a <code>style</code> tag inside your <code>head</code> tag, and then placing your styles inside that. Let's say you wanted to make the text inside <code>h2</code> tags green, you can do this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Applying CSS Styles&lt;/title&gt;
        &lt;style&gt;
            h2 {
                color: green;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1 style=""color: blue;""&gt;I am a blue header.&lt;/h1&gt;
        &lt;h2&gt;I am a green subheader.&lt;/h2&gt;
        &lt;p&gt;I am a paragraph.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Example of internal styles."" height=""310"" loading=""lazy"" src=""https://sabe.io/classes/css/applying-css-styles/internal-styles.png"" width=""466""/>
<figcaption>Example of internal styles.</figcaption>
</figure>
<p>Internal styles are considered better than inline styles for the main reason that you can target multiple elements, instead of just one. Not to mention that they are separate. Internal styles are in the head tag and inline styles are mixed in directly with HTML.</p>
<p>Still, we want true separation, and the only way to achieve that is to have our styles in their own CSS file.</p>
<h2 id=""external-styles"">External Styles</h2>
<p><strong>External</strong> styles are exactly the same as internal styles except that they live in a separate file, as opposed to inside the same HTML file.</p>
<p>In the <strong>same</strong> folder as your <code>index.html</code> file, make a new file and save it as <code>styles.css</code>. If you wanted to make paragraphs red, put this inside <code>styles.css</code> and save.</p>
<pre class=""pre__block"">	<code class=""language-css"">p {
    color: red;
}</code>
</pre>
<p>Now we need to tell our HTML file to use this styles file. We do that by adding this line to our <code>head</code> tag:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;link rel=""stylesheet"" href=""styles.css""&gt;</code>
</pre>
<p>This tells our browser not only that this is a CSS file, but also where to look for it via the <code>href</code> attribute. Your HTML file should now look like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Applying CSS Styles&lt;/title&gt;
        &lt;link rel=""stylesheet"" href=""styles.css""&gt;
        &lt;style&gt;
            h2 {
                color: green;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1 style=""color: blue;""&gt;I am a blue header.&lt;/h1&gt;
        &lt;h2&gt;I am a green subheader.&lt;/h2&gt;
        &lt;p&gt;I am a red paragraph.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Example of external styles."" height=""310"" loading=""lazy"" src=""https://sabe.io/classes/css/applying-css-styles/external-styles.png"" width=""466""/>
<figcaption>Example of external styles.</figcaption>
</figure>
<p>With external styles, we keep our HTML and CSS <strong>separate</strong>. We can even work on them independently. If you added another paragraph, that one would also be red. In addition, if you added more styles to <code>styles.css</code>, you would see those changes if you refreshed. This is because the browser is looking for the styles in the <code>styles.css</code> file, and not the <code>index.html</code> file.</p>
<aside class=""aside__tip"">
<p>    Separating everything makes things easier to modify and is just good practice.</p>
</aside>

<h2 id=""cascading"">Cascading</h2>
<p>The ""C"" in CSS stands for <strong>cascading</strong>. Styles are said to <em>cascade</em> because they follow a specific <strong>hierarchy</strong>. We learned above three different ways to apply styles, but what if you tried to style the <strong>same element</strong> in each of three different ways?</p>
<p>The hierarchy that the browser will follow is external, internal, then inline. Technically speaking, all of the styles will apply, but only the inline styles will win in the end. There is one exception, however, and that is when you use the important rule.</p>
<h2 id=""important-rule"">Important Rule</h2>
<p>The <strong>important rule</strong> is an exception that you can apply to your styles that tells the browser ""make this CSS rule apply, no matter what"". It is generally frown upon to be used unless absolutely necessary because it violates the <strong>cascading</strong> nature of CSS.</p>
<p>To use the important rule, simply add <code>!important</code> at the end of your style:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;!important&lt;/title&gt;
        &lt;style&gt;
            .special h1 {
                color: red;
            }
            h1 {
                color: blue !important;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""special""&gt;
            &lt;h1&gt;I like bacon.&lt;/h1&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Example of using important in CSS."" height=""478"" loading=""lazy"" src=""https://sabe.io/classes/css/applying-css-styles/important.png"" width=""586""/>
<figcaption>Example of using important in CSS.</figcaption>
</figure>
<p>Even though we specified that we wanted all <code>h1</code> tags inside <code>special</code> classes be the color <code>red</code>, the text ended up being <code>blue</code> despite the selector being less <strong>specific</strong> because of the <code>!important</code> usage. This is because the <code>!important</code> rule overrides the less specific rule.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style"" rel=""noopener"" target=""_blank"">Style - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Selectors, Properties, and Values","css-selectors-properties-and-values","Selectors, Properties and Values are the core pillars of CSS and this lesson breaks it down for you.","DRAFT","<p>When you style your HTML page, you need to tell CSS where and how to apply those styles. After all, just because you want headers to be blue doesn't mean you also want paragraphs to be blue. You can select which elements you want styled a certain way using <strong>selectors</strong>. There are many different types of selectors. Let's go over each one.</p>
<h2 id=""tag-selectors"">Tag Selectors</h2>
<p>Tag selectors are used to select elements by their tag name. For example, to select all <code>&lt;p&gt;</code> elements, you would use the following selector:</p>
<pre class=""pre__block"">	<code class=""language-css"">p {
    color: red;
}</code>
</pre>
<p>Another example would be to select all <code>&lt;h1&gt;</code> elements:</p>
<pre class=""pre__block"">	<code class=""language-css"">h1 {
    color: red;
}</code>
</pre>

<h2 id=""class-selectors"">Class Selectors</h2>
<p>Class selectors are used to select elements by their class. For example, to select all elements with the <code>class=""planet""</code> class, you would use the following selector:</p>
<pre class=""pre__block"">	<code class=""language-css"">.planet {
    color: red;
}</code>
</pre>
<p>Class selectors start with a <code>.</code> and can be used in the same way as tag selectors.</p>
<h2 id=""id-selectors"">ID Selectors</h2>
<p>ID selectors are used to select elements by their ID. For example, to select an element with the ID <code>planet</code>, you would use the following selector:</p>
<pre class=""pre__block"">	<code class=""language-css"">#planet {
    color: red;
}</code>
</pre>
<p>ID selectors start with a <code>#</code> and can be used in the same way as tag selectors.</p>
<aside class=""aside__tip"">
<p>    Keep in mind that IDs are specific to a single element. If you want to style multiple elements with the same ID, you will need to use a class selector or tag selector.</p>
</aside>

<h2 id=""attribute-selectors"">Attribute Selectors</h2>
<p>HTML elements can have <strong>attributes</strong> on them. CSS provides a way to target those elements too. All you need to do is append the attribute inside square brackets. For example, to select all <code>a</code> elements with the <code>href</code> attribute, you would use the following selector:</p>
<pre class=""pre__block"">	<code class=""language-css"">a[href] {
    color: purple;
}</code>
</pre>
<p>This will turn all <code>a</code> tags that contain an <code>href</code> attribute the color purple, essentially targeting all links.</p>
<p>Now what if you want to target elements that contain a <strong>specific value</strong> for a certain attribute? Simply append the value of the attribute right next to it.</p>
<p>Let's say you want to target all number inputs:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;input type=""number""&gt;</code>
</pre>
<p>You can make your selector look like this:</p>
<pre class=""pre__block"">	<code class=""language-css"">input[type=""number""] {
    width: 10rem;
}</code>
</pre>
<p>Also feel free to target multiple attributes, like so:</p>
<pre class=""pre__block"">	<code class=""language-css"">input[type=""number""][data-role=""phone-number""] {
    width: 10rem;
}</code>
</pre>
<p>Attribute selectors are a powerful way to target elements because they can target elements with multiple attributes.</p>
<h2 id=""properties-and-values"">Properties and Values</h2>
<p>A single line of CSS consists of two things, a <strong>property</strong> and a <strong>value</strong>. Properties are the things that you want to style, and values are the things that you want to apply to those properties. An example of a CSS declaration would be:</p>
<pre class=""pre__block"">	<code class=""language-css"">color: black;</code>
</pre>
<p>The property here is <code>color</code> and the value is <code>black</code>.</p>

<h2 id=""lengths"">Lengths</h2>
<p>For so many CSS properties like <code>font-size</code>, <code>line-height</code>, <code>margin</code>, <code>padding</code>, just to name a few, you will have the option to give a value which represents a <strong>length</strong>.</p>
<p>A length can be expressed with a <strong>number</strong> followed by a unit, and you have the option of using absolute or relative units.</p>
<h3>Absolute Lengths</h3>
<p>Absolute lengths are those that do not change. These are all the absolute length units:</p>
<ul>
<li><strong>px</strong>: the unit for pixels</li>
<li><strong>pt</strong>: the unit for points</li>
<li><strong>cm</strong>: the unit for centimeters</li>
<li><strong>mm</strong>: the unit for millimeters</li>
<li><strong>in</strong>: the unit for inches</li>
<li><strong>pc</strong>: the unit for picas</li>
</ul>

<h3>Relative Lengths</h3>
<p>Relative lengths are lengths that change relative to something else. Here are all the units for relative lengths:</p>
<ul>
<li><strong>%</strong>: the unit for percentages</li>
<li><strong>em</strong>: relative to the current font size</li>
<li><strong>rem</strong>: relative to the current font size on the <code>html</code> element</li>
<li><strong>vw</strong>: relative to the width of the viewport divided by 100</li>
<li><strong>vh</strong>: relative to the height of the viewport divided by 100</li>
<li><strong>vmin</strong>: relative to the smaller viewport's dimension divided by 100</li>
<li><strong>vmax</strong>: relative to the larger viewport's dimension divided by 100</li>
<li><strong>ch</strong>: relative to 0</li>
<li><strong>ex</strong>: relative to the x-height of font</li>
</ul>
<p>In reality, you're only going to use a couple of these, like <code>px</code>, <code>rem</code> or <code>%</code>. This is a great tool to help you convert between some of the more popular units.</p>
<h2 id=""recap"">Recap</h2>
<p>Here is a quick refresher on some of the terms covered here:</p>
<p><strong>Selector</strong>: tells CSS <em>which</em> elements to style.</p>
<p><strong>Property</strong>: tells CSS <em>what</em> you are changing.</p>
<p><strong>Value</strong>: tells CSS to <em>how</em> you want that element to change.</p>
<figure>
<img alt=""Thumbs up to you!"" height=""480"" loading=""lazy"" src=""https://sabe.io/classes/css/selectors-properties-values/thumbs-up.png"" width=""800""/>
<figcaption>Thumbs up to you!</figcaption>
</figure>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors"" rel=""noopener"" target=""_blank"">CSS Selectors - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Colors","css-colors","Life isn't black and white, and your pages shouldn't be either. Learn how to add some color in this tutorial!","DRAFT","<p>Color is a huge part of web design and design in general. Being able to use color properly goes a long way. Thankfully, CSS has a lot of color options that we can use. Let's go over all the ways we can use color in CSS.</p>
<figure>
<img alt=""Aren't colors pretty?"" height=""533"" loading=""lazy"" src=""https://sabe.io/classes/css/color/paint-splatter.png"" width=""800""/>
<figcaption>Aren't colors pretty?</figcaption>
</figure>
<h2 id=""red-green-blue"">Red, Green, Blue</h2>
<p>The <code>rgb</code> format, shorthand for <code>red</code>, <code>green</code>, and <code>blue</code>, is a popular way to specify colors. This format is probably the easiest to understand because all you have to do is specify what proportion of each color you want.</p>
<p>You can either go <strong>percentage-based</strong>, meaning <code>0%</code> for none and <code>100%</code> for all, or you can go <strong>byte-based</strong>, meaning <code>0</code> is for none and <code>255</code> is for all.</p>
<p>For example, if you wanted full-blown blue as your page's background color, you would set red and green to 0, but leave the last value at max, like so:</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    background-color: rgb(0, 0, 255);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>Or if you wanted purple, you could specify half red and half blue, like so:</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    background-color: rgb(50%, 0, 50%);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<h2 id=""hexadecimal-value"">Hexadecimal Value</h2>
<p>You can use a color's <strong>hex value</strong>. To declare a hex value, you first start with a hash symbol, followed by six digits in <strong>base-16</strong>.</p>
<p>In base-16, the lowest digit is <strong>0</strong> and the highest is <strong>F</strong>, where each color is given two digits each. With hex values, if you wanted full-blown green, it would look like this:</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    background-color: #00FF00;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<h2 id=""hue-saturation-lightness-value"">Hue, Saturation, Lightness Value</h2>
<p>Another way to declare a color is to specify its hue, saturation and lightness. If you've ever used a color wheel:</p>
<figure>
<img alt=""A color wheel with colors for days."" height=""310"" loading=""lazy"" src=""https://sabe.io/classes/css/color/color-wheel.png"" width=""309""/>
<figcaption>A color wheel with colors for days.</figcaption>
</figure>
<p>You can think of the <strong>hue</strong> as the degree, 0 to 360, on that wheel. On the wheel, 0 degrees is red, 120 degrees is green and 240 degrees is blue.</p>
<p>The <strong>saturation</strong> is a percentage describing how much color there should be. 0% would be a shade of gray whereas 100% is the full color.</p>
<p>The <strong>lightness</strong> is another percentage describing how light or dark the color should be, with 0% being black and 100% being white.</p>
<p>Here is an example of light green, using <code>hsl</code>:</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    background-color: hsl(120, 100%, 75%);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<h2 id=""alpha-transparency"">Alpha Transparency</h2>
<p>CSS allows you to define colors that have an <strong>alpha</strong>, which basically means how <strong>transparent</strong> the color will be. This is a percentage, 0% is completely transparent and 100% is completely opaque, with the default being 100%. For example, if you wanted a semi-transparent green, you would set the alpha to 50%:</p>
<h3>Red, Green, Blue, Alpha Value</h3>
<p>You can define an alpha with the <code>rgba</code> format, which is shorthand for <code>red</code>, <code>green</code>, <code>blue</code> and <code>alpha</code>. Instead of <strong>three</strong> numbers defining how much red, green and blue is in the color, you now can use a <strong>fourth</strong> number to define the alpha, like so:</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    background-color: rgba(255, 0, 255, 0.5);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>The alpha is a value between 0 (entirely opaque) and 1 (entirely transparent), so <code>0.5</code> is equivalent to 50%.</p>

<h3>Hue, Saturation, Lightness, Alpha Value</h3>
<p>You can also define an alpha with the <code>hsla</code> format, which is shorthand for <code>hue</code>, <code>saturation</code> and <code>lightness</code> and <code>alpha</code>. Instead of <strong>three</strong> numbers defining how much hue, saturation and lightness is in the color, you now can use a <strong>fourth</strong> number to define the alpha. Below is an example usage:</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    background-color: hsla(25, 40%, 85%, 0.7);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>How cool is that? In our next lesson, we discuss how to work with <strong>fonts</strong> and <strong>text</strong>.</p>

<ul>
<li>Color picker tool</li>
</ul>



",0,"standard","lesson"
"CSS-Fonts and Text","css-fonts-and-text","CSS offers many ways to change the look and feel of text. Learn how to do so in this lesson on fonts and text.","DRAFT","<p>CSS offers <strong>plenty</strong> of ways to change the look and feel of any text displayed on your screen. Fonts and text can be customized to match your brand, to match your website's design, or to match your company's branding. Let's look at some of the ways you can use CSS to change the look and feel of your text.</p>
<h2 id=""comments"">Comments</h2>
<p>While technically not part of styling text, it is useful to know how to write comments in CSS. The browser will ignore any text that is commented out, even if it is otherwise valid CSS. Comments can be used to explain what the code does, or to explain why the code is not working.</p>

<h3>Single Line Comments</h3>
<p>For single line comments, just prepend your comment with <code>/*</code> and append with <code>*/</code>, like so:</p>
<pre class=""pre__block"">	<code class=""language-css"">body {
      background-color: red;
      /* I'm a comment */
}</code>
</pre>
<h3>Multiple Line Comments</h3>
<p>For comments spanning multiple lines, simply do the same as before and prepend the comment with <code>/*</code> and append with <code>*/</code>. Everything in between that will be commented out and ignored.</p>
<p>Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-css"">body {
      background-color: red;
      /* I'm
       a
       comment
    */
}</code>
</pre>

<h2 id=""font-family"">Font Family</h2>
<p>To change the font that is used to render text, you specify it using the <code>font-family</code> property. The value of this property is a list of font names, separated by commas.</p>
<pre class=""pre__block"">	<code class=""language-css"">body {
      font-family: ""Times New Roman"";
}</code>
</pre>
<p>CSS allows you to specify fallback fonts in case your user did not have the font you originally specified. For example, if you wanted to use the <code>Arial</code> font followed by a <code>serif</code> font as a backup, it would look like this:</p>
<pre class=""pre__block"">	<code class=""language-css"">body {
      font-family: ""Arial"", serif;
}</code>
</pre>
<p>Here is a list of fonts that are generally deemed safe to use on the web, also known as <strong>web safe fonts</strong>.</p>
<ul>
<li>Arial</li>
<li>Helvetica</li>
<li>Times New Roman</li>
<li>Times</li>
<li>Courier New</li>
<li>Courier</li>
<li>Verdana</li>
<li>Georgia</li>
<li>Palatino</li>
<li>Garamond</li>
<li>Bookman</li>
<li>Comic Sans MS</li>
<li>Trebuchet MS</li>
<li>Arial Black</li>
<li>Impact</li>
</ul>
<p>Web safe fonts are generally used as fallback fonts for browsers that do not support the font you want to use.</p>
<h2 id=""font-weight"">Font Weight</h2>
<p>You can give fonts <strong>weight</strong> using the <code>font-weight</code> property. The value of this property is a number between 100 and 900, where 400 is normal, 700 is bold, and 900 is heaviest. The default value is 400.  The following is a list of all the valid values for a font's weight.</p>
<ul>
<li>100</li>
<li>200</li>
<li>300</li>
<li>400 or normal</li>
<li>500</li>
<li>600</li>
<li>700 or bold</li>
<li>800</li>
<li>900</li>
</ul>
<aside class=""aside__tip"">
<p>    The higher the number, the thicker the text will be!</p>
</aside>

<h2 id=""font-style"">Font Style</h2>
<p>Your text can be rendered with a certain <strong>style</strong> if you change the <code>font-style</code> property. While you usually want it set to <code>normal</code>, you also have two additional values, <code>italic</code> and <code>oblique</code>. These values are used to render text in a slanted or oblique style.</p>
<figure>
<img alt=""All of the font styles."" height=""247"" loading=""lazy"" src=""https://sabe.io/classes/css/fonts-text/font-styles.png"" width=""437""/>
<figcaption>All of the font styles.</figcaption>
</figure>
<h2 id=""text-transform"">Text Transform</h2>
<p>You can use <code>text-transform</code> to change the cases of the text. The following is a list of all the valid values for this property.</p>
<ul>
<li><code>capitalize</code>: This capitalizes the first letter in every word.</li>
<li><code>uppercase</code>: This capitalizes every letter.</li>
<li><code>lowercase</code>: This lowercases every letter.</li>
<li><code>none</code>: This applies no effect to the text.</li>
</ul>
<figure>
<img alt=""All of the text transforms."" height=""247"" loading=""lazy"" src=""https://sabe.io/classes/css/fonts-text/text-transforms.png"" width=""437""/>
<figcaption>All of the text transforms.</figcaption>
</figure>

<h2 id=""text-decoration"">Text Decoration</h2>
<p>You can use <code>text-decoration</code> to change the decoration of the text. The following is a list of all the valid values for this property.</p>
<ul>
<li><code>underline</code>: This adds a line under the text.</li>
<li><code>overline</code>: This adds a line over the text.</li>
<li><code>line-through</code>: This puts a line directly through the text.</li>
<li><code>none</code>: This removes any decoration effects.</li>
</ul>
<figure>
<img alt=""All of the text decorations."" height=""247"" loading=""lazy"" src=""https://sabe.io/classes/css/fonts-text/text-decorations.png"" width=""437""/>
<figcaption>All of the text decorations.</figcaption>
</figure>
<h3>Text Decoration Style</h3>
<p>In addition, you can also apply a style to your text decoration. The values for <code>text-decoration-style</code> can be found below:</p>
<ul>
<li><code>solid</code>: This is the default.</li>
<li><code>wavy</code>: A wavy line.</li>
<li><code>double</code>: Two solid lines.</li>
<li><code>dotted</code>: A dotted line.</li>
<li><code>dashed</code>: A dashed line.</li>
</ul>
<p>If you apply these styles:</p>
<pre class=""pre__block"">	<code class=""language-css"">h2 {
    text-decoration: underline;
}

.solid {
    text-decoration-style: solid;
}

.wavy {
    text-decoration-style: wavy;
}

.double {
    text-decoration-style: double;
}

.dotted {
    text-decoration-style: dotted;
}

.dashed {
    text-decoration-style: dashed;
}</code>
</pre>
<p>to this markup:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;h2 class=""solid""&gt;I have a solid line.&lt;/h2&gt;
&lt;h2 class=""wavy""&gt;I have wavy line.&lt;/h2&gt;
&lt;h2 class=""double""&gt;I have two lines.&lt;/h2&gt;
&lt;h2 class=""dotted""&gt;I have a dotted line.&lt;/h2&gt;
&lt;h2 class=""dashed""&gt;I have a dashed line.&lt;/h2&gt;</code>
</pre>
<p>You'll get this:</p>
<figure>
<img alt=""All of the text decoration styles."" height=""373"" loading=""lazy"" src=""https://sabe.io/classes/css/fonts-text/text-decoration-styles.png"" width=""485""/>
<figcaption>All of the text decoration styles.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><h2 class=""solid"">I have a solid line.</h2>
<h2 class=""wavy"">I have wavy line.</h2>
<h2 class=""double"">I have two lines.</h2>
<h2 class=""dotted"">I have a dotted line.</h2>
<h2 class=""dashed"">I have a dashed line.</h2></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">h2 {
    text-decoration: underline;
}

.solid {
    text-decoration-style: solid;
}

.wavy {
    text-decoration-style: wavy;
}

.double {
    text-decoration-style: double;
}

.dotted {
    text-decoration-style: dotted;
}

.dashed {
    text-decoration-style: dashed;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<h2 id=""text-shadows"">Text Shadows</h2>
<p>You can apply a shadow effect to text by using the <code>text-shadow</code> property. To declare it, you need to give it <strong>two values</strong> with an optional <strong>two more</strong>.</p>
<p>The first and second value is the <strong>horizontal</strong> and <strong>vertical</strong> offset from the text that you want the shadow.</p>
<p>The third and fourth optional values is the <strong>blur radius</strong> and the <strong>color</strong> of the shadow. Without a color, it will render as the same color as the text, and without a blur radius, it will be just as sharp as the text.</p>
<pre class=""pre__block"">	<code class=""language-css"">h1 {
    text-shadow: -4px 4px 4px red;
}</code>
</pre>
<figure>
<img alt=""Example of text shadow."" height=""266"" loading=""lazy"" src=""https://sabe.io/classes/css/fonts-text/text-shadow.png"" width=""433""/>
<figcaption>Example of text shadow.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><h1>Look at this shadow!</h1></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">h1 {
    text-shadow: -4px 4px 4px red;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<h2 id=""text-spacing"">Text Spacing</h2>
<p>There are three main ways to control the spacing around and between text.</p>

<h3>Line Height</h3>
<p>When you want to change the height of the lines, use the <code>line-height</code> property. Since this adjusts the height of a line of text, when lines are stacked, this basically increases or decreases the spacing between those lines.</p>
<p>The value will be a percentage, a length in any unit, or <code>normal</code>. The default value is <code>normal</code>.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;p class=""a""&gt;I have 1rem of line height.&lt;/p&gt;
&lt;p class=""b""&gt;I have 3rem of line height.&lt;/p&gt;
&lt;p class=""c""&gt;I have 10rem of line height.&lt;/p&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">p {
    background-color: lightblue;
    margin: 0;
    border: solid 1px blue;
}

.a {
    line-height: 1rem;
}

.b {
    line-height: 3rem;
}

.c {
    line-height: 10rem;
}</code>
</pre>
<figure>
<img alt=""Example of different line heights."" height=""372"" loading=""lazy"" src=""https://sabe.io/classes/css/fonts-text/line-height.png"" width=""445""/>
<figcaption>Example of different line heights.</figcaption>
</figure>
<h3>Letter Spacing</h3>
<p>If you want to change how much space is between individual letters, use the <code>letter-spacing</code> property. The value will be a length in any unit. The default value is <code>normal</code>. The value can also be negative.</p>
<pre class=""pre__block"">	<code class=""language-css"">p {
    letter-spacing: 0;
    letter-spacing: 2px;
    letter-spacing: 4px;
}</code>
</pre>
<figure>
<img alt=""Example of letter spacing."" height=""247"" loading=""lazy"" src=""https://sabe.io/classes/css/fonts-text/letter-spacing.png"" width=""437""/>
<figcaption>Example of letter spacing.</figcaption>
</figure>

<h3>Word Spacing</h3>
<p>Word spacing is similar to letter spacing, except that the space you're adjusting is between the <strong>words</strong> instead of the letters. You declare this with the <code>word-spacing</code> property. The value will be a length in any unit. The default value is <code>normal</code>. The value can also be negative.</p>
<pre class=""pre__block"">	<code class=""language-css"">p {
    word-spacing: 0;
    word-spacing: 6px;
    word-spacing: 12px;
}</code>
</pre>
<figure>
<img alt=""Example of word spacing."" height=""247"" loading=""lazy"" src=""https://sabe.io/classes/css/fonts-text/word-spacing.png"" width=""437""/>
<figcaption>Example of word spacing.</figcaption>
</figure>
<h2 id=""text-layout"">Text Layout</h2>
<p>When it comes to basic layout of text, you have two properties at your disposal.</p>

<h3>Text Alignment</h3>
<p>You can align text inside an element to the left, right or center, by using the <code>text-align</code> property. The default value is <code>left</code>.</p>
<pre class=""pre__block"">	<code class=""language-css"">p {
    text-align: left;
    text-align: center;
    text-align: right;
}</code>
</pre>
<figure>
<img alt=""Example of text alignment."" height=""247"" loading=""lazy"" src=""https://sabe.io/classes/css/fonts-text/text-alignment.png"" width=""476""/>
<figcaption>Example of text alignment.</figcaption>
</figure>
<h3>Text Indentation</h3>
<p>Additionally, you may indent the first line of a paragraph by any specified length you want by using the <code>text-indent</code> property, like so:</p>
<pre class=""pre__block"">	<code class=""language-css"">p {
    text-indent: 2rem;
}</code>
</pre>
<figure>
<img alt=""Example of text indentation."" height=""266"" loading=""lazy"" src=""https://sabe.io/classes/css/fonts-text/text-indentation.png"" width=""433""/>
<figcaption>Example of text indentation.</figcaption>
</figure>
<p>Text indentation is a property that affects the first line of a paragraph. It is not a property of the whole paragraph, but only the first line.</p>


<ul>
<li><a href=""https://fonts.google.com"" rel=""noopener"" target=""_blank"">Google Fonts</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/font"" rel=""noopener"" target=""_blank"">Fonts - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Backgrounds","css-backgrounds","Adding background colors and images is a great way to improve the way a page looks. Learn how to do that in this lesson!","DRAFT","

<p>A pretty easy and fast way to add a bit of flavor to your pages is to give it a background of some kind. Whether that background is a color, an image, or a gradient, a background makes a big difference in how your website looks. The two main way to change the background of your website is to change the background color or background image. We'll cover both of these below.</p>
<h2 id=""background-color"">Background Color</h2>
<p>This is the easiest way to change your page's background color from the default white. You just pick a color with <code>background-color</code> and let the browser do the rest like this:</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    background-color: lightgray;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""Example of background color."" height=""270"" loading=""lazy"" src=""https://sabe.io/classes/css/backgrounds/background-color.png"" width=""437""/>
<figcaption>Example of background color.</figcaption>
</figure>
<p>You can replace <code>light-gray</code> with any color, and it will also work just fine. Examples of web safe colors include <code>red</code>, <code>green</code>, <code>blue</code>, <code>yellow</code>, <code>purple</code>, <code>orange</code>, <code>pink</code>, <code>brown</code>, <code>black</code>, <code>white</code>, and <code>gray</code>.</p>

<h2 id=""background-image"">Background Image</h2>
<p>When you want to use an image instead of color for your background, you can use the <code>background-image</code> property. This property takes a URL to an image, and the browser will use that image as the background.</p>
<p>Let's say you want this image as your background:</p>
<figure>
<img alt=""A cute puppy."" height=""640"" loading=""lazy"" src=""https://sabe.io/classes/css/backgrounds/puppy.png"" width=""800""/>
<figcaption>A cute puppy.</figcaption>
</figure>
<p>The CSS might look like this:</p>
<pre class=""pre__block"">	<code class=""language-css"">body {
    background: url(""puppy.png"");
}</code>
</pre>
<p>And your page like this:</p>
<figure>
<img alt=""A cute puppy as your background image."" height=""868"" loading=""lazy"" src=""https://sabe.io/classes/css/backgrounds/background-image.png"" width=""982""/>
<figcaption>A cute puppy as your background image.</figcaption>
</figure>
<h2 id=""background-image-repetition"">Background Image Repetition</h2>
<p>For images where you might want to <strong>repeat</strong> it over and over again as the background, you can specify just that. The property for this is <code>background-repeat</code> and below are the valid values for this:</p>
<ol>
<li><code>repeat</code>: This repeats the image both on the x and the y-axis.</li>
<li><code>repeat-x</code>: This repeats the image on the y-axis.</li>
<li><code>repeat-y</code>: This repeats the image on the x-axis.</li>
<li><code>no-repeat</code>: This renders a single image without any repetition.</li>
</ol>
<p>Background images can be repeated in any of the four directions, so you can use this to make a background image that repeats in both the x and y-axis.</p>

<h2 id=""background-image-position"">Background Image Position</h2>
<p>In case you don't want your background image to repeat, perhaps you then want to control <strong>where on the screen</strong> it will be rendered. By default, it will render from the top left corner, but you can specify otherwise using the <code>background-position</code> property. The property takes two values, the first is the x-axis and the second is the y-axis.</p>
<p>The main values for this property are <code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>center</code>, but you can also use lengths in the form of <code>background-position: x y;</code>.</p>
<p>Below are some valid values for <code>background-position</code>:</p>
<pre class=""pre__block"">	<code class=""language-css"">body {
    background-position: 40% 70%;
    background-position: right top;
    background-position: left center;
    background-position: right bottom;
    background-position: 2rem 5rem;
}</code>
</pre>
<h2 id=""background-image-size"">Background Image Size</h2>
<p>Let's say you want to change the <strong>size</strong> of your background image. Use the <code>background-size</code> CSS property for this.</p>
<p>You are free to give it a new width and height to set the image to, like so:</p>
<pre class=""pre__block"">	<code class=""language-css"">body {
    background-size: 250px 300px;
    background-size: 70% 90%;
}</code>
</pre>
<p>In the common case where you want the image to stretch and take up the entire window while respecting the image's ratio, you can use the <code>cover</code> value:</p>
<pre class=""pre__block"">	<code class=""language-css"">body {
    background-size: cover;
}</code>
</pre>
<aside class=""aside__tip"">
<p>    Keep in mind that this will crop some of the width or height, as the browser tries to cover the entire container while maintaining the same ratio. If you want the image to be fully visible no matter what, set <code>background-size</code> to <code>contain</code>.</p>
</aside>

<h2 id=""gradients"">Gradients</h2>
<p>When you don't want to use a solid color, using <strong>gradients</strong> is a simple way to use multiple colors on your page while allowing the browser to render all the colors in between.</p>
<h2 id=""linear-gradients"">Linear Gradients</h2>
<p>The most simple of gradients are <strong>linear gradients</strong>. For example, here is a basic blue to purple gradient:</p>
<pre class=""pre__block"">	<code class=""language-css"">body {
    background: linear-gradient(blue, purple);
}</code>
</pre>
<figure>
<img alt=""A blue to purple linear gradient."" height=""408"" loading=""lazy"" src=""https://sabe.io/classes/css/backgrounds/linear-gradient.png"" width=""577""/>
<figcaption>A blue to purple linear gradient.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    background: linear-gradient(blue, purple);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>If you don't want your linear gradients to go from top to bottom, you can assign a direction value. If you give the property a <strong>degrees</strong> value, it will render it at that angle.</p>
<p>Here is how it looks like when you render at a 90-degree angle:</p>
<pre class=""pre__block"">	<code class=""language-css"">body {
    background: linear-gradient(90deg, blue, purple);
}</code>
</pre>
<figure>
<img alt=""A blue to purple angled linear gradient."" height=""408"" loading=""lazy"" src=""https://sabe.io/classes/css/backgrounds/angled-linear-gradient.png"" width=""577""/>
<figcaption>A blue to purple angled linear gradient.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    background: linear-gradient(90deg, blue, purple);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<h2 id=""radial-gradients"">Radial Gradients</h2>
<p>Gradients can also be used to create <strong>radial gradients</strong>. Radial gradients are similar to linear gradients, but instead of using two colors, you can use a single color and a <strong>radius</strong>. Radial gradients are rendered in the form of a circle. To demonstrate, here is a radial gradient using the same colors as before:</p>
<pre class=""pre__block"">	<code class=""language-css"">body {
    background: radial-gradient(blue, purple);
}</code>
</pre>
<figure>
<img alt=""A blue to purple radial gradient."" height=""408"" loading=""lazy"" src=""https://sabe.io/classes/css/backgrounds/radial-gradient.png"" width=""577""/>
<figcaption>A blue to purple radial gradient.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    background: radial-gradient(blue, purple);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>When done right, gradients can be a very tasteful way to spruce up your page! You can use the <code>background-size</code> property to control the size of the gradient and the <code>background-position</code> property to control where it is rendered.</p>
<h2 id=""further-reading"">Further Reading</h2>
<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients"" rel=""noopener"" target=""_blank"">Using CSS Gradients - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Applying CSS Filters","css-applying-css-filters","Filters are a simple yet powerful tool at your disposal to apply awesome visual effects on elements.","DRAFT","

<p>The CSS <code>filter</code> property lets you apply various different visual effects on elements such as images, backgrounds and borders. It is similar to the filters featured in Photoshop or Instagram where you can alter the appearance of an image completely simply by apply a filter on it. CSS gives us a way to accomplish the same effects natively in the browser.</p>
<h2 id=""css-filters"">CSS Filters</h2>
<p>Before we look at examples of each filter, let's look at the syntax for it:</p>
<pre class=""pre__block"">	<code class=""language-css"">.filter {
    filter: function(value);
}</code>
</pre>
<p>In the above, <code>function</code> is the name of the function you want applied and <code>value</code> is how strongly or weakly you want the effect to be applied. You can also apply <strong>multiple filters</strong> by separating the functions with a space:</p>
<pre class=""pre__block"">	<code class=""language-css"">.filter {
    filter: function1(value1) function2(value2);
}</code>
</pre>
<p>Here are all the filters we will go over (with examples):</p>
<ul>
<li><code>blur()</code></li>
<li><code>brightness()</code></li>
<li><code>contrast()</code></li>
<li><code>drop-shadow()</code></li>
<li><code>grayscale()</code></li>
<li><code>hue-rotate()</code></li>
<li><code>invert()</code></li>
<li><code>opacity()</code></li>
<li><code>saturate()</code></li>
<li><code>sepia()</code></li>
</ul>
<p>We will be applying the effects on this example unedited picture for comparison:</p>
<figure>
<img alt=""Yosemite National Park."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/yosemite-national-park.png"" width=""700""/>
<figcaption>Yosemite National Park.</figcaption>
</figure>

<h2 id=""blur"">Blur</h2>
<p>The <code>blur()</code> function applies a Gaussian blur where the value is radius to be used to blend the pixels together on the screen. The higher the value, the stronger the blur. The default value is <code>0</code> and recommended unit is <code>px</code>.</p>
<pre class=""pre__block"">	<code class=""language-css"">.blur {
    filter: blur(2px);
}</code>
</pre>
<figure>
<img alt=""The blur CSS filter effect."" height=""469"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/blur.png"" width=""702""/>
<figcaption>The blur CSS filter effect.</figcaption>
</figure>
<h2 id=""brightness"">Brightness</h2>
<p>The <code>brightness()</code> function adjusts the brightness of an element by multiplying its red, blue and green values. The value you provide is the percentage. Since we are doing multiplication, a value of <code>100%</code> leads to an unchanged element, a value of <code>0%</code> leads to an element that is completely black, while a number greater than <code>100%</code> will result in a brighter element. The default value is <code>100%</code>.</p>
<pre class=""pre__block"">	<code class=""language-css"">.brightness {
    filter: brightness(25%);
}</code>
</pre>
<figure>
<img alt=""The brightness CSS filter effect at 25%."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/brightness-1.png"" width=""700""/>
<figcaption>The brightness CSS filter effect at 25%.</figcaption>
</figure>
<pre class=""pre__block"">	<code class=""language-css"">.brightness {
    filter: brightness(140%);
}</code>
</pre>
<figure>
<img alt=""The brightness CSS filter effect at 140%."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/brightness-2.png"" width=""700""/>
<figcaption>The brightness CSS filter effect at 140%.</figcaption>
</figure>

<h2 id=""contrast"">Contrast</h2>
<p>The <code>contrast()</code> function adjusts the contrast of the element. Similar to how <code>brightness()</code> works, the value is a percentage defining how strongly to apply the effect. With a value of <code>0%</code>, the element is completely black, with <code>100%</code>, it is completely unchanged, and anything higher than <code>100%</code> makes it more contrasted. The default value is <code>100%</code>.</p>
<pre class=""pre__block"">	<code class=""language-css"">.contrast {
    filter: contrast(50%);
}</code>
</pre>
<figure>
<img alt=""The contrast CSS filter effect at 50%."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/contrast-1.png"" width=""700""/>
<figcaption>The contrast CSS filter effect at 50%.</figcaption>
</figure>
<pre class=""pre__block"">	<code class=""language-css"">.contrast {
    filter: contrast(150%);
}</code>
</pre>
<figure>
<img alt=""The contrast CSS filter effect at 150%."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/contrast-2.png"" width=""700""/>
<figcaption>The contrast CSS filter effect at 150%.</figcaption>
</figure>
<h2 id=""drop-shadow"">Drop Shadow</h2>
<p>The <code>drop-shadow()</code> function creates a shadow of an image even if it has transparency. This means that even if your image is square, it will only render a shadow under the portions you can actually see. The value is a string of the form <code>(length) (length) (length) (color)</code>. The first two values are the horizontal and vertical offset of the shadow, and the last value is the color of the shadow.</p>
<p>Because it is slightly more complex than the previous filters we have seen, it's syntax is also different:</p>
<p><code>filter: drop-shadow(x, y, blur, color);</code></p>
<ul>
<li>x: How much the X-axis to offset the shadow.</li>
<li>y: How much the Y-axis to offset the shadow.</li>
<li>blur: How large is the radius used to blend pixels together.</li>
<li>color: The color to draw the shadow.</li>
</ul>
<aside class=""aside__tip"">
<p>    Only <code>x</code> and <code>y</code> are required.</p>
</aside>
<pre class=""pre__block"">	<code class=""language-css"">.drop-shadow {
    filter: drop-shadow(0.5rem 0.5rem 1rem red);
}</code>
</pre>
<figure>
<img alt=""The drop shadow CSS filter effect."" height=""500"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/drop-shadow.png"" width=""732""/>
<figcaption>The drop shadow CSS filter effect.</figcaption>
</figure>

<h2 id=""grayscale"">Grayscale</h2>
<p>The <code>grayscale()</code> function is used to convert an image to grayscale, with the percent determining how strongly. A value of <code>0</code> leaves it unchanged whereas any higher brings the element closer to being completely grayscale, which happens when the value is set to <code>1</code>. The default value is <code>0</code>.</p>
<pre class=""pre__block"">	<code class=""language-css"">.grayscale {
    filter: grayscale(0.8);
}</code>
</pre>
<figure>
<img alt=""The grayscale CSS filter effect."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/grayscale.png"" width=""700""/>
<figcaption>The grayscale CSS filter effect.</figcaption>
</figure>
<h2 id=""hue-rotate"">Hue Rotate</h2>
<p>The <code>hue-rotate()</code> function is an interesting property. This function lets you rotate the colors on the element around a color wheel. The value you provide it is the degrees around the wheel you'd like to rotate the colors. Naturally, if you pass it <code>0deg</code>, it will remain unchanged, same as with <code>360deg</code>, the maximum allowed value. Anything in between will cause the colors to rotate, changing the way it appears. The default value is <code>0deg</code>.</p>
<pre class=""pre__block"">	<code class=""language-css"">.hue-rotate {
    filter: hue-rotate(60deg);
}</code>
</pre>
<figure>
<img alt=""The hue-rotate CSS filter effect."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/hue-rotate.png"" width=""700""/>
<figcaption>The hue-rotate CSS filter effect.</figcaption>
</figure>

<h2 id=""invert"">Invert</h2>
<p>The <code>invert()</code> function works as you would expect. It applies an inverting effect, with the value defining how strong the effect should be. At <code>0%</code>, it does nothing, and <code>100%</code> is completely inverted. The default value is <code>0%</code>.</p>
<pre class=""pre__block"">	<code class=""language-css"">.invert {
    filter: invert(80%);
}</code>
</pre>
<figure>
<img alt=""The invert CSS filter effect."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/invert.png"" width=""700""/>
<figcaption>The invert CSS filter effect.</figcaption>
</figure>
<h2 id=""opacity"">Opacity</h2>
<p>The <code>opacity()</code> function defines how opaque the element should be. A value of <code>0%</code> makes the element completely transparent while a value of <code>100%</code> leaves the element unchanged. The default value is <code>100%</code>.</p>
<pre class=""pre__block"">	<code class=""language-css"">.opacity {
    filter: opacity(70%);
}</code>
</pre>
<figure>
<img alt=""The opacity CSS filter effect."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/opacity.png"" width=""700""/>
<figcaption>The opacity CSS filter effect.</figcaption>
</figure>

<h2 id=""saturate"">Saturate</h2>
<p>The <code>saturate</code> function defines how much to saturate an element. A value of <code>0%</code> leaves the element completely unsaturated whereas a value of <code>100%</code> leaves it unchanged. To saturate an element, simply provide a value greater than <code>100%</code>. The default value is <code>100%</code>.</p>
<pre class=""pre__block"">	<code class=""language-css"">.saturate {
    filter: saturate(50%);
}</code>
</pre>
<figure>
<img alt=""The saturate CSS filter effect at 50%."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/saturate-1.png"" width=""700""/>
<figcaption>The saturate CSS filter effect at 50%.</figcaption>
</figure>
<pre class=""pre__block"">	<code class=""language-css"">.saturate {
    filter: saturate(150%);
}</code>
</pre>
<figure>
<img alt=""The saturate CSS filter effect at 150%."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/saturate-2.png"" width=""700""/>
<figcaption>The saturate CSS filter effect at 150%.</figcaption>
</figure>
<h2 id=""sepia"">Sepia</h2>
<p>The final function we'll look at is the <code>sepia()</code> function. It applies a sepia effect with the value defining how strongly. A value of <code>0%</code> leaves it unchanged and <code>100%</code> leaves it completely sepia. The default value is <code>0%</code>.</p>
<pre class=""pre__block"">	<code class=""language-css"">.sepia {
    filter: sepia(100%);
}</code>
</pre>
<figure>
<img alt=""The sepia CSS filter effect."" height=""467"" loading=""lazy"" src=""https://sabe.io/classes/css/filters/sepia.png"" width=""700""/>
<figcaption>The sepia CSS filter effect.</figcaption>
</figure>

<h2 id=""conclusion"">Conclusion</h2>
<p>CSS filters are a simple yet powerful tool at your disposal to apply awesome effects. When used tastefully, the end result can be pretty cool, and the best part is that is it done completely natively in the browser.</p>
<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/filter"" rel=""noopener"" target=""_blank"">Filter - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-The Box Model: Padding, Border, Margin","css-the-box-model-padding-border-margin","The CSS Box Model is an important concept to understand and in this lesson you will learn about margin, padding, and border.","DRAFT","

<p>The <strong>CSS box model</strong> is a very important concept to grasp. The box model is a way to describe the layout of an element and its content. The most important CSS properties we will go over are <strong>padding</strong>, <strong>border</strong>, and <strong>margin</strong>.</p>
<p>Here is a nice diagram of the CSS box model:</p>
<figure>
<img alt=""Diagram of the CSS Box Model. Notice the content inside padding, inside border, inside margin?"" height=""853"" loading=""lazy"" src=""https://sabe.io/classes/css/css-box-model-padding-border-margin/css-box-model.png"" width=""1102""/>
<figcaption>Diagram of the CSS Box Model. Notice the content inside padding, inside border, inside margin?</figcaption>
</figure>
<h2 id=""content"">Content</h2>
<p>You can consider every HTML element as just a box. Inside that box, basically everything in between tags, is considered <strong>content</strong>.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;span&gt;I am content.&lt;/span&gt;</code>
</pre>

<h2 id=""width-and-height"">Width and Height</h2>
<p>You can give an element with content a custom <strong>width and height</strong> by using the <code>width</code> and <code>height</code> CSS properties.</p>
<p>Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Width and Height&lt;/title&gt;
        &lt;style&gt;
            .content {
                background-color: pink;
                width: 20rem;
                height: 10rem
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""content""&gt;
            This is content.
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Using width and height in CSS."" height=""297"" loading=""lazy"" src=""https://sabe.io/classes/css/css-box-model-padding-border-margin/width-height.png"" width=""462""/>
<figcaption>Using width and height in CSS.</figcaption>
</figure>
<p>The background color was added so that you can clearly see the boundaries of the newly-expanded element. The width and height were set to 20rem and 10rem respectively.</p>
<h2 id=""minimum-width-and-height"">Minimum Width and Height</h2>
<p>Give an element a <strong>minimum width and height</strong> using <code>min-width</code> and <code>min-height</code> to ensure that the element is <strong>at least</strong> a certain size. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Min Width and Height&lt;/title&gt;
        &lt;style&gt;
            .content {
                background-color: pink;
                width: 20rem;
                height: 10rem;
                min-width: 25rem;
                min-height: 15rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""content""&gt;
            This is content.
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Using minimum width and height in CSS."" height=""380"" loading=""lazy"" src=""https://sabe.io/classes/css/css-box-model-padding-border-margin/min-width-height.png"" width=""457""/>
<figcaption>Using minimum width and height in CSS.</figcaption>
</figure>
<p>Notice how even though we set the <code>width</code> and <code>height</code> to be <code>20rem</code> and <code>10rem</code> respectively, the element is still larger because the <strong>minimum</strong> values we gave to the width and height exceed those values.</p>

<h2 id=""maximum-width-and-height"">Maximum Width and Height</h2>
<p>Setting the <strong>maximum width and height</strong> of an element is just as easy as setting the minimum. Use <code>max-width</code> and <code>max-height</code> and give it a value. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Max Width and Height&lt;/title&gt;
        &lt;style&gt;
            .content {
                background-color: pink;
                width: 20rem;
                height: 10rem;
                max-width: 15rem;
                max-height: 5rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""content""&gt;
            This is content.
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Using maximum width and height in CSS."" height=""223"" loading=""lazy"" src=""https://sabe.io/classes/css/css-box-model-padding-border-margin/max-width-height.png"" width=""450""/>
<figcaption>Using maximum width and height in CSS.</figcaption>
</figure>
<p>As you would expect, the element does not get larger than the specified maximum, even if another CSS rule sets it higher.</p>
<h2 id=""padding"">Padding</h2>
<p><strong>Padding</strong> is space added between the content and the border of its own box. You can declare it using the <code>padding</code> property, and giving it a length.</p>
<p>Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Padding&lt;/title&gt;
        &lt;style&gt;
            div {
                background-color: lightblue;
            }
            .no-padding {
                padding: 0;
            }
            .some-padding {
                padding: 2rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""no-padding""&gt;I have no padding&lt;/div&gt;
        &lt;br&gt;
        &lt;div class=""some-padding""&gt;I have some padding&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Example of padding."" height=""266"" loading=""lazy"" src=""https://sabe.io/classes/css/css-box-model-padding-border-margin/padding.png"" width=""440""/>
<figcaption>Example of padding.</figcaption>
</figure>
<p>As the image shows, the element that got some padding appears larger than the element that got zero padding. The blue background helps to illustrate where the element's borders are.</p>
<p>You can also set padding on each side individually, by using <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, or <code>padding-left</code>.</p>

<h2 id=""border"">Border</h2>
<p>At the edge of the content plus the padding you defined is the start of the element's <strong>border</strong>. By default, an element will not have a border, but you can define one with the <code>border</code> property.</p>
<p>The syntax for it is the width or thickness of the border, the style, and then the color.</p>
<p>For example, if you wanted a blue, dashed, 2 pixels thick border, it would look like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Border&lt;/title&gt;
        &lt;style&gt;
            .blue-border {
                border: 2px dashed blue;
                padding: 1rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""blue-border""&gt;Sweet border!&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Example of a border."" height=""266"" loading=""lazy"" src=""https://sabe.io/classes/css/css-box-model-padding-border-margin/border.png"" width=""440""/>
<figcaption>Example of a border.</figcaption>
</figure>
<p>Here are other border styles you can use:</p>
<ul>
<li><code>solid</code></li>
<li><code>dotted</code></li>
<li><code>dashed</code></li>
<li><code>double</code></li>
<li><code>inset</code></li>
<li><code>outset</code></li>
<li><code>groove</code></li>
<li><code>ridge</code></li>
</ul>
<p>Borders can be applied to most elements.</p>
<h3>Border Radius</h3>
<p>One way you can customize borders is by setting a border radius. You can round off the borders of your element using <code>border-radius</code>, like this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Border Radius&lt;/title&gt;
        &lt;style&gt;
            .rounded-corners {
                border: 0.5rem solid purple;
                padding: 1rem;
                border-radius: 1rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""rounded-corners""&gt;Rounded corners!&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Example of a border radius."" height=""266"" loading=""lazy"" src=""https://sabe.io/classes/css/css-box-model-padding-border-margin/border-radius.png"" width=""440""/>
<figcaption>Example of a border radius.</figcaption>
</figure>
<p>The value for this property is any length of your choosing. The default value is <code>0</code>, which means that the border will not be rounded. You can also use <code>50%</code> to round off the border fully.</p>

<h3>Box Shadow</h3>
<p>You can add a shadow to an element by using the <code>box-shadow</code> property. The syntax is the same as for borders, but you can also use <code>inset</code> and <code>outset</code> to make the shadow appear inside or outside of the element.</p>
<p>For the most common uses of this property, it takes <strong>five values</strong>, the horizontal offset, the vertical offset, the blur radius, the size of the shadow and finally, the color. The color is optional, and if you don't specify it, the shadow will be <code>black</code>. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Box Shadow&lt;/title&gt;
        &lt;style&gt;
            .box-shadow {
                background-color: lightpink;
                border: 0.25rem solid red;
                padding: 1rem;
                margin: 2rem;
                box-shadow: 0.5rem 0.5rem 0.25rem darkgray;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box-shadow""&gt;Box shadow!&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Example of a box shadow."" height=""266"" loading=""lazy"" src=""https://sabe.io/classes/css/css-box-model-padding-border-margin/box-shadow.png"" width=""440""/>
<figcaption>Example of a box shadow.</figcaption>
</figure>
<p>Box shadows can be applied to most elements.</p>
<h2 id=""margin"">Margin</h2>
<p>To add space around an element, you can use the <code>margin</code> property. It takes a length and can be applied to all four sides of the element. Unlike padding, which was spacing inside the element's border, margin is spacing <strong>outside</strong> the element's border, and you declare it using <code>margin</code>.</p>
<p>Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Margin&lt;/title&gt;
        &lt;style&gt;
            span {
                background-color: green;
                padding: 0.5rem;
                border-radius: 0.25rem;
                display: inline-block;
            }
            .low-space {
                margin-left: 1rem;
            }
            .med-space {
                margin-left: 5rem;
            }
            .high-space {
                margin-left: 10rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;span class=""low-space""&gt;A&lt;/span&gt;
        &lt;span class=""med-space""&gt;B&lt;/span&gt;
        &lt;span class=""high-space""&gt;C&lt;/span&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Example of margin."" height=""266"" loading=""lazy"" src=""https://sabe.io/classes/css/css-box-model-padding-border-margin/margin.png"" width=""440""/>
<figcaption>Example of margin.</figcaption>
</figure>
<p>While a difficult concept to illustrate, it should be clear to see that the <strong>more margin</strong> on the left side of the element, the further away it goes, despite the fact that all the elements have the same amount of padding.</p>
<p>This is because, again, padding affects only inside the element's border while margin affects what is <strong>outside</strong> it.</p>
<aside class=""aside__tip"">
<p>    As with <code>padding</code>, you can alternatively set margin on each side individually, by using <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, or <code>margin-left</code>.</p>
</aside>

<h2 id=""box-sizing"">Box Sizing</h2>
<p>The <code>box-sizing</code> property exists to allow you to control how an element's width and height is calculated. It only has two values so this one is pretty simple to demonstration.</p>
<p>The first value is <code>content-box</code>. This is the default value. This value makes it so that the width and height is only determined <strong>by the content itself</strong>. Any padding or border is extra and makes the element bigger.</p>
<p>The second value is <code>border-box</code>. This does the opposite effect. All additional padding and border are now included in the width and height. This means that if you constrain an element to a specific size, any added padding and border will simply make the remaining content space smaller to maintain that overall total size. This is useful for things like making a div that is always the same size, but has a different content inside.</p>
<p>Let's look at a simple example of the same box with two different sizes because of different <code>box-sizing</code> values. For this markup:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""box content-box""&gt;&lt;/div&gt;
&lt;div class=""box border-box""&gt;&lt;/div&gt;</code>
</pre>
<p>We apply these styles:</p>
<pre class=""pre__block"">	<code class=""language-css"">.box {
    width: 5rem;
    height: 5rem;
    border-width: 1rem;
    padding: 3rem;
}
.content-box {
    box-sizing: content-box;
    background-color: red;
}
.border-box {
    box-sizing: border-box;
    background-color: blue;
}</code>
</pre>
<figure>
<img alt=""Example of the difference in box sizing."" height=""438"" loading=""lazy"" src=""https://sabe.io/classes/css/css-box-model-padding-border-margin/box-sizing.png"" width=""444""/>
<figcaption>Example of the difference in box sizing.</figcaption>
</figure>
<p>Because the red square applies the padding and border on top of it's normal width and height, it appears way bigger than the blue square who keeps itself at <code>5rem</code> for its width and height no matter what. This is because the blue square is using <code>border-box</code> and the red square is using <code>content-box</code>.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/padding"" rel=""noopener"" target=""_blank"">Padding - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/margin"" rel=""noopener"" target=""_blank"">Margin - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/border"" rel=""noopener"" target=""_blank"">Border - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model"" rel=""noopener"" target=""_blank"">Box Model - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius"" rel=""noopener"" target=""_blank"">Border Radius - MDN Web Docs</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"" rel=""noopener"" target=""_blank"">Box Shadow - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Grouping and Nesting CSS Selectors","css-grouping-and-nesting-css-selectors","Learn how to improve your CSS by grouping selectors together and nesting selectors wherever possible.","DRAFT","<p>When you start to write bigger and bigger HTML files, and your CSS styles start to become longer and longer, it might be worth looking into if you can shorten and simplify them a bit by <strong>grouping CSS selectors</strong> and <strong>nesting CSS selectors</strong>.</p>
<h2 id=""grouping-css-selectors"">Grouping CSS Selectors</h2>
<p>The easiest way to identify where you might be able to <strong>group</strong> selectors in one line is to see where you have repetition in your styles.</p>
<p>For example, let's say these are your current styles:</p>
<pre class=""pre__block"">	<code class=""language-css"">h1 {
    color: darkgray;
}

h2 {
    color: darkgray;
}

.highlight {
    color: darkgray;
}</code>
</pre>
<p>Instead of writing those three selectors, you can group them into a single line.</p>
<p>To group them, all you need to do is separate them with a <strong>comma</strong>, and the styles inside will get applied to them all. For example:</p>
<pre class=""pre__block"">	<code class=""language-css"">h1, h2, .highlight {
    color: darkgray;
}</code>
</pre>
<p>Look how much shorter that is! Now you can apply the same styles to multiple elements at once.</p>

<h2 id=""nesting-css-selectors"">Nesting CSS Selectors</h2>
<p>Just like in HTML where you can have elements nested inside other elements, the same can be done in CSS. There are cases where you might want to style elements <strong>differently</strong> depending on what they are nested inside of. This is where <strong>nesting</strong> comes in handy.</p>
<h2 id=""descendant-selector"">Descendant Selector</h2>
<p>When you want to target elements that are <strong>inside</strong> another element, you can use the <strong>descendant selector</strong>, also known as the <strong>descendant selector</strong>.</p>
<p>Let's say you have a paragraph tag inside your main content and also one in your footer, but you want the footer's font size to be smaller.</p>
<p>You can simply <strong>target</strong> paragraph tags inside <code>main</code> differently than you would paragraph tags inside <code>footer</code> by nesting the paragraph tag inside its parent.</p>
<p>For example:</p>
<pre class=""pre__block"">	<code class=""language-css"">main p {
    font-size: 1rem;
}

footer p {
    font-size: 0.75rem;
}</code>
</pre>
<p>It's that simple. To nest a selector, you simply separate them with a space.</p>
<p>But what if you had a third paragraph tag in the header, and also wanted it to be the same font size of the footer? Well, you can both <strong>group</strong> and <strong>nest</strong> CSS selectors at the same time:</p>
<pre class=""pre__block"">	<code class=""language-css"">main p {
    font-size: 1rem;
}

header p, footer p {
    font-size: 0.75rem;
}</code>
</pre>
<p>This will make paragraph tags inside <code>main</code> have one font size, and paragraph tags inside either <code>header</code> or <code>footer</code> have another font size.</p>
<p>Descendant selectors target all elements inside the other, <strong>no matter how deeply nested it is</strong>.</p>
<p>But what if you don't want this, and only want to target the direct children instead?</p>

<h2 id=""child-selector"">Child Selector</h2>
<p>For the cases where you only want to target direct children (nested only one level under), you can use a <strong>child selector</strong>. Instead of using a space, you use a greater-than character to specify direct children:</p>
<pre class=""pre__block"">	<code class=""language-css"">main &gt; p {
    font-size: 1rem;
}

header &gt; p {
    font-size: 0.75rem;
}</code>
</pre>
<p>If you had those paragraphs tags first nested inside a <code>div</code> tag, neither styles would apply because they wouldn't be direct children of <code>main</code> or <code>header</code>.</p>
<h2 id=""adjacent-sibling-selector"">Adjacent Sibling Selector</h2>
<p>There will sometimes be cases where you want to target an element based on whether or not it came <strong>right after</strong> another element.</p>
<p>Let's say you wanted the <strong>first paragraph</strong> after every <code>h1</code> tag to be in a larger font size:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;h1&gt;I am a header&lt;/h1&gt;
&lt;p&gt;I am paragraph #1&lt;/p&gt;
&lt;p&gt;I am paragraph #2&lt;/p&gt;
&lt;p&gt;I am paragraph #3&lt;/p&gt;</code>
</pre>
<p>You can use an <strong>adjacent sibling selector</strong> to say ""hey, I want to style only the paragraph tag right after my header"":</p>
<pre class=""pre__block"">	<code class=""language-css"">h1 + p {
    font-size: 125%;
}</code>
</pre>
<p>Now your first paragraph will be in a larger font, but the following paragraphs will be in their usual font size. This is useful for when you want to style the next element in a list, or the next element in a row.</p>
<p>To use an adjacent sibling selector, you need to specify the element you want to target, and then the element you want to target it after, then a plus sign.</p>

<h2 id=""general-sibling-selector"">General Sibling Selector</h2>
<p>General sibling selectors are similar to adjacent selectors, but instead of targeting the element right after the target element, they target all elements that come after the target element.</p>
<p>Let's say you wanted to style all paragraphs after an <code>h1</code>:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;p&gt;I am paragraph #1&lt;/p&gt;
&lt;h1&gt;I am a header&lt;/h1&gt;
&lt;p&gt;I am paragraph #2&lt;/p&gt;
&lt;p&gt;I am paragraph #3&lt;/p&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">h1 ~ p {
    font-size: 125%;
}</code>
</pre>
<p>This will make all paragraphs after the header be in a larger font, but the paragraphs before the header will be in their usual font size. This is useful for when you want to style all elements after a certain element, but not the element itself.</p>
<p>Try out the demo for yourself:</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><p>I am paragraph #1</p>
<h1>I am a header</h1>
<p>I am paragraph #2</p>
<p>I am paragraph #3</p></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">h1 ~ p {
    font-size: 125%;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Glossary/CSS_Selector"" rel=""noopener"" target=""_blank"">CSS Selectors - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Pseudo-Classes","css-pseudo-classes","Learn how to extend both the functionality and look of your HTML pages by targetting Pseudo-Classes.","DRAFT","

<h2 id=""what-are-pseudo-classes"">What are Pseudo-classes?</h2>
<p>CSS allows us to target elements based on their state. For example, we can target elements that are currently hovered over, or elements that are currently focused. These are called pseudo-classes. By adding it to your selector, you can style elements only if they're in the state you want them to be. We will go over the most common pseudo-classes in this article.</p>

<h2 id=""link"">Link</h2>
<p>You can target unvisited links by adding the <code>:link</code> pseudo-class to your selector.</p>
<pre class=""pre__block"">	<code class=""language-css"">a:link {
    color: blue;
}</code>
</pre>
<p>This will only apply to unvisited links.</p>
<h2 id=""visited"">Visited</h2>
<p>When you want to target visited links, you can add the <code>:visited</code> pseudo-class to your selector.</p>
<pre class=""pre__block"">	<code class=""language-css"">a:visited {
    color: purple;
}</code>
</pre>
<p>You've seen uses of pseudo-classes throughout your times on the web. A new link on a Google search is blue, but when you have clicked on it before, it is purple.</p>
<figure>
<img alt=""A Google search for Barack Obama."" height=""448"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-classes/barack-obama.png"" width=""802""/>
<figcaption>A Google search for Barack Obama.</figcaption>
</figure>

<h2 id=""hover"">Hover</h2>
<p>You can apply styles to an element depending on whether or not it is currently being <strong>hovered over</strong>. Let's say you wanted to change the background color of paragraph tags if they're being hovered over. You can add the <code>:hover</code> pseudo-class to your selector. Let's see an example.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hover&lt;/title&gt;
        &lt;style&gt;
            p:hover {
                background-color: lightgray;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;Paragraph&lt;/p&gt;
        &lt;p&gt;Paragraph&lt;/p&gt;
        &lt;p&gt;Paragraph&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of hover."" height=""266"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-classes/hover.png"" width=""440""/>
<figcaption>An example of hover.</figcaption>
</figure>
<h2 id=""focus"">Focus</h2>
<p>An element is in <strong>focus</strong> when it is selected or clicked on and/or ready for any kind of input, like a textbox or dropdown. You can target elements that are in focus by adding the <code>:focus</code> pseudo-class to your selector. Let's see an example.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Focus&lt;/title&gt;
        &lt;style&gt;
            input {
                margin-bottom: 1rem;
            }
            input:focus {
                background-color: lightgreen;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;&lt;input type=""number"" /&gt;&lt;/div&gt;
        &lt;div&gt;&lt;input type=""number"" /&gt;&lt;/div&gt;
        &lt;div&gt;&lt;input type=""number"" /&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of focus."" height=""266"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-classes/focus.png"" width=""440""/>
<figcaption>An example of focus.</figcaption>
</figure>

<h2 id=""active"">Active</h2>
<p>The active state is enabled when the user activates an element, like when a link is currently being clicked on. You can target elements that are in active state by adding the <code>:active</code> pseudo-class to your selector. Let's see an example. Let's see how this works.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Active&lt;/title&gt;
        &lt;style&gt;
            div {
                margin: 1rem 0;
            }

            a {
                padding: 0.5rem;
            }

            a:active {
                background-color: lightblue;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;&lt;a href=""https://sabe.io""&gt;Link #1&lt;/a&gt;&lt;/div&gt;
        &lt;div&gt;&lt;a href=""https://sabe.io""&gt;Link #2&lt;/a&gt;&lt;/div&gt;
        &lt;div&gt;&lt;a href=""https://sabe.io""&gt;Link #3&lt;/a&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of active."" height=""266"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-classes/active.png"" width=""440""/>
<figcaption>An example of active.</figcaption>
</figure>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"" rel=""noopener"" target=""_blank"">Pseudo-classes - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Pseudo-Elements","css-pseudo-elements","Learn how to extend both the functionality and look of your HTML pages by targetting Pseudo-Elements.","DRAFT","

<h2 id=""what-are-pseudo-elements"">What are Pseudo-elements?</h2>
<p>Pseudo-elements are similar to pseudo-classes but instead of classes you can style right away, they are instead <strong>elements</strong> that you can target. Let's look at examples of these.</p>

<h2 id=""first-child"">First Child</h2>
<p>You can target the first child of a tag using the <code>first-child</code> pseudo-class. This will target the first child of the element you're targeting.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><p>I am the first and oldest child.</p>
<p>I am the middle child. Nobody loves me. :(</p>
<p>I am the last and youngest child.</p></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">p:first-child {
    background-color: lightgreen;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""Example of using first child."" height=""142"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-elements/first-child.png"" width=""312""/>
<figcaption>Example of using first child.</figcaption>
</figure>
<p>Only the first child will be styled with the background color and the others will be left alone.</p>
<h2 id=""last-child"">Last Child</h2>
<p>You can target the last child of a tag using the <code>last-child</code> pseudo-class. This will target the last child of the element you're targeting.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><p>I am the first and oldest child.</p>
<p>I am the middle child. Nobody loves me. :(</p>
<p>I am the last and youngest child.</p></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">p:last-child {
    background-color: lightgreen;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""Example of using last child."" height=""147"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-elements/last-child.png"" width=""317""/>
<figcaption>Example of using last child.</figcaption>
</figure>
<p>Only the last child will be styled with the background color and the others will be left alone.</p>

<h2 id=""nth-child"">Nth Child</h2>
<p>You can target a specific child of a tag using the <code>nth-child</code> pseudo-class. Simply add a number to the end of the pseudo-class. This will target the child at the specified index.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><p>I am the first and oldest child.</p>
<p>I am the middle child. Nobody loves me. :(</p>
<p>I am the last and youngest child.</p></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">p:nth-child(2) {
    background-color: lightgreen;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""Example of using nth child."" height=""145"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-elements/nth-child.png"" width=""319""/>
<figcaption>Example of using nth child.</figcaption>
</figure>
<p>The middle child will be styled with the background color and the others will be left alone.</p>
<h2 id=""first-of-type"">First of Type</h2>
<p>You can target the first occurrence of a tag using the <code>first-of-type</code> pseudo-class. This will target the first type of the element you're targeting.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><p>I am the first and oldest child.</p>
<div>Random div</div>
<p>I am the middle child. Nobody loves me. :(</p>
<div>Random div</div>
<p>I am the last and youngest child.</p></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">p:first-of-type {
    background-color: lightgreen;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""Example of using first of type."" height=""183"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-elements/first-of-type.png"" width=""307""/>
<figcaption>Example of using first of type.</figcaption>
</figure>
<p>Only the first child of the type will be styled with the background color and the others will be left alone.</p>

<h2 id=""nth-of-type"">Nth of Type</h2>
<p>You can target a specific occurrence of a tag using the <code>nth-of-type</code> pseudo-class. Simply add a number to the end of the pseudo-class. This will target the element at the specified index.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><p>I am the first and oldest child.</p>
<div>Random div</div>
<p>I am the middle child. Nobody loves me. :(</p>
<div>Random div</div>
<p>I am the last and youngest child.</p></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">p:nth-of-type(2) {
    background-color: lightgreen;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""Example of using nth of type."" height=""195"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-elements/nth-of-type.png"" width=""316""/>
<figcaption>Example of using nth of type.</figcaption>
</figure>
<h2 id=""last-of-type"">Last of Type</h2>
<p>You can target the last occurrence of a tag using the <code>last-of-type</code> pseudo-class. This will target the last type of the element you're targeting.</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><p>I am the first and oldest child.</p>
<div>Random div</div>
<p>I am the middle child. Nobody loves me. :(</p>
<div>Random div</div>
<p>I am the last and youngest child.</p></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">p:last-of-type {
    background-color: lightgreen;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""Example of using last of type."" height=""147"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-elements/last-child.png"" width=""317""/>
<figcaption>Example of using last of type.</figcaption>
</figure>

<h2 id=""before-and-after"">Before and After</h2>
<p>Using the <code>before</code> and <code>after</code> pseudo-elements, you can add content before or after an element. You do this via the <code>content</code> property, which takes a string as a value.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Before and After&lt;/title&gt;
        &lt;style&gt;
            p:before {
                content: 'Hello ';
            }
            p:after {
                content: ' World!';
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;(don't mind me!)&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of before and after."" height=""266"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-elements/before-after.png"" width=""440""/>
<figcaption>An example of before and after.</figcaption>
</figure>
<h2 id=""first-letter-and-line"">First Letter and Line</h2>
<p>You can style the first letter and first line of an element with the <code>first-letter</code> and <code>first-line</code> pseudo-elements.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;First Letter and Line&lt;/title&gt;
        &lt;style&gt;
            p:first-letter {
                font-size: 5rem;
            }
            p:first-line {
                color: red
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of first letter and first line."" height=""344"" loading=""lazy"" src=""https://sabe.io/classes/css/pseudo-elements/first-letter-line.png"" width=""456""/>
<figcaption>An example of first letter and first line.</figcaption>
</figure>
<p>The first letter has been made huge and the entire first line has been made red!</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"" rel=""noopener"" target=""_blank"">Pseudo-elements - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Using CSS Variables","css-using-css-variables","CSS variables allow you to change entire styles on a fly, giving you native and dynamic styles not possible before.","DRAFT","
<p>By now, most people know what a CSS preprocessor is and why they are so popular. If not, CSS pre-processors like Stylus work by taking CSS-like markup and converting it to the pure CSS that browsers understand and parse. A major feature common to all CSS pre-processors is the ability to create a variable and use it anywhere you want. This is a powerful feature that allows you to create reusable CSS that can be used across multiple pages.</p>
<p>In other words, instead of doing something like this:</p>
<pre class=""pre__block"">	<code class=""language-css"">.thing {
    color: #360a4a;
}

.other-thing {
    color: #360a4a;
}</code>
</pre>
<p>You can do this in Stylus:</p>
<pre class=""pre__block"">	<code class=""language-css"">$sabe-purple: #360a4a;

.thing {
    color: $sabe-purple;
}

.other-thing {
    color: $sabe-purple;
}</code>
</pre>
<p>CSS pre-processors are great but CSS variables are more powerful. They allow you to create reusable CSS that can be used across multiple pages. They're also native meaning you don't need to use a pre-processor to use them. So how do you use a CSS variable?</p>
<p>Let's look at the above example of how to use CSS variables:</p>
<pre class=""pre__block"">	<code class=""language-css"">:root {
    --sabe-purple: #360a4a;
}

.thing {
    color: var(--sabe-purple);
}

.other-thing {
    color: var(--sabe-purple);
}</code>
</pre>
<p>The end result is the same but the difference is that color is still being set to a <strong>variable</strong> and not a raw color value, like with the output of Stylus files. This means that you can still modify that variable and let the browser do the work of updating everything else.</p>
<h2 id=""using-css-variables-with-javascript"">Using CSS Variables with JavaScript</h2>
<p>Because CSS variables are still variables, we can use JavaScript. to modify their values whenever we want. If you wanted to change the color of <code>.thing</code> and <code>.other-thing</code>, you would need to target both elements and then apply the style changes. With CSS variables, it is as simple as changing the value of that variable.</p>
<pre class=""pre__block"">	<code class=""language-javascript"">document.documentElement.style.setProperty(""--sabe-purple"", ""#472856"");</code>
</pre>
<p>And just like that, we changed the value of <code>--sabe-purple</code> from <code>#360a4a</code> to <code>#472856</code>.</p>
<p>Getting the current value of a CSS variable is also just as simple:</p>
<pre class=""pre__block"">	<code class=""language-javascript"">const value = document.documentElement.style.getPropertyValue(""--sabe-purple"");
console.log(value);</code>
</pre>
<pre class=""pre__block"">	<code class=""language-markup"">#472856</code>
</pre>
<p>Being able to dynamically set and get a CSS variable is an immensely powerful feature because it means that you are no longer held down by one of the biggest downsides of CSS pre-processors: the output in pure CSS is static and cannot be changed without hacking the DOM and manually applying styles all over the place.</p>
<p>If you use a CSS preprocessor variable in 50 different places, you must now change the styles in 50 different places, or be forced to use a class to override them all. Now with CSS variables, you just change the variable's value using a single line of code.</p>
<p>This means that with CSS variables, you now have dynamic styling, meaning styling that isn't static and can change on a fly.</p>
<p>Below is a fully-working example of a pretty simple application of CSS variables. Click on the screen to change the background color to a random color:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;CSS Variables&lt;/title&gt;
        &lt;style&gt;
            :root {
                --color: lightblue;
            }
            body {
                background-color: var(--color);
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;/body&gt;
    &lt;script&gt;
        const setDocumentVariable = (propertyName, value) =&gt; {
            document.documentElement.style.setProperty(propertyName, value);
        }

        document.addEventListener(""click"", (event) =&gt; {
            setDocumentVariable(""--color"", ""#"" + ((1 &lt;&lt; 24) * Math.random() | 0).toString(16));
        });
    &lt;/script&gt;
&lt;/html&gt;</code>
</pre>
<p>Try out the demo for yourself!</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
<li class=""editor__button javascript-button"">JavaScript</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">:root {
    --color: lightblue;
}

body {
    background-color: var(--color);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""javascript"">
<textarea class=""editor__textarea"" spellcheck=""false"">const setDocumentVariable = (propertyName, value) =&gt; {
    document.documentElement.style.setProperty(propertyName, value);
}

document.addEventListener(""click"", (event) =&gt; {
    setDocumentVariable(""--color"", ""#"" + ((1 &lt;&lt; 24) * Math.random() | 0).toString(16));
});</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-javascript""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>CSS variables are pretty fun to play around with and create new experiences with. Definitely keep an eye open for them because they could very well go on to dominate as browser support for them continues to improve.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"" rel=""noopener"" target=""_blank"">Using CSS Variables - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Display","css-display","Learn about the Display CSS property to know how to control how your elements are rendered on the page.","DRAFT","

<p>The <code>display</code> property and its values are very important to understand because they have a pretty big impact on how elements interact with each other on the page and how they are rendered.</p>
<p>Let's go over the main values for <code>display</code>, using this HTML document as our base:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Display&lt;/title&gt;
        &lt;style&gt;
            div {
                background-color: blue;
            }

            span {
                background-color: lightblue;
                padding: 0 0.5rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;
            &lt;span&gt;How&lt;/span&gt;
            &lt;span&gt;cool&lt;/span&gt;
            &lt;span&gt;is&lt;/span&gt;
            &lt;span&gt;Sabe?&lt;/span&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Default display value for span tags."" height=""344"" loading=""lazy"" src=""https://sabe.io/classes/css/display/display.png"" width=""456""/>
<figcaption>Default display value for span tags.</figcaption>
</figure>
<aside class=""aside__tip"">
<p>    The <strong>light blue</strong> is to show how the individual <code>span</code> tags are being rendered inside the larger parent element, shown in the <strong>darker blue</strong>.</p>
<p>    Recall that the reason why you see dark blue way beyond where the light blue ends is because since <code>div</code> tags are rendered as <strong>blocks</strong>, they're going to take up 100% of the width, <strong>regardless if the content inside fills up the space or not</strong>.</p>
</aside>
<h2 id=""display-none"">Display: None</h2>
<p>If you set the <code>display</code> value to <code>none</code>, it will simply <strong>not appear at all</strong>. This is useful for hiding elements that you don't want to see. For example, if you wanted to hide the <code>span</code> tags, you could do the following:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Display: None&lt;/title&gt;
        &lt;style&gt;
            div {
                background-color: blue;
            }

            span {
                background-color: lightblue;
                padding: 0 0.5rem;
                display: none;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;
            &lt;span&gt;How&lt;/span&gt;
            &lt;span&gt;cool&lt;/span&gt;
            &lt;span&gt;is&lt;/span&gt;
            &lt;span&gt;Sabe?&lt;/span&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Now you see me. Now you don't."" height=""344"" loading=""lazy"" src=""https://sabe.io/classes/css/display/display-none.png"" width=""456""/>
<figcaption>Now you see me. Now you don't.</figcaption>
</figure>

<h2 id=""visibility"">Visibility</h2>
<p>Another way to accomplish a similar, but not exact, effect as using <code>display: none;</code> is to use the <code>visibility</code> property. When you set the value to <code>hidden</code>, it also causes the element to disappear.</p>
<p>The difference is that using <code>display: none</code> the browser will act as if the element <strong>does not exist in the DOM at all</strong>, collapsing the space that the element otherwise would have taken up. On the other hand, using <code>visibility: hidden;</code> will hide the element from view but otherwise keep everything else the same.</p>
<aside class=""aside__tip"">
<p>    To get the element to show again, you can set <code>visibility</code> to <code>visible</code>!</p>
</aside>
<h2 id=""display-inline"">Display: Inline</h2>
<p>Now if you recall from our HTML lesson, <code>span</code> tags are, by default, rendered <strong>inline</strong>. This means that applying a <code>display</code> value of <code>inline</code> will essentially do nothing, however if you were to apply it on a <code>div</code> tag, it <strong>will</strong> be rendered inline. This is because <code>div</code> tags are rendered as <strong>blocks</strong> by default, and <code>span</code> tags will be rendered inline.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Display: Inline&lt;/title&gt;
        &lt;style&gt;
            div {
                background-color: blue;
            }

            span {
                background-color: lightblue;
                padding: 0 0.5rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;
            &lt;span&gt;How&lt;/span&gt;
            &lt;span&gt;cool&lt;/span&gt;
            &lt;span&gt;is&lt;/span&gt;
            &lt;span&gt;Sabe?&lt;/span&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""The span tags are being rendered inline inside the div tag."" height=""344"" loading=""lazy"" src=""https://sabe.io/classes/css/display/display-inline.png"" width=""456""/>
<figcaption>The span tags are being rendered inline inside the div tag.</figcaption>
</figure>

<h2 id=""display-block"">Display: Block</h2>
<p>Setting an element's <code>display</code> value to <code>block</code> will make it render as a block and inherit all of the characteristics that comes with being a block. This is useful for elements that you want to be rendered as a block, but you don't want to be able to apply any other styles to them.</p>
<p>While normally rendered inline, watch what happens when we set the <code>span</code> tags to render as a <code>block</code> like <code>div</code> tags usually do:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Display: Block&lt;/title&gt;
        &lt;style&gt;
            div {
                background-color: blue;
            }

            span {
                background-color: lightblue;
                padding: 0 0.5rem;
                display: block;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;
            &lt;span&gt;How&lt;/span&gt;
            &lt;span&gt;cool&lt;/span&gt;
            &lt;span&gt;is&lt;/span&gt;
            &lt;span&gt;Sabe?&lt;/span&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Span tags rendered as blocks."" height=""344"" loading=""lazy"" src=""https://sabe.io/classes/css/display/display-block.png"" width=""456""/>
<figcaption>Span tags rendered as blocks.</figcaption>
</figure>
<p>Because our <code>span</code> tags are now rendered as a <code>block</code>, they individually take up 100% of the width of their parents, and thus you now see light blue covering where there used to be dark blue.</p>
<p>The <code>div</code> is still there, you just don't see it because each of its children are now taking up all the space inside of it, along with their lighter background color.</p>
<h2 id=""display-inline-block"">Display: Inline Block</h2>
<p>Inline blocks is essentially taking a block and making it render inline. By setting the <code>display</code> property to <code>inline-block</code>, the element shares characteristics from both values.</p>
<p>You can, for example, manipulate the block's height, while remaining inline:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Display: Inline Block&lt;/title&gt;
        &lt;style&gt;
            div {
                background-color: blue;
            }

            span {
                background-color: lightblue;
                padding: 0 0.5rem;
                display: inline-block;
            }

            span:nth-child(1) {
                height: 1rem;
            }

            span:nth-child(2) {
                height: 2rem;
            }

            span:nth-child(3) {
                height: 3rem;
            }

            span:nth-child(4) {
                height: 4rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;
            &lt;span&gt;How&lt;/span&gt;
            &lt;span&gt;cool&lt;/span&gt;
            &lt;span&gt;is&lt;/span&gt;
            &lt;span&gt;Sabe?&lt;/span&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Display: inline-block"" height=""344"" loading=""lazy"" src=""https://sabe.io/classes/css/display/display-inline-block.png"" width=""456""/>
<figcaption>Display: inline-block</figcaption>
</figure>
<p>Each individual <code>span</code> tag had its height adjusted like a block, but it remained rendered inline. This is useful for elements that you want to be rendered inline, but you want to be able to adjust their height.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/display"" rel=""noopener"" target=""_blank"">Display - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Flexible Box Layout","css-flexible-box-layout","The Flexible Box layout makes it easier to build a responsive and flexible layout for your page no matter the screen size.","DRAFT","

<p>The flexible box layout (or <strong>flexbox</strong>) makes it easier to build a responsive and flexible layout for your page, something that has historically been either difficult or hacky in CSS. The layout is great for when you are not sure of the size of the items inside, hence the layout is flexible enough to handle dynamic sizes.</p>
<p>It gives the overall container the ability to adjust the size of the containing items to display them in the most efficient and readable way possible. The flexible box layout is a combination of the <strong>flexbox</strong> and <strong>grid</strong> layout.</p>
<h2 id=""flex-box-layout"">Flex box layout</h2>
<p>To create a flexible box layout, you need to use the <strong>flexbox</strong> property. Give a container a <strong>display: flex</strong> property.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
}

.item {
    width: 5rem;
    height: 5rem;
    background-color: lightblue;
    border: solid 1px blue;
}</code>
</pre>
<p>Inside, let's put three items:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""item""&gt;A&lt;/div&gt;
    &lt;div class=""item""&gt;B&lt;/div&gt;
    &lt;div class=""item""&gt;C&lt;/div&gt;
    &lt;div class=""item""&gt;D&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<p>Now we can apply any of the follow CSS properties to the parent element to determine how to display its children elements.</p>
<ul>
<li><code>flex-direction</code></li>
<li><code>flex-wrap</code></li>
<li><code>flex-flow</code></li>
<li><code>justify-content</code></li>
<li><code>align-items</code></li>
<li><code>align-content</code></li>
</ul>
<p>Let's go over each property in detail and learn about each one's effect.</p>

<h2 id=""flex-direction"">Flex Direction</h2>
<p><strong>Flex direction</strong> determines in what orientation and what direction the items inside will be placed. There are two options for the orientation, row or column, and two options for the direction, normal or reverse:</p>
<ul>
<li><code>row</code></li>
<li><code>row-reverse</code></li>
<li><code>column</code></li>
<li><code>column-reverse</code></li>
</ul>
<h3>Row</h3>
<p>Using the same markup and styles as above, here is how the items will render when we apply the different values for <code>flex-direction</code>:</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    flex-direction: row;
}</code>
</pre>
<figure>
<img alt=""Flex Direction set to Row"" height=""246"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/flex-direction-row.png"" width=""432""/>
<figcaption>Flex Direction set to Row</figcaption>
</figure>
<aside class=""aside__tip"">
<p>    This is the default value for <code>flex-direction</code>.</p>
</aside>

<h3>Row Reverse</h3>
<p>With <code>row-reverse</code>, the items, while still displayed in a row, are now being displayed in the reverse order as the markup would suggest. This is useful when you want to display the items in a column, but you want to display them in the reverse order.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    flex-direction: row-reverse;
}</code>
</pre>
<figure>
<img alt=""Flex Direction set to Row Reverse"" height=""246"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/flex-direction-row-reverse.png"" width=""434""/>
<figcaption>Flex Direction set to Row Reverse</figcaption>
</figure>
<h3>Column</h3>
<p>With a <code>flex-direction</code> of <code>column</code>, the items are lined up in a vertical column instead of a row.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    flex-direction: column;
}</code>
</pre>
<figure>
<img alt=""Flex Direction set to Column"" height=""442"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/flex-direction-column.png"" width=""435""/>
<figcaption>Flex Direction set to Column</figcaption>
</figure>

<h3>Column Reverse</h3>
<p>With a <code>flex-direction</code> of <code>column-reverse</code>, the items, still lined up in a vertical column, are placed in the reverse order as they appear in the markup.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    flex-direction: column-reverse;
}</code>
</pre>
<figure>
<img alt=""Flex Direction set to Column Reverse"" height=""442"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/flex-direction-column-reverse.png"" width=""435""/>
<figcaption>Flex Direction set to Column Reverse</figcaption>
</figure>
<h2 id=""flex-wrap"">Flex Wrap</h2>
<p>By default, the container will try to fit all the children items on the same line. You can change this behavior with <code>flex-wrap</code>. Below are the following values for it:</p>
<ul>
<li><code>wrap</code></li>
<li><code>no-wrap</code></li>
<li><code>wrap-reverse</code></li>
</ul>

<h3>Wrap</h3>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    flex-wrap: wrap;
}</code>
</pre>
<figure>
<img alt=""Flex Wrap set to Wrap"" height=""307"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/flex-wrap-wrap.png"" width=""345""/>
<figcaption>Flex Wrap set to Wrap</figcaption>
</figure>
<p>Since we set it to <code>wrap</code>, the last item, <strong>D</strong>, was rendered on the next line, wrapping when it couldn't fit at the end.</p>
<h3>No-Wrap</h3>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    flex-wrap: no-wrap;
}</code>
</pre>
<figure>
<img alt=""Flex Wrap set to No Wrap"" height=""209"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/flex-wrap-no-wrap.png"" width=""243""/>
<figcaption>Flex Wrap set to No Wrap</figcaption>
</figure>
<p>To fit the items on one line and not wrap, the items were squeezed together.</p>

<h3>Wrap Reverse</h3>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    flex-wrap: wrap-reverse;
}</code>
</pre>
<figure>
<img alt=""Flex Wrap set to Wrap Reverse"" height=""282"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/flex-wrap-wrap-reverse.png"" width=""268""/>
<figcaption>Flex Wrap set to Wrap Reverse</figcaption>
</figure>
<p>The items with <code>wrap-reverse</code> will wrap the items above instead of below the line.</p>
<h2 id=""justify-content"">Justify Content</h2>
<p>The <code>justify-content</code> property defines the spacing around the items inside a flexible parent. There are six different ways to space out your items:</p>
<ul>
<li><code>flex-start</code></li>
<li><code>flex-end</code></li>
<li><code>center</code></li>
<li><code>space-between</code></li>
<li><code>space-around</code></li>
<li><code>space-evenly</code></li>
</ul>

<h3>Flex Start</h3>
<p>The <code>justify-content</code> value of <code>flex-start</code> starts the items at the beginning. This is the default value.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    justify-content: flex-start;
}</code>
</pre>
<figure>
<img alt=""Justify Content set to Flex Start"" height=""238"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/justify-content-flex-start.png"" width=""433""/>
<figcaption>Justify Content set to Flex Start</figcaption>
</figure>
<h3>Flex End</h3>
<p>The <code>justify-content</code> value of <code>flex-end</code> starts the items at the end.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    justify-content: flex-end;
}</code>
</pre>
<figure>
<img alt=""Justify Content set to Flex End"" height=""238"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/justify-content-flex-end.png"" width=""456""/>
<figcaption>Justify Content set to Flex End</figcaption>
</figure>

<h3>Center</h3>
<p>The <code>justify-content</code> value of <code>center</code> centers the item in the space allocated.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    justify-content: center;
}</code>
</pre>
<figure>
<img alt=""Justify Content set to Center"" height=""238"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/justify-content-center.png"" width=""456""/>
<figcaption>Justify Content set to Center</figcaption>
</figure>
<h3>Space Between</h3>
<p>The <code>justify-content</code> value of <code>space-between</code> ensures that the space between the items are equal.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    justify-content: space-between;
}</code>
</pre>
<figure>
<img alt=""Justify Content set to Space Between"" height=""238"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/justify-content-space-between.png"" width=""446""/>
<figcaption>Justify Content set to Space Between</figcaption>
</figure>

<h3>Space Around</h3>
<p>The <code>justify-content</code> value of <code>space-around</code> ensures that the space around the items are equal. Notice that the first and last item have less space on the edges than between the items.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    justify-content: space-around;
}</code>
</pre>
<figure>
<img alt=""Justify Content set to Space Around"" height=""238"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/justify-content-space-around.png"" width=""499""/>
<figcaption>Justify Content set to Space Around</figcaption>
</figure>
<h3>Space Evenly</h3>
<p>The <code>justify-content</code> value of <code>space-evenly</code> ensures that the spacing between the edges and items are equal.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    justify-content: space-evenly;
}</code>
</pre>
<figure>
<img alt=""Justify Content set to Space Evenly"" height=""238"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/justify-content-space-evenly.png"" width=""499""/>
<figcaption>Justify Content set to Space Evenly</figcaption>
</figure>

<h2 id=""align-items"">Align Items</h2>
<p>The <code>align-items</code> property defines how the items are positioned within the row or column. It's similar to <code>justify-content</code> but perpendicular to the line it's being aligned on. To illustrate the following values, we'll use this markup and CSS:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""item a""&gt;A&lt;/div&gt;
    &lt;div class=""item b""&gt;B&lt;/div&gt;
    &lt;div class=""item c""&gt;C&lt;/div&gt;
    &lt;div class=""item d""&gt;D&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-items: stretch;
}

.item {
    width: 5rem;
    background-color: lightblue;
    border: solid 1px blue;
}

.a {
    height: 5rem;
}

.b {
    height: 3rem;
}

.c {
    height: 7rem;
}

.d {
    height: 10rem;
}</code>
</pre>
<p>These are the valid values for <code>align-items</code>:</p>
<ul>
<li><code>flex-start</code></li>
<li><code>flex-end</code></li>
<li><code>center</code></li>
<li><code>stretch</code></li>
<li><code>baseline</code></li>
</ul>
<h3>Flex Start</h3>
<p>The <code>align-items</code> value of <code>flex-start</code> makes it so that the items are aligned to the top (if a row) or to the left (if a column).</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-items: flex-start;
}</code>
</pre>
<figure>
<img alt=""Align Items set to Flex Start"" height=""295"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-items-flex-start.png"" width=""390""/>
<figcaption>Align Items set to Flex Start</figcaption>
</figure>

<h3>Flex End</h3>
<p>The <code>align-items</code> value of <code>flex-end</code> makes it so that the items are aligned to the bottom (if a row) or to the right (if a column).</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-items: flex-end;
}</code>
</pre>
<figure>
<img alt=""Align Items set to Flex End"" height=""295"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-items-flex-end.png"" width=""390""/>
<figcaption>Align Items set to Flex End</figcaption>
</figure>
<h3>Center</h3>
<p>The <code>align-items</code> value of <code>center</code> aligns the item at the very center, vertically if it's a row or horizontally if it's a column.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-items: center;
}</code>
</pre>
<figure>
<img alt=""Align Items set to Center"" height=""295"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-items-center.png"" width=""390""/>
<figcaption>Align Items set to Center</figcaption>
</figure>

<h3>Stretch</h3>
<p>The <code>align-items</code> value of <code>stretch</code> will just make every element as tall (if a row) or wide (if a column) as the tallest/widest element. In our case, we manually set the heights of every box, but if we remove all the heights, we get this:</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-items: stretch;
}</code>
</pre>
<figure>
<img alt=""Align Items set to Stretch"" height=""212"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-items-stretch.png"" width=""442""/>
<figcaption>Align Items set to Stretch</figcaption>
</figure>
<h3>Baseline</h3>
<p>The <code>align-items</code> value of <code>baseline</code> aligns all the baselines of the items. Because the baselines are all the same because the content in them is just a single letter, they look aligned like <code>flex-start</code> in our example.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-items: baseline;
}</code>
</pre>
<figure>
<img alt=""Align Items set to Baseline"" height=""347"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-items-baseline.png"" width=""459""/>
<figcaption>Align Items set to Baseline</figcaption>
</figure>

<h2 id=""align-content"">Align Content</h2>
<p>The <code>align-content</code> property defines the spacing between lines if they wrap. To properly demonstrate this property, we'll need more than 4 boxes, so let's do 12 boxes:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""item""&gt;A&lt;/div&gt;
    &lt;div class=""item""&gt;B&lt;/div&gt;
    &lt;div class=""item""&gt;C&lt;/div&gt;
    &lt;div class=""item""&gt;D&lt;/div&gt;
    &lt;div class=""item""&gt;E&lt;/div&gt;
    &lt;div class=""item""&gt;F&lt;/div&gt;
    &lt;div class=""item""&gt;G&lt;/div&gt;
    &lt;div class=""item""&gt;H&lt;/div&gt;
    &lt;div class=""item""&gt;I&lt;/div&gt;
    &lt;div class=""item""&gt;J&lt;/div&gt;
    &lt;div class=""item""&gt;K&lt;/div&gt;
    &lt;div class=""item""&gt;L&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    flex-wrap: wrap;
    background-color: #ccc;
    height: 20rem;
    align-content: flex-start;
}

.item {
    width: 5rem;
    height: 5rem;
    background-color: lightblue;
    border: solid 1px blue;
}</code>
</pre>
<p>These are the valid values for <code>align-content</code>:</p>
<ul>
<li><code>flex-start</code></li>
<li><code>flex-end</code></li>
<li><code>center</code></li>
<li><code>stretch</code></li>
<li><code>space-between</code></li>
<li><code>space-around</code></li>
</ul>
<h3>Flex Start</h3>
<p>The <code>align-content</code> value of <code>flex-start</code> displays the lines the top (if it's a row) or the left (if it's a column).</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-content: flex-start;
}</code>
</pre>
<figure>
<img alt=""Align Content set to Flex Start"" height=""463"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-content-flex-start.png"" width=""571""/>
<figcaption>Align Content set to Flex Start</figcaption>
</figure>

<h3>Flex End</h3>
<p>The <code>align-content</code> value of <code>flex-end</code> displays the lines at the bottom (if it's a row) or to the left (if it's a column).</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-content: flex-end;
}</code>
</pre>
<figure>
<img alt=""Align Content set to Flex End"" height=""463"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-content-flex-end.png"" width=""571""/>
<figcaption>Align Content set to Flex End</figcaption>
</figure>
<h3>Center</h3>
<p>The <code>align-content</code> value of <code>center</code> puts the lines in the center of the row or column.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-content: center;
}</code>
</pre>
<figure>
<img alt=""Align Content set to Center"" height=""463"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-content-center.png"" width=""571""/>
<figcaption>Align Content set to Center</figcaption>
</figure>

<h3>Stretch</h3>
<p>The <code>align-content</code> value of <code>stretch</code> is the default value, which stretch the lines to take up any remaining space.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-content: stretch;
}</code>
</pre>
<figure>
<img alt=""Align Content set to Stretch"" height=""463"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-content-stretch.png"" width=""571""/>
<figcaption>Align Content set to Stretch</figcaption>
</figure>
<h3>Space Between</h3>
<p>The <code>align-content</code> value of <code>space-between</code> ensures that lines are evenly distributed with regards to space in between.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-content: space-between;
}</code>
</pre>
<figure>
<img alt=""Align Content set to Space Between"" height=""463"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-content-space-between.png"" width=""571""/>
<figcaption>Align Content set to Space Between</figcaption>
</figure>

<h3>Space Around</h3>
<p>The <code>align-content</code> value of <code>space-around</code> makes it so that there is even space around each line.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    align-content: space-around;
}</code>
</pre>
<figure>
<img alt=""Align Content set to Space Around"" height=""463"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-content-space-around.png"" width=""571""/>
<figcaption>Align Content set to Space Around</figcaption>
</figure>
<h2 id=""order"">Order</h2>
<p>The <code>order</code> CSS property allows us the ability to change the order in which things are rendered without needing to change the markup for it.</p>
<p>Every item's default <code>order</code> is <code>0</code> and so they will just be rendered in the order that they appear. However, consider this scenario:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""item a""&gt;A&lt;/div&gt;
    &lt;div class=""item""&gt;B&lt;/div&gt;
    &lt;div class=""item""&gt;C&lt;/div&gt;
    &lt;div class=""item""&gt;D&lt;/div&gt;
    &lt;div class=""item""&gt;E&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
}

.item {
    width: 5rem;
    height: 5rem;
    background-color: lightblue;
    border: solid 1px blue;
}

.a {
    order: 1;
}</code>
</pre>
<figure>
<img alt=""A look at using Order with Flexbox."" height=""270"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/order.png"" width=""472""/>
<figcaption>A look at using Order with Flexbox.</figcaption>
</figure>
<p>Because <strong>A</strong> has an <code>order</code> of <code>1</code>, it got rendered <strong>last</strong>, since 1 is greater than 0. Items are rendered in numerical order, and you are allowed negative numbers if you'd like. This is a powerful way to precisely control the order of items inside your row or column.</p>

<h2 id=""flex-grow"">Flex Grow</h2>
<p>The <code>flex-grow</code> property defines how items in a row or column grow relative to each other. By default, the value is <code>0</code>, which basically means that the items themselves determine their own width. By setting every item to a <code>flex-grow</code> of <code>1</code>, every item will take up the same amount of space since they are equal, relative to one another.</p>
<p>However, watch what happens when we give 1 item a <code>flex-grow</code> of <code>2</code>, while leaving the rest at a <code>flex-grow</code> of <code>1</code>:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""item""&gt;A&lt;/div&gt;
    &lt;div class=""item""&gt;B&lt;/div&gt;
    &lt;div class=""item double""&gt;C&lt;/div&gt;
    &lt;div class=""item""&gt;D&lt;/div&gt;
    &lt;div class=""item""&gt;E&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
}

.item {
    background-color: lightblue;
    border: solid 1px blue;
    height: 5rem;
    flex-grow: 1;
}

.double {
    flex-grow: 2;
}</code>
</pre>
<figure>
<img alt=""Using flex-grow to double a box's width."" height=""246"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/flex-grow.png"" width=""560""/>
<figcaption>Using flex-grow to double a box's width.</figcaption>
</figure>
<p>As you would expect, the middle box, with it's <code>flex-grow</code> of <code>2</code>, maintained twice as large of a width as the other boxes. If you resized your browser, it would remain twice as large.</p>
<p><code>flex-grow</code> is an awesome way to control the sizes of the items relative to one another to ensure that each item is given the space they need.</p>
<h2 id=""flex-shrink"">Flex Shrink</h2>
<p>The opposite of <code>flex-grow</code> is <code>flex-shrink</code>. As you would imagine, this property controls how an item will shrink relative to other items. The default value is <code>1</code> and the bigger the value, the <strong>faster</strong> it will shrink.</p>
<p>Let's have one box have a <code>flex-shrink</code> of <code>0</code> and another with <code>2</code>:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""item""&gt;A&lt;/div&gt;
    &lt;div class=""item b""&gt;B&lt;/div&gt;
    &lt;div class=""item""&gt;C&lt;/div&gt;
    &lt;div class=""item d""&gt;D&lt;/div&gt;
    &lt;div class=""item""&gt;E&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
}

.item {
    background-color: lightblue;
    border: solid 1px blue;
    height: 5rem;
    width: 10rem;
}

.b {
    flex-shrink: 0;
}

.d {
    flex-shrink: 2;
}</code>
</pre>
<figure>
<img alt=""Using flex-shrink to change how fast an item shrinks."" height=""246"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/flex-shrink.png"" width=""535""/>
<figcaption>Using flex-shrink to change how fast an item shrinks.</figcaption>
</figure>
<p>The box with the letter <code>B</code> in it shrunk slower than the rest because it had a smaller value for <code>flex-shrink</code>, whereas the box with the letter <code>D</code> in it shrunk faster because it had a larger value for <code>flex-shrink</code>.</p>
<aside class=""aside__tip"">
<p>    Keep in mind that <code>flex-shrink</code> only applies when there is a lack of space. If there is enough space, no shrinking will be applied.</p>
</aside>

<h2 id=""flex-basis"">Flex Basis</h2>
<p>The <code>flex-basis</code> CSS property is the <strong>flex</strong> way of defining an element's width or height. Remember that you can have a row or a column. With <code>flex-basis</code> it will apply the length provided as a width if in a row, or a height if in a column. There is otherwise no difference between <code>flex-basis</code> and <code>width</code> or <code>height</code>.</p>
<p>Let's show the use of <code>flex-basis</code> in this simple example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""item""&gt;A&lt;/div&gt;
    &lt;div class=""item""&gt;B&lt;/div&gt;
    &lt;div class=""item flex-basis""&gt;C&lt;/div&gt;
    &lt;div class=""item""&gt;D&lt;/div&gt;
    &lt;div class=""item""&gt;E&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
}
.item {
    background-color: lightblue;
    border: solid 1px blue;
    height: 5rem;
    width: 5rem;
}
.flex-basis {
    flex-basis: 10rem;
}</code>
</pre>
<figure>
<img alt=""Using flex-basis to give an item in a row a width."" height=""213"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/flex-basis.png"" width=""535""/>
<figcaption>Using flex-basis to give an item in a row a width.</figcaption>
</figure>
<h2 id=""align-self"">Align Self</h2>
<p>The <code>align-self</code> property allows <strong>individual</strong> flex items to override the alignment specified by <code>align-items</code>. For example, you could have an instance where every item is aligned with <code>flex-end</code> but one item is aligned <code>center</code>:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""item""&gt;A&lt;/div&gt;
    &lt;div class=""item""&gt;B&lt;/div&gt;
    &lt;div class=""item center""&gt;C&lt;/div&gt;
    &lt;div class=""item""&gt;D&lt;/div&gt;
    &lt;div class=""item""&gt;E&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: flex;
    background-color: #ddd;
    height: 20rem;
    align-items: flex-end;
}
.item {
    background-color: lightblue;
    border: solid 1px blue;
    height: 5rem;
    width: 5rem;
}
.center {
    align-self: center;
}</code>
</pre>
<figure>
<img alt=""Using align-self to give an item it's own align-items value."" height=""433"" loading=""lazy"" src=""https://sabe.io/classes/css/flexbox/align-self.png"" width=""582""/>
<figcaption>Using align-self to give an item it's own align-items value.</figcaption>
</figure>
<p>We let the box with the letter <code>C</code> in it align itself center whereas the rest of the items were aligned <code>flex-end</code>. This technique allows individual flex items to behave and render differently from the rest of the items.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox"" rel=""noopener"" target=""_blank"">Flexbox - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Grid Layout","css-grid-layout","The Grid CSS property gives you a powerful way to natively create a grid layout for your page to follow.","DRAFT","

<p>For years, CSS has been infamous for the difficulty of designing a grid layout for a page. CSS Grid aims to fix this situation by offering a native grid layout system. With CSS Grid, you can easily and beautifully define a two-dimensional grid layout using less markup and less styles. Before we get into learning how to use CSS Grid, there's some terminology that we should become familiar with.</p>
<h2 id=""grid-lines"">Grid Lines</h2>
<p>Grid lines are the lines that make up the grid. They divide up the entire area into rows and columns. The grid lines are not visible, but they are used to calculate the size of the cells.</p>
<figure>
<img alt=""Diagram showing a Grid line."" height=""400"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-lines.png"" width=""600""/>
<figcaption>Diagram showing a Grid line.</figcaption>
</figure>

<h2 id=""grid-cell"">Grid Cell</h2>
<p>A grid cell is a single unit in the grid formed from the grid lines. Essentially, it just means one box. The grid cell is the smallest unit of the grid.</p>
<figure>
<img alt=""Diagram showing a Grid cell."" height=""400"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-cell.png"" width=""600""/>
<figcaption>Diagram showing a Grid cell.</figcaption>
</figure>
<h2 id=""grid-area"">Grid Area</h2>
<p>A grid area is the rectangular space formed between different horizontal and vertical grid lines.</p>
<figure>
<img alt=""Diagram showing a Grid area."" height=""400"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-area.png"" width=""600""/>
<figcaption>Diagram showing a Grid area.</figcaption>
</figure>

<h2 id=""grid-row"">Grid Row</h2>
<p>A grid row is all the grid cells between two consecutive horizontal grid lines.</p>
<figure>
<img alt=""Diagram showing a Grid row."" height=""400"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-row.png"" width=""600""/>
<figcaption>Diagram showing a Grid row.</figcaption>
</figure>
<h2 id=""grid-column"">Grid Column</h2>
<p>A grid column is all the grid cells between two consecutive vertical grid lines.</p>
<figure>
<img alt=""Diagram showing a Grid column."" height=""400"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-column.png"" width=""600""/>
<figcaption>Diagram showing a Grid column.</figcaption>
</figure>

<h2 id=""grid-gap"">Grid Gap</h2>
<p>A grid gap is the gap of space between rows and columns. Alternatively, this is the space between grid cells.</p>
<figure>
<img alt=""Diagram showing a Grid gap."" height=""400"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-gap.png"" width=""600""/>
<figcaption>Diagram showing a Grid gap.</figcaption>
</figure>
<h2 id=""use-grid"">Use Grid</h2>
<p>Now that we have the terminology down, let's get started on making our first CSS grid. For simplicity's sake, let's create a <strong>3</strong> by <strong>2</strong> grid. That is to say a grid with 3 columns and 2 rows. Let's start with the markup:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""cell""&gt;&lt;/div&gt;
    &lt;div class=""cell""&gt;&lt;/div&gt;
    &lt;div class=""cell""&gt;&lt;/div&gt;
    &lt;div class=""cell""&gt;&lt;/div&gt;
    &lt;div class=""cell""&gt;&lt;/div&gt;
    &lt;div class=""cell""&gt;&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<p>To define a grid, we must use the <code>display</code> property with a value of <code>grid</code>:</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: grid;
}</code>
</pre>
<p>The way to define rows and columns is using the <code>grid-template-columns</code> and <code>grid-template-rows</code> properties. What you provide as the value is the width or height of each of the rows and columns. Every value provided creates a new row or column. Let's say we wanted squares each <code>200px</code> in length:</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: grid;
    grid-template-columns: 200px 200px 200px;
    grid-template-rows: 200px 200px;
}</code>
</pre>
<p>Since we passed in three values for <code>grid-template-columns</code>, three columns were created, each 200px wide. We also passed in two values for <code>grid-template-rows</code>, each 200px tall.</p>
<p>Here is our grid so far:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Grid&lt;/title&gt;
        &lt;style&gt;
            .container {
                display: grid;
                grid-template-columns: 200px 200px 200px;
                grid-template-rows: 200px 200px;
            }
            .cell {
                background-color: lightblue;
                border: solid 1px blue;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""container""&gt;
            &lt;div class=""cell""&gt;&lt;/div&gt;
            &lt;div class=""cell""&gt;&lt;/div&gt;
            &lt;div class=""cell""&gt;&lt;/div&gt;
            &lt;div class=""cell""&gt;&lt;/div&gt;
            &lt;div class=""cell""&gt;&lt;/div&gt;
            &lt;div class=""cell""&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Our first CSS grid!"" height=""511"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/css-grid.png"" width=""627""/>
<figcaption>Our first CSS grid!</figcaption>
</figure>

<h3>Grid Gap</h3>
<p>Because we have yet to define a grid gap, all of the grid cells are touching one another. Let's fix that by defining a grid gap. This is done with the <code>grid-gap</code> property where the value is two lengths, one for the row and the other for the column. If you just pass in a single value, it will apply it to both the rows and columns.</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: grid;
    grid-template-columns: 200px 200px 200px;
    grid-template-rows: 200px 200px;
    grid-gap: 1rem;
}</code>
</pre>
<p>With the new grid gap, our grid now looks like this:</p>
<figure>
<img alt=""A CSS grid with a grid gap."" height=""539"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-with-gap.png"" width=""659""/>
<figcaption>A CSS grid with a grid gap.</figcaption>
</figure>
<h2 id=""fr-fraction-unit"">FR (Fraction) Unit</h2>
<p>Along with CSS Grid comes a new unit specifically for this called <strong>fraction</strong>. The unit is used relative to how much space is left in the row or column. That means that <code>1fr</code> takes up 100% of the remaining space. However, this is also relative to other cells, so if we set all our columns to <code>1fr</code> the browser will just evenly divide up the space, giving us equally-spaced columns:</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 200px 200px;
    grid-gap: 1rem;
}</code>
</pre>
<figure>
<img alt=""A CSS grid using the fr unit."" height=""530"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-fr.png"" width=""367""/>
<figcaption>A CSS grid using the fr unit.</figcaption>
</figure>
<p>Because we gave each of our three columns a width of <code>1fr</code> the browser divided up the remaining space by three. The row height, left untouched from before, simply remained the same at <code>200px</code>.</p>
<p>As you might expect, you can even mix and match units and the browser will do the hard work for you. Let's say you wanted the first column to be 150px, the second column to take up 20% of whatever is left, and then the third column take whatever is left of that:</p>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: grid;
    grid-template-columns: 150px 20% 1fr;
    grid-template-rows: 100px 100px;
    grid-gap: 1rem;
}</code>
</pre>
<figure>
<img alt=""A CSS grid using mixed units."" height=""336"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-mixed-units.png"" width=""436""/>
<figcaption>A CSS grid using mixed units.</figcaption>
</figure>

<h2 id=""grid-start-and-end"">Grid Start and End</h2>
<p>So far our items have just been populated in the order they appear in our markup, but we have the power to control that by defining at what lines an item starts and ends at. Before we go any further, let's look at a diagram that shows how CSS defines lines across rows and columns:</p>
<figure>
<img alt=""All the lines on a grid."" height=""450"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/all-grid-lines.png"" width=""650""/>
<figcaption>All the lines on a grid.</figcaption>
</figure>
<p>From the top-left corner, the lines start at 1 and move up as you go across and down. That means that the first cell in the diagram starts at row line 1 and ends at row line 2, and starts at column line 1 and ends at column line 2. As another example, the bottom-right-most cell starts at row line 2 and ends at row line 3, and starts at column line 3 and ends at column line 4.</p>
<p>As you would expect, there are CSS properties to define this and they are called <code>grid-row</code> and <code>grid-column</code>. Let's see this in action by making the first element render in the the middle bottom spot:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""cell special""&gt;1&lt;/div&gt;
    &lt;div class=""cell""&gt;2&lt;/div&gt;
    &lt;div class=""cell""&gt;3&lt;/div&gt;
    &lt;div class=""cell""&gt;4&lt;/div&gt;
    &lt;div class=""cell""&gt;5&lt;/div&gt;
    &lt;div class=""cell""&gt;6&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: grid;
    grid-template-columns: 100px 100px 100px;
    grid-template-rows: 100px 100px;
    grid-gap: 1rem;
}

.cell {
    background-color: lightblue;
    border: solid 1px blue;
    line-height: 100px;
    text-align: center;
}

.special {
    grid-row: 2 / 3;
    grid-column: 2 / 3;
}</code>
</pre>
<figure>
<img alt=""Showing the use of grid-row and grid-column."" height=""334"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-row-grid-column.png"" width=""384""/>
<figcaption>Showing the use of grid-row and grid-column.</figcaption>
</figure>
<aside class=""aside__tip"">
<p>    In general, the syntax for the value of the <code>grid-row</code> and <code>grid-column</code> CSS properties is in the form <code>(line-start) / (line-end)</code>.</p>
</aside>
<p>As expected, since we gave the first cell the <code>special</code> class which had <code>grid-row</code> and <code>grid-column</code> defined, it was placed in the spot we told it to be at, instead of at the top left position. The other cells then filled in the space in the order they would have normally.</p>
<h2 id=""named-grid-lines"">Named Grid Lines</h2>
<p>While it was easy enough to reference the grid lines on our grid, it might not be so straightforward on a bigger or more complex grid. Thankfully, CSS allows us to give the lines a name so that we can reference them that way instead of by their number. It makes the grid easier to comprehend and maintain.</p>
<p>For simplicity's sake, let's use the same example as before, putting the first cell in a new position, but do so with a named line instead:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""cell special""&gt;1&lt;/div&gt;
    &lt;div class=""cell""&gt;2&lt;/div&gt;
    &lt;div class=""cell""&gt;3&lt;/div&gt;
    &lt;div class=""cell""&gt;4&lt;/div&gt;
    &lt;div class=""cell""&gt;5&lt;/div&gt;
    &lt;div class=""cell""&gt;6&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: grid;
    grid-template-columns:
        [column-1] 100px
        [column-2] 100px
        [column-3] 100px
        [column-4];
    grid-template-rows:
        [row-1] 100px
        [row-2] 100px
        [row-3] 100px
        [row-4];
    grid-gap: 1rem;
}

.cell {
    background-color: lightblue;
    border: solid 1px blue;
    line-height: 100px;
    text-align: center;
}

.special {
    grid-row: row-2 / row-3;
    grid-column: column-2 / column-3;
}</code>
</pre>
<figure>
<img alt=""Moving an item using named lines."" height=""334"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-named-lines.png"" width=""384""/>
<figcaption>Moving an item using named lines.</figcaption>
</figure>
<p>While in this example we are still using numbers in their names, nothing stops you from renaming <code>row-3</code> to <code>peanut-butter</code> if you wanted to. The point here is that you aren't forced to try and keep track of the row and column line numbers to build out your grid. You can just use named lines and the browser will figure out the rest.</p>

<h2 id=""template-areas"">Template Areas</h2>
<p>An arguably easier way to define a grid layout and where items start and end is with the use of <strong>template areas</strong>. With template areas, you just tell the browser how to layout your grid using plain written language. You literally give the different cells in your grid a unique name and define where it belongs relative to the other cells.</p>
<p>Let's say you wanted a grid where the top and bottom boxes covered an entire row, but the middle row was split across two different columns:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""cell top""&gt;1&lt;/div&gt;
    &lt;div class=""cell middle-1""&gt;2&lt;/div&gt;
    &lt;div class=""cell middle-2""&gt;3&lt;/div&gt;
    &lt;div class=""cell bottom""&gt;4&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.container {
    display: grid;
    grid-template-columns: 100px 100px;
    grid-template-rows: 100px 100px;
    grid-gap: 1rem;
    grid-template-areas:
        ""top 		top""
        ""middle-1   middle-2""
        ""bottom 	bottom"";
}

.cell {
    background-color: lightblue;
    border: solid 1px blue;
    line-height: 100px;
    text-align: center;
}

.top {
    grid-area: top;
}

.middle-1 {
    grid-area: middle-1;
}

.middle-2 {
    grid-area: middle-2;
}

.bottom {
    grid-area: bottom;
}</code>
</pre>
<figure>
<img alt=""Showing the use of grid-template-areas."" height=""451"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/grid-template-areas.png"" width=""407""/>
<figcaption>Showing the use of grid-template-areas.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""container"">
    <div class=""cell top"">1</div>
    <div class=""cell middle-1"">2</div>
    <div class=""cell middle-2"">3</div>
    <div class=""cell bottom"">4</div>
</div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.container {
    display: grid;
    grid-template-columns: 100px 100px;
    grid-template-rows: 100px 100px;
    grid-gap: 1rem;
    grid-template-areas:
      ""top 		top""
      ""middle-1 middle-2 ""
      ""bottom 	bottom"";
}

.cell {
    background-color: lightblue;
    border: solid 1px blue;
    line-height: 100px;
    text-align: center;
}

.top {
    grid-area: top;
}

.middle-1 {
    grid-area: middle-1;
}

.middle-2 {
    grid-area: middle-2;
}

.bottom {
    grid-area: bottom;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>No need to mess with numbers at all. You can define your grid inside the value of <code>grid-template-areas</code>, pass along the <code>grid-area</code> properties to the cells, and the browser takes care of the rest.</p>
<p>The magic is all in here:</p>
<pre class=""pre__block"">	<code class=""language-css"">grid-template-areas:
  ""top 		top""
  ""middle-1 middle-2 ""
  ""bottom 	bottom"";</code>
</pre>
<h2 id=""conclusion"">Conclusion</h2>
<p>A CSS Grid is a powerful and native way to define all kinds of grid layouts, from the simplest and basic to the more complex and sophisticated. The cool part is that they can even be used in conjunction with flexible boxes for even more control over your page!</p>
<figure>
<img alt=""Now building grids is as easy as playing with Legos!"" height=""293"" loading=""lazy"" src=""https://sabe.io/classes/css/grid/legos.png"" width=""555""/>
<figcaption>Now building grids is as easy as playing with Legos!</figcaption>
</figure>


<ul>
<li><a href=""https://mozilladevelopers.github.io/playground/css-grid/"" rel=""noopener"" target=""_blank"">Firefox Devtools Playground - CSS Grid</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"" rel=""noopener"" target=""_blank"">CSS Grid Layout - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Position","css-position","Knowing how to position elements on your page is very important. Learn how to position elements in this lesson.","DRAFT","

<p>You can use the <code>position</code> property to control exactly where the element gets rendered. Let's go over the four main values, <code>relative</code>, <code>absolute</code>, <code>fixed</code>, and <code>sticky</code>. Throughout this page, we'll work off of this example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Position&lt;/title&gt;
        &lt;style&gt;
            body {
                padding: 4rem;
                color: white;
            }

            .outer {
                background-color: #104dd4;
                padding: 1rem;
            }

            .inner {
                background-color: #9c1616;
                padding: 1rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""outer""&gt;
            Outer
            &lt;div class=""inner""&gt;
                Inner
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""A box inside a box."" height=""344"" loading=""lazy"" src=""https://sabe.io/classes/css/position/position.png"" width=""456""/>
<figcaption>A box inside a box.</figcaption>
</figure>
<h2 id=""relative-position"">Relative Position</h2>
<p>When you use <code>relative</code>, you can specify an offset from where it would usually render with the <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> properties.</p>
<p>Let's shift the inner box <strong>relative</strong> to the outer box.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Position: Relative&lt;/title&gt;
        &lt;style&gt;
            body {
                padding: 4rem;
                color: white;
            }

            .outer {
                background-color: #104dd4;
                padding: 1rem;
            }

            .inner {
                background-color: #9c1616;
                padding: 1rem;
                position: relative;
                top: 2rem;
                left: 1rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""outer""&gt;
            Outer
            &lt;div class=""inner""&gt;
                Inner
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of relative."" height=""344"" loading=""lazy"" src=""https://sabe.io/classes/css/position/position-relative.png"" width=""456""/>
<figcaption>An example of relative.</figcaption>
</figure>
<p>Notice how compared to the original layout where the inner box was neatly inside the outer box?</p>
<p>In the new layout, the browser first calculates the position of where the box should be, then <strong>offsets</strong> it by the given numbers, in this case <code>top: 2rem;</code> and <code>left: 1rem;</code>.</p>

<h2 id=""absolute-position"">Absolute Position</h2>
<p>The <code>absolute</code> value has a few interesting properties to it. It acts like <code>relative</code> except that instead of being relative to its original position, it will be relative to the <strong>closest parent</strong> that has a <code>position</code> value other than <code>static</code>.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Position: Absolute&lt;/title&gt;
        &lt;style&gt;
            body {
                padding: 4rem;
                color: white;
            }

            .outer {
                background-color: #104dd4;
                padding: 1rem;
            }

            .inner {
                background-color: #9c1616;
                padding: 1rem;
                position: absolute;
                top: 2rem;
                left: 1rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""outer""&gt;
            Outer
            &lt;div class=""inner""&gt;
                Inner
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of absolute."" height=""344"" loading=""lazy"" src=""https://sabe.io/classes/css/position/position-absolute.png"" width=""456""/>
<figcaption>An example of absolute.</figcaption>
</figure>
<p>In our example, that parent will just be the <strong>body</strong>, so that's why when you apply the same <code>top</code> and <code>left</code> values, the box moves relative to the page (body) instead of the outer box.</p>
<aside class=""aside__tip"">
<p>    When you use <code>absolute</code>, it is as if you removed the element from where it would otherwise be. Because of this, it doesn't take up space. That is why the blue outer box is smaller.</p>
</aside>
<h2 id=""fixed-position"">Fixed Position</h2>
<p>The <code>fixed</code> value acts very similarly to <code>absolute</code> except that it will be positioned relative to the browser's window, and stay in that spot <strong>even when the page is scrolled up or down</strong>.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Position: Fixed&lt;/title&gt;
        &lt;style&gt;
            body {
                padding: 4rem;
                color: white;
            }

            .outer {
                background-color: #104dd4;
                padding: 1rem;
            }

            .inner {
                background-color: #9c1616;
                padding: 1rem;
                position: fixed;
                top: 0;
                left: 0;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""outer""&gt;
            Outer
            &lt;div class=""inner""&gt;
                Inner
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of fixed."" height=""241"" loading=""lazy"" src=""https://sabe.io/classes/css/position/position-fixed.png"" width=""456""/>
<figcaption>An example of fixed.</figcaption>
</figure>
<p>You can see on the right that my scrollbar is halfway but the inner box is still positioned <code>top: 0;</code> and <code>left: 0;</code> relative to the screen.</p>

<h2 id=""sticky-position"">Sticky Position</h2>
<p>The <code>sticky</code> value acts like <code>absolute</code> until you scroll down far enough which it then becomes <code>fixed</code>. This is useful for elements that need to stay at the top of the page, but only when you scroll down.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Position: Sticky&lt;/title&gt;
        &lt;style&gt;
            div {
                height: 3rem;
            }

            div:nth-child(odd) {
                background-color: lightblue;
            }

            div:nth-child(even) {
                background-color: pink;
            }

            div.sticky {
                position: sticky;
                background-color: red;
                top: 0;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;I am not sticky!&lt;/div&gt;
        &lt;div class=""sticky""&gt;I am sticky!&lt;/div&gt;
        &lt;div&gt;I am not sticky!&lt;/div&gt;
        &lt;div&gt;I am not sticky!&lt;/div&gt;
        &lt;div&gt;I am not sticky!&lt;/div&gt;
        &lt;div&gt;I am not sticky!&lt;/div&gt;
        &lt;div&gt;I am not sticky!&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of sticky."" height=""315"" loading=""lazy"" src=""https://sabe.io/classes/css/position/position-sticky.png"" width=""630""/>
<figcaption>An example of sticky.</figcaption>
</figure>
<p>Try the demo of this below!</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div>I am not sticky!</div>
<div class=""sticky"">I am sticky!</div>
<div>I am not sticky!</div>
<div>I am not sticky!</div>
<div>I am not sticky!</div>
<div>I am not sticky!</div>
<div>I am not sticky!</div>
<div>I am not sticky!</div>
<div>I am not sticky!</div>
<div>I am not sticky!</div>
<div>I am not sticky!</div>
<div>I am not sticky!</div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">div {
    height: 3rem;
}

div:nth-child(odd) {
    background-color: lightblue;
}

div:nth-child(even) {
    background-color: pink;
}

div.sticky {
    position: sticky;
    background-color: red;
    top: 0;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>Essentially, if you want an element to remain on the page but allow for some scrolling, you can use <code>sticky</code>. It will appear naturally on the screen but never fully exit it after you scroll as it will just stick to the top of the page.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/position"" rel=""noopener"" target=""_blank"">Position - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Float and Clear","css-float-and-clear","The float property specifies whether an element should be placed to the left or right of its container.","DRAFT","

<h2 id=""float"">Float</h2>
<p>Floats in CSS allows you to move an element to the <strong>left</strong> or the <strong>right</strong> using the <code>float</code> property. The box floats and then the following content moves up to take the space.</p>
<p>Let's say you had this:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Float&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""pic""&gt;
            &lt;img src=""cupcake.png"" /&gt;
        &lt;/div&gt;
        &lt;p&gt;Cupcakes are delicious and I want to eat 100 of them.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of page without float."" height=""579"" loading=""lazy"" src=""https://sabe.io/classes/css/float/float.png"" width=""630""/>
<figcaption>An example of page without float.</figcaption>
</figure>
<p>Now, say you wanted the the picture to <strong>float</strong> to the <strong>left</strong>. This will make the text move up to the space that the picture once took.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Float&lt;/title&gt;
        &lt;style&gt;
            .pic {
                float: left;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""pic""&gt;
            &lt;img src=""cupcake.png"" /&gt;
        &lt;/div&gt;
        &lt;p&gt;Cupcakes are delicious and I want to eat 100 of them.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of a page with float."" height=""579"" loading=""lazy"" src=""https://sabe.io/classes/css/float/float-left.png"" width=""630""/>
<figcaption>An example of a page with float.</figcaption>
</figure>
<p>Float can also be set to <code>none</code> to remove the float. Also, elements can float next to one another.</p>

<h2 id=""clear"">Clear</h2>
<p>Sometimes, even though you are using float, you might not want the following content to take up the open space. To solve this, use the <code>clear</code> property.</p>
<p>You have the option to clear just the left floated boxes with <code>left</code>, the right boxes floated with <code>right</code>, or you can clear both using <code>both</code>.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Clear&lt;/title&gt;
        &lt;style&gt;
            .pic {
                float: left;
            }
            .text {
                clear: both;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""pic""&gt;
            &lt;img src=""cupcake.png"" /&gt;
        &lt;/div&gt;
        &lt;p class=""text""&gt;Cupcakes are delicious and I want to eat 100 of them.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of a page with float and clear."" height=""555"" loading=""lazy"" src=""https://sabe.io/classes/css/float/clear.png"" width=""506""/>
<figcaption>An example of a page with float and clear.</figcaption>
</figure>
<p>When an element is cleared, the following content will move up to take the space.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/float"" rel=""noopener"" target=""_blank"">CSS Float</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/clear"" rel=""noopener"" target=""_blank"">CSS Clear - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Columns","css-columns","Columns are popular in print media like newspapers and magazines, and CSS makes it easy to use your own.","DRAFT","

<p>You've seen multi-column layouts before. Newspapers, magazines, and books all utilize this technique to help divide their content up into columns that are easier to digest and read.</p>
<p>Luckily for us, CSS makes it really easy for us to define and use our own columns. We'll explore how this is done using <strong>CSS columns</strong> and their properties.</p>
<h2 id=""column-count"">Column Count</h2>
<p>The most basic way to define a column layout is by applying a <code>column-count</code> property on a containing element. The value will be the number of columns you would like. For example, if you want to create a layout with 3 columns, you would use the following:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;main class=""columns""&gt;
    &lt;p&gt;(content here...)&lt;/p&gt;
    &lt;p&gt;(content here...)&lt;/p&gt;
    &lt;p&gt;(content here...)&lt;/p&gt;
&lt;/main&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.columns {
    column-count: 3;
}</code>
</pre>
<figure>
<img alt=""Using column count to set up columns."" height=""252"" loading=""lazy"" src=""https://sabe.io/classes/css/columns/column-count.png"" width=""470""/>
<figcaption>Using column count to set up columns.</figcaption>
</figure>
<p>It's really that simple. With just that single line of CSS, the browser can handle the rest for us and create the columns for us.</p>

<h2 id=""column-width"">Column Width</h2>
<p>An alternative way to define columns is to provide a width for your columns with <code>column-width</code>. This allows the browser to determine how many columns it can display. With a larger screen, it can display more of them, and with a smaller screen, it can display less of them. Either way, you don't specify how many columns you want, only how wide you want each column to be.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;main class=""columns""&gt;
    &lt;p&gt;(content here...)&lt;/p&gt;
    &lt;p&gt;(content here...)&lt;/p&gt;
    &lt;p&gt;(content here...)&lt;/p&gt;
&lt;/main&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.columns {
    column-width: 6rem;
}</code>
</pre>
<figure>
<img alt=""Using column width to set up columns."" height=""276"" loading=""lazy"" src=""https://sabe.io/classes/css/columns/column-width.png"" width=""562""/>
<figcaption>Using column width to set up columns.</figcaption>
</figure>
<aside class=""aside__tip"">
<p>    It is important to note that defining a column width, by definition, allows for the layout to be responsive because the columns will adjust with the screen size.</p>
</aside>
<h2 id=""column-gap"">Column Gap</h2>
<p>After you're happy with your columns, you can specify how wide you want the space between columns to be. You do this with the <code>column-gap</code> property, which takes a length as the value. The length can be a percentage or a length. For example, if you want a gap of 2rem between columns, you would use the following:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;main class=""columns""&gt;
    &lt;p&gt;(content here...)&lt;/p&gt;
    &lt;p&gt;(content here...)&lt;/p&gt;
&lt;/main&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.columns {
    column-count: 2;
    column-gap: 2rem;
}</code>
</pre>
<figure>
<img alt=""Using 2rem column gap to add some space between our columns."" height=""276"" loading=""lazy"" src=""https://sabe.io/classes/css/columns/column-gap-1.png"" width=""468""/>
<figcaption>Using 2rem column gap to add some space between our columns.</figcaption>
</figure>
<p>The image above shows how the 2 columns look like with a <code>2rem</code> gap in between them, but look at how they look with a <code>4rem</code> gap in between.</p>
<pre class=""pre__block"">	<code class=""language-css"">.columns {
    column-count: 2;
    column-gap: 4rem;
}</code>
</pre>
<figure>
<img alt=""Using 4rem column gap to add even more space between our columns."" height=""276"" loading=""lazy"" src=""https://sabe.io/classes/css/columns/column-gap-2.png"" width=""468""/>
<figcaption>Using 4rem column gap to add even more space between our columns.</figcaption>
</figure>
<p>The difference is pretty noticeable!</p>

<h2 id=""column-rule"">Column Rule</h2>
<p>In some cases, columns have a line (or rule) in between them to more clearly separate them. Other times, the line exists more for style and design. Either way, you can very easily define your own rule using <code>column-rule</code>, and it even uses the same values as as borders take.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;main class=""columns""&gt;
    &lt;p&gt;(content here...)&lt;/p&gt;
    &lt;p&gt;(content here...)&lt;/p&gt;
&lt;/main&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">.columns {
    column-count: 2;
    column-rule: 0.25rem double red;
}</code>
</pre>
<figure>
<img alt=""Using column rule to add a line separating our columns."" height=""276"" loading=""lazy"" src=""https://sabe.io/classes/css/columns/column-rule.png"" width=""447""/>
<figcaption>Using column rule to add a line separating our columns.</figcaption>
</figure>
<p>As a refresher, these are all the styles that the column rule can take:</p>
<ul>
<li><code>solid</code></li>
<li><code>dotted</code></li>
<li><code>dashed</code></li>
<li><code>double</code></li>
<li><code>inset</code></li>
<li><code>outset</code></li>
<li><code>groove</code></li>
<li><code>ridge</code></li>
</ul>
<p>Columns are a widely used layout most popular with print media and CSS gives us some very powerful properties for defining and utilizing columns ourselves.</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/columns"" rel=""noopener"" target=""_blank"">Columns - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Page Layout Techniques","css-page-layout-techniques","Learn the many techniques you can use to properly layout your elements on the page including using flexbox and grid.","DRAFT","

<p>Arguably one of the most difficult things to wrap your head around in CSS is how to properly <strong>layout</strong> elements on the page. In this lesson, we're going to break it down, and give concrete examples and techniques to help you layout your pages. We'll start with the basics, and then move on to more advanced techniques.</p>
<h2 id=""two-column-page-layout"">Two-column Page Layout</h2>
<p>Let's say you wanted a <strong>two-column page</strong>, which tends to be pretty common. You can use <code>flex</code> for this.</p>
<p>Say this is your markup:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;h1&gt;2 Columns&lt;/h1&gt;
&lt;div class=""columns""&gt;
    &lt;div&gt;
        &lt;h2&gt;First Column&lt;/h2&gt;
        &lt;p&gt;Has ea forensibus definiebas, vis iudicabit voluptatum ad. Amet praesent sea et. Minim petentium reprehendunt id per.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;h2&gt;Second Column&lt;/h2&gt;
        &lt;p&gt;Te habeo eripuit cum, vix ei quot noluisse maiestatis, ea solet eruditi percipit quo. Dicant iisque vel ei, ius id imperdiet inciderint accommodare.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<figure>
<img alt=""2 columns before applying flex."" height=""410"" loading=""lazy"" src=""https://sabe.io/classes/css/page-layout-techniques/2-columns.png"" width=""550""/>
<figcaption>2 columns before applying flex.</figcaption>
</figure>
<p>To get the two columns we want, we need to give the parent element a <code>display: flex</code> and then give each column a <code>flex: 1</code> so that they take up equal space.</p>
<pre class=""pre__block"">	<code class=""language-css"">.columns {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}

.columns &gt; div {
    flex: 1
}</code>
</pre>
<p>When you apply these styles, you get this:</p>
<figure>
<img alt=""2 columns after using flex."" height=""410"" loading=""lazy"" src=""https://sabe.io/classes/css/page-layout-techniques/2-columns-using-flex.png"" width=""550""/>
<figcaption>2 columns after using flex.</figcaption>
</figure>

<h2 id=""sidebar-navigation-layout-with-position"">Sidebar Navigation Layout with Position</h2>
<p>Creating a <strong>sidebar</strong> for navigation is also a pretty popular thing you see in websites. After all, why not? They're convenient and always right next to your content.</p>
<p>Let's tackle this using <code>position</code> this time.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Sidebar Navigation&lt;/title&gt;
        &lt;style&gt;
            body, h1 {
                margin: 0;
            }

            .navigation {
                position: absolute;
                left: 0;
                width: 10rem;
                height: 100%;
                background-color: lightgray;
                text-align: center;
            }

            .navigation ul {
                padding: 0;
                list-style-type: none;
            }

            .navigation li {
                padding: 1rem;
            }

            .content {
                padding-top: 1rem;
                margin-left: 12rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;nav class=""navigation""&gt;
            &lt;span&gt;Logo Here&lt;/span&gt;
            &lt;ul&gt;
                &lt;li&gt;Link #1&lt;/li&gt;
                &lt;li&gt;Link #2&lt;/li&gt;
                &lt;li&gt;Link #3&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/nav&gt;
        &lt;div class=""content""&gt;
            &lt;h1&gt;Content Title&lt;/h1&gt;
            &lt;div&gt;
                &lt;h2&gt;First Paragraph&lt;/h2&gt;
                &lt;p&gt;Has ea forensibus definiebas, vis iudicabit voluptatum ad. Amet praesent sea et. Minim petentium reprehendunt id per.&lt;/p&gt;
            &lt;/div&gt;
            &lt;div&gt;
                &lt;h2&gt;Second Paragraph&lt;/h2&gt;
                &lt;p&gt;Te habeo eripuit cum, vix ei quot noluisse maiestatis, ea solet eruditi percipit quo. Dicant iisque vel ei, ius id imperdiet inciderint accommodare.&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of sidebar navigation layout."" height=""449"" loading=""lazy"" src=""https://sabe.io/classes/css/page-layout-techniques/sidebar-navigation.png"" width=""727""/>
<figcaption>An example of sidebar navigation layout.</figcaption>
</figure>
<p>Our <code>navigation</code> element is being positioned <code>absolute</code> with a left value of <strong>0</strong>. This makes our navigation links stay on the left side of the page. Also important to note that it was given a width of <code>10 rem</code>.</p>
<p>Then, our <code>content</code> is given a <code>margin-left</code> of <code>12 rem</code>. This makes it so that all the content is rendered to the right of <code>navigation</code>.</p>
<h2 id=""flexbox-layout"">Flexbox Layout</h2>
<p>Alternatively, you can accomplish a pretty similar layout to the one above by instead using a flexible box to layout the page:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Flexbox Layout&lt;/title&gt;
        &lt;style&gt;
            body {
                margin: 0;
                min-height: 100vh;
                background: #ccc;
                display: flex;
                flex-direction: column;
            }

            .header, .footer {
                height: 3rem;
                background: #777;
                color: white;
            }

            .content {
                display: flex;
                flex: 1;
                background: #999;
                color: #000;
            }

            .main {
                flex: 1;
                background: #eee;
            }

            .sidebar {
                width: 10rem;
                background: #ccc;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;header class=""header""&gt;Header&lt;/header&gt;
        &lt;main class=""content""&gt;
            &lt;aside class=""sidebar""&gt;Sidebar&lt;/aside&gt;
            &lt;section class=""main""&gt;Main Content&lt;/section&gt;
        &lt;/main&gt;
        &lt;footer class=""footer""&gt;Footer&lt;/footer&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""An example of using flex box for layout."" height=""492"" loading=""lazy"" src=""https://sabe.io/classes/css/page-layout-techniques/flexbox-layout.png"" width=""594""/>
<figcaption>An example of using flex box for layout.</figcaption>
</figure>
<p>In this example, we make the page stretch vertically to take up the entire screen thanks to <code>min-height: 100vh</code>. Then, we stretch <code>content</code> and <code>main</code> so that the main content gets the <strong>remaining</strong> space that <code>sidebar</code> isn't using. By putting the header before and the footer after the content, the rest of the page renders just how we want it to.</p>

<h2 id=""grid-layout"">Grid Layout</h2>
<p>As we've seen in our lesson on CSS grids, grids were created for just this purpose of defining a layout for our page. Let's take a look at the same example as above done using CSS grids:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;div class=""container""&gt;
    &lt;div class=""header""&gt;Header&lt;/div&gt;
    &lt;div class=""sidebar""&gt;Sidebar&lt;/div&gt;
    &lt;div class=""content""&gt;Main Content&lt;/div&gt;
    &lt;div class=""footer""&gt;Footer&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
<pre class=""pre__block"">	<code class=""language-css"">html, body, .container {
    width: 100%;
    height: 100%;
    margin: 0;
}

.container {
    display: grid;
    grid-template-columns: 12rem 1fr;
    grid-template-rows: 4rem 1fr 4rem;
    grid-template-areas:
        ""header header""
        ""sidebar content""
        ""footer footer"";
}

.header {
  grid-area: header;
  background-color: lightblue;
}

.sidebar {
  grid-area: sidebar;
  background-color: pink;
}

.content {
  grid-area: content;
  background-color: white;
}

.footer {
  grid-area: footer;
  background-color: lightgray;
}</code>
</pre>
<figure>
<img alt=""An example of using grid for layout."" height=""536"" loading=""lazy"" src=""https://sabe.io/classes/css/page-layout-techniques/grid-layout.png"" width=""606""/>
<figcaption>An example of using grid for layout.</figcaption>
</figure>
<p>Using <code>grid-template-areas</code>, it was relatively straightforward to divide up our page and then give each row and column the necessary width and height values via <code>grid-template-columns</code> and <code>grid-template-rows</code>. If you are still new to CSS grids, definitely refer back to this lesson for guidance!</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Introduction"" rel=""noopener"" target=""_blank"">CSS Layout - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-At-Rules and Media Queries","css-at-rules-and-media-queries","Use at-rules to extend the functionality of your CSS and target your styles using Media Queries, which are the basis for responsive design.","DRAFT","

<p>At-rules in CSS allow you to do many cool things like importing other stylesheets, embedding your fonts and targeting your styles for specific media types.</p>
<p>All at-rules start with the <strong>at</strong> sign (@). Let's look at some of the most common ones.</p>
<h2 id=""importing-stylesheets"">Importing Stylesheets</h2>
<p>The <code>@import</code> rule is used when you want to import a stylesheet. This is useful for when you want to break up a larger stylesheet into smaller files, and then import then individually.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;@import&lt;/title&gt;
        &lt;style&gt;
            @import url('styles.css');
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;

    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<p>All you need to do is provide a <strong>url</strong> and the browser will go and fetch it.</p>
<p>An important thing to note is that <code>@import</code> needs to come before any styles do. This is because the browser will go and fetch the stylesheet before it can start parsing the styles.</p>

<h2 id=""embedding-fonts"">Embedding Fonts</h2>
<p>In an earlier lesson, we went over <strong>web safe</strong> fonts, basically fonts that are safe to use. But what if you want to use a custom font that perhaps many users will not have installed?</p>
<p>Enter the <code>@font-face</code> rule. You can import any font you want like this:</p>
<pre class=""pre__block"">	<code class=""language-css"">@font-face {
    font-family: ""font_name"";
    src: url(font.font_extension);
}</code>
</pre>
<p>All you need to do is give the font a name and point the browser to the file itself. The recommended font formats are <code>.woff</code>, <code>.woff2</code>, and <code>.tiff</code>.</p>
<p>You could even use all three formats by providing the browser a list of fonts, like this:</p>
<pre class=""pre__block"">	<code class=""language-css"">@font-face {
    font-family: ""font_name"";
    src: url(font.woff),
        url(font.woff2),
        url(font.tiff);
}</code>
</pre>
<p>Optionally, you can also define the font's <strong>weight</strong> and <strong>style</strong>. These are optional, but you can use them to make sure that the browser will load the correct font for your users.</p>
<pre class=""pre__block"">	<code class=""language-css"">@font-face {
    font-family: ""font_name"";
    src: url(font.woff),
        url(font.woff2),
        url(font.tiff);
    font-weight: 400;
    font-style: normal;
}</code>
</pre>
<aside class=""aside__tip"">
<p>    If you'd rather not have to deal with using <code>@font-face</code>, we highly recommend <a href=""https://fonts.google.com"" rel=""noopener"" target=""_blank"">Google Web Fonts</a>!</p>
</aside>
<h2 id=""media-queries"">Media Queries</h2>
<p>Media queries are used to target your styles for a specific form of media. This is accomplished with the <code>@media</code> at-rule.</p>

<h3>Print</h3>
<p>When you try and print a webpage, if the website is kind enough to supply <code>print</code> styles, the browser will apply them, hopefully making the pages print-friendly in the process.</p>
<p>Let's say you wanted to make the font sizes bigger for print. This is how you would do it:</p>
<pre class=""pre__block"">	<code class=""language-css"">@media print {
    body {
        font-size: 125%;
    }
}</code>
</pre>
<p>When you go and print, the words will now be bigger than normal. It's that simple.</p>
<h3>Screen Size</h3>
<p>A massive part of <strong>mobile-first web design</strong> revolves around the technique of applying different styles depending on the browser screen.</p>
<p>Maybe you want to hide certain elements on mobile or show additional elements when on desktop. Both are possible with <code>screen</code> media queries.</p>
<p>For example, let's make it so that when your screen is smaller than <strong>600px</strong> the page's background color will be blue, but any larger and it is red.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Width Media Query&lt;/title&gt;
        &lt;style&gt;
            @media screen and (max-width: 600px) {
                body {
                    background-color: blue;
                }
            }

            @media screen and (min-width: 600px) {
                body {
                    background-color: red;
                }
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;

    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Smaller than 600px."" height=""449"" loading=""lazy"" src=""https://sabe.io/classes/css/media-queries/smaller-than-600px.png"" width=""552""/>
<figcaption>Smaller than 600px.</figcaption>
</figure>
<figure>
<img alt=""Larger than 600px."" height=""449"" loading=""lazy"" src=""https://sabe.io/classes/css/media-queries/larger-than-600px.png"" width=""652""/>
<figcaption>Larger than 600px.</figcaption>
</figure>
<p>That is the very basics of <strong>responsive design</strong>, trying to tailor the styles depending on the screen size viewing the page.</p>
<p>If your website is complex enough, you could essentially have different designs for when the page is loaded on mobile and loaded on desktop.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries"" rel=""noopener"" target=""_blank"">Media Queries</a></li>
</ul>



",0,"standard","lesson"
"CSS-Transitions","css-transitions","Learn how to natively animate and transition between one state to another in this lesson on CSS Transitions!","DRAFT","

<h2 id=""transitions"">Transitions</h2>
<p><strong>Transitions</strong> in CSS allow you to easily animate elements by changing properties and letting the browser calculate the values in between. Specifying a transition effect is extremely easy using the <code>transition</code> property.</p>
<p>In our first example, let's create a blank page that when hovered will smoothly animate to a black background:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Transitions&lt;/title&gt;
        &lt;style&gt;
            body {
                transition: 1s;
                height: 100vh;
                margin: 0;
            }

            body:hover {
                background-color: black;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;

    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""About halfway animating between white and black."" height=""449"" loading=""lazy"" src=""https://sabe.io/classes/css/transitions/transition.png"" width=""652""/>
<figcaption>About halfway animating between white and black.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    transition: 1s;
}

body:hover {
    background-color: black;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>That's pretty much it for this effect. The browser animated between white (<code>#FFFFFF</code>) and black (<code>#000000</code>) over a duration of 1 second. Because we didn't specify a transition property, the browser will use the default transition effect of <code>all 0.5s ease-in-out</code>. That means that all properties will transition smoothly from one value to the other when they are changed.</p>
<aside class=""aside__tip"">
<p>    You can specify the duration in milliseconds like this: <code>transition: 1337ms;</code>.</p>
</aside>

<h2 id=""transition-property"">Transition Property</h2>
<p>In our example, since we didn't give the browser any specific property to transition, it will transition <strong>all</strong> properties that are capable of being transitioned.</p>
<p>In most cases, we only want certain properties to transition. To accomplish this, just add the property you want transitioned alongside your duration:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Transition Property&lt;/title&gt;
        &lt;style&gt;
            .box {
                transition: height 1s;
                height: 5rem;
                width: 10rem;
                background-color: red;
            }

            .box:hover {
                height: 10rem;
                background-color: blue;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Transitioning on a specific property."" height=""449"" loading=""lazy"" src=""https://sabe.io/classes/css/transitions/transition-property.png"" width=""652""/>
<figcaption>Transitioning on a specific property.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    transition: height 1s;
    height: 5rem;
    width: 10rem;
    background-color: red;
}

.box:hover {
    height: 10rem;
    background-color: blue;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>In this example we have a box with a set <code>width</code>, <code>height</code>, and <code>background-color</code>, while it has a new value for <code>height</code> and <code>background-color</code> upon hover.</p>
<p>Because we set <code>transition</code> to only occur on <code>height</code> value changes, the box will immediately turn blue on hover, but it will animate its height change.</p>
<p>If you made it transition only on <code>background-color</code> instead, you would have a smooth transition from red to blue, while the change in <code>height</code> would be instant.</p>
<h2 id=""transition-timing-function"">Transition Timing Function</h2>
<p>Did you notice that in both examples above, the transitions were <strong>smooth</strong>? Going from black to white felt smooth, and so did the height change on the box.</p>
<p>This is thanks to the <strong>timing function</strong>. Rather than just going from value A to value B in a constant acceleration, the browser applies an <strong>acceleration curve</strong>.</p>
<p>If you want to see the effect without this curve, give it the <code>linear</code> value, which will ensure the values transition at a constant rate.</p>
<pre class=""pre__block"">	<code class=""language-css"">transition: height 1s linear;</code>
</pre>
<p>The browser uses <code>ease</code> by default, which is what gives it that smoothness, but you have many options at your disposal:</p>
<ul>
<li><code>ease</code>: Starts off slow, speeds up sharply, slows down at the end. (default)</li>
<li><code>linear</code>: Goes from <code>0%</code> to <code>100%</code> linearly.</li>
<li><code>ease-in</code>: Starts off slow and continues to speed up until the end.</li>
<li><code>ease-out</code>: Starts off fast but slows down at the end.</li>
<li><code>ease-in-out</code>: Starts off slow, speeds up smoothly, slows down at the end.</li>
</ul>
<aside class=""aside__tip"">
<p>    Experiment with these a little. See which one you like best!</p>
</aside>

<h2 id=""transition-delay"">Transition Delay</h2>
<p>As a final bit of customization for your transitions, you can specify a delay on them. A delay is simply the amount of time you want to elapse <strong>before beginning</strong> the transition.</p>
<p>Let's say you wanted to delay a transition by 250 milliseconds, the styles would look like this:</p>
<pre class=""pre__block"">	<code class=""language-css"">transition: height 1s linear 250ms;</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    transition: height 1s linear 250ms;
    height: 5rem;
    width: 10rem;
    background-color: red;
}

.box:hover {
    height: 10rem;
    background-color: blue;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>



",0,"standard","lesson"
"CSS-Animation","css-animation","CSS animations allow you to natively animate properties of an element with ease to create awesome effects.","DRAFT","

<p>CSS animations allow you to animate the transition between CSS properties. The awesome thing about CSS animations is that they don't require any JavaScript and it allows the browser to control the animation, meaning their performance can be improved over time as opposed to if the animation was written in JavaScript.</p>
<figure>
<img alt=""An example animation."" height=""333"" loading=""lazy"" src=""https://sabe.io/classes/css/animation/animation.gif"" width=""500""/>
<figcaption>An example animation.</figcaption>
</figure>
<h2 id=""animation-keyframes"">Animation Keyframes</h2>
<p>The first step in creating a new animation is to first define your <strong>animation keyframes</strong>. A keyframe is the state of the animation at a certain point in time. After you define a few keyframes, you can then let the browser animate the states between them.</p>
<p>A full keyframes definition is composed of three distinct parts:</p>
<ol>
<li><strong>Name</strong>: The name of the animation.</li>
<li><strong>Keyframe</strong>: The moment in time as a percentage of the entire animation.</li>
<li><strong>CSS Properties</strong>: The CSS properties and values to apply.</li>
</ol>
<p>Let's say you wanted an animation that turns a page's background color from <code>white</code> to <code>pink</code> then to <code>lightsalmon</code>, and we called this animation <code>fire</code>:</p>
<pre class=""pre__block"">	<code class=""language-css"">@keyframes fire {
    0% {
        background-color: white;
    }
    50% {
        background-color: pink;
    }
    100% {
        background-color: lightsalmon;
    }
}</code>
</pre>
<p>At <code>0%</code> since the animation has not yet started, we have the initial state to a background color of <code>white</code>. Halfway through the animation, at <code>50%</code>, we set the background color to <code>pink</code>. Finally, at the end of the animation, at <code>100%</code>, we set the background color to <code>lightsalmon</code>.</p>
<p>In between those states, however, the browser is doing the heavy lifting and calculating the color values in between to ensure the animation is silky smooth.</p>

<h2 id=""animation-name-and-duration"">Animation Name and Duration</h2>
<p>Now that we've defined our keyframes and given our animation a name, now we must simply apply it to an element. We do this by telling an element what animation to use via <code>animation-name</code>. In our example, it would be <code>fire</code>.</p>
<p>After specifying which animation the element should use, you will also need to define a duration for the animation. After all, we told our browser that we want a background color of <code>lightred</code> at 50%, but 50% <strong>of what</strong>?</p>
<p>We define the duration of the animation using <code>animation-duration</code>.</p>
<p>Let's say we want to apply <code>fire</code> to <code>body</code> and have the entire animation last for 3 seconds:</p>
<pre class=""pre__block"">	<code class=""language-css"">.animation {
    animation-name: fire;
    animation-duration: 3s;
}</code>
</pre>
<p>Try this out yourself with this fully-working example:</p>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><body class=""animation""></body></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.animation {
    animation-name: fire;
    animation-duration: 3s;
}

@keyframes fire {
    0% {
        background-color: white;
    }
    50% {
        background-color: pink;
    }
    100% {
        background-color: lightsalmon;
    }
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<figure>
<img alt=""Our fire animation ??????."" height=""272"" loading=""lazy"" src=""https://sabe.io/classes/css/animation/fire-animation.png"" width=""439""/>
<figcaption>Our fire animation ??????.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><body class=""animation""></body></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.animation {
    animation-name: fire;
    animation-duration: 3s;
}
@keyframes fire {
    0% {
        background-color: white;
    }
    50% {
        background-color: pink;
    }
    100% {
        background-color: lightsalmon;
    }
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>While an animation name and duration is required, there are multiple additional <strong>optional</strong> animation properties that you can use to customize your animation:</p>
<ul>
<li><code>animation-delay</code></li>
<li><code>animation-iteration-count</code></li>
<li><code>animation-direction</code></li>
<li><code>animation-timing-function</code></li>
<li><code>animation-fill-mode</code></li>
<li><code>animation-play-state</code></li>
</ul>
<p>Let's go over each one.</p>
<h2 id=""animation-delay"">Animation Delay</h2>
<p>The <code>animation-delay</code> property defines how long to wait after the element has loaded to begin the animation. It takes a time value, seconds (s) or milliseconds (ms).</p>
<p>To start an animation 2 seconds later:</p>
<pre class=""pre__block"">	<code class=""language-css"">.animation {
    animation-name: fire;
    animation-duration: 3s;
    animation-delay: 2s;
}</code>
</pre>
<p>Or to start an animation 1,000 milliseconds into the animation, use a negative value:</p>
<pre class=""pre__block"">	<code class=""language-css"">.animation {
    animation-name: fire;
    animation-duration: 3s;
    animation-delay: -1000ms;
}</code>
</pre>
<p>Fully-working example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Animation Delay&lt;/title&gt;
        &lt;style&gt;
            body {
                display: flex;
                justify-content: space-between;
            }

            .box {
                width: 5rem;
                height: 5rem;
                animation-name: pulsate;
                animation-duration: 3s;
            }

            .delayed {
                animation-delay: 2s;
                background-color: red;
            }

            .sped-up {
                animation-delay: -1000ms;
                background-color: green;
            }

            @keyframes pulsate {
                0% {
                    width: 5rem;
                    height: 0;
                }
                100% {
                    width: 5rem;
                    height: 15rem;
                }
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box delayed""&gt;delayed&lt;/div&gt;
        &lt;div class=""box sped-up""&gt;sped up&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box delayed"">delayed</div>
<div class=""box sped-up"">sped up</div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    display: flex;
    justify-content: space-between;
}

.box {
    width: 5rem;
    height: 5rem;
    animation-name: pulsate;
    animation-duration: 3s;
}

.delayed {
    animation-delay: 2s;
    background-color: red;
}

.sped-up {
    animation-delay: -1000ms;
    background-color: green;
}

@keyframes pulsate {
    0% {
        width: 5rem;
        height: 0;
    }
    100% {
        width: 5rem;
        height: 15rem;
    }
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<h2 id=""animation-iteration-count"">Animation Iteration Count</h2>
<p>The <code>animation-iteration-count</code> property defines how many times the animation should run before stopping. The default is <code>1</code> but you can have it run any number of times you want. To run it forever, simply set the value to <code>infinite</code>.</p>
<p>An animation set to run 3 times:</p>
<pre class=""pre__block"">	<code class=""language-css"">.three-times {
    animation-name: fire;
    animation-duration: 3s;
    animation-iteration-count: 3;
}</code>
</pre>
<p>An animation set to run forever:</p>
<pre class=""pre__block"">	<code class=""language-css"">.forever {
    animation-name: fire;
    animation-duration: 3s;
    animation-iteration-count: infinite;
}</code>
</pre>
<p>Fully-working example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Animation Iteration Count&lt;/title&gt;
        &lt;style&gt;
            body {
                display: flex;
                justify-content: space-between;
            }

            .box {
                width: 5rem;
                height: 5rem;
                animation-name: pulsate;
                animation-duration: 3s;
            }

            .three-times {
                animation-iteration-count: 3;
                background-color: blue;
            }

            .forever {
                animation-iteration-count: infinite;
                background-color: orange;
            }

            @keyframes pulsate {
                0% {
                    width: 5rem;
                    height: 0;
                }
                100% {
                    width: 5rem;
                    height: 15rem;
                }
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box three-times""&gt;3 times&lt;/div&gt;
        &lt;div class=""box forever""&gt;forever&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box three-times"">3 times</div>
<div class=""box forever"">forever</div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    display: flex;
    justify-content: space-between;
}

.box {
    width: 5rem;
    height: 5rem;
    animation-name: pulsate;
    animation-duration: 3s;
}

.three-times {
    animation-iteration-count: 3;
    background-color: blue;
}

.forever {
    animation-iteration-count: infinite;
    background-color: orange;
}

@keyframes pulsate {
    0% {
        width: 5rem;
        height: 0;
    }
    100% {
        width: 5rem;
        height: 15rem;
    }
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<h2 id=""animation-direction"">Animation Direction</h2>
<p>The <code>animation-direction</code> property tells the browser in what direction to play the animation. Here are the valid values:</p>
<ul>
<li><code>normal</code>: Plays the animation forwards (0% to 100%)</li>
<li><code>reverse</code>: Plays the animation backwards (100% to 0%)</li>
<li><code>alternate</code>: Plays the animation forwards (0% to 100%) then backwards (100% to 0%)</li>
<li><code>alternate-reverse</code>: Plays the animation backwards (100% to 0%) then forwards (0% to 100%)</li>
</ul>
<p>The default is <code>normal</code> so for most cases, you don't even need to specify a <code>animation-direction</code>. Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Animation Direction&lt;/title&gt;
        &lt;style&gt;
            body {
                display: flex;
                justify-content: space-between;
            }

            .box {
                width: 5rem;
                height: 5rem;
                animation-name: pulsate;
                animation-duration: 3s;
                animation-iteration-count: infinite;
            }

            .normal {
                animation-direction: normal;
                background-color: blue;
            }

            .reverse {
                animation-direction: reverse;
                background-color: orange;
            }

            .alternate {
                animation-direction: alternate;
                background-color: red;
            }

            .alternate-reverse {
                animation-direction: alternate-reverse;
                background-color: purple;
            }

            @keyframes pulsate {
                0% {
                    width: 5rem;
                    height: 0;
                }
                100% {
                    width: 5rem;
                    height: 15rem;
                }
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box normal""&gt;normal&lt;/div&gt;
        &lt;div class=""box reverse""&gt;reverse&lt;/div&gt;
        &lt;div class=""box alternate""&gt;alternate&lt;/div&gt;
        &lt;div class=""box alternate-reverse""&gt;alternate-reverse&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box normal"">normal</div>
<div class=""box reverse"">reverse</div>
<div class=""box alternate"">alternate</div>
<div class=""box alternate-reverse"">alternate-reverse</div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    display: flex;
    justify-content: space-between;
}

.box {
    width: 5rem;
    height: 5rem;
    animation-name: pulsate;
    animation-duration: 3s;
    animation-iteration-count: infinite;
}

.normal {
    animation-direction: normal;
    background-color: blue;
}

.reverse {
    animation-direction: reverse;
    background-color: orange;
}

.alternate {
    animation-direction: alternate;
    background-color: red;
}

.alternate-reverse {
    animation-direction: alternate-reverse;
    background-color: purple;
}

@keyframes pulsate {
    0% {
        width: 5rem;
        height: 0;
    }
    100% {
        width: 5rem;
        height: 15rem;
    }
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>

<h2 id=""animation-timing-function"">Animation Timing Function</h2>
<p>The <code>animation-timing-function</code> property is hugely important in determining how the animation is actually rendered. So you know how animations are percentage-based (0% to 100%)? Well, this property defines the <strong>acceleration curve</strong>, or how fast the browser goes from <code>0%</code> to <code>100%</code> over time.</p>
<p>Here are the valid values:</p>
<ul>
<li><code>ease</code>: Starts off slow, speeds up sharply, slows down at the end. (default)</li>
<li><code>linear</code>: Goes from <code>0%</code> to <code>100%</code> linearly.</li>
<li><code>ease-in</code>: Starts off slow and continues to speed up until the end.</li>
<li><code>ease-out</code>: Starts off fast but slows down at the end.</li>
<li><code>ease-in-out</code>: Starts off slow, speeds up smoothly, slows down at the end.</li>
</ul>
<aside class=""aside__tip"">
<p>    Depending on which one you go with, it will make a major difference in the feel of your animation, so definitely play around with this property!</p>
</aside>
<p>Here's an example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Animation Timing Function&lt;/title&gt;
        &lt;style&gt;
            body {
                display: flex;
                justify-content: space-between;
            }

            .box {
                width: 5rem;
                height: 5rem;
                animation-name: pulsate;
                animation-duration: 5s;
                animation-iteration-count: infinite;
            }

            .ease {
                animation-timing-function: ease;
                background-color: blue;
            }

            .linear {
                animation-timing-function: linear;
                background-color: orange;
            }

            .ease-in {
                animation-timing-function: ease-in;
                background-color: red;
            }

            .ease-out {
                animation-timing-function: ease-out;
                background-color: purple;
            }

            .ease-in-out {
                animation-timing-function: ease-in-out;
                background-color: pink;
            }

            @keyframes pulsate {
                0% {
                    width: 5rem;
                    height: 0;
                }
                100% {
                    width: 5rem;
                    height: 15rem;
                }
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box ease""&gt;ease&lt;/div&gt;
        &lt;div class=""box linear""&gt;linear&lt;/div&gt;
        &lt;div class=""box ease-in""&gt;ease-in&lt;/div&gt;
        &lt;div class=""box ease-out""&gt;ease-out&lt;/div&gt;
        &lt;div class=""box ease-in-out""&gt;ease-in-out&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box ease"">ease</div>
<div class=""box linear"">linear</div>
<div class=""box ease-in"">ease-in</div>
<div class=""box ease-out"">ease-out</div>
<div class=""box ease-in-out"">ease-in-out</div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    display: flex;
    justify-content: space-between;
}

.box {
    width: 5rem;
    height: 5rem;
    animation-name: pulsate;
    animation-duration: 5s;
    animation-iteration-count: infinite;
}

.ease {
    animation-timing-function: ease;
    background-color: blue;
}

.linear {
    animation-timing-function: linear;
    background-color: orange;
}

.ease-in {
    animation-timing-function: ease-in;
    background-color: red;
}

.ease-out {
    animation-timing-function: ease-out;
    background-color: purple;
}

.ease-in-out {
    animation-timing-function: ease-in-out;
    background-color: pink;
}

@keyframes pulsate {
    0% {
        width: 5rem;
        height: 0;
    }
    100% {
        width: 5rem;
        height: 15rem;
    }
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<h2 id=""animation-fill-mode"">Animation Fill Mode</h2>
<p>The <code>animation-fill-mode</code> property determines if an element with an animation will have styles applied before the animation begins, or after it ends. A little confusing at first, but it can prove really useful once you understand it. By default, styles from animations are not applied before the animation begins (like during an animation delay) nor after an animation ends. Using <code>animation-fill-mode</code>, you can change this behavior with the following values:</p>
<ul>
<li><code>normal</code>: No animation styles are applied before nor after (default behavior).</li>
<li><code>backwards</code>: Animation styles of the initial keyframe (0%) are applied before the animation is played.</li>
<li><code>forwards</code>: Animation styles of the last keyframe (100%) are applied after the animation ends.</li>
<li><code>both</code>: Combining both <code>backwards</code> and <code>forwards</code>, the initial keyframe (0%) is applied before the animation begins, and the last keyframe (100%) is applied after it ends.</li>
</ul>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Animation Fill Mode&lt;/title&gt;
        &lt;style&gt;
            body {
                display: flex;
                justify-content: space-between;
            }

            .box {
                width: 5rem;
                height: 5rem;
                animation-name: pulsate;
                animation-duration: 3s;
                animation-delay: 1s;
                background-color: red;
                animation-fill-mode: forwards;
            }

            .box:hover {
                animation-play-state: paused;
            }

            @keyframes pulsate {
                0% {
                    width: 5rem;
                    height: 0;
                }
                100% {
                    width: 5rem;
                    height: 15rem;
                }
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">body {
    display: flex;
    justify-content: space-between;
}

.box {
    width: 5rem;
    height: 5rem;
    animation-name: pulsate;
    animation-duration: 3s;
    animation-delay: 1s;
    background-color: red;
    animation-fill-mode: forwards;
}

.box:hover {
    animation-play-state: paused;
}

@keyframes pulsate {
    0% {
        width: 5rem;
        height: 0;
    }
    100% {
        width: 5rem;
        height: 15rem;
    }
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>In this example, we have a red box slowly getting bigger. If we hover over the box, it will pause the animation. However, if you let the animation completely finish, you will notice that the box remains large. That is because we set <code>animation-fill-mode</code> to <code>forwards</code> which tells the browser to retain the styles at the end of the animation.</p>

<h2 id=""animation-play-state"">Animation Play State</h2>
<p>The <code>animation-play-state</code> sets whether or not the animation is playing. This is useful for when you want to pause the animation for any reason, like a mouse hover. Here are the values:</p>
<ul>
<li><code>playing</code>: This allows the animation to continue playing (default behavior).</li>
<li><code>paused</code>: This pauses the animation.</li>
</ul>
<p>Fully-working example:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Animation Play State&lt;/title&gt;
        &lt;style&gt;
            .box {
                width: 5rem;
                height: 5rem;
                animation-name: pulsate;
                animation-duration: 3s;
                animation-iteration-count: infinite;
                background-color: red;
            }

            .box:hover {
                animation-play-state: paused;
            }

            @keyframes pulsate {
                0% {
                    width: 5rem;
                    height: 0;
                }
                100% {
                    width: 5rem;
                    height: 15rem;
                }
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    width: 5rem;
    height: 5rem;
    animation-name: pulsate;
    animation-duration: 3s;
    animation-iteration-count: infinite;
    background-color: red;
}

.box:hover {
    animation-play-state: paused;
}

@keyframes pulsate {
    0% {
        width: 5rem;
        height: 5rem;
    }
    100% {
        width: 10rem;
        height: 10rem;
    }
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>As you've hopefully seen, animations are a powerful way to add sweet animations to your elements to help make your page feel a little more alive. They are extremely customizable allowing you plenty of freedom to create interesting new experiences. The best way to learn is to just jump right in and start animating!</p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations"" rel=""noopener"" target=""_blank"">CSS Animations - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-2D Transforms","css-2d-transforms","Learn how to natively manipulate and distort the elements on your page in 2D using CSS 2D transforms.","DRAFT","

<h2 id=""2d-transforms"">2D Transforms</h2>
<p>With the <code>transform</code> property, you can manipulate an element's angle, size, shape, position, and many others properties. The syntax for <code>transform</code> is simple, and looks like this:</p>
<pre class=""pre__block"">	<code class=""language-css"">transform: function(values);</code>
</pre>
<p>You simply indicate the function you want to apply, pass in some values and let the browser do the work.</p>

<h2 id=""2d-translate"">2D Translate</h2>
<p>Perhaps the easiest function to demonstrate is the <code>translate</code> function.</p>
<p>Acting similar to using <code>position: relative</code> and giving it a <code>left</code> and <code>top</code> value, it moves the element horizontally and vertically. The units for <code>translate</code> is a length.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Transform: Translate&lt;/title&gt;
        &lt;style&gt;
            .box {
                height: 5rem;
                width: 5rem;
                background-color: darkgreen;
                transform: translate(10rem, 1rem);
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Translating a box 10rems to the right, and 1rem down."" height=""356"" loading=""lazy"" src=""https://sabe.io/classes/css/2d-transforms/transform-translate.png"" width=""447""/>
<figcaption>Translating a box 10rems to the right, and 1rem down.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    height: 5rem;
    width: 5rem;
    background-color: darkgreen;
    transform: translate(10rem, 1rem);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<pre class=""pre__block"">	<code class=""language-css"">transform: translate(x, y);</code>
</pre>
<p>The first value (<code>x</code>) defines how far to translate the element horizontally, and the second value (<code>y</code>) for how far to translate it vertically.</p>
<h2 id=""2d-rotate"">2D Rotate</h2>
<p>You can rotate an element by using the <code>rotate()</code> function, and passing in a degree value.</p>
<p>Passing in a positive value will make it rotate <strong>clockwise</strong> and a negative one will make it rotate <strong>counter-clockwise</strong>.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Transform: Rotate&lt;/title&gt;
        &lt;style&gt;
            .box {
                height: 5rem;
                width: 5rem;
                margin: 5rem;
                background-color: purple;
                transform: rotate(45deg);
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Rotating a box 45 degrees."" height=""348"" loading=""lazy"" src=""https://sabe.io/classes/css/2d-transforms/transform-rotate.png"" width=""447""/>
<figcaption>Rotating a box 45 degrees.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    height: 5rem;
    width: 5rem;
    margin: 5rem;
    background-color: purple;
    transform: rotate(45deg);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<pre class=""pre__block"">	<code class=""language-css"">transform: rotate(xdeg);</code>
</pre>

<h2 id=""2d-scale"">2D Scale</h2>
<p>You can scale up and down the apparent size of an element using the <code>scale</code> function. The default value is<code>1</code> where any smaller value makes the element appear smaller, and any value bigger makes the element appear larger.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Transform: Scale&lt;/title&gt;
        &lt;style&gt;
            .box {
                height: 5rem;
                width: 5rem;
                background-color: pink;
                transform: scale(0.75, 1.25);
                margin: 5rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Scaling a box."" height=""356"" loading=""lazy"" src=""https://sabe.io/classes/css/2d-transforms/transform-scale.png"" width=""447""/>
<figcaption>Scaling a box.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    height: 5rem;
    width: 5rem;
    background-color: pink;
    transform: scale(0.75, 1.25);
    margin: 5rem;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<pre class=""pre__block"">	<code class=""language-css"">transform: scale(x, y)</code>
</pre>
<p>Notice how two values were passed to <code>scale</code>? The first value is for the <code>x</code> and the second is for the <code>y</code>.</p>
<p>The <code>width</code> of the box was made to be <strong>75%</strong> of the original <code>width</code>, and the <code>height</code> <strong>125%</strong> of the original <code>height</code>.</p>
<h2 id=""2d-skew"">2D Skew</h2>
<p>Skewing an element lets you distort an element by adjusting the tilt on the horizontal and/or vertical axis. The value for the <code>skew</code> function is in degrees.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Transform: Skew&lt;/title&gt;
        &lt;style&gt;
            .box {
                height: 5rem;
                width: 5rem;
                background-color: red;
                transform: skew(5deg, 10deg);
                margin: 5rem;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Skewing a box 5 degrees in the X-axis and 10 degrees in the Y-axis."" height=""356"" loading=""lazy"" src=""https://sabe.io/classes/css/2d-transforms/transform-skew.png"" width=""447""/>
<figcaption>Skewing a box 5 degrees in the X-axis and 10 degrees in the Y-axis.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    height: 5rem;
    width: 5rem;
    background-color: red;
    transform: skew(5deg, 10deg);
    margin: 5rem;
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<pre class=""pre__block"">	<code class=""language-css"">transform: scale(xdeg, ydeg)</code>
</pre>

<h2 id=""transform-origin"">Transform Origin</h2>
<p>The <strong>origin</strong> of every <code>transform</code> you perform will be, by default, at the very center of the element. This means that the element will be rotated, scaled, and skewed around the center of the element.</p>
<p>That is why when you try, for example, to rotate a box, it will rotate about the very center. If you wanted to rotate it around one of its edges, well, you're in luck.</p>
<p>Using <code>transform-origin</code>, you can set the origin to wherever you want it to be. The default value is:</p>
<pre class=""pre__block"">	<code class=""language-css"">transform-origin: 50% 50%;</code>
</pre>
<aside class=""aside__tip"">
<p>    You don't have to provide a percentage, a length also works just fine! In addition, you can use values like <code>center</code>, <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code>.</p>
</aside>
<h2 id=""multiple-transforms"">Multiple Transforms</h2>
<p>In the event that one transform doesn't satisfy you, you can easily apply multiple at once by <strong>combining them</strong>. This is done by separating them with a space. The order of the transforms matter, so the order in which you apply them matters. The order of the transforms is <strong>important</strong>.</p>
<p>All you need to do is supply the <code>transform</code> property with your list of functions, and the browser will do the rest. Let's say you wanted to skew and scale a box:</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Multiple Transforms&lt;/title&gt;
        &lt;style&gt;
            .box {
                height: 5rem;
                width: 5rem;
                margin: 5rem;
                background-color: darkred;
                transform: skew(5deg, 7deg) scale(1.25, 2);
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Skewing and scaling a box at the same time."" height=""356"" loading=""lazy"" src=""https://sabe.io/classes/css/2d-transforms/multiple-transforms.png"" width=""447""/>
<figcaption>Skewing and scaling a box at the same time.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    height: 5rem;
    width: 5rem;
    margin: 5rem;
    background-color: darkred;
    transform: skew(5deg, 7deg) scale(1.25, 2);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<p>CSS transforms are a powerful way to manipulate the appearance of an element. Use them to create interesting effects, or just to make your page look a little better.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/transform"" rel=""noopener"" target=""_blank"">CSS Tranform - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-3D Transforms","css-3d-transforms","Learn how to natively manipulate and distort the elements on your page in 3D using CSS 3D transforms.","DRAFT","

<p>CSS allows you to perform many of the same transforms possible in 2D space in 3D space. The unifying property for 3D transforms is <code>perspective</code>.</p>
<h2 id=""what-is-perspective"">What is Perspective?</h2>
<p>You can think of the <strong>perspective</strong> as essentially the angle that you look at the element. Without any perspective, elements are viewed by default in 2D, straight-on.</p>
<p>You can apply <strong>perspective</strong> two different ways, by the <code>perspective</code> property which can be applied on a parent element to affect the children, or on the children themselves using the <code>perspective</code> function.</p>

<h3>Perspective Property</h3>
<p>To use the <code>perspective</code> property, just give it a length, which represents how far children elements are placed from the view. The larger the value, the further away it is.</p>
<p>Let's try it with <code>400px</code>.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Perspective: Property&lt;/title&gt;
        &lt;style&gt;
            .parent {
                perspective: 400px;
            }

            .box {
                width: 5rem;
                height: 5rem;
                margin: 4rem;
                background-color: red;
                transform: rotateX(45deg);
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""parent""&gt;
            &lt;div class=""box""&gt;&lt;/div&gt;
            &lt;div class=""box""&gt;&lt;/div&gt;
            &lt;div class=""box""&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Using the perspective property on the parent element."" height=""589"" loading=""lazy"" src=""https://sabe.io/classes/css/3d-transforms/perspective-property.png"" width=""456""/>
<figcaption>Using the perspective property on the parent element.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""parent"">
    <div class=""box""></div>
    <div class=""box""></div>
    <div class=""box""></div>
</div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.parent {
    perspective: 400px;
}

.box {
    width: 5rem;
    height: 5rem;
    margin: 4rem;
    background-color: red;
    transform: rotateX(45deg);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<aside class=""aside__tip"">
<p>    Notice how all three boxes, while rotated the same number of degrees, all rendered differently? That's because we changed the perspective.</p>
</aside>
<pre class=""pre__block"">	<code class=""language-css"">perspective: length;</code>
</pre>
<p>By applying <code>perspective</code> on the parent element, it affects how all the children are rendered, in this case, the three boxes.</p>
<h3>Perspective Function</h3>
<p>The other way to apply perspective is using the <code>perspective</code> function. This will apply it to just the element itself. This is useful for applying perspective to an element that has a lot of children.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Perspective: Function&lt;/title&gt;
        &lt;style&gt;
            .box {
                width: 5rem;
                height: 5rem;
                margin: 4rem;
                background-color: red;
            }

            .box-1 {
                transform: perspective(100px) rotateX(50deg);
            }

            .box-2 {
                transform: perspective(200px) rotateX(50deg);
            }

            .box-3 {
                transform: perspective(300px) rotateX(50deg);
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box box-1""&gt;&lt;/div&gt;
        &lt;div class=""box box-2""&gt;&lt;/div&gt;
        &lt;div class=""box box-3""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Using the perspective function on the children."" height=""589"" loading=""lazy"" src=""https://sabe.io/classes/css/3d-transforms/perspective-function.png"" width=""456""/>
<figcaption>Using the perspective function on the children.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""parent"">
    <div class=""box box-1""></div>
    <div class=""box box-2""></div>
    <div class=""box box-3""></div>
</div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    width: 5rem;
    height: 5rem;
    margin: 4rem;
    background-color: red;
}

.box-1 {
    transform: perspective(100px) rotateX(50deg);
}

.box-2 {
    transform: perspective(200px) rotateX(50deg);
}

.box-3 {
    transform: perspective(300px) rotateX(50deg);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<pre class=""pre__block"">	<code class=""language-css"">transform: perspective(length);</code>
</pre>

<h3>Perspective Origin</h3>
<p>Just like you can set an origin for your 2D transforms using <code>transform-origin</code>, you can set an origin for your 3D transforms using <code>perspective-origin</code>.</p>
<p>The initial value is <code>50% 50%</code> for the X and Y, but it takes any length value.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Perspective: Origin&lt;/title&gt;
        &lt;style&gt;
            .outer-box {
                perspective: 150px;
            }

            .outer-box-1 {
                perspective-origin: 0 0;
            }

            .outer-box-2 {
                perspective-origin: 60% 60%;
            }

            .outer-box-3 {
                perspective-origin: 150px 150px;
            }

            .inner-box {
                width: 5rem;
                height: 5rem;
                margin: 4rem;
                background-color: red;
                transform: rotateX(45deg);
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""outer-box outer-box-1""&gt;
            &lt;div class=""inner-box""&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=""outer-box outer-box-2""&gt;
            &lt;div class=""inner-box""&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=""outer-box outer-box-3""&gt;
            &lt;div class=""inner-box""&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Example of using perspective origin."" height=""594"" loading=""lazy"" src=""https://sabe.io/classes/css/3d-transforms/perspective-origin.png"" width=""436""/>
<figcaption>Example of using perspective origin.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""outer-box outer-box-1"">
    <div class=""inner-box""></div>
</div>
<div class=""outer-box outer-box-2"">
    <div class=""inner-box""></div>
</div>
<div class=""outer-box outer-box-3"">
    <div class=""inner-box""></div>
</div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.outer-box {
    perspective: 150px;
}

.outer-box-1 {
    perspective-origin: 0 0;
}

.outer-box-2 {
    perspective-origin: 60% 60%;
}

.outer-box-3 {
    perspective-origin: 150px 150px;
}

.inner-box {
    width: 5rem;
    height: 5rem;
    margin: 4rem;
    background-color: red;
    transform: rotateX(45deg);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<pre class=""pre__block"">	<code class=""language-css"">perspective-origin: length1 length2;</code>
</pre>
<h2 id=""3d-translate"">3D Translate</h2>
<p><strong>Translating</strong> an element in 3D instead of 2D allows you to change an element's value on the Z axis. This is useful for creating a 3D effect.</p>
<p>You can think of the Z axis as a line aimed directly at you, where the higher the number, the closer it will appear to you.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Transform: 3D Translate&lt;/title&gt;
        &lt;style&gt;
            .box {
                width: 5rem;
                height: 5rem;
                margin: 4rem;
                background-color: red;
            }

            .box-1 {
                transform: perspective(250px) translateZ(75px);
            }

            .box-2 {
                transform: perspective(250px) translateZ(-75px);
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box box-1""&gt;&lt;/div&gt;
        &lt;div class=""box box-2""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Using 3D translate to translate boxes by the Z axis."" height=""443"" loading=""lazy"" src=""https://sabe.io/classes/css/3d-transforms/transform-3d-translate.png"" width=""416""/>
<figcaption>Using 3D translate to translate boxes by the Z axis.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box box-1""></div>
<div class=""box box-2""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    width: 5rem;
    height: 5rem;
    margin: 4rem;
    background-color: red;
}

.box-1 {
    transform: perspective(250px) translateZ(75px);
}

.box-2 {
    transform: perspective(250px) translateZ(-75px);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<aside class=""aside__tip"">
<p>    Notice how the higher the value inside <code>translateZ</code>, the bigger the box? That is because the element is translated closer to you and therefore appears bigger.</p>
</aside>
<pre class=""pre__block"">	<code class=""language-css"">transform: translateX(x);
transform: translateY(y);
transform: translateZ(z);</code>
</pre>

<h2 id=""3d-rotate"">3D Rotate</h2>
<p>Unlike 2D rotations where you could only control the angle, with <strong>3D rotations</strong> you can control the X, Y, and the Z axis.</p>
<p>This transform is best demonstrated instead of explained.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Transform: 3D Rotate&lt;/title&gt;
        &lt;style&gt;
            .box {
                width: 5rem;
                height: 5rem;
                margin: 4rem;
                background-color: red;
            }

            .box-1 {
                transform: perspective(250px) rotateX(30deg);
            }

            .box-2 {
                transform: perspective(250px) rotateY(30deg);
            }

            .box-3 {
                transform: perspective(250px) rotateZ(30deg);
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box box-1""&gt;&lt;/div&gt;
        &lt;div class=""box box-2""&gt;&lt;/div&gt;
        &lt;div class=""box box-3""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Using 3D rotate to rotate boxes by the X, Y, and Z axis."" height=""595"" loading=""lazy"" src=""https://sabe.io/classes/css/3d-transforms/transform-3d-rotate.png"" width=""433""/>
<figcaption>Using 3D rotate to rotate boxes by the X, Y, and Z axis.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box box-1""></div>
<div class=""box box-2""></div>
<div class=""box box-3""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    width: 5rem;
    height: 5rem;
    margin: 4rem;
    background-color: red;
}

.box-1 {
    transform: perspective(250px) rotateX(30deg);
}

.box-2 {
    transform: perspective(250px) rotateY(30deg);
}

.box-3 {
    transform: perspective(250px) rotateZ(30deg);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<pre class=""pre__block"">	<code class=""language-css"">transform: rotateX(x);
transform: rotateY(y);
transform: rotateZ(z);</code>
</pre>
<h2 id=""3d-scale"">3D Scale</h2>
<p><strong>Scaling in 3D</strong> introduces the <code>scaleZ</code> function. The only problem is that to easily see the effect in action, we need to apply another transform, like a bit of rotation.</p>
<pre class=""pre__block"">	<code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Transform: 3D Scale&lt;/title&gt;
        &lt;style&gt;
            .box {
                width: 5rem;
                height: 5rem;
                margin: 4rem;
                background-color: red;
            }

            .box-1 {
                transform: perspective(250px) scaleZ(2) rotateX(40deg);
            }

            .box-2 {
                transform: perspective(250px) scaleZ(0.5) rotateX(40deg);
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=""box box-1""&gt;&lt;/div&gt;
        &lt;div class=""box box-2""&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code>
</pre>
<figure>
<img alt=""Using 3D scale to scale boxes in 3D."" height=""459"" loading=""lazy"" src=""https://sabe.io/classes/css/3d-transforms/transform-3d-scale.png"" width=""433""/>
<figcaption>Using 3D scale to scale boxes in 3D.</figcaption>
</figure>
<div class=""editor"">
<ul class=""editor__buttons"">
<li class=""editor__button html-button"">HTML</li>
<li class=""editor__button css-button"">CSS</li>
</ul>
<ul class=""editor__tabs"">
<li class=""editor__tab"" data-language=""html"">
<textarea class=""editor__textarea"" spellcheck=""false""><div class=""box box-1""></div>
<div class=""box box-2""></div></textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-html""></code>
			</pre>
</li>
<li class=""editor__tab"" data-language=""css"">
<textarea class=""editor__textarea"" spellcheck=""false"">.box {
    width: 5rem;
    height: 5rem;
    margin: 4rem;
    background-color: red;
}

.box-1 {
    transform: perspective(250px) scaleZ(2) rotateX(40deg);
}

.box-2 {
    transform: perspective(250px) scaleZ(0.5) rotateX(40deg);
}</textarea>
<pre aria-hidden=""true"" class=""editor__pre"">				<code class=""editor__code language-css""></code>
			</pre>
</li>
</ul>
<div class=""editor__run-button"">?? Run</div>
<iframe class=""editor__frame"" sandbox=""allow-scripts""></iframe>
</div>
<pre class=""pre__block"">	<code class=""language-css"">transform: scaleX(x);
transform: scaleY(y);
transform: scaleZ(z);</code>
</pre>
<p>Transforms in 3D take a bit of practice. Sometimes, it is difficult to wrap your head around what is going on, but it gets easier the more you play around with it. Use it to create fun and interesting visuals.</p>


<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/transform"" rel=""noopener"" target=""_blank"">CSS Tranform - MDN Web Docs</a></li>
</ul>



",0,"standard","lesson"
"CSS-Conclusion and Wrap Up","css-conclusion-and-wrap-up","This lesson is the conclusion and wrap up of this class on CSS! Congratulations on completing the class!","DRAFT","
<p><strong>Congratulations on making it to the end of this class on CSS!</strong></p>
<p>CSS is a great skill to have under your belt, and with the completion of this class, you can at least say you are familiar with it.</p>
<p>To <strong>master</strong> CSS, however, just requires practice. You're going to have to take a stab at designing a page from scratch. If you get stuck, just refer back to any of the lessons here.</p>
<p>Thank you for your time, and we hope you look at our other classes, specifically our class on <strong>JavaScript</strong>!</p>
<p>If you've enjoyed this class, do make sure to share this on Facebook, Twitter, LinkedIn or anywhere! It helps us grow and allows for more people to enjoy it as well! ??????</p>
<figure>
<img alt=""Bravocado to you!"" height=""320"" loading=""lazy"" src=""https://sabe.io/classes/css/conclusion/bravocado.gif"" width=""480""/>
<figcaption>Bravocado to you!</figcaption>
</figure>



",0,"standard","lesson"
"Automatically Generate Thumbnail for Your Blog Post in Python","automatically-generate-blog-thumbnail-in-python","This tutorial walks you through the step by step process to generate GitHub like thumbnails for your blog posts in Python by leveraging Jinja templates and the Html2Image.","LIVE","<p id=""019c8c65-5c06-4483-9ad5-d5bd190fdd2b"" class="""">If you’ve been sharing a link on any social media, you’ve probably seen the preview “card”.  something like this:</p>
<img  src=""/media/uploads/summernote/Blog_post_small_card.jpeg"">
<p id=""d035ea80-9547-4116-ad27-06afdac5ec1b"" class=""""><br></p><p id=""f3471030-7335-4e64-a644-722a3ca1af2b"" class="""">This is done using specific meta tags called Open Graph. Open graph tags enhance the link with a richer presentation. </p><p id=""2b9ad1c2-b61a-4a48-87bb-2b7fac8e0db0"" class="""">Here is how the open graph tags look like </p><pre id=""2e8c4272-7be0-4553-93b5-c31b3909ddd8"" class=""code""><code>&lt;html prefix=""og: https://ogp.me/ns#""&gt;
&lt;head&gt;
&lt;title&gt;StackTips - Resources for Developers&lt;/title&gt;
&lt;!-- Facebook Meta Tags --&gt;
&lt;meta property=""og:url"" content=""https://stacktips.com""&gt;
&lt;meta property=""og:type"" content=""website""&gt;
&lt;meta property=""og:title"" content=""StackTips- Resources for Developers""&gt;
&lt;meta property=""og:description"" content=""StackTips provides developer friendly ways to learn programming. We aim to teach developers in the most efficient ways possible through articles, courses and quizzes.""&gt;
&lt;meta property=""og:image"" content=""http://media.stacktips.com/media/uploads/stacktips-banner.png""&gt;

&lt;!-- Twitter Meta Tags --&gt;
&lt;meta name=""twitter:card"" content=""summary_large_image""&gt;
&lt;meta name=""twitter:title"" content=""StackTips - Resources for Developers""&gt;
&lt;meta name=""twitter:description"" content=""StackTips provides developer friendly ways to learn programming. We aim to teach developers in the most efficient ways possible through articles, courses and quizzes.""&gt;
&lt;meta name=""twitter:image"" content=""http://media.stacktips.com/media/uploads/stacktips-banner.png""&gt;

...
&lt;/head&gt;
...
&lt;/html&gt;</code></pre><p id=""9f1fd04c-8895-48a9-9e14-a89d93ec43f3"" class="""">This means we have to create an image for every single piece of content on your website. But for website site which generates high volumes of content, it is quite hard to create a custom image for every single post. </p><p id=""935bc8d3-18e6-4722-8b7b-0ffa6de48f9e"" class="""">To solve this problem, websites such as dev.to or github.com have created an automated process to generate thumbnails for every single piece of content on the site. </p><p id=""a544940b-4aa9-4dd3-8789-631ad4462b11"" class="""">In this post, I will show you how to automatically generate the thumbnail for your blog post in Python. </p><p id=""230aa88c-f6db-4aad-a834-1bddf86cf657"" class="""">For this, we will need two Python dependencies </p><ul id=""e89409bf-ebbf-4522-b3fc-3b4ec284cb17"" class=""bulleted-list""><li style=""list-style-type:disc""><strong>Jinja2:</strong> is a popular template engine for Python. It was made after Django’s template. </li></ul><ul id=""7950dd88-d433-4f50-af6e-5daad718aec9"" class=""bulleted-list""><li style=""list-style-type:disc""><strong>html2image</strong>: This allows you to run a Chrome browser in the headless mode, render the HTML template, and then generate the screenshot of your browser output.</li></ul><pre id=""504caa69-a87a-4d0c-b56f-20d7a2c40cad"" class=""code""><code>Jinja2=3.1.2
html2image=2.0.3</code></pre><p id=""b498ce37-2a0b-4178-9b66-cf57b7c8d676"" class="""">Let’s first install <strong>Jinja2</strong> and html2Image python packages. You can install them using the following commands </p><pre id=""bdc1d647-4f17-4048-982d-8f22ae869da3"" class=""code""><code>pip3 install Jinja2
pip3 install html2image</code></pre><h2 id=""c1ae49d0-8312-4999-a63c-bb8428095e3d"" class="""">HTML Template</h2><p id=""52564650-a8b9-4531-bba2-3ce60b08af49"" class="""">Once the packages are installed, let us now create a HTML template file for our thumbnail. In this example, I am displaying the Post title and 3 other images. </p><pre id=""1da1fe09-6787-4b78-8611-804aa5733ec8"" class=""code""><code>&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;
  &lt;head&gt;
    &lt;meta charset=""UTF-8""&gt;
    &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1.0""&gt;
    &lt;meta http-equiv=""X-UA-Compatible"" content=""ie=edge""&gt;
    &lt;title&gt;My Website&lt;/title&gt;
    &lt;link rel=""stylesheet"" href=""./style.css""&gt;
    &lt;link rel=""icon"" href=""./favicon.ico"" type=""image/x-icon""&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;main&gt;
      &lt;div class=""main-wrapper""&gt;
      &lt;div class=""title-wrapper""&gt;
        &lt;h1 class=""post-title""&gt;
          {{post_title}}
        &lt;/h1&gt;  
        &lt;div class=""meta""&gt;
          &lt;img src=""{{author_image_url}}"" class=""author-avatar"" alt=""author Image""/&gt;
          &lt;span class=""author-name""&gt;{{author_name}}&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
        &lt;img src=""{{brand_logo_url}}"" class=""brand-logo"" alt=""Brand Image""/&gt;
        &lt;img src=""{{category_image}}"" class=""category-icon"" alt=""Category Image""/&gt;
      &lt;/div&gt;
    &lt;/main&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre><h2 id=""c8ac4dc9-f38a-439e-94d6-c99425a0b9f2"" class="""">Template CSS Code</h2><p id=""667a40a1-d972-4dfe-ac4e-e4e84a7a706c"" class="""">Here is my css stylesheet for the template. </p><pre id=""01820379-6293-4b36-a35c-f6c70ee030a5"" class=""code""><code>@import url('https://fonts.googleapis.com/css2?family=Inter:wght@200,500;600;800display=swap');

body{
    background-color: #000000;       
    font-family: 'Inter', sans-serif;    
}

.main-wrapper {
    background: #f9f9f9;
    opacity:1;
    background-image:  radial-gradient(#b8b8b8 0.5px, transparent 0.5px), radial-gradient(#b8b8b8 0.5px, #f9f9f9 0.5px);
    background-size: 20px 20px;
    background-position: 0 0,10px 10px;    
    width: 100%;
    height: 97%;
    position: fixed;
    top: 0%;
    left: 0%;
    z-index: 100;       
    display: flex;
    align-items: center;
}

.post-title{
    font-size: 6.25vw;
    text-align: left;
    margin-bottom:0;
    font-weight:600;
}

.title-wrapper{
    position: fixed;
    left: 8%;
    width: 84%;
    height: auto;
    line-height: 1.2;
    text-align: left;
    margin-top: -50px;
    margin-left: -100px;
    padding: 3em;
}

.meta {
  margin-top:50px;
  background:red
  height:80px;
  display: flex;
  justify-content: left;
  align-items: center;
}

.author-avatar {
  height:80px;
  border-radius:12px;
}

.author-name {
  margin-left:20px;
  font-size: 2.25rem;
  font-weight:600;
}


.brand-logo{
  position:absolute;
  height:60px;
  width:60px;
  right:40;
  bottom:40;
}


.category-icon {
  position:absolute;
  height:60px;
  width:60px;
  right:130;
  bottom:40;
}</code></pre><h2 id=""02330249-e610-4d4a-b280-2069da9523ef"" class="""">Generate Thumbnail from HTML in Python</h2><p id=""f1aeeaa6-afbb-4147-9a11-2250dacc45b4"" class="""">Now we have our template ready, let us use the following Python script which will generate the thumbnail using the <strong>html2image</strong>. </p><pre id=""5172ed2f-b156-44de-a2fc-54bb5249c2b6"" class=""code""><code>from pathlib import Path
from jinja2 import Environment, FileSystemLoader

from html2image import Html2Image
hti = Html2Image(size=(1200, 630))

environment = Environment(loader=FileSystemLoader(""templates/""))
template = environment.get_template(""template.html"")

content = template.render(
    post_title=""What is WebClient? How to use WebClient in Java SpringBoot"",
    author_name=""Nilanchala Panigrahy"",
    author_image_url=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/user/nilanchala/avatar.jpg"",
    brand_logo_url=""https://sgp1.digitaloceanspaces.com/stacktips/static/media/logo.png"",
    category_image=""https://sgp1.digitaloceanspaces.com/stacktips/media/uploads/categories/spring-boot.png""
)

css_string = Path(""templates/style.css"").read_text()
res = hti.screenshot(html_str=content, css_str=css_string,
               save_as='thumbnail.png'
               , size=(1200, 630))</code></pre><ul id=""da07ac41-0019-4237-bbb7-335ceaee03f6"" class=""bulleted-list""><li style=""list-style-type:disc"">First we are creating an instance of the <code><strong>Html2Image</strong></code> class by specifying the desired size of the generated image (1200 pixels width and 630 pixels height).</li></ul><ul id=""3a59a8b5-f88f-448a-b342-76f722e76a68"" class=""bulleted-list""><li style=""list-style-type:disc"">An instance of the Jinja2 <code>Environment</code> class is created, with a file system loader pointing to a directory named ""templates"". Then, a specific template named <code>template.html</code> is loaded from this environment.</li></ul><ul id=""4947093c-2436-4088-9186-cbf14b8cce85"" class=""bulleted-list""><li style=""list-style-type:disc"">Jinja2 then renders the template using the provided variables such as post title, author nameetc. </li></ul><ul id=""9d58cbf2-d469-4d85-8a81-709b44ccb5f1"" class=""bulleted-list""><li style=""list-style-type:disc"">Then we are using the <code>Html2Image</code> library and calling the screenshot method to generate the thumbnail image. It takes the rendered HTML content, CSS styles, output filename (""thumbnail.png""), and the size of the image as parameters. The result image is stored in the file system. </li></ul><h2 id=""3294fc89-806b-4bb9-8c36-1ec668ccd7e0"" class="""">Output</h2><p id=""0a8522e6-4810-4fb7-bd8a-f9b678cce0b3"" class="""">Now run your python code and notice that it will generate the following thumbnail.  </p><p id=""0a8522e6-4810-4fb7-bd8a-f9b678cce0b3"" class=""""><img style=""width: 978px;"" src=""/media/uploads/summernote/thumbnail.png""><br></p><p id=""6397ed53-543c-47a6-a89e-13d0091b684e"" class="""">This code is pretty basic. You can of course change it for your requirement to generate desired thumbnail layout.</p>",0,"standard","post"
"Introduction to Spring Boot Framework","introduction-to-spring-boot-framework","This tutorial covers the introduction to the Spring Boot framework, the key features the Spring Boot framework offers, and the Spring Boot Starter projects.","LIVE","<p>Spring Boot is a popular, open-source, enterprise-level framework for creating standalone, production-grade applications that run on the Java Virtual Machine (JVM).</p><p>It requires minimal or zero configuration and is easy to get started. It is a widely popular choice among Java developers for developing MicroServices and web applications.</p><p>Spring boot is built on top of the popular Spring Framework and inherits features like dependency injection(DI) or Inversion of Control (IoC) from the Spring.</p><p class="""">
<!-- notionvc: 982275d3-56a4-4747-9402-ed491556c944 --></p><p>It offers built-in support for typical tasks that an application needs to perform, such as data binding, type conversion, validation, exception handling, resource and event management, internationalization, and more.</p><h2>Why Spring Boot when we have Spring?</h2><p>While the Spring framework is a powerhouse with many built-in production-ready features, it requires <strong>complex configurations</strong>. We need to create XML or Java-based configurations to enable different features of the Spring Framework.</p><p>While we can use Spring Framework for building Microservices, it doesn't provide any specific tools and features to support Microservices architecture. Traditionally, the Spring applications are deployed to an external application server such as Tomcat or JBoss. However, the Spring boot framework makes it easy to deploy Microservices using the built-in <strong>Embedded Servers.</strong></p><p>
<!-- notionvc: 336fb8cf-d26c-4c5e-b4a3-03107dea1637 --></p><p>In the Spring framework, developers need to manage dependencies manually, which can sometimes lead to version conflicts and other issues.</p>
<h2>What can we do with Spring Boot?</h2><p>Spring Boot framework provides several features that make it ideal for building a variety of applications, including:</p><ul>
<li>You can create complex multi-tier web applications that can serve millions of users.</li>
<li>Spring Boot makes it easy to create RESTful APIs to expose your data and functionality to other applications.</li>
<li>Widely used choice for building small, independent services that can be easily scaled and deployed.</li>
<li>You can build a Spring batch application that can process large volumes of data based on a specific schedule or process based on a specific event.</li>
<li>Spring Boot also can be used to build applications that run on the command line.</li>
</ul><h2>Key Features of Spring Boot</h2><p>Some of the key features of the Spring Boot framework are:</p><ul>
<li>Auto-configuration</li>
<li>Dependency Injection (DI)</li>
<li>Spring Boot Starter Dependencies</li>
<li>Embedded Server</li>
<li>Production-ready features</li>
</ul><h3>Auto Configuration</h3><p>Auto-configuration is a feature in the Spring Boot Framework that aims to simplify the setup and configuration of Spring applications.</p><p>It makes it easier to create production-ready applications with minimal effort. <span>It automatically configures the application based on the dependencies present in the classpath.</span></p><p>When you include certain libraries or dependencies in your Spring Boot project, the framework automatically configures beans, settings, and components to provide a set of defaults. This means you don't need to do any manual configuration, as Spring Boot will set up the application based on conventions and best practices.</p><p><strong>For example:</strong></p><p>If your project includes the Spring Data JPA dependency in your pom.xml or <code>build.gradle</code> file then the Spring Boot framework will automatically configure a <code>DataSource</code> bean, an <code>EntityManager</code> bean for you to work with JPA.</p><p>If we want to customize the data source configuration, then we can override the following properties in the <code>application.properties</code> file to connect to a different data source.</p><pre><code class=""language-java"">spring.datasource.url=jdbc:mysql://localhost:3306/mydatabase
spring.datasource.username=myuser
spring.datasource.password=mypassword
</code></pre><p>Auto-configuration helps developers reduce the number of errors caused due to misconfiguration and makes developers more productive.</p><h3>Dependency Injection</h3><p>The Dependency Injection(DI) is one of the core features of the Spring framework. This allows developers to write loosely coupled code that is easy to maintain and test.</p><p>It is a software design pattern used in object-oriented programming, where the dependencies of a class are provided by an external entity rather than being created within the class itself. In other words, instead of a class creating its dependencies, those dependencies are ""injected"" into the class from outside.</p><p>The DI concepts are discussed more in detail in Chapter 4.</p><h3>Spring Boot Starter Dependencies</h3><p>For developing web applications or Micro-services, you will be required to add multiple external libraries for your application. For example, if you want to have logging support, you would need Logback or Log4J dependency.</p><p>Traditionally, we used to download the jar files and include into your project, but with build tools like Gradle and Maven, managing the dependencies becomes easy. However, the build tools do not solve the version compatibility issue.</p><p>For example,  If Lib1 depends on Lib2, you need to include both libraries manually in your <code>pom.xml</code> or <code>build.gradle</code> file and also you need to be careful about the version compatibility of each of those libraries. If Lib1 is compatible with a specific version of Lib2, then you need to be aware of that and include the compatible versions of Lib2 in your dependency descriptor file.</p><p>As your application grows, the number of dependencies will grow and managing those dependencies manually is very cumbersome and error-prone.</p><p>That’s where the Spring boot starter packages come to the rescue. Spring Boot provides us with several Spring Boot starter packages to address this problem.</p><p>There are two types of dependencies:</p><ul>
<li><strong>Direct:</strong> These are dependencies defined in your <code>pom.xml</code> or <code>build.gradle</code> file under the <code>dependencies</code> section.</li>
<li><strong>Transitive:</strong> These are dependencies that are dependencies of your direct dependencies.</li>
</ul><p>For example, if we add the <code>spring-boot-starter-web</code> as a dependency to your <code>pom.xml</code> file then will download <code>spring-boot-starter-tomcat</code> as the direct dependency and with that it will also download the other transitive dependencies like <code>tomcat-embedded-core</code> and <code>tomcat-embedded-el</code> and <code>tomcat-embedded-websocket</code></p>
<img src=""https://media.stacktips.com/media/uploads/summernote/spring-boot-dependencies.png""/>
<p>If you’re managing the dependencies manually, then you must be very careful about the specific version of the dependency you are using and also need to worry about their compatibility with each other.</p><p>Starter dependencies are a set of convenient dependency descriptors that we can use to bootstrap our Spring boot applications. They contain a lot of pre-defined dependencies with a supported set of transitive dependencies.</p><p>The starter dependencies ensure all the direct and transitive dependencies are always compatible with each other and you don't have to worry about managing those versions manually and focus only on application development.</p><p>Spring Boot starters follow a similar naming pattern, e.g. <code>spring-boot-starter-XYZ</code>, where XYZ denotes a particular type of library.</p><p>Here are some of the popular Spring Boot starter packages:</p><table>
<tbody>
<tr>
<td>spring-boot-starter-web</td>
<td>It is used for building web applications, including RESTful applications using Spring MVC. It uses Tomcat as the default embedded container</td>
</tr>
<tr>
<td>spring-boot-starter-activemq</td>
<td>It is used in JMS messaging using Apache ActiveMQ.</td>
</tr>
<tr>
<td>spring-boot-starter-actuator</td>
<td>Provides production-ready features such as health checks, monitoring, and other application management features.</td>
</tr>
<tr>
<td>spring-boot-starter-batch</td>
<td>It is used for the Spring Batch.</td>
</tr>
<tr>
<td>spring-boot-starter-cache</td>
<td>It is used for Spring Framework's caching support.</td>
</tr>
<tr>
<td>spring-boot-starter-data-jpa</td>
<td>It is used for Spring Data JPA with Hibernate.</td>
</tr>
<tr>
<td>spring-boot-starter-data-mongodb</td>
<td>It is used for MongoDB document-oriented database and Spring Data MongoDB.</td>
</tr>
<tr>
<td>spring-boot-starter-mail</td>
<td>It is used to support Java Mail and Spring Framework's email sending.</td>
</tr>
</tbody>
</table><h3>Embedded Servers</h3><p>Spring Boot includes support for embedded Tomcat, Jetty, and Undertow servers. This means you don’t need any external web servers and no need to deploy WAR files anymore.</p><p>The default embedded server is Tomcat, and it is available through the <code>spring-boot-starter-web</code> dependency. If you want to use the <strong>Jetty</strong> or <strong>Undertow</strong> server instead of <strong>Tomcat</strong>, then you can include <code>spring-boot-starter-jetty</code> or <code>spring-boot-starter-undertow</code> dependencies.</p><p>Checkout the article that explains how to <a href=""https://stacktips.com/articles/replace-tomcat-with-jetty-or-undertow-in-spring-boot"" target=""_blank"">replace default embedded Tomcat Server with Jetty or Undertow</a>.<br/></p><h3>Production Ready Features</h3><p>Spring Boot Framework includes production-ready features such as metrics, health checks, and external configuration management.  Spring Boot also provides integration with various enterprise technologies such as RMI, JPA and JMS, AMQP, etc.</p><ul>
<li>RMI</li>
<li>Hibernate</li>
<li>WebSocket API (<a href=""https://www.jcp.org/en/jsr/detail?id=356"">JSR 356</a>)</li>
<li>AMQP - Advanced Message Queuing Protocol</li>
<li>Java Web Services</li>
<li>JPA (<a href=""https://jcp.org/en/jsr/detail?id=338"">JSR 338</a>) - Java Persistence API</li>
<li>JMS</li>
</ul><p>Spring also provides a Model-View-Controller (MVC) framework that simplifies the development of web applications by separating the presentation layer from the business logic.</p><p>It also provides several tools and frameworks for testing applications, including the Spring Test Framework and the Spring MVC Test Framework.</p><h2>Spring Boot vs. Spring: What Works for You?</h2><p>Ultimately, the best framework for you will depend on your specific requirements. If you are not sure which framework to choose, I recommend starting with Spring Boot.</p><table>
<thead>
<tr>
<th>Features</th>
<th>Spring</th>
<th>Spring Boot</th>
</tr>
</thead>
<tbody>
<tr>
<td>Source type</td>
<td>It is an open-source framework.</td>
<td>It is built on top of a spring.</td>
</tr>
<tr>
<td>Core features</td>
<td>Dependency injection</td>
<td>Auto-configuration is an essential feature.</td>
</tr>
<tr>
<td>Deployment</td>
<td>The server is set explicitly for spring. The deployment descriptor is required.</td>
<td>Embedded servers are provided. The deployment descriptor is not required.</td>
</tr>
<tr>
<td>Use cases</td>
<td>Good for complex applications.</td>
<td>Good for rapid application development</td>
</tr>
<tr>
<td>Setup time</td>
<td>It takes more time to set up.</td>
<td>Faster to set up.</td>
</tr>
</tbody>
</table><p><span>Spring Boot is a great choice to get started with Spring development without having to worry about the complexities of the Spring Framework. Once you understand Spring better, you can decide if you need the additional features and flexibility of the Spring Framework.</span><br/></p>",1,"standard","lesson"
"Notes to Crack CLF-C01 AWS Certified Cloud Practitioner Exam on First Attempt","crack-clfc01-aws-certified-cloud-practitioner-on-first-attempt","Here are the notes that helped me to crack CLF-C01 AWS Certified Cloud Practitioner test in the first attempt.","LIVE","<p></p><p></p><p>Cloud computing technology allows companies to access and utilize computing resources and services over the internet, often referred to as “the cloud”.</p>
<p>Instead of owning and managing physical servers and data centres, cloud computing allows users to rent or lease computing resources, such as virtual machines, storage, databases, and more, from cloud service providers.</p>
<p>This model offers several benefits, including scalability, flexibility, cost-efficiency, and the ability to access resources from anywhere with an internet connection.</p>
<p>Some of the major cloud providers in the industry are:</p>
<ol><li>Amazon Web Services (AWS)<br></li><li>Microsoft Azure</li><li>Google Cloud Platform (GCP)</li></ol>
<p>This post is about the quick guide to CLF-C01 AWS Certified Cloud Practitioner Practice exam notes, hence we will cover the introduction to all the services provided by AWS.</p><p>AWS, a subsidiary of Amazon.com, is the largest and most widely adopted 
cloud provider. It offers a comprehensive suite of cloud computing 
services, including computing power, storage, databases, machine 
learning, analytics, and more.</p><h2 class="""">Advantages of Cloud Computing</h2>
<ul><li><b>Variable vs. capital expenses:</b> AWS offers you the pay-as-you-go pricing model hence as a business there are no capital expenses to get started your business on the cloud.</li><li><b>Economics of scale:</b> When the business expands, companies need to invest a huge amount of money to scale the on-premise setup. However, in the cloud, you can leverage economies of scale and benefit from having the shared Infrastructure, lower hardware costs, and efficient resource utilization which results in cost-effectiveness in scaling your application.</li><li><b>Stop guessing capacity:</b> Cloud providers offer auto scaling, so you do not need to plan in advance and guess the resource/compute requirements for your business.</li><li><b>Increase speed and Agility:</b> As the cloud requires less investment in the initial setup and other aspects such as maintenance, patching, security and compliance is taken care of by the cloud providers, business need to focus only on the business differentiators and application development without worrying about infrastructure.</li><li><b>Go global in minutes:</b> Cloud providers have data centres in multiple geographic regions, allowing users to deploy applications and services closer to their target audience for reduced latency.</li><li><b>Deployment Flexibility:</b> AWS offers different deployment models including all in-cloud and hybrid deployment.</li></ul>
<p></p><h2>AWS Infrastructure</h2>
<ul><li>AWS provides a highly available technology infrastructure platform with multiple locations worldwide. These locations are composed of regions and Availability Zones.</li><li>Each region is a separate geographic area. Each region has multiple, isolated locations known as Availability Zones.</li><li>AWS enables the placement of resources and data in multiple locations. Resources aren’t replicated across regions unless organizations choose to do so.</li><li>Each region is completely independent and is designed to be completely isolated from the other regions. This achieves the greatest possible fault tolerance and stability.</li><li>Each Availability Zone is also isolated, but the Availability Zones in a region are connected through low-latency links.</li></ul>
<p><strong>Accessing the Platform</strong></p>
<ul><li>AWS Management Console</li><li>AWS Command Line Interface (CLI)</li><li>AWS Software Development Kits (SDKs)</li></ul><h2>Compute and Networking Services</h2><p>AWS offers a wide range of compute and networking services to support various computing workloads and networking requirements.<br></p>
<h3>Amazon Elastic Compute Cloud (Amazon EC2)</h3>
<ul><li>Amazon EC2 is a web service that provides resizable <strong>computing capacity</strong> in the cloud. It allows organizations to obtain and configure virtual servers in Amazon’s data centres and to harness those resources to build and host software systems.</li><li>It allows selecting from a variety of operating systems and resource configurations (memory, CPU, storage, and so on) that are optimal for the application profile of each workload.</li><li>Amazon EC2 presents a true virtual computing environment, allowing organizations to launch compute resources with a variety of operating systems, load them with custom applications, and manage network access permissions while maintaining complete control.</li></ul>
<h3>AWS Lambda</h3>
<ul><li>AWS Lambda is a zero-administration computing platform that runs your code for you on the AWS Cloud.</li><li>AWS Lambda runs your back-end code on its own AWS compute fleet of Amazon EC2 instances across multiple Availability Zones in a region, which provides the high availability, security, performance, and scalability of the AWS infrastructure.</li></ul>
<h3>Auto Scaling</h3>
<p>Auto Scaling is well suited both to applications that have stable demand patterns and to
applications that experience hourly, daily, or weekly variability in usage.</p>
<h3>Elastic Load Balancing</h3>
<p>Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances in the cloud.</p>
<p>It enables organizations to achieve greater levels of fault tolerance in their applications, seamlessly providing the required amount of load-balancing capacity needed to distribute application traffic.</p>
<h3>AWS Elastic Beanstalk</h3>
<p>AWS Elastic Beanstalk is the fastest and simplest way to get a web application up and running on AWS. Developers can simply upload their application code, and the service automatically handles all the details, such as resource provisioning, load balancing, Auto Scaling, and monitoring.</p>
<p>It provides support for a variety of platforms, including PHP, Java, Python, Ruby, Node.js, .NET, and Go. With AWS Elastic Beanstalk, organizations retain full control over the AWS resources powering the application and can access the underlying resources at any time.</p>
<h3>Amazon Virtual Private Cloud (Amazon VPC)</h3>
<p>Amazon Virtual Private Cloud (Amazon VPC) lets organizations provision a logically isolated section of the AWS Cloud where they can launch AWS resources in a virtual network that they define.</p>
<p>Organizations have complete control over the virtual environment, including selection of the IP address range, creation of subnets, and configuration of route tables and network gateways. In addition, organizations can extend their corporate data centre networks to AWS by using hardware or software virtual private network (VPN) connections or dedicated circuits by using AWS Direct Connect.</p>
<h3>AWS Direct Connect</h3>
<p>AWS Direct Connect allows organizations to establish a dedicated network connection from their data centre to AWS. Using AWS Direct Connect, organizations can establish private connectivity between AWS and their data centre, office, or colocation environment, which in many cases can reduce network costs, increase bandwidth throughput, and provide a more consistent network experience than Internet-based VPN connections.</p>
<h3>Amazon Route 53</h3>
<p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service. It provides a reliable and cost-effective way to route end users to Internet applications by translating human readable names, such as www.example.com, into the numeric IP addresses, such as 192.0.2.1, that computers use to connect to each other.</p>
<p>Amazon Route 53 also serves as a domain registrar, allowing you to purchase and manage domains directly from AWS.</p><h2>Storage and Content Delivery</h2>
<p>AWS provides a variety of services to meet your storage needs, such as Amazon Simple Storage Service, Amazon CloudFront, and Amazon Elastic Block Store.</p>
<h3>Amazon Simple Storage Service (Amazon S3)</h3>
<ul><li>Amazon Simple Storage Service (Amazon S3) provides developers and IT teams with highly durable and scalable object storage that <strong>handles virtually unlimited amounts</strong> of data and large numbers of concurrent users.</li><li>Can be used to store any number of objects of any type, such as HTML pages, source code files, image files, and encrypted data, and access them using HTTP-based protocols.</li><li>Amazon S3 provides cost-effective object storage for a wide variety of use cases, including backup and recovery, nearline archives, big data analytics, disaster recovery, cloud applications, and content distribution.</li></ul>
<h3>Amazon Glacier</h3>
<ul><li>Amazon Glacier is a secure, durable, and extremely low-cost storage service for data archiving and long-term backup.</li><li>To keep costs low for customers, Amazon Glacier is optimized for infrequently accessed data where a retrieval time of several hours is suitable.</li><li>Amazon S3 integrates closely with Amazon Glacier to allow organisations to choose the right storage tier for their workloads.</li></ul>
<h3>Amazon Elastic Block Store (Amazon EBS)</h3>
<ul><li>Amazon Elastic Block Store (Amazon EBS) provides persistent block-level storage volumes for use with Amazon EC2 instances.</li><li>Each Amazon EBS volume is automatically replicated within its Availability Zone to protect organizations from component failure, offering high availability and durability.</li><li>By delivering consistent and low-latency performance, Amazon EBS provides the disk storage needed to run a wide variety of workloads.</li></ul>
<h3>AWS Storage Gateway</h3>
<ul><li>AWS Storage Gateway is a service connecting an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization’s on-premises IT environment and the AWS storage infrastructure.</li><li>The service supports industry-standard storage protocols that work with existing applications.</li><li>It provides low-latency performance by maintaining a cache of frequently accessed data on-premises while securely storing all of your data encrypted in Amazon S3 or Amazon Glacier.</li></ul>
<h3>Amazon CloudFront</h3>
<ul><li>Amazon CloudFront is a content delivery web service.</li><li>It integrates with other AWS Cloud services to give developers and businesses an easy way to distribute content to users across the world with low latency, high data transfer speeds, and no minimum usage commitments.</li><li>Amazon CloudFront can be used to deliver your entire website, including dynamic, static, streaming, and interactive content, using a global network of edge locations. Requests for content are automatically routed to the nearest edge location, so content is delivered with the best possible performance to end users around the globe.</li></ul><h2>Database Services</h2><p>AWS provides a comprehensive set of database services to meet a wide range of application requirements, from simple web applications to complex, enterprise-level systems. <br><br>These AWS database services are designed to be scalable, highly available, and fully managed, allowing you to focus on building and running your applications while AWS takes care of the database infrastructure. <br><br>Here are some of the key AWS database services:<br></p>
<h3>Amazon Relational Database Service (Amazon RDS)</h3>
<ul><li>A fully managed relational database with support for many popular open-source and commercial database engines.</li><li>It’s a cost-efficient service that allows organizations to launch secure, highly available, fault-tolerant, production-ready databases in minutes.</li><li>Because Amazon RDS manages time-consuming administration tasks, including backups, software patching, monitoring, scaling, and replication, organizational resources can focus on revenue-generating applications and business instead of mundane operational tasks.</li></ul>
<h3>Amazon DynamoDB</h3>
<ul><li>Amazon DynamoDB is a fast and flexible <strong>NoSQL databas</strong>e service for all applications that need consistent, single-digit millisecond latency at any scale.</li><li>It is a fully managed database and supports both document and key/value data models.</li><li>Its flexible data model and reliable performance make it a great fit for mobile, web, gaming, ad-tech, Internet of Things, and many other applications.</li></ul>
<h3>Amazon Redshift</h3>
<ul><li>Amazon Redshift is a fast, fully managed, petabyte-scale data warehouse service that makes it simple and cost-effective to analyze structured data.</li><li>Amazon Redshift provides a standard SQL interface that lets organizations use existing business intelligence tools.</li><li>By leveraging columnar storage technology that improves I/O efficiency and parallelizing queries across multiple nodes, Amazon Redshift is able to deliver fast query performance.</li><li>The Amazon Redshift architecture allows organizations to automate most of the common administrative tasks associated with provisioning, configuring, and monitoring a cloud data warehouse.</li></ul>
<h3>Amazon ElastiCache</h3>
<ul><li>Amazon ElastiCache is a web service that simplifies the deployment, operation, and scaling of <strong>an in-memory cach</strong>e in the cloud.</li><li>The service improves the performance of web applications by allowing organizations to retrieve information from fast, managed, in-memory caches, instead of relying entirely on slower, disk-based databases.</li><li>Amazon ElastiCache supports Memcached and Redis cache engines.</li></ul>

<p></p><p></p><h2 class="""">Cloud Management Tools</h2><p>AWS offers a variety of cloud management tools and services that help organizations efficiently manage their AWS resources, monitor performance, automate tasks, and ensure security and compliance. </p><p>Here are some key AWS cloud management tools and services:<br></p><p></p><h3 class="""">AWS Management Console:</h3><p></p><p>The AWS Management Console is a web-based interface that allows users to interact with and manage their AWS resources through a graphical user interface (GUI). It provides a user-friendly way to access and control AWS services.<br></p><p></p><h3 class="""">AWS Command Line Interface (CLI):</h3><p></p><p>The AWS CLI is a command-line tool that allows users to interact with AWS services through text commands. It provides a powerful and scriptable way to manage AWS resources and automate tasks.<br></p><p></p><h3 class="""">AWS Organizations:</h3><p></p><p>AWS Organizations is a service for managing multiple AWS accounts within an organization. It enables central management of billing, access control, and resource sharing across accounts.<br></p><p></p><h3 class="""">AWS Systems Manager:</h3><p></p><p>AWS Systems Manager provides a unified interface for managing AWS resources and applications. It offers features for inventory management, patch management, automation, and more.</p><h3 class="""">Amazon CloudWatch</h3>
<ul><li>Amazon CloudWatch is a <strong>monitoring service</strong> for AWS Cloud resources and the applications running on AWS.</li><li>It allows organizations to <strong>collect and track metrics, collect and monitor log files, and set alarms</strong>.</li><li>By leveraging Amazon CloudWatch, organizations can gain system-wide visibility into resource utilization, application performance, and operational health.</li></ul>
<h3>AWS CloudFormation</h3>
<ul><li>AWS CloudFormation gives developers and systems administrators an effective way to create and manage a collection of related AWS resources, provisioning and updating them in an orderly and predictable fashion.</li><li>AWS CloudFormation defines a JSON-based templating language that can be used to describe all the AWS resources that are necessary for a workload.</li><li>Templates can be submitted to AWS CloudFormation and the service will take care of provisioning and configuring those resources in appropriate order.</li></ul>
<img style=""width: 978px;"" src=""https://media.stacktips.com/media/uploads/summernote/aws-cloud-formation.png""><h3>AWS CloudTrail</h3>
<ul><li>AWS CloudTrail is a web service that records AWS API calls for an account and delivers log files for audit and review.</li><li>The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the service.</li></ul>
<h3>AWS Config</h3>
<ul><li>AWS Config is a fully managed service that provides organizations with an AWS resource inventory, configuration history, and configuration change notifications to enable security and governance.</li><li>With AWS Config, organizations can discover existing AWS resources, export an inventory of their AWS resources with all configuration details, and determine how a resource was configured at any point in time.</li><li>These capabilities enable compliance auditing, security analysis, resource change tracking, and troubleshooting.</li></ul><p></p><h3 class="""">AWS Service Catalog:</h3><p></p><p>AWS Service Catalog allows organizations to create and manage catalogs of approved AWS resources and services for use within their organization. It helps enforce compliance and governance.<br></p>
<h2>Security and Identity Management</h2><p>AWS offers a robust set of security and identity management services to help users and organizations protect their AWS resources and data. These services are designed to enforce access control, enhance security, and ensure compliance with industry standards and regulations. <br></p>
<h3>AWS Identity and Access Management (IAM)</h3>
<ul><li>AWS Identity and Access Management (IAM) enables organizations to securely control access to AWS Cloud services and resources for their users.</li><li>Using IAM, organizations can create and manage AWS users and groups and use permissions to allow and deny their access to AWS resources.</li></ul>
<h3>AWS Key Management Service (KMS)</h3>
<ul><li>AWS Key Management Service (KMS) is a managed service that makes it easy for organizations to create and control the encryption keys used to encrypt their data and uses</li><li>Hardware Security Modules (HSMs) to protect the security of your keys. AWS KMS is integrated with several other AWS Cloud services to help protect data stored with these services.</li></ul>
<h3>AWS Directory Service</h3>
<ul><li>AWS Directory Service allows organizations to set up and run Microsoft Active Directory on the AWS Cloud or connect their AWS resources with an existing on-premises Microsoft Active Directory.</li><li>Organizations can use it to manage users and groups, provide single sign-on to applications and services, create and apply Group Policies, domain join Amazon EC2 instances, and simplify the deployment and management of cloud-based Linux and Microsoft Windows workloads.</li></ul>
<h3>AWS Certificate Manager</h3>
<ul><li>AWS Certificate Manager is a service that lets organizations easily provision, manage, and deploy Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificates for use with AWS Cloud services. It removes the time-consuming manual process of purchasing, uploading, and renewing SSL/TLS certificates.</li><li>With AWS Certificate Manager, organizations can quickly request a certificate, deploy it on AWS resources such as Elastic Load Balancing or Amazon CloudFront distributions, and let AWS Certificate Manager handle certificate renewals.</li></ul>
<h3>AWS Web Application Firewall (WAF)</h3>
<ul><li>AWS Web Application Firewall (WAF) helps protect web applications from common attacks and exploits that could affect application availability, compromise security, or consume excessive resources.</li><li>AWS WAF gives organizations control over which traffic to allow or block to their web applications by defining customizable web security rules.</li></ul>
<h2>Application Services</h2><p>AWS offers a variety of application services that enable developers to build, deploy, and scale applications quickly and easily. <br></p>
<h3>Amazon API Gateway</h3>
<ul><li>Amazon API Gateway is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale.</li><li>Organizations can create an API that acts as a “front door” for applications to access data, business logic, or functionality from back-end services, such as workloads running on Amazon EC2, code running on AWS Lambda, or any web application.</li><li>Amazon API Gateway handles all the tasks involved in accepting and processing up to hundreds of thousands of concurrent API calls, including traffic management, authorization and access control, monitoring, and API version management.</li></ul>
<h3>Amazon Elastic Transcoder</h3>
<ul><li>Amazon Elastic Transcoder is media transcoding in the cloud.</li><li>It is designed to be a highly scalable and cost-effective way for developers and businesses to convert (or transcode) media files from their source formats into versions that will play back on devices like smartphones, tablets, and PCs.</li></ul>
<h3>Amazon Simple Notification Service (Amazon SNS)</h3>
<ul><li>Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to recipients.</li><li>In Amazon SNS, there are two types of clients—<strong>publishers and subscribers—also referred to as producers and consumers</strong>. Publishers communicate <strong>asynchronously</strong> with subscribers by producing and sending a message to a topic, which is a logical access point and communication channel.</li><li>Subscribers consume or receive the message or notification over one of the supported protocols when they are subscribed to the topic.</li></ul>
<h3>Amazon Simple Email Service (Amazon SES)</h3>
<ul><li>Amazon Simple Email Service (Amazon SES) is a cost-effective email service that organizations can use to send transactional emails, marketing messages, or any other type of content to their customers.</li><li>Amazon SES can also be used to receive messages and deliver them to an Amazon S3 bucket, call custom code via an AWS Lambda function, or publish notifications to Amazon SNS.</li></ul>
<h3>Amazon Simple Workflow Service (Amazon SWF)</h3>
<ul><li>Amazon Simple Workflow Service (Amazon SWF) helps developers build, run, and scale background jobs that have parallel or sequential steps.</li><li>Amazon SWF can be thought of as a fully managed state tracker and task coordinator on the cloud.</li><li>In common architectural patterns, if your application’s steps take more than 500 milliseconds to complete, it is vitally important to track the state of processing and to provide the ability to recover or retry if a task fails. Amazon SWF helps organizations achieve this reliability.</li></ul>
<h3>Amazon Simple Queue Service (Amazon SQS)</h3>
<ul><li>Amazon Simple Queue Service (Amazon SQS) is a fast, reliable, scalable, fully managed <strong>message queuing service.</strong></li><li>Amazon SQS makes it simple and cost-effective to decouple the components of a cloud application.</li><li>With Amazon SQS, organizations can transmit any volume of data, at any level of throughput, without losing messages or requiring other services to be always available.</li></ul>
<h2>Cloud Object Storage - Amazon S3</h2>
<p>Common use cases for Amazon S3 storage include:</p>
<ul><li>Backup and archive for on-premises or cloud data</li><li>Content, media, and software storage and distribution
Big data analytics</li><li>Static website hosting</li><li>Cloud-native mobile and Internet application hosting</li><li>Disaster recovery</li></ul>
<p>S3 offers 3 storage classes</p>
<ul><li>Standard</li><li>Infrequent Access</li><li>archive</li></ul>
<p>Can use lifecycle policy to automatically migrate the data to the appropriate storage class.</p>
<p>Glacier is used for archived data storage or for storing cold data.</p>
<h3>s3 Bucket</h3>
<p>A <em>bucket</em> is a container (web folder) for objects (files) stored in Amazon S3. Every Amazon S3
the object is contained in a bucket.</p>
<p>Your bucket names must be unique across all AWS accounts, much like Domain Name System (DNS) domain names, not just within your own account.</p>
<p>Bucket names can contain up to 63 lowercase letters, numbers, hyphens, and periods.</p>
<p>You can create and use multiple buckets; you can have up to 100 per account by default.</p>
<p>Even though the namespace for Amazon S3 buckets is global, each Amazon S3 bucket is created in a specific region that you choose.</p>
<h3>Objects</h3>
<p><em>Objects</em> are the entities or files stored in Amazon S3 buckets. An object can store virtually any
kind of data in any format. Objects can range in size from 0 bytes up to 5TB, and a single
bucket can store an unlimited number of objects. This means that Amazon S3 can store a
virtually unlimited amount of data.</p>
<h3>Durability and Availability</h3>
<p>Amazon S3 standard storage is designed for 99.999999999% durability and 99.99% availability of objects over a given year. Amazon S3 achieves high durability by automatically storing data redundantly on multiple devices in multiple facilities within a region.</p>
<p>If you need to store non-critical or easily reproducible derived data (such as image thumbnails) that doesn’t require this high level of durability, you can choose to use Reduced Redundancy Storage (RRS) at a lower cost. RRS offers 99.99% durability with a lower cost of storage than traditional Amazon S3 storage.</p>
<p><br></p>


<p></p>",0,"standard","post"
"How to Install Java for MacOS and Windows?","how-to-install-java-for-macos-and-windows","This post explains how to install Java on MacOS and Windows OS using SDKMan, Homebrew, and using the Windows installer.","LIVE","<p id=""ceea6beb-376d-412d-a2f8-8841b4be27f8"" class="""">You have two choices when it comes to installing Java. You either use the Oracle JDK or OpenJDK.&nbsp;<span style=""font-size: 1rem;"">Oracle JDK offers all the features of Open JDK, plus some proprietary features and</span><span style=""font-family: Inter, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif; font-size: 1rem;"">&nbsp;commercial support from Oracle.</span></p><p id=""ceea6beb-376d-412d-a2f8-8841b4be27f8"" class="""">Open JDK is the open source version of Java and it is free to use for both personal and commercial projects.</p><p id=""ceea6beb-376d-412d-a2f8-8841b4be27f8"" class="""">There are many different distributions of OpenJDK available, some of the popular distributions are Amazon Corretto, Microsoft JDK, Azul Zulu, and Red Hat OpenJDK.</p><p id=""ceea6beb-376d-412d-a2f8-8841b4be27f8"" class="""">In this article, we show you how to install Java on Mac using <b>SDKMan</b> and <b>Homebrew</b> and using windows installer.
        </p>
        <h2 class="""">Install Java Using SDKMan</h2>
        <p id=""2e2b9657-9595-4cc5-9e05-40e7ee45bbc8"" class="""">
            SDKMan is a command line utility used for managing multiple versions of SDKs. This works for&nbsp;MacOS and Linux, Windows WSL.&nbsp;&nbsp;<span style=""font-size: 1rem;"">SDKMan simplifies the installation, management, and switching between different versions of Java SDK effortlessly.
</span></p><p id=""2e2b9657-9595-4cc5-9e05-40e7ee45bbc8"" class=""""><span style=""font-size: 1rem;"">            To get the list of </span>available<span style=""font-size: 1rem;"">&nbsp;java SDK's using SDKMan, use</span></p>
        <pre id=""cf57b9ae-85a2-40f3-a1ed-c075c7dd25db"" class=""code""><code>sdk list java</code></pre>
        <p id=""207713e4-fa96-4832-b2e9-78fb33a7a295"" class="""">This will return a list of all available Java versions</p><p id=""207713e4-fa96-4832-b2e9-78fb33a7a295"" class=""""><img src=""https://media.stacktips.com/media/uploads/summernote/install_java_in_mac_using_homebrew.png"" style=""width: 978px;""><br></p>
        
        <p id=""d24410fc-34f1-419e-8bba-6599835e0d64"" class="""">
            You can filter a specific Java version using `grep` command.&nbsp;&nbsp;</p>
        <pre id=""73812692-4b5e-4503-ace1-5a5e10543ff5"" class=""code""><code>sdk list java | grep 17</code></pre>
        <p id=""98b4889e-76be-407d-b7e4-169c08d87e50"" class="""">
            Now to install a specific version, you need to use the distribution identifier</p>
        <pre id=""1665e283-49c2-4dbc-a291-c3608a81cab2"" class=""code""><code>sdk install java 21-amzn</code></pre>
        <p id=""17303d40-7cf7-4af2-acaa-79cfd021765c"" class="""">To check the list of installed Java versions</p>
        <pre id=""b31a9c77-8e61-420b-a9a4-2380e955c1e8"" class=""code""><code>sdk list java | grep installed</code></pre>
        <p id=""6dadc11a-357e-4a13-b5ea-0b581eb688a4"" class="""">Use specific versions of Java</p>
        <pre id=""6316ba31-a6d8-480a-82e1-04f10fe35790"" class=""code""><code>sdk use java 21-amzn</code></pre>
        <h2 class="""">Install Java in Windows OS</h2>
        <p id=""9f033396-898d-4e04-b1ed-bfb7fa33d22a"" class="""">
            For instructions on how to install using the graphical&nbsp;<code>PKG</code>&nbsp;and&nbsp;<code>MSI</code>&nbsp;installers, or through package managers&nbsp;<code>WinGet</code>,&nbsp;<code>Homebrew</code>,&nbsp;<code>apt</code>,&nbsp;and&nbsp;<code>yum</code>, see the&nbsp;<a href=""https://learn.microsoft.com/en-us/java/openjdk/install"" target=""_blank"">Install</a>&nbsp;page.
        </p>
        <p id=""64971602-ce5e-4f92-9c88-dd04d4fdef64"" class="""">
            To ensure that Java is installed correctly, open a Command Prompt or PowerShell window and enter the following command.
        </p>
        <pre id=""9ca0307c-2ae7-4b7f-8d11-b3188d72c4f5"" class=""code""><code>java -version</code></pre>
        <h2 class="""">Install Java using Homebrew</h2>
        <ul id=""d94f736f-0528-48e5-ae4e-b07ddc2eb303"" class=""bulleted-list"">
            <li style=""list-style-type:disc"">
                Install and upgrade&nbsp;<a href=""https://brew.sh/"" target=""_blank"">Homebrew</a>.
            </li>
        </ul>
        <ul id=""6adf7b40-c99d-421f-86c4-f761e658735a"" class=""bulleted-list"">
            <li style=""list-style-type:disc"">
                Type <code>brew search openjdk</code>&nbsp;to find all available Java-related formulas.
            </li>
        </ul>
        <pre id=""a3b4a41b-53d2-4299-98b3-86c8116c4f0b"" class=""code""><code>$ brew search openjdk
==&gt; Formulae
openjdk ✔           openjdk@11          openjdk@17 ✔        openjdk@8

==&gt; Casks
adoptopenjdk       homebrew/cask-versions/adoptopenjdk8
microsoft-openjdk  homebrew/cask-versions/microsoft-openjdk11
openkey</code></pre>
        <p id=""22987be6-1ba8-4edb-8373-0eab6fe81d0a"" class="""">
            To show the formula details, you can use the <code>brew info</code>&nbsp;command. The Java formula always contains the latest OpenJDK version; at the time of writing, the latest is JDK 17.
        </p>
        <p id=""a03958c9-7ac6-46dd-9eb8-619e0eca3d27"" class="""">
            The&nbsp;<code>openjdk@17</code>&nbsp;formula contains the Java 17LTS version
        </p>
        <pre id=""43caa54f-7846-4891-b374-cb0f90d91552"" class=""code""><code>$ brew info openjdk@17
==&gt; openjdk@17: stable 17.0.4.1 (bottled) [keg-only]
Development kit for the Java programming language
https://openjdk.java.net/
/usr/local/Cellar/openjdk@17/17.0.4.1_1 (639 files, 305.6MB)
  Poured from bottle on 2023-09-25 at 00:00:57
From: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/openjdk@17.rb
License: GPL-2.0-only with Classpath-exception-2.0
==&gt; Dependencies
Build: autoconf ✘
==&gt; Requirements
Build: Xcode ✔
==&gt; Caveats
For the system Java wrappers to find this JDK, symlink it with
  sudo ln -sfn /usr/local/opt/openjdk@17/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-17.jdk

openjdk@17 is keg-only, which means it was not symlinked into /usr/local,
because this is an alternate version of another formula.

If you need to have openjdk@17 first in your PATH, run:
  echo 'export PATH=""/usr/local/opt/openjdk@17/bin:$PATH""' &gt;&gt; ~/.zshrc

For compilers to find openjdk@17 you may need to set:
  export CPPFLAGS=""-I/usr/local/opt/openjdk@17/include""

==&gt; Analytics
install: 30,649 (30 days), 82,462 (90 days), 154,946 (365 days)
install-on-request: 20,080 (30 days), 52,615 (90 days), 88,978 (365 days)
build-error: 65 (30 days)</code></pre>
        <p id=""c124197c-9f7f-4833-ac76-9536e7b82c16"" class="""">Now install the Open JDK 17:</p>
        <pre id=""6223092b-57c5-48e9-9ed0-fc28c336da48"" class=""code""><code>brew install openjdk@17</code></pre>",0,"standard","post"
"Replace Embedded Tomcat Server with Jetty or Undertow in Spring Boot","replace-tomcat-with-jetty-or-undertow-in-spring-boot","This article explains how to replace the default embedded Tomcat server with Jetty or Undertow servers for your Spring Boot application.","LIVE","<div class=""page-body""><p class="""" id=""c38cc3fa-5109-4b40-b4f8-369d9db04f94"">One of the key features of the Spring Boot framework is the built-in support for embedded servers. It includes support for embedded Tomcat, Jetty and Undertow servers. This means you don’t need any external web servers and no need to deploy WAR files anymore.</p><p class="""" id=""6bc8114c-5e60-4f3e-b1e6-19d83178e76a"">The embedded Tomcat server is available through the <code>spring-boot-starter-web</code> dependency. </p><p class="""" id=""90c4a299-c99c-4ef2-afeb-6e590bbbe984"">However, if you want Jetty or Undertow servers then you can include <code>spring-boot-starter-jetty</code> or <code>spring-boot-starter-undertow</code> dependencies. </p><p class="""" id=""91026ae8-0238-45f4-8880-5878303d5234"">This article explains how to replace the default embedded Tomcat with Jetty or Undertow servers. </p><h2 class="""" id=""74755ebe-eaac-4d7b-bbde-9037c255c4aa"">Replace Tomcat with the Jetty in Spring Boot</h2><p class="""" id=""63e07fe5-1c66-4840-a085-096d3812947f"">To use the embedded Jetty server instead of Tomcat, you need to exclude the <code>spring-boot-starter-tomcat</code> from <code>spring-boot-starter-web</code> and include the <code>spring-boot-starter-jetty</code> dependency. </p><p class="""" id=""11405a85-0991-48c2-af37-c210054c038d"">Also, you will need to exclude the default added spring-boot-starter-tomcat dependency.</p><h3 class="""" id=""6d8dc9ef-c138-40dd-8cef-fa82eb30c624"">For Spring Boot Version 2.x.x</h3><p class="""" id=""5960853a-f266-4613-8cc7-be3fcc82b502"">For <b>Gradle</b>, make the following changes to your <code>build.gradle</code> file.</p><pre class=""code"" id=""3dcaa4b6-59d0-44b6-a146-20b74d483703""><code>dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group:'org.springframework.boot', module:'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-jetty'
}</code></pre><p class="""" id=""68360616-e8ef-421a-b496-ac3327a72b7f"">If you’re using <b>Maven</b> build tools, you need to add this to your <code>pom.xml</code> file.</p><pre class=""code"" id=""1c424b7d-2659-45af-b11e-8e36b7e39e06""><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre><h3 class="""" id=""6664933c-3c1c-46ac-8e64-f8c9cec36b3a"">For Spring Boot Version 3.x.x</h3><p class="""" id=""a533d7ee-d83e-40af-87c1-5df983ba343b"">The above configuration works for Spring Boot version 2.x, but it will throw the following error if you’re using the latest Spring Boot version 3.x. </p><pre class=""code"" id=""a98df0e9-be38-47f9-a925-88b51b2f71cc""><code>java.lang.ClassNotFoundException: jakarta.servlet.http.HttpSessionContext 
with Spring Boot 3 and Jetty server</code></pre><p class="""" id=""9f1cd2b4-58c3-4902-bb09-5dcc2db596c6"">This is because Jetty does not yet support Servlet 6.0. To use Jetty with Spring Boot 3.0, you will have to downgrade the Servlet API to 5.0. You can use the <code>jakarta-servlet.version</code> property to do so.</p><p class="""" id=""2fa5db8d-9c3f-4610-bf1f-2d85d8231470"">Ref: <a href=""https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#jetty"" target=""_blank"">Spring-Boot-3.0-Migration-Guide</a></p><pre class=""code"" id=""b1ee2ce0-76d7-47d3-ac9e-182882f0adfc""><code>ext['jakarta-servlet.version'] = '5.0.0'
dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation 'org.springframework.boot:spring-boot-starter-jetty'
    modules {
        module(""org.springframework.boot:spring-boot-starter-tomcat"") {
            replacedBy(""org.springframework.boot:spring-boot-starter-jetty"")
        }
    }
}</code></pre><p class="""" id=""56d766ea-d786-43ae-b607-dca3be923250"">If you’re using <b>Maven</b> build tools, you need to add this to your <code>pom.xml</code> file.</p><pre class=""code"" id=""31a76cac-f20a-46e8-82a9-37f383f0cb61""><code>&lt;properties&gt;
    &lt;java.version&gt;17&lt;/java.version&gt;
    &lt;jakarta-servlet.version&gt;5.0.0&lt;/jakarta-servlet.version&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;exclusions&gt;
            &lt;exclusion&gt;
                &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;/exclusion&gt;
        &lt;/exclusions&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre><h2 class="""" id=""87ce885b-b0c2-4a0e-a05f-26158aba65b5"">Replace Tomcat with Undertow in Spring Boot</h2><p class="""" id=""a78bcf19-abfb-4ba1-af9b-4de5aa58ae07"">To use Undertow instead of Tomcat, first, you need to exclude the spring-boot-starter-tomcat from spring-boot-starter-web. Then you should add the undertow starter as shown here.</p><p class="""" id=""f7033aa4-cc95-47d8-b743-16a5f4b8fa6b"">For <b>Gradle</b>, make the following changes to your <code>build.gradle</code> file.</p><pre class=""code"" id=""c559c915-e402-4628-ade5-50d979528c9f""><code>dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group:'org.springframework.boot', module:'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
}</code></pre><p class="""" id=""d3a01c72-abfe-44ca-9e98-015cc36cad98"">If you’re using <b>Maven</b> build tools, you need to add this to your <code>pom.xml</code> file.</p><pre class=""code"" id=""ebe035ea-2936-428e-a565-6bc2a4470efc""><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre></div>",0,"standard","post"
"7 Blogging Mistakes I Wish I Had Known Before I Started","7-blogging-mistakes-i-wish-i-had-known-before","This what I have learnt over the several years being a passive blogger. 7 Blogging Mistakes I Wish I Had Known Before.","LIVE","<p class=""""><span>My personal journey in tech blogging has been a roller coaster ride. I have been blogging ever since I entered the IT industry as a new entrant in 2008. It was driven by the passion for learning new technology and exploring stuff that is contrary to my regular day-to-day job.</span><br/></p>
<p class="""" id=""d8c3b8c7-5586-418a-811f-0262ea169c72"">
                    So when I was working as an Android application developer, in my personal time I was trying to learn J2EE and Apache Struts. And, I love taking notes along the way while doing small and simple POCs.
                </p>
<p class="""" id=""252a56ed-1130-4668-8188-d497d5aaa856"">
                    At that time there was no application like Notion, so I decided to create a website using Google Blogspot and started capturing all my notes there. Those notes mainly served as a bookmark, so I could refresh my memory whenever I wanted.
                </p>
<p class="""" id=""f9d8d71d-daf7-46b7-a3b5-eb3db9fa4614"">
                    Slowly, I started to like writing detailed tutorials and sharing my knowledge which some of my friends, and colleagues loved to read. <span>And that is how I was introduced to blogging. </span><span>But, I never wanted to be a full-time blogger. I never believed I had that spark, which would make me living out of it. That made me a passive blogger.</span></p>
<h2 class="""">
7 Blogging Mistakes I wish I had Known Before
                </h2>
<p class="""" id=""2c0a4229-25d4-4d18-995f-6cfffa0a7402"">
                    Over the years, I've had my fair share of experiences as a passive blogger, and through trial and error, I've learned valuable lessons that I wish I had known earlier.
                </p>
<p class="""" id=""3e675f3e-6109-4a6b-b344-0c091bd3a35b"">
                    In this blog post, I'll share these insights with you, in the hope that they'll help you on your own blogging journey.
                </p>
<p class="""" id=""ddbeda07-c979-43d0-8bfe-b0f60d069fb4"">
                    This post is probably too long for you. You don't need to spend all your time reading this unless you really want to hear my story.
                </p>
<p class="""" id=""bc315ff8-21d8-4a1d-8fbe-35727719d4d7"">Let’s cut to the chase:</p>
<ul class=""bulleted-list"" id=""4b40ea55-3a08-43e8-b41e-0f34d0365322"">
<li>Content is the king, but consistency is the key to success!</li>
<li>Building a distribution channel is more important than building a great site.</li>
<li>
                        You don't need a perfect domain or perfect site design. No one gives a shit about your domain name or site design as long as you have the X factor in your content.
                    </li>
<li>
                        Understand your niche. Don't try to be a jack of all, you may appear as a jackass.
                    </li>
<li>
                        SEO is the secret weapon. The earlier you realize the better for your site growth.
                    </li>
<li>
                        Engagements are more important than having a larger number of subscribers/followers.
                    </li>
<li>
                        Social media can help you to create the hype but a simple mistake can fuck up your whole strategy. So use it cautiously.
                    </li>
</ul>
<p class="""" id=""9f35eb06-a580-4098-9280-4a4a1f597bdb"">
<strong>Only, for not-so-busy people:</strong>
</p>
<p class="""" id=""cdd5ee04-8150-4094-8f91-ae2cd5d05b0f"">Nothing new here, but I expand on these above topics.</p>
<h3 class="""" id=""5a75f531-9a9a-4656-bc85-a4b09bc77db8"">
                    1. Content is the King, but Consistency is the Key</h3>
<p class="""" id=""d6c186da-9bb8-4637-9f20-e8bba6950bf4"">
                    Great content is essential for any successful blog, this is a must-have. However, consistency is equally important. You need to strike the right balance between quality and quantity.
                </p>
<p class="""" id=""44a8e6e6-3590-4a5c-a560-4f21f1a74460"">
                    As a lone worrier, I used to dedicate a few hours over a weekend to produce 2/3 articles for my blog.  But I never realized that we need to be consistent in publishing stories.  I used to publish 3/4 articles in a day and then nothing for the rest of the month.
                </p>
<p class="""" id=""029b28da-d994-4bbb-b977-8866b376444b"">
                    Publishing many articles a day, makes your readers overwhelmed with content so it is very unlikely that all your stories will be read by everyone. But publishing a story on a regular interval, let’s say every Sunday, will definitely drive more engagement, and your readers will love to spend a few minutes reading a story per week.
                </p>
<h3 class="""" id=""53fbccb3-3a52-4d46-8c35-2ff93f90120b"">2. Building a Distribution Channel is Equally Important as Building a Great Site</h3>
<p class="""" id=""a355976c-14f8-4918-9ca1-a44b11e73fd7"">
                    Great content is like a hidden treasure, it is worth only when discovered by your readers.  Without having an effective distribution strategy no one will ever find what you write.
                </p>
<p class="""" id=""d37b65aa-ee83-4a69-a54b-bb39f0a522c2"">
                    You need to plan your distribution strategy including content syndication, building email lists, social media groups, etc.
                </p>
<h3 class="""" id=""01162e13-2f1c-4062-bd28-96f39ec8727a"">
3. You Don't Need a Perfect Domain or Perfect Site Design</h3>
<p class="""" id=""96f90f17-d0bb-4ecb-99b5-01165bf31589"">
                    Many aspiring bloggers get caught up in the quest for the perfect domain name or website design. While these factors are important, they are not as critical as the quality and uniqueness of your content.
                </p>
<h3 class="""" id=""b84aae72-a249-400a-a85e-cfd5c3c5f07f"">
4. Understand Your Niche</h3>
<p class="""" id=""485090a6-3a56-4637-a018-8eb6b384191a"">
                    Trying to cover too many topics can dilute your blog's identity and make you appear unfocused. Find out why it's crucial to understand your niche and become an authority in it.
                </p>
<h3 class="""" id=""6a5cb8d0-30c6-4197-b66a-7ec9eb48a519"">
5. SEO is the Secret Weapon</h3>
<p class="""" id=""257c640b-63cc-4f05-88e5-866ccd757ea9"">
                    Search Engine Optimization (SEO) can be a game-changer for your blog's growth and to drive organic traffic to your blog.  While SEO strategy might sound easy when you Google these topics, there is a vast amount of science behind it.
                </p>
<p class="""" id=""0b9c710a-68c3-4f71-b664-5594e3dd3a5c"">
                    Some of these include:
                </p>
<ul class=""bulleted-list"" id=""d0cfc364-44ba-498e-aaf2-1d81915b667f"">
<li>
                        Having a catchy page title (not clickbait) and page description.
                    </li>
<li>
                        Maintain a structural hierarchy of your content on the page
                    </li>
<li>
                        Canonical and SEO-friendly page links
                    </li>
<li>
                        Backlinks and building trustworthiness
                    </li>
<li>
                        Page loading speed
                    </li>
<li>
                        Image and video annotations and structured content markup
                    </li>
<li>
                        Submit the site to search engines
                    </li>
</ul>
<p class="""" id=""9571c7dd-897e-4497-aa38-c5acc9ddd880"">
                    These are just a few of these SEO strategies to start with.
                </p>
<h3 class="""" id=""115cc2e5-54cd-480f-aad4-528e27eaca56"">
6. Engagements are More Important than a Subscribers Count</h3>
<p class="""" id=""6057d37b-ab2c-4a17-9813-771c11947103"">
                    It's not just about the numbers. Don't always throw your stuff, expand your social posts to other stuff including a photo from your pub night or day out with your kids. People love to connect with humans more than a BOT?.
                </p>
<p class="""" id=""7cd06658-2c65-4f06-9d9f-8e583dd37aff"">
                    Engaging with your audience, building a community, and nurturing relationships can be more valuable than having a massive but passive following.
                </p>
<h3 class="""" id=""a70e6b73-6ab2-410f-9cfd-f4f6b112ed70"">
7. Social Media: Hype and Caution</h3>
<p class="""" id=""627ef74c-6bce-4739-a04d-f65aa43acd7d"">
                    Social media can be a double-edged sword. Learn how to leverage its potential to create excitement around your blog while avoiding common pitfalls that can harm your strategy.
                </p>
<h3 class="""" id=""7174a26a-40dd-4c72-8186-f3f8245462e4"">
In Summary,</h3>
<p class="""" id=""79a1cc7c-39ed-4320-bfab-d9ec1554194c"">
                    I am not a very successful blogger. I never made direct money out of my blogging. However, blogging enabled me to expand my horizons and build connections. Using my blogging connections I have published books, built projects, and earned sufficient money to call out “My Blogging Journey has been Worthwhile!”.
                </p>
<p class="""" id=""2db7ad25-55dc-4d13-84ac-b589979f8af8"">
                    Happy blogging!
                </p>",0,"standard","post"
"Schedule Task in Spring Boot Using @Scheduled Annotation","schedule-task-in-spring-boot-using-scheduled-annotation","Scheduling task in Spring boot using @Scheduled annotation with examples showcasing fixed rate, fixed delay, and using cron expressions.","DRAFT","<p id=""3d22ae60-dfc5-4ca9-b79a-6a0bfdd67b28"" class="""">Spring Scheduler is used for&nbsp;<span style=""font-size: 1rem;"">running repetitive tasks or to automate
			tasks that need to run at specific times or at specific intervals.&nbsp;</span><span style=""font-size: 1rem;"">For example such as sending our email newsletters to your
			customers, generating daily reports, or updating a database.</span></p>
		<h2 class="""">Enable Scheduling</h2>
		<p id=""7729bbd6-8597-4136-b3e2-e0c4ca3f0354"" class="""">To enable Spring's scheduled task execution
			capability, just annotate any of your <code>@Configuration</code> classes with
			<code>@EnableScheduling</code>.</p>
		<pre id=""3206f81b-17b3-42e5-b022-e4be8f727ce8"" class=""code""><code>@Configuration
@EnableScheduling
public class SchedulerConfig {
    // Here it goes your configuration
}</code></pre>
		<h3 id=""ab12bea7-7fd6-49cf-99a0-c93c8ca97e2c"" class="""">Cron Expression</h3>
		<p id=""e9b9bb9d-67a4-4e73-9178-7a0b37a31042"" class="""">A Cron expression consists of six sequential fields and is
			declared as <code>second, minute, hour, day of month, month, day(s) of week</code>. A cron expression is&nbsp;<span style=""font-size: 1rem;"">declared as follows:</span></p>
		<pre id=""ee5d7eee-6d2a-4018-9194-3d24c87f12e7"" class=""code""><code>@Slf4j
@Component
public class MyScheduler {

    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(""HH:mm:ss"");

    @Scheduled(cron = ""*/5 * * * * *"")
    public void currentTime() {
        log.info(""Current Time = {}"", dateFormat.format(new Date()));
    }

}</code></pre>
		<p id=""63ed78ab-b83a-4692-9289-0e63aa088d64"" class="""">We can also set the timezone as: <a href=""https://docs.oracle.com/cd/B13866_04/webconf.904/b10877/timezone.htm"">https://docs.oracle.com/</a>
		</p>
		<pre id=""b94dcc7f-0d65-4258-a3c7-0a456ffd775e"" class=""code""><code>@Scheduled(cron=""* * * * * *"", zone=""Europe/London"")</code></pre>
		<h3 id=""43c9000d-5609-4e8d-8817-d059a145bde2"" class="""">Fixed Delay</h3>
		<p id=""be5fe0e1-b04e-418c-a4ea-e7c3039ab91f"" class="""">The <code>fixedDelay</code> property makes sure that there
			is a delay of n millisecond between the finish time of an execution of a task and the start time of the next
			execution of the task.</p>
		<pre id=""cd7be512-609a-4e62-aedb-677e9786c569"" class=""code""><code>@Component
public class MyScheduler {

     @Scheduled(fixedDelay=5000) 
     public void doSomething() {
          //This will execute periodically, after the one before finishes
     } 

}</code></pre>
		<p id=""b23acf7d-a386-439c-a475-eb832e95cedb"" class="""">By default, milliseconds will be used as the time unit for
			fixed delay, fixed rate, and initial delay values. If you would like to use a different time unit such as
			seconds or minutes, you can configure this via the&nbsp;<code>timeUnit</code>&nbsp;attribute
			in&nbsp;<code>@Scheduled</code>.</p>
		<p id=""2df08c90-bd54-41e9-833f-6d34858a972c"" class="""">For example, the previous example can also be written as
			follows.</p>
		<pre id=""89a889b4-b250-47da-ad75-7f600f8b7e9b"" class=""code""><code>@Component
public class MyScheduler {

    @Scheduled(fixedDelay=5, timeUnit = TimeUnit.SECONDS) 
    public void doSomething() {
       //This will execute periodically, after the one before finishes
    } 

}</code></pre>
		<h3 id=""84020734-ebfd-460a-a5aa-6bafb06817f3"" class="""">Fixed Rate</h3>
		<p id=""5ac993fb-5ed2-4aa5-8015-f4dab2e4facb"" class="""">The <code>fixedRate</code> is used when we want to execute
			a task periodically at every n millisecond without checking for any previous executions of the task.</p>
		<pre id=""7b8ae35b-ef6f-4166-a802-dfea255613ff"" class=""code""><code>@Component
public class MyScheduler {

	@Scheduled(fixedRate=5000)
	public void doSomething() {
             //This will execute periodically
	} 
}</code></pre>
		<p id=""17baf5fe-7c11-4293-a810-9efcbf6c7132"" class="""">For both <code>fixedDelay</code> and
			<code>fixedRate</code> tasks, you can specify an <code>intialDelay</code> by indicating the amount of time
			to wait before the first execution of the method.</p>
		<pre id=""7c2f8487-109b-41e3-b634-2d41ec2b15cc"" class=""code""><code>@Component
public class MyScheduler {

	@Scheduled(initailDelay=1000, fixedRate=5000)
	public void doSomething() {
            //This will execute periodically
	} 
}</code></pre>
		<h3 id=""90199603-2642-4000-bf19-394187f2b39c"" class="""">Schedule Tasks and Concurrency</h3>
		<p id=""ce1ef747-ea13-4a99-a844-9cf47b82666d"" class="""">Spring Boot uses a <code>ThreadPoolTaskScheduler</code> to
			execute scheduled tasks. By default, this thread pool has a single thread. This means that only one
			scheduled task can be executed at a time.&nbsp;<span style=""font-size: 1rem;"">If you need to execute multiple tasks concurrently, then
			you need to configure the </span><code>ThreadPoolTaskScheduler</code><span style=""font-size: 1rem;""> to have the required thread pool size.</span></p>
		<pre id=""4440d90d-4806-4227-913b-8dde014f2723"" class=""code""><code>@Bean
public ThreadPoolTaskScheduler threadPoolTaskScheduler() {
    ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler();
    threadPoolTaskScheduler.setPoolSize(5);
    return threadPoolTaskScheduler;
}</code></pre>
		<p id=""4c85d7ba-9b7f-41c1-b964-95ec1f4424ee"" class="""">Also, we need to use the <code>@Async</code> annotation to
			mark the scheduled task as asynchronous. This will make Spring Boot execute the tasks in separate threads.
		</p>
		<pre id=""6745542f-981a-4fa3-ab6e-222e5e75477d"" class=""code""><code>@Async
    @Scheduled(fixedDelay = 1000)
    public void startUsingFixedDelay() {
        log.info(""startUsingFixedDelay:: Task started at {}"", DATE_FORMAT.format(new Date()));
    }</code></pre>
		<h3 id=""1c528d19-617b-475f-bb4a-30279b128309"" class="""">Aggregate Scheduled Annotations</h3>
		<p id=""c9dcecf7-a31f-42b8-a8c0-ed078b92bd38"" class="""">The <code>@Schedules</code> annotation is a container
			annotation that aggregates several Scheduled annotations.</p>
		<pre id=""e3bb8f03-5770-481b-aee8-24437a927130"" class=""code""><code>@Schedules({
   @Scheduled(fixedRate = 10000),
   @Scheduled(cron = ""0 * * * * MON-FRI"")
})
public void doSomething() {
    //This will execute periodically
}</code></pre>
		<p id=""8c76ccd5-45cc-48bf-bd9e-23a9d72301f0"" class="""">Prior to Java 8, a wrapper/container annotation was
			required to use multiple instances of the same annotation.&nbsp;<span style=""font-size: 1rem;"">But, Java 8 supports repeatable annotations so wrapper
			annotation is no longer necessary. Multiple annotations can be used without a wrapper.</span></p>
		<pre id=""f54e770b-fa12-4e16-abf0-8a8dc97d1312"" class=""code""><code>@Scheduled(fixedRate = 10000)
@Scheduled(cron = ""0 * * * * MON-FRI"")
public void doSomethingElse4() {
    //This will execute periodically
}</code></pre>
		<p id=""2045b831-f9f2-4f62-9464-c546e5f51ed5"" class="""">This rule is automatically disabled when the project’s
			sonar.java.source is lower than 8 as repeating annotations were introduced in Java 8.</p>
		<h2 id=""748d7454-06a7-4031-bcee-65567f937b5b"" class="""">Testing the Scheduler using Awaitility</h2>
		<p id=""dc3bc4d7-192c-4b4b-a0eb-ea67748bb47d"" class="""">Testing the scheduler can be a little tricky. We can test
			this by manually waiting for <code>x</code> number of minutes using <code>Thread.sleep()</code> , but for
			complex scenarios, this will be hard to scale.</p>
		<p id=""948b7510-ec66-4454-bce1-0c8dab19c3dd"" class="""">This is where we can use a framework like
			<strong>Awaitility </strong>to wait for a certain condition to be met while running your test.&nbsp;<span style=""font-size: 1rem;"">In this case, you want to wait for </span><code>1000</code><span style=""font-size: 1rem;"">
			milliseconds before we assess the test results.</span></p>
		<p id=""cf0e2cbd-63d8-4174-b99f-2be7eea5ba73"" class="""">Let's first add the <code>awaitility</code> test
			dependency on your <code>build.gradle</code> file. </p>
		<pre id=""865b054a-b427-4307-a1cb-65e0a63a4066"" class=""code""><code>testImplementation 'org.awaitility:awaitility:3.1.2'</code></pre>
		<p id=""b7e28b09-7079-448e-b66c-937707e63a49"" class="""">Now, </p>
		<pre id=""3af6d107-8a85-4cae-ba17-8110ed22d17f"" class=""code""><code>@SpringJUnitConfig(SchedulerConfig.class)
class MySchedulerTest {

    @SpyBean
    MyScheduler scheduler;

    @Test
    void givenSleepBy1000ms_whenStartTask1() {

        Awaitility.await()
                .atMost(1000, TimeUnit.MILLISECONDS)
                .untilAsserted(() -&gt; {
                    verify(scheduler, atLeast(1)).startUsingFixedDelay();
                });
    }

}</code></pre>
		<h2 id=""75ec16f7-13d9-4077-a54b-7b9ebd372b1f"" class="""">Task Monitoring:</h2>
		<p id=""2748303a-676e-4968-9432-a8f0ca713d89"" class="""">Add actuator dependency </p>
		<pre id=""7fa4e349-97d7-4f18-bb64-af3321da0562"" class=""code""><code>implementation 'org.springframework.boot:spring-boot-starter-actuator'</code></pre>
		<p id=""9a6ebf21-9b99-4fa4-af16-9755f3ae7173"" class="""">Enable endpoint</p>
		<pre id=""a9f31c16-6b3b-45ae-ac93-815e9566c68b"" class=""code""><code>management.endpoints.web.exposure.include=scheduledtasks</code></pre>
		<p id=""9aa68cc5-732d-44f7-9bb8-f84d01378cb1"" class="""">
		</p>
		<p id=""1afe84ce-604a-4225-bd8e-d4711c043515"" class=""""><strong>FAQ’s</strong></p>
		<p id=""1950dc5a-b564-4411-a6c3-15c6b024d9af"" class=""""><strong>What happens if a scheduled task throws an
				exception?</strong></p>
		<p id=""39a1ad06-5eee-471b-9cb3-7889984b78ce"" class="""">If any exception is encountered during the scheduled task
			execution and if it is not handled gracefully using a try-catch block then the Spring Logging Error Handler
			will handle the exception and log the error details. The next instances of that task will continue to
			execute as per the schedule.</p>
		<p id=""4f827ff4-8047-492e-8bea-753645d18e71"" class="""">
		</p>
		<p id=""b7a0fddc-159e-47ae-8c3c-dde7ebda474a"" class=""""><strong>What happens if a scheduled task takes longer than
				its scheduled interval?</strong></p>
		<p id=""fe52ffd6-50bf-4c49-ad33-5a269ddd91c6"" class="""">In the case of a fixed rate, if a scheduled task takes
			longer than its scheduled interval, the Spring Scheduler will start the next execution of the task
			immediately after the previous one is completed. This can cause tasks to overlap, which may impact
			performance.</p>
		<h2 id=""305a365c-46a5-4f80-9fd0-568e01cd2569"" class="""">Limitations with Spring Scheduler</h2>
		<ul id=""358bbb5e-3b95-4a3b-9a75-78affb52bccd"" class=""bulleted-list"">
			<li style=""list-style-type:disc""><strong>Dynamic Scheduling</strong>: The <code>@Scheduled</code>
				annotations are typically configured at application startup and do not support runtime changes without
				redeploying the application.</li>
		</ul>
		<ul id=""b1ce4b8e-df99-4847-ae17-a1055c2f0c5f"" class=""bulleted-list"">
			<li style=""list-style-type:disc"">It does not offer built-in support for Job persistence, as a result, job
				recovery in the event of an application restart is not possible. </li>
		</ul>
		<ul id=""a0130f28-5016-4f74-9325-d6716c5b20ee"" class=""bulleted-list"">
			<li style=""list-style-type:disc"">It does not support clustering and load balancing, The tasks are typically
				run on a single node.</li>
		</ul>
		<ul id=""6b781141-96d2-416d-bb78-a98ddd36a46a"" class=""bulleted-list"">
			<li style=""list-style-type:disc"">It does not allow fine-grained control over managing the tasks. For
				example, we cannot pause, resume, and unscheduled jobs individually. </li>
		</ul>
		<p id=""5e586f02-4b55-49d5-87ed-3ef3b86edc0a"" class="""">Spring Scheduler is sufficient for many simple scheduling
			tasks, but if you have complex scheduling requirements, job management, and monitoring, then you would need
			another framework like Quartz. </p>",0,"standard","post"
"Project Lombok-Is it Still Relevant in 2023?","project-lombok-is-it-still-relevant-in-2023","What is Project Lombok? Have you used this magical library? With the new Java Records feature, you might wonder if Lombok is still relevant. Let's weigh the pros and cons and see if this is suitable for you.","LIVE","<p class="""" id=""f0c6948f-219f-44a5-8c01-123302cd5945""><em>What is Project Lombok? Have you used this magical
                library? With the new Java Records feature, you might wonder if Lombok is still relevant. Let's weigh the pros and cons and see if this is suitable for you.</em></p><h2 class="""">What is Project Lombok?</h2>
<p class="""" id=""6177d3aa-dbfc-4694-8737-4a2803c3e630"">Project Lombok is a popular Java library, used to remove
            the boilerplate code with the intent to save development time.</p>
<p class="""" id=""9107ffa0-2484-4960-a34b-b3564d4558c2"">It replaces the boilerplate code such as getters, setters,
            constructors, toString, equals, and builders with a set of annotations. This means less code, saves time,
            and reduces verbosity, making your codebase cleaner, readable, and more maintainable.</p>
<p class="""" id=""87e0e466-cf19-499a-9311-4d5c537b184b"">It also includes utilities such as <code>delombok</code>
            checking null values and <code>@Slf4j</code> for logging support.</p>
<p class="""" id=""8b73443d-609d-4d1a-a48b-9c63b7b4c04d"">For example, traditionally a class declaration looks
            something like this;</p>
<pre class=""code lang-java"" id=""eb257414-adb4-43d6-940b-267773bf879b""><code>public class Car {
    private String model;
    private int year;
    private String fuelType;

    public Car() {
    }

    public Car(String model, int year, String fuelType) {
        this.model = model;
        this.year = year;
        this.fuelType = fuelType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Car car = (Car) o;
        return year == car.year &amp;&amp; Objects.equals(model, car.model) &amp;&amp; Objects.equals(fuelType, car.fuelType);
    }

    @Override
    public String toString() {
        return ""Car{"" +
                ""model='"" + model + '\'' +
                "", year="" + year +
                "", fuelType='"" + fuelType + '\'' +
                '}';
    }


    @Override
    public int hashCode() {
        return Objects.hash(model, year, fuelType);
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }

    public String getFuelType() {
        return fuelType;
    }

    public void setFuelType(String fuelType) {
        this.fuelType = fuelType;
    }
}</code></pre>
<p class="""" id=""704af74c-480a-466b-84ff-4f84aa8c8157"">But with Lombok, we can write the same code using a bunch
            of annotations.</p>
<pre class=""code"" id=""e338fb98-18a9-4d25-8eed-6c7329c65a30""><code>@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@EqualsAndHashCode
public class Car {
    String model;
    int year;
    String fuelType;
}</code></pre>
<p class="""" id=""7c9dc75b-83fe-4f43-869b-2fa86b3ae34d"">Alternatively, you can also replace all the above
            annotations with just one <code>@Data</code> annotation. </p>
<h3 class="""" id=""f1af2106-a7e6-4efd-8441-556d5baa14eb"">How Lombok Works?</h3>
<p class="""" id=""a749f8e7-05ce-4ea6-99f8-61457c5f2c7f"">It works by using an annotation processor to modify the
            abstract syntax tree (AST) of your code during compilation.
            The annotation processor reads annotations defined in your class and adds required methods to the AST. </p><p class="""" id=""a749f8e7-05ce-4ea6-99f8-61457c5f2c7f"">The
            compiler then uses the modified AST to produce the bytecode.</p>
<h3 class="""" id=""9d23f6a3-adf6-4ac9-b1a6-f53d1e9fb35e"">Lombok Annotations</h3>
<table class=""simple-table"" id=""f591d7e7-b3af-4d0f-8f85-f0b8a3357d7b"">
<tbody>
<tr id=""235264bc-dba4-4dbe-b8c5-9c5364e3485e"">
<th class=""simple-table-header-color simple-table-header"" id=""shA;"">@Getter,
                        @Setter</th>
<td class="""" id=""P_Lg"">Generates getters and setter methods for the field.</td>
</tr>
<tr id=""553b5c79-167a-413d-857f-d8b86267f3ea"">
<th class=""simple-table-header-color simple-table-header"" id=""shA;"">
                        @NoArgsConstructor, @AllArgsConstructor, @RequiredArgsConstructor</th>
<td class="""" id=""P_Lg"">Generates constructors for your class</td>
</tr>
<tr id=""e29a40db-1e0e-4726-9c37-8265be4dc673"">
<th class=""simple-table-header-color simple-table-header"" id=""shA;"">@Builder
                    </th>
<td class="""" id=""P_Lg"">Provides a builder pattern interface for the annotated
                        class.</td>
</tr>
<tr id=""ae7b9ff6-981c-4758-ab0b-77db3ba3566b"">
<th class=""simple-table-header-color simple-table-header"" id=""shA;"">@Data</th>
<td class="""" id=""P_Lg"">Equivalent to adding the annotations @Getter @Setter
                        @RequiredArgsConstructor @ToString @EqualsAndHashCode to your class</td>
</tr>
<tr id=""8a6e6d9b-96c1-4d16-b68c-af39c4214e22"">
<th class=""simple-table-header-color simple-table-header"" id=""shA;"">@Value</th>
<td class="""" id=""P_Lg"">Makes the class instances immutable</td>
</tr>
<tr id=""3902a4ec-e9e1-443e-a08b-dbe04ba72f72"">
<th class=""simple-table-header-color simple-table-header"" id=""shA;"">@NonNull
                    </th>
<td class="""" id=""P_Lg"">Null check</td>
</tr>
<tr id=""bc4e4b0c-f10d-44b0-921a-1176801329d3"">
<th class=""simple-table-header-color simple-table-header"" id=""shA;"">
                        @SneakyThrows</th>
<td class="""" id=""P_Lg"">Could be added to a method that throws a checked
                        exception</td>
</tr>
<tr id=""dfe4b10e-52e0-410a-a279-839e2cdab48f"">
<th class=""simple-table-header-color simple-table-header"" id=""shA;"">@ToString
                    </th>
<td class="""" id=""P_Lg"">Generates a toString() method</td>
</tr>
<tr id=""d78b3a83-8266-4933-865a-bb0b9a441e93"">
<th class=""simple-table-header-color simple-table-header"" id=""shA;"">
                        @EqualsAndHashCode</th>
<td class="""" id=""P_Lg"">Generates an .equals(..) and a .hashCode() methods</td>
</tr>
</tbody>
</table>
<p class="""" id=""db9baa2f-a1bc-431f-9131-7a0522b6c744""><span>Check out the official documentation for all Lombok
            annotations and their usage. </span><a href=""https://t.co/HoiMNzPm4k"">https://t.co/HoiMNzPm4k</a><br/></p><h2 class="""" id=""4d092088-5633-40d5-b347-586070cf8aad"">Things to consider</h2>
<p class="""" id=""59caa1d7-acad-4d6a-9c99-bf543ed3dabc"">While it promotes simplicity and clean code, it does too
            much magic in the background, and for newbie developers, it can be quite confusing.</p>
<h3 class="""" id=""062c4d38-0f96-45cb-b1fa-1f1b798b700a"">Find usage problem</h3>
<p class="""" id=""a1006ef7-bfa1-4354-be5c-fb7c53fe3eae"">When using Lombok you don't see the generated getter,
            setter, constructor, builder methods, etc. So, if you want to want to find out where these methods are being
            used in your project, you can't do this without being dependent on IDE plugins.</p>
<h3 class="""" id=""9a548fe4-f018-4979-b378-136048313f26"">Misuse of @Builder<strong>
</strong></h3>
<p class="""" id=""7c17430f-9f36-49c8-ae87-fcdaee49f6b3"">With Lombok, a builder is so easy to create that even when
            a class has only two parameters the developers prefer to use @Builder instead of a constructor or a static
            constructor method. Doing so makes it more harm than good. </p>
<h3 class="""" id=""941021b3-d021-4b7f-b8c9-5421e43216fa"">The @Value annotation and final class<strong>
</strong></h3>
<p class="""" id=""2236126e-9335-4273-8782-592718dc190d"">The <code>@Value</code> annotations make the class Final.
            It is basically the immutable variant of <code>@Data</code> annotation. </p>
<p class="""" id=""4ca3f12a-9d5a-489b-9edf-fda2ceb83638"">All fields are made private and final by default and this
            does not generate any setter methods. If you want to make your class extendable, then you cannot use the
            <code>@Value</code> annotation.</p>
<pre class=""code"" id=""fd762dcb-cf1f-4d48-8aa3-fc4c5c1af13b""><code>@Value
public class Car {
    String model;
    int year;
    String fuelType;
}</code></pre>
<p class="""" id=""86f9c701-da8c-4655-9f78-f5bed04b6f00"">The same behavior for a class can be achievable natively
            in Java using Java 16 records. With records, you can define the data fields in one line of code, instead of
            having to define a constructor and getter/setter methods for each field in a class.</p>
<p class="""" id=""fea61d07-9e4b-46b7-8f2d-f5d4ae300109"">Records also have a built-in <code>equals()</code> and
            <code>hashCode()</code> method and they are <em><strong>immutable</strong></em> by default. It makes your
            code shorter, easier to read, and less prone to errors.</p>
<pre class=""code"" id=""06acab38-0282-478f-9728-1611a0cf54f2""><code>public record Car(String model, int year, String fuelType) {
    
}</code></pre>
<p class="""" id=""00eb6331-d214-43d0-9880-4eaf3416c8e8"">With the inclusion of records in Java, one would wonder if
            you need Lombok at all. </p>
<h3 class="""" id=""422340dc-0ec9-4574-b7a8-8abf726af97a"">Using @Data on Entities </h3>
<p class="""" id=""f556a256-148a-4fd6-97c3-d53c397b78c1"">You need to use the <code>@Data</code> annotation very
            cautiously. It can cause serious serialization issues with ORMs like Hibernate and serializer engines like
            Gson.
</p><p class="""" id=""f556a256-148a-4fd6-97c3-d53c397b78c1"">
            Do yourself a favor and read this article:</p><p class="""" id=""f556a256-148a-4fd6-97c3-d53c397b78c1"">https://thorben-janssen.com/lombok-hibernate-how-to-avoid-common-pitfalls/<br/></p>
<h2 class="""" id=""11de5f53-4f6b-46b3-ae29-e1aa38aae25a"">The Verdict</h2>
<p class="""" id=""f076a960-4454-4bb8-8c0c-aed0413a3d1c"">Lombok is just one tool in the toolbox. You need to
            understand the trade-offs and consider team expertise before considering this. <span>Lombok makes a lot of sense in Greenfield and small projects to get off the ground. Introducing larger
            projects has mixed benefits at best.</span></p><p class="""" id=""f076a960-4454-4bb8-8c0c-aed0413a3d1c"">If you using an IDE such as IntelliJ, it is pretty easy to generate these
            boilerplate codes, and enabling the code folding can help to make your code more readable. </p>
<p class="""" id=""fe516870-7940-4bbd-be9a-22c24b55cc48"">Unless you know what you're doing, I suggest holding
            back on your temptation to use Lombok.</p><p></p>",0,"standard","post"
"Creating First Spring Boot Application","creating-first-spring-boot-project","This chapter explains the pre-requisites to start with the Spring boot development, understand the build tool options such as Maven and Gradle and covers how to build and run your project.","LIVE","<p></p><p class="""" id=""7d3fdfcf-9428-454f-bcee-d1553fda50c4"">Before we begin, we
        need the following prerequisites for developing Spring Boot applications. </p>
<ul class=""bulleted-list"" id=""38e2edd9-6072-47a0-a934-1d8a1fc8e448"">
<li>Java 17 or 21</li>
<li>IDE (Integrated Development
            Environment): </li>
</ul>
<h3 class="""" id=""cf51f7d6-9520-41d7-8e58-98648eb4ac38""><span>Java 17 or 21</span></h3>
<p class="""" id=""6d96c571-53ce-43fd-b309-2f91224fd997"">The current stable version of the Spring boot
    framework is 3.2.0, and it requires Java17 and is compatible up to and including Java 21.</p>
<p class="""" id=""5c57220f-026f-48fa-9acc-7c7f845fe733"">Check if you have Java installed using the following
    command. </p>
<pre class=""code"" id=""3e1919b7-f6b5-4873-b792-10a484b7e33b""><code class=""language-Shell"">java --version</code></pre>
<p class="""" id=""c1fafbce-317c-4fdc-a801-144686064dcd"">If Java is not installed, you can follow the
    installation process from my blog post <a href=""https://stacktips.com/articles/how-to-install-java-for-macos-and-windows"">How to Install Java for MacOS and Windows?</a>
</p>
<h3 class="""" id=""7de24ce4-fc96-4d0d-aa07-b3b23a749b67"">IDE (Integrated
        Development Environment): </h3>
<p class="""" id=""e140c3c3-e85b-4fe4-b453-2b8976f3e06c"">An Integrated Development Environment (IDE) is a tool
    that helps to streamline the coding, debugging, and project management for developers. It offers
    features like code editing, refactoring, debugging, integrated terminal, and many other features to
    support application development.</p>
<ul class=""bulleted-list"" id=""f1b5d6f4-5e2a-4e83-acbf-3dab0671fe3c"">
<li>VSCode - Free</li>
<li>Eclipse - Free</li>
<li>IntelliJ IDEA Community (Free) or
            IntelliJ Ultimate (Licensed) </li>
</ul>
<p class="""" id=""0400d241-d1cc-47e7-a97f-253f31120e20"">I prefer IntelliJ
        IDEA, as it is one of the most advanced and preferred IDEs for Java developers. If you haven’t
        installed it already, you can install the community edition of IntelliJ here <a href=""https://www.jetbrains.com/idea/download/?section=mac"" target=""_blank"">https://www.jetbrains.com/idea/download/</a>
</p>
<h2 class="""" id=""4350f569-90b7-4042-a313-4862aa83b563"">Choosing build tools Maven vs. Gradle</h2>
<p class="""" id=""740dd164-cf79-41eb-bc8f-921a2dd0e62b"">Build tools play a crucial role in software
    development. Build tools are used to automate the process of compiling, testing, packaging, and
    deploying your application. This can save you a lot of time, especially when working with a large,
    distributed team.</p>
<p class="""" id=""ea88ca3a-692c-4c3d-804c-46869888c8a3"">Using build tools you can also simplify the process of
    managing dependencies for your project. It helps to automate the process of resolving and including
    external libraries in your project. </p>
<p class="""" id=""3b45a4fc-8c55-40df-bf8b-e20b0da7e696"">Primarily there are two popular build tool choices for
    Spring Boot:</p>
<ul class=""bulleted-list"" id=""ae5f2732-6b15-4ce8-87f6-bc66976cc597"">
<li>Maven</li>
<li>Gradle</li>
</ul>
<h3 class="""" id=""84d6ce4e-1c2c-486b-ad08-d26a261b3ff1"">Maven:</h3>
<p class="""" id=""249c9b26-f0f8-44e8-bc8d-ea404168c83e"">Maven is a popular build automation tool used
    primarily for Java projects. It uses an XML file called a  <code>pom.xml</code> (Project Object Model)
    to define the project's configuration.</p>
<p class="""" id=""8a0705c4-9ff7-4110-af99-9224707bed5b"">The <code>pom.xml</code> file serves as the central
    configuration file for a Maven project. It contains information about the project, including its
    dependencies, plugins, build lifecycle, and other relevant details. </p>
<figure class=""image"" id=""292a9691-29cd-4b4a-adeb-54951d87062d"">
</figure><img src=""https://media.stacktips.com/media/uploads/summernote/maven.png""/><figure class=""image"" id=""292a9691-29cd-4b4a-adeb-54951d87062d""><br/>
</figure>
<h3 class="""" id=""ae632055-a93c-4cc1-b78d-24299a432646"">Gradle</h3>
<p class="""" id=""3905d105-1fc8-4d54-acb3-bb2c3cd82ca4"">Gradle is another build automation tool that uses
    either Groovy or Kotlin DSL (Domain-Specific Language) for defining build scripts. Gradle maintains the
    dependency configurations in <code>build.gradle</code><em> </em>file and it is typically stored in the
    project's root directory.</p>
<p class="""" id=""1b3dab1f-2591-4d5e-840a-009443ac59eb"">An example of a Gradle build file for a Spring Boot
    application follows.</p><p class="""" id=""1b3dab1f-2591-4d5e-840a-009443ac59eb""><img src=""https://media.stacktips.com/media/uploads/summernote/gradle.png""/><br/></p>
<h3 class="""" id=""37f7b20e-e184-496e-ac08-d09e8ea5bc29"">Choosing Between Maven and Gradle</h3>
<p class="""" id=""71a97aa3-8da4-4ded-9c1c-6c06ffabd931"">The choice between Maven and Gradle for Spring Boot
    development depends on your personal preferences and the specific needs of your project. </p>
<p class="""" id=""d9af177c-8341-412a-bc69-e7f3fe1e41b3"">While Maven is more mature and almost like an
    established standard in the Java community, Gradle is a more modern build system and has gained
    popularity recently. Both Gradle and Maven are very powerful and good fit for larger and more complex
    projects.</p>
<h2 class="""" id=""e405d984-51ab-4c05-8c7e-b22ca6a76cf8"">Create a New Spring Boot Project</h2>
<p class="""" id=""4a7ec07a-39bd-4a3d-a4aa-06a033543731"">There are a few convenient options available for
    bootstrapping your Spring Boot project template.</p>
<ol class=""numbered-list"" id=""adfdcc7a-5311-4047-8cfc-9fe38850d547"" start=""1"" type=""1"">
<li>Using Spring Initializr </li>
</ol>
<ol class=""numbered-list"" id=""de360aa1-4cb9-483d-9bc7-a8a62c99f8b7"" start=""2"" type=""1"">
<li>Using the Spring Boot CLI</li>
</ol>
<ol class=""numbered-list"" id=""c198c031-3a4c-4392-93f0-f7470dbdf68b"" start=""3"" type=""1"">
<li>Using IntelliJ</li>
</ol>
<h3 class="""" id=""2b4b5bca-36fd-44a7-8329-2994e93d1e27"">Using Spring Initializer </h3>
<p class="""" id=""6382e504-ff3b-469b-970d-801ff62b6989"">Spring initializer is a web-based tool that helps you
    to configure and generate the Spring boot project template. Let us use the Spring initializer to create
    a new Spring Boot project. </p>
<p class="""" id=""6ebf1198-07c2-4bcb-b08c-95978895a189"">First, visit <a href=""https://start.spring.i/"">https://start.spring.i</a>o in your browser to open Spring
    initializer. </p><p class="""" id=""6ebf1198-07c2-4bcb-b08c-95978895a189""><img src=""https://media.stacktips.com/media/uploads/summernote/spring_initilizr.png""/><br/></p>
<p class="""" id=""78aeefc0-2ef9-4a3d-babc-c6d08ebf0ca9"">Let us now configure our project: </p>
<ul class=""bulleted-list"" id=""eb7f8606-1656-4d4b-9e4f-df02ac1ccd88"">
<li><span>Project Type: </span>Select the Maven or Gradle build type
        and select the language. Let’s select Gradle with Java.</li>
<li><span>Language: </span>You can write Spring Boot code using Java,
        Kotlin, or Groovy. We will use Java throughout this course. </li>
<li><span>Spring Boot Version: </span>Select the Spring Boot version
        out of all available versions. At the time of creating this video Spring Boot 3.2.0 is the latest
        release version. Let’s select that</li>
</ul>
<p class="""" id=""cd382a9e-d46b-40bc-b2e8-29830a68591d"">Now, provide the basic
        project details like the group, artifact, and name of your project.</p>
<ul class=""bulleted-list"" id=""3a3295b5-70af-49b7-a3a4-d3a305bfdd2b"">
<li><span>Group: </span>Usually the reverse of your domain. If your
        domain is stacktips.com, your group name will be <code>com.stacktips</code></li>
<li><span>Artifact Id: </span>The artifact name is the name of the jar
        without a version. For example, if your artifact name is <code>movies-api</code>, then the jar will
        be <code>movies-api-[version].jar</code>.</li>
<li><span>App Name: </span>Provide a name for your application. Let’s
        call it a <code>movies-api-app</code>.</li>
<li><span>Description:</span> You may additionally describe your
        project.</li>
<li><span>Package name:</span>This is the
        base package name for your project. Let’s use <code>com.stacktips.app</code> as our package name.
    </li>
<li><span>Package type:</span> We have two choices for the package
        type, Jar and WAR. Let us select Jar</li>
</ul>
<figure class=""block-color-gray_background callout"" id=""ec50d9cf-2f41-4150-959f-9917b2c3b7f8"">
<div><h3><span class=""icon"">💡</span><span>War vs Jar: </span></h3>
<p class="""" id=""7193e3a5-8137-4d63-99a7-5b40367904f6"">Both JAR (Java Archive) and WAR (Web Archive)
            are formats used in the Java ecosystem for packaging and distributing applications. But they
            have a completely different purpose.</p>
<p class="""" id=""1ad6f69e-cffb-45b2-bc89-413819f93d87"">
</p>
<p class="""" id=""4c96052a-977d-48ad-a2a8-6def9e994ed1""><span>JAR (Java
                Archive):</span></p>
<ul class=""bulleted-list"" id=""90492527-4b30-458e-872e-7010b47c8f40"">
<li>Jar files are used to package and distribute standalone Java
                applications. They contain a set of classes, resources, and other files that are required to
                run the application. </li>
<li>JAR files are typically self-contained, meaning that they do
                not require any additional dependencies to be installed on the system where they are run.
            </li>
</ul>
<p class="""" id=""49a02f7a-1817-4197-bdf2-322e71221394""><span>WAR (Web Archive):</span>
</p>
<ul class=""bulleted-list"" id=""8c9033dc-fe93-47a0-ac6c-7b73b4609763"">
<li>WAR files are a specific type of JAR file that is used to
                package and distribute web applications.</li>
<li>They contain all of the files that are required to run the web
                application, including the Java classes, web pages, static resources, and deployment
                descriptor files. </li>
<li>WAR files are typically deployed to a web server, where they
                are run in a servlet container.</li>
</ul>
</div>
</figure>
<ul class=""bulleted-list"" id=""1a0091c1-bf7e-4cee-aacf-b662388b7061"">
<li><span>Java Version:</span> Spring boot 3.2.0 require minimum of
        Java 17 and it is compatible up to Java 21. I have Java 21 installed in my system, so I have
        selected Java 21, but you can very well choose Java 17.</li>
<li><span>Select Starter Dependencies:</span> On the right-hand side,
        you will notice the <span>Add dependency</span> button. Clicking on the
        <span>Add dependency</span>button will allow you to
        choose the Spring boot starter dependencies for your project. Let us for now choose Spring Boot
        Starter Web and Spring Boot Actuator for this example.
    </li>
<li><span>Explore and Generate: </span>Once all details are filled in,
        you can click on the <span>Explore</span> button to see the project structure
        beforehand. Once
        you’ve verified your configurations, you can click on <span>Generate </span>button.
    </li>
</ul>
<p class="""" id=""9621803b-eb95-4ced-b7d8-40ac754e0581"">This will download a new Spring Boot project with the
    configuration you’ve selected. Now, you can extract the zip file and open the project in your IntelliJ
    IDEA.</p>
<h3 class="""" id=""133a4acf-7820-43a2-a919-ba4a6ba26136"">Creating Spring Boot Project using Spring CLI</h3>
<p class="""" id=""e42911c8-555b-4b1f-8e79-6350e8b0f5f8"">The Spring Boot CLI (Command Line Interface) is a
    command line tool that can be used to generate the spring boot project. Everything you can do with the
    Spring initializer can be configurable though Spring Boot CLI. </p>
<p class="""" id=""4979cef3-73ce-4427-ad71-adcd3eee866f"">Before we work the Spring Boot CLI we need to ensure
    the CLI is installed and available for us to use. To check if the Spring Boot CLI is installed, type the
    following command:</p>
<pre class=""code"" id=""1dd415b8-aeb2-475d-acd7-7d8d6c28ed51""><code class=""language-JavaScript"">spring --version</code></pre>
<p class="""" id=""a32d162c-be22-4fba-a397-d7963222817c"">If it is installed, you will see the Spring Boot
    version printed as follows</p>
<pre class=""code"" id=""e1a1b64b-2ee3-49b4-b708-e88d7ee4e57a""><code class=""language-JavaScript"">Spring CLI v3.2.0</code></pre>
<p class="""" id=""bdf04470-f14d-4f5f-9129-1084309de18d"">If is is not installed, there are several ways we can
    install the Spring CLI. We can install using SDKMAN, OSX Homebrew, MacPorts or using manual installation
    methods. The scope of this chapter covers the installation using SDKMAN, but if you prefer other
    installation methods, then you may refer the official installation guide. </p>
<p class="""" id=""64e3b483-fc11-4261-8b67-07712e22801f""><a href=""https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.installing.cli"">Installing the Spring Boot CLI</a>
</p>
<p class="""" id=""68dbcf6c-b44f-444e-9437-1b975c62e3e7""><span>Install Spring Boot CLI using
        SDKMAN</span>
</p>
<p class="""" id=""8c31b808-d441-45a9-a8a4-b1ad9966009f"">Before we install, let us first get the list of
    available Spring Boot releases using the following command. </p>
<pre class=""code"" id=""e12afaf9-a2bf-4141-9e54-67d30e1fc83e""><code class=""language-Shell"">sdk ls springboot</code></pre>
<p class="""" id=""196a9ada-0173-42e8-8028-512f65a28b58"">It will print all the list of available Spring Boot
    releases. </p>
<img src=""https://media.stacktips.com/media/uploads/summernote/spring-boot-versions.png""/><figure class=""image"" id=""fcfa0975-45d7-4be0-b7a4-a55dfd9be907""><br/>
</figure>
<p class="""" id=""e3af91ac-eb5b-4a66-b486-a51aa865b840"">
</p>
<p class="""" id=""77d007b1-3290-4c01-adbb-30c5072c52b9"">To install Spring Boot CLI,</p>
<pre class=""code"" id=""b4925346-2581-446e-a589-d51921f42f21""><code class=""language-Shell"">sdk install springboot</code></pre>
<p class="""" id=""f3e80a99-ce5b-4484-a114-3a30f6421e26"">Once Spring Boot CLI is installed, You can list the
    capabilities of the service by using the <code>--list</code> flag:</p>
<pre class=""code"" id=""e69f7dde-d387-4a83-bb77-3e541c1faa5f""><code class=""language-Shell"">spring init --list</code></pre>
<p class="""" id=""bf81b7ea-10b6-48df-8aa1-47ef29bb9ae5"">Now to Create the Spring Boot project, we can use the
    followinng command;</p>
<pre class=""code"" id=""633e2f0d-0fcc-43e5-b3fb-a95afadc1172""><code class=""language-Shell"">spring init --type=gradle-project
     --java-version=17
     --language=java
     --name=movies-api
     --artifact-id=movies-api
     --group-id=com.stacktips
     --packaging=jar
     --dependencies=web,actuator
     movies-api-app</code></pre>
<p class="""" id=""e0193a1c-3f31-4b02-9a96-a2a909cec486"">This command will create a Spring Boot project inside
    the <code>movies-api-app</code> directory. All the folders and files created is similar to the one we
    have created using the Spring Initilizer.</p>
<p class="""" id=""1ed3cfb4-caa1-4ec4-b7fa-18d5d8b6e3ed"">You do not need to use the Spring CLI to work with
    Spring Boot, but it is a quick way to get a Spring application off the ground without using Spring
    Initilizer.</p><h3 class="""" id=""53ce74bc-a169-4150-ac08-02dbe2ace957"">Using IntelliJ</h3>
<p class="""" id=""f5c18d4d-affc-488a-8fcd-606815702c06"">You can also create a Spring Boot project from
    IntelliJ, but for that, you will need the IntelliJ Ultimate edition which requires a commercial license.
</p>
<h2 class="""" id=""8c4a1cce-4d55-47b7-a23f-19b5ba2f16a2""><span>Build and Run Spring Boot
        Project</span>
</h2>
<p class="""" id=""cc65fbd2-748a-4a9f-9d5b-ba240802db35"">Before we build and run our code, let us first open
    the IntelliJ IDE and import the project we have created. To import the project:</p>
<ol class=""numbered-list"" id=""94d760c1-3174-4ae0-8ef1-be200d879849"" start=""1"" type=""1"">
<li>Go to <span>File | Open</span>.</li>
</ol>
<ol class=""numbered-list"" id=""cf5ede81-f470-4333-a4ac-8e1d7d7e7f34"" start=""2"" type=""1"">
<li>And browse the downloaded folder and click on <span>Open</span> button.
    </li>
    your IDE, then it may take a while as it has to download all the direct and transitive dependencies as
    configured for your project. The load time will be based on your internet speed. 
There are several different ways we can build and run a Spring Boot project. Some of the most common methods are:
<ul class=""bulleted-list"" id=""ae1790d8-88c5-4274-be8e-3f91da3e79b7"">
<li>Running from IDE</li>
<li>Using Gradle or Maven build tools</li>
<li>Run as a Far JAR</li>
</ul>
<h3 class="""" id=""4943da86-bc92-45ef-8e4a-36a5932a4c6a"">Running from an IDE</h3>
<p class="""" id=""b2d75bfc-6197-4ec2-9cf6-4d30ff056be7"">This is the simplest way to run a Spring Boot project.
    Every IDE is equipped with options that allow developers to build and run the spring boot application in
    a single click. </p>
<p class="""" id=""27557aa3-163f-4b3e-a4a7-15c65303fef0"">Open the <code>MoviesApiApplication</code> class with
    the <code>main()</code> method (it is usually also designated with
    the <code>@SpringBootApplication</code> annotation), click  in the gutter, and select to run the
    class.
</p>
<h3 class="""" id=""eeeabc6e-927f-438a-ba90-c4fc90d3daca"">Build and <span>Run using Gradle
        Command</span>
</h3>
<p class="""" id=""c1a07f18-d55c-4a9e-80ec-8806172472c1"">For Gradle projects, you can build the Spring boot
    project to into an executable Jar using the following command:</p>
<pre class=""code"" id=""52935731-4868-4873-b476-2191bbf6df34""><code class=""language-Bash"">./gradlew build</code></pre>
<p class="""" id=""c7747302-3e2e-4e9c-ac55-40a19dd21800"">Start/Run spring boot application</p>
<pre class=""code"" id=""5d946260-adbb-4105-9350-41d2964f5284""><code class=""language-Bash"">./gradlew bootRun</code></pre>
<h3 class="""" id=""9521fbf1-0731-4d83-9c23-56fb6926516d"">Build and <span>Run using Maven
        Command</span>
</h3>
<p class="""" id=""201845f9-513a-43fc-af52-7868d017fc58"">For Maven projects, you can build the Spring boot
    project to into an executable Jar using the following command:</p>
<pre class=""code"" id=""05a4017c-3a25-4499-a379-a0fc33f345f8""><code class=""language-Bash"">./mvnw clean package</code></pre>
<p class="""" id=""694b9411-c5b5-445d-a123-efde158c342f"">Start/Run spring boot application</p>
<pre class=""code"" id=""6519505c-2a96-4378-9947-7c27207842da""><code class=""language-Bash"">./mvnw spring-boot:run</code></pre>
<h3 class="""" id=""1488058d-55e7-475e-a28c-b43a84eea6ae"">Running Application as a FatJar</h3>
<p class="""" id=""7ea13d4d-085c-4141-ab71-1306e46927a2"">To run the application as a <span>FatJar</span> we
    first need to package the Spring Boot application into an executable Jar file. For that, we can use a
    build tool like Maven or Gradle.</p>
<p class="""" id=""2653e98b-6635-4836-bbdf-c874f5bbb602""><span>Maven:</span></p>
<pre class=""code"" id=""5ab77984-20b8-4b19-b43c-6aca2344719d""><code class=""language-Bash"">./mvnw clean package</code></pre>
<p class="""" id=""abb08741-c0d8-47a3-a34f-7170f8d25ae5""><span>Gradle:</span></p>
<pre class=""code"" id=""76c02995-37f9-436d-a409-4dd4756e8931""><code class=""language-Bash"">./gradlew clean build</code></pre>
<p class="""" id=""ce1a1f21-373f-4700-8ea5-c5251284438d"">Once the jar files are built, we can run the
    application as a fat jar using the <code>java -jar</code> command.</p>
<pre class=""code"" id=""36386cd1-e0cb-4c22-ae13-c6a0f1f4020d""><code class=""language-Shell"">java -jar build/libs/movies-api-0.0.1-SNAPSHOT.jar</code></pre>
<p class="""" id=""a32f8740-9179-4926-af18-6f0ae0c56388"">When you run your Spring Boot application, you will
    see a log message like this:</p>
<p class="""" id=""a69df53f-67b9-4bfb-bda2-9819aefec5e3"">
</p>
<p class="""" id=""b97a090c-0822-4184-9e68-377b7d7d9937"">Notice that we are using <code>mvnw</code> and <code>gradlew</code> wrapper
        utilities to build and package our Spring boot application. We will learn more about them in the
        next chapter. </p><figure class=""block-color-gray_background callout"" id=""e5bea803-60e4-47a8-be7a-24357996f73f"">
</figure><p></p></ol>",2,"standard","lesson"
"Spring Boot Interview Questions and Answers","spring-boot-interview-questions-and-answers","Spring Boot Interview Questions and Answers","DRAFT","<h3 id=""what-is-spring-boot-dependency-management-"">What is Spring Boot dependency management?</h3>
<p>Spring Boot dependency management is used to manage dependencies and configuration automatically without you specifying the version for any of that dependencies.</p>
<h3 id=""explain-restcontroller-annotation-in-sprint-boot-"">Explain <code>@RestController</code> annotation in Sprint boot?</h3>
<p>It is a combination of <code>@Controller</code> and @ResponseBody, used for creating a restful controller. It converts the response to JSON or XML. It ensures that data returned by each method will be written straight into the response body instead of returning a template.</p>
<h3 id=""what-is-the-difference-between-restcontroller-and-controller-in-spring-boot-"">What is the difference between @RestController and <code>@Controller</code> in Spring Boot?</h3>
<p><code>@Controller</code> Map of the model object to view or template and make it human-readable but <code>@RestController</code> simply returns the object and object data is directly written in HTTP response as JSON or XML.</p>
<h3 id=""imagine-you-have-to-call-a-third-party-api-and-fetch-the-data-periodically-how-can-you-achieve-this-in-spring-boot-"">Imagine you have to call a third party API and fetch the data periodically. How can you achieve this in spring boot?</h3>
<p>Spring scheduler is used to schedule the task. It is a scheduler that runs in the background and executes the task at the specified time.</p>
<p>Using <code>@Scheduled</code> annotation. This support cron, fixedDelay, fixedRate configuration options.</p>
<h3 id=""how-to-call-a-third-party-api-in-spring-boot-"">How to call a third party API in Spring Boot?</h3>
<p>Rest template, Feign client, Apache HttpClient (old way)</p>
<h3 id=""what-is-feign-client-and-how-it-is-different-from-rest-template-"">What is feign client, and how it is different from REST template?</h3>
<p>Feign client is a declarative client that makes it easy to consume remote APIs. It is a client that is built on top of the Spring RestTemplate. </p>
<p>You have to write less code in this approach.</p>
<h3 id=""how-do-i-do-a-basic-authentication-in-rest-template-or-feign-client-"">How do I do a basic authentication in REST template or Feign client?</h3>
<p>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
The above header needs to be attached to API request.</p>
<h3 id=""have-you-used-jpa-what-it-is-"">Have you used JPA? What it is?</h3>
<p>JPA is a Java Persistence API. It is a standard API for Java developers to access and manipulate relational databases.</p>
<h3 id=""how-can-i-write-native-sql-query-in-jpa-"">How can I write native SQL query in JPA?</h3>
<p>You can write a native SQL query using the @Query annotation.
Eg. </p>
<pre><code>@Query(""<span class=""hljs-keyword"">SELECT</span> u <span class=""hljs-keyword"">FROM</span> <span class=""hljs-keyword"">User</span> u <span class=""hljs-keyword"">WHERE</span> u.status = <span class=""hljs-number"">1</span><span class=""hljs-string"">"")
Collection&lt;User&gt; findAllActiveUsers();

@Query(""</span><span class=""hljs-keyword"">SELECT</span> u <span class=""hljs-keyword"">FROM</span> <span class=""hljs-keyword"">User</span> u <span class=""hljs-keyword"">WHERE</span> u.status = <span class=""hljs-number"">1</span> <span class=""hljs-keyword"">AND</span> u.name = ?<span class=""hljs-number"">1</span><span class=""hljs-string"">"")
 Collection&lt;User&gt; fetchUsersWithNameAndStatus(string name, String status);</span>
</code></pre><h3 id=""do-you-have-experience-with-message-driven-architecture-"">Do you have experience with Message driven architecture?</h3>
<p>JMS? Kafka?</p>
<h3 id=""what-is-queue-in-jms-"">What is Queue in JMS?</h3>
<p>JMS Queue is a message oriented middleware. It is a message oriented middleware that is used to send and receive messages.</p>
<h3 id=""what-is-a-topic-"">What is a topic?</h3>
<p>Topic is used when there are multiple subscribers. One to many mapping.</p>
<h3 id=""what-happens-when-a-message-is-sent-but-no-one-is-subscribed-to-it-"">What happens when a message is sent but no one is subscribed to it?</h3>
<p>If it is sent in a QUEUE, will be queued until a subscriber connects to the queue.
If it is snet in a TOPIC, it will be lost as there are no subscribers. But a TOPIC can be durable as well.</p>
<h3 id=""what-is-a-durable-topic-"">What is a durable topic?</h3>
<p>A durable topic is a persistent topic.</p>
<h3 id=""do-you-have-experience-with-docker-what-is-docker-"">Do you have experience with docker? What is docker?</h3>
<p>Docker is a containerization platform. It is a containerization platform that is used to run applications on a virtual machine.</p>
<h3 id=""how-do-you-load-your-application-secrets-like-credentials-on-production-"">How do you load your application secrets like credentials on production?</h3>
<p>You can use the <code>@Value</code> annotation in spring. This can bind to environment variables.</p>",0,"standard","post"
"Java program to Reverse Words in a String","java-program-to-reverse-words-in-a-string","Java program to Reverse Words in a String. Given an input string, reverse the string word by word. For example, given=s ""the sky is blue"", the program should return ""blue is sky the"". Leetcode problem in Java.","LIVE","<p class=""lead"">Given an input string, reverse the string word by word. For example, for the given string ""the sky is blue"", the program should return ""blue is sky the"".</p>
<p>We first split the string into a word array, and then iterate through the array and add each element of a new string.</p>
<p><b>Note:</b> String Builder should be used to avoid creating too many Strings. If the string is very long, using String is not scalable since String is immutable and too many objects will be created and garbage collected.</p>
<pre class=""prettyprint lang-java"">public class ReverseWords {

    public static void main(String[] args) {
        String input = ""the sky is blue"";
        String result = reverseWords(input);
        System.out.println(""Original string: "" + input);
        System.out.println(""Reversed words: "" + result);
    }

    private static String reverseWords(String str) {
        if (str == null || str.isEmpty()) {
            return """";
        }

        String[] arr = str.split("" "");
        StringBuilder reversed = new StringBuilder();
        for (int i = arr.length - 1; i &gt;= 0; --i) {
            if (!arr[i].isEmpty()) {
                reversed.append(arr[i]).append("" "");
            }
        }
        return reversed.isEmpty() ? """" : reversed.substring(0, reversed.length() - 1);
    }
}
</pre>
<strong>Output</strong>
<pre>Original string: the sky is blue
Reversed words: blue is sky the
</pre>
<h3>Complexity Analysis: </h3>
<pre>Time Complexity: O(n + m)
Space Complexity: O(m + n)
</pre>
<h4>Time Complexity:</h4>
<ul>
<li>The <code>split()</code> method splits the input string into an array of words based on the space character <code>(' ')</code>. It has a time complexity of <code>O(n)</code>, where n is the length of the input string.</li>
<li>The subsequent loop that iterates over the array and appends non-empty words to the <code>StringBuilder</code> has a time complexity of O(m), where m is the total number of words in the array.</li>
<li>Overall, the time complexity of the reverseWords function is <strong>O(n + m)</strong>, where n is the length of the input string and m is the number of words.</li>
</ul>
<h4>Space Complexity:</h4>
<ul>
<li>The space complexity is determined by the additional space required to store the array of words (arr) and the StringBuilder (reversed).
The space required for the array of words is <strong>O(m)</strong>, where m is the number of words in the input string.</li>
<li>The space required for the <code>StringBuilder</code> is proportional to the length of the reversed string, which can be up to <code>O(n)</code>, where n is the length of the input string.</li>
<li>Therefore, the overall space complexity is O(m + n), where m is the number of words and n is the length of the input string.</li>
</ul>",0,"standard","post"
"How to Convert Sorted List to Binary Search Tree","how-to-convert-sorted-list-to-binary-search-tree","Given a singly linked list where elements are sorted in ascending order, write a java program to convert it to a height-balanced Binary Search Tree (BST).","LIVE","<p class=""lead"">Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced Binary Search Tree (BST).</p>
<p>To convert a sorted singly linked list to a height-balanced Binary Search Tree (BST), we will use the recursive approach. The key idea is to find the middle element of the linked list, make it the root of the BST, and then recursively do the same for the left and right halves of the linked list.</p>
<h4 class="""">Java implementation</h4><p>
</p><pre class=""prettyprint java"">class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

public class SortedListToBST {
    private TreeNode sortedListToBST(ListNode head) {
        if (head == null) {
            return null;
        }

        return sortedListToBST(head, null);
    }

    private TreeNode sortedListToBST(ListNode head, ListNode tail) {
        if (head == tail) {
            return null;
        }

        ListNode slow = head;
        ListNode fast = head;

        // Using the slow and fast pointers to find the middle element
        while (fast != tail &amp;&amp; fast.next != tail) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // The root node with the middle element
        TreeNode root = new TreeNode(slow.val);

        // Recursively build the left and right subtrees
        root.left = sortedListToBST(head, slow);
        root.right = sortedListToBST(slow.next, tail);

        return root;
    }

    public static void main(String[] args) {
        // Example usage
        SortedListToBST converter = new SortedListToBST();

        // Create a sorted linked list
        ListNode head = new ListNode(-10);
        head.next = new ListNode(-3);
        head.next.next = new ListNode(0);
        head.next.next.next = new ListNode(5);
        head.next.next.next.next = new ListNode(9);

        // Convert the linked list to a balanced BST
        TreeNode result = converter.sortedListToBST(head);

        System.out.println(""Inorder traversal of the resulted BST:"");
        inorderTraversalBST(result);
    }

    private static void inorderTraversalBST(TreeNode result) {
        if (result != null) {
            inorderTraversalBST(result.left);
            System.out.print(result.val + "" "");
            inorderTraversalBST(result.right);
        }
    }
}
</pre>
<b>Output</b>
<pre>Inorder traversal of the resulted BST:
-10 -3 0 5 9</pre>
<h3>Complexity Analysis </h3>
<pre>Time Complexity: O(n)
Space Complexity: O(log n) (call stack) + O(n) (additional space)
</pre>
<h4>Time Complexity</h4>
<ul>
<li>The time complexity is mainly determined by the recursive method to convert the sorted linked list to a balanced BST. In each recursive call, we perform constant-time operations, such as creating nodes and updating pointers.</li>
<li>The number of recursive calls is proportional to the number of nodes in the linked list. </li><li>Therefore, the time complexity is <b>O(n)</b>, where <b>n</b> is the number of nodes in the linked list.</li>
</ul>
<h4>Space Complexity</h4>
<ul>
<li>The space complexity is influenced by the space required for the recursive calls on the call stack.</li>
<li>In the worst case, the maximum depth of the recursion is equal to the height of the balanced BST.</li>
<li>The height of a balanced BST constructed from a sorted linked list is approximately <code>log₂(n)</code>, where n is the number of nodes.</li>
<li>Therefore, the space complexity of the call stack is <code>O(log n)</code>.</li>
<li>There is additional space required for the linked list nodes and the BST nodes. However, these contribute at <code>most O(n)</code> to the space complexity.</li>
</ul>",0,"standard","post"
"Java Program to Find the Minimum Depth of Binary Tree","java-program-to-find-the-minimum-depth-of-binary-tree","Given a binary search tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.","LIVE","<p class=""lead"">Given a binary search tree, find its minimum depth.</p>
<p>In a Binary Search Tree(BST), each node has at most two children, and the left child of a node contains values less than the node's value, and the right child contains values greater than the node's value. The depth of a node in a tree is the length of the path from the root node to that particular node. The depth of the root node is always 0, and the depth increases by 1 as you move down the tree towards the leaves.</p>
<p>Following example depicts the representation of BST.</p><p><img src=""https://media.stacktips.com/media/uploads/summernote/Binary_search_tree_example.png""/><br/></p>
<p>In the above BST:</p>
<ul>
<li>The depth of the node with value 8 is 0.</li>
<li>The depth of the node with value 3 is 1.</li>
<li>The depth of the node with value 10 is 1.</li>
<li>The depth of the node with value 1 is 2.</li>
<li>The depth of the node with value 6 is 2.</li>
<li>The depth of the node with value 14 is 2.</li>
</ul>
<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
<h3 class=""h4"">Java implementation</h3>
<pre class=""prettyprint java"">class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

public class BinarySearchTreeDepth {
    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        LinkedList&lt;TreeNode&gt; nodes = new LinkedList&lt;&gt;();
        LinkedList&lt;Integer&gt; counts = new LinkedList&lt;&gt;();
        nodes.add(root);
        counts.add(1);
        while (!nodes.isEmpty()) {
            TreeNode curr = nodes.remove();
            int count = counts.remove();
            if (curr.left != null) {
                nodes.add(curr.left);
                counts.add(count + 1);
            }
            if (curr.right != null) {
                nodes.add(curr.right);
                counts.add(count + 1);
            }
            if (curr.left == null &amp;&amp; curr.right == null) {
                return count;
            }
        }
        return 0;
    }
}
</pre>

Let us now write some unit tests to cover all scenarios like empty tree, tree with single node and a tree with depth 2.
<pre class=""prettyprint lang-java"">@Test
public void testMinDepth() {
    // Create a binary tree: 1 -&gt; 2 -&gt; 4 (leaf)
    //                         \
    //                          3 (leaf)
    TreeNode root = new TreeNode(1);
    root.left = new TreeNode(2);
    root.right = new TreeNode(3);
    root.left.left = new TreeNode(4);

    // Create an instance of BSTDepth
    BinarySearchTreeDepth bstDepth = new BinarySearchTreeDepth();

    // Test the minDepth method
    int result = bstDepth.minDepth(root);

    // The minimum depth in this case is 2
    assertEquals(2, result);
}

@Test
public void testMinDepthEmptyTree() {
    BinarySearchTreeDepth bstDepth = new BinarySearchTreeDepth();
    int result = bstDepth.minDepth(null);

    // The minimum depth of an empty tree is 0
    assertEquals(0, result);
}

@Test
public void testMinDepthSingleNodeTree() {
    TreeNode root = new TreeNode(1);
    BinarySearchTreeDepth bstDepth = new BinarySearchTreeDepth();
    int result = bstDepth.minDepth(root);

    // The minimum depth of a single-node tree is 1
    assertEquals(1, result);
}
</pre>",0,"standard","post"
"Order of Test Methods in JUnit5","the-order-of-tests-in-junit5","This article explains how to order the execution of test methods in Junit5. It explains different options such as order by DisplayName, MethodName, Random, OrderAnnotation or based on a custom order.","LIVE","<p>The <code>@Test</code> a JUnit annotation that will execute the
method when the tests starts. A test class can contain one or more test
methods. When there are multiple test methods, the order of execution is
not fixed.</p>
<p>The <code>@TestMethodOrder</code> is a type-level annotation that is
used to configure a method orderer for the test methods of the annotated
test class or test interface. The <code>@TestMethodOrder</code> can be
defined in your test class, inherited from parent class or declared on a
test interface implemented by a test class.</p>
<p>The <code>@TestMethodOrder</code> offers different ways to order test
execution order. We can order by either <code>DisplayName</code>,
<code>MethodName</code>, <code>Random</code>,
<code>OrderAnnotation</code> or based on a custom order.</p>
<p class=""alert alert-warning"">Title Please note, the <code>Alphanumeric</code>
annotation is deprecated and internally uses the <code>MethodName</code>
order.</p>
<h3 id=""order-test-methods-by-methodname"">Order Test Methods by
MethodName</h3>
<p>Following code demonstrates how to order test methods based on the
MethodName. The same applies for <code>Random</code> as well.</p>
<pre class=""prettyprint lang-java"">import org.junit.jupiter.api.MethodOrderer;  
import org.junit.jupiter.api.Test;  
import org.junit.jupiter.api.TestMethodOrder;  
  
import static org.junit.jupiter.api.Assertions.assertTrue;  
  
@TestMethodOrder(MethodOrderer.MethodName.class)  
class MyServiceTests {  
  
    @Test  
    void test1() {  
        assertTrue(true);  
    }  
  
    @Test  
    void test2() {  
        assertTrue(true);  
    }  
  
    @Test  
    void test3() {  
        assertTrue(true);  
    }  
}</pre>
<p>Prints: </p><p><img src=""https://media.stacktips.com/media/uploads/summernote/Order_Test_Methods_by_MethodName.png""/><br/></p>
<h3 id=""order-test-methods-by-displayname"">Order Test Methods by
DisplayName</h3>
<p>The <code>@DisplayName</code> is used when the test report is
generated. For ordering the test methods by display name we need to
specify a custom display name for each test using the
<code>@DisplayName</code> annotation.</p>
<pre class=""prettyprint lang-java"">import org.junit.jupiter.api.DisplayName;  
import org.junit.jupiter.api.MethodOrderer;  
import org.junit.jupiter.api.Test;  
import org.junit.jupiter.api.TestMethodOrder;  
  
import static org.junit.jupiter.api.Assertions.assertTrue;  
  
@TestMethodOrder(MethodOrderer.DisplayName.class)  
class MyServiceTests {  
  
    @Test  
	@DisplayName(""testMethod1"")  
	void test1() {   
        assertTrue(true);  
    }  
  
    @Test  
    @DisplayName(""testMethod2"")  
    void test2() {  
        assertTrue(true);  
    }  
  
    @Test  
    @DisplayName(""testMethod3"")  
    void test3() {  
        assertTrue(true);  
    }  
}</pre>
<p>Prints: </p><p><img src=""https://media.stacktips.com/media/uploads/summernote/Order_Test_Methods_by_DisplayName.png""/><br/></p><h3 class=""""><span>Order Test
Methods by OrderAnnotation</span></h3>
<p>To define the test execution order based on the
<code>OrderAnnotation</code>, we need to declare <code>@Order</code>
annotation for each test methods.</p>
<p>Please note that the <code>@Order</code> annotation should be from
<code>org.junit.jupiter.api</code> package not from the spring framework
<code>org.springframework.core.annotation</code> package.</p>
<pre class=""prettyprint lang-java"">import org.junit.jupiter.api.MethodOrderer;  
import org.junit.jupiter.api.Order;  
import org.junit.jupiter.api.Test;  
import org.junit.jupiter.api.TestMethodOrder;  
import static org.junit.jupiter.api.Assertions.assertTrue;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)  
class MyServiceTests {  
  
    @Test  
    @Order(1)  
    void test1() {  
        assertTrue(true);  
    }  
  
    @Test  
    @Order(3)  
    void test2() {  
        assertTrue(true);  
    }  
  
    @Test  
    @Order(2)  
    void test3() {  
        assertTrue(true);  
    }  
}</pre>
<p>Prints: </p><p class=""""><img src=""https://media.stacktips.com/media/uploads/summernote/Order_Test_Methods_by_OrderAnnotation.png""/></p><h3 class="""">Defining
Custom Order </h3><p>We can define custom order by extending the existing method
orderers. For example, let us create a custom method order by number of
parameters passed to the test. The test with more parameters will be
executed first.</p>
<pre class=""prettyprint lang-java"">import java.util.Comparator;

class ParameterCountOrder implements MethodOrderer {  
    @Override  
    public void orderMethods(MethodOrdererContext context) {  
        Comparator&lt;MethodDescriptor&gt; comparator =  
                Comparator.comparingInt(md1 -&gt; md1.getMethod().getParameterCount());  
        context.getMethodDescriptors()  
                .sort(comparator.reversed());  
    }  
}</pre>
<p>Now, let us use the custom <code>MethodOrderer</code> we have created
above.</p>
<pre class=""prettyprint lang-java"">import org.junit.jupiter.api.DisplayName;  
import org.junit.jupiter.api.Test;  
import org.junit.jupiter.api.TestMethodOrder;  
import org.junit.jupiter.params.ParameterizedTest;  
import org.junit.jupiter.params.provider.CsvSource;  
import static org.junit.jupiter.api.Assertions.assertTrue;

@TestMethodOrder(ParameterCountOrder.class)  
class MyServiceTests {  
  
    @Test  
    @DisplayName(""testMethod1"")  
    void test1() {  
        assertTrue(true);  
    }  
  
    @ParameterizedTest(name = ""{index} ==&gt; product={0}"")  
    @CsvSource({  
            ""iPhone 15"",  
            ""Mx Master 3S""  
    })  
    @DisplayName(""testMethod2"")  
    void test2(String product) {  
        assertTrue(true);  
    }  
  
    @DisplayName(""testMethod3"")  
    @ParameterizedTest(name = ""{index} ==&gt; product={0}, price={1}"")  
    @CsvSource({  
            ""iPhone 15, 999"",  
            ""Mx Master 3S, 89""  
    })  
    void test3(String product, double price) {  
        assertTrue(true);  
    }  
  
}</pre>
<p>Prints: </p><p><img src=""https://media.stacktips.com/media/uploads/summernote/Order_Test_Methods_by_CustomOrder.png""/><br/></p>",0,"standard","post"
"Testing Spring Boot REST API using Mockito and MockMvc","testing-spring-boot-using-mockito-and-mockmvc","Testing Spring Boot REST API using Mockito and MockMvc","LIVE","<p>The best way to confirm the reliability and correctness of software applications is to write tests that assert the desired behavior of an application. This post covers how to perform unit and integration testing in Spring Boot.</p>
<p>The <code>spring-boot-starter-test</code> <a href=""/courses/spring-boot-for-beginners/introduction-to-spring-boot-framework#spring-boot-starter-dependencies"">starter dependency</a> is required for writing the unit and integration tests in Spring Boot application. The Spring Boot version 3.2.2 <code>spring-boot-starter-test</code> includes the following <a href=""/courses/maven-for-beginners/dependency-management-in-maven#411-transitive-dependency"">transitive dependencies</a>. </p>
<ul>
<li><strong>Jupiter JUnit5</strong>: The de facto standard for unit testing Java. </li>
<li><strong>Jayway JsonPath:</strong> A popular Java library used for parsing and querying JSON documents. It is used for navigating through the structure of your JSON data and access specific values or elements.</li>
<li><strong>Awaitility:</strong> Used for waiting for asynchronous operations to complete without introducing additional logic in your code.</li>
<li><strong>Hamcrest:</strong> Hamcrest is used for writing expressive and readable assertions in unit tests. It provides a clear and concise way to express what you expect from your code, making your tests easier to understand and maintain.</li>
<li><strong>Mockito:</strong>  Java mocking framework used to create mock objects that simulate the behavior of real objects without actually implementing their functionality. This makes it easier to isolate the code you're testing from external dependencies and write more focused and reliable tests.</li>
</ul>
<p>Let’s start by creating a <a href=""/courses/spring-boot-for-beginners/creating-first-spring-boot-project#create-a-new-spring-boot-project"">new Spring application</a>. You can create a Spring boot project either using Spring CLI or using Spring Initializr.</p>
<p>When we create a new Spring boot project the <code>spring-boot-starter-test</code> dependencies is added by default. If you don't have it already, you can add this manually in your <code>pom.xml</code> or <code>build.gradle</code> file.</p>
<p>For maven, add the following to the <code>&lt;dependencies&gt;</code> section in your <code>pom.xml</code> file</p>
<pre><code class=""prettyprint lang-xml"">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>
<p>The <code>test</code> scope defines that the <code>spring-boot-starter-test</code> dependency is required during the test compilation and execution phases.</p>
<p>For gradle, </p>
<pre><code class=""lang-groovy"">testImplementation 'org.springframework.<span class=""hljs-keyword"">boot</span>:spring-<span class=""hljs-keyword"">boot</span>-starter-<span class=""hljs-keyword"">test</span>'
</code></pre>
<p>The Spring Initializr also includes a default test class in the root directory of the test package. </p>
<pre><code class=""prettyprint lang-java"">import org.junit.jupiter.api.Test;  
import org.springframework.boot.test.context.SpringBootTest;  

@SpringBootTest  
class MoviesApplicationTests {  

    @Test  
    void contextLoads() {  

    }  
}
</code></pre>
<p>The <code>@SpringBootTest</code> annotation tells Spring Boot to look for a main configuration class (one with <code>@SpringBootApplication</code>, for instance) and use that to start the Spring application context. </p>
<p>The <code>@Test</code>  annotation a JUnit annotation that will execute the method when the tests starts. A test class can contain one or more test methods. When there are multiple test methods, the order of execution is not fixed. If you want to fix the execution order you can do that using the method name, display name, using order annotation. Checkout this tutorials that explains <a href=""https://stacktips.com/articles/the-order-of-tests-in-junit5"">how to order test methods</a>. </p>
<p>You can run this test in your IDE or on the command line using following Maven or Gradle commands.</p>
<pre><code class=""lang-shell"">./<span class=""hljs-keyword"">mvnw </span>test
</code></pre>
<p>or </p>
<pre><code class=""lang-shell"">./gradlew <span class=""hljs-built_in"">test</span>
</code></pre>
<h2 id=""simple-test"">Simple Test</h2>
<p>Now that we have the required test dependency in our project and we have learnt how to execute the test, let us now test the following controller.</p>
<pre><code class=""prettyprint lang-java"">import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.bind.annotation.RestController;  

@RestController  
public class GreetingController {  

    @RequestMapping(""/"")  
    public String greeting() {  
        return ""Hello, Spring Boot!"";  
    }  
}
</code></pre>
<p>Let us now verify if the Spring context is creating the instance of <code>GreetingsController</code> with an assertion. </p>
<pre><code class=""lang-java"">import com.stacktips.movies.api.GreetingsController;  
import org.junit.jupiter.api.Test;  
import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.boot.test.context.SpringBootTest;  

import static org.hamcrest.MatcherAssert.assertThat;  
import static org.hamcrest.Matchers.is;  
import static org.hamcrest.Matchers.notNullValue;  

@SpringBootTest  
class MoviesApplicationTests {  

    @Autowired  
    private GreetingController controller;  

    @Test  
    void contextLoads() {  
        assertThat(controller, is(notNullValue()));  
    }  

}
</code></pre>
<p>The <code>@Autowired</code> injects the controller instance before the test methods are run. We have hamcrest which provides <code>assertThat()</code> method to assert the not null value.</p>
<blockquote>
<p>[!TIP] 
The Spring Test support caches the application context between tests, so that if you have multiple methods in a test case or multiple test cases with the same configuration, they incur the cost of starting the application only once. You can control the cache by using the <code>@DirtiesContext</code> annotation.</p>
</blockquote>
<h2 id=""testing-the-rest-api"">Testing the REST API</h2>
<p>Let us now write some tests to assert the behavior of your application.  For that we will start the application and and listen for a connection (as it would do in production) and then send an HTTP request and assert the response.</p>
<pre><code class=""prettyprint lang-java"">import org.junit.jupiter.api.Test;  
import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.boot.test.context.SpringBootTest;  
import org.springframework.boot.test.web.client.TestRestTemplate;  
import org.springframework.boot.test.web.server.LocalServerPort;  

import static org.hamcrest.MatcherAssert.assertThat;  
import static org.hamcrest.Matchers.is;  
import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment;  

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)  
class GreetingsControllerTest {  

    @LocalServerPort  
    private int port;  

    @Autowired  
    private TestRestTemplate restTemplate;  

    @Test  
    void greetingShouldReturnDefaultMessage() throws Exception {  
        String result = restTemplate
            .getForObject(""http://localhost:"" + port + ""/"",  String.class);  
        assertThat(result, is(""Hello, Spring Boot!""));  
    }  

}
</code></pre>
<p>The <code>webEnvironment=RANDOM_PORT</code> to start the server with a random port. This is very useful to avoid conflicts in test environments and the injection of the port with <code>@LocalServerPort</code>. </p>
<p>Spring boot test also provides a <code>TestRestTemplate</code> for to make http calls from your test. </p>
<h2 id=""using-mockmvc"">Using MockMvc</h2>
<p>In the above approach we have started the server but if we want to tests to only the web layer by without starting a server we can do that using <code>@WebMvcTest</code>. For that,  we will inject an instance of <code>MockMvc</code>. For MockMvc to work we need to need to use the <code>@AutoConfigureMockMvc</code> annotation on our test class. </p>
<p>If we have multiple controllers, we can instantiate specific ones by using the<code>@WebMvcTest(HomeController.class)</code> annotation on the class.</p>
<pre><code class=""prettyprint lang-java"">import org.junit.jupiter.api.Test;  
import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;  
import org.springframework.test.web.servlet.MockMvc;  

import static org.hamcrest.Matchers.containsString;  
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;  
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;  
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;  
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;  

@WebMvcTest(GreetingController.class)  
class GreetingControllerTest {  

    @Autowired  
    MockMvc mockMvc;  

    @Test  
    void greetingShouldReturnDefaultMessage() throws Exception {  
        this.mockMvc.perform(get(""/""))  
                .andDo(print())  
                .andExpect(status().isOk())  
                .andExpect(content().string(containsString(""Hello, Spring Boot!"")));  
    }  

}
</code></pre>
<p>The test assertion is the same as in the previous case. However, in this test, Spring Boot instantiates only the web layer rather than using the whole spring context.  </p>
<h2 id=""mocking-services"">Mocking Services</h2>
<p>So far, our <code>HomeController</code> is simple and has no dependencies. But we will often have additional services to isolate the business logic into separate classes. For example.</p>
<p><strong>MovieService</strong></p>
<pre><code class=""prettyprint lang-java"">import org.springframework.stereotype.Service;  

import java.util.List;  

@Service  
public class MovieService {  

    public List&lt;String&gt; getMovies() {  
        return List.of(""The Incredibles"", ""Father of the Bride"", ""The Parent Trap"");  
    }  
}
</code></pre>
<p>And, lets say our MovieController has <code>/movies</code> GET endpoint.</p>
<pre><code class=""prettyprint lang-java"">import com.stacktips.movies.service.MovieService;  
import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.bind.annotation.RestController;  

import java.util.List;  

@RestController  
public class MovieController {  

    private final MovieService movieService;  

    public MovieController(MovieService movieService) {  
        this.movieService = movieService;  
    }  

    @RequestMapping(""/movies"")  
    public List&lt;String&gt; getMovies() {  
        return movieService.getMovies();  
    }  
}
</code></pre>
<p>In the above code snippet, Spring automatically injects the <code>MovieService</code> dependency into the controller as we have only one constructor defined.  If you run the spring boot application and test <code>/movies</code> endpoint, it will return the list of movies.</p>
<pre><code class=""lang-shell"">nilan &gt; curl http://localhost:8080/movies
[""The Incredibles"",""Father of the Bride"",""The Parent Trap""]
</code></pre>
<p>Let us now create a test for the <code>MoviesController</code>  and mock the service instance. To mock the Spring bean the <code>@MockBean</code> annotation is used.</p>
<pre><code class=""prettyprint lang-java"">import com.stacktips.movies.service.MovieService;  
import org.junit.jupiter.api.Test;  
import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;  
import org.springframework.boot.test.mock.mockito.MockBean;  
import org.springframework.test.web.servlet.MockMvc;  

import java.util.List;  

import static org.hamcrest.CoreMatchers.is;  
import static org.mockito.Mockito.when;  
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;  
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;  
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;  
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;  

@WebMvcTest(MovieController.class)  
class MovieControllerTest {  

    @Autowired  
    private MockMvc mockMvc;  

    @MockBean  
    private MovieService movieService;  

    @Test  
    void greetingShouldReturnMockResponse() throws Exception {  
        List&lt;String&gt; moviesMock = List.of(""Sprider Man"", ""X-Man"", ""Iron Man"");  
        when(movieService.getMovies()).thenReturn(moviesMock); 

        this.mockMvc.perform(get(""/movies""))  
                .andDo(print())  
                .andExpect(status().isOk())  
                .andExpect(jsonPath(""$[0]"", is(""Sprider Man"")))  
                .andExpect(jsonPath(""$[1]"", is(""X-Man"")))  
                .andExpect(jsonPath(""$[2]"", is(""Iron Man"")));  
    }  

}
</code></pre>
<p>The <code>mockMvc.perform</code> method makes the GET request to the <code>/movies</code> endpoint. But this time, instead of getting the results from the service, it returns the mocked response using <code>Mockito</code>.</p>
<p>We are also using the Json path to assert the Json response. </p>",10,"standard","lesson"
"Creating Parameterized Tests in JUnit 5","parameterized-tests-in-junit-5","Parameterized tests allow you to execute a single test multiple times using different parameters. This article explains the usage of each of these test sources using @ParameterizedTest annotation in Junit5.","LIVE","<p>Parameterized tests allow you to execute a single test multiple times using different parameters. This way we can eliminate the need to write the separate tests for each set of test data. </p>
<p>In JUnit 5, parameterized tests are supported through the <code>@ParameterizedTest</code> annotation. The <code>@ParameterizedTest</code> replaces the <code>@Test</code> annotation to test methods.  With <code>@ParameterizedTest</code> we can run the test method from the various data sources including:</p>
<ol>
<li><code>@ValueSource</code>: Provides a simple array of literal values</li>
<li><code>@EnumSource</code>: Provides values from a specified enum class.</li>
<li><code>@MethodSource</code>: References a method that returns a stream of arguments.</li>
<li><code>@CsvSource</code>: Allows specifying values in a comma-separated format.</li>
<li><code>@CsvFileSource</code>: Reads values from a CSV file.</li>
<li><code>@ArgumentsSource</code>: References a custom, reusable arguments provider.</li>
</ol>
<p>This article explains the usage of each of these test sources using <code>@ParameterizedTest</code> annotation.</p>
<h3 id=""getting-the-required-dependencies"">Getting the Required Dependencies</h3>
<p>The ParameterizedTest annotation is not part of the core <code>junit-jupiter-api</code> but is in a separate artifact named <code>junit-jupiter-params</code>. That is why, for running the JUnit5 parameterized tests, we need to have the <code>junit-jupiter-params</code> dependency in our classpath. </p>
<p>If you are using Maven, we have to add the <code>junit-jupiter-params</code> dependency to the pom.xml file to the <code>test</code> scope.</p>
<pre><code class=""prettyprint lang-xml"">&lt;dependency&gt;  
    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;  
    &lt;artifactId&gt;junit-jupiter-params&lt;/artifactId&gt;  
    &lt;version&gt;5.9.3&lt;/version&gt;  
    &lt;scope&gt;test&lt;/scope&gt;  
&lt;/dependency&gt;
</code></pre>
<p>If we are using Gradle, you need to add the following to <code>build.gradle</code> file</p>
<pre><code class=""lang-groovy"">testImplementation('org.junit.jupiter:junit-jupiter-params:5.9.3')
</code></pre>
<p>Ones we have the required dependency, we are good to write our first parameterized test with JUnit 5.</p>
<h3 id=""using-valuesource-annotation"">Using @ValueSource annotation</h3>
<p>The @ValueSource provides a simple array of literal values. It supports all primitive types including shorts, bytes, ints, longs, floats, doubles, chars, booleans, strings and classes.</p>
<p>The <code>testWithStrings()</code> test method in the following code snippet will be executed 3 times with the arguments SUNDAY, MONDAY, and TUESDAY.</p>
<pre><code class=""prettyprint lang-java"">import org.junit.jupiter.params.ParameterizedTest;  
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.assertNotNull;  
  
class ValueSourceTest {  
  
    @ParameterizedTest  
    @ValueSource(strings = {""SUNDAY"", ""MONDAY"", ""TUESDAY""})  
    void testWithStrings(String argument) {  
  
        assertNotNull(argument);  
    }  
}
</code></pre>
<h3 id=""using-enumsource-annotation"">Using @EnumSource annotation</h3>
<p>The <code>@EnumSource</code> allows us to test a function or a method against all possible values of an enum type. </p>
<pre><code class=""prettyprint lang-java"">import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.EnumSource;
import java.util.EnumSet;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
  
enum DayOfWeek {  
    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY  
}  
  
class EnumSourceTest {  
  
    @ParameterizedTest  
    @EnumSource(DayOfWeek.class)  
    void testWithEnumSource(DayOfWeek dayOfWeek) {  
        assertNotNull(dayOfWeek);  
    }  
  
    @ParameterizedTest  
    @EnumSource(value = DayOfWeek.class, names = {""MONDAY"", ""FRIDAY""})  
    void testWithEnumSourceIncludeOnlySomeDays(DayOfWeek dayOfWeek) {  
        assertTrue(EnumSet.of(DayOfWeek.MONDAY, DayOfWeek.FRIDAY).contains(dayOfWeek));  
    }  
}
</code></pre>
<h3 id=""using-methodsource-annotation"">Using @MethodSource annotation</h3>
<p>The <code>@MethodSource</code> annotation allows us to specify a method that provides a stream of arguments. Here is how we can use <code>@MethodSource</code> annotations in Junit5.</p>
<pre><code class=""prettyprint lang-java"">import org.junit.jupiter.params.ParameterizedTest; 
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.assertEquals;
  
class MethodSourceTest {  
  
    @ParameterizedTest  
    @MethodSource(""provideStringArgs"")  
    void testWithMethodSource(String week, String weekShort) {  
        assertEquals(weekShort, week.substring(0, 3));  
    }  
  
    static Stream&lt;Arguments&gt; provideStringArgs() {  
        return Stream.of(  
                Arguments.of(""SUNDAY"", ""SUN""),  
                Arguments.of(""MONDAY"", ""MON""),  
                Arguments.of(""TUESDAY"", ""TUE"")  
        );  
    }  
}
</code></pre>
<h3 id=""using-csvsource-annotation"">Using @CsvSource annotation</h3>
<p>The <code>@CsvSource</code> annotation allows us to specify a comma-separated list of values. Each line in the <code>@CsvSource</code> annotation represents a distinct invocation of the parameterized test method.</p>
<p>Here is how we can use the <code>@CsvSource</code> in Junit5.</p>
<pre><code class=""prettyprint lang-java"">import org.junit.jupiter.params.ParameterizedTest; 
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.assertEquals;

class CsvSourceTest {  
  
    @ParameterizedTest  
    @CsvSource({  
            ""SUNDAY, 6"",  
            ""MONDAY, 6"",  
            ""TUE, 3"",  
            ""'', 0"",  
            ""'HAPPY WEEKEND!', 14"",  
    })
    void testStringLength(String input, int expectedLength) {
        assertEquals(expectedLength, input.length());
    }
}
</code></pre>
<h3 id=""using-csvfilesource-annotation"">Using @CsvFileSource annotation</h3>
<p>The <code>@CsvFileSource</code> annotation in JUnit 5 allows you to use CSV files as a source of parameters for parameterized tests. This is useful for larger datasets or when you want to keep your test data separate from your test code. </p>
<p>Here is how we can use <code>@CsvFileSource</code> in Junit5:</p>
<pre><code class=""prettyprint lang-java"">import org.junit.jupiter.params.ParameterizedTest;  
import org.junit.jupiter.params.provider.CsvFileSource;  
  
import static org.junit.jupiter.api.Assertions.assertEquals;  
  
class CsvFileSourceTest {  
  
    @ParameterizedTest  
    @CsvFileSource(resources = ""/data1.csv"")  
    void testWithCsvFileSource1(String day, int length) {  
        assertEquals(length, day.length());  
    }  
  
    @ParameterizedTest  
    @CsvFileSource(resources = ""/data2.csv"", delimiter = ';')  
    void testWithCsvFileSourceDelimiter(String day, int length) {  
        assertEquals(length, day.length());  
    }  
  
    @ParameterizedTest  
    @CsvFileSource(resources = ""/data3.csv"", nullValues = {""NULL""})  
    void testWithCsvFileSourceNullValue(String day, int length) {  
        assertEquals(length, day != null ? day.length() : 0);  
    }  
}
</code></pre>
<p>The above code snippet uses the <code>data.csv</code> file. It reads the file from the <code>src/test/resources</code> directory.
</p><p><strong>data1.csv</strong><br/></p>
<pre><code class=""prettyprint lang-csv"">SUNDAY, 6  
MONDAY, 6  
TUE, 3  
HAPPY WEEKEND!, 14
</code></pre>
<p><strong>data2.csv</strong></p>
<pre><code class=""prettyprint lang-csv"">SUNDAY; 6  
MONDAY; 6  
TUE; 3  
HAPPY WEEKEND!; 14
</code></pre>
<p><strong>data3.csv</strong></p>
<pre><code class=""prettyprint lang-csv"">SUNDAY, 6  
MONDAY, 6  
TUE, 3  
HAPPY WEEKEND!, 14  
 , 0
</code></pre>
<p>If your CSV file uses a delimiter other than a comma, you can specify it using the <code>delimiter</code> attribute of the <code>@CsvFileSource</code> annotation.</p>
<pre><code class=""lang-java"">@CsvFileSource(resources = ""/data.csv"", delimiter = ';')
</code></pre>
<p>By default, an empty field in the CSV file is treated as an empty string. If you want to treat them as <code>null</code>, specify a <code>nullValues</code> attribute.</p>
<pre><code class=""lang-java"">@CsvFileSource(resources = ""/data.csv"", nullValues = {""NULL""})
</code></pre>
<h3 id=""use-argumentssource-annotation"">Using @ArgumentsSource annotation</h3>
<p>The <code>@ArgumentsSource</code> annotation allows us to specify a custom, reusable source of arguments. It allows you to define a class that implements the <code>ArgumentsProvider</code> interface, which can then generate and provide complex argument objects for your tests. </p>
<p>Here is how we can use <code>@ArgumentsSource</code> annotation:</p>
<pre><code class=""prettyprint lang-java"">import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.params.ParameterizedTest; 
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.ArgumentsProvider;
import org.junit.jupiter.params.provider.ArgumentsSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
  
class ArgumentSourceTest {  
  
    @ParameterizedTest  
    @ArgumentsSource(CustomArgumentsProvider.class)  
    void testWithCustomArgumentsSource(String input, int number) {  
        assertNotNull(input);  
        assertTrue(number &gt; 0);  
    }  
}  
  
class CustomArgumentsProvider implements ArgumentsProvider {  
  
    @Override  
    public Stream&lt;? extends Arguments&gt; provideArguments(ExtensionContext context) {  
        return Stream.of(  
                Arguments.of(""SUNDAY"", 6),  
                Arguments.of(""MONDAY"", 6),  
                Arguments.of(""TUE"", 3),  
                Arguments.of(""HAPPY WEEKEND!"", 14)  
        );  
    }  
}
</code></pre>",0,"standard","post"
"Java 17 Interview Questions and Answers","java-17-interview-questions-and-answers","A curated set of interview questions and answers on Java 17.","LIVE","<div class=""card p-4 mb-3""><h3 id=""1-what-is-the-records-in-java-"">1. What is the Records in Java?</h3>
<p>Records is a new language feature introduced in Java 14 and finalized in Java 16. A record is a special type of class in Java allows us to define classes that act as transparent carriers for immutable data. Records can be used to replace traditional POJOs, which are often verbose and require a lot of boilerplate code.</p>
<p>This is how we can define the records</p>
<pre><code class=""prettyprint lang-java"">public record Vehicle(String make, String model, int year) {}
</code></pre>
<p>The fields of a record are implicitly final, which means that once a record instance is created, the data it contains cannot be changed. </p>
<p>Records provides several built-in methods for common operations such as <code>equals()</code>, <code>hashCode()</code>, and <code>toString()</code>. Like a regular class, these methods can be extended to provide custom implementation.</p>
<p>Records allow you to define a <strong>Compact constructor</strong> which omits the parameter list, assuming the same parameters as the record components. Within this constructor, you can include validation or normalization logic for the fields.</p>
<pre><code class=""prettyprint lang-java"">public record Vehicle(String make, String model, int year) {
    
    // Compact constructor
    public Vehicle {
        if (year &lt; 1886) { // The first car was made in 1886
            throw new IllegalArgumentException(""Invalid year"");
        }
        make = make.trim();
        model = model.trim();
    }
}
</code></pre>
<p>Records are ideal for creating simple data-carrier classes, such as DTOs (Data Transfer Objects), value objects in domain-driven design, tuples, and more. Records are serializable by default, provided that all their components are serializable.</p><p>A record declaration does not have an extends clause, so it is not possible to explicitly declare a direct superclass type, even Record. However, a record can implement interfaces, so you can use them polymorphically.<br/></p><p></p></div>
<div class=""card p-4 mb-3""><h3 id=""2-what-are-sealed-classes-in-java-17-"">2. What are Sealed Classes in Java 17?</h3>
<p>Sealed classes are a new language feature introduced in Java 17 as part of JEP 409. They provide a way to restrict the subclasses that can extend a class or implement an interface. This feature is useful to create more robust and maintainable code and to define a closed hierarchy of types. </p>
<p>Sealed Classes allow you to specify a limited set of subclasses that can extend a given class or implement an interface.</p>
<p>This is how we can declare a sealed class in Java</p>
<pre><code class=""prettyprint lang-java"">public sealed abstract class Vehicle permits Car, Truck, Motorcycle {
    private final String make;
    private final String model;

    public Vehicle(String make, String model) {
        this.make = make;
        this.model = model;
    }
    
    public abstract void displayVehicleInfo();
}

public final class Car extends Vehicle {
    private final int seatingCapacity;

    public Car(String make, String model, int seatingCapacity) {
        super(make, model);
        this.seatingCapacity = seatingCapacity;
    }

    @Override
    public void displayVehicleInfo() {
        System.out.println(""Car: "" + getMake() + "" "" + getModel() + "", Seating Capacity: "" + seatingCapacity);
    }
}
</code></pre>
<p>The <code>permits</code> clause is used to specify the allowed subclasses for type <code>Shape</code>.</p>
<p>Since the compiler knows all the possible subtypes of a sealed class, it will prevent any other class except <code>Circle</code>, <code>Square</code> or <code>Rectangle</code> to extend the <code>Shape</code> class.</p></div>
<div class=""card p-4 mb-3""><h3 id=""3-how-does-the-pattern-matching-for-instanceof-work-in-java-17-"">3. How does the pattern matching for <strong>instanceof</strong> work in Java 17?</h3>
<p>Pattern Matching for <code>instanceof</code> in Java 17 enhances the <code>instanceof</code> operator and eliminates the need of type casting and checking. </p>
<p><strong>Traditional approach</strong></p>
<pre><code class=""prettyprint lang-java"">if (obj instanceof Car) {
    Car str = (Car) obj;
    // Use car object here 
}
</code></pre>
<p><strong>With pattern matching for instanceof</strong></p>
<pre><code class=""lang-java"">if (obj instanceof Car car) {
    // Use car object here 
}
</code></pre>
<p>As you can notice, it makes the code more concise but also enhances readability and reduces the possibility of errors, such as incorrect casting.</p></div>
<div class=""card p-4 mb-3""><h3 id=""4-how-does-the-pattern-matching-for-the-switch-work-"">4. How does the Pattern matching for the switch work?</h3>
<p>Pattern Matching for switch is introduced as a preview feature in Java 17. This feature extends the switch expression and switch statement to allow pattern matching in case labels. Pattern Matching for switch aims to make code more readable and safe, especially when dealing with type testing and casting.</p>
<p>Please note, the Pattern Matching for switch is still in preview and not yet a finalized.</p>
<pre><code class=""prettyprint lang-java"">switch (obj) {
    case String s -&gt; System.out.println(""It's a string: "" + s);
    case Integer i -&gt; System.out.println(""It's an integer: "" + i);
    case null -&gt; System.out.println(""It's null"");
    default -&gt; System.out.println(""It's something else"");
}
</code></pre></div>",0,"naked","post"
"How to Validate the @PathVariable in Spring Boot?","how-to-validate-the-pathvariable-in-spring-boot","This article explains different options available to Validate the @PathVariable in Spring Boot such as using Spring Boot annotations, regular expression, and custom validator.","LIVE","<p>The <code>@PathVariable</code> in spring is used to handle the template variables in the request URI mapping and extract them into method parameter.</p>
<p>For example, in the following controller the <code>vehicleId</code> is a path variable mapped directly to the the <code>updateModel()</code> controller method.</p>
<pre><code class=""lang-java"">@PostMapping(""/vehicles/{vehicleId}"")
public ResponseEntity updateModel(@PathVariable String vehicleId, 
				@Valid @RequestBody VehicleDto vehicle) throws Exception {
    // Your implementation goes here
}
</code></pre>
<p>Validation can range from simple checks like ensuring the vehicleId is not null or empty, to more complex validations like checking if it adheres to a specific format or verifying against the database. To validate the <code>@PathVariable</code> in a Spring Boot application, we have several options:</p>
<p>Here are some common approaches:</p>
<h3 id=""basic-non-null-or-non-empty-validation-"">Basic Non-Null or Non-Empty Validation</h3>
<p>We can use the <code>@NotNull</code> or <code>@NotEmpty</code> annotations to ensure that the <code>vehicleId</code> is not null or empty.</p>
<pre><code class=""lang-java"">@PostMapping(""/vehicles/{vehicleId}"")
public ResponseEntity updateModel(@PathVariable @NotEmpty String vehicleId, 
			@Valid @RequestBody VehicleDto vehicle) throws Exception {
    // Your implementation goes here
}
</code></pre>
<h3 id=""custom-validation-with-regular-expressions"">Custom Validation with Regular Expressions</h3>
<p>To validate a specific pattern like a specific length or containing only numbers, you can use the <code>@Pattern</code> annotation from the <code>javax.validation.constraints</code> package and use the regular expressions. </p>
<pre><code class=""lang-java"">@PostMapping(""/vehicles/{vehicleId}"")
public ResponseEntity updateModel(@PathVariable @Pattern(regexp = ""\d{4,6}"") String vehicleId, 
		@Valid @RequestBody VehicleDto vehicle) throws Exception {
    // Your implementation goes here
}
</code></pre>
<p>The regular expressions <code>\d{4,6}</code> allows only numbers between 4 and 6 characters length. </p>
<h3 id=""using-custom-validator"">Using Custom Validator</h3>
<p>We can use the custom validator if we have more complex validations such as checking against a database. For this we can implement the <code>ConstraintValidator</code> interface and inside the <code>isValid</code> method it should return either true or false based on the business logic.</p>
<pre><code class=""lang-java"">@Target({ ElementType.PARAMETER })
@Retention(RetentionPolicy.RUNTIME)
@Constraint(validatedBy = VehicleIdValidator.class)
public @interface ValidVehicleId {

    String message() default ""Invalid vehicheId"";
    Class&lt;?&gt;[] groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};
}


public class VehicleIdValidator implements ConstraintValidator&lt;ValidVehicleId, String&gt; {
    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        // validation logic goes here
        return true;
    }
}
</code></pre>
<p>Now here is how we can use the our custom validator in the controller mapping.</p>
<pre><code class=""lang-java"">@PostMapping(""/vehicles/{vehicleId}"")
public ResponseEntity updateModel(@PathVariable @ValidVehicleId String vehicleId, 
		@Valid @RequestBody VehicleDto vehicle) throws Exception {
    // Your implementation goes here
}
</code></pre>
<h3 id=""manual-validation-inside-the-method"">Manual Validation Inside the Method</h3>
<p>It is recommended to use one of the above method for validating the <code>@PathVariable</code>. But otherwise we can also validate manually inside the method implementation and throw custom exceptions if the validation fails..</p>
<pre><code class=""lang-java"">@PostMapping(""/vehicles/{vehicleId}"")
public ResponseEntity updateModel(
		@PathVariable @ValidVehicleId String vehicleId, 
		@Valid @RequestBody VehicleDto vehicle) throws Exception {
    if (vehicleId == null || vehicleId.isEmpty()) {
        throw new MyCustomValiationException(""Vehicle id is invalid"")
    }

    // Your implementation goes here
}

</code></pre>",0,"standard","post"
"Testing Spring Boot REST API using Mockito and MockMvc","testing-spring-boot-rest-api-using-mockito-and-mockmvc","Testing Spring Boot REST API using Mockito and MockMvc","DRAFT","<p>The best way to confirm the reliability and correctness of software applications is to write tests that assert the desired behavior of an application. This post covers how to perform unit and integration testing in Spring Boot.</p>
<p>The <code>spring-boot-starter-test</code> dependency is required for writing the unit and integration tests in Spring Boot application. The Spring Boot 3.2.2 <code>spring-boot-starter-test</code> includes the following transitive dependencies. </p>
<ul>
<li><strong>Jupiter JUnit5</strong>: The de facto standard for unit testing Java. </li>
<li><strong>Jayway JsonPath:</strong> A popular Java library used for parsing and querying JSON documents. It is used for navigating through the structure of your JSON data and access specific values or elements.</li>
<li><strong>Awaitility:</strong> Used for waiting for asynchronous operations to complete without introducing additional logic in your code.</li>
<li><strong>Hamcrest:</strong> Hamcrest is used for writing expressive and readable assertions in unit tests. It provides a clear and concise way to express what you expect from your code, making your tests easier to understand and maintain.</li>
<li><strong>Mockito:</strong>  Java mocking framework used to create mock objects that simulate the behavior of real objects without actually implementing their functionality. This makes it easier to isolate the code you're testing from external dependencies and write more focused and reliable tests.</li>
</ul>
<p>Let’s start by creating a test for a Spring application. You can create a Spring boot project either using Spring CLI or using Spring Initializr.</p>
<blockquote>
<p>[!IMPORTANT]<br/>
Crucial information necessary for users to succeed.</p>
</blockquote>
<p>When we create a new Spring boot project the <code>spring-boot-starter-test</code> dependencies is added by default. If you don't have it already, you can add this manually in your <code>pom.xml</code> or <code>build.gradle</code> file.</p>
<p>For maven, add the following to the <code>&lt;dependencies&gt;</code> section in your <code>pom.xml</code> file</p>
<pre class=""prettyprint lang-xml"">
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;

</pre>
<p>The <code>test</code> scope defines that the <code>spring-boot-starter-test</code> dependency is required during the test compilation and execution phases.</p>
<p>For gradle, </p>
<pre class=""prettyprint lang-groovy"">
testImplementation 'org.springframework.boot:spring-boot-starter-test'

</pre>
<p>The Spring Initializr also includes a default test class in the root directory of the test package. </p>
<pre class=""prettyprint lang-java"">
import org.junit.jupiter.api.Test;  
import org.springframework.boot.test.context.SpringBootTest;  

@SpringBootTest  
class MoviesApplicationTests {  

    @Test  
    void contextLoads() {  

    }  
}

</pre>
<p>The <code>@SpringBootTest</code> annotation tells Spring Boot to look for a main configuration class (one with <code>@SpringBootApplication</code>, for instance) and use that to start the Spring application context. </p>
<p>The <code>@Test</code>  annotation a JUnit annotation that will execute the method when the tests starts. A test class can contain one or more test methods. When there are multiple test methods, the order of execution is not fixed. If you want to fix the execution order you can do that using the method name, display name, using order annotation. Checkout this tutorials that explains <a href=""https://stacktips.com/articles/the-order-of-tests-in-junit5"">how to order test methods</a>. </p>
<p>You can run this test in your IDE or on the command line using following Maven or Gradle commands.</p>
<pre class=""prettyprint lang-shell"">
./mvnw test

</pre>
<p>or </p>
<pre class=""prettyprint lang-shell"">
./gradlew test

</pre>
<h2>Simple Test</h2>
<p>Now that we have the required test dependency in our project and we have learnt how to execute the test, let us now test the following controller.</p>
<pre class=""prettyprint lang-java"">
import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.bind.annotation.RestController;  

@RestController  
public class GreetingController {  

    @RequestMapping(""/"")  
    public String greeting() {  
        return ""Hello, Spring Boot!"";  
    }  
}

</pre>
<p>Let us now verify if the Spring context is creating the instance of <code>GreetingsController</code> with an assertion. </p>
<pre class=""prettyprint lang-java"">
import com.stacktips.movies.api.GreetingsController;  
import org.junit.jupiter.api.Test;  
import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.boot.test.context.SpringBootTest;  

import static org.hamcrest.MatcherAssert.assertThat;  
import static org.hamcrest.Matchers.is;  
import static org.hamcrest.Matchers.notNullValue;  

@SpringBootTest  
class MoviesApplicationTests {  

    @Autowired  
    private GreetingController controller;  

    @Test  
    void contextLoads() {  
        assertThat(controller, is(notNullValue()));  
    }  

}

</pre>
<p>The <code>@Autowired</code> injects the controller instance before the test methods are run. We have hamcrest which provides <code>assertThat()</code> method to assert the not null value.</p>
<blockquote>
<p>[!TIP] 
The Spring Test support caches the application context between tests, so that if you have multiple methods in a test case or multiple test cases with the same configuration, they incur the cost of starting the application only once. You can control the cache by using the <code>@DirtiesContext</code> annotation.</p>
</blockquote>
<h2>Testing the REST API</h2>
<p>Let us now write some tests to assert the behavior of your application.  For that we will start the application and and listen for a connection (as it would do in production) and then send an HTTP request and assert the response.</p>
<pre class=""prettyprint lang-java"">
import org.junit.jupiter.api.Test;  
import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.boot.test.context.SpringBootTest;  
import org.springframework.boot.test.web.client.TestRestTemplate;  
import org.springframework.boot.test.web.server.LocalServerPort;  

import static org.hamcrest.MatcherAssert.assertThat;  
import static org.hamcrest.Matchers.is;  
import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment;  

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)  
class GreetingsControllerTest {  

    @LocalServerPort  
    private int port;  

    @Autowired  
    private TestRestTemplate restTemplate;  

    @Test  
    void greetingShouldReturnDefaultMessage() throws Exception {  
        String result = restTemplate
            .getForObject(""http://localhost:"" + port + ""/"",  String.class);  
        assertThat(result, is(""Hello, Spring Boot!""));  
    }  

}

</pre>
<p>The <code>webEnvironment=RANDOM_PORT</code> to start the server with a random port. This is very useful to avoid conflicts in test environments and the injection of the port with <code>@LocalServerPort</code>. </p>
<p>Spring boot test also provides a <code>TestRestTemplate</code> for to make http calls from your test. </p>
<h2>Using MockMvc</h2>
<p>In the above approach we have started the server but if we want to tests to only the web layer by without starting a server we can do that using <code>@WebMvcTest</code>. For that,  we will inject an instance of <code>MockMvc</code>. For MockMvc to work we need to need to use the <code>@AutoConfigureMockMvc</code> annotation on our test class. </p>
<p>If we have multiple controllers, we can instantiate specific ones by using the<code>@WebMvcTest(HomeController.class)</code> annotation on the class.</p>
<pre class=""prettyprint lang-java"">
import org.junit.jupiter.api.Test;  
import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;  
import org.springframework.test.web.servlet.MockMvc;  

import static org.hamcrest.Matchers.containsString;  
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;  
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;  
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;  
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;  

@WebMvcTest(GreetingController.class)  
class GreetingControllerTest {  

    @Autowired  
    MockMvc mockMvc;  

    @Test  
    void greetingShouldReturnDefaultMessage() throws Exception {  
        this.mockMvc.perform(get(""/""))  
                .andDo(print())  
                .andExpect(status().isOk())  
                .andExpect(content().string(containsString(""Hello, Spring Boot!"")));  
    }  

}

</pre>
<p>The test assertion is the same as in the previous case. However, in this test, Spring Boot instantiates only the web layer rather than using the whole spring context.  </p>
<h2>Mocking Services</h2>
<p>So far, our <code>HomeController</code> is simple and has no dependencies. But we will often have additional services to isolate the business logic into separate classes. For example.</p>
<p><strong>MovieService</strong></p>
<pre class=""prettyprint lang-java"">
import org.springframework.stereotype.Service;  

import java.util.List;  

@Service  
public class MovieService {  

    public List&lt;String&gt; getMovies() {  
        return List.of(""The Incredibles"", ""Father of the Bride"", ""The Parent Trap"");  
    }  
}

</pre>
<p>And, lets say our MovieController has <code>/movies</code> GET endpoint.</p>
<pre class=""prettyprint lang-java"">
import com.stacktips.movies.service.MovieService;  
import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.bind.annotation.RestController;  

import java.util.List;  

@RestController  
public class MovieController {  

    private final MovieService movieService;  

    public MovieController(MovieService movieService) {  
        this.movieService = movieService;  
    }  

    @RequestMapping(""/movies"")  
    public List&lt;String&gt; getMovies() {  
        return movieService.getMovies();  
    }  
}

</pre>
<p>In the above code snippet, Spring automatically injects the <code>MovieService</code> dependency into the controller as we have only one constructor defined.  If you run the spring boot application and test <code>/movies</code> endpoint, it will return the list of movies.</p>
<pre class=""prettyprint lang-shell"">
nilan &gt; curl http://localhost:8080/movies
[""The Incredibles"",""Father of the Bride"",""The Parent Trap""]

</pre>
<p>Let us now create a test for the <code>MoviesController</code>  and mock the service instance. To mock the Spring bean the <code>@MockBean</code> annotation is used.</p>
<pre class=""prettyprint lang-java"">
import com.stacktips.movies.service.MovieService;  
import org.junit.jupiter.api.Test;  
import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;  
import org.springframework.boot.test.mock.mockito.MockBean;  
import org.springframework.test.web.servlet.MockMvc;  

import java.util.List;  

import static org.hamcrest.CoreMatchers.is;  
import static org.mockito.Mockito.when;  
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;  
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;  
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;  
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;  

@WebMvcTest(MovieController.class)  
class MovieControllerTest {  

    @Autowired  
    private MockMvc mockMvc;  

    @MockBean  
    private MovieService movieService;  

    @Test  
    void greetingShouldReturnMockResponse() throws Exception {  
        List&lt;String&gt; moviesMock = List.of(""Sprider Man"", ""X-Man"", ""Iron Man"");  
        when(movieService.getMovies()).thenReturn(moviesMock); 

        this.mockMvc.perform(get(""/movies""))  
                .andDo(print())  
                .andExpect(status().isOk())  
                .andExpect(jsonPath(""$[0]"", is(""Sprider Man"")))  
                .andExpect(jsonPath(""$[1]"", is(""X-Man"")))  
                .andExpect(jsonPath(""$[2]"", is(""Iron Man"")));  
    }  

}

</pre>
<p>The <code>mockMvc.perform</code> method makes the GET request to the <code>/movies</code> endpoint. But this time, instead of getting the results from the service, it returns the mocked response using <code>Mockito</code>.</p>
<p>We are also using the Json path to assert the Json response. </p>",0,"standard","post"
"Handling XML Request and Response in Spring Boot REST","handling-xml-request-and-response-in-spring-boot-rest","This article explains how to handle XML Request and Response in Spring Boot REST APIs using jackson-dataformat-xml.","LIVE","<p>Spring boot <code>@RestController</code> is designed for automatic serialization and deserialization of Java objects to and from JSON. It uses Jackson library internally and we don't need to manually do anything for convert java objects to JSON while sending response back to to users.</p>
<p>In the course of this post, we will create a MoviesController and expose set of RESTful API endpoints to perform database CRUD operations; </p><ul><li>It has get 3 controller methods; two GET endpoints that returns the movies data </li><li>A POST endpoint that ads a new movie into the database </li><li>By default, the controller class will accept the JSON request and produces the JSON response. </li></ul>
<pre class=""prettyprint lang-java"">@RestController
@RequestMapping(value = ""/api/1.0/movies"")
public class MoviesController {

    private final MovieService movieService;

    public MoviesController(MovieService movieService) {
        this.movieService = movieService;
    }

    @GetMapping
    public ResponseEntity&lt;List&lt;Movie&gt;&gt; getMovies() {
        return ResponseEntity.ok(movieService.getMovies());
    }

    @PostMapping
    public Movie createMovie(@RequestBody MovieDto movieDto) {
        return movieService.createMovie(movieDto);
    }

    @GetMapping(path = ""/{movieId}"")
    public Movie getMovie(@PathVariable String movieId) {
        return movieService.getMovie(movieId);
    }
}
</pre>
<p>Let us now change the <code>MovieController</code> to accept XML content type in the request body and produce the XML response. </p>
<h3>Jackson XML Dependency</h3>
<p>First, we need to add  <a href=""https://github.com/FasterXML/jackson-dataformat-xml/wiki/Jackson-XML-annotations#jacksonxmlelementwrapper"">Jackson XML</a> dependency for reading and writing XML data.</p>
<p>For Gradle project, add the following dependency to your <code>build.gradle</code> file:</p>
<pre class=""prettyprint lang-groovy"">implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
</pre>
<p>For maven based project, you can add the following to your <code>pom.xml</code> file.</p>
<pre class=""prettyprint lang-xml"">&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-dataformat-xml&lt;/artifactId&gt;
&lt;/dependency&gt;
</pre>
<p>And we need to annotate our controller mapping to match the <code>application/xml</code> media type. This is done using the <code>Content-Type</code> and <code>Accept</code> media type to our controller mapping.</p>
<p>This can be done by defining the appropriate MediaType using <code>produces</code> and <code>consumes</code> property of <code>RequestMapping</code> annotation.  </p>
<pre class=""prettyprint lang-java"">@RestController  
@RequestMapping(value = ""/api/1.0/movies"",  
        consumes = {MediaType.APPLICATION_XML_VALUE},  # Content-Type
        produces = {MediaType.APPLICATION_JSON_VALUE}  # Accept
)  
public class MoviesController {  

    private final MovieService movieService;  

    public MoviesController(MovieService movieService) {  
        this.movieService = movieService;  
    }  

    @GetMapping
    public ResponseEntity&lt;List&lt;Movie&gt;&gt; getMovies() {  
        return ResponseEntity.ok(movieService.getMovies());  
    }  

    @PostMapping
    public Movie createMovie(@RequestBody MovieDto movieDto) {  
        return movieService.createMovie(movieDto);  
    }  

    @GetMapping(path = ""/{movieId}"")  
    public Movie getMovie(@PathVariable String movieId) {  
        return movieService.getMovie(movieId);  
    }  

}
</pre>
<p>In the above code snippet, we have set the <code>MediaType</code> configuration to the controller level, which means all controller methods will now consume and produce XML output. </p>
<p>But, we can also do the same to individual <code>@GetMapping</code>, <code>@PostMapping</code> methods. </p>
<p>That is all, now our controller will handle the XML request and produce <code>application/xml</code> media type. Let us test our <code>/movies</code> endpoint</p>
<pre class=""prettyprint lang-shell"">curl --location 'http://localhost:8080/api/1.0/movies' \
    --header 'Content-type: application/xml' \
    --header 'Accept: application/xml'
</pre>
<p>Now it will produce XML output</p>
<pre class=""prettyprint lang-xml"">&lt;List&gt;
    &lt;item&gt;
        &lt;id&gt;65c4092af4ba290f3c55cd06&lt;/id&gt;
        &lt;title&gt;Iron Man &amp;amp; Captain America: Heroes United&lt;/title&gt;
        &lt;headline&gt;Iron Man (Adrian Pasdar) and Captain America (Roger Craig Smith) must prevent Red Skull (Liam O'Brien) and Taskmaster (Clancy Brown) from destroying the world.&lt;/headline&gt;
        &lt;language&gt;EN&lt;/language&gt;
        &lt;region&gt;USA&lt;/region&gt;
        &lt;actors&gt;
            &lt;actors&gt;David Kaye&lt;/actors&gt;
            &lt;actors&gt;Ian McKellen&lt;/actors&gt;
            &lt;actors&gt;Adrian Pasdar&lt;/actors&gt;
        &lt;/actors&gt;
        &lt;genres&gt;
            &lt;genres&gt;Action&lt;/genres&gt;
            &lt;genres&gt;Adventure&lt;/genres&gt;
            &lt;genres&gt;Sci-fi&lt;/genres&gt;
        &lt;/genres&gt;
    &lt;/item&gt;
    &lt;item&gt;
        &lt;id&gt;65c4092af4ba290f3c55cd07&lt;/id&gt;
        &lt;title&gt;Iron Man &amp;amp; Captain America: Heroes United&lt;/title&gt;
        &lt;headline&gt;Iron Man (Adrian Pasdar) and Captain America (Roger Craig Smith) must prevent Red Skull (Liam O'Brien) and Taskmaster (Clancy Brown) from destroying the world.&lt;/headline&gt;
        &lt;language&gt;EN&lt;/language&gt;
        &lt;region&gt;USA&lt;/region&gt;
        &lt;actors&gt;
            &lt;actors&gt;David Kaye&lt;/actors&gt;
            &lt;actors&gt;Ian McKellen&lt;/actors&gt;
            &lt;actors&gt;Adrian Pasdar&lt;/actors&gt;
        &lt;/actors&gt;
        &lt;genres&gt;
            &lt;genres&gt;Action&lt;/genres&gt;
            &lt;genres&gt;Adventure&lt;/genres&gt;
            &lt;genres&gt;Sci-fi&lt;/genres&gt;
        &lt;/genres&gt;
    &lt;/item&gt;
&lt;/List&gt;
</pre>
<h3>Configure Default Content Negotiation</h3>
<p>The above method works fine but the configuration is now at controller level. The default media type is still remains JSON for all other controllers. </p>
<p>We can override this by setting the default content negotiation for all controllers thought the project by implementing <code>WebMvcConfigurer</code> configuration. </p>
<pre class=""prettyprint lang-java"">@Configuration  
public class AppConfig implements WebMvcConfigurer {  

    @Override  
    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) { 
        configurer.defaultContentType(MediaType.APPLICATION_XML);  
    }  
}
</pre>
<h3>Wrapping XML Response</h3>
<p>Notice the above XML response, the result is wrapped inside <code>&lt;List&gt;&lt;item&gt;&lt;item&gt;&lt;/List&gt;</code> tag. This is not very pretty. </p>
<p>We can make the following changes to wrap response <code>&lt;movies&gt;&lt;movie&gt;&lt;/movie&gt;&lt;/movies&gt;</code> tag. </p><ul><li>Create a wrapper class for Movies. </li><li>The <code>@JacksonXmlRootElement</code> annotation can be used to define name of root element used for the root-level object when serialized, which normally uses name of the type (class). </li><li>The <code>@JacksonXmlElementWrapper</code> annotation is used to specifying XML element to use for wrapping <code>List</code> and <code>Map</code> properties.</li><li> From the controller, instead of returning <code>ResponseEntity&lt;List&lt;Movie&gt;&gt;</code> we will return the <code>ResponseEntity&lt;Movies&gt;&gt;</code> type. </li></ul>
<pre class=""prettyprint lang-java"">@Getter
@Setter
@RequiredArgsConstructor
@JacksonXmlRootElement(localName = ""movies"")
public class Movies {

    @JacksonXmlProperty(localName = ""movie"")
    @JacksonXmlElementWrapper(useWrapping = false)
    private final List&lt;Movie&gt; moviesList;

}

@Getter
@Setter
@JacksonXmlRootElement(localName = ""Movie"")
public class Movie {
    private String id;
    private String title;
    private String headline;
    private String language;
    private String region;
    private List&lt;String&gt; actors;
    private List&lt;String&gt; genres;
}
</pre>
<p>And, update the controller to return <code>ResponseEntity&lt;Movies&gt;&gt;</code> type. </p>
<pre class=""prettyprint lang-java"">@GetMapping  
public ResponseEntity&lt;Movies&gt; getMovies() {  
    Movies movies = new Movies(movieService.getMovies());  
    return ResponseEntity.ok(movies);  
}
</pre>
<p>Now this will produce, </p>
<pre class=""prettyprint lang-xml"">&lt;movies&gt;
    &lt;movie&gt;
        &lt;id&gt;65c4092af4ba290f3c55cd06&lt;/id&gt;
        &lt;title&gt;Iron Man &amp;amp; Captain America: Heroes United&lt;/title&gt;
        &lt;headline&gt;Iron Man (Adrian Pasdar) and Captain America (Roger Craig Smith) must prevent Red Skull (Liam O'Brien) and Taskmaster (Clancy Brown) from destroying the world.&lt;/headline&gt;
        &lt;language&gt;EN&lt;/language&gt;
        &lt;region&gt;USA&lt;/region&gt;
        &lt;actors&gt;
            &lt;actors&gt;David Kaye&lt;/actors&gt;
            &lt;actors&gt;Ian McKellen&lt;/actors&gt;
            &lt;actors&gt;Adrian Pasdar&lt;/actors&gt;
        &lt;/actors&gt;
        &lt;genres&gt;
            &lt;genres&gt;Action&lt;/genres&gt;
            &lt;genres&gt;Adventure&lt;/genres&gt;
            &lt;genres&gt;Sci-fi&lt;/genres&gt;
        &lt;/genres&gt;
    &lt;/movie&gt;
    &lt;movie&gt;
        &lt;id&gt;65c4092af4ba290f3c55cd07&lt;/id&gt;
        &lt;title&gt;Iron Man &amp;amp; Captain America: Heroes United&lt;/title&gt;
        &lt;headline&gt;Iron Man (Adrian Pasdar) and Captain America (Roger Craig Smith) must prevent Red Skull (Liam O'Brien) and Taskmaster (Clancy Brown) from destroying the world.&lt;/headline&gt;
        &lt;language&gt;EN&lt;/language&gt;
        &lt;region&gt;USA&lt;/region&gt;
        &lt;actors&gt;
            &lt;actors&gt;David Kaye&lt;/actors&gt;
            &lt;actors&gt;Ian McKellen&lt;/actors&gt;
            &lt;actors&gt;Adrian Pasdar&lt;/actors&gt;
        &lt;/actors&gt;
        &lt;genres&gt;
            &lt;genres&gt;Action&lt;/genres&gt;
            &lt;genres&gt;Adventure&lt;/genres&gt;
            &lt;genres&gt;Sci-fi&lt;/genres&gt;
        &lt;/genres&gt;
    &lt;/movie&gt;
&lt;/movies&gt;
</pre>",0,"standard","post"
"Task Execution and Scheduling in Spring Boot","task-execution-and-scheduling-in-spring-boot","Article covers everything you need to know about Spring Scheduler – including the annotations, examples, and other things to consider.","LIVE","<p class=""""><span>Spring Scheduler is used for running repetitive tasks or to automate tasks that need to run at specific times or at specific intervals. For example such as sending our email newsletters to your customers, generating daily reports, or updating a database.</span><br/></p>
<p>In this crash course, we will cover everything you need to know about Spring Scheduler – including the annotations, examples, and other things to consider.</p>
<h2>Enable Scheduling</h2>
<p>To enable Spring's scheduled task execution capability, just annotate any of your <code>@Configuration</code> classes with <code>@EnableScheduling</code> annotation.</p>
<p><strong>Example:</strong></p>
<pre class=""prettyprint lang-java"">@Configuration
@EnableScheduling
public class SchedulerConfig {
    // Here it goes your configuration
}
</pre>
<h3>Cron expression</h3>
<p>A Cron expression consists of six sequential fields and is declared as <code>second, minute, hour, day of month, month, day(s) of week</code>.</p>
<pre class=""prettyprint lang-"">┌───────────── second (0-59)
│ ┌───────────── minute (0 - 59)
│ │ ┌───────────── hour (0 - 23)
│ │ │ ┌───────────── day of the month (1 - 31)
│ │ │ │ ┌───────────── month (1 - 12) (or JAN-DEC)
│ │ │ │ │ ┌───────────── day of the week (0 - 7)
│ │ │ │ │ │              (0 or 7 is Sunday or MON-SUN)
│ │ │ │ │ │
* * * * * *
</pre>
<p>Ref: <a href=""https://crontab.guru/"">https://crontab.guru/</a></p>
<p>And is declared as follows:</p>
<pre class=""prettyprint lang-java"">@Slf4j
@Component
public class MyScheduler {

    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(""HH:mm:ss"");

    @Scheduled(cron = ""*/5 * * * * *"")
    public void currentTime() {
        log.info(""Current Time = {}"", dateFormat.format(new Date()));
    }

}
</pre>
<p>We can also set the timezone as: <a href=""https://docs.oracle.com/cd/B13866_04/webconf.904/b10877/timezone.htm"">https://docs.oracle.com/cd/B13866_04/webconf.904/b10877/timezone.htm</a></p>
<pre class=""prettyprint lang-java"">@Scheduled(cron=""* * * * * *"", zone=""Europe/London"")
</pre>
<h3>Fixed delay</h3>
<p>The <code>fixedDelay</code> property makes sure that there is a delay of n millisecond between the finish time of an execution of a task and the start time of the next execution of the task.</p>
<pre class=""prettyprint lang-java"">@Component
public class MyScheduler {

    @Scheduled(fixedDelay=5000) 
    public void doSomething() {
       //This will execute periodically, after the one before finishes
    } 

}
</pre>
<p>By default, milliseconds will be used as the time unit for fixed delay, fixed rate, and initial delay values. If you would like to use a different time unit such as seconds or minutes, you can configure this via the <code>timeUnit</code> attribute in <code>@Scheduled</code>.</p>
<p>For example, the previous example can also be written as follows.</p>
<pre class=""prettyprint lang-java"">@Component
public class MyScheduler {

    @Scheduled(fixedDelay=5, timeUnit = TimeUnit.SECONDS) 
    public void doSomething() {
       //This will execute periodically, after the one before finishes
    } 

}
</pre>
<h3>Fixed Rate</h3>
<p>The <code>fixedRate</code> is used when we want to execute a task periodically at every n millisecond without checking for any previous executions of the task.</p>
<pre class=""prettyprint lang-java"">@Component
public class MyScheduler {

    @Scheduled(fixedRate=5000)
    public void doSomething() {
       //This will execute periodically
    } 
}
</pre>
<p>For both <code>fixedDelay</code> and <code>fixedRate</code> tasks, you can specify an <code>intialDelay</code> by indicating the amount of time to wait before the first execution of the method.</p>
<pre class=""prettyprint lang-java"">@Component
public class MyScheduler {

    @Scheduled(initailDelay=1000, fixedRate=5000)
    public void doSomething() {
      //This will execute periodically
    } 
}
</pre>
<h3>Schedule Tasks and Concurrency</h3>
<p>Spring Boot uses a <code>ThreadPoolTaskScheduler</code> to execute scheduled tasks. By default, this thread pool has a single thread. This means that only one scheduled task can be executed at a time.</p>
<p>If you need to execute multiple tasks concurrently, then you need to configure the <code>ThreadPoolTaskScheduler</code> to have the required thread pool size.</p>
<pre class=""prettyprint lang-java"">@Bean
public ThreadPoolTaskScheduler threadPoolTaskScheduler() {
    ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler();
    threadPoolTaskScheduler.setPoolSize(5);
    return threadPoolTaskScheduler;
}
</pre>
<p>Also, we need to use the <code>@Async</code> annotation to mark the scheduled task as asynchronous. This will make Spring Boot execute the tasks in separate threads.</p>
<pre class=""prettyprint lang-java"">@Async
    @Scheduled(fixedDelay = 1000)
    public void startUsingFixedDelay() {
        log.info(""startUsingFixedDelay:: Task started at {}"", DATE_FORMAT.format(new Date()));
    }
</pre>
<h3>Aggregate Scheduled annotations</h3>
<p>The <code>@Schedules</code> annotation is a container annotation that aggregates several Scheduled annotations.</p>
<pre class=""prettyprint lang-java"">@Schedules({
   @Scheduled(fixedRate = 10000),
   @Scheduled(cron = ""0 * * * * MON-FRI"")
})
public void doSomething() {
    //This will execute periodically
}
</pre>
<p>Prior to Java 8, a wrapper/container annotation was required to use multiple instances of the same annotation. But Java 8 supports repeatable annotations so wrapper annotation is no longer necessary. Multiple annotations can be used without a wrapper.</p>
<pre class=""prettyprint lang-java"">@Scheduled(fixedRate = 10000)
@Scheduled(cron = ""0 * * * * MON-FRI"")
public void doSomethingElse4() {
    //This will execute periodically
}
</pre>
<p>This rule is automatically disabled when the project’s sonar.java.source is lower than 8 as repeating annotations were introduced in Java 8.</p>
<h2>Testing the Scheduler using Awaitility</h2>
<p>Testing the scheduler can be a little tricky. We can test this by manually waiting for <code>x</code> number of minutes using <code>Thread.sleep()</code> , but for complex scenarios, this will be hard to scale.</p>
<p>This is where we can use a framework like <strong>Awaitility</strong> to wait for a certain condition to be met while running your test. In this case, we want to wait for <code>1000</code> milliseconds before we assess the test results.</p>
<p>Let's first add the <code>awaitility</code> test dependency on your <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-groovy"">testImplementation 'org.awaitility:awaitility:3.1.2'
</pre>
<p>Now,</p>
<pre class=""prettyprint lang-java"">@SpringJUnitConfig(SchedulerConfig.class)
class MySchedulerTest {

    @SpyBean
    MyScheduler scheduler;

    @Test
    void givenSleepBy1000ms_whenStartTask1() {

        Awaitility.await()
                .atMost(1000, TimeUnit.MILLISECONDS)
                .untilAsserted(() -&gt; {
                    verify(scheduler, atLeast(1)).startUsingFixedDelay();
                });
    }

}
</pre>
<h2>Task Monitoring:</h2>
<p>Spring boot actuators provides the <code>/scheduledtasks</code> endpoint to monitor the list of tasks scheduled and their configurations. To enable this we need to add the actuator starter dependencies. </p>
<pre class=""prettyprint lang-groovy"">implementation 'org.springframework.boot:spring-boot-starter-actuator'
</pre>
<p>Once Actuator dependencies is added, we need to explicitly include the <code>scheduledtasks</code> endpoint by using the following property</p>
<pre class=""prettyprint lang-groovy"">management.endpoints.web.exposure.include=scheduledtasks
</pre>
<h2>Did you know?</h2>
<p><strong>What happens if a scheduled task throws an exception?</strong>
If any exception is encountered during the scheduled task execution and if it is not handled gracefully using a try-catch block then the Spring Logging Error Handler will handle the exception and log the error details. </p>
<p>The next instances of that task will continue to execute as per the schedule. </p>
<p><strong>What happens if a scheduled task takes longer than its scheduled interval?</strong>
In the case of a fixed rate, if a scheduled task takes longer than its scheduled interval, the Spring Scheduler will start the next execution of the task immediately after the previous one is completed. </p>
<p>This can cause tasks to overlap, which may impact performance.</p>
<h2>Limitations of Spring Scheduler</h2>
<ul>
<li><strong>No support for dynamic Scheduling</strong>: The <code>@Scheduled</code> annotations are typically configured at application startup and do not support runtime changes without redeploying the application.</li>
<li><strong>No support for Job Persistence</strong>: It does not offer built-in support for Job persistence, as a result, job recovery in the event of an application restart is not possible.</li>
<li><strong>No clustering, load balancing</strong>: It does not support clustering and load balancing, The tasks are typically run on a single node.</li>
<li><strong>Limited control</strong>: It does not allow fine-grained control over managing the tasks. For example, we cannot pause, resume, and unscheduled jobs individually.</li>
</ul>
<p>Spring Scheduler is sufficient for many simple scheduling tasks, but if you have complex scheduling requirements, job management, and monitoring, then you would need another framework like Quartz.</p>",0,"standard","post"
"Validating @ConfigurationProperties in Spring Boot","validating-configurationproperties-in-spring-boot","Article explains how to validate @ConfigurationProperties in Spring Boot Application Startup","LIVE","<p>Did you know you can validate configuration properties at spring application startup with <code>@ConfigurationProperties</code> annotation? This can validate properties on application startup when used in conjunction with JSR-380 bean validation annotations such as <code>@Min</code>, <code>@NotNull</code>.</p>
<p>List of built in  <a href=""https://beanvalidation.org/2.0-jsr380/spec/#builtinconstraints"" target=""_blank"">validation constraints</a> in JSR 380</p>
<p>The <code>@Validated</code> annotation at the class level in conjunction with <code>@ConfigurationProperties</code> is used to enable validation.</p>
<pre class=""prettyprint lang-java"">@Getter
@Setter
@Component
@Validated
@ConfigurationProperties(prefix = ""importer.service"")
public class ImporterProperties {

    @NotNull
    private String filePath;

    @Min(3)
    private int threadPoolSize;
}
</pre>
<p><strong>application.properties</strong> </p>
<pre class=""prettyprint lang-properties"">importer.service.filePath=/nfs/files
importer.service.threadPoolSize=1
</pre>
<p>It will bind these properties to the <code>ImporterProperties</code> object and validate them at application startup, thus ensuring the application doesn't run with invalid configurations. </p>
<p>If the validation fails it will result in <code>BindException</code> as shown below:</p>
<pre class=""prettyprint lang-"">***************************
APPLICATION FAILED TO START
***************************

Description:

Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'importer.service' to com.stacktips.app.config.ImporterProperties failed:

    Property: importer.service.threadPoolSize
    Value: ""1""
    Origin: class path resource [application.properties] - 4:35
    Reason: must be greater than or equal to 3


Action:

Update your application's configuration
</pre>
<p>Please note, for this validation to work, we need to have a JSR-380 implementation like Hibernate Validator on your classpath and we need to explicitly enable the configuration properties validation.</p>
<pre class=""prettyprint lang-groovy"">implementation 'org.springframework.boot:spring-boot-starter-validation'
</pre>
<h3>Considerations for using Records</h3>
<p>Starting with Spring Boot 2.6 and Java 16 you can use record classes with <code>@ConfigurationProperties</code>. But there are few things you need to consider when using records. </p>
<pre class=""prettyprint lang-java"">@Validated  
@ConfigurationProperties(prefix = ""importer.service"")  
public record ImporterProperties(  
        @NotNull String filePath,  
        @Min(3) int threadPoolSize) {  
}
</pre>
<p>Notice that, you cannot use <code>@Componenet</code> annotation when using records. Your IDE will show <code>annotated with @ConstructorBinding but defined as Spring component</code> error. </p>
<p>To fix this, we need to remove the <code>@Component</code> annotation and <code>@EnableConfigurationProperties</code> or explicitly do the bean registration using the <code>@Bean</code> annotation in one of your <code>@Configuration</code> class. </p>
<p>For example:</p>
<pre class=""prettyprint lang-java"">@EnableConfigurationProperties(ImporterProperties.class)  
@SpringBootApplication  
public class MyApplication {  

    public static void main(String[] args) {  
       SpringApplication.run(MyApplication.class, args);  
    }  

}
</pre>",0,"standard","post"
"Working with Spring Boot Actuators","working-with-spring-boot-actuators","In this chapter, we will explore the Spring Boot Actuators. The Actuator offers production-ready features such as monitoring and metrics to Spring Boot applications.","LIVE","<p>The Spring Boot Actuator provides several endpoints in your application through which you can view the internals of your running application.</p>
<p>Through the Actuator, you can find out how beans are wired together in the Spring application context, determine what environment properties are available to your application, and get a snapshot of runtime metrics.</p>
<h3>Enable Spring Boot Actuators</h3>
<p>To enable the Actuator endpoints, you need include the <code>spring-boot-starter-actuator</code> starter dependency to your project. If you have Gradle based project, you can add the following dependency to your <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-groovy"">dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator
}
</pre>
<p>If you’re using maven, you can include the following dependency on your <code>pom.xml</code> file.</p>
<pre class=""prettyprint lang-xml"">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;
</pre>
<p>Once you have the dependency added to your application, Spring Boot’s auto-configuration will kick in when the application is running and Actuator will be enabled.</p>
<p>Run your application and visit http://localhost:8080/actuator/health</p>
<h3>Actuator Endpoints</h3>
<p>Spring Boot includes a number of built-in endpoints and lets you to add your own custom actuator endpoints.  </p>
<p>Here is the list of available endpoints in Spring Boot:</p>
<table>
<thead>
<tr>
<th>Endpoint path</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td>/actuator</td>
<td>Returns list of enabled actuator endpoints.</td>
</tr>
<tr>
<td>/actuator/health</td>
<td>Reports health metrics for the application, as provided by HealthIndicator implementations.</td>
</tr>
<tr>
<td>/actuator/info</td>
<td>Retrieves custom information about the application, as pro- vided by any properties prefixed with info.</td>
</tr>
<tr>
<td>/autoconfig</td>
<td>Provides an auto-configuration report describing what auto-configuration conditions passed and failed.</td>
</tr>
<tr>
<td>/configprops</td>
<td>Describes how beans have been injected with configuration properties (including default values).</td>
</tr>
<tr>
<td>/beans</td>
<td>Describes all beans in the application context and their relationship to each other.</td>
</tr>
<tr>
<td>/dump</td>
<td>Retrieves a snapshot dump of thread activity.</td>
</tr>
<tr>
<td>/env</td>
<td>Retrieves all environment properties.</td>
</tr>
<tr>
<td>/env/{name}</td>
<td>Retrieves a specific environment value by name.</td>
</tr>
<tr>
<td>/mappings</td>
<td>Describes all URI paths and how they’re mapped to controllers (including Actuator endpoints).</td>
</tr>
<tr>
<td>/metrics</td>
<td>Reports various application metrics such as memory usage and HTTP request counters.</td>
</tr>
<tr>
<td>/metrics/{name}</td>
<td>Reports an individual application metric by name.</td>
</tr>
<tr>
<td>/shutdown</td>
<td>This is an HTTP POST endpoint. Shuts down the application; requires thatendpoints.shutdown.enabled be set to true.</td>
</tr>
<tr>
<td>/trace</td>
<td>Provides basic trace information (timestamp, headers, and so on) for HTTP requests.</td>
</tr>
</tbody>
</table>
<h3>Enable Actuator Endpoints</h3>
<p>You can enable or disable each individual endpoint and expose them as per your requirement. All disabled endpoints are removed entirely from the application context. </p>
<p>By default, all endpoints except for <code>shutdown</code> are enabled. You can enable a specific endpoints using the <code>management.endpoint.&lt;endpoint_id&gt;.enabled</code> property. </p>
<p>For example, the following example enables the <code>shutdown</code> and <code>info</code> endpoint</p>
<pre class=""prettyprint lang-properties"">management.endpoint.shutdown.enabled=true
management.endpoint.info.enabled=true
</pre>
<h3>Exposing Actuator Endpoints</h3>
<p>Since endpoints may contain sensitive information about your application, you should carefully consider what endpoint is expose them. </p>
<p>By default, only the <code>health</code> endpoint is exposed over HTTP.  To change which endpoints are exposed we can use the <code>include</code> and <code>exclude</code> property.</p>
<pre class=""prettyprint lang-properties"">#Include or exclude specific endpoints. Comma seperated endpoint names
management.endpoints.web.exposure.exclude=scheduledtasks
management.endpoints.web.exposure.include=info, health

#Exposes all actuator endpoints
management.endpoints.web.exposure.include=* 
</pre>
<h3>Endpoint Caching</h3>
<p>Note that, the spring boot actuator endpoints automatically cached for read operations that do not take any parameters. To configure the amount of time for which an endpoint caches a response, we can use the following property. </p>
<pre class=""prettyprint lang-properties"">management.endpoint.beans.cache.time-to-live=10s
</pre>
<h2>Implementing Custom Actuator Endpoints</h2>
<p>To create a custom actuator endpoint, we need to create a class with <code>@Component</code> in combination with <code>@Endpoint</code> annotation. </p>
<p>The methods can be annotated with <code>@ReadOperation</code>, <code>@WriteOperation</code>, or <code>@DeleteOperation</code> and are automatically exposed over HTTPS. </p>
<h4>Read Operation</h4>
<p>The following example demonstrates, creating a custom actuator endpoint <code>/foo-bar</code> that supports read operation:</p>
<pre class=""prettyprint lang-java"">@Component  
@Endpoint(id = ""foo-bar"")
public class FeaturesEndpoint {

    @ReadOperation
    public Map&lt;String, String&gt; readOperation() {
        return Map.of(""foo"", ""bar"");
    }
}
</pre>
<p>Run your application and you will visit <code>/actuator/foo-bar</code> endpoint. It will return the following response:</p>
<pre class=""prettyprint lang-json"">{
    ""foo"": ""bar""
}
</pre>
<h4>Write Operation</h4>
<p>We can pass the input parameter through the custom actuator endpoints as well using the <code>@WriteOperation</code> annotation.</p>
<pre class=""prettyprint lang-java"">@Component  
@Endpoint(id = ""foo-bar"")
public class FeaturesEndpoint {

    @ReadOperation  
    public Map&lt;String, String&gt; readOperation() {
        return Map.of(""foo"", ""bar"");
    }

    @WriteOperation
    public Map&lt;String, String&gt; writeOperation(String param1, String param2) {
        return Map.of(""param1"", param1, ""param2"", param2);
    }
}
</pre>
<p>Now, we can test the endpoint as follows;</p>
<pre class=""prettyprint lang-shell"">curl --location 'http://localhost:8080/actuator/foo-bar' \
--header 'Content-Type: application/json' \
--data '{
    ""param1"": ""Hello"",
    ""param2"": ""World!""
}'
</pre>
<h4>Delete Operation</h4>
<p>In conjunction with <code>@ReadOperation</code>, <code>@WriteOperation</code> we can also use <code>@DeleteOperation</code>, which maps to the HTTP DELETE request type. </p>
<pre class=""prettyprint lang-java"">@DeleteOperation  
public Map&lt;String, Boolean&gt; deleteOperation() {  
    return Map.of(""success"", true);  
}
</pre>
<p>Example:</p>
<pre class=""prettyprint lang-shell"">curl --location --request DELETE 'http://localhost:8080/actuator/foo-bar'
</pre>",5,"standard","post"
"Working with Quartz Scheduler in Spring Boot","working-with-quartz-scheduler-in-spring-boot","A step by step guide that covers different configuration of Quartz Scheduler and integration with Spring Boot application.","LIVE","<p>Quartz Scheduler is an open-source job scheduling library that allows developers to schedule jobs to run at a certain time or based on specific events. This library eliminates the <a href=""https://stacktips.com/articles/task-execution-and-scheduling-in-spring-boot#limitations-of-spring-scheduler"">limitations in the Spring scheduler</a>. </p>
<p>Quartz allows developers to:
</p><ul><li>Schedule jobs to run at a specific time, or repeat at intervals
  - Store jobs and their triggers in a database, allowing scheduled jobs to persist between application restarts.
</li><li>Run in a clustered environment, allowing jobs to be distributed across a cluster of servers for load balancing or redundancy.
</li><li>Allows transaction management to ensure the jobs are only executed after transactions are successfully committed.</li></ul><h2 class=""""><span>Using Quartz Scheduler Spring Boot</span></h2>
<p>In the course of this article, we will cover different aspects of the Quartz Scheduler and integrate it with Spring Boot application. </p>
<p>Let us first create a simple scheduler to import content from a CSV file using basic configurations. The <a href=""https://github.com/StackTipsLab/spring-boot-tutorials/blob/main/quartz-scheduler/src/data/books.csv"">sample CSV file</a> containing list of books.</p>
<h3>Quartz Starter Dependency</h3>
<p>Before we begin, we need to add the Quartz starter dependency to our Spring boot application. For Maven add the following dependency to your <code>pom.xml</code> file.</p>
<pre class=""prettyprint lang-xml"">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;
&lt;/dependency&gt;
</pre>
<p>If you're using Gradle build tool, you can add the the following to your <code>build.gradle</code> file:</p>
<pre class=""prettyprint lang-groovy"">implementation 'org.springframework.boot:spring-boot-starter-quartz'`
</pre>
<p>The CSV content maps to the following <code>Book</code> model. Please note, I am using <a href=""https://stacktips.com/articles/java-17-interview-questions-and-answers#1-what-is-the-records-in-java"">Java17 record</a> for this purpose. If you're using lower version of Java, you can write a simple POJO class. </p>
<pre class=""prettyprint lang-java"">public record Book(  
        String id,  
        String isbn,  
        String isbn13,  
        String authors,  
        String publicationYear,  
        String title,  
        String languageCode,  
        Double averageRating,  
        String imageUrl) {  
}
</pre>
<p>To keep the scope of this article limited to the task scheduler, we will not perform any database operations. Here is how our <code>ImportService</code> looks like:</p>
<pre class=""prettyprint lang-java"">@Service  
public class ImportService {  

    private static final Logger log = LoggerFactory.getLogger(ImportService.class);  

    public void readBooks() throws IOException, CsvException {  
        File file = new File(""src/data/books.csv"");  
        log.info(""Importer started!"");  

        try (CSVReader csvReader = new CSVReader(new FileReader(file))) {  
            final List&lt;String[]&gt; rows = csvReader.readAll();  
            List&lt;Book&gt; books = rows.stream()  
                    .skip(1)  
                    .map(row -&gt; new Book(row[0], row[1], row[2], row[3], row[4],  
                            row[5], row[6], Double.parseDouble(row[7]), row[8]))  
                    .toList();  
            log.info(""Imported {} books"", books.size());  
        }  

        log.info(""Importer completed!"");  
    }  
}
</pre>
<p>The <code>ImporterService</code> is responsible for reading the CSV file, you can extend this service to do whatever logic required for your application. </p>
<p>Let us now dive into Quartz scheduler. </p>
<h3>Creating Quartz Job</h3>
<p>Define a job class that implements the Quartz <code>Job</code> interface. This class will contain the logic for reading the CSV file and loading its contents into the database.</p>
<pre class=""prettyprint lang-java"">public class CsvImportJob implements Job {

    private static final Logger log = LoggerFactory.getLogger(CsvImportJob.class);
    private final ImportService importService;

    public CsvImportJob(ImportService importService) {
        this.importService = importService;
    }

    @Override  
    public void execute(JobExecutionContext context) throws JobExecutionException {
        try {
            JobDataMap dataMap = context.getJobDetail().getJobDataMap();
            String param = dataMap.getString(""arg1"");

            log.info(""CsvImportJob started with param: {}"", param);
            importService.readBooks();

        } catch (IOException e) {
            log.error(""IOException thrown while running job"", e);
            throw new RuntimeException(e);
        } catch (CsvException e) {
            log.error(""CsvException thrown while running job"", e);
            throw new RuntimeException(e);
        }
    }  
}
</pre>
<h3>Cron Based Trigger</h3>
<p>Now that we have created the <code>CsvImportJob</code>, we can leverage the Spring's configuration and dependency injection capability to trigger the job.</p>
<p>The <code>spring-boot-starter-quartz</code> dependency automatically configures a <code>SchedulerFactoryBean</code>. </p>
<p>The <code>SchedulerFactoryBean</code> is a Quartz's standard factory implementation that is responsible for creating a <code>Scheduler</code> instance.</p>
<pre class=""prettyprint lang-java"">@Configuration  
public class QuartzConfig {  

    @Bean
    public JobDetail csvImportJob() {
        return JobBuilder.newJob(CsvImportJob.class)
                .withIdentity(""csvImportJob"")          
                .build();
    }  

    @Bean
    public Trigger csvImportJobTrigger(JobDetail csvImportJob) {
        return TriggerBuilder.newTrigger()
                .forJob(csvImportJob)
                .withIdentity(""cronTrigger"")
                .withSchedule(CronScheduleBuilder.cronSchedule(""0/5 * * * * ?""))
                .build();
    }
}
</pre>
<p>The Quartz <code>Scheduler</code> is aware of all <code>JobDetail</code> and <code>Trigger</code> beans defined in the Spring context and automatically schedules the jobs based on the triggers associated with them.</p>
<p>We have used cron expression that triggers the job every 5 seconds (<code>""0/5 * * * * ?""</code>).</p>
<h3>Interval Based Trigger</h3>
<p>Along with the cron trigger, we can also schedule job to start at a specific moment in time, and optionally, repeat it at a specified interval a fixed number of times using the <code>SimpleScheduleBuilder</code>.</p>
<p>When defining a interval based trigger, we need to specify the start time, repeat interval, and optionally the number of repeats.</p>
<pre class=""prettyprint lang-java"">@Bean  
    public Trigger csvImportJobTrigger(JobDetail csvImportJob) {  
        // Initial delay
        Date afterFiveSeconds = Date.from(LocalDateTime.now().plusSeconds(5)  
                .atZone(ZoneId.systemDefault()).toInstant());  

        return TriggerBuilder.newTrigger()  
                .forJob(csvImportJob)  
                .startAt(afterFiveSeconds) // Initial delay 
                .withIdentity(""simpleTrigger"") 
                .withSchedule(SimpleScheduleBuilder.simpleSchedule()  
                        .withIntervalInSeconds(60)  
                        .repeatForever())  
                .build();  
    }
</pre>
<blockquote>
<p>[!NOTE] 
If you're using the Job interface for tasks, these jobs cannot be interrupted before completion. Once started, these jobs will run to completion unless an unhandled exception occurs.</p>
</blockquote>
<h2>Interruptable Jobs in Quartz</h2>
<p>The <code>InterruptableJob</code> interface extends the <code>Job</code> interface and adds the ability for the job to be interrupted in the middle of execution. This is useful for long-running tasks that might need to be stopped before they complete normally. </p>
<p>To create an Interruptible Job, we need to implement the <code>InterruptableJob</code> interface and implement the <code>interrupt()</code> method. The <code>interrupt()</code> method is called by the Quartz Scheduler when a user interrupts the Job.</p>
<pre class=""prettyprint lang-java"">public class CsvImportInterruptableJob implements InterruptableJob {  

    private static final Logger log = LoggerFactory.getLogger(CsvImportInterruptableJob.class);  

    private final ImportService importService;  

    public CsvImportInterruptableJob(ImportService importService) {  
        this.importService = importService;  
    }  

    private volatile boolean toStop = false;  

    @Override  
    public void execute(JobExecutionContext context) throws JobExecutionException {  
        while (!toStop) {  

            try {  
                JobDataMap dataMap = context.getJobDetail().getJobDataMap();  
                String param = dataMap.getString(""param"");  

                log.info(""CsvImportInterruptableJob started with parameter: {}"", param);  
                importService.readBooks();  

            } catch (IOException e) {  
                log.error(""IOException thrown while running job"", e);  
                throw new RuntimeException(e);  
            } catch (CsvException e) {  
                log.error(""Exception thrown while running job"", e);  
                throw new RuntimeException(e);  
            }  

            if (Thread.interrupted()) {  
                // Perform any cleanup tasks and terminate  
                toStop = true;  
            }  
        }  

    }  

    @Override  
    public void interrupt() throws UnableToInterruptJobException {  
        toStop = true;  
    }  
}
</pre>
<p>The <code>interrupt()</code> method allows the job to handle interruption requests, such as cleaning up resources or rolling back transactions, before the job stops. </p>
<p>This article covers the basics of Scheduler using Quartz. In the next article we will cover more advance configurations and dynamic scheduling using Spring Boot actuators. </p>
<p>For the complete project source code check out the download link. </p>
<p>If you have any questions, write down in the comment section below. Will be happy to respond, soon as I can.</p>",0,"standard","post"
"Dynamic Scheduling in Quartz with Spring Boot Actuators","dynamic-scheduling-in-quartz-with-spring-boot-actuators","A step by step guide explains how to do the dynamic scheduling in quartz using custom spring boot actuators.","LIVE","<p>In the previous article, we integrated the <a href=""/articles/working-with-quartz-scheduler-in-spring-boot"">Quartz Scheduler</a> in Spring boot and covered some of the basic configurations. </p>
<p>In this second part, we will dive into some of the advance Quartz configurations and we will create a <a href=""/articles/working-with-spring-boot-actuators"">custom actuator</a> to manage the Quartz Job using actuator endpoints.</p>
<h3>Actuator Dependency</h3>
<p>To enable the Actuator endpoints, we need include the <code>spring-boot-starter-actuator</code> starter dependency to your project. If you have Gradle based project, you can add the following dependency to your <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-groovy"">dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator
}
</pre>
<p>If you’re using maven, you can include the following dependency on your <code>pom.xml</code> file.</p>
<pre class=""prettyprint lang-xml"">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;
</pre>
<p>Once you have the dependency added to your application, Spring Boot’s auto-configuration will kick in when the application is running and Actuator will be enabled. </p>
<h3>Custom Actuator Endpoint</h3>
<p>Let us now create a custom actuator to start, and stop scheduled jobs using actuator endpoints. To learn more about <a href=""https://stacktips.com/articles/working-with-spring-boot-actuators"">Spring Boot actuator</a> basics, please can refer to the linked article. </p>
<p>In this example, we have <code>actuator/manage-jobs</code> actuator endpoint with <code>@WriteOperation</code> that accepts an <code>action</code>, <code>jobName</code> and <code>jobGroup</code> as a input parameter. </p>
<pre class=""prettyprint lang-java"">@Component  
@Endpoint(id = ""manage-jobs"")  
public class QuartzJobEndpoint {  

    private static final Logger log = LoggerFactory.getLogger(QuartzJobEndpoint.class);  
    private final QuartzJobService quartzJobService;  

    public QuartzJobEndpoint(QuartzJobService quartzJobService) {  
        this.quartzJobService = quartzJobService;  
    }  

    @WriteOperation
    public void manageJob(String action, String jobName, String jobGroup) {
        try {
            if (""start"".equals(action)) {
                String triggerName = ""csvImportInterruptableJobTrigger"";
                quartzJobService.startJob(jobName, jobGroup, triggerName);
            } else if (""stop"".equals(action)) {
                quartzJobService.stopJob(jobName, jobGroup);
            }
        } catch (SchedulerException e) {
            log.error(""Error while managing job"", e);
        }
    }
}
</pre>
<p>By default, only the <code>health</code> endpoint is exposed over HTTP. To allow <code>manage-job</code> accessible we need to <code>include</code> the following property.</p>
<pre class=""prettyprint lang-properties"">management.endpoints.web.exposure.include=health,manage-jobs
</pre>
<h3>Service to Manage Dynamic Scheduling</h3>
<p>The custom uses <code>QuartzJobService</code> to manage the Jobs. The service class contains following methods:</p>
<ul>
<li><code>scheduleJob()</code>: Schedules a new job with the given name, group, and trigger name. It uses the <code>CsvImportInterruptableJob.class</code> for the job detail, indicating that this specific job class will be executed.</li>
<li><code>startJob()</code>: Starts a job if it does not already exist; otherwise, it triggers the existing job. It uses the job and group names to check for the job's existence and to trigger it.</li>
<li><code>stopJob()</code>: Stops and deletes a job based on its name and group. It first interrupts the job and then deletes it from the scheduler.</li>
<li><code>updateJob()</code>: It replaces the old trigger with a new one for the specified job based on the new cron expression. </li>
</ul>
<p>In this example, we are using hardcoded CRON expression, the endpoint can be extended to pass the cron expression as a input. </p>
<pre class=""prettyprint lang-java"">import com.stacktips.app.tasks.CsvImportInterruptableJob;
import org.quartz.*;  
import org.springframework.stereotype.Service;

@Service
public class QuartzJobService {

    private static final String CRON_EXPRESSION = ""0/5 * * * * ?"";
    private final Scheduler scheduler;

    public QuartzJobService(Scheduler scheduler) {
        this.scheduler = scheduler;
    }

    public void scheduleJob(String jobName, String jobGroup, String triggerName) throws SchedulerException {
        JobDetail job = JobBuilder.newJob(CsvImportInterruptableJob.class)
                .withIdentity(jobName, jobGroup)
                .build();

        Trigger trigger = TriggerBuilder.newTrigger()
                .withIdentity(triggerName, jobGroup)
                .startNow()
                .withSchedule(CronScheduleBuilder.cronSchedule(CRON_EXPRESSION))
                .build();

        scheduler.scheduleJob(job, trigger);
        if (!scheduler.isStarted()) {
            scheduler.start();
        }
    }

    public void startJob(String jobName, String jobGroup, String triggerName) throws SchedulerException {
        JobKey jobKey = new JobKey(jobName, jobGroup);
        if (!scheduler.checkExists(jobKey)) {
            scheduleJob(jobName, jobGroup, triggerName);
        } else {
            scheduler.triggerJob(jobKey);
        }
    }

    public void stopJob(String jobName, String jobGroup) throws SchedulerException {
        JobKey jobKey = new JobKey(jobName, jobGroup);
        scheduler.interrupt(jobKey);
        scheduler.deleteJob(jobKey);
    }

    public void updateJob(String triggerName, String newTriggerName, String jobName, String jobGroup) throws SchedulerException {

        Trigger newTrigger = TriggerBuilder.newTrigger()
                .withIdentity(triggerName, jobGroup)
                .startNow()
                .withSchedule(CronScheduleBuilder.cronSchedule(CRON_EXPRESSION))
                .build();

        scheduler.rescheduleJob(TriggerKey.triggerKey(newTriggerName, jobGroup), newTrigger);
        scheduler.deleteJob(JobKey.jobKey(jobName, jobGroup));
    }  

}
</pre>
<h3>Using Actuator to Manage Quartz Jobs</h3>
<p>With this we are ready to dynamically schedule our Quartz job. </p>
<p><strong>To Start a Job</strong></p>
<pre class=""prettyprint lang-shell"">curl --location 'http://localhost:8080/actuator/manage-jobs' \
--header 'Content-Type: application/json' \
--data '{
    ""action"":""start"",
    ""jobName"":""csvjob"",
    ""jobGroup"":""gbgroup1""
}'
</pre>
<p><strong>To Stop a Job</strong></p>
<pre class=""prettyprint lang-shell"">curl --location 'http://localhost:8080/actuator/manage-jobs' \
--header 'Content-Type: application/json' \
--data '{
    ""action"":""stop"",
    ""jobName"":""csvjob"",
    ""jobGroup"":""gbgroup1""
}'
</pre>
<p><strong>To Update an Existing Job</strong></p>
<pre class=""prettyprint lang-shell"">curl --location 'http://localhost:8080/actuator/manage-jobs' \
--header 'Content-Type: application/json' \
--data '{
    ""action"":""start"",
    ""jobName"":""csvjob"",
    ""jobGroup"":""gbgroup1""
}'
</pre>",0,"standard","post"
"Choosing from Multiple Bean Implementations in Spring Boot","choose-from-multiple-bean-types-springboot","In this article we will explore what are the different approaches to inject beans conditionally when you have multiple implantation of an component or service.","LIVE","<p>If you have multiple implementations of the same interface, Spring needs to know which bean to inject into a class.</p>
<p>In this article we will explore what are the different approaches to inject beans conditionally when you have multiple implantation of an component or service.</p>
<p>Let's us explore this example, we have 2 mail sender implementation, one using SES and other using default mail sender. For sake of simplicity, we have skipped the sending the actual mail, instead it logs which sender service is invoked.</p>
<pre class=""prettyprint lang-java"">public interface MailSender {

    void sendMail(String from, String to, String subject);
}

@Service
public class DefaultMailSender implements MailSender {  
    private final Logger logger = LoggerFactory.getLogger(DefaultMailSender.class);

    @Override
    public void sendMail(String from, String to, String subject) {
        logger.info(""Sending email using DefaultMailSender"");
    }
}

@Service
public class SesMailSender implements MailSender {  
    private final Logger logger = LoggerFactory.getLogger(HttpMailSender.class);

    @Override  
    public void sendMail(String from, String to, String subject) {
        logger.info(""Sending email using SesMailSender"");
    }
}
</pre>
<p>And in our MainApplication class, we have injected bean of <code>MailSender</code> class using constructor injection.</p>
<pre class=""prettyprint lang-java"">@SpringBootApplication
public class MyApplication implements CommandLineRunner {

    private final MailSender mailSender;

    public MyApplication(MailSender mailSender) {
        this.mailSender = mailSender;
    }

    @Override
    public void run(String... args) throws Exception {
        mailSender.sendMail(""hello@test.com"", ""john.doe@gmail.com"", ""Test mail""); 
    }

    public static void main(String[] args) {
        SpringApplication.run(MyApplication.class, args);
    }
}
</pre>
<p>When you run the application, it will return the following error;</p>
<pre class=""prettyprint lang-java"">***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.stacktips.app.MyApplication required a single bean, but 2 were found:
    - defaultMailSender: defined in file [/Users/nilanchala/Documents/spring-boot-conditional-bean/build/classes/java/main/com/stacktips/app/service/DefaultMailSender.class]
    - sesMailSender: defined in file [/Users/nilanchala/Documents/spring-boot-conditional-bean/build/classes/java/main/com/stacktips/app/service/SesMailSender.class]

This may be due to missing parameter name information

Action:

Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed
</pre>
<p>It is because, as we have two implementations of the <code>EmailSender</code>, spring cannot determine which implementation to inject for <code>sendMail()</code> method invocation. </p>
<p>We have different options available to let spring know which implementation to choose. Let's explore.</p>
<h3>Option-1: Using @Primary Bean Annotation</h3>
<p>When there are several bean implementations available, we can choose the primary bean candidate using the  <code>@Primary</code> annotation.</p>
<p>For example;</p>
<pre class=""prettyprint lang-java"">@Primary  
@Service
public class DefaultMailSender implements MailSender {  

    private final Logger logger = LoggerFactory.getLogger(DefaultMailSender.class);  

    @Override  
    public void sendMail(String from, String to, String subject) {  
        logger.info(""Sending email using DefaultMailSender"");  
    }  
}
</pre>
<p>With this, Spring will inject the bean of  <code>DefaultMailSender</code>.  </p>
<h3>Option-2: Autowiring using @Qualifier</h3>
<p>The <code>@Primary</code> annotation provides limited control over the bean type selection. When you need more control over the selection process, we can use the <code>@Qualifier</code> annotation. </p>
<p>You can associate qualifier values with specific arguments, narrowing the set of type matches so that a specific bean is chosen for each argument. </p>
<p>For example;</p>
<pre class=""prettyprint lang-java"">@SpringBootApplication  
public class MyApplication implements CommandLineRunner {  

    private final MailSender mailSender;  

    public MyApplication(@Qualifier(""sesMailSender"") MailSender mailSender) {  
        this.mailSender = mailSender;  
    }  

    @Override  
    public void run(String... args) throws Exception {  
        mailSender.sendMail(""hello@test.com"", ""john.doe@gmail.com"", ""Test mail"");  
    }  

    public static void main(String[] args) {  
        SpringApplication.run(MyApplication.class, args);  
    }  
}

</pre>
<p>As we are specifying <code>@Qualifier(""sesMailSender"")</code>, Spring will now inject the <code>sesMailSender</code> bean. </p>
<h3>Option-3: Using ApplicationContext to Dynamically Select Beans</h3>
<p>Both approaches defined above uses static approach to inject bean types.  To achieve dynamic bean selection based on certain conditions, we can use <code>@Autowired</code> in combination with <code>ApplicationContext</code>.</p>
<p>Let us create a factory class <code>EmailService</code>: </p>
<pre class=""prettyprint lang-java"">@Component  
public class MailService {  

    private final ApplicationContext context;  

    public MailService(ApplicationContext context) {  
        this.context = context;  
    }  

    public MailSender getMailSender(String type) {  
        if (""ses"".equals(type)) {  
            return context.getBean(""sesMailSender"", SesMailSender.class);  
        }  

        return context.getBean(""defaultMailSender"", DefaultMailSender.class);  
    }  

    public void sendMail(String from, String to, String subject) {  
        getMailSender(""ses"").sendMail(from, to, subject);  
    }  
}
</pre>
<p>Now in our <code>MainApplication</code> class, instead of injecting <code>MailSender</code> bean, we can use  <code>MailService</code> type instead. </p>
<pre class=""prettyprint lang-java"">@SpringBootApplication  
public class MyApplication implements CommandLineRunner {  

    private final MailService mailService;  

    public MyApplication(MailService mailService) {  
        this.mailService = mailService;  
    }  

    @Override  
    public void run(String... args) throws Exception {  
        mailService.sendMail(""hello@test.com"", ""john.doe@gmail.com"", ""Test mail"");  
    }  

    public static void main(String[] args) {  
        SpringApplication.run(MyApplication.class, args);  
    }  
}
</pre>
<h3>Option-4: Custom Annotation and Bean Factory</h3>
<p>Another approach is to create a custom annotation and a factory that uses this annotation to decide which bean to inject dynamically based on certain conditions. </p>
<p>This is similar to Option-4, but using the custom annotation. This approach offers greater flexibility and keeps your code clean.</p>
<p>Let us first define a custom annotation:</p>
<pre class=""prettyprint lang-java"">import java.lang.annotation.ElementType;  
import java.lang.annotation.Retention;  
import java.lang.annotation.RetentionPolicy;  
import java.lang.annotation.Target;  

@Target(ElementType.TYPE)  
@Retention(RetentionPolicy.RUNTIME)  
public @interface MailSenderSelector {  

    String value();  
}
</pre>
<p>Now use the annotation in your <code>MailSender</code> services</p>
<pre class=""prettyprint lang-java"">@Service  
@MailSenderSelector(""default"")  
public class DefaultMailSender implements MailSender {  

    private final Logger logger = LoggerFactory.getLogger(DefaultMailSender.class);  

    @Override  
    public void sendMail(String from, String to, String subject) {  
        logger.info(""Sending email using DefaultMailSender"");  
    }  
}

@Service  
@MailSenderSelector(""ses"")  
public class SesMailSender implements MailSender {  

    private final Logger logger = LoggerFactory.getLogger(SesMailSender.class);  

    @Override  
    public void sendMail(String from, String to, String subject) {  
        logger.info(""Sending email using SesMailSender"");  
    }  
}
</pre>
<p>Now we will implement a bean factory that checks this condition at runtime and selects the appropriate bean types based on the argument passed to the annotation. </p>
<pre class=""prettyprint lang-java"">@Component  
public class MailService {  

    private final ApplicationContext context;  

    public MailService(ApplicationContext context) {  
        this.context = context;  
    }  

    public MailSender getMailSender(String type) {  
        Map&lt;String, Object&gt; beansWithAnnotation = context.getBeansWithAnnotation(MailSenderSelector.class);  
        Optional&lt;Object&gt; matchingBean = beansWithAnnotation.values().stream()  
                .filter(bean -&gt; bean.getClass().getAnnotation(MailSenderSelector.class).value().equals(type))  
                .findFirst();  

        if (matchingBean.isEmpty()) {  
            throw new IllegalArgumentException(""No bean found for type: "" + type);  
        }  

        return (MailSender) matchingBean.get();  
    }  

    public void sendMail(String from, String to, String subject) {  
        getMailSender(""ses"").sendMail(from, to, subject);  
    }  
}
</pre>
<h3>Option-5: Bean Selection Using Custom Conditions</h3>
<p>Another approach is to define custom conditions to match the bean types to inject. This method determines whether a condition is met based on the application context and metadata.</p>
<pre class=""prettyprint lang-java"">import org.springframework.context.annotation.Condition;  
import org.springframework.context.annotation.ConditionContext;  
import org.springframework.core.type.AnnotatedTypeMetadata;  
import org.springframework.stereotype.Component;

@Component  
public class DefaultMailSenderCondition implements Condition {  

    @Override  
    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { 
        String mailSender = context.getEnvironment().getProperty(""email.mail-sender""); 
        return null== mailSender || mailSender.trim().equals(""default"");  
    }  
}


@Component  
public class SesMailSenderCondition implements Condition {  

    @Override  
    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { 
        String mailSender = context.getEnvironment().getProperty(""email.mail-sender""); 
        return null != mailSender &amp;&amp; mailSender.trim().equals(""ses"");  
    }  
}
</pre>
<p>The two conditions above uses the <code>email.mail-sender</code> application property value to determine the bean type to inject.</p>
<p><strong>application.properties</strong></p>
<pre class=""prettyprint lang-properties"">#default or ses  
email.mail-sender=ses
</pre>
<p>In this case, the condition for <code>SesMailSender</code> will be true, and thus, <code>SesMailSender</code> will be the active implementation of <code>MailSender</code> in the application context.</p>
<p>Now from mail sender implementations, we can use <code>@Conditional</code>  annotation by passing the corresponding condition that dictates which bean should be registered.</p>
<pre class=""prettyprint lang-java"">public interface MailSender {  
    void sendMail(String from, String to, String subject);  
}

@Primary  
@Component  
@Conditional(DefaultMailSenderCondition.class)  
public class DefaultMailSender implements MailSender {  

    private final Logger logger = LoggerFactory.getLogger(DefaultMailSender.class);  

    @Override  
    public void sendMail(String from, String to, String subject) {  
        logger.info(""Sending email using DefaultMailSender"");  
    }  
}

@Service  
@Conditional(SesMailSenderCondition.class)  
public class SesMailSender implements MailSender {  

    private final Logger logger = LoggerFactory.getLogger(SesMailSender.class);  

    @Override  
    public void sendMail(String from, String to, String subject) {  
        logger.info(""Sending email using SesMailSender"");  
    }  
}
</pre>
<p>There is no change in the main application class, we inject the <code>MailSender</code> instance using the constructor based injection.</p>
<pre class=""prettyprint lang-java"">@SpringBootApplication  
public class MyApplication implements CommandLineRunner {  

    private final MailSender mailSender;  

    public MyApplication(MailSender mailSender) {  
        this.mailSender = mailSender;  
    }  

    @Override  
    public void run(String... args) throws Exception {  
        mailSender.sendMail(""hello@test.com"", ""john.doe@gmail.com"", ""Test mail"");  
    }  

    public static void main(String[] args) {  
        SpringApplication.run(MyApplication.class, args);  
    }  
}
</pre>
<p>For the complete project source code check out the download link. </p>
<p>If you have any questions, write down in the comment section below. Will be happy to respond, soon as I can.</p>",0,"standard","post"
"Testing Spring Boot Repository Using MongoDB Testcontainers","testing-spring-boot-repository-using-mongodb-testcontainers","In this article, we will use MongoDB Testcontainers to test spring boot Repository that uses MongoTemplate to search data from DB.","LIVE","<p>Testcontainers are the lightweight, throwaway container instances, used for common test cases like testing against a database, ActiveMQ or anything else that can run in a Docker container. </p>
<p>Testcontainers allows you to run your tests against a real instance of your application's dependencies, such as a real database, rather than against a mock or an in-memory database. We can configure the Testcontainers to closely mimic the production environment by using the specific versions of your your dependencies and pre-load with test data . </p>
<p>It spins up a new container instance for each tests, hence every tests are completely isolated from each other. </p>
<p>For running tests using the Testcontainers, we need to have the docker is up and running, no other dependencies are required. </p>
<p>Let us see the following Repository, </p>
<p>We have defined a <code>searchMovies()</code> method that uses <code>MongoTemplate</code> to perform search by different search criteria's. </p>
<pre class=""prettyprint lang-java"">@Repository  
public class MovieRepository {  

    private final MongoTemplate mongoTemplate;  

    public MovieRepository(MongoTemplate mongoTemplate) {  
        this.mongoTemplate = mongoTemplate;  
    }  

    public List&lt;Movie&gt; searchMovies(SearchRequest searchRequest) {  
        Query query = new Query();  
        if (null != searchRequest.rating()) {  
            query.addCriteria(Criteria.where(""rating"")
                .is(searchRequest.rating()));  
        }  

        if (null != searchRequest.language()) {  
            query.addCriteria(Criteria.where(""language"")
                .is(searchRequest.language()));  
        }  

        if (null != searchRequest.genre()) {  
            query.addCriteria(Criteria.where(""genres"")
                .is(searchRequest.genre()));  
        }  

        return mongoTemplate.find(query, Movie.class);  
    }  
}
</pre>
<h2 class="""">Add Testcontainers Dependency</h2>
<p>Before we begin, we need to ensure we have the necessary test container dependency added to your  <code>pom.xml</code> or <code>build.gradle</code> file.</p>
<pre class=""prettyprint lang-groovy"">testImplementation 'org.springframework.boot:spring-boot-testcontainers'  
testImplementation ""org.testcontainers:junit-jupiter:1.19.6""  
testImplementation ""org.testcontainers:mongodb:1.19.6""
</pre>
<h2>Configure Testcontainer</h2>
<p>Create a test configuration class that starts a MongoDB container. This will be used for testing our Repository that uses <code>MongoTemplate</code> for performing MongoDB operations. </p>
<pre class=""prettyprint lang-java"">@Testcontainers
@DataMongoTest(includeFilters = @ComponentScan.Filter(Repository.class))
class MovieRepositoryTest {

    @Autowired  
    MovieRepository repository;
    @Autowired  
    MongoTemplate mongoTemplate;

    @Container  
    static final MongoDBContainer mongoDbContainer = new MongoDBContainer(""mongo:latest"")
            .withExposedPorts(27017);


    @DynamicPropertySource
    static void setProperties(DynamicPropertyRegistry registry) {
        registry.add(""spring.data.mongodb.host"", mongoDbContainer::getHost);
        registry.add(""spring.data.mongodb.port"", mongoDbContainer::getFirstMappedPort);
        registry.add(""spring.data.mongodb.username"", () -&gt; ""test_user"");
        registry.add(""spring.data.mongodb.password"", () -&gt; ""test_password"");
        registry.add(""spring.data.mongodb.database"", () -&gt; ""movies_db"");
        registry.add(""spring.data.mongodb.uri"", mongoDbContainer::getReplicaSetUrl);
    }

    static {
        mongoDbContainer.start();
    } 
}
</pre>
<h2>Preload MongoDB Testcontainer with Test Data</h2>
<p>We can preload the MongoDB Testcontainer with test data. To do that we need to create an initialization script in <code>/test/resources</code> directory. Lets call it <code>init-schema.js</code>.</p>
<p><strong>init-schema.js</strong></p>
<pre class=""prettyprint lang-javascript"">db = db.getSiblingDB('movies_db');  

db.movies.insertMany([  
    {  
        ""title"": ""Iron Man &amp; Captain America: Heroes United"",  
        ""headline"": ""Iron Man (Adrian Pasdar) and Captain America ..."",  
        ""thumbnail"": ""https://flxt.tmsimg.com/assets/p10906420_v_h9_aa.jpg"",  
        ""language"": ""EN"",  
        ""region"": ""USA"",  
        ""actors"": [  
            ""David Kaye"",  
            ""Ian McKellen"",  
            ""Adrian Pasdar""  
        ],  
        ""genre"": ""Adventure"",  
        ""rating"": ""G"",  
    },  
    {  
        ""title"": ""Transformers: Rise of the Beasts"",  
        ""headline"": ""Transformers: Rise of the Beasts will take audiences on a"",  
        ""thumbnail"": ""https://flxt.tmsimg.com/assets/p20201199_v_h9_am.jpg"",  
        ""language"": ""EN"",
        ""region"": ""USA"",
        ""actors"": [
            ""David Kaye"",
            ""Ian McKellen"",
            ""Adrian Pasdar""
        ],
        ""genres"": ""Action"",
        ""rating"": ""G""
    },    
]);
</pre>
<p>For <code>init-schema.js</code> to work, we need to use <code>withCopyFileToContainer()</code> method. The <code>withCopyFileToContainer()</code> method allows moving the initialization script to a location inside the container.</p>
<pre class=""prettyprint lang-java"">@Container  
static final MongoDBContainer mongoDbContainer = new MongoDBContainer(""mongo:latest"")  
        .withExposedPorts(27017)  
        .withCopyFileToContainer(MountableFile.forClasspathResource(""./init-schema.js""),  
                ""/docker-entrypoint-initdb.d/init-script.js"");
</pre>
<h2>Testing Repository using Testcontainer</h2>
<p>Now that we have setup the test container and our initialization script is ready, let us now use the Testcontainer instance to write some unit tests.</p>
<p>Here is how our <code>MovieRepositoryTest</code> class look like:</p>
<pre class=""prettyprint lang-java"">import com.stacktips.movies.dto.SearchRequest;
import com.stacktips.movies.models.ContentRating;
import com.stacktips.movies.models.Movie;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.data.mongodb.core.MongoTemplate; 
import org.springframework.stereotype.Repository;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.MongoDBContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.MountableFile;

import java.util.List;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;

@Testcontainers
@DataMongoTest(includeFilters = @ComponentScan.Filter(Repository.class))
class MovieRepositoryTest {

    @Autowired  
    MovieRepository repository;
    @Autowired  
    MongoTemplate mongoTemplate;

    @Container  
    static final MongoDBContainer mongoDbContainer = new MongoDBContainer(""mongo:latest"")
            .withExposedPorts(27017)
            .withCopyFileToContainer(MountableFile.forClasspathResource(""./init-schema.js""),
                    ""/docker-entrypoint-initdb.d/init-script.js"");

    @DynamicPropertySource
    static void setProperties(DynamicPropertyRegistry registry) {
        registry.add(""spring.data.mongodb.host"", mongoDbContainer::getHost);
        registry.add(""spring.data.mongodb.port"", mongoDbContainer::getFirstMappedPort);
        registry.add(""spring.data.mongodb.username"", () -&gt; ""test_user"");
        registry.add(""spring.data.mongodb.password"", () -&gt; ""test_password"");
        registry.add(""spring.data.mongodb.database"", () -&gt; ""movies_db"");
        registry.add(""spring.data.mongodb.uri"", mongoDbContainer::getReplicaSetUrl);
    }

    static {
        mongoDbContainer.start();
    }

    @Test  
    void testMoviesCount() {
        List&lt;Movie&gt; movies = mongoTemplate.findAll(Movie.class);
        assertThat(4, is(movies.size()));
    }

    @Test  
    void testSearchMovies() {  
        SearchRequest searchRequest = new SearchRequest(ContentRating.G, ""EN"", ""Action"");
        List&lt;Movie&gt; movies = repository.searchMovies(searchRequest);
        assertThat(2, is(movies.size()));
        assertThat(movies.get(0).title(), is(""Transformers: Rise of the Beasts""));
        assertThat(movies.get(0).language(), is(""EN""));
        assertThat(movies.get(0).region(), is(""USA"")); 
        assertThat(movies.get(0).rating(), is(ContentRating.valueOf(""G"")));
    }
}
</pre>
<p>For the complete project source code check out the download link. </p>
<p>If you have any questions, write down in the comment section below. Will be happy to respond, soon as I can.</p>",0,"standard","post"
"Dependency Injection in Spring Boot","dependency-injection-in-spring-boot","This chapter covers how Dependency Injection works in Spring Boot including @Autowired, field injection, constructor injection and setter method injection.","LIVE","<p>Before diving into the definition of DI, let us see how we manage dependencies traditionally in Java without using Spring Dependency Injection.</p>
<pre class=""prettyprint lang-java"">public class UserService {
    final Logger logger = LoggerFactory.getLogger(UserService.class);

    private final EmailService emailService;
    private final UserRepository userRepository;

    public UserService() {
        this.emailService = new EmailService();
        this.userRepository = new UserRepository();
    }

    public void registerUser(User user) {
        userRepository.saveUser(user);

        emailService.emailUser(""User registered successfully!"",
                user.getEmail());
    }
}
</pre>
<p>In the above code snippet, the <code>UserService</code> class has the <code>registerUser()</code> method, which is used to create a user and then send an email notification. </p>
<p>Hence the <code>UserService</code> class defines the <code>EmailService</code> and <code>UserRepository</code>  member variables, and they are instantiated within the default constructor of the <code>UserService</code> class.</p>
<p>The challenge with the above code is:</p>
<ul>
<li>It creates a hard-coded dependency of <code>UserRepository</code> and <code>EmailService</code> within your <code>UserService</code> class. </li>
<li>The creation and usage of dependencies are tightly intertwined. If there are any changes to the <code>UserRepository</code> or <code>EmailService</code>, we need to modify the <code>UserService</code> implementation.</li>
<li>This can make our code difficult to test as we cannot easily mock the <code>UserRepository</code> and <code>EmailService</code> instances.</li>
</ul>
<p>The testing challenges can be addressed by refactoring the <code>UserService</code> to have a constructor that passes two arguments.</p>
<pre class=""prettyprint lang-java"">public class UserService {
    final Logger logger = LoggerFactory.getLogger(UserService.class);

    private final EmailService emailService;
    private final UserRepository userRepository;

    public UserService(EmailService emailService, UserRepository userRepository) {
        this.emailService = emailService;
        this.userRepository = userRepository;
    }

    public void registerUser(User user) {
        userRepository.saveUser(user);      

        emailService.emailUser(""User registered successfully!"",
                user.getEmail());
    }
}
</pre>
<p>Now we can inject the mocks and do our testing, but this does not solve the real problem, as it is just moving the issue from one place to another.</p>
<p>As the number of dependencies and classes grows, manually managing dependencies can lead to a lot of repetitive code, which can be error-prone and increase the maintenance burden.</p>
<p>In essence, while it is technically possible to write your application without a Dependency Injection (DI) container, it becomes cumbersome, less maintainable, and error-prone as your application becomes more complex.</p>
<p>This is where the Dependency Injection comes to the rescue.</p>
<h2>What is DI?</h2>
<p>DI is a software design pattern used in object-oriented programming, where the dependencies of a class are provided by an external entity rather than being created within the class itself.</p>
<p>In other words, instead of a class creating and managing its dependencies, those dependencies are created and managed outside but, are ""injected"" into your class whenever you need it.</p>
<p>The main idea behind Dependency Injection is to decouple the bean instantiation process from your actual business logic implementation.</p>
<h2>Dependency Injection (DI) in Spring</h2>
<p>Dependency Injection (DI) is one of the core concept of the Spring Framework. It is achieved through the Spring Framework's Inversion of Control (IoC) container. This allows the loose coupling of components and object creation and disposal responsibility is handed over to the spring container.</p>
<p><img src=""https://media.stacktips.com/media/uploads/summernote/dependency-injection.jpg""/><br/></p>
<p>Any object in the Spring framework that is initialized through the Spring container is called Spring Bean.</p>
<p>Dependency Injection works in a stepped approach:
- Bean identification/registration
- Bean injection</p>
<h3>Bean Identification/ Bean Registration</h3>
<p>Bean identification refers to the way beans are identified within the Spring IoC container. Each bean is given a unique identifier that can be used to reference it later within the spring application context.</p>
<p>In Spring, this can be done using a XML configuration,  Java Configuration or annotation-based configuration:</p>
<h4>XML Schema Based Configuration:</h4>
<p>Spring Beans can be explicitly defined in an XML configuration file. The Spring IOC reads the XML file and registers all the beans defined.</p>
<pre class=""prettyprint lang-java"">&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;beans xmlns=""&lt;http://www.springframework.org/schema/beans&gt;""
    xmlns:xsi=""&lt;http://www.w3.org/2001/XMLSchema-instance&gt;""
    xsi:schemaLocation=""&lt;http://www.springframework.org/schema/beans&gt;
    &lt;http://www.springframework.org/schema/beans/spring-beans.xsd&gt;""&gt;

    &lt;bean id=""userService"" class=""com.stacktips.app.service.UserService""&gt;
        &lt;!-- Configure properties and dependencies needed --&gt;        
    &lt;/bean&gt;
&lt;/beans&gt;
</pre>
<p>The downside of using XML configurations is they are not type-safe, meaning errors can be introduced that won't be caught until runtime.</p>
<h4>Java Configuration:</h4>
<p>Using Java-based configuration, beans are defined in a configuration class using the <code>@Bean</code> annotation. The configuration class marked with <code>@Configuration</code> annotation. It indicates that the class contains one or more bean definitions containing <code>@Bean</code> annotations. </p>
<p>For example:</p>
<pre class=""prettyprint lang-java"">@Configuration
public class AppConfig {

    @Bean
    public EmailService emailService() {
        return new EmailService();
    }

    @Bean
    public UserService userService(EmailService emailService) {
        return new UserService(emailService);
    }
}
</pre>
<h4>Annotation-based configuration:</h4>
<p>Spring also provides a component scanning feature, using which spring automatically detect and registers the spring managed beans. </p>
<p>The <code>@ComponentScan</code> annotation, searches for all classes that are marked with stereotypes such as <code>@Service</code>, <code>@Component</code>, <code>@Repository</code>, or <code>@Configuration</code> annotation, and does the bean registration automatically.</p>
<p>For example, if you have a package <code>com.stacktips.app</code> that contains Spring-managed components, you can use <code>@ComponentScan</code> to register all of them with the Spring container. </p>
<pre class=""prettyprint lang-java"">@Configuration  
@ComponentScan(""com.stacktips.app"")  
public class AppConfig {  

}
</pre>
<h4>Bean Identification in Spring Boot:</h4>
<p>In Spring Boot, the bean registering is typically done automatically  using the <code>@ComponentScan</code> annotations rather than an explicit XML or Java configuration. The <code>@ComponentScan</code> annotation is wrapped inside the <code>@SpringBootApplication</code> annotation.</p>
<p>As every spring boot application uses to <code>@SpringBootApplication</code> annotation, we do not have to add the <code>@ComponentScan</code> annotation explicitly. It  performs component scanning starting from the package of your main class.</p>
<p>Hence, in case of Spring Boot, all we need to do is to use appropriate stereotypes for our classes. </p>
<pre class=""prettyprint lang-java"">@Service
public class UserService {
    // Your UserService implementation here
}
</pre>
<h3>Bean Injection</h3>
<p>Bean Injection is the process by which, one object (the dependency) is passed to another object that needs it (the dependent), rather than the dependent object needing to create the dependency itself. </p>
<p>There are 3 main types of bean injection in Spring Boot</p>
<ol>
<li>Field Injection</li>
<li>Constructor Injection</li>
<li>Setter Method injection</li>
</ol>
<h4>Field Injection</h4>
<p>In Field Injection, the dependencies are injected directly into the component's fields using the <code>@Autowired</code> annotation. </p>
<pre class=""prettyprint lang-java"">@Service
public class MyService {

    @Autowired
    private MyRepository myRepository;

    // Your UserService implementation here
}
</pre>
<p>This approach is convenient but, due to direct field access it poses testing challenges;</p>
<h4>Constructor Injection</h4>
<p>Using constructor injection, the dependencies are injected through a component's constructor. The <code>@Autowired</code> annotation can be used on the constructor to indicate that a dependency should be injected into the constructor.</p>
<pre class=""prettyprint lang-java"">@Service
public class MyService {
    private final MyRepository myRepository;

    @Autowired
    public MyService(MyRepository myRepository) {
        this.myRepository = myRepository;
    }
}
</pre>
<p>Starting with Spring <em>4.3</em>, if a class, which is configured as a Spring bean, has only one constructor, the <code>@Autowired</code> annotation can be omitted and Spring will automatically inject all required dependencies.</p>
<p>If you have multiple overloaded constructors, we need to specify one of the constructors using <code>@Autowired</code> annotation.</p>
<h4>Setter Method Injection</h4>
<p>The Setter Injection allows for the modification of an object's dependencies after it has been constructed. This can be useful when an object's dependencies need to change dynamically at runtime.</p>
<p>It's more suitable for optional dependencies that can have default values or can be set to <code>null</code>. </p>
<pre class=""prettyprint lang-java"">@Service
public class MyService {
    private final MyRepository myRepository;

    @Autowired
    public setRepository(MyRepository myRepository) {
        this.myRepository = myRepository;
    }
}
</pre>
<p>Note that the setter injection has a potential risk that of the object might be used before all of its dependencies are set, which can lead to potential <code>NullPointerExceptions</code>.</p>",5,"standard","lesson"
"Logging in Spring Boot","logging-in-spring-boot","In this chapter, we will learn about different logging options available in Spring Boot and understand about different log levels and configurations for your Spring Boot application.","LIVE","<p>Logging is the process of recording events as they occur within your application. The purpose of logging is to create a record of what happened in an application. These events can be anything from errors, warnings or informational messages. </p>
<p>Application logs can be used for a variety of purposes, including:
- Debugging or troubleshooting application
- To monitor the different metrics, such as CPU usage, memory usage, network traffic, etc.
- To audit the activities of a Java application.</p>
<h2>Logging in Spring Boot</h2>
<p>Most applications provide some form of logging, and even if your application doesn’t log anything directly, the dependencies used within your application will certainly log their activity.</p>
<p>To implement logging in your Spring Boot application, you don't have to do any additional configuration as it is built into the Spring Boot framework.</p>
<p>The Logging library is the only mandatory external dependency in the Spring Boot framework.</p>
<p>A log message generally contains following informations:</p>
<ul>
<li>Date and Time: Millisecond precision and easily sortable.</li>
<li>Log Level: <code>ERROR</code>, <code>WARN</code>, <code>INFO</code>, <code>DEBUG</code>, or <code>TRACE</code>.</li>
<li>Process ID.</li>
<li>A <code>--</code> separator to distinguish the start of actual log messages.</li>
<li>Thread name: Enclosed in square brackets (may be truncated for console output).</li>
<li>Logger name: This is usually the class name where the log is printed from</li>
<li>The log message.</li>
</ul>
<h3>Logging Facade (SLF4J)</h3>
<p>The logging dependencies in Spring boot include a Simple Logging Facade (SLF4J) and the Logback framework. </p>
<p>The SLF4J is a simple front-facing facade supported by all major Java logging frameworks. The SLF4J provides a unified API for logging, which helps developers use the same logging API regardless of the underlying logging framework.</p>
<p>![[logging-framewoks-java.webp | center | 500]]</p>
<p>Applications will integrate directly with the Facade and hence it is easy to switch from one logging framework to another without breaking your implementation.</p>
<p>The facade includes the necessary bridges to ensure your application logs are delegated to the corresponding logging framework as per the configuration.</p>
<h3>Logging Frameworks</h3>
<p>These are some of the most popular logging frameworks used in Spring Boot.
- Log4j
- Logback
- Log4j 2
- Jakarta Commons Logging</p>
<p>All of the above frameworks are compatible with SLF4J.</p>
<h3>Log Levels</h3>
<p>Log levels indicate the severity/importance of the log event. Here is the list of log levels used by SLF4J:</p><p><br/></p>
<table>
<tbody><tr>
<th>Log Level</th>
<th>Purpose</th>
</tr>
<tr>
<td>TRACE</td>
<td>Used for debug purpose. It includes most detailed information. </td>
</tr>
<tr>
<td>DEBUG</td>
<td>Used for debugging purposes</td>
</tr>
<tr>
<td>INFO</td>
<td>Used for the normal, expected, relevant event happened.</td>
</tr>
<tr>
<td>WARN</td>
<td>Used to log events caused due to application anomalies, which are auto-recoverable. For example, the DB connection temporarily dropped but auto-connected during the retry.</td>
</tr>
<tr>
<td>ERROR</td>
<td>Used in the event of any fatal errors. These errors will force the administrator’s intervention. These are usually used for incorrect connection strings, missing services, etc.</td>
</tr>
<tr>
<td>FATAL</td>
<td>The <code>FATAL</code> level designates very severe error events that will presumably lead the application to abort. Note that the Logback framework does not have a FATAL level. It is mapped to ERROR.</td>
</tr>
<tr>
<td>OFF</td>
<td>This is a special log level. It has the Highest priority and intended to turn off logging.</td>
</tr>
<tr>
<td>ALL</td>
<td>This is a special log level. It has the lowest priority and is intended to turn on all logging.</td>
</tr>
</tbody></table>
<h2>Logging an Event in Spring Boot</h2>
<p>The following is a simple example of how to log a message in a Spring Boot application:</p>
<pre class=""prettyprint lang-groovy"">import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MyApplication {

    private static final Logger logger = LoggerFactory.getLogger(MyApplication.class);

    public static void main(String[] args) {
        SpringApplication.run(MyApplication.class, args);

        logger.trace(""TRACE message"");
        logger.debug(""DEBUG message"");
        logger.info(""INFO message"");
        logger.warn(""WARNING message"");
        logger.error(""ERROR message"");
        logger.error(""FATAL message"");
    }
}
</pre>
<p>INFO is the default logging level used in Spring Boot. Hence, if we run the above code, it will only log the INFO, WARN, and ERROR events. The TRACE and DEBUG messages will be suppressed.</p>
<h3>Setting Log Level when Starting Application</h3>
<p>We can enable the DEBUG or TRACE mode while starting our application using a <code>—-debug</code> or <code>—-trace</code> flag. Example: </p>
<pre class=""prettyprint lang-shell"">java -jar target/my-app-0.0.1-SNAPSHOT.jar --debug
</pre>
<h3>Setting Log Level for Spring Boot</h3>
<p>You can specify <code>debug=true</code> or <code>trace=true</code> in your <code>application.properties</code> file to enable DEBUG or TRACE mode.</p>
<p>Enabling the debug mode using the above method does not configure your application to log all messages with <code>DEBUG</code> level. It will only allow some of the core loggers inside the Spring Boot starter to log additional messages.</p>
<p>The application log levels can be set from the <code>application.properties</code> file using the following properties.</p>
<pre class=""prettyprint lang-properties"">logging.level.root=WARN
logging.level.com.stacktips.app=TRACE
</pre>
<p>If you run your application, it will print as follows;</p>
<pre class=""prettyprint lang-java"">2023-08-15T00:12:53.419+01:00  INFO 70870 --- [           main] c.stacktips.app.MyApplication  : Starting MyApplication using Java 17.0.7 with PID 70870 (/Users/nilanchala/Downloads/spring-boot-example/target/classes started by nilanchala in /Users/nilanchala/Downloads/spring-boot-example)
2023-08-15T00:12:53.421+01:00 DEBUG 70870 --- [           main] c.stacktips.app.MyApplication  : Running with Spring Boot v3.1.2, Spring v6.0.11
2023-08-15T00:12:53.422+01:00  INFO 70870 --- [           main] c.stacktips.app.MyApplication  : No active profile set, falling back to 1 default profile: ""default""
2023-08-15T00:12:54.235+01:00  INFO 70870 --- [           main] c.stacktips.app.MyApplication  : Started MyApplication in 0.981 seconds (process running for 1.225)
2023-08-15T00:12:54.238+01:00 TRACE 70870 --- [           main] c.stacktips.app.MyApplication  : TRACE message
2023-08-15T00:12:54.238+01:00 DEBUG 70870 --- [           main] c.stacktips.app.MyApplication  : DEBUG message
2023-08-15T00:12:54.238+01:00  INFO 70870 --- [           main] c.stacktips.app.MyApplication  : INFO message
2023-08-15T00:12:54.238+01:00  WARN 70870 --- [           main] c.stacktips.app.MyApplication  : WARNING message
2023-08-15T00:12:54.238+01:00 ERROR 70870 --- [           main] c.stacktips.app.MyApplication  : ERROR message
2023-08-15T00:12:54.238+01:00 ERROR 70870 --- [           main] c.stacktips.app.MyApplication  : FATAL message
</pre>
<h3>Spring Boot Log File Output</h3>
<p>By default, all logs printed from Spring Boot applications are printed only to the console and does not write files. If you want to write log files in addition to the console output, you need to set the following properties:</p>
<pre class=""prettyprint lang-properties""># Log file name
logging.file.name=myapp-log.log

# It will create `spring.log` file in specified path
logging.file.path=/Users/nilanchala/Documents/logs
</pre>
<p>Note that, Spring considers either <code>file</code> or <code>path</code> property, not both.  Log files are automatically rotated when they reach 10 MB size.</p>
<h3>Dynamic Log Level Changes at Runtime</h3>
<p>Spring Boot Actuator provides the ability to change log levels at runtime without restarting the application. This is useful for debugging issues in production without impacting system availability. </p>
<p>For actuator to work, we need to add the following actuator dependency. </p>
<pre class=""prettyprint lang-groovy"">implementation 'org.springframework.boot:spring-boot-starter-actuator'
</pre>
<p>Now, we can expose the Actuator's <code>loggers</code> endpoint in your <code>application.properties</code>:</p>
<pre class=""prettyprint lang-properties"">management.endpoints.web.exposure.include=loggers
</pre>
<p>Now, we can change the log level by sending a POST request to <code>/actuator/loggers/{logger.name}</code>, with a JSON payload specifying the desired log level. For example:</p>
<pre class=""prettyprint lang-shell"">curl --location 'http://localhost:8080/actuator/loggers/com.stacktips.app' \
--header 'Content-Type: application/json' \
--data '{
    ""configuredLevel"": ""DEBUG""
}'
</pre>
<p>Open your web browser and visit <code>http://localhost:8080/actuator/loggers</code>. This will list out all the logs levels for your application by package. </p>
<h2>Logging Pattern Customization</h2>
<p>If you want to customize the log pattern, you can define your custom pattern in <code>application.properties</code> file. For example, to include the class name, method, and line number in the logs:</p>
<pre class=""prettyprint lang-properties"">logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %highlight(%-5level) --- [%15.15thread] %cyan(%logger{40}) : %msg %n
</pre>
<p>This customization can include various elements, such as timestamps, log levels, thread names, logger names, and even colors for different log levels when viewed in a console that supports ANSI colors.</p>
<h3>MDC (Mapped Diagnostic Context) Logging</h3>
<p>Logback's MDC allows you to enrich log messages with contextual information, such as logged in userId, making it easier to trace and debug logs across different components of an application. </p>
<p>You can programmatically add context information to your logs:</p>
<pre class=""prettyprint lang-java"">@SpringBootApplication  
public class MyApplication {  

    private static final Logger logger = LoggerFactory.getLogger(MyApplication.class); 

    public static void main(String[] args) {  
        SpringApplication.run(MyApplication.class, args);  

        String userId = ""user123"";  
        MDC.put(""userId"", userId);  

        logger.trace(""TRACE message"");  
        logger.debug(""DEBUG message"");  
        logger.info(""INFO message"");  
        logger.warn(""WARNING message"");  
        logger.error(""ERROR message"");  
        logger.error(""FATAL message"");  

        MDC.remove(""userId"");  
    }  
}
</pre>
<p>And then include the MDC arguments in your log output pattern:</p>
<pre class=""prettyprint lang-properties"">logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} [%X{userId}] - %msg%n
</pre>
<p>This prints</p>
<pre class=""prettyprint lang-shell"">2024-03-10 23:22:14 [main] INFO  com.stacktips.app.MyApplication [] - Starting MyApplication using Java 17.0.7 with PID 85229 (/Users/nilanchala/Documents/github/StackTipsLab/spring-boot-tutorials/spring-boot-logging/build/classes/java/main started by nilanchala in /Users/nilanchala/Documents/github/StackTipsLab/spring-boot-tutorials/spring-boot-logging)
2024-03-10 23:22:14 [main] DEBUG com.stacktips.app.MyApplication [] - Running with Spring Boot v3.2.3, Spring v6.1.4
2024-03-10 23:22:14 [main] INFO  com.stacktips.app.MyApplication [] - No active profile set, falling back to 1 default profile: ""default""
2024-03-10 23:22:15 [main] INFO  com.stacktips.app.MyApplication [] - Started MyApplication in 1.062 seconds (process running for 1.335)
2024-03-10 23:22:15 [main] DEBUG com.stacktips.app.MyApplication [user123] - DEBUG message
2024-03-10 23:22:15 [main] INFO  com.stacktips.app.MyApplication [user123] - INFO message
2024-03-10 23:22:15 [main] WARN  com.stacktips.app.MyApplication [user123] - WARNING message
2024-03-10 23:22:15 [main] ERROR com.stacktips.app.MyApplication [user123] - ERROR message
2024-03-10 23:22:15 [main] ERROR com.stacktips.app.MyApplication [user123] - FATAL message
</pre>",5,"standard","lesson"
"Understanding Spring Boot Project Structure","understanding-spring-boot-project-structure","This chapter covers, understanding the Spring Boot project structure.","LIVE","<p>Spring Boot is an opinionated framework and it comes with a default project structure that organizes your code based on some of the industry's best practices.</p>
<p>In the previous chapter, we created a Spring boot project using the Spring CLI and the Spring initializer. In both cases, we have used the same configuration for generating our project.</p>
<p>Now let us unzip the project, and open it in the IntelliJ IDE. After unzipping the project, you’ll see a project structure similar to what is shown in the following picture;</p>
<pre class=""prettyprint lang-bash"">movies-api
├── HELP.md
├── build
│   └── libs
│       ├── movies-api-0.0.1-SNAPSHOT-plain.jar
│       └── movies-api-0.0.1-SNAPSHOT.jar
├── build.gradle
├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew
├── gradlew.bat
├── settings.gradle
└── src
    ├── main
    │   ├── java
    │   │   └── com
    │   │       └── stacktips
    │   │           └── app
    │   │               └── MoviesApiApplication.java
    │   └── resources
    │       ├── application.properties
    │       ├── static
    │       └── templates
    └── test
        └── java
            └── com
                └── stacktips
                    └── app
                        └── MoviesApiApplicationTests.java
</pre>
<p>A typical Spring Boot project includes the following folders and files.</p>
<h3>pom.xml (Maven) or build.gradle (Gradle)</h3>
<p>You will either have a <code>pom.xml</code> file or <code>build.gradle</code> file based on the build tool used for your project. This file defines the project metadata, and dependencies for your project and contains the project build configurations.</p>
<p>While generating this project we have selected Gradle as the build tool, hence we see <code>build.gradle</code> file in the root directory. </p>
<h3>The src/main/java Directory</h3>
<p>The <code>src/main/java</code> directory contains the Java source code files for your project. It follows the standard Java packaging structure, where the root package is called as the base package.</p>
<h3>The src/test/java Directory</h3>
<p>This directory contains the unit and integration test classes for your project.</p>
<h3>The build Directory</h3>
<p>This directory is automatically generated by Maven (or Gradle) and contains the compiled Java classes, JAR files, and other build artifacts. We don't need to manually modify anything in this directory. </p>
<p>If your source code is tracked in git, this directory is generally not tracked and added to the <code>.gitignore</code> file. </p>
<h3>The <strong>Main Application Class</strong></h3>
<p>The <code>MoviesAPIApplication</code> class is the entry point of your Spring Boot application and contains a <code>main()</code> method. It is responsible for initializing the Spring application context and starting the Spring application. </p>
<p>This class is annotated with <code>@SpringBootApplication</code> annotation. </p>
<p>The <code>@SpringBootApplication</code> annotation is a convenience annotation that combines 3 other Spring Boot annotations.</p>
<ul>
<li>The <code>@EnableAutoConfiguration</code> enables Spring Boot's auto-configuration mechanism, which automatically configures many common Spring beans based on the dependencies that are present in the classpath.</li>
<li>The <code>@Configuration</code> annotation indicates that the class contains one or more bean definitions containing <code>@Bean</code> annotations.</li>
<li>The <code>@ComponentScan</code> annotation scans the classpath for classes annotated with <code>@Component</code>, <code>@Service</code>, <code>@Repository</code>, or <code>@Configuration</code> annotations. Classes that are registered with any of the 4 annotations are registered as beans in the Spring application context.</li>
</ul>
<p>The inner workings of Dependency Injection in Spring Boot are discussed at length in Chapter 4.</p>
<p>By using the <code>@SpringBootApplication</code> annotation, you can simplify the configuration of your Spring Boot application as you don't need to declare the <code>@Configuration</code>, <code>@EnableAutoConfiguration</code>, and <code>@ComponentScan</code> annotations separately.</p>
<pre class=""prettyprint lang-java"">@SpringBootApplication
public class HelloSpringBootApplication {

    public static void main(String[] args) {
        SpringApplication.run(HelloSpringBootApplication.class, args);
    }
}
</pre>
<h3>The src/main/resources directory</h3>
<p>The <code>resources</code> directory is for non-Java resources that your application needs, such as configuration files, static assets (e.g., HTML, CSS, JavaScript), templates, and other resources.</p>
<h3><strong>The Application Properties Class</strong></h3>
<p>The <code>application.properties</code> file contains the configurations for your Spring Boot applications. It is located in the <code>src/main/resources</code> directory. The properties file contains key-value pairs separated by equals <code>=</code>, where the key is the name of the property and the value is the value of the property.</p>
<p>The <code>application.properties</code> file contains all the configurations such as:</p>
<ul>
<li>Configuring the server port that the application should run</li>
<li>The database connection-related configuration such as database URL, username, and password</li>
<li>SMTP email server settings</li>
<li>To set the log levels</li>
</ul>
<pre class=""prettyprint lang-java"">server.port=8080
server.contextPath=/

spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1
spring.datasource.password=root
spring.datasource.username=admin
spring.datasource.type=mysql
</pre>
<p>During the Spring boot context initialization, the properties defined in the <code>application.properties</code> file are used to conditionally create or configure Spring beans.</p>
<p><strong>Static Content</strong></p>
<p>The <code>resources/static</code> folder is dedicated to all the static resources, templates, and property files. This folder contains static resources such as CSS, JS, and images.</p>
<h3>resources/templates</h3>
<p>The <code>resources/templates</code> directory serves as the default location for storing the server-side view templates that are used for rendering dynamic content on web pages. These templates are processed by a templating engine to generate the final HTML output before sending a response to the browser.</p>
<p>Spring Boot supports the following template engines by default.</p>
<ul>
<li><strong>Thymeleaf:</strong> This is the default template engine used in Spring Boot and activated using <code>spring-boot-starter-thymeleaf</code> starter dependency.</li>
<li><strong>FreeMarker:</strong> FreeMarker is another popular option and can be activated using <code>spring-boot-starter-freemarker</code> starter dependency.</li>
<li><strong>Mustache:</strong> A logic-less templating engine focusing on simplicity and separation of concerns. activated using <code>spring-boot-starter-mustache</code> starter dependency.</li>
</ul>
<p>All these template engines automatically resolve the template files from the <code>/resources/template</code> directory automatically.</p>",3,"standard","lesson"
"Using Flyway for Database Migration in Spring Boot","using-flyway-for-database-migration-in-spring-boot","A step-by-step guide to configure and use flyway for managing database migrations in spring boot application. This example uses Springboot3, MySQL8 & JPA.","LIVE","<p>Flyway is a popular open-source tool for managing database migrations. It makes it easier to manage and version control the database schema for your application.</p>
<p>Flyway supports almost all popular databases including Oracle, SQL Server, DB2, MySQL, Amazon RDS, Aurora MySQL, MariaDB, PostgreSQL and more. For the full list of supported database you can check the <a href=""https://documentation.red-gate.com/fd/supported-databases-184127454.html"">official documentation</a> here. </p>
<h2>How Flyway Migrations Works</h2>
<p>All changes to the database are called migrations and can be either of type <strong>versioned</strong> or <strong>repeatable</strong> migrations. The migration schemas can be written in either Sql or Java.</p>
<p><strong>Versioned migrations</strong> are the most common type of migration, they are applied once in the order they appear. Versioned migrations are used for creating, altering, dropping tables, indexes or foreign keys. Versioned migration files uses naming convention as <code>V1__add_user_table.sql</code> and <code>V2__alter_user_table.sql</code> e.g.</p>
<p><strong>Repeatable migration</strong> on other hand are (re-)applied every time their checksum changes. Repeatable migration are always applied last, after all pending versioned migrations have been executed. Repeatable migration files uses naming convention such as <code>R__add_new_table.sql</code> </p>
<p>When we start the application to an empty database, Flyway will first create a schema history table (<code>flyway_schema_history</code>) table. This table will be used to track the state of the database.</p>
<p>After the <code>flyway_schema_history</code> table is created, it will scan the classpath for the migration files. The migrations are then <strong>sorted</strong> based on their <strong>version number</strong> and applied in order. </p>
<p>As each migration gets applied, the schema history table is updated accordingly.</p>
<h2>Using Flyway for Database Migration in Spring Boot</h2>
<p>In this tutorial we will create a Spring Boot application to deal with MySQL8 database migration using Flyway.  This example uses Java 17, Spring Boot 3.2.4 and MySQL 8.x. For the database operation we will use Spring boot JPA. </p>
<h3>Install Flyway Dependencies</h3>
<p>First, add the following dependencies to your <code>pom.xml</code> or to your <code>build.gradle</code> file. </p>
<ul>
<li>The <code>spring-boot-starter-data-jpa</code> dependency is used for using Spring Data Java Persistence API (JPA) with Hibernate.</li>
<li>The <code>mysql-connector-j</code> is the official JDBC driver for MySQL databases. It allows your Java application to connect to a MySQL database for operations such as creating, reading, updating, and deleting records. </li>
<li>The <code>flyway-core</code> dependency is essential for integrating Flyway into your project, enabling migrations and version control for your database schema.</li>
<li>The <code>flyway-mysql</code> dependency adds the Flyway support for MySQL databases. It provides MySQL-specific functionality and optimizations for Flyway operations. It's necessary when your application uses Flyway for managing database migrations on a MySQL database.</li>
</ul>
<p><strong>pom.xml</strong></p>
<pre class=""prettyprint lang-xml"">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;
        &lt;scope&gt;runtime&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;  
        &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;  
        &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;  
    &lt;/dependency&gt;  
    &lt;dependency&gt;  
        &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;  
        &lt;artifactId&gt;flyway-mysql&lt;/artifactId&gt;  
    &lt;/dependency&gt;

    &lt;!-- Other dependencies--&gt;
&lt;/dependencies&gt;       
</pre>
<h3>Configure the Database Connection</h3>
<p>Now let us provide the database connection properties in your <code>application.properties</code> file.  </p>
<pre class=""prettyprint lang-properties"">spring.datasource.url=jdbc:mysql://localhost:3306/test_db  
spring.datasource.username=root  
spring.datasource.password=password  
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver  

spring.jpa.generate-ddl=false  
spring.jpa.hibernate.ddl-auto=none  
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect  
spring.jpa.show-sql=true
</pre>
<h3>Create Database Changelog Files</h3>
<p>Le us now create two database migration schema files inside <code>resources/db/migration</code> directory. For this we will use the Versioned migration and the file name for the script file will be <code>V1__added_user_table.sql</code> and <code>V2__added_user_profile_table.sql</code>. </p>
<p><strong>V1__added_user_table.sql</strong></p>
<pre class=""prettyprint lang-sql"">create table user (  
    is_active bit not null,  
    id bigint not null auto_increment,  
    about_me varchar(255),  
    email varchar(255),  
    first_name varchar(255),  
    last_name varchar(255),  
    location varchar(255),  
    password varchar(255),  
    phone varchar(255),  
    user_role enum ('ADMIN','MENTOR','STUDENT'),  
    primary key (id)  
) engine=InnoDB;
</pre>
<p><strong>V2__added_user_profile_table.sql</strong></p>
<pre class=""prettyprint lang-sql"">create table user_profile (  
    id bigint not null auto_increment,  
    post_count bigint,  
    user_id bigint,  
    email varchar(255),  
    first_name varchar(255),  
    last_name varchar(255),  
    phone varchar(255),  
    username varchar(255),  
    website varchar(255),  
    primary key (id)  
) engine=InnoDB;  

alter table user_profile  
   add constraint UK_ebc21hy5j7scdvcjt0jy6xxrv unique (user_id);  

alter table user_profile  
   add constraint FK6kwj5lk78pnhwor4pgosvb51r  
   foreign key (user_id)  
   references user (id);
</pre>
<p>These tables are mapped to the following entity classes. </p>
<p><strong>User.class</strong></p>
<pre class=""prettyprint lang-java"">@Entity 
@Getter 
@Setter
@AllArgsConstructor  
@NoArgsConstructor  
public class User {  

    @Id  
    @GeneratedValue(strategy = GenerationType.IDENTITY)  
    private Long id;  

    private String firstName;  
    private String lastName;  
    private String email;  
    private String password;  
    private boolean isActive;  

    @Enumerated(EnumType.STRING)  
    private UserRole userRole;  

    private String location;  
    private String aboutMe;  
    private String phone;  
}

@Getter  
@RequiredArgsConstructor  
public enum UserRole {  
    ADMIN(""admin""),  
    MENTOR(""mentor""),  
    STUDENT(""student"");  

    private final String roleDisplayName;  

}
</pre>
<p><strong>UserProfile.java</strong></p>
<pre class=""prettyprint lang-java"">@Entity  
@Data
@AllArgsConstructor  
@NoArgsConstructor  
public class UserProfile {  

    @Id  
    @GeneratedValue(strategy = GenerationType.IDENTITY)  
    private Long id;  
    private String username;  
    private String firstName;  
    private String lastName;  
    private String email;  

    private String phone;  
    private String website;  
    private Long postCount;  

    @OneToOne  
    @JoinColumn(name = ""user_id"", referencedColumnName = ""id"")  
    private User user;  
}
</pre>
<h3>Configure Flyway</h3>
<p>We can control the migration process using following properties in <code>application.properties</code> file:</p>
<p><strong>application.properties</strong></p>
<pre class=""prettyprint lang-properties"">spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.validate-on-migrate=true
spring.flyway.locations=classpath:db/migration
</pre>
<table>
<thead>
<tr>
<th>Property</th>
<th>Use</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>spring.flyway.enabled=true</code></td>
<td>Enables or disables Flyway's migration functionality for your application</td>
</tr>
<tr>
<td><code>spring.flyway.validate-on-migrate=true</code></td>
<td>When this property is set to <code>true</code>, Flyway will validate the applied migrations against the migration scripts every time it runs a migration. This ensures that the migrations applied to the database match the ones available in the project. <br/><br/>If validation fails, Flyway will prevent the migration from running, which helps catch potential problems early.</td>
</tr>
<tr>
<td><code>spring.flyway.baseline-on-migrate=true</code></td>
<td>Used when you have an existing database that wasn't managed by Flyway and you want to start using Flyway to manage it. Setting this to <code>true</code> allows Flyway to baseline an existing database, marking it as baseline and starting to manage subsequent migrations.</td>
</tr>
<tr>
<td><code>spring.flyway.locations</code></td>
<td>Specifies the locations of migration scripts within your project.</td>
</tr>
</tbody>
</table>
<p><br/></p><h3 class=""""><span>Run the Migrations</span></h3><p>Now you can apply the migrations using following command</p>
<pre class=""prettyprint lang-shell"">./mvnw flyway:migrate
</pre>
<p>Alternatively, when you start your Spring Boot application, Flyway will automatically check the <code>db/migration</code> directory for any new migrations that have not yet been applied to the database and will apply them in version order. </p>
<pre class=""prettyprint lang-shell"">./mvnw spring-boot:run
</pre>
<h3>Reverse/Undo Migrations in Flyway</h3>
<p>Flyway allows you to revert migrations that was applied to the database. However, this feature is only available in the Flyway Teams (Commercial) edition. </p>
<p>If you're using the community/free version of Flyway, the workaround is to create a new migration changelog file that undoes the changes made by the previous migration and apply them. </p>
<p>For example <strong>V3__remove_user_table.sql</strong></p>
<pre class=""prettyprint lang-sql"">DROP TABLE user;
</pre>
<p>Now apply migration to reverse/undo <code>user</code> table creation.</p>
<pre class=""prettyprint lang-shell"">./mvnw flyway:migrate
</pre>",0,"standard","post"
"How to Enable or Disable @RestController in Spring Boot","how-to-enable-or-disable-restcontroller-in-spring-boot","Learn how to enable or disable @RestController in Spring Boot with this step-by-step tutorial.","LIVE","<p>If you have continuous integration and continuous deployment of your application in production, you often need to hide certain features without being immediately available to all your users. This can be done using feature flags. Feature flags allow you to control the incremental roll-out of new features to your users.</p>
<p>In this article, we will cover how to enable or disable specific features within in Spring Boot application using the native Spring features. It demonstrates enabling or disabling REST API controller, but the same approach can be applied to services and other types of applications as well.</p>
<div class=""alert alert-warning"" role=""alert""><i class=""admonition admonition-warning"">Warning</i>All of these options are sufficient for simple use cases and small projects. However, it is limited when you have complex requirements like dynamic toggling, advanced strategies, metrics, and management features.</div>
<p>Spring Boot offers multiple options to enable or disable specific features. </p>
<ol>
<li>Using Spring Profiles</li>
<li>Using a Configuration Property</li>
<li>Using Conditional Beans</li>
</ol>
<h3>Option-1: Using Spring Profiles</h3>
<p>This is the most straightforward approach to enable or disable specific features based on spring profiles. We can annotate our controller class with <code>@Profile</code> annotation by passing a profile name. </p>
<pre class=""prettyprint lang-java"">
@RestController  
@RequestMapping(""/products"")  
@Profile(""enable-products-api"")  
public class ProductController {    
    // Endpoint mappings go here
}
</pre>
<p>You can activate this profile using the following property</p>
<pre class=""prettyprint lang-properties"">
spring.profiles.active=enable-products-api
</pre>
<p>or, the same can be passed in the command line args using</p>
<pre class=""prettyprint lang-bash"">
./gradlew bootRun -D spring.profiles.active=enable-products-api
</pre>
<p>Although this is very straightforward, it comes with several downsides:</p>
<ul>
<li>Profiles are configured at application startup and cannot be changed without restarting the application. This means you cannot dynamically enable or disable endpoints at runtime.</li>
<li>Also, If you have multiple endpoints that need to be enabled or disabled independently, then you will end up creating a large number of profiles. </li>
<li>Profiles are primarily intended to segregate environment-specific configurations (like <code>dev</code>, <code>staging</code>, and <code>prod</code>). Using them to control features might not be appropriate because they don't change dynamically based on application state or external inputs.</li>
</ul>
<h3>Option 2: Using a Configuration Property</h3>
<p>We can control the enabling or disabling of beans based on the configuration property defined within your <code>application.properties</code> or <code>application.yml</code> file. To control the activation of the controller, we need to use <code>@ConditionalOnProperty</code>annotation on your controller class.  </p>
<p>Let us first add a property to the <code>application.properties</code> file</p>
<pre class=""prettyprint lang-properties"">
features.movies-api.enabled=true
</pre>
<p>Now, we can annotate your controller with <code>@ConditionalOnProperty</code> annotation and validate for the configured value. If the validation matches, then Spring will initialise this bean. </p>
<pre class=""prettyprint lang-java"">
@RestController
@RequestMapping(""/products"")
@ConditionalOnProperty(name = ""features.movies-api.enabled"", havingValue = ""true"")
public class ProductController {

}
</pre>
<p>Similar to the profiles, any changes in the properties require an application restart to take effect. </p>
<p>So with this approach, it is not possible to enable or disable a controller without application redeployment, unless we use an external configuration server such as <strong>Spring Cloud Config</strong>. </p>
<h3>Option-3: Conditional Beans</h3>
<p>Another approach is to use the conditional beans to enable or disable beans programmatically.  We can create a custom condition class to write our condition. </p>
<pre class=""prettyprint lang-java"">
import org.springframework.context.annotation.Condition;  
import org.springframework.context.annotation.ConditionContext;  
import org.springframework.core.type.AnnotatedTypeMetadata;

public class FeatureCondition implements Condition {  

    @Override  
    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {  
        String isEnabled = context.getEnvironment()
            .getProperty(""features.movies-api.enabled"", ""false"");  
        return Boolean.parseBoolean(isEnabled);  
    }  
}
</pre>
<p>Notice that, the <code>FeatureCondition</code> class uses the <code>features.movies-api.enabled=true</code> property to control if an endpoint is enabled/disabled. </p>
<p>The custom condition class can be used by annotating the controller with the `@Condition
annotation.</p>
<pre class=""prettyprint lang-java"">
@RestController  
@RequestMapping(""/products"")  
@Conditional(FeatureCondition.class)  
public class ProductController {
    // Endpoint mappings go here
}
</pre>
<p>The conditional bean provides a programmatical approach but provides very limited control. </p>
<p>If we want to control the feature toggle per endpoint, we can create a custom annotation with a method target. </p>
<pre class=""prettyprint lang-java"">
@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Conditional(FeatureCondition.class)
public @interface ConditionalOnController {

}
</pre>
<p>Now, we can apply <code>@ConditionalOnController</code> annotation for a specific endpoint as follows;</p>
<pre class=""prettyprint lang-java"">
@ConditionalOnController  
@GetMapping(""/{id}"")  
public Product getProduct(@PathVariable Long id) {  
    return products.stream()  
            .filter(product -&gt; Objects.equals(product.getId(), id))  
            .findFirst()  
            .orElse(null);  
}
</pre>
<h3>Conclusion</h3>
<p>These are some of the common methods to enable or disable specific controller endpoints in Spring Boot. You can choose the one that best fits your use case.</p>
<p>All of these options are sufficient for simple use cases and small projects. However, it is limited when you have complex requirements like dynamic toggling, advanced strategies, metrics, and management features.</p>
<p>If you have such advanced requirements you should consider using a feature flag library like Togglz or FF4J.</p>",0,"standard","post"
